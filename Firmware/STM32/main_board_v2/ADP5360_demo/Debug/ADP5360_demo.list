
ADP5360_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e054  08000270  08000270  00001270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800e2c4  0800e2c4  0000f2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e3c4  0800e3c4  0000f3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e3cc  0800e3cc  0000f3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e3d0  0800e3d0  0000f3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  0800e3d4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000848  2000000c  0800e3dd  0001000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000854  0800e3dd  00010854  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00010009  2**0
                  CONTENTS, READONLY
 10 .debug_info   000310cc  00000000  00000000  0001003f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005270  00000000  00000000  0004110b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002890  00000000  00000000  00046380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001f9c  00000000  00000000  00048c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000451ed  00000000  00000000  0004abac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000361ad  00000000  00000000  0008fd99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a2818  00000000  00000000  000c5f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0026875e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b200  00000000  00000000  002687a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008d  00000000  00000000  002739a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000270 <__do_global_dtors_aux>:
 8000270:	b510      	push	{r4, lr}
 8000272:	4c05      	ldr	r4, [pc, #20]	@ (8000288 <__do_global_dtors_aux+0x18>)
 8000274:	7823      	ldrb	r3, [r4, #0]
 8000276:	b933      	cbnz	r3, 8000286 <__do_global_dtors_aux+0x16>
 8000278:	4b04      	ldr	r3, [pc, #16]	@ (800028c <__do_global_dtors_aux+0x1c>)
 800027a:	b113      	cbz	r3, 8000282 <__do_global_dtors_aux+0x12>
 800027c:	4804      	ldr	r0, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x20>)
 800027e:	f3af 8000 	nop.w
 8000282:	2301      	movs	r3, #1
 8000284:	7023      	strb	r3, [r4, #0]
 8000286:	bd10      	pop	{r4, pc}
 8000288:	2000000c 	.word	0x2000000c
 800028c:	00000000 	.word	0x00000000
 8000290:	0800e2ac 	.word	0x0800e2ac

08000294 <frame_dummy>:
 8000294:	b508      	push	{r3, lr}
 8000296:	4b03      	ldr	r3, [pc, #12]	@ (80002a4 <frame_dummy+0x10>)
 8000298:	b11b      	cbz	r3, 80002a2 <frame_dummy+0xe>
 800029a:	4903      	ldr	r1, [pc, #12]	@ (80002a8 <frame_dummy+0x14>)
 800029c:	4803      	ldr	r0, [pc, #12]	@ (80002ac <frame_dummy+0x18>)
 800029e:	f3af 8000 	nop.w
 80002a2:	bd08      	pop	{r3, pc}
 80002a4:	00000000 	.word	0x00000000
 80002a8:	20000010 	.word	0x20000010
 80002ac:	0800e2ac 	.word	0x0800e2ac

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295
 80008d0:	f000 b97e 	b.w	8000bd0 <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008f0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80008f2:	460c      	mov	r4, r1
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d14d      	bne.n	8000994 <__udivmoddi4+0xa8>
 80008f8:	428a      	cmp	r2, r1
 80008fa:	460f      	mov	r7, r1
 80008fc:	4684      	mov	ip, r0
 80008fe:	4696      	mov	lr, r2
 8000900:	fab2 f382 	clz	r3, r2
 8000904:	d960      	bls.n	80009c8 <__udivmoddi4+0xdc>
 8000906:	b14b      	cbz	r3, 800091c <__udivmoddi4+0x30>
 8000908:	fa02 fe03 	lsl.w	lr, r2, r3
 800090c:	f1c3 0220 	rsb	r2, r3, #32
 8000910:	409f      	lsls	r7, r3
 8000912:	fa00 fc03 	lsl.w	ip, r0, r3
 8000916:	fa20 f202 	lsr.w	r2, r0, r2
 800091a:	4317      	orrs	r7, r2
 800091c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000920:	fa1f f48e 	uxth.w	r4, lr
 8000924:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000928:	fbb7 f1f6 	udiv	r1, r7, r6
 800092c:	fb06 7711 	mls	r7, r6, r1, r7
 8000930:	fb01 f004 	mul.w	r0, r1, r4
 8000934:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000938:	4290      	cmp	r0, r2
 800093a:	d908      	bls.n	800094e <__udivmoddi4+0x62>
 800093c:	eb1e 0202 	adds.w	r2, lr, r2
 8000940:	f101 37ff 	add.w	r7, r1, #4294967295
 8000944:	d202      	bcs.n	800094c <__udivmoddi4+0x60>
 8000946:	4290      	cmp	r0, r2
 8000948:	f200 812d 	bhi.w	8000ba6 <__udivmoddi4+0x2ba>
 800094c:	4639      	mov	r1, r7
 800094e:	1a12      	subs	r2, r2, r0
 8000950:	fa1f fc8c 	uxth.w	ip, ip
 8000954:	fbb2 f0f6 	udiv	r0, r2, r6
 8000958:	fb06 2210 	mls	r2, r6, r0, r2
 800095c:	fb00 f404 	mul.w	r4, r0, r4
 8000960:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000964:	4564      	cmp	r4, ip
 8000966:	d908      	bls.n	800097a <__udivmoddi4+0x8e>
 8000968:	eb1e 0c0c 	adds.w	ip, lr, ip
 800096c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000970:	d202      	bcs.n	8000978 <__udivmoddi4+0x8c>
 8000972:	4564      	cmp	r4, ip
 8000974:	f200 811a 	bhi.w	8000bac <__udivmoddi4+0x2c0>
 8000978:	4610      	mov	r0, r2
 800097a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800097e:	ebac 0c04 	sub.w	ip, ip, r4
 8000982:	2100      	movs	r1, #0
 8000984:	b125      	cbz	r5, 8000990 <__udivmoddi4+0xa4>
 8000986:	fa2c f303 	lsr.w	r3, ip, r3
 800098a:	2200      	movs	r2, #0
 800098c:	e9c5 3200 	strd	r3, r2, [r5]
 8000990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000994:	428b      	cmp	r3, r1
 8000996:	d905      	bls.n	80009a4 <__udivmoddi4+0xb8>
 8000998:	b10d      	cbz	r5, 800099e <__udivmoddi4+0xb2>
 800099a:	e9c5 0100 	strd	r0, r1, [r5]
 800099e:	2100      	movs	r1, #0
 80009a0:	4608      	mov	r0, r1
 80009a2:	e7f5      	b.n	8000990 <__udivmoddi4+0xa4>
 80009a4:	fab3 f183 	clz	r1, r3
 80009a8:	2900      	cmp	r1, #0
 80009aa:	d14d      	bne.n	8000a48 <__udivmoddi4+0x15c>
 80009ac:	42a3      	cmp	r3, r4
 80009ae:	f0c0 80f2 	bcc.w	8000b96 <__udivmoddi4+0x2aa>
 80009b2:	4290      	cmp	r0, r2
 80009b4:	f080 80ef 	bcs.w	8000b96 <__udivmoddi4+0x2aa>
 80009b8:	4606      	mov	r6, r0
 80009ba:	4623      	mov	r3, r4
 80009bc:	4608      	mov	r0, r1
 80009be:	2d00      	cmp	r5, #0
 80009c0:	d0e6      	beq.n	8000990 <__udivmoddi4+0xa4>
 80009c2:	e9c5 6300 	strd	r6, r3, [r5]
 80009c6:	e7e3      	b.n	8000990 <__udivmoddi4+0xa4>
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f040 80a2 	bne.w	8000b12 <__udivmoddi4+0x226>
 80009ce:	1a8a      	subs	r2, r1, r2
 80009d0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80009d4:	fa1f f68e 	uxth.w	r6, lr
 80009d8:	2101      	movs	r1, #1
 80009da:	fbb2 f4f7 	udiv	r4, r2, r7
 80009de:	fb07 2014 	mls	r0, r7, r4, r2
 80009e2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80009e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009ea:	fb06 f004 	mul.w	r0, r6, r4
 80009ee:	4290      	cmp	r0, r2
 80009f0:	d90f      	bls.n	8000a12 <__udivmoddi4+0x126>
 80009f2:	eb1e 0202 	adds.w	r2, lr, r2
 80009f6:	f104 38ff 	add.w	r8, r4, #4294967295
 80009fa:	bf2c      	ite	cs
 80009fc:	f04f 0901 	movcs.w	r9, #1
 8000a00:	f04f 0900 	movcc.w	r9, #0
 8000a04:	4290      	cmp	r0, r2
 8000a06:	d903      	bls.n	8000a10 <__udivmoddi4+0x124>
 8000a08:	f1b9 0f00 	cmp.w	r9, #0
 8000a0c:	f000 80c8 	beq.w	8000ba0 <__udivmoddi4+0x2b4>
 8000a10:	4644      	mov	r4, r8
 8000a12:	1a12      	subs	r2, r2, r0
 8000a14:	fa1f fc8c 	uxth.w	ip, ip
 8000a18:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a1c:	fb07 2210 	mls	r2, r7, r0, r2
 8000a20:	fb00 f606 	mul.w	r6, r0, r6
 8000a24:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000a28:	4566      	cmp	r6, ip
 8000a2a:	d908      	bls.n	8000a3e <__udivmoddi4+0x152>
 8000a2c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000a30:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a34:	d202      	bcs.n	8000a3c <__udivmoddi4+0x150>
 8000a36:	4566      	cmp	r6, ip
 8000a38:	f200 80bb 	bhi.w	8000bb2 <__udivmoddi4+0x2c6>
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	ebac 0c06 	sub.w	ip, ip, r6
 8000a42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a46:	e79d      	b.n	8000984 <__udivmoddi4+0x98>
 8000a48:	f1c1 0620 	rsb	r6, r1, #32
 8000a4c:	408b      	lsls	r3, r1
 8000a4e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000a52:	fa22 f706 	lsr.w	r7, r2, r6
 8000a56:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a5a:	40f4      	lsrs	r4, r6
 8000a5c:	408a      	lsls	r2, r1
 8000a5e:	431f      	orrs	r7, r3
 8000a60:	ea4e 030c 	orr.w	r3, lr, ip
 8000a64:	fa00 fe01 	lsl.w	lr, r0, r1
 8000a68:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a70:	fa1f fc87 	uxth.w	ip, r7
 8000a74:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a78:	fb08 4410 	mls	r4, r8, r0, r4
 8000a7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a80:	fb00 f90c 	mul.w	r9, r0, ip
 8000a84:	45a1      	cmp	r9, r4
 8000a86:	d90e      	bls.n	8000aa6 <__udivmoddi4+0x1ba>
 8000a88:	193c      	adds	r4, r7, r4
 8000a8a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a8e:	bf2c      	ite	cs
 8000a90:	f04f 0b01 	movcs.w	fp, #1
 8000a94:	f04f 0b00 	movcc.w	fp, #0
 8000a98:	45a1      	cmp	r9, r4
 8000a9a:	d903      	bls.n	8000aa4 <__udivmoddi4+0x1b8>
 8000a9c:	f1bb 0f00 	cmp.w	fp, #0
 8000aa0:	f000 8093 	beq.w	8000bca <__udivmoddi4+0x2de>
 8000aa4:	4650      	mov	r0, sl
 8000aa6:	eba4 0409 	sub.w	r4, r4, r9
 8000aaa:	fa1f f983 	uxth.w	r9, r3
 8000aae:	fbb4 f3f8 	udiv	r3, r4, r8
 8000ab2:	fb08 4413 	mls	r4, r8, r3, r4
 8000ab6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000abe:	45a4      	cmp	ip, r4
 8000ac0:	d906      	bls.n	8000ad0 <__udivmoddi4+0x1e4>
 8000ac2:	193c      	adds	r4, r7, r4
 8000ac4:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ac8:	d201      	bcs.n	8000ace <__udivmoddi4+0x1e2>
 8000aca:	45a4      	cmp	ip, r4
 8000acc:	d87a      	bhi.n	8000bc4 <__udivmoddi4+0x2d8>
 8000ace:	4643      	mov	r3, r8
 8000ad0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ad4:	eba4 040c 	sub.w	r4, r4, ip
 8000ad8:	fba0 9802 	umull	r9, r8, r0, r2
 8000adc:	4544      	cmp	r4, r8
 8000ade:	46cc      	mov	ip, r9
 8000ae0:	4643      	mov	r3, r8
 8000ae2:	d302      	bcc.n	8000aea <__udivmoddi4+0x1fe>
 8000ae4:	d106      	bne.n	8000af4 <__udivmoddi4+0x208>
 8000ae6:	45ce      	cmp	lr, r9
 8000ae8:	d204      	bcs.n	8000af4 <__udivmoddi4+0x208>
 8000aea:	3801      	subs	r0, #1
 8000aec:	ebb9 0c02 	subs.w	ip, r9, r2
 8000af0:	eb68 0307 	sbc.w	r3, r8, r7
 8000af4:	b15d      	cbz	r5, 8000b0e <__udivmoddi4+0x222>
 8000af6:	ebbe 020c 	subs.w	r2, lr, ip
 8000afa:	eb64 0403 	sbc.w	r4, r4, r3
 8000afe:	fa04 f606 	lsl.w	r6, r4, r6
 8000b02:	fa22 f301 	lsr.w	r3, r2, r1
 8000b06:	40cc      	lsrs	r4, r1
 8000b08:	431e      	orrs	r6, r3
 8000b0a:	e9c5 6400 	strd	r6, r4, [r5]
 8000b0e:	2100      	movs	r1, #0
 8000b10:	e73e      	b.n	8000990 <__udivmoddi4+0xa4>
 8000b12:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b16:	f1c3 0120 	rsb	r1, r3, #32
 8000b1a:	fa04 f203 	lsl.w	r2, r4, r3
 8000b1e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b22:	40cc      	lsrs	r4, r1
 8000b24:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000b28:	fa20 f101 	lsr.w	r1, r0, r1
 8000b2c:	fa1f f68e 	uxth.w	r6, lr
 8000b30:	fbb4 f0f7 	udiv	r0, r4, r7
 8000b34:	430a      	orrs	r2, r1
 8000b36:	fb07 4410 	mls	r4, r7, r0, r4
 8000b3a:	0c11      	lsrs	r1, r2, #16
 8000b3c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000b40:	fb00 f406 	mul.w	r4, r0, r6
 8000b44:	428c      	cmp	r4, r1
 8000b46:	d90e      	bls.n	8000b66 <__udivmoddi4+0x27a>
 8000b48:	eb1e 0101 	adds.w	r1, lr, r1
 8000b4c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b50:	bf2c      	ite	cs
 8000b52:	f04f 0901 	movcs.w	r9, #1
 8000b56:	f04f 0900 	movcc.w	r9, #0
 8000b5a:	428c      	cmp	r4, r1
 8000b5c:	d902      	bls.n	8000b64 <__udivmoddi4+0x278>
 8000b5e:	f1b9 0f00 	cmp.w	r9, #0
 8000b62:	d02c      	beq.n	8000bbe <__udivmoddi4+0x2d2>
 8000b64:	4640      	mov	r0, r8
 8000b66:	1b09      	subs	r1, r1, r4
 8000b68:	b292      	uxth	r2, r2
 8000b6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b6e:	fb07 1114 	mls	r1, r7, r4, r1
 8000b72:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b76:	fb04 f106 	mul.w	r1, r4, r6
 8000b7a:	4291      	cmp	r1, r2
 8000b7c:	d907      	bls.n	8000b8e <__udivmoddi4+0x2a2>
 8000b7e:	eb1e 0202 	adds.w	r2, lr, r2
 8000b82:	f104 38ff 	add.w	r8, r4, #4294967295
 8000b86:	d201      	bcs.n	8000b8c <__udivmoddi4+0x2a0>
 8000b88:	4291      	cmp	r1, r2
 8000b8a:	d815      	bhi.n	8000bb8 <__udivmoddi4+0x2cc>
 8000b8c:	4644      	mov	r4, r8
 8000b8e:	1a52      	subs	r2, r2, r1
 8000b90:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000b94:	e721      	b.n	80009da <__udivmoddi4+0xee>
 8000b96:	1a86      	subs	r6, r0, r2
 8000b98:	eb64 0303 	sbc.w	r3, r4, r3
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	e70e      	b.n	80009be <__udivmoddi4+0xd2>
 8000ba0:	3c02      	subs	r4, #2
 8000ba2:	4472      	add	r2, lr
 8000ba4:	e735      	b.n	8000a12 <__udivmoddi4+0x126>
 8000ba6:	3902      	subs	r1, #2
 8000ba8:	4472      	add	r2, lr
 8000baa:	e6d0      	b.n	800094e <__udivmoddi4+0x62>
 8000bac:	44f4      	add	ip, lr
 8000bae:	3802      	subs	r0, #2
 8000bb0:	e6e3      	b.n	800097a <__udivmoddi4+0x8e>
 8000bb2:	44f4      	add	ip, lr
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	e742      	b.n	8000a3e <__udivmoddi4+0x152>
 8000bb8:	3c02      	subs	r4, #2
 8000bba:	4472      	add	r2, lr
 8000bbc:	e7e7      	b.n	8000b8e <__udivmoddi4+0x2a2>
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	4471      	add	r1, lr
 8000bc2:	e7d0      	b.n	8000b66 <__udivmoddi4+0x27a>
 8000bc4:	3b02      	subs	r3, #2
 8000bc6:	443c      	add	r4, r7
 8000bc8:	e782      	b.n	8000ad0 <__udivmoddi4+0x1e4>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	443c      	add	r4, r7
 8000bce:	e76a      	b.n	8000aa6 <__udivmoddi4+0x1ba>

08000bd0 <__aeabi_idiv0>:
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <ADP5360_Init>:
 */

#include "ADP5360.h"


ADP5360_StatusTypeDef ADP5360_Init(ADP5360_HandleTypeDef *dev, I2C_HandleTypeDef *i2cHandle){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Assign I2C handle */
	dev->i2cHandle = i2cHandle;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	601a      	str	r2, [r3, #0]

	/* Set default values, can be changed with functions if needed */
	dev->originalBatteryCapacity = ADP5360_DEFAULT_BATTERY_CAPACITY;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000bee:	811a      	strh	r2, [r3, #8]
	dev->batterySOCACMOverflows = 0;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	729a      	strb	r2, [r3, #10]
	dev->buckVoltage = ADP5360_DEFAULT_BUCK_VOLTAGE;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000bfc:	821a      	strh	r2, [r3, #16]
	dev->buckBoostVoltage = ADP5360_DEFAULT_BUCK_BOOST_VOLTAGE;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000c04:	825a      	strh	r2, [r3, #18]
	dev->chargingEnabled = false;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	711a      	strb	r2, [r3, #4]
	dev->buckEnabled = true;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	751a      	strb	r2, [r3, #20]
	dev->buckBoostEnabled = false;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	755a      	strb	r2, [r3, #21]


	/* Check the manufacturer and model IDs */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_MANUFACTURER_AND_MODEL_ID, &regData);
 8000c18:	f107 030e 	add.w	r3, r7, #14
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f000 fa4d 	bl	80010c0 <ADP5360_ReadRegister>
 8000c26:	4603      	mov	r3, r0
 8000c28:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <ADP5360_Init+0x60>
		return status;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	e04b      	b.n	8000ccc <ADP5360_Init+0xf8>
	}

	if (regData != ((ADP5360_MANUFACTURER_ID << 4) | (ADP5360_MODEL_ID))){
 8000c34:	7bbb      	ldrb	r3, [r7, #14]
 8000c36:	2b10      	cmp	r3, #16
 8000c38:	d003      	beq.n	8000c42 <ADP5360_Init+0x6e>
		status = ADP5360_ERROR_WRONG_ID;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	73fb      	strb	r3, [r7, #15]
		return status;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	e044      	b.n	8000ccc <ADP5360_Init+0xf8>
	}

	/* Turn off the buck boost converter */
	status = ADP5360_DisableBuckBoost(dev);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 f9bc 	bl	8000fc0 <ADP5360_DisableBuckBoost>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <ADP5360_Init+0x82>
		return status;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	e03a      	b.n	8000ccc <ADP5360_Init+0xf8>
	}

	/* Write the battery capacity */
	status = ADP5360_SetBatteryCapacity(dev, dev->originalBatteryCapacity);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	891b      	ldrh	r3, [r3, #8]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 f90f 	bl	8000e80 <ADP5360_SetBatteryCapacity>
 8000c62:	4603      	mov	r3, r0
 8000c64:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <ADP5360_Init+0x9c>
		return status;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	e02d      	b.n	8000ccc <ADP5360_Init+0xf8>
	}

	/* Enable interrupts */
	status = ADP5360_EnableInterrupts(dev);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 f9d4 	bl	800101e <ADP5360_EnableInterrupts>
 8000c76:	4603      	mov	r3, r0
 8000c78:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <ADP5360_Init+0xb0>
		return status;
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	e023      	b.n	8000ccc <ADP5360_Init+0xf8>
	}

	/* Set charging on/off */
	status = ADP5360_UpdateCharging(dev);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 f883 	bl	8000d90 <ADP5360_UpdateCharging>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <ADP5360_Init+0xc4>
		return status;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	e019      	b.n	8000ccc <ADP5360_Init+0xf8>
	}

	/* Read the battery charge */
	status = ADP5360_GetBatteryCharge(dev);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f000 f943 	bl	8000f24 <ADP5360_GetBatteryCharge>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <ADP5360_Init+0xd8>
		return status;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	e00f      	b.n	8000ccc <ADP5360_Init+0xf8>
	}

	/* Read the charging status/mode */
	status = ADP5360_GetChargingStatus(dev);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f000 f8a9 	bl	8000e04 <ADP5360_GetChargingStatus>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <ADP5360_Init+0xec>
		return status;
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	e005      	b.n	8000ccc <ADP5360_Init+0xf8>
	}

	/* Read the battery charger status/mode */
	status = ADP5360_GetBatteryChargerStatus(dev);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 f8be 	bl	8000e42 <ADP5360_GetBatteryChargerStatus>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	73fb      	strb	r3, [r7, #15]

	return status;
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <ADP5360_EnableCharging>:

ADP5360_StatusTypeDef ADP5360_EnableCharging(ADP5360_HandleTypeDef *dev){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000ce0:	f107 030e 	add.w	r3, r7, #14
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	2107      	movs	r1, #7
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f000 f9e9 	bl	80010c0 <ADP5360_ReadRegister>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <ADP5360_EnableCharging+0x28>
		return status;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	e016      	b.n	8000d2a <ADP5360_EnableCharging+0x56>
	}

	/* Set the "EN_LDO" and "EN_CHG" bits high */
	regData = regData | ADP5360_BIT_EN_LDO | ADP5360_BIT_EN_CHG;
 8000cfc:	7bbb      	ldrb	r3, [r7, #14]
 8000cfe:	f043 0309 	orr.w	r3, r3, #9
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	73bb      	strb	r3, [r7, #14]

	/* Write the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000d06:	f107 030e 	add.w	r3, r7, #14
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	2107      	movs	r1, #7
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 f9f1 	bl	80010f6 <ADP5360_WriteRegister>
 8000d14:	4603      	mov	r3, r0
 8000d16:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <ADP5360_EnableCharging+0x4e>
		return status;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	e003      	b.n	8000d2a <ADP5360_EnableCharging+0x56>
	}

	/* Update the device struct */
	dev->chargingEnabled = true;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2201      	movs	r2, #1
 8000d26:	711a      	strb	r2, [r3, #4]

	return status;
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <ADP5360_DisableCharging>:


ADP5360_StatusTypeDef ADP5360_DisableCharging(ADP5360_HandleTypeDef *dev){
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b084      	sub	sp, #16
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000d3e:	f107 030e 	add.w	r3, r7, #14
 8000d42:	461a      	mov	r2, r3
 8000d44:	2107      	movs	r1, #7
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f000 f9ba 	bl	80010c0 <ADP5360_ReadRegister>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <ADP5360_DisableCharging+0x28>
		return status;
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	e016      	b.n	8000d88 <ADP5360_DisableCharging+0x56>
	}

	/* Set the "EN_CHG" bit low */
	regData &= ~ADP5360_BIT_EN_CHG;
 8000d5a:	7bbb      	ldrb	r3, [r7, #14]
 8000d5c:	f023 0301 	bic.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	73bb      	strb	r3, [r7, #14]

	/* Write the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000d64:	f107 030e 	add.w	r3, r7, #14
 8000d68:	461a      	mov	r2, r3
 8000d6a:	2107      	movs	r1, #7
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f000 f9c2 	bl	80010f6 <ADP5360_WriteRegister>
 8000d72:	4603      	mov	r3, r0
 8000d74:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <ADP5360_DisableCharging+0x4e>
		return status;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	e003      	b.n	8000d88 <ADP5360_DisableCharging+0x56>
	}

	/* Update the device struct */
	dev->chargingEnabled = false;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	711a      	strb	r2, [r3, #4]

	return status;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <ADP5360_UpdateCharging>:

ADP5360_StatusTypeDef ADP5360_UpdateCharging(ADP5360_HandleTypeDef *dev){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_PGOOD_STATUS" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_PGOOD_STATUS, &regData);
 8000d9c:	f107 030e 	add.w	r3, r7, #14
 8000da0:	461a      	mov	r2, r3
 8000da2:	212f      	movs	r1, #47	@ 0x2f
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f98b 	bl	80010c0 <ADP5360_ReadRegister>
 8000daa:	4603      	mov	r3, r0
 8000dac:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <ADP5360_UpdateCharging+0x28>
		return status;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	e021      	b.n	8000dfc <ADP5360_UpdateCharging+0x6c>
	}

	/* If VBUS present, enable charging */
	if (regData & ADP5360_BIT_VBUSOK){
 8000db8:	7bbb      	ldrb	r3, [r7, #14]
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d00d      	beq.n	8000dde <ADP5360_UpdateCharging+0x4e>
		if (dev->chargingEnabled == false){
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	791b      	ldrb	r3, [r3, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d117      	bne.n	8000dfa <ADP5360_UpdateCharging+0x6a>
			status = ADP5360_EnableCharging(dev);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ff82 	bl	8000cd4 <ADP5360_EnableCharging>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	73fb      	strb	r3, [r7, #15]
			if (status != ADP5360_OK){
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00f      	beq.n	8000dfa <ADP5360_UpdateCharging+0x6a>
				return status;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	e00e      	b.n	8000dfc <ADP5360_UpdateCharging+0x6c>
			}
		}
	}
	/* If VBUS absent, disable charging */
	else{
		if (dev->chargingEnabled == true){
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	791b      	ldrb	r3, [r3, #4]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d109      	bne.n	8000dfa <ADP5360_UpdateCharging+0x6a>
			status = ADP5360_DisableCharging(dev);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffa3 	bl	8000d32 <ADP5360_DisableCharging>
 8000dec:	4603      	mov	r3, r0
 8000dee:	73fb      	strb	r3, [r7, #15]
			if (status != ADP5360_OK){
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <ADP5360_UpdateCharging+0x6a>
				return status;
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	e000      	b.n	8000dfc <ADP5360_UpdateCharging+0x6c>
			}
		}
	}

	return status;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <ADP5360_GetChargingStatus>:

ADP5360_StatusTypeDef ADP5360_GetChargingStatus(ADP5360_HandleTypeDef *dev){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_CHARGER_STATUS1" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_STATUS1, &regData);
 8000e10:	f107 030e 	add.w	r3, r7, #14
 8000e14:	461a      	mov	r2, r3
 8000e16:	2108      	movs	r1, #8
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 f951 	bl	80010c0 <ADP5360_ReadRegister>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <ADP5360_GetChargingStatus+0x28>
		return status;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	e006      	b.n	8000e3a <ADP5360_GetChargingStatus+0x36>
	}

	/* Extract the "CHARGE_STATUS" bits and update the device struct */
	dev->chargeStatus = regData & ADP5360_BITS_CHARGER_STATUS;
 8000e2c:	7bbb      	ldrb	r3, [r7, #14]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	715a      	strb	r2, [r3, #5]

	return status;
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <ADP5360_GetBatteryChargerStatus>:

	return status;
}


ADP5360_StatusTypeDef ADP5360_GetBatteryChargerStatus(ADP5360_HandleTypeDef *dev){
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_CHARGER_STATUS2" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_STATUS2, &regData);
 8000e4e:	f107 030e 	add.w	r3, r7, #14
 8000e52:	461a      	mov	r2, r3
 8000e54:	2109      	movs	r1, #9
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f000 f932 	bl	80010c0 <ADP5360_ReadRegister>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <ADP5360_GetBatteryChargerStatus+0x28>
		return status;
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	e006      	b.n	8000e78 <ADP5360_GetBatteryChargerStatus+0x36>
	}

	/* Extract the "BAT_CHG_STATUS" bits and update the device struct */
	dev->batteryChargerStatus = regData & ADP5360_BITS_BAT_CHG_STATUS;
 8000e6a:	7bbb      	ldrb	r3, [r7, #14]
 8000e6c:	f003 0307 	and.w	r3, r3, #7
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	719a      	strb	r2, [r3, #6]

	return status;
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <ADP5360_SetBatteryCapacity>:


ADP5360_StatusTypeDef ADP5360_SetBatteryCapacity(ADP5360_HandleTypeDef *dev, uint16_t originalBatteryCapacity){
 8000e80:	b5b0      	push	{r4, r5, r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]

	/* Update the device struct */
	dev->originalBatteryCapacity = originalBatteryCapacity;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	887a      	ldrh	r2, [r7, #2]
 8000e94:	811a      	strh	r2, [r3, #8]
	dev->effectiveBatteryCapacity = (dev->originalBatteryCapacity * (1.0 - (ADP5360_BATTERY_DEGRADATION_PER_OVERFLOW * dev->batterySOCACMOverflows)));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	891b      	ldrh	r3, [r3, #8]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fc84 	bl	80007a8 <__aeabi_i2d>
 8000ea0:	4604      	mov	r4, r0
 8000ea2:	460d      	mov	r5, r1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7a9b      	ldrb	r3, [r3, #10]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fc7d 	bl	80007a8 <__aeabi_i2d>
 8000eae:	a31b      	add	r3, pc, #108	@ (adr r3, 8000f1c <ADP5360_SetBatteryCapacity+0x9c>)
 8000eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb4:	f7ff f9fc 	bl	80002b0 <__aeabi_dmul>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	f04f 0000 	mov.w	r0, #0
 8000ec0:	4915      	ldr	r1, [pc, #84]	@ (8000f18 <ADP5360_SetBatteryCapacity+0x98>)
 8000ec2:	f7ff fb23 	bl	800050c <__aeabi_dsub>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4620      	mov	r0, r4
 8000ecc:	4629      	mov	r1, r5
 8000ece:	f7ff f9ef 	bl	80002b0 <__aeabi_dmul>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f7ff fccf 	bl	800087c <__aeabi_d2uiz>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	819a      	strh	r2, [r3, #12]

	/* Convert  BAT_CAP (p. 46) */
	uint8_t regData = dev->effectiveBatteryCapacity / 2;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	899b      	ldrh	r3, [r3, #12]
 8000eea:	085b      	lsrs	r3, r3, #1
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_BAT_CAP" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_BAT_CAP, &regData);
 8000ef2:	f107 030e 	add.w	r3, r7, #14
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	2120      	movs	r1, #32
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f8fb 	bl	80010f6 <ADP5360_WriteRegister>
 8000f00:	4603      	mov	r3, r0
 8000f02:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <ADP5360_SetBatteryCapacity+0x8e>
		return status;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	e000      	b.n	8000f10 <ADP5360_SetBatteryCapacity+0x90>
	}

	return status;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bdb0      	pop	{r4, r5, r7, pc}
 8000f18:	3ff00000 	.word	0x3ff00000
 8000f1c:	eb851eb8 	.word	0xeb851eb8
 8000f20:	3f8eb851 	.word	0x3f8eb851

08000f24 <ADP5360_GetBatteryCharge>:

	return status;

}

ADP5360_StatusTypeDef ADP5360_GetBatteryCharge(ADP5360_HandleTypeDef *dev){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_BAT_SOC" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_BAT_SOC, &regData);
 8000f30:	f107 030e 	add.w	r3, r7, #14
 8000f34:	461a      	mov	r2, r3
 8000f36:	2121      	movs	r1, #33	@ 0x21
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 f8c1 	bl	80010c0 <ADP5360_ReadRegister>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <ADP5360_GetBatteryCharge+0x28>
		return status;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	e006      	b.n	8000f5a <ADP5360_GetBatteryCharge+0x36>
	}

	/* Extract "BAT_SOC" bits and update the device struct */
	dev->batteryChargePercentage = regData & ADP5360_BITS_BAT_SOC;
 8000f4c:	7bbb      	ldrb	r3, [r7, #14]
 8000f4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	71da      	strb	r2, [r3, #7]

	return status;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <ADP5360_EnableBuckBoost>:

	return status;
}


ADP5360_StatusTypeDef ADP5360_EnableBuckBoost(ADP5360_HandleTypeDef *dev){
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_BUCK_BOOST_CONFIG" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_BUCK_BOOST_CONFIG, &regData);
 8000f6e:	f107 030e 	add.w	r3, r7, #14
 8000f72:	461a      	mov	r2, r3
 8000f74:	212b      	movs	r1, #43	@ 0x2b
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f8a2 	bl	80010c0 <ADP5360_ReadRegister>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <ADP5360_EnableBuckBoost+0x28>
		return status;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	e016      	b.n	8000fb8 <ADP5360_EnableBuckBoost+0x56>
	}

	/* Set the "EN_BUCKBST" bit high */
	regData |= ADP5360_BIT_EN_BUCKBST;
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_BUCK_BOOST_CONFIG" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_BUCK_BOOST_CONFIG, &regData);
 8000f94:	f107 030e 	add.w	r3, r7, #14
 8000f98:	461a      	mov	r2, r3
 8000f9a:	212b      	movs	r1, #43	@ 0x2b
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f8aa 	bl	80010f6 <ADP5360_WriteRegister>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <ADP5360_EnableBuckBoost+0x4e>
		return status;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	e003      	b.n	8000fb8 <ADP5360_EnableBuckBoost+0x56>
	}

	/* Update the device struct */
	dev->buckBoostEnabled = true;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	755a      	strb	r2, [r3, #21]

	return status;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <ADP5360_DisableBuckBoost>:

ADP5360_StatusTypeDef ADP5360_DisableBuckBoost(ADP5360_HandleTypeDef *dev){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_BUCK_BOOST_CONFIG" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_BUCK_BOOST_CONFIG, &regData);
 8000fcc:	f107 030e 	add.w	r3, r7, #14
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	212b      	movs	r1, #43	@ 0x2b
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 f873 	bl	80010c0 <ADP5360_ReadRegister>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <ADP5360_DisableBuckBoost+0x28>
		return status;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	e016      	b.n	8001016 <ADP5360_DisableBuckBoost+0x56>
	}

	/* Set the "EN_BUCKBST" bit low */
	regData &= ~ADP5360_BIT_EN_BUCKBST;
 8000fe8:	7bbb      	ldrb	r3, [r7, #14]
 8000fea:	f023 0301 	bic.w	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_BUCK_BOOST_CONFIG" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_BUCK_BOOST_CONFIG, &regData);
 8000ff2:	f107 030e 	add.w	r3, r7, #14
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	212b      	movs	r1, #43	@ 0x2b
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f87b 	bl	80010f6 <ADP5360_WriteRegister>
 8001000:	4603      	mov	r3, r0
 8001002:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <ADP5360_DisableBuckBoost+0x4e>
		return status;
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	e003      	b.n	8001016 <ADP5360_DisableBuckBoost+0x56>
	}

	/* Update the device struct */
	dev->buckBoostEnabled = false;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	755a      	strb	r2, [r3, #21]

	return status;
 8001014:	7bfb      	ldrb	r3, [r7, #15]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <ADP5360_EnableInterrupts>:

ADP5360_StatusTypeDef ADP5360_EnableInterrupts(ADP5360_HandleTypeDef *dev){
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	73fb      	strb	r3, [r7, #15]
	uint8_t regData = 0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	73bb      	strb	r3, [r7, #14]

	/* Configure "ADP5360_REG_INTERRUPT_ENABLE1" */
	regData = ADP5360_VBUS_INT | ADP5360_CHG_INT | ADP5360_BAT_INT | ADP5360_THR_INT | ADP5360_BATPRO_INT | ADP5360_ADPICHG_INT | ADP5360_SOCACM_INT | ADP5360_SOCLOW_INT;
 800102e:	23c7      	movs	r3, #199	@ 0xc7
 8001030:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_INTERRUPT_ENABLE1" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_INTERRUPT_ENABLE1, &regData);
 8001032:	f107 030e 	add.w	r3, r7, #14
 8001036:	461a      	mov	r2, r3
 8001038:	2132      	movs	r1, #50	@ 0x32
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 f85b 	bl	80010f6 <ADP5360_WriteRegister>
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <ADP5360_EnableInterrupts+0x30>
		return status;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	e00d      	b.n	800106a <ADP5360_EnableInterrupts+0x4c>
	}

	/* Configure "ADP5360_REG_INTERRUPT_ENABLE2" */
	regData = 0x00;
 800104e:	2300      	movs	r3, #0
 8001050:	73bb      	strb	r3, [r7, #14]
	regData = ADP5360_BUCKBSTPG_INT | ADP5360_BUCKPG_INT | ADP5360_WD_INT | ADP5360_MR_INT;
 8001052:	2300      	movs	r3, #0
 8001054:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_INTERRUPT_ENABLE2" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_INTERRUPT_ENABLE2, &regData);
 8001056:	f107 030e 	add.w	r3, r7, #14
 800105a:	461a      	mov	r2, r3
 800105c:	2133      	movs	r1, #51	@ 0x33
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f849 	bl	80010f6 <ADP5360_WriteRegister>
 8001064:	4603      	mov	r3, r0
 8001066:	73fb      	strb	r3, [r7, #15]

	return status;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <ADP5360_EnableMRShipmentMode>:
	status = ADP5360_WriteRegister(dev, ADP5360_REG_SHIPMODE, &regData);

	return status;
}

ADP5360_StatusTypeDef ADP5360_EnableMRShipmentMode(ADP5360_HandleTypeDef *dev){
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_SUPERVISORY_SETTING" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_SUPERVISORY_SETTING, &regData);
 800107e:	f107 030e 	add.w	r3, r7, #14
 8001082:	461a      	mov	r2, r3
 8001084:	212d      	movs	r1, #45	@ 0x2d
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 f81a 	bl	80010c0 <ADP5360_ReadRegister>
 800108c:	4603      	mov	r3, r0
 800108e:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <ADP5360_EnableMRShipmentMode+0x28>
		return status;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	e00e      	b.n	80010b8 <ADP5360_EnableMRShipmentMode+0x46>
	}

	/* Set the */
	regData |= ADP5360_BIT_EN_MR_SD;
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_SUPERVISORY_SETTING" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_SUPERVISORY_SETTING, &regData);
 80010a4:	f107 030e 	add.w	r3, r7, #14
 80010a8:	461a      	mov	r2, r3
 80010aa:	212d      	movs	r1, #45	@ 0x2d
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 f822 	bl	80010f6 <ADP5360_WriteRegister>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]

	return status;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <ADP5360_ReadRegister>:

ADP5360_StatusTypeDef ADP5360_ReadRegister(ADP5360_HandleTypeDef *dev, uint8_t reg, uint8_t *data){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af04      	add	r7, sp, #16
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	460b      	mov	r3, r1
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, ADP5360_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	7afb      	ldrb	r3, [r7, #11]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2301      	movs	r3, #1
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	218c      	movs	r1, #140	@ 0x8c
 80010e8:	f004 fdd2 	bl	8005c90 <HAL_I2C_Mem_Read>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <ADP5360_WriteRegister>:

ADP5360_StatusTypeDef ADP5360_WriteRegister(ADP5360_HandleTypeDef *dev, uint8_t reg, uint8_t *data){
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b088      	sub	sp, #32
 80010fa:	af04      	add	r7, sp, #16
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	460b      	mov	r3, r1
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write(dev->i2cHandle, ADP5360_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	7afb      	ldrb	r3, [r7, #11]
 800110a:	b29a      	uxth	r2, r3
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	9302      	str	r3, [sp, #8]
 8001112:	2301      	movs	r3, #1
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	218c      	movs	r1, #140	@ 0x8c
 800111e:	f004 fca3 	bl	8005a68 <HAL_I2C_Mem_Write>
 8001122:	4603      	mov	r3, r0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001130:	f002 fca4 	bl	8003a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001134:	f000 f840 	bl	80011b8 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8001138:	f000 f8a8 	bl	800128c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113c:	f000 ffea 	bl	8002114 <MX_GPIO_Init>
  MX_DCACHE1_Init();
 8001140:	f000 f922 	bl	8001388 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 8001144:	f000 f936 	bl	80013b4 <MX_DCACHE2_Init>
  MX_ICACHE_Init();
 8001148:	f000 fc28 	bl	800199c <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 800114c:	f000 fc58 	bl	8001a00 <MX_LPUART1_UART_Init>
  MX_OCTOSPI1_Init();
 8001150:	f000 fdbe 	bl	8001cd0 <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 8001154:	f000 f8f6 	bl	8001344 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001158:	f000 f942 	bl	80013e0 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800115c:	f000 f97e 	bl	800145c <MX_DSIHOST_DSI_Init>
  MX_GFXMMU_Init();
 8001160:	f000 fa78 	bl	8001654 <MX_GFXMMU_Init>
  MX_GPU2D_Init();
 8001164:	f000 fac6 	bl	80016f4 <MX_GPU2D_Init>
  MX_LTDC_Init();
 8001168:	f000 fd2e 	bl	8001bc8 <MX_LTDC_Init>
  MX_RTC_Init();
 800116c:	f000 fee2 	bl	8001f34 <MX_RTC_Init>
  MX_OCTOSPI2_Init();
 8001170:	f000 fe48 	bl	8001e04 <MX_OCTOSPI2_Init>
  MX_ADF1_Init();
 8001174:	f000 f898 	bl	80012a8 <MX_ADF1_Init>
  MX_I2C1_Init();
 8001178:	f000 fad0 	bl	800171c <MX_I2C1_Init>
  MX_I2C2_Init();
 800117c:	f000 fb0e 	bl	800179c <MX_I2C2_Init>
  MX_I2C4_Init();
 8001180:	f000 fb8c 	bl	800189c <MX_I2C4_Init>
  MX_I2C6_Init();
 8001184:	f000 fbca 	bl	800191c <MX_I2C6_Init>
  MX_USART1_UART_Init();
 8001188:	f000 fc86 	bl	8001a98 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800118c:	f000 fcd0 	bl	8001b30 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8001190:	f000 ff52 	bl	8002038 <MX_SPI1_Init>
  MX_I2C3_Init();
 8001194:	f000 fb42 	bl	800181c <MX_I2C3_Init>

  /* USER CODE BEGIN 2 */
  ADP5360_Init(&hadp5360, &hi2c2);
 8001198:	4905      	ldr	r1, [pc, #20]	@ (80011b0 <main+0x84>)
 800119a:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <main+0x88>)
 800119c:	f7ff fd1a 	bl	8000bd4 <ADP5360_Init>
  ADP5360_EnableMRShipmentMode(&hadp5360);
 80011a0:	4804      	ldr	r0, [pc, #16]	@ (80011b4 <main+0x88>)
 80011a2:	f7ff ff66 	bl	8001072 <ADP5360_EnableMRShipmentMode>
  ADP5360_EnableBuckBoost(&hadp5360);
 80011a6:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <main+0x88>)
 80011a8:	f7ff fedb 	bl	8000f62 <ADP5360_EnableBuckBoost>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <main+0x80>
 80011b0:	20000298 	.word	0x20000298
 80011b4:	200007c4 	.word	0x200007c4

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b09e      	sub	sp, #120	@ 0x78
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0318 	add.w	r3, r7, #24
 80011c2:	2260      	movs	r2, #96	@ 0x60
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00d f843 	bl	800e252 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
 80011da:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011dc:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80011e0:	f006 ff2a 	bl	8008038 <HAL_PWREx_ControlVoltageScaling>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0x36>
  {
    Error_Handler();
 80011ea:	f001 fa1d 	bl	8002628 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011ee:	f006 ff13 	bl	8008018 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011f2:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <SystemClock_Config+0xd0>)
 80011f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011f8:	4a23      	ldr	r2, [pc, #140]	@ (8001288 <SystemClock_Config+0xd0>)
 80011fa:	f023 0318 	bic.w	r3, r3, #24
 80011fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001202:	2305      	movs	r3, #5
 8001204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001206:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800120a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800120c:	2381      	movs	r3, #129	@ 0x81
 800120e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001210:	2302      	movs	r3, #2
 8001212:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001214:	2303      	movs	r3, #3
 8001216:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800121c:	2301      	movs	r3, #1
 800121e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001220:	230a      	movs	r3, #10
 8001222:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001224:	2302      	movs	r3, #2
 8001226:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001228:	2302      	movs	r3, #2
 800122a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800122c:	2301      	movs	r3, #1
 800122e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001230:	230c      	movs	r3, #12
 8001232:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f107 0318 	add.w	r3, r7, #24
 800123c:	4618      	mov	r0, r3
 800123e:	f006 ffe7 	bl	8008210 <HAL_RCC_OscConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001248:	f001 f9ee 	bl	8002628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	231f      	movs	r3, #31
 800124e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001250:	2303      	movs	r3, #3
 8001252:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	2104      	movs	r1, #4
 8001268:	4618      	mov	r0, r3
 800126a:	f007 fead 	bl	8008fc8 <HAL_RCC_ClockConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001274:	f001 f9d8 	bl	8002628 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001278:	f008 fa28 	bl	80096cc <HAL_RCC_EnableCSS>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 800127c:	f00b f9a4 	bl	800c5c8 <HAL_RCCEx_EnableLSECSS>
}
 8001280:	bf00      	nop
 8001282:	3778      	adds	r7, #120	@ 0x78
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	46020c00 	.word	0x46020c00

0800128c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8001290:	f006 ffae 	bl	80081f0 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001294:	2002      	movs	r0, #2
 8001296:	f006 ff5b 	bl	8008150 <HAL_PWREx_ConfigSupply>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80012a0:	f001 f9c2 	bl	8002628 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 80012ac:	4b22      	ldr	r3, [pc, #136]	@ (8001338 <MX_ADF1_Init+0x90>)
 80012ae:	4a23      	ldr	r2, [pc, #140]	@ (800133c <MX_ADF1_Init+0x94>)
 80012b0:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 80012b2:	4b21      	ldr	r3, [pc, #132]	@ (8001338 <MX_ADF1_Init+0x90>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 80012b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001338 <MX_ADF1_Init+0x90>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 80012be:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <MX_ADF1_Init+0x90>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <MX_ADF1_Init+0x90>)
 80012c8:	2210      	movs	r2, #16
 80012ca:	629a      	str	r2, [r3, #40]	@ 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 80012cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <MX_ADF1_Init+0x90>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 80012d2:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <MX_ADF1_Init+0x90>)
 80012d4:	2204      	movs	r2, #4
 80012d6:	631a      	str	r2, [r3, #48]	@ 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 80012d8:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <MX_ADF1_Init+0x90>)
 80012da:	2201      	movs	r2, #1
 80012dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 80012de:	4816      	ldr	r0, [pc, #88]	@ (8001338 <MX_ADF1_Init+0x90>)
 80012e0:	f005 fd3a 	bl	8006d58 <HAL_MDF_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_ADF1_Init+0x46>
  {
    Error_Handler();
 80012ea:	f001 f99d 	bl	8002628 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 80012ee:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <MX_ADF1_Init+0x98>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <MX_ADF1_Init+0x98>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_ADF1_Init+0x98>)
 80012fc:	2240      	movs	r2, #64	@ 0x40
 80012fe:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 8001300:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MX_ADF1_Init+0x98>)
 8001302:	2202      	movs	r2, #2
 8001304:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_ADF1_Init+0x98>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_ADF1_Init+0x98>)
 800130e:	2200      	movs	r2, #0
 8001310:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <MX_ADF1_Init+0x98>)
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_ADF1_Init+0x98>)
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <MX_ADF1_Init+0x98>)
 8001324:	2200      	movs	r2, #0
 8001326:	665a      	str	r2, [r3, #100]	@ 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <MX_ADF1_Init+0x98>)
 800132a:	2200      	movs	r2, #0
 800132c:	669a      	str	r2, [r3, #104]	@ 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 800132e:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <MX_ADF1_Init+0x98>)
 8001330:	2200      	movs	r2, #0
 8001332:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000030 	.word	0x20000030
 800133c:	46024080 	.word	0x46024080
 8001340:	20000074 	.word	0x20000074

08001344 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001348:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <MX_CRC_Init+0x3c>)
 800134a:	4a0e      	ldr	r2, [pc, #56]	@ (8001384 <MX_CRC_Init+0x40>)
 800134c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800134e:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <MX_CRC_Init+0x3c>)
 8001350:	2200      	movs	r2, #0
 8001352:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <MX_CRC_Init+0x3c>)
 8001356:	2200      	movs	r2, #0
 8001358:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <MX_CRC_Init+0x3c>)
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <MX_CRC_Init+0x3c>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <MX_CRC_Init+0x3c>)
 8001368:	2201      	movs	r2, #1
 800136a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800136c:	4804      	ldr	r0, [pc, #16]	@ (8001380 <MX_CRC_Init+0x3c>)
 800136e:	f002 fcd7 	bl	8003d20 <HAL_CRC_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001378:	f001 f956 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200000f0 	.word	0x200000f0
 8001384:	40023000 	.word	0x40023000

08001388 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <MX_DCACHE1_Init+0x24>)
 800138e:	4a08      	ldr	r2, [pc, #32]	@ (80013b0 <MX_DCACHE1_Init+0x28>)
 8001390:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_DCACHE1_Init+0x24>)
 8001394:	2200      	movs	r2, #0
 8001396:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	@ (80013ac <MX_DCACHE1_Init+0x24>)
 800139a:	f002 fdb3 	bl	8003f04 <HAL_DCACHE_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 80013a4:	f001 f940 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000114 	.word	0x20000114
 80013b0:	40031400 	.word	0x40031400

080013b4 <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 80013b8:	4b07      	ldr	r3, [pc, #28]	@ (80013d8 <MX_DCACHE2_Init+0x24>)
 80013ba:	4a08      	ldr	r2, [pc, #32]	@ (80013dc <MX_DCACHE2_Init+0x28>)
 80013bc:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 80013be:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <MX_DCACHE2_Init+0x24>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 80013c4:	4804      	ldr	r0, [pc, #16]	@ (80013d8 <MX_DCACHE2_Init+0x24>)
 80013c6:	f002 fd9d 	bl	8003f04 <HAL_DCACHE_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_DCACHE2_Init+0x20>
  {
    Error_Handler();
 80013d0:	f001 f92a 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000140 	.word	0x20000140
 80013dc:	40031800 	.word	0x40031800

080013e0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <MX_DMA2D_Init+0x74>)
 80013e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001458 <MX_DMA2D_Init+0x78>)
 80013e8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <MX_DMA2D_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80013f0:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <MX_DMA2D_Init+0x74>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80013f6:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <MX_DMA2D_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 80013fc:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <MX_DMA2D_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8001402:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <MX_DMA2D_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <MX_DMA2D_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <MX_DMA2D_Init+0x74>)
 8001410:	2201      	movs	r2, #1
 8001412:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001414:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <MX_DMA2D_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <MX_DMA2D_Init+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001420:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <MX_DMA2D_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001426:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <MX_DMA2D_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800142c:	4809      	ldr	r0, [pc, #36]	@ (8001454 <MX_DMA2D_Init+0x74>)
 800142e:	f002 fe90 	bl	8004152 <HAL_DMA2D_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8001438:	f001 f8f6 	bl	8002628 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800143c:	2101      	movs	r1, #1
 800143e:	4805      	ldr	r0, [pc, #20]	@ (8001454 <MX_DMA2D_Init+0x74>)
 8001440:	f002 fff8 	bl	8004434 <HAL_DMA2D_ConfigLayer>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 800144a:	f001 f8ed 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000016c 	.word	0x2000016c
 8001458:	4002b000 	.word	0x4002b000

0800145c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0ae      	sub	sp, #184	@ 0xb8
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8001462:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]
 8001472:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8001474:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001478:	2224      	movs	r2, #36	@ 0x24
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f00c fee8 	bl	800e252 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8001482:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]
 8001492:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8001494:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001498:	2234      	movs	r2, #52	@ 0x34
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f00c fed8 	bl	800e252 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	222c      	movs	r2, #44	@ 0x2c
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f00c fed2 	bl	800e252 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80014ae:	4b67      	ldr	r3, [pc, #412]	@ (800164c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014b0:	4a67      	ldr	r2, [pc, #412]	@ (8001650 <MX_DSIHOST_DSI_Init+0x1f4>)
 80014b2:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80014b4:	4b65      	ldr	r3, [pc, #404]	@ (800164c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80014ba:	4b64      	ldr	r3, [pc, #400]	@ (800164c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014bc:	2204      	movs	r2, #4
 80014be:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 80014c0:	4b62      	ldr	r3, [pc, #392]	@ (800164c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 80014c6:	4b61      	ldr	r3, [pc, #388]	@ (800164c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014c8:	2208      	movs	r2, #8
 80014ca:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 80014cc:	4b5f      	ldr	r3, [pc, #380]	@ (800164c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 80014d2:	237d      	movs	r3, #125	@ 0x7d
 80014d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 80014d8:	2304      	movs	r3, #4
 80014da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80014de:	2302      	movs	r3, #2
 80014e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 80014e4:	2301      	movs	r3, #1
 80014e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80014f6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80014fa:	4619      	mov	r1, r3
 80014fc:	4853      	ldr	r0, [pc, #332]	@ (800164c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014fe:	f003 f941 	bl	8004784 <HAL_DSI_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 8001508:	f001 f88e 	bl	8002628 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800150c:	2301      	movs	r3, #1
 800150e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.HighSpeedReadTimeout = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.LowPowerReadTimeout = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.LowPowerWriteTimeout = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  HostTimeouts.BTATimeout = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8001540:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001544:	4619      	mov	r1, r3
 8001546:	4841      	ldr	r0, [pc, #260]	@ (800164c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001548:	f003 fdcc 	bl	80050e4 <HAL_DSI_ConfigHostTimeouts>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_DSIHOST_DSI_Init+0xfa>
  {
    Error_Handler();
 8001552:	f001 f869 	bl	8002628 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 10;
 8001556:	230a      	movs	r3, #10
 8001558:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.ClockLaneLP2HSTime = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneHS2LPTime = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneLP2HSTime = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.DataLaneMaxReadTime = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	677b      	str	r3, [r7, #116]	@ 0x74
  PhyTimings.StopWaitTime = 10;
 800156a:	230a      	movs	r3, #10
 800156c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800156e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001572:	4619      	mov	r1, r3
 8001574:	4835      	ldr	r0, [pc, #212]	@ (800164c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001576:	f003 fd1f 	bl	8004fb8 <HAL_DSI_ConfigPhyTimer>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8001580:	f001 f852 	bl	8002628 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8001584:	2104      	movs	r1, #4
 8001586:	4831      	ldr	r0, [pc, #196]	@ (800164c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001588:	f003 fcee 	bl	8004f68 <HAL_DSI_ConfigFlowControl>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8001592:	f001 f849 	bl	8002628 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8001596:	2100      	movs	r1, #0
 8001598:	482c      	ldr	r0, [pc, #176]	@ (800164c <MX_DSIHOST_DSI_Init+0x1f0>)
 800159a:	f003 f9c7 	bl	800492c <HAL_DSI_ConfigErrorMonitor>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 80015a4:	f001 f840 	bl	8002628 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80015dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015e0:	4619      	mov	r1, r3
 80015e2:	481a      	ldr	r0, [pc, #104]	@ (800164c <MX_DSIHOST_DSI_Init+0x1f0>)
 80015e4:	f003 fc62 	bl	8004eac <HAL_DSI_ConfigCommand>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_DSIHOST_DSI_Init+0x196>
  {
    Error_Handler();
 80015ee:	f001 f81b 	bl	8002628 <Error_Handler>
  }
  CmdCfg.ColorCoding = DSI_RGB888;
 80015f2:	2305      	movs	r3, #5
 80015f4:	60bb      	str	r3, [r7, #8]
  CmdCfg.CommandSize = 416;
 80015f6:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 80015fa:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80015fc:	2310      	movs	r3, #16
 80015fe:	613b      	str	r3, [r7, #16]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8001614:	2340      	movs	r3, #64	@ 0x40
 8001616:	62bb      	str	r3, [r7, #40]	@ 0x28
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	4619      	mov	r1, r3
 8001620:	480a      	ldr	r0, [pc, #40]	@ (800164c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001622:	f003 fb6c 	bl	8004cfe <HAL_DSI_ConfigAdaptedCommandMode>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 800162c:	f000 fffc 	bl	8002628 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8001630:	2100      	movs	r1, #0
 8001632:	4806      	ldr	r0, [pc, #24]	@ (800164c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001634:	f003 fb38 	bl	8004ca8 <HAL_DSI_SetGenericVCID>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 800163e:	f000 fff3 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	37b8      	adds	r7, #184	@ 0xb8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200001cc 	.word	0x200001cc
 8001650:	40016c00 	.word	0x40016c00

08001654 <MX_GFXMMU_Init>:
  * @brief GFXMMU Initialization Function
  * @param None
  * @retval None
  */
static void MX_GFXMMU_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END GFXMMU_Init 0 */

  /* USER CODE BEGIN GFXMMU_Init 1 */

  /* USER CODE END GFXMMU_Init 1 */
  hgfxmmu.Instance = GFXMMU;
 8001658:	4b23      	ldr	r3, [pc, #140]	@ (80016e8 <MX_GFXMMU_Init+0x94>)
 800165a:	4a24      	ldr	r2, [pc, #144]	@ (80016ec <MX_GFXMMU_Init+0x98>)
 800165c:	601a      	str	r2, [r3, #0]
  hgfxmmu.Init.BlocksPerLine = GFXMMU_192BLOCKS;
 800165e:	4b22      	ldr	r3, [pc, #136]	@ (80016e8 <MX_GFXMMU_Init+0x94>)
 8001660:	2240      	movs	r2, #64	@ 0x40
 8001662:	605a      	str	r2, [r3, #4]
  hgfxmmu.Init.DefaultValue = 0;
 8001664:	4b20      	ldr	r3, [pc, #128]	@ (80016e8 <MX_GFXMMU_Init+0x94>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hgfxmmu.Init.Buffers.Buf0Address = 0;
 800166a:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <MX_GFXMMU_Init+0x94>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
  hgfxmmu.Init.Buffers.Buf1Address = 0;
 8001670:	4b1d      	ldr	r3, [pc, #116]	@ (80016e8 <MX_GFXMMU_Init+0x94>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  hgfxmmu.Init.Buffers.Buf2Address = 0;
 8001676:	4b1c      	ldr	r3, [pc, #112]	@ (80016e8 <MX_GFXMMU_Init+0x94>)
 8001678:	2200      	movs	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
  hgfxmmu.Init.Buffers.Buf3Address = 0;
 800167c:	4b1a      	ldr	r3, [pc, #104]	@ (80016e8 <MX_GFXMMU_Init+0x94>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  hgfxmmu.Init.CachePrefetch.Activation = ENABLE;
 8001682:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <MX_GFXMMU_Init+0x94>)
 8001684:	2201      	movs	r2, #1
 8001686:	771a      	strb	r2, [r3, #28]
  hgfxmmu.Init.CachePrefetch.CacheLock = GFXMMU_CACHE_LOCK_ENABLE;
 8001688:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <MX_GFXMMU_Init+0x94>)
 800168a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800168e:	621a      	str	r2, [r3, #32]
  hgfxmmu.Init.CachePrefetch.CacheLockBuffer = GFXMMU_CACHE_LOCK_BUFFER0;
 8001690:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <MX_GFXMMU_Init+0x94>)
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	@ 0x24
  hgfxmmu.Init.CachePrefetch.CacheForce = GFXMMU_CACHE_FORCE_ENABLE;
 8001696:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <MX_GFXMMU_Init+0x94>)
 8001698:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800169c:	629a      	str	r2, [r3, #40]	@ 0x28
  hgfxmmu.Init.CachePrefetch.OutterBufferability = GFXMMU_OUTTER_BUFFERABILITY_ENABLE;
 800169e:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <MX_GFXMMU_Init+0x94>)
 80016a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hgfxmmu.Init.CachePrefetch.OutterCachability = GFXMMU_OUTTER_CACHABILITY_ENABLE;
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <MX_GFXMMU_Init+0x94>)
 80016a8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hgfxmmu.Init.CachePrefetch.Prefetch = GFXMMU_PREFETCH_ENABLE;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <MX_GFXMMU_Init+0x94>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hgfxmmu.Init.Interrupts.Activation = ENABLE;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <MX_GFXMMU_Init+0x94>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_GFXMMU_Init(&hgfxmmu) != HAL_OK)
 80016bc:	480a      	ldr	r0, [pc, #40]	@ (80016e8 <MX_GFXMMU_Init+0x94>)
 80016be:	f003 fdd7 	bl	8005270 <HAL_GFXMMU_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_GFXMMU_Init+0x78>
  {
    Error_Handler();
 80016c8:	f000 ffae 	bl	8002628 <Error_Handler>
  }
  if (HAL_GFXMMU_ConfigLut(&hgfxmmu, GFXMMU_LUT_FIRST, GFXMMU_LUT_SIZE, (uint32_t)gfxmmu_lut_config) != HAL_OK)
 80016cc:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <MX_GFXMMU_Init+0x9c>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	2100      	movs	r1, #0
 80016d2:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <MX_GFXMMU_Init+0x94>)
 80016d4:	f003 fe4c 	bl	8005370 <HAL_GFXMMU_ConfigLut>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_GFXMMU_Init+0x8e>
  {
    Error_Handler();
 80016de:	f000 ffa3 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN GFXMMU_Init 2 */

  /* USER CODE END GFXMMU_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200001f0 	.word	0x200001f0
 80016ec:	4002c000 	.word	0x4002c000
 80016f0:	20000028 	.word	0x20000028

080016f4 <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <MX_GPU2D_Init+0x20>)
 80016fa:	4a07      	ldr	r2, [pc, #28]	@ (8001718 <MX_GPU2D_Init+0x24>)
 80016fc:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <MX_GPU2D_Init+0x20>)
 8001700:	f004 f8aa 	bl	8005858 <HAL_GPU2D_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 800170a:	f000 ff8d 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000238 	.word	0x20000238
 8001718:	4002f000 	.word	0x4002f000

0800171c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001720:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <MX_I2C1_Init+0x74>)
 8001722:	4a1c      	ldr	r2, [pc, #112]	@ (8001794 <MX_I2C1_Init+0x78>)
 8001724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8001726:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <MX_I2C1_Init+0x74>)
 8001728:	4a1b      	ldr	r2, [pc, #108]	@ (8001798 <MX_I2C1_Init+0x7c>)
 800172a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <MX_I2C1_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001732:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <MX_I2C1_Init+0x74>)
 8001734:	2201      	movs	r2, #1
 8001736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001738:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <MX_I2C1_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800173e:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <MX_I2C1_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <MX_I2C1_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800174a:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <MX_I2C1_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001750:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <MX_I2C1_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001756:	480e      	ldr	r0, [pc, #56]	@ (8001790 <MX_I2C1_Init+0x74>)
 8001758:	f004 f8ea 	bl	8005930 <HAL_I2C_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001762:	f000 ff61 	bl	8002628 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001766:	2100      	movs	r1, #0
 8001768:	4809      	ldr	r0, [pc, #36]	@ (8001790 <MX_I2C1_Init+0x74>)
 800176a:	f004 fe63 	bl	8006434 <HAL_I2CEx_ConfigAnalogFilter>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001774:	f000 ff58 	bl	8002628 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001778:	2100      	movs	r1, #0
 800177a:	4805      	ldr	r0, [pc, #20]	@ (8001790 <MX_I2C1_Init+0x74>)
 800177c:	f004 fea5 	bl	80064ca <HAL_I2CEx_ConfigDigitalFilter>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001786:	f000 ff4f 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000244 	.word	0x20000244
 8001794:	40005400 	.word	0x40005400
 8001798:	30909dec 	.word	0x30909dec

0800179c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001810 <MX_I2C2_Init+0x74>)
 80017a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001814 <MX_I2C2_Init+0x78>)
 80017a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <MX_I2C2_Init+0x74>)
 80017a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001818 <MX_I2C2_Init+0x7c>)
 80017aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017ac:	4b18      	ldr	r3, [pc, #96]	@ (8001810 <MX_I2C2_Init+0x74>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b2:	4b17      	ldr	r3, [pc, #92]	@ (8001810 <MX_I2C2_Init+0x74>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b8:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <MX_I2C2_Init+0x74>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017be:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <MX_I2C2_Init+0x74>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <MX_I2C2_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ca:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <MX_I2C2_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <MX_I2C2_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017d6:	480e      	ldr	r0, [pc, #56]	@ (8001810 <MX_I2C2_Init+0x74>)
 80017d8:	f004 f8aa 	bl	8005930 <HAL_I2C_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017e2:	f000 ff21 	bl	8002628 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017e6:	2100      	movs	r1, #0
 80017e8:	4809      	ldr	r0, [pc, #36]	@ (8001810 <MX_I2C2_Init+0x74>)
 80017ea:	f004 fe23 	bl	8006434 <HAL_I2CEx_ConfigAnalogFilter>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80017f4:	f000 ff18 	bl	8002628 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80017f8:	2100      	movs	r1, #0
 80017fa:	4805      	ldr	r0, [pc, #20]	@ (8001810 <MX_I2C2_Init+0x74>)
 80017fc:	f004 fe65 	bl	80064ca <HAL_I2CEx_ConfigDigitalFilter>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001806:	f000 ff0f 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000298 	.word	0x20000298
 8001814:	40005800 	.word	0x40005800
 8001818:	30909dec 	.word	0x30909dec

0800181c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001820:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <MX_I2C3_Init+0x74>)
 8001822:	4a1c      	ldr	r2, [pc, #112]	@ (8001894 <MX_I2C3_Init+0x78>)
 8001824:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 8001826:	4b1a      	ldr	r3, [pc, #104]	@ (8001890 <MX_I2C3_Init+0x74>)
 8001828:	4a1b      	ldr	r2, [pc, #108]	@ (8001898 <MX_I2C3_Init+0x7c>)
 800182a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800182c:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <MX_I2C3_Init+0x74>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001832:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <MX_I2C3_Init+0x74>)
 8001834:	2201      	movs	r2, #1
 8001836:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001838:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <MX_I2C3_Init+0x74>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800183e:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <MX_I2C3_Init+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <MX_I2C3_Init+0x74>)
 8001846:	2200      	movs	r2, #0
 8001848:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800184a:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <MX_I2C3_Init+0x74>)
 800184c:	2200      	movs	r2, #0
 800184e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001850:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <MX_I2C3_Init+0x74>)
 8001852:	2200      	movs	r2, #0
 8001854:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001856:	480e      	ldr	r0, [pc, #56]	@ (8001890 <MX_I2C3_Init+0x74>)
 8001858:	f004 f86a 	bl	8005930 <HAL_I2C_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001862:	f000 fee1 	bl	8002628 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001866:	2100      	movs	r1, #0
 8001868:	4809      	ldr	r0, [pc, #36]	@ (8001890 <MX_I2C3_Init+0x74>)
 800186a:	f004 fde3 	bl	8006434 <HAL_I2CEx_ConfigAnalogFilter>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001874:	f000 fed8 	bl	8002628 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001878:	2100      	movs	r1, #0
 800187a:	4805      	ldr	r0, [pc, #20]	@ (8001890 <MX_I2C3_Init+0x74>)
 800187c:	f004 fe25 	bl	80064ca <HAL_I2CEx_ConfigDigitalFilter>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001886:	f000 fecf 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200002ec 	.word	0x200002ec
 8001894:	46002800 	.word	0x46002800
 8001898:	30909dec 	.word	0x30909dec

0800189c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <MX_I2C4_Init+0x74>)
 80018a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001914 <MX_I2C4_Init+0x78>)
 80018a4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30909DEC;
 80018a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <MX_I2C4_Init+0x74>)
 80018a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001918 <MX_I2C4_Init+0x7c>)
 80018aa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80018ac:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <MX_I2C4_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b2:	4b17      	ldr	r3, [pc, #92]	@ (8001910 <MX_I2C4_Init+0x74>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b8:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <MX_I2C4_Init+0x74>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80018be:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <MX_I2C4_Init+0x74>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018c4:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <MX_I2C4_Init+0x74>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ca:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <MX_I2C4_Init+0x74>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <MX_I2C4_Init+0x74>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80018d6:	480e      	ldr	r0, [pc, #56]	@ (8001910 <MX_I2C4_Init+0x74>)
 80018d8:	f004 f82a 	bl	8005930 <HAL_I2C_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80018e2:	f000 fea1 	bl	8002628 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018e6:	2100      	movs	r1, #0
 80018e8:	4809      	ldr	r0, [pc, #36]	@ (8001910 <MX_I2C4_Init+0x74>)
 80018ea:	f004 fda3 	bl	8006434 <HAL_I2CEx_ConfigAnalogFilter>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80018f4:	f000 fe98 	bl	8002628 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80018f8:	2100      	movs	r1, #0
 80018fa:	4805      	ldr	r0, [pc, #20]	@ (8001910 <MX_I2C4_Init+0x74>)
 80018fc:	f004 fde5 	bl	80064ca <HAL_I2CEx_ConfigDigitalFilter>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001906:	f000 fe8f 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000340 	.word	0x20000340
 8001914:	40008400 	.word	0x40008400
 8001918:	30909dec 	.word	0x30909dec

0800191c <MX_I2C6_Init>:
  * @brief I2C6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C6_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C6_Init 0 */

  /* USER CODE BEGIN I2C6_Init 1 */

  /* USER CODE END I2C6_Init 1 */
  hi2c6.Instance = I2C6;
 8001920:	4b1b      	ldr	r3, [pc, #108]	@ (8001990 <MX_I2C6_Init+0x74>)
 8001922:	4a1c      	ldr	r2, [pc, #112]	@ (8001994 <MX_I2C6_Init+0x78>)
 8001924:	601a      	str	r2, [r3, #0]
  hi2c6.Init.Timing = 0x30909DEC;
 8001926:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <MX_I2C6_Init+0x74>)
 8001928:	4a1b      	ldr	r2, [pc, #108]	@ (8001998 <MX_I2C6_Init+0x7c>)
 800192a:	605a      	str	r2, [r3, #4]
  hi2c6.Init.OwnAddress1 = 0;
 800192c:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <MX_I2C6_Init+0x74>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  hi2c6.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001932:	4b17      	ldr	r3, [pc, #92]	@ (8001990 <MX_I2C6_Init+0x74>)
 8001934:	2201      	movs	r2, #1
 8001936:	60da      	str	r2, [r3, #12]
  hi2c6.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001938:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <MX_I2C6_Init+0x74>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  hi2c6.Init.OwnAddress2 = 0;
 800193e:	4b14      	ldr	r3, [pc, #80]	@ (8001990 <MX_I2C6_Init+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	615a      	str	r2, [r3, #20]
  hi2c6.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001944:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <MX_I2C6_Init+0x74>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
  hi2c6.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800194a:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <MX_I2C6_Init+0x74>)
 800194c:	2200      	movs	r2, #0
 800194e:	61da      	str	r2, [r3, #28]
  hi2c6.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001950:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <MX_I2C6_Init+0x74>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c6) != HAL_OK)
 8001956:	480e      	ldr	r0, [pc, #56]	@ (8001990 <MX_I2C6_Init+0x74>)
 8001958:	f003 ffea 	bl	8005930 <HAL_I2C_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_I2C6_Init+0x4a>
  {
    Error_Handler();
 8001962:	f000 fe61 	bl	8002628 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c6, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001966:	2100      	movs	r1, #0
 8001968:	4809      	ldr	r0, [pc, #36]	@ (8001990 <MX_I2C6_Init+0x74>)
 800196a:	f004 fd63 	bl	8006434 <HAL_I2CEx_ConfigAnalogFilter>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_I2C6_Init+0x5c>
  {
    Error_Handler();
 8001974:	f000 fe58 	bl	8002628 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c6, 0) != HAL_OK)
 8001978:	2100      	movs	r1, #0
 800197a:	4805      	ldr	r0, [pc, #20]	@ (8001990 <MX_I2C6_Init+0x74>)
 800197c:	f004 fda5 	bl	80064ca <HAL_I2CEx_ConfigDigitalFilter>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_I2C6_Init+0x6e>
  {
    Error_Handler();
 8001986:	f000 fe4f 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN I2C6_Init 2 */

  /* USER CODE END I2C6_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000394 	.word	0x20000394
 8001994:	40009c00 	.word	0x40009c00
 8001998:	30909dec 	.word	0x30909dec

0800199c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 80019b0:	f004 fde8 	bl	8006584 <HAL_ICACHE_Disable>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80019ba:	f000 fe35 	bl	8002628 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 80019be:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80019c2:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 80019c4:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80019c8:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 80019ca:	2301      	movs	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	2000      	movs	r0, #0
 80019dc:	f004 fe02 	bl	80065e4 <HAL_ICACHE_EnableRemapRegion>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 80019e6:	f000 fe1f 	bl	8002628 <Error_Handler>
  }

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80019ea:	f004 fdbb 	bl	8006564 <HAL_ICACHE_Enable>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_ICACHE_Init+0x5c>
  {
    Error_Handler();
 80019f4:	f000 fe18 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80019f8:	bf00      	nop
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001a04:	4b21      	ldr	r3, [pc, #132]	@ (8001a8c <MX_LPUART1_UART_Init+0x8c>)
 8001a06:	4a22      	ldr	r2, [pc, #136]	@ (8001a90 <MX_LPUART1_UART_Init+0x90>)
 8001a08:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001a0a:	4b20      	ldr	r3, [pc, #128]	@ (8001a8c <MX_LPUART1_UART_Init+0x8c>)
 8001a0c:	4a21      	ldr	r2, [pc, #132]	@ (8001a94 <MX_LPUART1_UART_Init+0x94>)
 8001a0e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a10:	4b1e      	ldr	r3, [pc, #120]	@ (8001a8c <MX_LPUART1_UART_Init+0x8c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a16:	4b1d      	ldr	r3, [pc, #116]	@ (8001a8c <MX_LPUART1_UART_Init+0x8c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a8c <MX_LPUART1_UART_Init+0x8c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a22:	4b1a      	ldr	r3, [pc, #104]	@ (8001a8c <MX_LPUART1_UART_Init+0x8c>)
 8001a24:	220c      	movs	r2, #12
 8001a26:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001a28:	4b18      	ldr	r3, [pc, #96]	@ (8001a8c <MX_LPUART1_UART_Init+0x8c>)
 8001a2a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001a2e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a30:	4b16      	ldr	r3, [pc, #88]	@ (8001a8c <MX_LPUART1_UART_Init+0x8c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a36:	4b15      	ldr	r3, [pc, #84]	@ (8001a8c <MX_LPUART1_UART_Init+0x8c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001a3c:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <MX_LPUART1_UART_Init+0x8c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001a42:	4812      	ldr	r0, [pc, #72]	@ (8001a8c <MX_LPUART1_UART_Init+0x8c>)
 8001a44:	f00b fecc 	bl	800d7e0 <HAL_UART_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a4e:	f000 fdeb 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a52:	2100      	movs	r1, #0
 8001a54:	480d      	ldr	r0, [pc, #52]	@ (8001a8c <MX_LPUART1_UART_Init+0x8c>)
 8001a56:	f00c fb13 	bl	800e080 <HAL_UARTEx_SetTxFifoThreshold>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001a60:	f000 fde2 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a64:	2100      	movs	r1, #0
 8001a66:	4809      	ldr	r0, [pc, #36]	@ (8001a8c <MX_LPUART1_UART_Init+0x8c>)
 8001a68:	f00c fb48 	bl	800e0fc <HAL_UARTEx_SetRxFifoThreshold>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001a72:	f000 fdd9 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001a76:	4805      	ldr	r0, [pc, #20]	@ (8001a8c <MX_LPUART1_UART_Init+0x8c>)
 8001a78:	f00c fac9 	bl	800e00e <HAL_UARTEx_DisableFifoMode>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001a82:	f000 fdd1 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200003e8 	.word	0x200003e8
 8001a90:	46002400 	.word	0x46002400
 8001a94:	00033324 	.word	0x00033324

08001a98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a9c:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <MX_USART1_UART_Init+0x90>)
 8001a9e:	4a23      	ldr	r2, [pc, #140]	@ (8001b2c <MX_USART1_UART_Init+0x94>)
 8001aa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aa2:	4b21      	ldr	r3, [pc, #132]	@ (8001b28 <MX_USART1_UART_Init+0x90>)
 8001aa4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001aa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8001b28 <MX_USART1_UART_Init+0x90>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <MX_USART1_UART_Init+0x90>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b28 <MX_USART1_UART_Init+0x90>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001abc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <MX_USART1_UART_Init+0x90>)
 8001abe:	220c      	movs	r2, #12
 8001ac0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac2:	4b19      	ldr	r3, [pc, #100]	@ (8001b28 <MX_USART1_UART_Init+0x90>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac8:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <MX_USART1_UART_Init+0x90>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ace:	4b16      	ldr	r3, [pc, #88]	@ (8001b28 <MX_USART1_UART_Init+0x90>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ad4:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <MX_USART1_UART_Init+0x90>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ada:	4b13      	ldr	r3, [pc, #76]	@ (8001b28 <MX_USART1_UART_Init+0x90>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae0:	4811      	ldr	r0, [pc, #68]	@ (8001b28 <MX_USART1_UART_Init+0x90>)
 8001ae2:	f00b fe7d 	bl	800d7e0 <HAL_UART_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001aec:	f000 fd9c 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af0:	2100      	movs	r1, #0
 8001af2:	480d      	ldr	r0, [pc, #52]	@ (8001b28 <MX_USART1_UART_Init+0x90>)
 8001af4:	f00c fac4 	bl	800e080 <HAL_UARTEx_SetTxFifoThreshold>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001afe:	f000 fd93 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b02:	2100      	movs	r1, #0
 8001b04:	4808      	ldr	r0, [pc, #32]	@ (8001b28 <MX_USART1_UART_Init+0x90>)
 8001b06:	f00c faf9 	bl	800e0fc <HAL_UARTEx_SetRxFifoThreshold>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b10:	f000 fd8a 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b14:	4804      	ldr	r0, [pc, #16]	@ (8001b28 <MX_USART1_UART_Init+0x90>)
 8001b16:	f00c fa7a 	bl	800e00e <HAL_UARTEx_DisableFifoMode>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b20:	f000 fd82 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	2000047c 	.word	0x2000047c
 8001b2c:	40013800 	.word	0x40013800

08001b30 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b34:	4b22      	ldr	r3, [pc, #136]	@ (8001bc0 <MX_USART6_UART_Init+0x90>)
 8001b36:	4a23      	ldr	r2, [pc, #140]	@ (8001bc4 <MX_USART6_UART_Init+0x94>)
 8001b38:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b3a:	4b21      	ldr	r3, [pc, #132]	@ (8001bc0 <MX_USART6_UART_Init+0x90>)
 8001b3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b40:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b42:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc0 <MX_USART6_UART_Init+0x90>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b48:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc0 <MX_USART6_UART_Init+0x90>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc0 <MX_USART6_UART_Init+0x90>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b54:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc0 <MX_USART6_UART_Init+0x90>)
 8001b56:	220c      	movs	r2, #12
 8001b58:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5a:	4b19      	ldr	r3, [pc, #100]	@ (8001bc0 <MX_USART6_UART_Init+0x90>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b60:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <MX_USART6_UART_Init+0x90>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b66:	4b16      	ldr	r3, [pc, #88]	@ (8001bc0 <MX_USART6_UART_Init+0x90>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	@ (8001bc0 <MX_USART6_UART_Init+0x90>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b72:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <MX_USART6_UART_Init+0x90>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b78:	4811      	ldr	r0, [pc, #68]	@ (8001bc0 <MX_USART6_UART_Init+0x90>)
 8001b7a:	f00b fe31 	bl	800d7e0 <HAL_UART_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001b84:	f000 fd50 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b88:	2100      	movs	r1, #0
 8001b8a:	480d      	ldr	r0, [pc, #52]	@ (8001bc0 <MX_USART6_UART_Init+0x90>)
 8001b8c:	f00c fa78 	bl	800e080 <HAL_UARTEx_SetTxFifoThreshold>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001b96:	f000 fd47 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4808      	ldr	r0, [pc, #32]	@ (8001bc0 <MX_USART6_UART_Init+0x90>)
 8001b9e:	f00c faad 	bl	800e0fc <HAL_UARTEx_SetRxFifoThreshold>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001ba8:	f000 fd3e 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001bac:	4804      	ldr	r0, [pc, #16]	@ (8001bc0 <MX_USART6_UART_Init+0x90>)
 8001bae:	f00c fa2e 	bl	800e00e <HAL_UARTEx_DisableFifoMode>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001bb8:	f000 fd36 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000510 	.word	0x20000510
 8001bc4:	40006400 	.word	0x40006400

08001bc8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08e      	sub	sp, #56	@ 0x38
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2234      	movs	r2, #52	@ 0x34
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f00c fb3c 	bl	800e252 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001bda:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc8 <MX_LTDC_Init+0x100>)
 8001bdc:	4a3b      	ldr	r2, [pc, #236]	@ (8001ccc <MX_LTDC_Init+0x104>)
 8001bde:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8001be0:	4b39      	ldr	r3, [pc, #228]	@ (8001cc8 <MX_LTDC_Init+0x100>)
 8001be2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001be6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8001be8:	4b37      	ldr	r3, [pc, #220]	@ (8001cc8 <MX_LTDC_Init+0x100>)
 8001bea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bee:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001bf0:	4b35      	ldr	r3, [pc, #212]	@ (8001cc8 <MX_LTDC_Init+0x100>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001bf6:	4b34      	ldr	r3, [pc, #208]	@ (8001cc8 <MX_LTDC_Init+0x100>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001bfc:	4b32      	ldr	r3, [pc, #200]	@ (8001cc8 <MX_LTDC_Init+0x100>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8001c02:	4b31      	ldr	r3, [pc, #196]	@ (8001cc8 <MX_LTDC_Init+0x100>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 0;
 8001c08:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc8 <MX_LTDC_Init+0x100>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 0;
 8001c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc8 <MX_LTDC_Init+0x100>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 416;
 8001c14:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc8 <MX_LTDC_Init+0x100>)
 8001c16:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8001c1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 416;
 8001c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc8 <MX_LTDC_Init+0x100>)
 8001c1e:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8001c22:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 416;
 8001c24:	4b28      	ldr	r3, [pc, #160]	@ (8001cc8 <MX_LTDC_Init+0x100>)
 8001c26:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8001c2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 416;
 8001c2c:	4b26      	ldr	r3, [pc, #152]	@ (8001cc8 <MX_LTDC_Init+0x100>)
 8001c2e:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8001c32:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001c34:	4b24      	ldr	r3, [pc, #144]	@ (8001cc8 <MX_LTDC_Init+0x100>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001c3c:	4b22      	ldr	r3, [pc, #136]	@ (8001cc8 <MX_LTDC_Init+0x100>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001c44:	4b20      	ldr	r3, [pc, #128]	@ (8001cc8 <MX_LTDC_Init+0x100>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001c4c:	481e      	ldr	r0, [pc, #120]	@ (8001cc8 <MX_LTDC_Init+0x100>)
 8001c4e:	f004 fd1b 	bl	8006688 <HAL_LTDC_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8001c58:	f000 fce6 	bl	8002628 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 416;
 8001c60:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8001c64:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 416;
 8001c6a:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8001c6e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001c74:	23ff      	movs	r3, #255	@ 0xff
 8001c76:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001c7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c80:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001c82:	2305      	movs	r3, #5
 8001c84:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = GFXMMU_VIRTUAL_BUFFER0_BASE;
 8001c86:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8001c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 416;
 8001c8c:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8001c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 416;
 8001c92:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8001c96:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	2200      	movs	r2, #0
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	@ (8001cc8 <MX_LTDC_Init+0x100>)
 8001cb2:	f004 fe7b 	bl	80069ac <HAL_LTDC_ConfigLayer>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8001cbc:	f000 fcb4 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	3738      	adds	r7, #56	@ 0x38
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200005a4 	.word	0x200005a4
 8001ccc:	40016800 	.word	0x40016800

08001cd0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08c      	sub	sp, #48	@ 0x30
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001cd6:	f107 0318 	add.w	r3, r7, #24
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]
 8001ce6:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8001ce8:	f107 0308 	add.w	r3, r7, #8
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001cf6:	463b      	mov	r3, r7
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001d00:	4a3d      	ldr	r2, [pc, #244]	@ (8001df8 <MX_OCTOSPI1_Init+0x128>)
 8001d02:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001d04:	4b3b      	ldr	r3, [pc, #236]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001d0a:	4b3a      	ldr	r3, [pc, #232]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8001d10:	4b38      	ldr	r3, [pc, #224]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001d12:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d16:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8001d18:	4b36      	ldr	r3, [pc, #216]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001d1a:	221a      	movs	r2, #26
 8001d1c:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001d1e:	4b35      	ldr	r3, [pc, #212]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001d24:	4b33      	ldr	r3, [pc, #204]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001d2a:	4b32      	ldr	r3, [pc, #200]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_64_BYTES;
 8001d30:	4b30      	ldr	r3, [pc, #192]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001d32:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001d36:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 16;
 8001d38:	4b2e      	ldr	r3, [pc, #184]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001d3a:	2210      	movs	r2, #16
 8001d3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001d44:	4b2b      	ldr	r3, [pc, #172]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001d50:	4b28      	ldr	r3, [pc, #160]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001d52:	2208      	movs	r2, #8
 8001d54:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 16;
 8001d56:	4b27      	ldr	r3, [pc, #156]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001d58:	2210      	movs	r2, #16
 8001d5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8001d5c:	4b25      	ldr	r3, [pc, #148]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001d62:	4824      	ldr	r0, [pc, #144]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001d64:	f005 f9a4 	bl	80070b0 <HAL_OSPI_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_OCTOSPI1_Init+0xa2>
  {
    Error_Handler();
 8001d6e:	f000 fc5b 	bl	8002628 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001d72:	2301      	movs	r3, #1
 8001d74:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 8001d76:	2301      	movs	r3, #1
 8001d78:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <MX_OCTOSPI1_Init+0x12c>)
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001d82:	4b1f      	ldr	r3, [pc, #124]	@ (8001e00 <MX_OCTOSPI1_Init+0x130>)
 8001d84:	62bb      	str	r3, [r7, #40]	@ 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 8001d86:	2301      	movs	r3, #1
 8001d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d8a:	f107 0318 	add.w	r3, r7, #24
 8001d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d92:	4619      	mov	r1, r3
 8001d94:	4817      	ldr	r0, [pc, #92]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001d96:	f005 fb0b 	bl	80073b0 <HAL_OSPIM_Config>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_OCTOSPI1_Init+0xd4>
  {
    Error_Handler();
 8001da0:	f000 fc42 	bl	8002628 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001dac:	2302      	movs	r3, #2
 8001dae:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi1, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001db4:	f107 0308 	add.w	r3, r7, #8
 8001db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480d      	ldr	r0, [pc, #52]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001dc0:	f005 fa32 	bl	8007228 <HAL_OSPI_HyperbusCfg>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_OCTOSPI1_Init+0xfe>
  {
    Error_Handler();
 8001dca:	f000 fc2d 	bl	8002628 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001dd6:	463b      	mov	r3, r7
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4806      	ldr	r0, [pc, #24]	@ (8001df4 <MX_OCTOSPI1_Init+0x124>)
 8001ddc:	f006 f8d4 	bl	8007f88 <HAL_OSPI_DLYB_SetConfig>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_OCTOSPI1_Init+0x11a>
  {
    Error_Handler();
 8001de6:	f000 fc1f 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	3730      	adds	r7, #48	@ 0x30
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	2000064c 	.word	0x2000064c
 8001df8:	420d1400 	.word	0x420d1400
 8001dfc:	00010002 	.word	0x00010002
 8001e00:	01000002 	.word	0x01000002

08001e04 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	@ 0x30
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001e0a:	f107 0318 	add.w	r3, r7, #24
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
 8001e18:	611a      	str	r2, [r3, #16]
 8001e1a:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8001e1c:	f107 0308 	add.w	r3, r7, #8
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001e2a:	463b      	mov	r3, r7
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8001e32:	4b3c      	ldr	r3, [pc, #240]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001e34:	4a3c      	ldr	r2, [pc, #240]	@ (8001f28 <MX_OCTOSPI2_Init+0x124>)
 8001e36:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8001e38:	4b3a      	ldr	r3, [pc, #232]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001e3e:	4b39      	ldr	r3, [pc, #228]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8001e44:	4b37      	ldr	r3, [pc, #220]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001e46:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e4a:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8001e4c:	4b35      	ldr	r3, [pc, #212]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001e4e:	2220      	movs	r2, #32
 8001e50:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8001e52:	4b34      	ldr	r3, [pc, #208]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001e58:	4b32      	ldr	r3, [pc, #200]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001e5e:	4b31      	ldr	r3, [pc, #196]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001e64:	4b2f      	ldr	r3, [pc, #188]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 8001e6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001e70:	4b2c      	ldr	r3, [pc, #176]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001e76:	4b2b      	ldr	r3, [pc, #172]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8001e7c:	4b29      	ldr	r3, [pc, #164]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001e82:	4b28      	ldr	r3, [pc, #160]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001e84:	2208      	movs	r2, #8
 8001e86:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 8001e88:	4b26      	ldr	r3, [pc, #152]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 0;
 8001e8e:	4b25      	ldr	r3, [pc, #148]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8001e94:	4823      	ldr	r0, [pc, #140]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001e96:	f005 f90b 	bl	80070b0 <HAL_OSPI_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_OCTOSPI2_Init+0xa0>
  {
    Error_Handler();
 8001ea0:	f000 fbc2 	bl	8002628 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 2;
 8001eac:	2302      	movs	r3, #2
 8001eae:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f2c <MX_OCTOSPI2_Init+0x128>)
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <MX_OCTOSPI2_Init+0x12c>)
 8001eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ebc:	f107 0318 	add.w	r3, r7, #24
 8001ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4817      	ldr	r0, [pc, #92]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001ec8:	f005 fa72 	bl	80073b0 <HAL_OSPIM_Config>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_OCTOSPI2_Init+0xd2>
  {
    Error_Handler();
 8001ed2:	f000 fba9 	bl	8002628 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ee6:	f107 0308 	add.w	r3, r7, #8
 8001eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480c      	ldr	r0, [pc, #48]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001ef2:	f005 f999 	bl	8007228 <HAL_OSPI_HyperbusCfg>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_OCTOSPI2_Init+0xfc>
  {
    Error_Handler();
 8001efc:	f000 fb94 	bl	8002628 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001f08:	463b      	mov	r3, r7
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4805      	ldr	r0, [pc, #20]	@ (8001f24 <MX_OCTOSPI2_Init+0x120>)
 8001f0e:	f006 f83b 	bl	8007f88 <HAL_OSPI_DLYB_SetConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_OCTOSPI2_Init+0x118>
  {
    Error_Handler();
 8001f18:	f000 fb86 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8001f1c:	bf00      	nop
 8001f1e:	3730      	adds	r7, #48	@ 0x30
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200006a8 	.word	0x200006a8
 8001f28:	420d2400 	.word	0x420d2400
 8001f2c:	00010002 	.word	0x00010002
 8001f30:	01000002 	.word	0x01000002

08001f34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08e      	sub	sp, #56	@ 0x38
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001f3a:	f107 031c 	add.w	r3, r7, #28
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	611a      	str	r2, [r3, #16]
 8001f4a:	615a      	str	r2, [r3, #20]
 8001f4c:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f62:	4b33      	ldr	r3, [pc, #204]	@ (8002030 <MX_RTC_Init+0xfc>)
 8001f64:	4a33      	ldr	r2, [pc, #204]	@ (8002034 <MX_RTC_Init+0x100>)
 8001f66:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f68:	4b31      	ldr	r3, [pc, #196]	@ (8002030 <MX_RTC_Init+0xfc>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f6e:	4b30      	ldr	r3, [pc, #192]	@ (8002030 <MX_RTC_Init+0xfc>)
 8001f70:	227f      	movs	r2, #127	@ 0x7f
 8001f72:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f74:	4b2e      	ldr	r3, [pc, #184]	@ (8002030 <MX_RTC_Init+0xfc>)
 8001f76:	22ff      	movs	r2, #255	@ 0xff
 8001f78:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002030 <MX_RTC_Init+0xfc>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001f80:	4b2b      	ldr	r3, [pc, #172]	@ (8002030 <MX_RTC_Init+0xfc>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f86:	4b2a      	ldr	r3, [pc, #168]	@ (8002030 <MX_RTC_Init+0xfc>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f8c:	4b28      	ldr	r3, [pc, #160]	@ (8002030 <MX_RTC_Init+0xfc>)
 8001f8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f92:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001f94:	4b26      	ldr	r3, [pc, #152]	@ (8002030 <MX_RTC_Init+0xfc>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001f9a:	4b25      	ldr	r3, [pc, #148]	@ (8002030 <MX_RTC_Init+0xfc>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001fa0:	4823      	ldr	r0, [pc, #140]	@ (8002030 <MX_RTC_Init+0xfc>)
 8001fa2:	f00a fc53 	bl	800c84c <HAL_RTC_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001fac:	f000 fb3c 	bl	8002628 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001fc0:	f107 031c 	add.w	r3, r7, #28
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	481a      	ldr	r0, [pc, #104]	@ (8002030 <MX_RTC_Init+0xfc>)
 8001fc8:	f00a feb0 	bl	800cd2c <HAL_RTCEx_PrivilegeModeSet>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001fd2:	f000 fb29 	bl	8002628 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001fea:	f107 0308 	add.w	r3, r7, #8
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	480f      	ldr	r0, [pc, #60]	@ (8002030 <MX_RTC_Init+0xfc>)
 8001ff4:	f00a fcac 	bl	800c950 <HAL_RTC_SetTime>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001ffe:	f000 fb13 	bl	8002628 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002002:	2301      	movs	r3, #1
 8002004:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8002006:	2301      	movs	r3, #1
 8002008:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 800200a:	2301      	movs	r3, #1
 800200c:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 800200e:	2300      	movs	r3, #0
 8002010:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	2201      	movs	r2, #1
 8002016:	4619      	mov	r1, r3
 8002018:	4805      	ldr	r0, [pc, #20]	@ (8002030 <MX_RTC_Init+0xfc>)
 800201a:	f00a fd35 	bl	800ca88 <HAL_RTC_SetDate>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8002024:	f000 fb00 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002028:	bf00      	nop
 800202a:	3738      	adds	r7, #56	@ 0x38
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000704 	.word	0x20000704
 8002034:	46007800 	.word	0x46007800

08002038 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002048:	4b30      	ldr	r3, [pc, #192]	@ (800210c <MX_SPI1_Init+0xd4>)
 800204a:	4a31      	ldr	r2, [pc, #196]	@ (8002110 <MX_SPI1_Init+0xd8>)
 800204c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800204e:	4b2f      	ldr	r3, [pc, #188]	@ (800210c <MX_SPI1_Init+0xd4>)
 8002050:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002054:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002056:	4b2d      	ldr	r3, [pc, #180]	@ (800210c <MX_SPI1_Init+0xd4>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800205c:	4b2b      	ldr	r3, [pc, #172]	@ (800210c <MX_SPI1_Init+0xd4>)
 800205e:	2203      	movs	r2, #3
 8002060:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002062:	4b2a      	ldr	r3, [pc, #168]	@ (800210c <MX_SPI1_Init+0xd4>)
 8002064:	2200      	movs	r2, #0
 8002066:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002068:	4b28      	ldr	r3, [pc, #160]	@ (800210c <MX_SPI1_Init+0xd4>)
 800206a:	2200      	movs	r2, #0
 800206c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800206e:	4b27      	ldr	r3, [pc, #156]	@ (800210c <MX_SPI1_Init+0xd4>)
 8002070:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002074:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002076:	4b25      	ldr	r3, [pc, #148]	@ (800210c <MX_SPI1_Init+0xd4>)
 8002078:	2200      	movs	r2, #0
 800207a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800207c:	4b23      	ldr	r3, [pc, #140]	@ (800210c <MX_SPI1_Init+0xd4>)
 800207e:	2200      	movs	r2, #0
 8002080:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002082:	4b22      	ldr	r3, [pc, #136]	@ (800210c <MX_SPI1_Init+0xd4>)
 8002084:	2200      	movs	r2, #0
 8002086:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002088:	4b20      	ldr	r3, [pc, #128]	@ (800210c <MX_SPI1_Init+0xd4>)
 800208a:	2200      	movs	r2, #0
 800208c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800208e:	4b1f      	ldr	r3, [pc, #124]	@ (800210c <MX_SPI1_Init+0xd4>)
 8002090:	2207      	movs	r2, #7
 8002092:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002094:	4b1d      	ldr	r3, [pc, #116]	@ (800210c <MX_SPI1_Init+0xd4>)
 8002096:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800209a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800209c:	4b1b      	ldr	r3, [pc, #108]	@ (800210c <MX_SPI1_Init+0xd4>)
 800209e:	2200      	movs	r2, #0
 80020a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020a2:	4b1a      	ldr	r3, [pc, #104]	@ (800210c <MX_SPI1_Init+0xd4>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80020a8:	4b18      	ldr	r3, [pc, #96]	@ (800210c <MX_SPI1_Init+0xd4>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80020ae:	4b17      	ldr	r3, [pc, #92]	@ (800210c <MX_SPI1_Init+0xd4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80020b4:	4b15      	ldr	r3, [pc, #84]	@ (800210c <MX_SPI1_Init+0xd4>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80020ba:	4b14      	ldr	r3, [pc, #80]	@ (800210c <MX_SPI1_Init+0xd4>)
 80020bc:	2200      	movs	r2, #0
 80020be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80020c0:	4b12      	ldr	r3, [pc, #72]	@ (800210c <MX_SPI1_Init+0xd4>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80020c6:	4b11      	ldr	r3, [pc, #68]	@ (800210c <MX_SPI1_Init+0xd4>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80020cc:	4b0f      	ldr	r3, [pc, #60]	@ (800210c <MX_SPI1_Init+0xd4>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020d2:	480e      	ldr	r0, [pc, #56]	@ (800210c <MX_SPI1_Init+0xd4>)
 80020d4:	f00a fe58 	bl	800cd88 <HAL_SPI_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 80020de:	f000 faa3 	bl	8002628 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80020e6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80020ea:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80020f0:	1d3b      	adds	r3, r7, #4
 80020f2:	4619      	mov	r1, r3
 80020f4:	4805      	ldr	r0, [pc, #20]	@ (800210c <MX_SPI1_Init+0xd4>)
 80020f6:	f00a ff78 	bl	800cfea <HAL_SPIEx_SetConfigAutonomousMode>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8002100:	f000 fa92 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000734 	.word	0x20000734
 8002110:	40013000 	.word	0x40013000

08002114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b090      	sub	sp, #64	@ 0x40
 8002118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	60da      	str	r2, [r3, #12]
 8002128:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800212a:	4bbf      	ldr	r3, [pc, #764]	@ (8002428 <MX_GPIO_Init+0x314>)
 800212c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002130:	4abd      	ldr	r2, [pc, #756]	@ (8002428 <MX_GPIO_Init+0x314>)
 8002132:	f043 0302 	orr.w	r3, r3, #2
 8002136:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800213a:	4bbb      	ldr	r3, [pc, #748]	@ (8002428 <MX_GPIO_Init+0x314>)
 800213c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002148:	4bb7      	ldr	r3, [pc, #732]	@ (8002428 <MX_GPIO_Init+0x314>)
 800214a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800214e:	4ab6      	ldr	r2, [pc, #728]	@ (8002428 <MX_GPIO_Init+0x314>)
 8002150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002154:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002158:	4bb3      	ldr	r3, [pc, #716]	@ (8002428 <MX_GPIO_Init+0x314>)
 800215a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800215e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002166:	4bb0      	ldr	r3, [pc, #704]	@ (8002428 <MX_GPIO_Init+0x314>)
 8002168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800216c:	4aae      	ldr	r2, [pc, #696]	@ (8002428 <MX_GPIO_Init+0x314>)
 800216e:	f043 0308 	orr.w	r3, r3, #8
 8002172:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002176:	4bac      	ldr	r3, [pc, #688]	@ (8002428 <MX_GPIO_Init+0x314>)
 8002178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	623b      	str	r3, [r7, #32]
 8002182:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002184:	4ba8      	ldr	r3, [pc, #672]	@ (8002428 <MX_GPIO_Init+0x314>)
 8002186:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800218a:	4aa7      	ldr	r2, [pc, #668]	@ (8002428 <MX_GPIO_Init+0x314>)
 800218c:	f043 0304 	orr.w	r3, r3, #4
 8002190:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002194:	4ba4      	ldr	r3, [pc, #656]	@ (8002428 <MX_GPIO_Init+0x314>)
 8002196:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	61fb      	str	r3, [r7, #28]
 80021a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	4ba1      	ldr	r3, [pc, #644]	@ (8002428 <MX_GPIO_Init+0x314>)
 80021a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021a8:	4a9f      	ldr	r2, [pc, #636]	@ (8002428 <MX_GPIO_Init+0x314>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021b2:	4b9d      	ldr	r3, [pc, #628]	@ (8002428 <MX_GPIO_Init+0x314>)
 80021b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80021c0:	4b99      	ldr	r3, [pc, #612]	@ (8002428 <MX_GPIO_Init+0x314>)
 80021c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021c6:	4a98      	ldr	r2, [pc, #608]	@ (8002428 <MX_GPIO_Init+0x314>)
 80021c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021d0:	4b95      	ldr	r3, [pc, #596]	@ (8002428 <MX_GPIO_Init+0x314>)
 80021d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021de:	4b92      	ldr	r3, [pc, #584]	@ (8002428 <MX_GPIO_Init+0x314>)
 80021e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021e4:	4a90      	ldr	r2, [pc, #576]	@ (8002428 <MX_GPIO_Init+0x314>)
 80021e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021ee:	4b8e      	ldr	r3, [pc, #568]	@ (8002428 <MX_GPIO_Init+0x314>)
 80021f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80021fc:	4b8a      	ldr	r3, [pc, #552]	@ (8002428 <MX_GPIO_Init+0x314>)
 80021fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002202:	4a89      	ldr	r2, [pc, #548]	@ (8002428 <MX_GPIO_Init+0x314>)
 8002204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002208:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800220c:	4b86      	ldr	r3, [pc, #536]	@ (8002428 <MX_GPIO_Init+0x314>)
 800220e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800221a:	4b83      	ldr	r3, [pc, #524]	@ (8002428 <MX_GPIO_Init+0x314>)
 800221c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002220:	4a81      	ldr	r2, [pc, #516]	@ (8002428 <MX_GPIO_Init+0x314>)
 8002222:	f043 0320 	orr.w	r3, r3, #32
 8002226:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800222a:	4b7f      	ldr	r3, [pc, #508]	@ (8002428 <MX_GPIO_Init+0x314>)
 800222c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002230:	f003 0320 	and.w	r3, r3, #32
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002238:	4b7b      	ldr	r3, [pc, #492]	@ (8002428 <MX_GPIO_Init+0x314>)
 800223a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800223e:	4a7a      	ldr	r2, [pc, #488]	@ (8002428 <MX_GPIO_Init+0x314>)
 8002240:	f043 0310 	orr.w	r3, r3, #16
 8002244:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002248:	4b77      	ldr	r3, [pc, #476]	@ (8002428 <MX_GPIO_Init+0x314>)
 800224a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, GPIO_PIN_RESET);
 8002256:	2200      	movs	r2, #0
 8002258:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800225c:	4873      	ldr	r0, [pc, #460]	@ (800242c <MX_GPIO_Init+0x318>)
 800225e:	f003 fae3 	bl	8005828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SDMMC_EN_Pin|LRA_EN_Pin, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002268:	4871      	ldr	r0, [pc, #452]	@ (8002430 <MX_GPIO_Init+0x31c>)
 800226a:	f003 fadd 	bl	8005828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO3_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	f248 0120 	movw	r1, #32800	@ 0x8020
 8002274:	486f      	ldr	r0, [pc, #444]	@ (8002434 <MX_GPIO_Init+0x320>)
 8002276:	f003 fad7 	bl	8005828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GNSS_RST_Pin|TP_RST_Pin|GNSS_WAKEUP_Pin, GPIO_PIN_RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	21c8      	movs	r1, #200	@ 0xc8
 800227e:	486e      	ldr	r0, [pc, #440]	@ (8002438 <MX_GPIO_Init+0x324>)
 8002280:	f003 fad2 	bl	8005828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_RST_GPIO_Port, FLASH_RST_Pin, GPIO_PIN_RESET);
 8002284:	2200      	movs	r2, #0
 8002286:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800228a:	486c      	ldr	r0, [pc, #432]	@ (800243c <MX_GPIO_Init+0x328>)
 800228c:	f003 facc 	bl	8005828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, GPIO_PIN_RESET);
 8002290:	2200      	movs	r2, #0
 8002292:	2180      	movs	r1, #128	@ 0x80
 8002294:	486a      	ldr	r0, [pc, #424]	@ (8002440 <MX_GPIO_Init+0x32c>)
 8002296:	f003 fac7 	bl	8005828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022a0:	4868      	ldr	r0, [pc, #416]	@ (8002444 <MX_GPIO_Init+0x330>)
 80022a2:	f003 fac1 	bl	8005828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPLAY_SWIRE_IN_Pin DISPLAY_SWIRE_OUT_Pin */
  GPIO_InitStruct.Pin = DISPLAY_SWIRE_IN_Pin|DISPLAY_SWIRE_OUT_Pin;
 80022a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80022aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ac:	2300      	movs	r3, #0
 80022ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022b8:	4619      	mov	r1, r3
 80022ba:	485c      	ldr	r0, [pc, #368]	@ (800242c <MX_GPIO_Init+0x318>)
 80022bc:	f003 f8dc 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : AVDDEN_Pin */
  GPIO_InitStruct.Pin = AVDDEN_Pin;
 80022c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c6:	2301      	movs	r3, #1
 80022c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022ca:	2302      	movs	r3, #2
 80022cc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(AVDDEN_GPIO_Port, &GPIO_InitStruct);
 80022d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022d6:	4619      	mov	r1, r3
 80022d8:	4854      	ldr	r0, [pc, #336]	@ (800242c <MX_GPIO_Init+0x318>)
 80022da:	f003 f8cd 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_EN_Pin */
  GPIO_InitStruct.Pin = SDMMC_EN_Pin;
 80022de:	2310      	movs	r3, #16
 80022e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e2:	2301      	movs	r3, #1
 80022e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(SDMMC_EN_GPIO_Port, &GPIO_InitStruct);
 80022ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022f2:	4619      	mov	r1, r3
 80022f4:	484e      	ldr	r0, [pc, #312]	@ (8002430 <MX_GPIO_Init+0x31c>)
 80022f6:	f003 f8bf 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_CD_Pin PWR_INT_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|PWR_INT_Pin;
 80022fa:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80022fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002300:	2300      	movs	r3, #0
 8002302:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002304:	2301      	movs	r3, #1
 8002306:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002308:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800230c:	4619      	mov	r1, r3
 800230e:	4848      	ldr	r0, [pc, #288]	@ (8002430 <MX_GPIO_Init+0x31c>)
 8002310:	f003 f8b2 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC8 PC11 PC12
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
 8002314:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002322:	2302      	movs	r3, #2
 8002324:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002326:	230c      	movs	r3, #12
 8002328:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800232a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800232e:	4619      	mov	r1, r3
 8002330:	4845      	ldr	r0, [pc, #276]	@ (8002448 <MX_GPIO_Init+0x334>)
 8002332:	f003 f8a1 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|PWR_ENCHG_Pin;
 8002336:	f248 0320 	movw	r3, #32800	@ 0x8020
 800233a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233c:	2301      	movs	r3, #1
 800233e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002340:	2302      	movs	r3, #2
 8002342:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	2300      	movs	r3, #0
 8002346:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002348:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800234c:	4619      	mov	r1, r3
 800234e:	4839      	ldr	r0, [pc, #228]	@ (8002434 <MX_GPIO_Init+0x320>)
 8002350:	f003 f892 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002354:	2304      	movs	r3, #4
 8002356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002360:	2302      	movs	r3, #2
 8002362:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002364:	230c      	movs	r3, #12
 8002366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002368:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800236c:	4619      	mov	r1, r3
 800236e:	4830      	ldr	r0, [pc, #192]	@ (8002430 <MX_GPIO_Init+0x31c>)
 8002370:	f003 f882 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8002374:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	2300      	movs	r3, #0
 8002384:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002386:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800238a:	4619      	mov	r1, r3
 800238c:	482f      	ldr	r0, [pc, #188]	@ (800244c <MX_GPIO_Init+0x338>)
 800238e:	f003 f873 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT2_Pin */
  GPIO_InitStruct.Pin = BT_INT2_Pin;
 8002392:	2380      	movs	r3, #128	@ 0x80
 8002394:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002396:	2300      	movs	r3, #0
 8002398:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800239a:	2302      	movs	r3, #2
 800239c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BT_INT2_GPIO_Port, &GPIO_InitStruct);
 800239e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023a2:	4619      	mov	r1, r3
 80023a4:	4828      	ldr	r0, [pc, #160]	@ (8002448 <MX_GPIO_Init+0x334>)
 80023a6:	f003 f867 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023b8:	2302      	movs	r3, #2
 80023ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 80023bc:	2308      	movs	r3, #8
 80023be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023c4:	4619      	mov	r1, r3
 80023c6:	481b      	ldr	r0, [pc, #108]	@ (8002434 <MX_GPIO_Init+0x320>)
 80023c8:	f003 f856 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_Pin GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO1_Pin;
 80023cc:	2303      	movs	r3, #3
 80023ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d0:	2300      	movs	r3, #0
 80023d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023d4:	2302      	movs	r3, #2
 80023d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023dc:	4619      	mov	r1, r3
 80023de:	4814      	ldr	r0, [pc, #80]	@ (8002430 <MX_GPIO_Init+0x31c>)
 80023e0:	f003 f84a 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT1_Pin */
  GPIO_InitStruct.Pin = BT_INT1_Pin;
 80023e4:	2340      	movs	r3, #64	@ 0x40
 80023e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023e8:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <MX_GPIO_Init+0x33c>)
 80023ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023ec:	2302      	movs	r3, #2
 80023ee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BT_INT1_GPIO_Port, &GPIO_InitStruct);
 80023f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023f4:	4619      	mov	r1, r3
 80023f6:	4814      	ldr	r0, [pc, #80]	@ (8002448 <MX_GPIO_Init+0x334>)
 80023f8:	f003 f83e 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin|TP_RST_Pin;
 80023fc:	2388      	movs	r3, #136	@ 0x88
 80023fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002400:	2301      	movs	r3, #1
 8002402:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002404:	2301      	movs	r3, #1
 8002406:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002408:	2300      	movs	r3, #0
 800240a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800240c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002410:	4619      	mov	r1, r3
 8002412:	4809      	ldr	r0, [pc, #36]	@ (8002438 <MX_GPIO_Init+0x324>)
 8002414:	f003 f830 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_PPS_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin;
 8002418:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800241c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800241e:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <MX_GPIO_Init+0x33c>)
 8002420:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	637b      	str	r3, [r7, #52]	@ 0x34
 8002426:	e015      	b.n	8002454 <MX_GPIO_Init+0x340>
 8002428:	46020c00 	.word	0x46020c00
 800242c:	42021800 	.word	0x42021800
 8002430:	42020c00 	.word	0x42020c00
 8002434:	42020400 	.word	0x42020400
 8002438:	42022400 	.word	0x42022400
 800243c:	42022000 	.word	0x42022000
 8002440:	42021400 	.word	0x42021400
 8002444:	42021000 	.word	0x42021000
 8002448:	42020800 	.word	0x42020800
 800244c:	42020000 	.word	0x42020000
 8002450:	10110000 	.word	0x10110000
  HAL_GPIO_Init(GNSS_PPS_GPIO_Port, &GPIO_InitStruct);
 8002454:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002458:	4619      	mov	r1, r3
 800245a:	4860      	ldr	r0, [pc, #384]	@ (80025dc <MX_GPIO_Init+0x4c8>)
 800245c:	f003 f80c 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_WAKEUP_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin;
 8002460:	2340      	movs	r3, #64	@ 0x40
 8002462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002464:	2301      	movs	r3, #1
 8002466:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	2300      	movs	r3, #0
 800246e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GNSS_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8002470:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002474:	4619      	mov	r1, r3
 8002476:	485a      	ldr	r0, [pc, #360]	@ (80025e0 <MX_GPIO_Init+0x4cc>)
 8002478:	f002 fffe 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 800247c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002482:	4b58      	ldr	r3, [pc, #352]	@ (80025e4 <MX_GPIO_Init+0x4d0>)
 8002484:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002486:	2301      	movs	r3, #1
 8002488:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 800248a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800248e:	4619      	mov	r1, r3
 8002490:	4853      	ldr	r0, [pc, #332]	@ (80025e0 <MX_GPIO_Init+0x4cc>)
 8002492:	f002 fff1 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RST_Pin */
  GPIO_InitStruct.Pin = FLASH_RST_Pin;
 8002496:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800249a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249c:	2301      	movs	r3, #1
 800249e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a0:	2301      	movs	r3, #1
 80024a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a4:	2300      	movs	r3, #0
 80024a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(FLASH_RST_GPIO_Port, &GPIO_InitStruct);
 80024a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024ac:	4619      	mov	r1, r3
 80024ae:	484e      	ldr	r0, [pc, #312]	@ (80025e8 <MX_GPIO_Init+0x4d4>)
 80024b0:	f002 ffe2 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_INT_Pin */
  GPIO_InitStruct.Pin = FLASH_INT_Pin;
 80024b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024ba:	4b4a      	ldr	r3, [pc, #296]	@ (80025e4 <MX_GPIO_Init+0x4d0>)
 80024bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024be:	2301      	movs	r3, #1
 80024c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(FLASH_INT_GPIO_Port, &GPIO_InitStruct);
 80024c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024c6:	4619      	mov	r1, r3
 80024c8:	4847      	ldr	r0, [pc, #284]	@ (80025e8 <MX_GPIO_Init+0x4d4>)
 80024ca:	f002 ffd5 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RSTO_Pin */
  GPIO_InitStruct.Pin = FLASH_RSTO_Pin;
 80024ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d4:	2300      	movs	r3, #0
 80024d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024d8:	2301      	movs	r3, #1
 80024da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(FLASH_RSTO_GPIO_Port, &GPIO_InitStruct);
 80024dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024e0:	4619      	mov	r1, r3
 80024e2:	4841      	ldr	r0, [pc, #260]	@ (80025e8 <MX_GPIO_Init+0x4d4>)
 80024e4:	f002 ffc8 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin;
 80024e8:	2380      	movs	r3, #128	@ 0x80
 80024ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ec:	2301      	movs	r3, #1
 80024ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024f0:	2301      	movs	r3, #1
 80024f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f4:	2300      	movs	r3, #0
 80024f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DISPLAY_RST_GPIO_Port, &GPIO_InitStruct);
 80024f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024fc:	4619      	mov	r1, r3
 80024fe:	483b      	ldr	r0, [pc, #236]	@ (80025ec <MX_GPIO_Init+0x4d8>)
 8002500:	f002 ffba 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALS_INT_Pin */
  GPIO_InitStruct.Pin = ALS_INT_Pin;
 8002504:	2340      	movs	r3, #64	@ 0x40
 8002506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002508:	2300      	movs	r3, #0
 800250a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800250c:	2301      	movs	r3, #1
 800250e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ALS_INT_GPIO_Port, &GPIO_InitStruct);
 8002510:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002514:	4619      	mov	r1, r3
 8002516:	4835      	ldr	r0, [pc, #212]	@ (80025ec <MX_GPIO_Init+0x4d8>)
 8002518:	f002 ffae 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 800251c:	2380      	movs	r3, #128	@ 0x80
 800251e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002520:	4b30      	ldr	r3, [pc, #192]	@ (80025e4 <MX_GPIO_Init+0x4d0>)
 8002522:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002524:	2301      	movs	r3, #1
 8002526:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8002528:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800252c:	4619      	mov	r1, r3
 800252e:	4830      	ldr	r0, [pc, #192]	@ (80025f0 <MX_GPIO_Init+0x4dc>)
 8002530:	f002 ffa2 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8002534:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253a:	2301      	movs	r3, #1
 800253c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800253e:	2301      	movs	r3, #1
 8002540:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002542:	2300      	movs	r3, #0
 8002544:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8002546:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800254a:	4619      	mov	r1, r3
 800254c:	4828      	ldr	r0, [pc, #160]	@ (80025f0 <MX_GPIO_Init+0x4dc>)
 800254e:	f002 ff93 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : HR_INT_Pin */
  GPIO_InitStruct.Pin = HR_INT_Pin;
 8002552:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002558:	4b22      	ldr	r3, [pc, #136]	@ (80025e4 <MX_GPIO_Init+0x4d0>)
 800255a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800255c:	2301      	movs	r3, #1
 800255e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(HR_INT_GPIO_Port, &GPIO_InitStruct);
 8002560:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002564:	4619      	mov	r1, r3
 8002566:	4823      	ldr	r0, [pc, #140]	@ (80025f4 <MX_GPIO_Init+0x4e0>)
 8002568:	f002 ff86 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : LRA_EN_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin;
 800256c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002570:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002572:	2301      	movs	r3, #1
 8002574:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002576:	2302      	movs	r3, #2
 8002578:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LRA_EN_GPIO_Port, &GPIO_InitStruct);
 800257e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002582:	4619      	mov	r1, r3
 8002584:	481b      	ldr	r0, [pc, #108]	@ (80025f4 <MX_GPIO_Init+0x4e0>)
 8002586:	f002 ff77 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_INT_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin;
 800258a:	2310      	movs	r3, #16
 800258c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800258e:	4b15      	ldr	r3, [pc, #84]	@ (80025e4 <MX_GPIO_Init+0x4d0>)
 8002590:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002592:	2301      	movs	r3, #1
 8002594:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MAG_INT_GPIO_Port, &GPIO_InitStruct);
 8002596:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800259a:	4619      	mov	r1, r3
 800259c:	4816      	ldr	r0, [pc, #88]	@ (80025f8 <MX_GPIO_Init+0x4e4>)
 800259e:	f002 ff6b 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 80025a2:	2304      	movs	r3, #4
 80025a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025a6:	4b15      	ldr	r3, [pc, #84]	@ (80025fc <MX_GPIO_Init+0x4e8>)
 80025a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 80025ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025b2:	4619      	mov	r1, r3
 80025b4:	4812      	ldr	r0, [pc, #72]	@ (8002600 <MX_GPIO_Init+0x4ec>)
 80025b6:	f002 ff5f 	bl	8005478 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin;
 80025ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c0:	2300      	movs	r3, #0
 80025c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(IMU_INT2_GPIO_Port, &GPIO_InitStruct);
 80025c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025cc:	4619      	mov	r1, r3
 80025ce:	4807      	ldr	r0, [pc, #28]	@ (80025ec <MX_GPIO_Init+0x4d8>)
 80025d0:	f002 ff52 	bl	8005478 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025d4:	bf00      	nop
 80025d6:	3740      	adds	r7, #64	@ 0x40
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	42020000 	.word	0x42020000
 80025e0:	42022400 	.word	0x42022400
 80025e4:	10210000 	.word	0x10210000
 80025e8:	42022000 	.word	0x42022000
 80025ec:	42021400 	.word	0x42021400
 80025f0:	42021000 	.word	0x42021000
 80025f4:	42020c00 	.word	0x42020c00
 80025f8:	42020800 	.word	0x42020800
 80025fc:	10110000 	.word	0x10110000
 8002600:	42020400 	.word	0x42020400

08002604 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a04      	ldr	r2, [pc, #16]	@ (8002624 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d101      	bne.n	800261a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002616:	f001 fa5f 	bl	8003ad8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40001000 	.word	0x40001000

08002628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800262c:	b672      	cpsid	i
}
 800262e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002630:	bf00      	nop
 8002632:	e7fd      	b.n	8002630 <Error_Handler+0x8>

08002634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800263a:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <HAL_MspInit+0x30>)
 800263c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002640:	4a08      	ldr	r2, [pc, #32]	@ (8002664 <HAL_MspInit+0x30>)
 8002642:	f043 0304 	orr.w	r3, r3, #4
 8002646:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800264a:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <HAL_MspInit+0x30>)
 800264c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	46020c00 	.word	0x46020c00

08002668 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b0c2      	sub	sp, #264	@ 0x108
 800266c:	af00      	add	r7, sp, #0
 800266e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002676:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002688:	f107 0310 	add.w	r3, r7, #16
 800268c:	22e0      	movs	r2, #224	@ 0xe0
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f00b fdde 	bl	800e252 <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8002696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800269a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a2b      	ldr	r2, [pc, #172]	@ (8002750 <HAL_MDF_MspInit+0xe8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d14e      	bne.n	8002746 <HAL_MDF_MspInit+0xde>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 80026a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ba:	f107 0310 	add.w	r3, r7, #16
 80026be:	4618      	mov	r0, r3
 80026c0:	f007 f8b6 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_MDF_MspInit+0x66>
    {
      Error_Handler();
 80026ca:	f7ff ffad 	bl	8002628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 80026ce:	4b21      	ldr	r3, [pc, #132]	@ (8002754 <HAL_MDF_MspInit+0xec>)
 80026d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002754 <HAL_MDF_MspInit+0xec>)
 80026d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80026de:	4b1d      	ldr	r3, [pc, #116]	@ (8002754 <HAL_MDF_MspInit+0xec>)
 80026e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026ec:	4b19      	ldr	r3, [pc, #100]	@ (8002754 <HAL_MDF_MspInit+0xec>)
 80026ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026f2:	4a18      	ldr	r2, [pc, #96]	@ (8002754 <HAL_MDF_MspInit+0xec>)
 80026f4:	f043 0310 	orr.w	r3, r3, #16
 80026f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026fc:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <HAL_MDF_MspInit+0xec>)
 80026fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002702:	f003 0210 	and.w	r2, r3, #16
 8002706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800270a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002714:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002718:	681b      	ldr	r3, [r3, #0]
    /**ADF1 GPIO Configuration
    PE9     ------> ADF1_CCK0
    PE10     ------> ADF1_SDI0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800271a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800271e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272e:	2300      	movs	r3, #0
 8002730:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8002734:	2303      	movs	r3, #3
 8002736:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800273a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800273e:	4619      	mov	r1, r3
 8002740:	4805      	ldr	r0, [pc, #20]	@ (8002758 <HAL_MDF_MspInit+0xf0>)
 8002742:	f002 fe99 	bl	8005478 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 8002746:	bf00      	nop
 8002748:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	46024080 	.word	0x46024080
 8002754:	46020c00 	.word	0x46020c00
 8002758:	42021000 	.word	0x42021000

0800275c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0b      	ldr	r2, [pc, #44]	@ (8002798 <HAL_CRC_MspInit+0x3c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d10e      	bne.n	800278c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800276e:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <HAL_CRC_MspInit+0x40>)
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002774:	4a09      	ldr	r2, [pc, #36]	@ (800279c <HAL_CRC_MspInit+0x40>)
 8002776:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800277a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800277e:	4b07      	ldr	r3, [pc, #28]	@ (800279c <HAL_CRC_MspInit+0x40>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002784:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	40023000 	.word	0x40023000
 800279c:	46020c00 	.word	0x46020c00

080027a0 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a16      	ldr	r2, [pc, #88]	@ (8002808 <HAL_DCACHE_MspInit+0x68>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10f      	bne.n	80027d2 <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 80027b2:	4b16      	ldr	r3, [pc, #88]	@ (800280c <HAL_DCACHE_MspInit+0x6c>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b8:	4a14      	ldr	r2, [pc, #80]	@ (800280c <HAL_DCACHE_MspInit+0x6c>)
 80027ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80027be:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80027c2:	4b12      	ldr	r3, [pc, #72]	@ (800280c <HAL_DCACHE_MspInit+0x6c>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 80027d0:	e013      	b.n	80027fa <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002810 <HAL_DCACHE_MspInit+0x70>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d10e      	bne.n	80027fa <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 80027dc:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <HAL_DCACHE_MspInit+0x6c>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e2:	4a0a      	ldr	r2, [pc, #40]	@ (800280c <HAL_DCACHE_MspInit+0x6c>)
 80027e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80027ec:	4b07      	ldr	r3, [pc, #28]	@ (800280c <HAL_DCACHE_MspInit+0x6c>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40031400 	.word	0x40031400
 800280c:	46020c00 	.word	0x46020c00
 8002810:	40031800 	.word	0x40031800

08002814 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0e      	ldr	r2, [pc, #56]	@ (800285c <HAL_DMA2D_MspInit+0x48>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d116      	bne.n	8002854 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002826:	4b0e      	ldr	r3, [pc, #56]	@ (8002860 <HAL_DMA2D_MspInit+0x4c>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282c:	4a0c      	ldr	r2, [pc, #48]	@ (8002860 <HAL_DMA2D_MspInit+0x4c>)
 800282e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002832:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002836:	4b0a      	ldr	r3, [pc, #40]	@ (8002860 <HAL_DMA2D_MspInit+0x4c>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	2100      	movs	r1, #0
 8002848:	2076      	movs	r0, #118	@ 0x76
 800284a:	f001 fa41 	bl	8003cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800284e:	2076      	movs	r0, #118	@ 0x76
 8002850:	f001 fa58 	bl	8003d04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	4002b000 	.word	0x4002b000
 8002860:	46020c00 	.word	0x46020c00

08002864 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b0c2      	sub	sp, #264	@ 0x108
 8002868:	af00      	add	r7, sp, #0
 800286a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800286e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002872:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002874:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002884:	f107 0310 	add.w	r3, r7, #16
 8002888:	22e0      	movs	r2, #224	@ 0xe0
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f00b fce0 	bl	800e252 <memset>
  if(hdsi->Instance==DSI)
 8002892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002896:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a30      	ldr	r2, [pc, #192]	@ (8002960 <HAL_DSI_MspInit+0xfc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d157      	bne.n	8002954 <HAL_DSI_MspInit+0xf0>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0304 	mov.w	r3, #4
 80028ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 80028b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028b8:	f107 0310 	add.w	r3, r7, #16
 80028bc:	4618      	mov	r0, r3
 80028be:	f006 ffb7 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_DSI_MspInit+0x68>
    {
      Error_Handler();
 80028c8:	f7ff feae 	bl	8002628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80028cc:	4b25      	ldr	r3, [pc, #148]	@ (8002964 <HAL_DSI_MspInit+0x100>)
 80028ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028d2:	4a24      	ldr	r2, [pc, #144]	@ (8002964 <HAL_DSI_MspInit+0x100>)
 80028d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80028d8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80028dc:	4b21      	ldr	r3, [pc, #132]	@ (8002964 <HAL_DSI_MspInit+0x100>)
 80028de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002964 <HAL_DSI_MspInit+0x100>)
 80028ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002964 <HAL_DSI_MspInit+0x100>)
 80028f2:	f043 0320 	orr.w	r3, r3, #32
 80028f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002964 <HAL_DSI_MspInit+0x100>)
 80028fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002900:	f003 0220 	and.w	r2, r3, #32
 8002904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002908:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002912:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002916:	681b      	ldr	r3, [r3, #0]
    DSI_CKN     ------> DSIHOST_CKN
    DSI_D1N     ------> DSIHOST_D1N
    DSI_D1P     ------> DSIHOST_D1P
    PF10     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800291c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292c:	2300      	movs	r3, #0
 800292e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8002932:	230b      	movs	r3, #11
 8002934:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002938:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800293c:	4619      	mov	r1, r3
 800293e:	480a      	ldr	r0, [pc, #40]	@ (8002968 <HAL_DSI_MspInit+0x104>)
 8002940:	f002 fd9a 	bl	8005478 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8002944:	2200      	movs	r2, #0
 8002946:	2100      	movs	r1, #0
 8002948:	2089      	movs	r0, #137	@ 0x89
 800294a:	f001 f9c1 	bl	8003cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800294e:	2089      	movs	r0, #137	@ 0x89
 8002950:	f001 f9d8 	bl	8003d04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8002954:	bf00      	nop
 8002956:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40016c00 	.word	0x40016c00
 8002964:	46020c00 	.word	0x46020c00
 8002968:	42021400 	.word	0x42021400

0800296c <HAL_GFXMMU_MspInit>:
* This function configures the hardware resources used in this example
* @param hgfxmmu: GFXMMU handle pointer
* @retval None
*/
void HAL_GFXMMU_MspInit(GFXMMU_HandleTypeDef* hgfxmmu)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if(hgfxmmu->Instance==GFXMMU)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0e      	ldr	r2, [pc, #56]	@ (80029b4 <HAL_GFXMMU_MspInit+0x48>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d116      	bne.n	80029ac <HAL_GFXMMU_MspInit+0x40>
  {
  /* USER CODE BEGIN GFXMMU_MspInit 0 */

  /* USER CODE END GFXMMU_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GFXMMU_CLK_ENABLE();
 800297e:	4b0e      	ldr	r3, [pc, #56]	@ (80029b8 <HAL_GFXMMU_MspInit+0x4c>)
 8002980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002984:	4a0c      	ldr	r2, [pc, #48]	@ (80029b8 <HAL_GFXMMU_MspInit+0x4c>)
 8002986:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800298a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800298e:	4b0a      	ldr	r3, [pc, #40]	@ (80029b8 <HAL_GFXMMU_MspInit+0x4c>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002994:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]
    /* GFXMMU interrupt Init */
    HAL_NVIC_SetPriority(GFXMMU_IRQn, 0, 0);
 800299c:	2200      	movs	r2, #0
 800299e:	2100      	movs	r1, #0
 80029a0:	2086      	movs	r0, #134	@ 0x86
 80029a2:	f001 f995 	bl	8003cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GFXMMU_IRQn);
 80029a6:	2086      	movs	r0, #134	@ 0x86
 80029a8:	f001 f9ac 	bl	8003d04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GFXMMU_MspInit 1 */

  /* USER CODE END GFXMMU_MspInit 1 */
  }

}
 80029ac:	bf00      	nop
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	4002c000 	.word	0x4002c000
 80029b8:	46020c00 	.word	0x46020c00

080029bc <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a34 <HAL_GPU2D_MspInit+0x78>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d12d      	bne.n	8002a2a <HAL_GPU2D_MspInit+0x6e>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 80029ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002a38 <HAL_GPU2D_MspInit+0x7c>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d4:	4a18      	ldr	r2, [pc, #96]	@ (8002a38 <HAL_GPU2D_MspInit+0x7c>)
 80029d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029da:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80029de:	4b16      	ldr	r3, [pc, #88]	@ (8002a38 <HAL_GPU2D_MspInit+0x7c>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 80029ec:	4b12      	ldr	r3, [pc, #72]	@ (8002a38 <HAL_GPU2D_MspInit+0x7c>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f2:	4a11      	ldr	r2, [pc, #68]	@ (8002a38 <HAL_GPU2D_MspInit+0x7c>)
 80029f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80029fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002a38 <HAL_GPU2D_MspInit+0x7c>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 0, 0);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	2084      	movs	r0, #132	@ 0x84
 8002a10:	f001 f95e 	bl	8003cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 8002a14:	2084      	movs	r0, #132	@ 0x84
 8002a16:	f001 f975 	bl	8003d04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 0, 0);
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	2085      	movs	r0, #133	@ 0x85
 8002a20:	f001 f956 	bl	8003cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 8002a24:	2085      	movs	r0, #133	@ 0x85
 8002a26:	f001 f96d 	bl	8003d04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */

  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	4002f000 	.word	0x4002f000
 8002a38:	46020c00 	.word	0x46020c00

08002a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b0cc      	sub	sp, #304	@ 0x130
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002a46:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a4a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	60da      	str	r2, [r3, #12]
 8002a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a60:	22e0      	movs	r2, #224	@ 0xe0
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f00b fbf4 	bl	800e252 <memset>
  if(hi2c->Instance==I2C1)
 8002a6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002a6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4aba      	ldr	r2, [pc, #744]	@ (8002d60 <HAL_I2C_MspInit+0x324>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d14f      	bne.n	8002b1c <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a7c:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a92:	4618      	mov	r0, r3
 8002a94:	f006 fecc 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8002a9e:	f7ff fdc3 	bl	8002628 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002aa2:	4bb0      	ldr	r3, [pc, #704]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002aa8:	4aae      	ldr	r2, [pc, #696]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002aae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ab2:	4bac      	ldr	r3, [pc, #688]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002ac0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002ac4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ac8:	2312      	movs	r3, #18
 8002aca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ada:	2304      	movs	r3, #4
 8002adc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ae0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	48a0      	ldr	r0, [pc, #640]	@ (8002d68 <HAL_I2C_MspInit+0x32c>)
 8002ae8:	f002 fcc6 	bl	8005478 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aec:	4b9d      	ldr	r3, [pc, #628]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002aee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002af2:	4a9c      	ldr	r2, [pc, #624]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002af4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002af8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002afc:	4b99      	ldr	r3, [pc, #612]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b02:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002b06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002b0a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002b14:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b18:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C6_MspInit 1 */

  /* USER CODE END I2C6_MspInit 1 */
  }

}
 8002b1a:	e1c0      	b.n	8002e9e <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C2)
 8002b1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002b20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a90      	ldr	r2, [pc, #576]	@ (8002d6c <HAL_I2C_MspInit+0x330>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d157      	bne.n	8002bde <HAL_I2C_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002b2e:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002b44:	4618      	mov	r0, r3
 8002b46:	f006 fe73 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8002b50:	f7ff fd6a 	bl	8002628 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b54:	4b83      	ldr	r3, [pc, #524]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b5a:	4a82      	ldr	r2, [pc, #520]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b64:	4b7f      	ldr	r3, [pc, #508]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b6a:	f003 0202 	and.w	r2, r3, #2
 8002b6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002b72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002b7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b80:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002b82:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002b86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b8a:	2312      	movs	r3, #18
 8002b8c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba2:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4871      	ldr	r0, [pc, #452]	@ (8002d70 <HAL_I2C_MspInit+0x334>)
 8002baa:	f002 fc65 	bl	8005478 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bae:	4b6d      	ldr	r3, [pc, #436]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002bb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002bb4:	4a6b      	ldr	r2, [pc, #428]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002bb6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bba:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002bbe:	4b69      	ldr	r3, [pc, #420]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002bc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002bcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002bd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	e15f      	b.n	8002e9e <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C3)
 8002bde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002be2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a62      	ldr	r2, [pc, #392]	@ (8002d74 <HAL_I2C_MspInit+0x338>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d156      	bne.n	8002c9e <HAL_I2C_MspInit+0x262>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002bf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c02:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c06:	4618      	mov	r0, r3
 8002c08:	f006 fe12 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_MspInit+0x1da>
      Error_Handler();
 8002c12:	f7ff fd09 	bl	8002628 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c16:	4b53      	ldr	r3, [pc, #332]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c1c:	4a51      	ldr	r2, [pc, #324]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002c1e:	f043 0304 	orr.w	r3, r3, #4
 8002c22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c26:	4b4f      	ldr	r3, [pc, #316]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c2c:	f003 0204 	and.w	r2, r3, #4
 8002c30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002c34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002c3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c42:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002c44:	2303      	movs	r3, #3
 8002c46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c4a:	2312      	movs	r3, #18
 8002c4c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c62:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002c66:	4619      	mov	r1, r3
 8002c68:	4843      	ldr	r0, [pc, #268]	@ (8002d78 <HAL_I2C_MspInit+0x33c>)
 8002c6a:	f002 fc05 	bl	8005478 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002c70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002c74:	4a3b      	ldr	r2, [pc, #236]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002c76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c7a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002c7e:	4b39      	ldr	r3, [pc, #228]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002c80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002c84:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002c88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002c8c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002c96:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	e0ff      	b.n	8002e9e <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C4)
 8002c9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002ca2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a34      	ldr	r2, [pc, #208]	@ (8002d7c <HAL_I2C_MspInit+0x340>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d169      	bne.n	8002d84 <HAL_I2C_MspInit+0x348>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002cb0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cc2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f006 fdb2 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_I2C_MspInit+0x29a>
      Error_Handler();
 8002cd2:	f7ff fca9 	bl	8002628 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cd6:	4b23      	ldr	r3, [pc, #140]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cdc:	4a21      	ldr	r2, [pc, #132]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002cde:	f043 0308 	orr.w	r3, r3, #8
 8002ce2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cec:	f003 0208 	and.w	r2, r3, #8
 8002cf0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002cf4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002cfe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d02:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002d04:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002d08:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d0c:	2312      	movs	r3, #18
 8002d0e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002d1e:	2304      	movs	r3, #4
 8002d20:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d24:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4815      	ldr	r0, [pc, #84]	@ (8002d80 <HAL_I2C_MspInit+0x344>)
 8002d2c:	f002 fba4 	bl	8005478 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002d30:	4b0c      	ldr	r3, [pc, #48]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002d32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002d36:	4a0b      	ldr	r2, [pc, #44]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002d38:	f043 0302 	orr.w	r3, r3, #2
 8002d3c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8002d40:	4b08      	ldr	r3, [pc, #32]	@ (8002d64 <HAL_I2C_MspInit+0x328>)
 8002d42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002d46:	f003 0202 	and.w	r2, r3, #2
 8002d4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d4e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d58:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d5c:	681b      	ldr	r3, [r3, #0]
}
 8002d5e:	e09e      	b.n	8002e9e <HAL_I2C_MspInit+0x462>
 8002d60:	40005400 	.word	0x40005400
 8002d64:	46020c00 	.word	0x46020c00
 8002d68:	42021800 	.word	0x42021800
 8002d6c:	40005800 	.word	0x40005800
 8002d70:	42020400 	.word	0x42020400
 8002d74:	46002800 	.word	0x46002800
 8002d78:	42020800 	.word	0x42020800
 8002d7c:	40008400 	.word	0x40008400
 8002d80:	42020c00 	.word	0x42020c00
  else if(hi2c->Instance==I2C6)
 8002d84:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a45      	ldr	r2, [pc, #276]	@ (8002ea8 <HAL_I2C_MspInit+0x46c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	f040 8083 	bne.w	8002e9e <HAL_I2C_MspInit+0x462>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C6;
 8002d98:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c6ClockSelection = RCC_I2C6CLKSOURCE_PCLK1;
 8002da4:	2300      	movs	r3, #0
 8002da6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002daa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002dae:	4618      	mov	r0, r3
 8002db0:	f006 fd3e 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_MspInit+0x382>
      Error_Handler();
 8002dba:	f7ff fc35 	bl	8002628 <Error_Handler>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8002eac <HAL_I2C_MspInit+0x470>)
 8002dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dc4:	4a39      	ldr	r2, [pc, #228]	@ (8002eac <HAL_I2C_MspInit+0x470>)
 8002dc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002dce:	4b37      	ldr	r3, [pc, #220]	@ (8002eac <HAL_I2C_MspInit+0x470>)
 8002dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dd4:	f403 7200 	and.w	r2, r3, #512	@ 0x200
 8002dd8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002ddc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002de6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002dea:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dec:	4b2f      	ldr	r3, [pc, #188]	@ (8002eac <HAL_I2C_MspInit+0x470>)
 8002dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002df2:	4a2e      	ldr	r2, [pc, #184]	@ (8002eac <HAL_I2C_MspInit+0x470>)
 8002df4:	f043 0320 	orr.w	r3, r3, #32
 8002df8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8002eac <HAL_I2C_MspInit+0x470>)
 8002dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e02:	f003 0220 	and.w	r2, r3, #32
 8002e06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e0a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e14:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e18:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e1e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e22:	2312      	movs	r3, #18
 8002e24:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 8002e34:	2302      	movs	r3, #2
 8002e36:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002e3a:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002e3e:	4619      	mov	r1, r3
 8002e40:	481b      	ldr	r0, [pc, #108]	@ (8002eb0 <HAL_I2C_MspInit+0x474>)
 8002e42:	f002 fb19 	bl	8005478 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e46:	2301      	movs	r3, #1
 8002e48:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e4c:	2312      	movs	r3, #18
 8002e4e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e64:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4812      	ldr	r0, [pc, #72]	@ (8002eb4 <HAL_I2C_MspInit+0x478>)
 8002e6c:	f002 fb04 	bl	8005478 <HAL_GPIO_Init>
    __HAL_RCC_I2C6_CLK_ENABLE();
 8002e70:	4b0e      	ldr	r3, [pc, #56]	@ (8002eac <HAL_I2C_MspInit+0x470>)
 8002e72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002e76:	4a0d      	ldr	r2, [pc, #52]	@ (8002eac <HAL_I2C_MspInit+0x470>)
 8002e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e7c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8002e80:	4b0a      	ldr	r3, [pc, #40]	@ (8002eac <HAL_I2C_MspInit+0x470>)
 8002e82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002e86:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002e8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e8e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e98:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002e9c:	681b      	ldr	r3, [r3, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40009c00 	.word	0x40009c00
 8002eac:	46020c00 	.word	0x46020c00
 8002eb0:	42022400 	.word	0x42022400
 8002eb4:	42021400 	.word	0x42021400

08002eb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b0c8      	sub	sp, #288	@ 0x120
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ec2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ec6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ed8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002edc:	22e0      	movs	r2, #224	@ 0xe0
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f00b f9b6 	bl	800e252 <memset>
  if(huart->Instance==LPUART1)
 8002ee6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002eea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4aa1      	ldr	r2, [pc, #644]	@ (8003178 <HAL_UART_MspInit+0x2c0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d17b      	bne.n	8002ff0 <HAL_UART_MspInit+0x138>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002ef8:	f04f 0220 	mov.w	r2, #32
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8002f04:	2300      	movs	r3, #0
 8002f06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f006 fc8e 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8002f1a:	f7ff fb85 	bl	8002628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002f1e:	4b97      	ldr	r3, [pc, #604]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 8002f20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f24:	4a95      	ldr	r2, [pc, #596]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 8002f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f2a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002f2e:	4b93      	ldr	r3, [pc, #588]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 8002f30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f3c:	4b8f      	ldr	r3, [pc, #572]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 8002f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f42:	4a8e      	ldr	r2, [pc, #568]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 8002f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f48:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f4c:	4b8b      	ldr	r3, [pc, #556]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 8002f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f52:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8002f56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f5a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f64:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002f68:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6a:	4b84      	ldr	r3, [pc, #528]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 8002f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f70:	4a82      	ldr	r2, [pc, #520]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 8002f72:	f043 0302 	orr.w	r3, r3, #2
 8002f76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f7a:	4b80      	ldr	r3, [pc, #512]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 8002f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f80:	f003 0202 	and.w	r2, r3, #2
 8002f84:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f96:	681b      	ldr	r3, [r3, #0]
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    PG5     ------> LPUART1_CTS
    PB1     ------> LPUART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_5;
 8002f98:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8002f9c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fac:	2300      	movs	r3, #0
 8002fae:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fb8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4870      	ldr	r0, [pc, #448]	@ (8003180 <HAL_UART_MspInit+0x2c8>)
 8002fc0:	f002 fa5a 	bl	8005478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002fdc:	2308      	movs	r3, #8
 8002fde:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4866      	ldr	r0, [pc, #408]	@ (8003184 <HAL_UART_MspInit+0x2cc>)
 8002fea:	f002 fa45 	bl	8005478 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002fee:	e0bd      	b.n	800316c <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART1)
 8002ff0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ff4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a62      	ldr	r2, [pc, #392]	@ (8003188 <HAL_UART_MspInit+0x2d0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d155      	bne.n	80030ae <HAL_UART_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003002:	f04f 0201 	mov.w	r2, #1
 8003006:	f04f 0300 	mov.w	r3, #0
 800300a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800300e:	2300      	movs	r3, #0
 8003010:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003012:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003016:	4618      	mov	r0, r3
 8003018:	f006 fc0a 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8003022:	f7ff fb01 	bl	8002628 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003026:	4b55      	ldr	r3, [pc, #340]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 8003028:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800302c:	4a53      	ldr	r2, [pc, #332]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 800302e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003032:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003036:	4b51      	ldr	r3, [pc, #324]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 8003038:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800303c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003040:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800304e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003052:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003054:	4b49      	ldr	r3, [pc, #292]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 8003056:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800305a:	4a48      	ldr	r2, [pc, #288]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 800305c:	f043 0302 	orr.w	r3, r3, #2
 8003060:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003064:	4b45      	ldr	r3, [pc, #276]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 8003066:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800306a:	f003 0202 	and.w	r2, r3, #2
 800306e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003072:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800307c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003080:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003082:	23c0      	movs	r3, #192	@ 0xc0
 8003084:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003088:	2302      	movs	r3, #2
 800308a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308e:	2300      	movs	r3, #0
 8003090:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003094:	2300      	movs	r3, #0
 8003096:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800309a:	2307      	movs	r3, #7
 800309c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80030a4:	4619      	mov	r1, r3
 80030a6:	4837      	ldr	r0, [pc, #220]	@ (8003184 <HAL_UART_MspInit+0x2cc>)
 80030a8:	f002 f9e6 	bl	8005478 <HAL_GPIO_Init>
}
 80030ac:	e05e      	b.n	800316c <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART6)
 80030ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80030b2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a34      	ldr	r2, [pc, #208]	@ (800318c <HAL_UART_MspInit+0x2d4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d155      	bne.n	800316c <HAL_UART_MspInit+0x2b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80030c0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 80030cc:	2300      	movs	r3, #0
 80030ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030d6:	4618      	mov	r0, r3
 80030d8:	f006 fbaa 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 80030e2:	f7ff faa1 	bl	8002628 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80030e6:	4b25      	ldr	r3, [pc, #148]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 80030e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030ec:	4a23      	ldr	r2, [pc, #140]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 80030ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030f2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80030f6:	4b21      	ldr	r3, [pc, #132]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 80030f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030fc:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8003100:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003104:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800310e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003112:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003114:	4b19      	ldr	r3, [pc, #100]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 8003116:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800311a:	4a18      	ldr	r2, [pc, #96]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003124:	4b15      	ldr	r3, [pc, #84]	@ (800317c <HAL_UART_MspInit+0x2c4>)
 8003126:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800312a:	f003 0204 	and.w	r2, r3, #4
 800312e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003132:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800313c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003140:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8003142:	230c      	movs	r3, #12
 8003144:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003148:	2302      	movs	r3, #2
 800314a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800315a:	2307      	movs	r3, #7
 800315c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003160:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003164:	4619      	mov	r1, r3
 8003166:	480a      	ldr	r0, [pc, #40]	@ (8003190 <HAL_UART_MspInit+0x2d8>)
 8003168:	f002 f986 	bl	8005478 <HAL_GPIO_Init>
}
 800316c:	bf00      	nop
 800316e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	46002400 	.word	0x46002400
 800317c:	46020c00 	.word	0x46020c00
 8003180:	42021800 	.word	0x42021800
 8003184:	42020400 	.word	0x42020400
 8003188:	40013800 	.word	0x40013800
 800318c:	40006400 	.word	0x40006400
 8003190:	42020800 	.word	0x42020800

08003194 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b0bc      	sub	sp, #240	@ 0xf0
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800319c:	f107 0310 	add.w	r3, r7, #16
 80031a0:	22e0      	movs	r2, #224	@ 0xe0
 80031a2:	2100      	movs	r1, #0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f00b f854 	bl	800e252 <memset>
  if(hltdc->Instance==LTDC)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a22      	ldr	r2, [pc, #136]	@ (8003238 <HAL_LTDC_MspInit+0xa4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d13d      	bne.n	8003230 <HAL_LTDC_MspInit+0x9c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0302 	mov.w	r3, #2
 80031bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 80031c0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80031c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80031c8:	2303      	movs	r3, #3
 80031ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLL2.PLL2M = 1;
 80031cc:	2301      	movs	r3, #1
 80031ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLL2.PLL2N = 20;
 80031d0:	2314      	movs	r3, #20
 80031d2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2P = 2;
 80031d4:	2302      	movs	r3, #2
 80031d6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLL2.PLL2Q = 2;
 80031d8:	2302      	movs	r3, #2
 80031da:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLL2.PLL2R = 2;
 80031dc:	2302      	movs	r3, #2
 80031de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 80031e0:	230c      	movs	r3, #12
 80031e2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 80031e8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80031ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031ee:	f107 0310 	add.w	r3, r7, #16
 80031f2:	4618      	mov	r0, r3
 80031f4:	f006 fb1c 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 80031fe:	f7ff fa13 	bl	8002628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003202:	4b0e      	ldr	r3, [pc, #56]	@ (800323c <HAL_LTDC_MspInit+0xa8>)
 8003204:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003208:	4a0c      	ldr	r2, [pc, #48]	@ (800323c <HAL_LTDC_MspInit+0xa8>)
 800320a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800320e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003212:	4b0a      	ldr	r3, [pc, #40]	@ (800323c <HAL_LTDC_MspInit+0xa8>)
 8003214:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003218:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8003220:	2200      	movs	r2, #0
 8003222:	2100      	movs	r1, #0
 8003224:	2087      	movs	r0, #135	@ 0x87
 8003226:	f000 fd53 	bl	8003cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800322a:	2087      	movs	r0, #135	@ 0x87
 800322c:	f000 fd6a 	bl	8003d04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003230:	bf00      	nop
 8003232:	37f0      	adds	r7, #240	@ 0xf0
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40016800 	.word	0x40016800
 800323c:	46020c00 	.word	0x46020c00

08003240 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b0ca      	sub	sp, #296	@ 0x128
 8003244:	af00      	add	r7, sp, #0
 8003246:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800324a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800324e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003260:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003264:	22e0      	movs	r2, #224	@ 0xe0
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f00a fff2 	bl	800e252 <memset>
  if(hospi->Instance==OCTOSPI1)
 800326e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003272:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a93      	ldr	r2, [pc, #588]	@ (80034c8 <HAL_OSPI_MspInit+0x288>)
 800327c:	4293      	cmp	r3, r2
 800327e:	f040 8133 	bne.w	80034e8 <HAL_OSPI_MspInit+0x2a8>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8003282:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800328e:	2300      	movs	r3, #0
 8003290:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003294:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003298:	4618      	mov	r0, r3
 800329a:	f006 fac9 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 80032a4:	f7ff f9c0 	bl	8002628 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 80032a8:	4b88      	ldr	r3, [pc, #544]	@ (80034cc <HAL_OSPI_MspInit+0x28c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3301      	adds	r3, #1
 80032ae:	4a87      	ldr	r2, [pc, #540]	@ (80034cc <HAL_OSPI_MspInit+0x28c>)
 80032b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 80032b2:	4b86      	ldr	r3, [pc, #536]	@ (80034cc <HAL_OSPI_MspInit+0x28c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d10e      	bne.n	80032d8 <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 80032ba:	4b85      	ldr	r3, [pc, #532]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 80032bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032c0:	4a83      	ldr	r2, [pc, #524]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 80032c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80032c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80032ca:	4b81      	ldr	r3, [pc, #516]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 80032cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80032d8:	4b7d      	ldr	r3, [pc, #500]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032de:	4a7c      	ldr	r2, [pc, #496]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 80032e0:	f043 0310 	orr.w	r3, r3, #16
 80032e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032e8:	4b79      	ldr	r3, [pc, #484]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ee:	f003 0210 	and.w	r2, r3, #16
 80032f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80032f6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003300:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003304:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003306:	4b72      	ldr	r3, [pc, #456]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 8003308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800330c:	4a70      	ldr	r2, [pc, #448]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 800330e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003312:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003316:	4b6e      	ldr	r3, [pc, #440]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 8003318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800331c:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8003320:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003324:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800332e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003332:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003334:	4b66      	ldr	r3, [pc, #408]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 8003336:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800333a:	4a65      	ldr	r2, [pc, #404]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 800333c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003340:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003344:	4b62      	ldr	r3, [pc, #392]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 8003346:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800334a:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 800334e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800335c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003360:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003362:	4b5b      	ldr	r3, [pc, #364]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 8003364:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003368:	4a59      	ldr	r2, [pc, #356]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 800336a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800336e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003372:	4b57      	ldr	r3, [pc, #348]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 8003374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003378:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800337c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003380:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800338a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800338e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003390:	4b4f      	ldr	r3, [pc, #316]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 8003392:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003396:	4a4e      	ldr	r2, [pc, #312]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 8003398:	f043 0302 	orr.w	r3, r3, #2
 800339c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80033a0:	4b4b      	ldr	r3, [pc, #300]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 80033a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033a6:	f003 0202 	and.w	r2, r3, #2
 80033aa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80033ae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80033b8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80033bc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033be:	4b44      	ldr	r3, [pc, #272]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 80033c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033c4:	4a42      	ldr	r2, [pc, #264]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 80033c6:	f043 0310 	orr.w	r3, r3, #16
 80033ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80033ce:	4b40      	ldr	r3, [pc, #256]	@ (80034d0 <HAL_OSPI_MspInit+0x290>)
 80033d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033d4:	f003 0210 	and.w	r2, r3, #16
 80033d8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80033dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80033e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80033ea:	681b      	ldr	r3, [r3, #0]
    PH9     ------> OCTOSPIM_P2_IO4
    PH12     ------> OCTOSPIM_P2_IO7
    PB10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9
 80033ec:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80033f0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f4:	2302      	movs	r3, #2
 80033f6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003400:	2303      	movs	r3, #3
 8003402:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8003406:	2305      	movs	r3, #5
 8003408:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800340c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8003410:	4619      	mov	r1, r3
 8003412:	4830      	ldr	r0, [pc, #192]	@ (80034d4 <HAL_OSPI_MspInit+0x294>)
 8003414:	f002 f830 	bl	8005478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003418:	2340      	movs	r3, #64	@ 0x40
 800341a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341e:	2302      	movs	r3, #2
 8003420:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800342a:	2303      	movs	r3, #3
 800342c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8003430:	2303      	movs	r3, #3
 8003432:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003436:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800343a:	4619      	mov	r1, r3
 800343c:	4826      	ldr	r0, [pc, #152]	@ (80034d8 <HAL_OSPI_MspInit+0x298>)
 800343e:	f002 f81b 	bl	8005478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003442:	230e      	movs	r3, #14
 8003444:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003448:	2302      	movs	r3, #2
 800344a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003454:	2303      	movs	r3, #3
 8003456:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPI2;
 800345a:	2306      	movs	r3, #6
 800345c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003460:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8003464:	4619      	mov	r1, r3
 8003466:	481d      	ldr	r0, [pc, #116]	@ (80034dc <HAL_OSPI_MspInit+0x29c>)
 8003468:	f002 f806 	bl	8005478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 800346c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003470:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003474:	2302      	movs	r3, #2
 8003476:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347a:	2300      	movs	r3, #0
 800347c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003480:	2303      	movs	r3, #3
 8003482:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8003486:	230a      	movs	r3, #10
 8003488:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8003490:	4619      	mov	r1, r3
 8003492:	4813      	ldr	r0, [pc, #76]	@ (80034e0 <HAL_OSPI_MspInit+0x2a0>)
 8003494:	f001 fff0 	bl	8005478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003498:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800349c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ac:	2303      	movs	r3, #3
 80034ae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80034b2:	230a      	movs	r3, #10
 80034b4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034b8:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80034bc:	4619      	mov	r1, r3
 80034be:	4809      	ldr	r0, [pc, #36]	@ (80034e4 <HAL_OSPI_MspInit+0x2a4>)
 80034c0:	f001 ffda 	bl	8005478 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 80034c4:	e08f      	b.n	80035e6 <HAL_OSPI_MspInit+0x3a6>
 80034c6:	bf00      	nop
 80034c8:	420d1400 	.word	0x420d1400
 80034cc:	200007dc 	.word	0x200007dc
 80034d0:	46020c00 	.word	0x46020c00
 80034d4:	42021c00 	.word	0x42021c00
 80034d8:	42021800 	.word	0x42021800
 80034dc:	42022000 	.word	0x42022000
 80034e0:	42020400 	.word	0x42020400
 80034e4:	42021000 	.word	0x42021000
  else if(hospi->Instance==OCTOSPI2)
 80034e8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80034ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a3e      	ldr	r2, [pc, #248]	@ (80035f0 <HAL_OSPI_MspInit+0x3b0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d175      	bne.n	80035e6 <HAL_OSPI_MspInit+0x3a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80034fa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8003506:	2300      	movs	r3, #0
 8003508:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800350c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003510:	4618      	mov	r0, r3
 8003512:	f006 f98d 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_OSPI_MspInit+0x2e0>
      Error_Handler();
 800351c:	f7ff f884 	bl	8002628 <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8003520:	4b34      	ldr	r3, [pc, #208]	@ (80035f4 <HAL_OSPI_MspInit+0x3b4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3301      	adds	r3, #1
 8003526:	4a33      	ldr	r2, [pc, #204]	@ (80035f4 <HAL_OSPI_MspInit+0x3b4>)
 8003528:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 800352a:	4b32      	ldr	r3, [pc, #200]	@ (80035f4 <HAL_OSPI_MspInit+0x3b4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d116      	bne.n	8003560 <HAL_OSPI_MspInit+0x320>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8003532:	4b31      	ldr	r3, [pc, #196]	@ (80035f8 <HAL_OSPI_MspInit+0x3b8>)
 8003534:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003538:	4a2f      	ldr	r2, [pc, #188]	@ (80035f8 <HAL_OSPI_MspInit+0x3b8>)
 800353a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800353e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003542:	4b2d      	ldr	r3, [pc, #180]	@ (80035f8 <HAL_OSPI_MspInit+0x3b8>)
 8003544:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003548:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800354c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003550:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800355a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800355e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8003560:	4b25      	ldr	r3, [pc, #148]	@ (80035f8 <HAL_OSPI_MspInit+0x3b8>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003566:	4a24      	ldr	r2, [pc, #144]	@ (80035f8 <HAL_OSPI_MspInit+0x3b8>)
 8003568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800356c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003570:	4b21      	ldr	r3, [pc, #132]	@ (80035f8 <HAL_OSPI_MspInit+0x3b8>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003576:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800357a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800357e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003588:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800358c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358e:	4b1a      	ldr	r3, [pc, #104]	@ (80035f8 <HAL_OSPI_MspInit+0x3b8>)
 8003590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003594:	4a18      	ldr	r2, [pc, #96]	@ (80035f8 <HAL_OSPI_MspInit+0x3b8>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800359e:	4b16      	ldr	r3, [pc, #88]	@ (80035f8 <HAL_OSPI_MspInit+0x3b8>)
 80035a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035a4:	f003 0201 	and.w	r2, r3, #1
 80035a8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80035ac:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80035b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80035ba:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035bc:	2301      	movs	r3, #1
 80035be:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ce:	2303      	movs	r3, #3
 80035d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI2;
 80035d4:	230a      	movs	r3, #10
 80035d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035da:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80035de:	4619      	mov	r1, r3
 80035e0:	4806      	ldr	r0, [pc, #24]	@ (80035fc <HAL_OSPI_MspInit+0x3bc>)
 80035e2:	f001 ff49 	bl	8005478 <HAL_GPIO_Init>
}
 80035e6:	bf00      	nop
 80035e8:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	420d2400 	.word	0x420d2400
 80035f4:	200007dc 	.word	0x200007dc
 80035f8:	46020c00 	.word	0x46020c00
 80035fc:	42020000 	.word	0x42020000

08003600 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b0bc      	sub	sp, #240	@ 0xf0
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003608:	f107 0310 	add.w	r3, r7, #16
 800360c:	22e0      	movs	r2, #224	@ 0xe0
 800360e:	2100      	movs	r1, #0
 8003610:	4618      	mov	r0, r3
 8003612:	f00a fe1e 	bl	800e252 <memset>
  if(hrtc->Instance==RTC)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1d      	ldr	r2, [pc, #116]	@ (8003690 <HAL_RTC_MspInit+0x90>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d132      	bne.n	8003686 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003620:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800362c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003634:	f107 0310 	add.w	r3, r7, #16
 8003638:	4618      	mov	r0, r3
 800363a:	f006 f8f9 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003644:	f7fe fff0 	bl	8002628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003648:	4b12      	ldr	r3, [pc, #72]	@ (8003694 <HAL_RTC_MspInit+0x94>)
 800364a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800364e:	4a11      	ldr	r2, [pc, #68]	@ (8003694 <HAL_RTC_MspInit+0x94>)
 8003650:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003654:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003658:	4b0e      	ldr	r3, [pc, #56]	@ (8003694 <HAL_RTC_MspInit+0x94>)
 800365a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800365e:	4a0d      	ldr	r2, [pc, #52]	@ (8003694 <HAL_RTC_MspInit+0x94>)
 8003660:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003664:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8003668:	4b0a      	ldr	r3, [pc, #40]	@ (8003694 <HAL_RTC_MspInit+0x94>)
 800366a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800366e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8003676:	4b07      	ldr	r3, [pc, #28]	@ (8003694 <HAL_RTC_MspInit+0x94>)
 8003678:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800367c:	4a05      	ldr	r2, [pc, #20]	@ (8003694 <HAL_RTC_MspInit+0x94>)
 800367e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003682:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003686:	bf00      	nop
 8003688:	37f0      	adds	r7, #240	@ 0xf0
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	46007800 	.word	0x46007800
 8003694:	46020c00 	.word	0x46020c00

08003698 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b0c4      	sub	sp, #272	@ 0x110
 800369c:	af00      	add	r7, sp, #0
 800369e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80036a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80036a6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	60da      	str	r2, [r3, #12]
 80036b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036b8:	f107 0318 	add.w	r3, r7, #24
 80036bc:	22e0      	movs	r2, #224	@ 0xe0
 80036be:	2100      	movs	r1, #0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f00a fdc6 	bl	800e252 <memset>
  if(hspi->Instance==SPI1)
 80036c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80036ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a41      	ldr	r2, [pc, #260]	@ (80037d8 <HAL_SPI_MspInit+0x140>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d17a      	bne.n	80037ce <HAL_SPI_MspInit+0x136>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80036d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80036e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80036e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036ec:	f107 0318 	add.w	r3, r7, #24
 80036f0:	4618      	mov	r0, r3
 80036f2:	f006 f89d 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 80036fc:	f7fe ff94 	bl	8002628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003700:	4b36      	ldr	r3, [pc, #216]	@ (80037dc <HAL_SPI_MspInit+0x144>)
 8003702:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003706:	4a35      	ldr	r2, [pc, #212]	@ (80037dc <HAL_SPI_MspInit+0x144>)
 8003708:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800370c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003710:	4b32      	ldr	r3, [pc, #200]	@ (80037dc <HAL_SPI_MspInit+0x144>)
 8003712:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003716:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800371e:	4b2f      	ldr	r3, [pc, #188]	@ (80037dc <HAL_SPI_MspInit+0x144>)
 8003720:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003724:	4a2d      	ldr	r2, [pc, #180]	@ (80037dc <HAL_SPI_MspInit+0x144>)
 8003726:	f043 0302 	orr.w	r3, r3, #2
 800372a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800372e:	4b2b      	ldr	r3, [pc, #172]	@ (80037dc <HAL_SPI_MspInit+0x144>)
 8003730:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003734:	f003 0202 	and.w	r2, r3, #2
 8003738:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800373c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003746:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800374a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374c:	4b23      	ldr	r3, [pc, #140]	@ (80037dc <HAL_SPI_MspInit+0x144>)
 800374e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003752:	4a22      	ldr	r2, [pc, #136]	@ (80037dc <HAL_SPI_MspInit+0x144>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800375c:	4b1f      	ldr	r3, [pc, #124]	@ (80037dc <HAL_SPI_MspInit+0x144>)
 800375e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003762:	f003 0201 	and.w	r2, r3, #1
 8003766:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800376a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003774:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003778:	681b      	ldr	r3, [r3, #0]
    PB0     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800377a:	2301      	movs	r3, #1
 800377c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003780:	2302      	movs	r3, #2
 8003782:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2300      	movs	r3, #0
 8003788:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378c:	2300      	movs	r3, #0
 800378e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003792:	2305      	movs	r3, #5
 8003794:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003798:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800379c:	4619      	mov	r1, r3
 800379e:	4810      	ldr	r0, [pc, #64]	@ (80037e0 <HAL_SPI_MspInit+0x148>)
 80037a0:	f001 fe6a 	bl	8005478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 80037a4:	23e0      	movs	r3, #224	@ 0xe0
 80037a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037aa:	2302      	movs	r3, #2
 80037ac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b6:	2300      	movs	r3, #0
 80037b8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037bc:	2305      	movs	r3, #5
 80037be:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c2:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80037c6:	4619      	mov	r1, r3
 80037c8:	4806      	ldr	r0, [pc, #24]	@ (80037e4 <HAL_SPI_MspInit+0x14c>)
 80037ca:	f001 fe55 	bl	8005478 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80037ce:	bf00      	nop
 80037d0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40013000 	.word	0x40013000
 80037dc:	46020c00 	.word	0x46020c00
 80037e0:	42020400 	.word	0x42020400
 80037e4:	42020000 	.word	0x42020000

080037e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08e      	sub	sp, #56	@ 0x38
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80037f8:	4b2e      	ldr	r3, [pc, #184]	@ (80038b4 <HAL_InitTick+0xcc>)
 80037fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037fe:	4a2d      	ldr	r2, [pc, #180]	@ (80038b4 <HAL_InitTick+0xcc>)
 8003800:	f043 0310 	orr.w	r3, r3, #16
 8003804:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003808:	4b2a      	ldr	r3, [pc, #168]	@ (80038b4 <HAL_InitTick+0xcc>)
 800380a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003816:	f107 0210 	add.w	r2, r7, #16
 800381a:	f107 0314 	add.w	r3, r7, #20
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f005 ff1b 	bl	800965c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003826:	f005 fedd 	bl	80095e4 <HAL_RCC_GetPCLK1Freq>
 800382a:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800382c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382e:	4a22      	ldr	r2, [pc, #136]	@ (80038b8 <HAL_InitTick+0xd0>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	0c9b      	lsrs	r3, r3, #18
 8003836:	3b01      	subs	r3, #1
 8003838:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800383a:	4b20      	ldr	r3, [pc, #128]	@ (80038bc <HAL_InitTick+0xd4>)
 800383c:	4a20      	ldr	r2, [pc, #128]	@ (80038c0 <HAL_InitTick+0xd8>)
 800383e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003840:	4b1e      	ldr	r3, [pc, #120]	@ (80038bc <HAL_InitTick+0xd4>)
 8003842:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003846:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003848:	4a1c      	ldr	r2, [pc, #112]	@ (80038bc <HAL_InitTick+0xd4>)
 800384a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800384c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800384e:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <HAL_InitTick+0xd4>)
 8003850:	2200      	movs	r2, #0
 8003852:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003854:	4b19      	ldr	r3, [pc, #100]	@ (80038bc <HAL_InitTick+0xd4>)
 8003856:	2200      	movs	r2, #0
 8003858:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800385a:	4818      	ldr	r0, [pc, #96]	@ (80038bc <HAL_InitTick+0xd4>)
 800385c:	f009 fc06 	bl	800d06c <HAL_TIM_Base_Init>
 8003860:	4603      	mov	r3, r0
 8003862:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8003866:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800386a:	2b00      	cmp	r3, #0
 800386c:	d118      	bne.n	80038a0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800386e:	4813      	ldr	r0, [pc, #76]	@ (80038bc <HAL_InitTick+0xd4>)
 8003870:	f009 fc5e 	bl	800d130 <HAL_TIM_Base_Start_IT>
 8003874:	4603      	mov	r3, r0
 8003876:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 800387a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10e      	bne.n	80038a0 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b0f      	cmp	r3, #15
 8003886:	d808      	bhi.n	800389a <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8003888:	2200      	movs	r2, #0
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	2031      	movs	r0, #49	@ 0x31
 800388e:	f000 fa1f 	bl	8003cd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003892:	4a0c      	ldr	r2, [pc, #48]	@ (80038c4 <HAL_InitTick+0xdc>)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	e002      	b.n	80038a0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80038a0:	2031      	movs	r0, #49	@ 0x31
 80038a2:	f000 fa2f 	bl	8003d04 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80038a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3738      	adds	r7, #56	@ 0x38
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	46020c00 	.word	0x46020c00
 80038b8:	431bde83 	.word	0x431bde83
 80038bc:	200007e0 	.word	0x200007e0
 80038c0:	40001000 	.word	0x40001000
 80038c4:	20000004 	.word	0x20000004

080038c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80038cc:	f005 ff0e 	bl	80096ec <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038d0:	bf00      	nop
 80038d2:	e7fd      	b.n	80038d0 <NMI_Handler+0x8>

080038d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038d8:	bf00      	nop
 80038da:	e7fd      	b.n	80038d8 <HardFault_Handler+0x4>

080038dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038e0:	bf00      	nop
 80038e2:	e7fd      	b.n	80038e0 <MemManage_Handler+0x4>

080038e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <BusFault_Handler+0x4>

080038ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038f0:	bf00      	nop
 80038f2:	e7fd      	b.n	80038f0 <UsageFault_Handler+0x4>

080038f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038f8:	bf00      	nop
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003902:	b480      	push	{r7}
 8003904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800391e:	b480      	push	{r7}
 8003920:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003922:	bf00      	nop
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003930:	4802      	ldr	r0, [pc, #8]	@ (800393c <TIM6_IRQHandler+0x10>)
 8003932:	f009 fc9d 	bl	800d270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	200007e0 	.word	0x200007e0

08003940 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003944:	4802      	ldr	r0, [pc, #8]	@ (8003950 <DMA2D_IRQHandler+0x10>)
 8003946:	f000 fc65 	bl	8004214 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	2000016c 	.word	0x2000016c

08003954 <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 8003958:	4802      	ldr	r0, [pc, #8]	@ (8003964 <GPU2D_IRQHandler+0x10>)
 800395a:	f001 ffa7 	bl	80058ac <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000238 	.word	0x20000238

08003968 <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 800396c:	4802      	ldr	r0, [pc, #8]	@ (8003978 <GPU2D_ER_IRQHandler+0x10>)
 800396e:	f001 ffc3 	bl	80058f8 <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 8003972:	bf00      	nop
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20000238 	.word	0x20000238

0800397c <GFXMMU_IRQHandler>:

/**
  * @brief This function handles GFXMMU global interrupt.
  */
void GFXMMU_IRQHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GFXMMU_IRQn 0 */

  /* USER CODE END GFXMMU_IRQn 0 */
  HAL_GFXMMU_IRQHandler(&hgfxmmu);
 8003980:	4802      	ldr	r0, [pc, #8]	@ (800398c <GFXMMU_IRQHandler+0x10>)
 8003982:	f001 fd49 	bl	8005418 <HAL_GFXMMU_IRQHandler>
  /* USER CODE BEGIN GFXMMU_IRQn 1 */

  /* USER CODE END GFXMMU_IRQn 1 */
}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	200001f0 	.word	0x200001f0

08003990 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003994:	4802      	ldr	r0, [pc, #8]	@ (80039a0 <LTDC_IRQHandler+0x10>)
 8003996:	f002 ff47 	bl	8006828 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	200005a4 	.word	0x200005a4

080039a4 <DSI_IRQHandler>:

/**
  * @brief This function handles DSIHOST global interrupt.
  */
void DSI_IRQHandler(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80039a8:	4802      	ldr	r0, [pc, #8]	@ (80039b4 <DSI_IRQHandler+0x10>)
 80039aa:	f001 f88b 	bl	8004ac4 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	200001cc 	.word	0x200001cc

080039b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80039bc:	4b18      	ldr	r3, [pc, #96]	@ (8003a20 <SystemInit+0x68>)
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c2:	4a17      	ldr	r2, [pc, #92]	@ (8003a20 <SystemInit+0x68>)
 80039c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80039cc:	4b15      	ldr	r3, [pc, #84]	@ (8003a24 <SystemInit+0x6c>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80039d2:	4b14      	ldr	r3, [pc, #80]	@ (8003a24 <SystemInit+0x6c>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80039d8:	4b12      	ldr	r3, [pc, #72]	@ (8003a24 <SystemInit+0x6c>)
 80039da:	2200      	movs	r2, #0
 80039dc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80039de:	4b11      	ldr	r3, [pc, #68]	@ (8003a24 <SystemInit+0x6c>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80039e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a24 <SystemInit+0x6c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a0e      	ldr	r2, [pc, #56]	@ (8003a24 <SystemInit+0x6c>)
 80039ea:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80039ee:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80039f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80039f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <SystemInit+0x6c>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80039fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003a24 <SystemInit+0x6c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a09      	ldr	r2, [pc, #36]	@ (8003a24 <SystemInit+0x6c>)
 8003a00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003a06:	4b07      	ldr	r3, [pc, #28]	@ (8003a24 <SystemInit+0x6c>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a0c:	4b04      	ldr	r3, [pc, #16]	@ (8003a20 <SystemInit+0x68>)
 8003a0e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003a12:	609a      	str	r2, [r3, #8]
  #endif
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	e000ed00 	.word	0xe000ed00
 8003a24:	46020c00 	.word	0x46020c00

08003a28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003a28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a60 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a2c:	f7ff ffc4 	bl	80039b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003a30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003a32:	e003      	b.n	8003a3c <LoopCopyDataInit>

08003a34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003a34:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003a36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003a38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003a3a:	3104      	adds	r1, #4

08003a3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003a3c:	480a      	ldr	r0, [pc, #40]	@ (8003a68 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a6c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003a40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003a42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003a44:	d3f6      	bcc.n	8003a34 <CopyDataInit>
	ldr	r2, =_sbss
 8003a46:	4a0a      	ldr	r2, [pc, #40]	@ (8003a70 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003a48:	e002      	b.n	8003a50 <LoopFillZerobss>

08003a4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003a4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003a4c:	f842 3b04 	str.w	r3, [r2], #4

08003a50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003a50:	4b08      	ldr	r3, [pc, #32]	@ (8003a74 <LoopForever+0x16>)
	cmp	r2, r3
 8003a52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003a54:	d3f9      	bcc.n	8003a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a56:	f00a fc05 	bl	800e264 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a5a:	f7fd fb67 	bl	800112c <main>

08003a5e <LoopForever>:

LoopForever:
    b LoopForever
 8003a5e:	e7fe      	b.n	8003a5e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003a60:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8003a64:	0800e3d4 	.word	0x0800e3d4
	ldr	r0, =_sdata
 8003a68:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003a6c:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8003a70:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003a74:	20000854 	.word	0x20000854

08003a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a78:	e7fe      	b.n	8003a78 <ADC1_2_IRQHandler>
	...

08003a7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a80:	4b11      	ldr	r3, [pc, #68]	@ (8003ac8 <HAL_Init+0x4c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a10      	ldr	r2, [pc, #64]	@ (8003ac8 <HAL_Init+0x4c>)
 8003a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a8c:	2003      	movs	r0, #3
 8003a8e:	f000 f914 	bl	8003cba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003a92:	f005 fc8b 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 8003a96:	4602      	mov	r2, r0
 8003a98:	4b0c      	ldr	r3, [pc, #48]	@ (8003acc <HAL_Init+0x50>)
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	490b      	ldr	r1, [pc, #44]	@ (8003ad0 <HAL_Init+0x54>)
 8003aa2:	5ccb      	ldrb	r3, [r1, r3]
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad4 <HAL_Init+0x58>)
 8003aaa:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003aac:	200f      	movs	r0, #15
 8003aae:	f7ff fe9b 	bl	80037e8 <HAL_InitTick>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e002      	b.n	8003ac2 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003abc:	f7fe fdba 	bl	8002634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40022000 	.word	0x40022000
 8003acc:	46020c00 	.word	0x46020c00
 8003ad0:	0800e2c4 	.word	0x0800e2c4
 8003ad4:	20000000 	.word	0x20000000

08003ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003adc:	4b06      	ldr	r3, [pc, #24]	@ (8003af8 <HAL_IncTick+0x20>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <HAL_IncTick+0x24>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	4a04      	ldr	r2, [pc, #16]	@ (8003afc <HAL_IncTick+0x24>)
 8003aea:	6013      	str	r3, [r2, #0]
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000008 	.word	0x20000008
 8003afc:	2000082c 	.word	0x2000082c

08003b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return uwTick;
 8003b04:	4b03      	ldr	r3, [pc, #12]	@ (8003b14 <HAL_GetTick+0x14>)
 8003b06:	681b      	ldr	r3, [r3, #0]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	2000082c 	.word	0x2000082c

08003b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b20:	f7ff ffee 	bl	8003b00 <HAL_GetTick>
 8003b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d005      	beq.n	8003b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b32:	4b0a      	ldr	r3, [pc, #40]	@ (8003b5c <HAL_Delay+0x44>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b3e:	bf00      	nop
 8003b40:	f7ff ffde 	bl	8003b00 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d8f7      	bhi.n	8003b40 <HAL_Delay+0x28>
  {
  }
}
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000008 	.word	0x20000008

08003b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b70:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b92:	4a04      	ldr	r2, [pc, #16]	@ (8003ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	60d3      	str	r3, [r2, #12]
}
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	e000ed00 	.word	0xe000ed00

08003ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bac:	4b04      	ldr	r3, [pc, #16]	@ (8003bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	0a1b      	lsrs	r3, r3, #8
 8003bb2:	f003 0307 	and.w	r3, r3, #7
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	e000ed00 	.word	0xe000ed00

08003bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	db0b      	blt.n	8003bee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	f003 021f 	and.w	r2, r3, #31
 8003bdc:	4907      	ldr	r1, [pc, #28]	@ (8003bfc <__NVIC_EnableIRQ+0x38>)
 8003bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	2001      	movs	r0, #1
 8003be6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	e000e100 	.word	0xe000e100

08003c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	6039      	str	r1, [r7, #0]
 8003c0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	db0a      	blt.n	8003c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	490c      	ldr	r1, [pc, #48]	@ (8003c4c <__NVIC_SetPriority+0x4c>)
 8003c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c1e:	0112      	lsls	r2, r2, #4
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	440b      	add	r3, r1
 8003c24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c28:	e00a      	b.n	8003c40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	4908      	ldr	r1, [pc, #32]	@ (8003c50 <__NVIC_SetPriority+0x50>)
 8003c30:	88fb      	ldrh	r3, [r7, #6]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	3b04      	subs	r3, #4
 8003c38:	0112      	lsls	r2, r2, #4
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	761a      	strb	r2, [r3, #24]
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	e000e100 	.word	0xe000e100
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b089      	sub	sp, #36	@ 0x24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f1c3 0307 	rsb	r3, r3, #7
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	bf28      	it	cs
 8003c72:	2304      	movcs	r3, #4
 8003c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	2b06      	cmp	r3, #6
 8003c7c:	d902      	bls.n	8003c84 <NVIC_EncodePriority+0x30>
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	3b03      	subs	r3, #3
 8003c82:	e000      	b.n	8003c86 <NVIC_EncodePriority+0x32>
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c88:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	43da      	mvns	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	401a      	ands	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca6:	43d9      	mvns	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cac:	4313      	orrs	r3, r2
         );
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3724      	adds	r7, #36	@ 0x24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff ff4c 	bl	8003b60 <__NVIC_SetPriorityGrouping>
}
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cde:	f7ff ff63 	bl	8003ba8 <__NVIC_GetPriorityGrouping>
 8003ce2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	6978      	ldr	r0, [r7, #20]
 8003cea:	f7ff ffb3 	bl	8003c54 <NVIC_EncodePriority>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff ff82 	bl	8003c00 <__NVIC_SetPriority>
}
 8003cfc:	bf00      	nop
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff ff56 	bl	8003bc4 <__NVIC_EnableIRQ>
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e054      	b.n	8003ddc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	7f5b      	ldrb	r3, [r3, #29]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d105      	bne.n	8003d48 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fe fd0a 	bl	800275c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	791b      	ldrb	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10c      	bne.n	8003d70 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a22      	ldr	r2, [pc, #136]	@ (8003de4 <HAL_CRC_Init+0xc4>)
 8003d5c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0218 	bic.w	r2, r2, #24
 8003d6c:	609a      	str	r2, [r3, #8]
 8003d6e:	e00c      	b.n	8003d8a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6899      	ldr	r1, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f834 	bl	8003de8 <HAL_CRCEx_Polynomial_Set>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e028      	b.n	8003ddc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	795b      	ldrb	r3, [r3, #5]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d105      	bne.n	8003d9e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9a:	611a      	str	r2, [r3, #16]
 8003d9c:	e004      	b.n	8003da8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6912      	ldr	r2, [r2, #16]
 8003da6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699a      	ldr	r2, [r3, #24]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	04c11db7 	.word	0x04c11db7

08003de8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003df8:	231f      	movs	r3, #31
 8003dfa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d102      	bne.n	8003e0c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
 8003e0a:	e063      	b.n	8003ed4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003e0c:	bf00      	nop
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1e5a      	subs	r2, r3, #1
 8003e12:	613a      	str	r2, [r7, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d009      	beq.n	8003e2c <HAL_CRCEx_Polynomial_Set+0x44>
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	fa22 f303 	lsr.w	r3, r2, r3
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f0      	beq.n	8003e0e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b18      	cmp	r3, #24
 8003e30:	d846      	bhi.n	8003ec0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003e32:	a201      	add	r2, pc, #4	@ (adr r2, 8003e38 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e38:	08003ec7 	.word	0x08003ec7
 8003e3c:	08003ec1 	.word	0x08003ec1
 8003e40:	08003ec1 	.word	0x08003ec1
 8003e44:	08003ec1 	.word	0x08003ec1
 8003e48:	08003ec1 	.word	0x08003ec1
 8003e4c:	08003ec1 	.word	0x08003ec1
 8003e50:	08003ec1 	.word	0x08003ec1
 8003e54:	08003ec1 	.word	0x08003ec1
 8003e58:	08003eb5 	.word	0x08003eb5
 8003e5c:	08003ec1 	.word	0x08003ec1
 8003e60:	08003ec1 	.word	0x08003ec1
 8003e64:	08003ec1 	.word	0x08003ec1
 8003e68:	08003ec1 	.word	0x08003ec1
 8003e6c:	08003ec1 	.word	0x08003ec1
 8003e70:	08003ec1 	.word	0x08003ec1
 8003e74:	08003ec1 	.word	0x08003ec1
 8003e78:	08003ea9 	.word	0x08003ea9
 8003e7c:	08003ec1 	.word	0x08003ec1
 8003e80:	08003ec1 	.word	0x08003ec1
 8003e84:	08003ec1 	.word	0x08003ec1
 8003e88:	08003ec1 	.word	0x08003ec1
 8003e8c:	08003ec1 	.word	0x08003ec1
 8003e90:	08003ec1 	.word	0x08003ec1
 8003e94:	08003ec1 	.word	0x08003ec1
 8003e98:	08003e9d 	.word	0x08003e9d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b06      	cmp	r3, #6
 8003ea0:	d913      	bls.n	8003eca <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003ea6:	e010      	b.n	8003eca <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b07      	cmp	r3, #7
 8003eac:	d90f      	bls.n	8003ece <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003eb2:	e00c      	b.n	8003ece <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b0f      	cmp	r3, #15
 8003eb8:	d90b      	bls.n	8003ed2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003ebe:	e008      	b.n	8003ed2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	75fb      	strb	r3, [r7, #23]
        break;
 8003ec4:	e006      	b.n	8003ed4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003ec6:	bf00      	nop
 8003ec8:	e004      	b.n	8003ed4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003eca:	bf00      	nop
 8003ecc:	e002      	b.n	8003ed4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003ed2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10d      	bne.n	8003ef6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f023 0118 	bic.w	r1, r3, #24
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e037      	b.n	8003f86 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d119      	bne.n	8003f56 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a1a      	ldr	r2, [pc, #104]	@ (8003f90 <HAL_DCACHE_Init+0x8c>)
 8003f26:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003f94 <HAL_DCACHE_Init+0x90>)
 8003f2c:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a19      	ldr	r2, [pc, #100]	@ (8003f98 <HAL_DCACHE_Init+0x94>)
 8003f32:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a19      	ldr	r2, [pc, #100]	@ (8003f9c <HAL_DCACHE_Init+0x98>)
 8003f38:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a18      	ldr	r2, [pc, #96]	@ (8003fa0 <HAL_DCACHE_Init+0x9c>)
 8003f3e:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a16      	ldr	r2, [pc, #88]	@ (8003fa4 <HAL_DCACHE_Init+0xa0>)
 8003f4c:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f814 	bl	8003fa8 <HAL_DCACHE_Enable>
 8003f80:	4603      	mov	r3, r0
 8003f82:	73fb      	strb	r3, [r7, #15]

  return status;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	08004047 	.word	0x08004047
 8003f94:	08003ff7 	.word	0x08003ff7
 8003f98:	0800400b 	.word	0x0800400b
 8003f9c:	08004033 	.word	0x08004033
 8003fa0:	0800401f 	.word	0x0800401f
 8003fa4:	080027a1 	.word	0x080027a1

08003fa8 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e015      	b.n	8003fea <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 0309 	and.w	r3, r3, #9
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
 8003fce:	73fb      	strb	r3, [r7, #15]
 8003fd0:	e00a      	b.n	8003fe8 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
  }

  return status;
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8004062:	f7ff fd4d 	bl	8003b00 <HAL_GetTick>
 8004066:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e06b      	b.n	800414a <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d008      	beq.n	8004090 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2220      	movs	r2, #32
 8004082:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e05c      	b.n	800414a <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0204 	orr.w	r2, r2, #4
 800409e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2205      	movs	r2, #5
 80040a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80040a8:	e020      	b.n	80040ec <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80040aa:	f7ff fd29 	bl	8003b00 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b05      	cmp	r3, #5
 80040b6:	d919      	bls.n	80040ec <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040bc:	f043 0210 	orr.w	r2, r3, #16
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2203      	movs	r2, #3
 80040c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040dc:	2201      	movs	r2, #1
 80040de:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e02e      	b.n	800414a <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0d7      	beq.n	80040aa <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0202 	orr.w	r2, r2, #2
 8004108:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2204      	movs	r2, #4
 800410e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800411a:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004134:	2201      	movs	r2, #1
 8004136:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2200      	movs	r2, #0
 800413e:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b082      	sub	sp, #8
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e053      	b.n	800420c <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d106      	bne.n	800417e <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7fe fb4b 	bl	8002814 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2202      	movs	r2, #2
 8004182:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6851      	ldr	r1, [r2, #4]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	69d2      	ldr	r2, [r2, #28]
 800419c:	4311      	orrs	r1, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	430b      	orrs	r3, r1
 80041a4:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ac:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 80041b0:	f023 0301 	bic.w	r3, r3, #1
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6891      	ldr	r1, [r2, #8]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6992      	ldr	r2, [r2, #24]
 80041bc:	4311      	orrs	r1, r2
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6812      	ldr	r2, [r2, #0]
 80041c2:	430b      	orrs	r3, r1
 80041c4:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041cc:	0c1b      	lsrs	r3, r3, #16
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	68d1      	ldr	r1, [r2, #12]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	430b      	orrs	r3, r1
 80041da:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	051a      	lsls	r2, r3, #20
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	055b      	lsls	r3, r3, #21
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d026      	beq.n	8004284 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d021      	beq.n	8004284 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800424e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004254:	f043 0201 	orr.w	r2, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2201      	movs	r2, #1
 8004262:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2204      	movs	r2, #4
 8004268:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d026      	beq.n	80042dc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d021      	beq.n	80042dc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042a6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2220      	movs	r2, #32
 80042ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b4:	f043 0202 	orr.w	r2, r3, #2
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2204      	movs	r2, #4
 80042c0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d026      	beq.n	8004334 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d021      	beq.n	8004334 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042fe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2208      	movs	r2, #8
 8004306:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800430c:	f043 0204 	orr.w	r2, r3, #4
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2204      	movs	r2, #4
 8004318:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	d013      	beq.n	8004366 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00e      	beq.n	8004366 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004356:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2204      	movs	r2, #4
 800435e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f853 	bl	800440c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d024      	beq.n	80043ba <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01f      	beq.n	80043ba <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004388:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2202      	movs	r2, #2
 8004390:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferCpltCallback != NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d01f      	beq.n	8004404 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d01a      	beq.n	8004404 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80043dc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2210      	movs	r2, #16
 80043e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f80e 	bl	8004420 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004404:	bf00      	nop
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_DMA2D_ConfigLayer+0x20>
 8004450:	2302      	movs	r3, #2
 8004452:	e084      	b.n	800455e <HAL_DMA2D_ConfigLayer+0x12a>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	4613      	mov	r3, r2
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	4413      	add	r3, r2
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	3328      	adds	r3, #40	@ 0x28
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	4413      	add	r3, r2
 8004474:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	041b      	lsls	r3, r3, #16
 8004480:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004488:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004494:	4b35      	ldr	r3, [pc, #212]	@ (800456c <HAL_DMA2D_ConfigLayer+0x138>)
 8004496:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b0a      	cmp	r3, #10
 800449e:	d003      	beq.n	80044a8 <HAL_DMA2D_ConfigLayer+0x74>
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b09      	cmp	r3, #9
 80044a6:	d107      	bne.n	80044b8 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	e005      	b.n	80044c4 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	061b      	lsls	r3, r3, #24
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d120      	bne.n	800450c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	ea02 0103 	and.w	r1, r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	430a      	orrs	r2, r1
 80044e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	6812      	ldr	r2, [r2, #0]
 80044ea:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b0a      	cmp	r3, #10
 80044f2:	d003      	beq.n	80044fc <HAL_DMA2D_ConfigLayer+0xc8>
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b09      	cmp	r3, #9
 80044fa:	d127      	bne.n	800454c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004508:	629a      	str	r2, [r3, #40]	@ 0x28
 800450a:	e01f      	b.n	800454c <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69da      	ldr	r2, [r3, #28]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	43db      	mvns	r3, r3
 8004516:	ea02 0103 	and.w	r1, r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	430a      	orrs	r2, r1
 8004522:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	6812      	ldr	r2, [r2, #0]
 800452c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b0a      	cmp	r3, #10
 8004534:	d003      	beq.n	800453e <HAL_DMA2D_ConfigLayer+0x10a>
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b09      	cmp	r3, #9
 800453c:	d106      	bne.n	800454c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800454a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	ff33000f 	.word	0xff33000f

08004570 <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8004588:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	@ 0xc04
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	00da      	lsls	r2, r3, #3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	220e      	movs	r2, #14
 80045aa:	f8c3 2c34 	str.w	r2, [r3, #3124]	@ 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	@ 0xc70
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 021f 	bic.w	r2, r2, #31
 80045be:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6912      	ldr	r2, [r2, #16]
 80045ca:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	220e      	movs	r2, #14
 80045d4:	f8c3 2ca0 	str.w	r2, [r3, #3232]	@ 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	@ 0xd08
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 021f 	bic.w	r2, r2, #31
 80045e8:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6912      	ldr	r2, [r2, #16]
 80045f4:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	220e      	movs	r2, #14
 80045fe:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	@ 0xc5c
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004612:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	@ 0xcf4
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004626:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d007      	beq.n	8004642 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8004636:	2b02      	cmp	r3, #2
 8004638:	d003      	beq.n	8004642 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 800463e:	2b05      	cmp	r3, #5
 8004640:	d10a      	bne.n	8004658 <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2200      	movs	r2, #0
 8004648:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2200      	movs	r2, #0
 8004652:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 8004656:	e02c      	b.n	80046b2 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00b      	beq.n	8004678 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8004664:	2b03      	cmp	r3, #3
 8004666:	d007      	beq.n	8004678 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 800466c:	2b04      	cmp	r3, #4
 800466e:	d003      	beq.n	8004678 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8004674:	2b06      	cmp	r3, #6
 8004676:	d10a      	bne.n	800468e <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2210      	movs	r2, #16
 800467e:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2210      	movs	r2, #16
 8004688:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 800468c:	e011      	b.n	80046b2 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b07      	cmp	r3, #7
 8004694:	d003      	beq.n	800469e <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 800469a:	2b08      	cmp	r3, #8
 800469c:	d109      	bne.n	80046b2 <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	@ 0xc60
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 020f 	bic.w	r2, r2, #15
 80046c2:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	@ 0xcf8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 020f 	bic.w	r2, r2, #15
 80046d6:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6952      	ldr	r2, [r2, #20]
 80046e2:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6952      	ldr	r2, [r2, #20]
 80046ee:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8004718:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	075a      	lsls	r2, r3, #29
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f8d3 2434 	ldr.w	r2, [r3, #1076]	@ 0x434
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004744:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	031a      	lsls	r2, r3, #12
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	021a      	lsls	r2, r3, #8
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0c3      	b.n	8004920 <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	7e5b      	ldrb	r3, [r3, #25]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d102      	bne.n	80047a8 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fe f85e 	bl	8002864 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2203      	movs	r2, #3
 80047ac:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047be:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 80047c2:	2002      	movs	r0, #2
 80047c4:	f7ff f9a8 	bl	8003b18 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	4b54      	ldr	r3, [pc, #336]	@ (8004928 <HAL_DSI_Init+0x1a4>)
 80047d6:	400b      	ands	r3, r1
 80047d8:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80047f0:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80047f8:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff feb3 	bl	8004570 <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 800480a:	6839      	ldr	r1, [r7, #0]
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff ff76 	bl	80046fe <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8004812:	2300      	movs	r3, #0
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800483a:	2001      	movs	r0, #1
 800483c:	f7ff f96c 	bl	8003b18 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8004840:	f7ff f95e 	bl	8003b00 <HAL_GetTick>
 8004844:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004846:	e008      	b.n	800485a <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004848:	f7ff f95a 	bl	8003b00 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b64      	cmp	r3, #100	@ 0x64
 8004854:	d901      	bls.n	800485a <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e062      	b.n	8004920 <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0ee      	beq.n	8004848 <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0206 	orr.w	r2, r2, #6
 800487a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0203 	bic.w	r2, r2, #3
 800488e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f042 0201 	orr.w	r2, r2, #1
 80048a8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0203 	bic.w	r2, r2, #3
 80048bc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80048e4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6899      	ldr	r1, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2200      	movs	r2, #0
 8004908:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	e0000003 	.word	0xe0000003

0800492c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	7e1b      	ldrb	r3, [r3, #24]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d101      	bne.n	8004942 <HAL_DSI_ConfigErrorMonitor+0x16>
 800493e:	2302      	movs	r3, #2
 8004940:	e0ba      	b.n	8004ab8 <HAL_DSI_ConfigErrorMonitor+0x18c>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2200      	movs	r2, #0
 800494e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2200      	movs	r2, #0
 8004958:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00b      	beq.n	8004984 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800497c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8004980:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 800499e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d009      	beq.n	80049c0 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 0201 	orr.w	r2, r2, #1
 80049bc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0202 	orr.w	r2, r2, #2
 80049da:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	f003 0310 	and.w	r3, r3, #16
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d009      	beq.n	80049fc <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 020c 	orr.w	r2, r2, #12
 80049f8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0210 	orr.w	r2, r2, #16
 8004a16:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d009      	beq.n	8004a38 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0220 	orr.w	r2, r2, #32
 8004a34:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a52:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d009      	beq.n	8004a74 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a70:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d009      	beq.n	8004a92 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8004a8e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d009      	beq.n	8004ab0 <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8004aac:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00f      	beq.n	8004afc <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d007      	beq.n	8004afc <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f8b8 	bl	8004c6c <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00f      	beq.n	8004b2c <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d007      	beq.n	8004b2c <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2202      	movs	r2, #2
 8004b22:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f8aa 	bl	8004c80 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 8097 	beq.w	8004c64 <HAL_DSI_IRQHandler+0x1a0>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b3e:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004b56:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	4013      	ands	r3, r2
 8004b64:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f043 0201 	orr.w	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	f043 0202 	orr.w	r2, r3, #2
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f043 0204 	orr.w	r2, r3, #4
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	f043 0208 	orr.w	r2, r3, #8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f043 0210 	orr.w	r2, r3, #16
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	f043 0220 	orr.w	r2, r3, #32
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d005      	beq.n	8004c2a <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PBU_MASK) != 0U)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <HAL_DSI_IRQHandler+0x192>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PBU;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	61da      	str	r2, [r3, #28]
    }
    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <HAL_DSI_IRQHandler+0x1a0>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f818 	bl	8004c94 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004c64:	bf00      	nop
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	7e1b      	ldrb	r3, [r3, #24]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_DSI_SetGenericVCID+0x16>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e019      	b.n	8004cf2 <HAL_DSI_SetGenericVCID+0x4a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 1203 	bic.w	r2, r2, #196611	@ 0x30003
 8004cd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	7e1b      	ldrb	r3, [r3, #24]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e0c5      	b.n	8004ea0 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0201 	orr.w	r2, r2, #1
 8004d28:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0201 	bic.w	r2, r2, #1
 8004d3a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0203 	bic.w	r2, r2, #3
 8004d60:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68d9      	ldr	r1, [r3, #12]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0207 	bic.w	r2, r2, #7
 8004d82:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6959      	ldr	r1, [r3, #20]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	69da      	ldr	r2, [r3, #28]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 020f 	bic.w	r2, r2, #15
 8004db0:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6919      	ldr	r1, [r3, #16]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 020e 	bic.w	r2, r2, #14
 8004dd4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	005a      	lsls	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	0c1b      	lsrs	r3, r3, #16
 8004dfc:	041b      	lsls	r3, r3, #16
 8004dfe:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004e22:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3c:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0201 	bic.w	r2, r2, #1
 8004e5c:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0201 	orr.w	r2, r2, #1
 8004e80:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0202 	orr.w	r2, r2, #2
 8004e94:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	7e1b      	ldrb	r3, [r3, #24]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_DSI_ConfigCommand+0x16>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e049      	b.n	8004f56 <HAL_DSI_ConfigCommand+0xaa>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4b24      	ldr	r3, [pc, #144]	@ (8004f64 <HAL_DSI_ConfigCommand+0xb8>)
 8004ed4:	400b      	ands	r3, r1
 8004ed6:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004ee6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004eec:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004ef2:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004ef8:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004efe:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004f04:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004f0a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004f10:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004f16:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004f1c:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004f22:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0202 	bic.w	r2, r2, #2
 8004f3a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	fef080ff 	.word	0xfef080ff

08004f68 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	7e1b      	ldrb	r3, [r3, #24]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d101      	bne.n	8004f7e <HAL_DSI_ConfigFlowControl+0x16>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e016      	b.n	8004fac <HAL_DSI_ConfigFlowControl+0x44>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004f92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	7e1b      	ldrb	r3, [r3, #24]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d101      	bne.n	8004fce <HAL_DSI_ConfigPhyTimer+0x16>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	e084      	b.n	80050d8 <HAL_DSI_ConfigPhyTimer+0x120>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	441a      	add	r2, r3
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6859      	ldr	r1, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695a      	ldr	r2, [r3, #20]
 8004fea:	4613      	mov	r3, r2
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	4413      	add	r3, r2
 8004ff0:	18ca      	adds	r2, r1, r3
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	441a      	add	r2, r3
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	4293      	cmp	r3, r2
 8005010:	bf38      	it	cc
 8005012:	4613      	movcc	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8005026:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	041a      	lsls	r2, r3, #16
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8005054:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	041b      	lsls	r3, r3, #16
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6812      	ldr	r2, [r2, #0]
 8005082:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005086:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800508a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80050b4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	021a      	lsls	r2, r3, #8
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	7e1b      	ldrb	r3, [r3, #24]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <HAL_DSI_ConfigHostTimeouts+0x16>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e0b4      	b.n	8005264 <HAL_DSI_ConfigHostTimeouts+0x180>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800510e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6899      	ldr	r1, [r3, #8]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	021a      	lsls	r2, r3, #8
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	b292      	uxth	r2, r2
 8005130:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	041a      	lsls	r2, r3, #16
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6812      	ldr	r2, [r2, #0]
 8005150:	0c1b      	lsrs	r3, r3, #16
 8005152:	041b      	lsls	r3, r3, #16
 8005154:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6812      	ldr	r2, [r2, #0]
 8005172:	0c1b      	lsrs	r3, r3, #16
 8005174:	041b      	lsls	r3, r3, #16
 8005176:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	0c1b      	lsrs	r3, r3, #16
 8005198:	041b      	lsls	r3, r3, #16
 800519a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	691a      	ldr	r2, [r3, #16]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	0c1b      	lsrs	r3, r3, #16
 80051c2:	041b      	lsls	r3, r3, #16
 80051c4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	695a      	ldr	r2, [r3, #20]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80051ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	699a      	ldr	r2, [r3, #24]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	0c1b      	lsrs	r3, r3, #16
 8005216:	041b      	lsls	r3, r3, #16
 8005218:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	69da      	ldr	r2, [r3, #28]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6812      	ldr	r2, [r2, #0]
 800523e:	0c1b      	lsrs	r3, r3, #16
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	6a1a      	ldr	r2, [r3, #32]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_GFXMMU_Init>:
  *         GFXMMU_InitTypeDef structure and initialize the associated handle.
  * @param  hgfxmmu GFXMMU handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GFXMMU_Init(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	73fb      	strb	r3, [r7, #15]

  /* Check GFXMMU handle */
  if (hgfxmmu == NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d102      	bne.n	8005288 <HAL_GFXMMU_Init+0x18>
  {
    status = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	73fb      	strb	r3, [r7, #15]
 8005286:	e06e      	b.n	8005366 <HAL_GFXMMU_Init+0xf6>
      hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
    }
    hgfxmmu->MspInitCallback(hgfxmmu);
#else
    /* Call GFXMMU MSP init function */
    HAL_GFXMMU_MspInit(hgfxmmu);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7fd fb6f 	bl	800296c <HAL_GFXMMU_MspInit>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */

    /* Configure GFXMMU_CR register */
    hgfxmmu->Instance->CR = 0U;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
    hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlocksPerLine);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6819      	ldr	r1, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	601a      	str	r2, [r3, #0]
#if defined(GFXMMU_CR_CE)
    if (hgfxmmu->Init.CachePrefetch.Activation == ENABLE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	7f1b      	ldrb	r3, [r3, #28]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d12c      	bne.n	800530a <HAL_GFXMMU_Init+0x9a>
    {
      assert_param(IS_GFXMMU_CACHE_LOCK(hgfxmmu->Init.CachePrefetch.CacheLock));
      assert_param(IS_GFXMMU_PREFETCH(hgfxmmu->Init.CachePrefetch.Prefetch));
      assert_param(IS_GFXMMU_OUTTER_BUFFERABILITY(hgfxmmu->Init.CachePrefetch.OutterBufferability));
      assert_param(IS_GFXMMU_OUTTER_CACHABILITY(hgfxmmu->Init.CachePrefetch.OutterCachability));
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a19      	ldr	r1, [r3, #32]
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 80052be:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 80052c4:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterCachability);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 80052ca:	430b      	orrs	r3, r1
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80052d6:	601a      	str	r2, [r3, #0]
      if (hgfxmmu->Init.CachePrefetch.CacheLock == GFXMMU_CACHE_LOCK_ENABLE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052e0:	d10b      	bne.n	80052fa <HAL_GFXMMU_Init+0x8a>
      {
        assert_param(IS_GFXMMU_CACHE_LOCK_BUFFER(hgfxmmu->Init.CachePrefetch.CacheLockBuffer));
        assert_param(IS_GFXMMU_CACHE_FORCE(hgfxmmu->Init.CachePrefetch.CacheForce));
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6819      	ldr	r1, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                  hgfxmmu->Init.CachePrefetch.CacheForce);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	601a      	str	r2, [r3, #0]
      }

      /* Force invalidate cache if cache is enabled */
      hgfxmmu->Instance->CCR |= GFXMMU_CACHE_FORCE_INVALIDATE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0202 	orr.w	r2, r2, #2
 8005308:	60da      	str	r2, [r3, #12]
      assert_param(IS_GFXMMU_ADDRESSCACHE_LOCK_BUFFER(hgfxmmu->Init.AddressCache.AddressCacheLockBuffer));
      hgfxmmu->Instance->CR |= GFXMMU_CR_ACE |
                               hgfxmmu->Init.AddressCache.AddressCacheLockBuffer;
    }
#endif /* GFXMMU_CR_ACE */
    if (hgfxmmu->Init.Interrupts.Activation == ENABLE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005310:	2b01      	cmp	r3, #1
 8005312:	d108      	bne.n	8005326 <HAL_GFXMMU_Init+0xb6>
    {
      assert_param(IS_GFXMMU_INTERRUPTS(hgfxmmu->Init.Interrupts.UsedInterrupts));
      hgfxmmu->Instance->CR |= hgfxmmu->Init.Interrupts.UsedInterrupts;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6819      	ldr	r1, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	601a      	str	r2, [r3, #0]
    }

    /* Configure default value on GFXMMU_DVR register */
    hgfxmmu->Instance->DVR = hgfxmmu->Init.DefaultValue;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6892      	ldr	r2, [r2, #8]
 800532e:	611a      	str	r2, [r3, #16]

    /* Configure physical buffer addresses on GFXMMU_BxCR registers */
    hgfxmmu->Instance->B0CR = hgfxmmu->Init.Buffers.Buf0Address;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	68d2      	ldr	r2, [r2, #12]
 8005338:	621a      	str	r2, [r3, #32]
    hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6912      	ldr	r2, [r2, #16]
 8005342:	625a      	str	r2, [r3, #36]	@ 0x24
    hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6952      	ldr	r2, [r2, #20]
 800534c:	629a      	str	r2, [r3, #40]	@ 0x28
    hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6992      	ldr	r2, [r2, #24]
 8005356:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Reset GFXMMU error code */
    hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set GFXMMU to ready state */
    hgfxmmu->State = HAL_GFXMMU_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }
  /* Return function status */
  return status;
 8005366:	7bfb      	ldrb	r3, [r7, #15]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_GFXMMU_ConfigLut>:
  */
HAL_StatusTypeDef HAL_GFXMMU_ConfigLut(GFXMMU_HandleTypeDef *hgfxmmu,
                                       uint32_t FirstLine,
                                       uint32_t LinesNumber,
                                       uint32_t Address)
{
 8005370:	b480      	push	{r7}
 8005372:	b08b      	sub	sp, #44	@ 0x2c
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
  assert_param(IS_GFXMMU_LUT_LINE(FirstLine));
  assert_param(IS_GFXMMU_LUT_LINES_NUMBER(LinesNumber));

  /* Check GFXMMU state and coherent parameters */
  if ((hgfxmmu->State != HAL_GFXMMU_STATE_READY) || ((FirstLine + LinesNumber) > 1024U))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800538a:	2b01      	cmp	r3, #1
 800538c:	d105      	bne.n	800539a <HAL_GFXMMU_ConfigLut+0x2a>
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4413      	add	r3, r2
 8005394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005398:	d903      	bls.n	80053a2 <HAL_GFXMMU_ConfigLut+0x32>
  {
    status = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80053a0:	e032      	b.n	8005408 <HAL_GFXMMU_ConfigLut+0x98>
    uint32_t current_line;
    uint32_t lutxl_address;
    uint32_t lutxh_address;

    /* Initialize local variables */
    current_address = Address;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	623b      	str	r3, [r7, #32]
    current_line    = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	61fb      	str	r3, [r7, #28]
    lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
    lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * FirstLine) + 1U]);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	3301      	adds	r3, #1
 80053c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]

    /* Copy LUT from flash to look up RAM */
    while (current_line < LinesNumber)
 80053d0:	e016      	b.n	8005400 <HAL_GFXMMU_ConfigLut+0x90>
    {
      *((uint32_t *)lutxl_address) = *((uint32_t *)current_address);
 80053d2:	6a3a      	ldr	r2, [r7, #32]
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	6812      	ldr	r2, [r2, #0]
 80053d8:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	3304      	adds	r3, #4
 80053de:	623b      	str	r3, [r7, #32]
      *((uint32_t *)lutxh_address) = *((uint32_t *)current_address);
 80053e0:	6a3a      	ldr	r2, [r7, #32]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	3304      	adds	r3, #4
 80053ec:	623b      	str	r3, [r7, #32]
      lutxl_address += 8U;
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	3308      	adds	r3, #8
 80053f2:	61bb      	str	r3, [r7, #24]
      lutxh_address += 8U;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	3308      	adds	r3, #8
 80053f8:	617b      	str	r3, [r7, #20]
      current_line++;
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	3301      	adds	r3, #1
 80053fe:	61fb      	str	r3, [r7, #28]
    while (current_line < LinesNumber)
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	429a      	cmp	r2, r3
 8005406:	d3e4      	bcc.n	80053d2 <HAL_GFXMMU_ConfigLut+0x62>
    }
  }
  /* Return function status */
  return status;
 8005408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800540c:	4618      	mov	r0, r3
 800540e:	372c      	adds	r7, #44	@ 0x2c
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_GFXMMU_IRQHandler>:
  * @brief  This function handles the GFXMMU interrupts.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
void HAL_GFXMMU_IRQHandler(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t flags, interrupts, error;

  /* Read current flags and interrupts and determine which error occurs */
  flags = hgfxmmu->Instance->SR;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	617b      	str	r3, [r7, #20]
  interrupts = (hgfxmmu->Instance->CR & GFXMMU_CR_ITS_MASK);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 031f 	and.w	r3, r3, #31
 8005432:	613b      	str	r3, [r7, #16]
  error = (flags & interrupts);
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	4013      	ands	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]

  if (error != 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00c      	beq.n	800545c <HAL_GFXMMU_IRQHandler+0x44>
  {
    /* Clear flags on GFXMMU_FCR register */
    hgfxmmu->Instance->FCR = error;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	609a      	str	r2, [r3, #8]

    /* Update GFXMMU error code */
    hgfxmmu->ErrorCode |= error;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Call GFXMMU error callback */
#if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
    hgfxmmu->ErrorCallback(hgfxmmu);
#else
    HAL_GFXMMU_ErrorCallback(hgfxmmu);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f804 	bl	8005464 <HAL_GFXMMU_ErrorCallback>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
  }
}
 800545c:	bf00      	nop
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_GFXMMU_ErrorCallback>:
  * @brief  Error callback.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
__weak void HAL_GFXMMU_ErrorCallback(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(hgfxmmu);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_GFXMMU_ErrorCallback could be implemented in the user file.
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005478:	b480      	push	{r7}
 800547a:	b089      	sub	sp, #36	@ 0x24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800548a:	e1ba      	b.n	8005802 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	2101      	movs	r1, #1
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	fa01 f303 	lsl.w	r3, r1, r3
 8005498:	4013      	ands	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 81aa 	beq.w	80057fc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a55      	ldr	r2, [pc, #340]	@ (8005600 <HAL_GPIO_Init+0x188>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d15d      	bne.n	800556c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80054b6:	2201      	movs	r2, #1
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43db      	mvns	r3, r3
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	4013      	ands	r3, r2
 80054c4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f003 0201 	and.w	r2, r3, #1
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	fa02 f303 	lsl.w	r3, r2, r3
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69fa      	ldr	r2, [r7, #28]
 80054de:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80054e0:	4a48      	ldr	r2, [pc, #288]	@ (8005604 <HAL_GPIO_Init+0x18c>)
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054e8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80054ea:	4a46      	ldr	r2, [pc, #280]	@ (8005604 <HAL_GPIO_Init+0x18c>)
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4413      	add	r3, r2
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	08da      	lsrs	r2, r3, #3
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	3208      	adds	r2, #8
 80054fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005502:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	220f      	movs	r2, #15
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	43db      	mvns	r3, r3
 8005514:	69fa      	ldr	r2, [r7, #28]
 8005516:	4013      	ands	r3, r2
 8005518:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	220b      	movs	r2, #11
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	4313      	orrs	r3, r2
 800552c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	08da      	lsrs	r2, r3, #3
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	3208      	adds	r2, #8
 8005536:	69f9      	ldr	r1, [r7, #28]
 8005538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	2203      	movs	r2, #3
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	43db      	mvns	r3, r3
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	4013      	ands	r3, r2
 8005552:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	2202      	movs	r2, #2
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	69fa      	ldr	r2, [r7, #28]
 8005560:	4313      	orrs	r3, r2
 8005562:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	e067      	b.n	800563c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	2b02      	cmp	r3, #2
 8005572:	d003      	beq.n	800557c <HAL_GPIO_Init+0x104>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b12      	cmp	r3, #18
 800557a:	d145      	bne.n	8005608 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	08da      	lsrs	r2, r3, #3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3208      	adds	r2, #8
 8005584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005588:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	220f      	movs	r2, #15
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	43db      	mvns	r3, r3
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	4013      	ands	r3, r2
 800559e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	f003 020f 	and.w	r2, r3, #15
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	08da      	lsrs	r2, r3, #3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3208      	adds	r2, #8
 80055c2:	69f9      	ldr	r1, [r7, #28]
 80055c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	2203      	movs	r2, #3
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	43db      	mvns	r3, r3
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	4013      	ands	r3, r2
 80055de:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f003 0203 	and.w	r2, r3, #3
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	69fa      	ldr	r2, [r7, #28]
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	e01e      	b.n	800563c <HAL_GPIO_Init+0x1c4>
 80055fe:	bf00      	nop
 8005600:	46020000 	.word	0x46020000
 8005604:	0800e31c 	.word	0x0800e31c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	2203      	movs	r2, #3
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	43db      	mvns	r3, r3
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	4013      	ands	r3, r2
 800561e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f003 0203 	and.w	r2, r3, #3
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	69fa      	ldr	r2, [r7, #28]
 8005632:	4313      	orrs	r3, r2
 8005634:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d00b      	beq.n	800565c <HAL_GPIO_Init+0x1e4>
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2b02      	cmp	r3, #2
 800564a:	d007      	beq.n	800565c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005650:	2b11      	cmp	r3, #17
 8005652:	d003      	beq.n	800565c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2b12      	cmp	r3, #18
 800565a:	d130      	bne.n	80056be <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	2203      	movs	r2, #3
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	43db      	mvns	r3, r3
 800566e:	69fa      	ldr	r2, [r7, #28]
 8005670:	4013      	ands	r3, r2
 8005672:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	4313      	orrs	r3, r2
 8005684:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8005692:	2201      	movs	r2, #1
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	43db      	mvns	r3, r3
 800569c:	69fa      	ldr	r2, [r7, #28]
 800569e:	4013      	ands	r3, r2
 80056a0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	091b      	lsrs	r3, r3, #4
 80056a8:	f003 0201 	and.w	r2, r3, #1
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d017      	beq.n	80056f6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	2203      	movs	r2, #3
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	43db      	mvns	r3, r3
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	4013      	ands	r3, r2
 80056dc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d07c      	beq.n	80057fc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005702:	4a47      	ldr	r2, [pc, #284]	@ (8005820 <HAL_GPIO_Init+0x3a8>)
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	089b      	lsrs	r3, r3, #2
 8005708:	3318      	adds	r3, #24
 800570a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800570e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	220f      	movs	r2, #15
 800571a:	fa02 f303 	lsl.w	r3, r2, r3
 800571e:	43db      	mvns	r3, r3
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	4013      	ands	r3, r2
 8005724:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	0a9a      	lsrs	r2, r3, #10
 800572a:	4b3e      	ldr	r3, [pc, #248]	@ (8005824 <HAL_GPIO_Init+0x3ac>)
 800572c:	4013      	ands	r3, r2
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	f002 0203 	and.w	r2, r2, #3
 8005734:	00d2      	lsls	r2, r2, #3
 8005736:	4093      	lsls	r3, r2
 8005738:	69fa      	ldr	r2, [r7, #28]
 800573a:	4313      	orrs	r3, r2
 800573c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800573e:	4938      	ldr	r1, [pc, #224]	@ (8005820 <HAL_GPIO_Init+0x3a8>)
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	089b      	lsrs	r3, r3, #2
 8005744:	3318      	adds	r3, #24
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800574c:	4b34      	ldr	r3, [pc, #208]	@ (8005820 <HAL_GPIO_Init+0x3a8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	43db      	mvns	r3, r3
 8005756:	69fa      	ldr	r2, [r7, #28]
 8005758:	4013      	ands	r3, r2
 800575a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4313      	orrs	r3, r2
 800576e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005770:	4a2b      	ldr	r2, [pc, #172]	@ (8005820 <HAL_GPIO_Init+0x3a8>)
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005776:	4b2a      	ldr	r3, [pc, #168]	@ (8005820 <HAL_GPIO_Init+0x3a8>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	43db      	mvns	r3, r3
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	4013      	ands	r3, r2
 8005784:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4313      	orrs	r3, r2
 8005798:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800579a:	4a21      	ldr	r2, [pc, #132]	@ (8005820 <HAL_GPIO_Init+0x3a8>)
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80057a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005820 <HAL_GPIO_Init+0x3a8>)
 80057a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	43db      	mvns	r3, r3
 80057ac:	69fa      	ldr	r2, [r7, #28]
 80057ae:	4013      	ands	r3, r2
 80057b0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80057c6:	4a16      	ldr	r2, [pc, #88]	@ (8005820 <HAL_GPIO_Init+0x3a8>)
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80057ce:	4b14      	ldr	r3, [pc, #80]	@ (8005820 <HAL_GPIO_Init+0x3a8>)
 80057d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	43db      	mvns	r3, r3
 80057da:	69fa      	ldr	r2, [r7, #28]
 80057dc:	4013      	ands	r3, r2
 80057de:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80057f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005820 <HAL_GPIO_Init+0x3a8>)
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	3301      	adds	r3, #1
 8005800:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	fa22 f303 	lsr.w	r3, r2, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	f47f ae3d 	bne.w	800548c <HAL_GPIO_Init+0x14>
  }
}
 8005812:	bf00      	nop
 8005814:	bf00      	nop
 8005816:	3724      	adds	r7, #36	@ 0x24
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	46022000 	.word	0x46022000
 8005824:	002f7f7f 	.word	0x002f7f7f

08005828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	807b      	strh	r3, [r7, #2]
 8005834:	4613      	mov	r3, r2
 8005836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005838:	787b      	ldrb	r3, [r7, #1]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800583e:	887a      	ldrh	r2, [r7, #2]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8005844:	e002      	b.n	800584c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8005846:	887a      	ldrh	r2, [r7, #2]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e01c      	b.n	80058a4 <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	795b      	ldrb	r3, [r3, #5]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d105      	bne.n	800587e <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fd f8a2 	bl	80029bc <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	791b      	ldrb	r3, [r3, #4]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_GPU2D_Init+0x32>
 8005886:	2302      	movs	r3, #2
 8005888:	e00c      	b.n	80058a4 <HAL_GPU2D_Init+0x4c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	33f8      	adds	r3, #248	@ 0xf8
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d013      	beq.n	80058f0 <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	33f8      	adds	r3, #248	@ 0xf8
 80058ce:	613b      	str	r3, [r7, #16]
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f023 0201 	bic.w	r2, r3, #1
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 80058e8:	68f9      	ldr	r1, [r7, #12]
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f80f 	bl	800590e <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 80058f0:	bf00      	nop
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f80f 	bl	8005924 <HAL_GPU2D_ErrorCallback>
}
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <HAL_GPU2D_CommandListCpltCallback>:
  *                the configuration information for the GPU2D.
  * @param  CmdListID Command list ID that got completed.
  * @retval None
  */
__weak void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	6039      	str	r1, [r7, #0]
  UNUSED(CmdListID);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_GPU2D_CommandListCpltCallback can be implemented in the user file.
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 800592c:	bf00      	nop
 800592e:	e7fd      	b.n	800592c <HAL_GPU2D_ErrorCallback+0x8>

08005930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e08d      	b.n	8005a5e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d106      	bne.n	800595c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7fd f870 	bl	8002a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2224      	movs	r2, #36	@ 0x24
 8005960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0201 	bic.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005980:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005990:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d107      	bne.n	80059aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689a      	ldr	r2, [r3, #8]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059a6:	609a      	str	r2, [r3, #8]
 80059a8:	e006      	b.n	80059b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80059b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d108      	bne.n	80059d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059ce:	605a      	str	r2, [r3, #4]
 80059d0:	e007      	b.n	80059e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6812      	ldr	r2, [r2, #0]
 80059ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80059f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691a      	ldr	r2, [r3, #16]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69d9      	ldr	r1, [r3, #28]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1a      	ldr	r2, [r3, #32]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0201 	orr.w	r2, r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	4608      	mov	r0, r1
 8005a72:	4611      	mov	r1, r2
 8005a74:	461a      	mov	r2, r3
 8005a76:	4603      	mov	r3, r0
 8005a78:	817b      	strh	r3, [r7, #10]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	813b      	strh	r3, [r7, #8]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b20      	cmp	r3, #32
 8005a8c:	f040 80f9 	bne.w	8005c82 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <HAL_I2C_Mem_Write+0x34>
 8005a96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d105      	bne.n	8005aa8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005aa2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e0ed      	b.n	8005c84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_I2C_Mem_Write+0x4e>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e0e6      	b.n	8005c84 <HAL_I2C_Mem_Write+0x21c>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005abe:	f7fe f81f 	bl	8003b00 <HAL_GetTick>
 8005ac2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	2319      	movs	r3, #25
 8005aca:	2201      	movs	r2, #1
 8005acc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fac3 	bl	800605c <I2C_WaitOnFlagUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e0d1      	b.n	8005c84 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2221      	movs	r2, #33	@ 0x21
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2240      	movs	r2, #64	@ 0x40
 8005aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a3a      	ldr	r2, [r7, #32]
 8005afa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b08:	88f8      	ldrh	r0, [r7, #6]
 8005b0a:	893a      	ldrh	r2, [r7, #8]
 8005b0c:	8979      	ldrh	r1, [r7, #10]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	9301      	str	r3, [sp, #4]
 8005b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	4603      	mov	r3, r0
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f9d3 	bl	8005ec4 <I2C_RequestMemoryWrite>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e0a9      	b.n	8005c84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2bff      	cmp	r3, #255	@ 0xff
 8005b38:	d90e      	bls.n	8005b58 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	22ff      	movs	r2, #255	@ 0xff
 8005b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	8979      	ldrh	r1, [r7, #10]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 fc3d 	bl	80063d0 <I2C_TransferConfig>
 8005b56:	e00f      	b.n	8005b78 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	8979      	ldrh	r1, [r7, #10]
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 fc2c 	bl	80063d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 fabc 	bl	80060fa <I2C_WaitOnTXISFlagUntilTimeout>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e07b      	b.n	8005c84 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b90:	781a      	ldrb	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d034      	beq.n	8005c30 <HAL_I2C_Mem_Write+0x1c8>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d130      	bne.n	8005c30 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2180      	movs	r1, #128	@ 0x80
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 fa3f 	bl	800605c <I2C_WaitOnFlagUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e04d      	b.n	8005c84 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2bff      	cmp	r3, #255	@ 0xff
 8005bf0:	d90e      	bls.n	8005c10 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	22ff      	movs	r2, #255	@ 0xff
 8005bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	8979      	ldrh	r1, [r7, #10]
 8005c00:	2300      	movs	r3, #0
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 fbe1 	bl	80063d0 <I2C_TransferConfig>
 8005c0e:	e00f      	b.n	8005c30 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	8979      	ldrh	r1, [r7, #10]
 8005c22:	2300      	movs	r3, #0
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 fbd0 	bl	80063d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d19e      	bne.n	8005b78 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 faa2 	bl	8006188 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e01a      	b.n	8005c84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2220      	movs	r2, #32
 8005c54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6859      	ldr	r1, [r3, #4]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	4b0a      	ldr	r3, [pc, #40]	@ (8005c8c <HAL_I2C_Mem_Write+0x224>)
 8005c62:	400b      	ands	r3, r1
 8005c64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e000      	b.n	8005c84 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005c82:	2302      	movs	r3, #2
  }
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	fe00e800 	.word	0xfe00e800

08005c90 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b088      	sub	sp, #32
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	4608      	mov	r0, r1
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	817b      	strh	r3, [r7, #10]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	813b      	strh	r3, [r7, #8]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b20      	cmp	r3, #32
 8005cb4:	f040 80fd 	bne.w	8005eb2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <HAL_I2C_Mem_Read+0x34>
 8005cbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d105      	bne.n	8005cd0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0f1      	b.n	8005eb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d101      	bne.n	8005cde <HAL_I2C_Mem_Read+0x4e>
 8005cda:	2302      	movs	r3, #2
 8005cdc:	e0ea      	b.n	8005eb4 <HAL_I2C_Mem_Read+0x224>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ce6:	f7fd ff0b 	bl	8003b00 <HAL_GetTick>
 8005cea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	2319      	movs	r3, #25
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f9af 	bl	800605c <I2C_WaitOnFlagUntilTimeout>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e0d5      	b.n	8005eb4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2222      	movs	r2, #34	@ 0x22
 8005d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2240      	movs	r2, #64	@ 0x40
 8005d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a3a      	ldr	r2, [r7, #32]
 8005d22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d30:	88f8      	ldrh	r0, [r7, #6]
 8005d32:	893a      	ldrh	r2, [r7, #8]
 8005d34:	8979      	ldrh	r1, [r7, #10]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	9301      	str	r3, [sp, #4]
 8005d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	4603      	mov	r3, r0
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 f913 	bl	8005f6c <I2C_RequestMemoryRead>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e0ad      	b.n	8005eb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2bff      	cmp	r3, #255	@ 0xff
 8005d60:	d90e      	bls.n	8005d80 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	22ff      	movs	r2, #255	@ 0xff
 8005d66:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	8979      	ldrh	r1, [r7, #10]
 8005d70:	4b52      	ldr	r3, [pc, #328]	@ (8005ebc <HAL_I2C_Mem_Read+0x22c>)
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 fb29 	bl	80063d0 <I2C_TransferConfig>
 8005d7e:	e00f      	b.n	8005da0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	8979      	ldrh	r1, [r7, #10]
 8005d92:	4b4a      	ldr	r3, [pc, #296]	@ (8005ebc <HAL_I2C_Mem_Read+0x22c>)
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 fb18 	bl	80063d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da6:	2200      	movs	r2, #0
 8005da8:	2104      	movs	r1, #4
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 f956 	bl	800605c <I2C_WaitOnFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e07c      	b.n	8005eb4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d034      	beq.n	8005e60 <HAL_I2C_Mem_Read+0x1d0>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d130      	bne.n	8005e60 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e04:	2200      	movs	r2, #0
 8005e06:	2180      	movs	r1, #128	@ 0x80
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f927 	bl	800605c <I2C_WaitOnFlagUntilTimeout>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e04d      	b.n	8005eb4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2bff      	cmp	r3, #255	@ 0xff
 8005e20:	d90e      	bls.n	8005e40 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	22ff      	movs	r2, #255	@ 0xff
 8005e26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	8979      	ldrh	r1, [r7, #10]
 8005e30:	2300      	movs	r3, #0
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 fac9 	bl	80063d0 <I2C_TransferConfig>
 8005e3e:	e00f      	b.n	8005e60 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	8979      	ldrh	r1, [r7, #10]
 8005e52:	2300      	movs	r3, #0
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 fab8 	bl	80063d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d19a      	bne.n	8005da0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 f98a 	bl	8006188 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e01a      	b.n	8005eb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2220      	movs	r2, #32
 8005e84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6859      	ldr	r1, [r3, #4]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec0 <HAL_I2C_Mem_Read+0x230>)
 8005e92:	400b      	ands	r3, r1
 8005e94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	e000      	b.n	8005eb4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005eb2:	2302      	movs	r3, #2
  }
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	80002400 	.word	0x80002400
 8005ec0:	fe00e800 	.word	0xfe00e800

08005ec4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	4608      	mov	r0, r1
 8005ece:	4611      	mov	r1, r2
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	817b      	strh	r3, [r7, #10]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	813b      	strh	r3, [r7, #8]
 8005eda:	4613      	mov	r3, r2
 8005edc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	8979      	ldrh	r1, [r7, #10]
 8005ee4:	4b20      	ldr	r3, [pc, #128]	@ (8005f68 <I2C_RequestMemoryWrite+0xa4>)
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 fa6f 	bl	80063d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ef2:	69fa      	ldr	r2, [r7, #28]
 8005ef4:	69b9      	ldr	r1, [r7, #24]
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 f8ff 	bl	80060fa <I2C_WaitOnTXISFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e02c      	b.n	8005f60 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d105      	bne.n	8005f18 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f0c:	893b      	ldrh	r3, [r7, #8]
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f16:	e015      	b.n	8005f44 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005f18:	893b      	ldrh	r3, [r7, #8]
 8005f1a:	0a1b      	lsrs	r3, r3, #8
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	69b9      	ldr	r1, [r7, #24]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 f8e5 	bl	80060fa <I2C_WaitOnTXISFlagUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e012      	b.n	8005f60 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f3a:	893b      	ldrh	r3, [r7, #8]
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	2180      	movs	r1, #128	@ 0x80
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 f884 	bl	800605c <I2C_WaitOnFlagUntilTimeout>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e000      	b.n	8005f60 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	80002000 	.word	0x80002000

08005f6c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	4608      	mov	r0, r1
 8005f76:	4611      	mov	r1, r2
 8005f78:	461a      	mov	r2, r3
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	817b      	strh	r3, [r7, #10]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	813b      	strh	r3, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005f86:	88fb      	ldrh	r3, [r7, #6]
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	8979      	ldrh	r1, [r7, #10]
 8005f8c:	4b20      	ldr	r3, [pc, #128]	@ (8006010 <I2C_RequestMemoryRead+0xa4>)
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	2300      	movs	r3, #0
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 fa1c 	bl	80063d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f98:	69fa      	ldr	r2, [r7, #28]
 8005f9a:	69b9      	ldr	r1, [r7, #24]
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 f8ac 	bl	80060fa <I2C_WaitOnTXISFlagUntilTimeout>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e02c      	b.n	8006006 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fac:	88fb      	ldrh	r3, [r7, #6]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d105      	bne.n	8005fbe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fb2:	893b      	ldrh	r3, [r7, #8]
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fbc:	e015      	b.n	8005fea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005fbe:	893b      	ldrh	r3, [r7, #8]
 8005fc0:	0a1b      	lsrs	r3, r3, #8
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	69b9      	ldr	r1, [r7, #24]
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 f892 	bl	80060fa <I2C_WaitOnTXISFlagUntilTimeout>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e012      	b.n	8006006 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fe0:	893b      	ldrh	r3, [r7, #8]
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2140      	movs	r1, #64	@ 0x40
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 f831 	bl	800605c <I2C_WaitOnFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e000      	b.n	8006006 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	80002000 	.word	0x80002000

08006014 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b02      	cmp	r3, #2
 8006028:	d103      	bne.n	8006032 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2200      	movs	r2, #0
 8006030:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b01      	cmp	r3, #1
 800603e:	d007      	beq.n	8006050 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0201 	orr.w	r2, r2, #1
 800604e:	619a      	str	r2, [r3, #24]
  }
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	4613      	mov	r3, r2
 800606a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800606c:	e031      	b.n	80060d2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006074:	d02d      	beq.n	80060d2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006076:	f7fd fd43 	bl	8003b00 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d302      	bcc.n	800608c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d122      	bne.n	80060d2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699a      	ldr	r2, [r3, #24]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4013      	ands	r3, r2
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	429a      	cmp	r2, r3
 800609a:	bf0c      	ite	eq
 800609c:	2301      	moveq	r3, #1
 800609e:	2300      	movne	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	79fb      	ldrb	r3, [r7, #7]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d113      	bne.n	80060d2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ae:	f043 0220 	orr.w	r2, r3, #32
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e00f      	b.n	80060f2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	699a      	ldr	r2, [r3, #24]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	4013      	ands	r3, r2
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	429a      	cmp	r2, r3
 80060e0:	bf0c      	ite	eq
 80060e2:	2301      	moveq	r3, #1
 80060e4:	2300      	movne	r3, #0
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	461a      	mov	r2, r3
 80060ea:	79fb      	ldrb	r3, [r7, #7]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d0be      	beq.n	800606e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006106:	e033      	b.n	8006170 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	68b9      	ldr	r1, [r7, #8]
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 f87f 	bl	8006210 <I2C_IsErrorOccurred>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e031      	b.n	8006180 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006122:	d025      	beq.n	8006170 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006124:	f7fd fcec 	bl	8003b00 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	429a      	cmp	r2, r3
 8006132:	d302      	bcc.n	800613a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d11a      	bne.n	8006170 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b02      	cmp	r3, #2
 8006146:	d013      	beq.n	8006170 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800614c:	f043 0220 	orr.w	r2, r3, #32
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e007      	b.n	8006180 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b02      	cmp	r3, #2
 800617c:	d1c4      	bne.n	8006108 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006194:	e02f      	b.n	80061f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f838 	bl	8006210 <I2C_IsErrorOccurred>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e02d      	b.n	8006206 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061aa:	f7fd fca9 	bl	8003b00 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d302      	bcc.n	80061c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d11a      	bne.n	80061f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d013      	beq.n	80061f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d2:	f043 0220 	orr.w	r2, r3, #32
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2220      	movs	r2, #32
 80061de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e007      	b.n	8006206 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b20      	cmp	r3, #32
 8006202:	d1c8      	bne.n	8006196 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08a      	sub	sp, #40	@ 0x28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800621c:	2300      	movs	r3, #0
 800621e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800622a:	2300      	movs	r3, #0
 800622c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	2b00      	cmp	r3, #0
 800623a:	d068      	beq.n	800630e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2210      	movs	r2, #16
 8006242:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006244:	e049      	b.n	80062da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624c:	d045      	beq.n	80062da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800624e:	f7fd fc57 	bl	8003b00 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	429a      	cmp	r2, r3
 800625c:	d302      	bcc.n	8006264 <I2C_IsErrorOccurred+0x54>
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d13a      	bne.n	80062da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800626e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006276:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006282:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006286:	d121      	bne.n	80062cc <I2C_IsErrorOccurred+0xbc>
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800628e:	d01d      	beq.n	80062cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006290:	7cfb      	ldrb	r3, [r7, #19]
 8006292:	2b20      	cmp	r3, #32
 8006294:	d01a      	beq.n	80062cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80062a6:	f7fd fc2b 	bl	8003b00 <HAL_GetTick>
 80062aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062ac:	e00e      	b.n	80062cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80062ae:	f7fd fc27 	bl	8003b00 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b19      	cmp	r3, #25
 80062ba:	d907      	bls.n	80062cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	f043 0320 	orr.w	r3, r3, #32
 80062c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80062ca:	e006      	b.n	80062da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b20      	cmp	r3, #32
 80062d8:	d1e9      	bne.n	80062ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	f003 0320 	and.w	r3, r3, #32
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d003      	beq.n	80062f0 <I2C_IsErrorOccurred+0xe0>
 80062e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0aa      	beq.n	8006246 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80062f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d103      	bne.n	8006300 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2220      	movs	r2, #32
 80062fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	f043 0304 	orr.w	r3, r3, #4
 8006306:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	f043 0301 	orr.w	r3, r3, #1
 8006326:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006330:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00b      	beq.n	800635a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	f043 0308 	orr.w	r3, r3, #8
 8006348:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006352:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00b      	beq.n	800637c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	f043 0302 	orr.w	r3, r3, #2
 800636a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006374:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800637c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01c      	beq.n	80063be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f7ff fe45 	bl	8006014 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6859      	ldr	r1, [r3, #4]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	4b0d      	ldr	r3, [pc, #52]	@ (80063cc <I2C_IsErrorOccurred+0x1bc>)
 8006396:	400b      	ands	r3, r1
 8006398:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	431a      	orrs	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80063be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3728      	adds	r7, #40	@ 0x28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	fe00e800 	.word	0xfe00e800

080063d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	607b      	str	r3, [r7, #4]
 80063da:	460b      	mov	r3, r1
 80063dc:	817b      	strh	r3, [r7, #10]
 80063de:	4613      	mov	r3, r2
 80063e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063e2:	897b      	ldrh	r3, [r7, #10]
 80063e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80063e8:	7a7b      	ldrb	r3, [r7, #9]
 80063ea:	041b      	lsls	r3, r3, #16
 80063ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	0d5b      	lsrs	r3, r3, #21
 800640a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800640e:	4b08      	ldr	r3, [pc, #32]	@ (8006430 <I2C_TransferConfig+0x60>)
 8006410:	430b      	orrs	r3, r1
 8006412:	43db      	mvns	r3, r3
 8006414:	ea02 0103 	and.w	r1, r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	430a      	orrs	r2, r1
 8006420:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006422:	bf00      	nop
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	03ff63ff 	.word	0x03ff63ff

08006434 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b20      	cmp	r3, #32
 8006448:	d138      	bne.n	80064bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006454:	2302      	movs	r3, #2
 8006456:	e032      	b.n	80064be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2224      	movs	r2, #36	@ 0x24
 8006464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0201 	bic.w	r2, r2, #1
 8006476:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006486:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6819      	ldr	r1, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0201 	orr.w	r2, r2, #1
 80064a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	e000      	b.n	80064be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80064bc:	2302      	movs	r3, #2
  }
}
 80064be:	4618      	mov	r0, r3
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b085      	sub	sp, #20
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b20      	cmp	r3, #32
 80064de:	d139      	bne.n	8006554 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d101      	bne.n	80064ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80064ea:	2302      	movs	r3, #2
 80064ec:	e033      	b.n	8006556 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2224      	movs	r2, #36	@ 0x24
 80064fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0201 	bic.w	r2, r2, #1
 800650c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800651c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	021b      	lsls	r3, r3, #8
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f042 0201 	orr.w	r2, r2, #1
 800653e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2220      	movs	r2, #32
 8006544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	e000      	b.n	8006556 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006554:	2302      	movs	r3, #2
  }
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
	...

08006564 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8006564:	b480      	push	{r7}
 8006566:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8006568:	4b05      	ldr	r3, [pc, #20]	@ (8006580 <HAL_ICACHE_Enable+0x1c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a04      	ldr	r2, [pc, #16]	@ (8006580 <HAL_ICACHE_Enable+0x1c>)
 800656e:	f043 0301 	orr.w	r3, r3, #1
 8006572:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	40030400 	.word	0x40030400

08006584 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 800658e:	4b14      	ldr	r3, [pc, #80]	@ (80065e0 <HAL_ICACHE_Disable+0x5c>)
 8006590:	2202      	movs	r2, #2
 8006592:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8006594:	4b12      	ldr	r3, [pc, #72]	@ (80065e0 <HAL_ICACHE_Disable+0x5c>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a11      	ldr	r2, [pc, #68]	@ (80065e0 <HAL_ICACHE_Disable+0x5c>)
 800659a:	f023 0301 	bic.w	r3, r3, #1
 800659e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065a0:	f7fd faae 	bl	8003b00 <HAL_GetTick>
 80065a4:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80065a6:	e00f      	b.n	80065c8 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 80065a8:	f7fd faaa 	bl	8003b00 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d908      	bls.n	80065c8 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80065b6:	4b0a      	ldr	r3, [pc, #40]	@ (80065e0 <HAL_ICACHE_Disable+0x5c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	71fb      	strb	r3, [r7, #7]
        break;
 80065c6:	e005      	b.n	80065d4 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80065c8:	4b05      	ldr	r3, [pc, #20]	@ (80065e0 <HAL_ICACHE_Disable+0x5c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e9      	bne.n	80065a8 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 80065d4:	79fb      	ldrb	r3, [r7, #7]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	40030400 	.word	0x40030400

080065e4 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80065f2:	4b22      	ldr	r3, [pc, #136]	@ (800667c <HAL_ICACHE_EnableRemapRegion+0x98>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	75fb      	strb	r3, [r7, #23]
 8006602:	e034      	b.n	800666e <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	009a      	lsls	r2, r3, #2
 8006608:	4b1d      	ldr	r3, [pc, #116]	@ (8006680 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 800660a:	4413      	add	r3, r2
 800660c:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	75fb      	strb	r3, [r7, #23]
 800661e:	e026      	b.n	800666e <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 800662c:	4013      	ands	r3, r2
 800662e:	b2db      	uxtb	r3, r3
 8006630:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	425b      	negs	r3, r3
 800663e:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8006640:	401a      	ands	r2, r3
 8006642:	4b10      	ldr	r3, [pc, #64]	@ (8006684 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 8006644:	4013      	ands	r3, r2
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	025a      	lsls	r2, r3, #9
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 800665c:	4313      	orrs	r3, r2
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	4313      	orrs	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 800666e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006670:	4618      	mov	r0, r3
 8006672:	371c      	adds	r7, #28
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	40030400 	.word	0x40030400
 8006680:	40030420 	.word	0x40030420
 8006684:	07ff0000 	.word	0x07ff0000

08006688 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e0bf      	b.n	800681a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d106      	bne.n	80066b4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7fc fd70 	bl	8003194 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699a      	ldr	r2, [r3, #24]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80066ca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6999      	ldr	r1, [r3, #24]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80066e0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6899      	ldr	r1, [r3, #8]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	4b4a      	ldr	r3, [pc, #296]	@ (8006824 <HAL_LTDC_Init+0x19c>)
 80066fc:	400b      	ands	r3, r1
 80066fe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	041b      	lsls	r3, r3, #16
 8006706:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6899      	ldr	r1, [r3, #8]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	699a      	ldr	r2, [r3, #24]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68d9      	ldr	r1, [r3, #12]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	4b3e      	ldr	r3, [pc, #248]	@ (8006824 <HAL_LTDC_Init+0x19c>)
 800672a:	400b      	ands	r3, r1
 800672c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	041b      	lsls	r3, r3, #16
 8006734:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68d9      	ldr	r1, [r3, #12]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1a      	ldr	r2, [r3, #32]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	431a      	orrs	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6919      	ldr	r1, [r3, #16]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	4b33      	ldr	r3, [pc, #204]	@ (8006824 <HAL_LTDC_Init+0x19c>)
 8006758:	400b      	ands	r3, r1
 800675a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006760:	041b      	lsls	r3, r3, #16
 8006762:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6919      	ldr	r1, [r3, #16]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	431a      	orrs	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6959      	ldr	r1, [r3, #20]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	4b27      	ldr	r3, [pc, #156]	@ (8006824 <HAL_LTDC_Init+0x19c>)
 8006786:	400b      	ands	r3, r1
 8006788:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678e:	041b      	lsls	r3, r3, #16
 8006790:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6959      	ldr	r1, [r3, #20]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80067ae:	021b      	lsls	r3, r3, #8
 80067b0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80067b8:	041b      	lsls	r3, r3, #16
 80067ba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80067ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0206 	orr.w	r2, r2, #6
 80067f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0201 	orr.w	r2, r2, #1
 8006806:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	f000f800 	.word	0xf000f800

08006828 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006836:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800683e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	d023      	beq.n	8006892 <HAL_LTDC_IRQHandler+0x6a>
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01e      	beq.n	8006892 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0204 	bic.w	r2, r2, #4
 8006862:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2204      	movs	r2, #4
 800686a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006872:	f043 0201 	orr.w	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2204      	movs	r2, #4
 8006880:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f86f 	bl	8006970 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d023      	beq.n	80068e4 <HAL_LTDC_IRQHandler+0xbc>
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d01e      	beq.n	80068e4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0202 	bic.w	r2, r2, #2
 80068b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2202      	movs	r2, #2
 80068bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068c4:	f043 0202 	orr.w	r2, r3, #2
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2204      	movs	r2, #4
 80068d2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f846 	bl	8006970 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d01b      	beq.n	8006926 <HAL_LTDC_IRQHandler+0xfe>
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d016      	beq.n	8006926 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0201 	bic.w	r2, r2, #1
 8006906:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2201      	movs	r2, #1
 800690e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f82f 	bl	8006984 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b00      	cmp	r3, #0
 800692e:	d01b      	beq.n	8006968 <HAL_LTDC_IRQHandler+0x140>
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b00      	cmp	r3, #0
 8006938:	d016      	beq.n	8006968 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0208 	bic.w	r2, r2, #8
 8006948:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2208      	movs	r2, #8
 8006950:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f818 	bl	8006998 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006968:	bf00      	nop
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80069ac:	b5b0      	push	{r4, r5, r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d101      	bne.n	80069c6 <HAL_LTDC_ConfigLayer+0x1a>
 80069c2:	2302      	movs	r3, #2
 80069c4:	e02c      	b.n	8006a20 <HAL_LTDC_ConfigLayer+0x74>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2202      	movs	r2, #2
 80069d2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2134      	movs	r1, #52	@ 0x34
 80069dc:	fb01 f303 	mul.w	r3, r1, r3
 80069e0:	4413      	add	r3, r2
 80069e2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	4614      	mov	r4, r2
 80069ea:	461d      	mov	r5, r3
 80069ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f811 	bl	8006a28 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bdb0      	pop	{r4, r5, r7, pc}

08006a28 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b089      	sub	sp, #36	@ 0x24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	0c1b      	lsrs	r3, r3, #16
 8006a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a44:	4413      	add	r3, r2
 8006a46:	041b      	lsls	r3, r3, #16
 8006a48:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	01db      	lsls	r3, r3, #7
 8006a54:	4413      	add	r3, r2
 8006a56:	3384      	adds	r3, #132	@ 0x84
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	6812      	ldr	r2, [r2, #0]
 8006a5e:	4611      	mov	r1, r2
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	01d2      	lsls	r2, r2, #7
 8006a64:	440a      	add	r2, r1
 8006a66:	3284      	adds	r2, #132	@ 0x84
 8006a68:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8006a6c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	0c1b      	lsrs	r3, r3, #16
 8006a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a7e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a80:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4619      	mov	r1, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	01db      	lsls	r3, r3, #7
 8006a8c:	440b      	add	r3, r1
 8006a8e:	3384      	adds	r3, #132	@ 0x84
 8006a90:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a96:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006aa6:	4413      	add	r3, r2
 8006aa8:	041b      	lsls	r3, r3, #16
 8006aaa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	01db      	lsls	r3, r3, #7
 8006ab6:	4413      	add	r3, r2
 8006ab8:	3384      	adds	r3, #132	@ 0x84
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	6812      	ldr	r2, [r2, #0]
 8006ac0:	4611      	mov	r1, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	01d2      	lsls	r2, r2, #7
 8006ac6:	440a      	add	r2, r1
 8006ac8:	3284      	adds	r2, #132	@ 0x84
 8006aca:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8006ace:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ade:	4413      	add	r3, r2
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	01db      	lsls	r3, r3, #7
 8006aec:	440b      	add	r3, r1
 8006aee:	3384      	adds	r3, #132	@ 0x84
 8006af0:	4619      	mov	r1, r3
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	01db      	lsls	r3, r3, #7
 8006b02:	4413      	add	r3, r2
 8006b04:	3384      	adds	r3, #132	@ 0x84
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	6812      	ldr	r2, [r2, #0]
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	01d2      	lsls	r2, r2, #7
 8006b12:	440a      	add	r2, r1
 8006b14:	3284      	adds	r2, #132	@ 0x84
 8006b16:	f023 0307 	bic.w	r3, r3, #7
 8006b1a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	461a      	mov	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	01db      	lsls	r3, r3, #7
 8006b26:	4413      	add	r3, r2
 8006b28:	3384      	adds	r3, #132	@ 0x84
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006b42:	041b      	lsls	r3, r3, #16
 8006b44:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	061b      	lsls	r3, r3, #24
 8006b4c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	01db      	lsls	r3, r3, #7
 8006b58:	4413      	add	r3, r2
 8006b5a:	3384      	adds	r3, #132	@ 0x84
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	461a      	mov	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	01db      	lsls	r3, r3, #7
 8006b68:	4413      	add	r3, r2
 8006b6a:	3384      	adds	r3, #132	@ 0x84
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	2300      	movs	r3, #0
 8006b70:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006b78:	461a      	mov	r2, r3
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	431a      	orrs	r2, r3
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	431a      	orrs	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4619      	mov	r1, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	01db      	lsls	r3, r3, #7
 8006b8c:	440b      	add	r3, r1
 8006b8e:	3384      	adds	r3, #132	@ 0x84
 8006b90:	4619      	mov	r1, r3
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	01db      	lsls	r3, r3, #7
 8006ba2:	4413      	add	r3, r2
 8006ba4:	3384      	adds	r3, #132	@ 0x84
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	6812      	ldr	r2, [r2, #0]
 8006bac:	4611      	mov	r1, r2
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	01d2      	lsls	r2, r2, #7
 8006bb2:	440a      	add	r2, r1
 8006bb4:	3284      	adds	r2, #132	@ 0x84
 8006bb6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006bba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	01db      	lsls	r3, r3, #7
 8006bc6:	4413      	add	r3, r2
 8006bc8:	3384      	adds	r3, #132	@ 0x84
 8006bca:	461a      	mov	r2, r3
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	01db      	lsls	r3, r3, #7
 8006bdc:	4413      	add	r3, r2
 8006bde:	3384      	adds	r3, #132	@ 0x84
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	6812      	ldr	r2, [r2, #0]
 8006be6:	4611      	mov	r1, r2
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	01d2      	lsls	r2, r2, #7
 8006bec:	440a      	add	r2, r1
 8006bee:	3284      	adds	r2, #132	@ 0x84
 8006bf0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006bf4:	f023 0307 	bic.w	r3, r3, #7
 8006bf8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	69da      	ldr	r2, [r3, #28]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	68f9      	ldr	r1, [r7, #12]
 8006c04:	6809      	ldr	r1, [r1, #0]
 8006c06:	4608      	mov	r0, r1
 8006c08:	6879      	ldr	r1, [r7, #4]
 8006c0a:	01c9      	lsls	r1, r1, #7
 8006c0c:	4401      	add	r1, r0
 8006c0e:	3184      	adds	r1, #132	@ 0x84
 8006c10:	4313      	orrs	r3, r2
 8006c12:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	01db      	lsls	r3, r3, #7
 8006c1e:	4413      	add	r3, r2
 8006c20:	3384      	adds	r3, #132	@ 0x84
 8006c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	01db      	lsls	r3, r3, #7
 8006c2e:	4413      	add	r3, r2
 8006c30:	3384      	adds	r3, #132	@ 0x84
 8006c32:	461a      	mov	r2, r3
 8006c34:	2300      	movs	r3, #0
 8006c36:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	01db      	lsls	r3, r3, #7
 8006c42:	4413      	add	r3, r2
 8006c44:	3384      	adds	r3, #132	@ 0x84
 8006c46:	461a      	mov	r2, r3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d102      	bne.n	8006c5c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006c56:	2304      	movs	r3, #4
 8006c58:	61fb      	str	r3, [r7, #28]
 8006c5a:	e01b      	b.n	8006c94 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d102      	bne.n	8006c6a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006c64:	2303      	movs	r3, #3
 8006c66:	61fb      	str	r3, [r7, #28]
 8006c68:	e014      	b.n	8006c94 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d00b      	beq.n	8006c8a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d007      	beq.n	8006c8a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d003      	beq.n	8006c8a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c86:	2b07      	cmp	r3, #7
 8006c88:	d102      	bne.n	8006c90 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	61fb      	str	r3, [r7, #28]
 8006c8e:	e001      	b.n	8006c94 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006c90:	2301      	movs	r3, #1
 8006c92:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	01db      	lsls	r3, r3, #7
 8006c9e:	4413      	add	r3, r2
 8006ca0:	3384      	adds	r3, #132	@ 0x84
 8006ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	6812      	ldr	r2, [r2, #0]
 8006ca8:	4611      	mov	r1, r2
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	01d2      	lsls	r2, r2, #7
 8006cae:	440a      	add	r2, r1
 8006cb0:	3284      	adds	r2, #132	@ 0x84
 8006cb2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbc:	69fa      	ldr	r2, [r7, #28]
 8006cbe:	fb02 f303 	mul.w	r3, r2, r3
 8006cc2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	6859      	ldr	r1, [r3, #4]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	1acb      	subs	r3, r1, r3
 8006cce:	69f9      	ldr	r1, [r7, #28]
 8006cd0:	fb01 f303 	mul.w	r3, r1, r3
 8006cd4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006cd6:	68f9      	ldr	r1, [r7, #12]
 8006cd8:	6809      	ldr	r1, [r1, #0]
 8006cda:	4608      	mov	r0, r1
 8006cdc:	6879      	ldr	r1, [r7, #4]
 8006cde:	01c9      	lsls	r1, r1, #7
 8006ce0:	4401      	add	r1, r0
 8006ce2:	3184      	adds	r1, #132	@ 0x84
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	461a      	mov	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	01db      	lsls	r3, r3, #7
 8006cf2:	4413      	add	r3, r2
 8006cf4:	3384      	adds	r3, #132	@ 0x84
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	6812      	ldr	r2, [r2, #0]
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	01d2      	lsls	r2, r2, #7
 8006d02:	440a      	add	r2, r1
 8006d04:	3284      	adds	r2, #132	@ 0x84
 8006d06:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006d0a:	f023 0307 	bic.w	r3, r3, #7
 8006d0e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	461a      	mov	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	01db      	lsls	r3, r3, #7
 8006d1a:	4413      	add	r3, r2
 8006d1c:	3384      	adds	r3, #132	@ 0x84
 8006d1e:	461a      	mov	r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d24:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	01db      	lsls	r3, r3, #7
 8006d30:	4413      	add	r3, r2
 8006d32:	3384      	adds	r3, #132	@ 0x84
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	6812      	ldr	r2, [r2, #0]
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	01d2      	lsls	r2, r2, #7
 8006d40:	440a      	add	r2, r1
 8006d42:	3284      	adds	r2, #132	@ 0x84
 8006d44:	f043 0301 	orr.w	r3, r3, #1
 8006d48:	6013      	str	r3, [r2, #0]
}
 8006d4a:	bf00      	nop
 8006d4c:	3724      	adds	r7, #36	@ 0x24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
	...

08006d58 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d102      	bne.n	8006d70 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	73fb      	strb	r3, [r7, #15]
 8006d6e:	e141      	b.n	8006ff4 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 f947 	bl	8007008 <MDF_GetHandleNumberFromInstance>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	4a86      	ldr	r2, [pc, #536]	@ (8006f98 <HAL_MDF_Init+0x240>)
 8006d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d002      	beq.n	8006d8c <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	73fb      	strb	r3, [r7, #15]
 8006d8a:	e133      	b.n	8006ff4 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7fb fc6b 	bl	8002668 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8006d92:	4b82      	ldr	r3, [pc, #520]	@ (8006f9c <HAL_MDF_Init+0x244>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d11d      	bne.n	8006dd6 <HAL_MDF_Init+0x7e>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a80      	ldr	r2, [pc, #512]	@ (8006fa0 <HAL_MDF_Init+0x248>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d023      	beq.n	8006dec <HAL_MDF_Init+0x94>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a7e      	ldr	r2, [pc, #504]	@ (8006fa4 <HAL_MDF_Init+0x24c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d01e      	beq.n	8006dec <HAL_MDF_Init+0x94>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a7d      	ldr	r2, [pc, #500]	@ (8006fa8 <HAL_MDF_Init+0x250>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d019      	beq.n	8006dec <HAL_MDF_Init+0x94>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a7b      	ldr	r2, [pc, #492]	@ (8006fac <HAL_MDF_Init+0x254>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d014      	beq.n	8006dec <HAL_MDF_Init+0x94>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a7a      	ldr	r2, [pc, #488]	@ (8006fb0 <HAL_MDF_Init+0x258>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d00f      	beq.n	8006dec <HAL_MDF_Init+0x94>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a78      	ldr	r2, [pc, #480]	@ (8006fb4 <HAL_MDF_Init+0x25c>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d00a      	beq.n	8006dec <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8006dd6:	4b78      	ldr	r3, [pc, #480]	@ (8006fb8 <HAL_MDF_Init+0x260>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f040 8090 	bne.w	8006f00 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a75      	ldr	r2, [pc, #468]	@ (8006fbc <HAL_MDF_Init+0x264>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	f040 808a 	bne.w	8006f00 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a72      	ldr	r2, [pc, #456]	@ (8006fbc <HAL_MDF_Init+0x264>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d101      	bne.n	8006dfa <HAL_MDF_Init+0xa2>
 8006df6:	4b72      	ldr	r3, [pc, #456]	@ (8006fc0 <HAL_MDF_Init+0x268>)
 8006df8:	e000      	b.n	8006dfc <HAL_MDF_Init+0xa4>
 8006dfa:	4b72      	ldr	r3, [pc, #456]	@ (8006fc4 <HAL_MDF_Init+0x26c>)
 8006dfc:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	da02      	bge.n	8006e0c <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	73fb      	strb	r3, [r7, #15]
 8006e0a:	e079      	b.n	8006f00 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a63      	ldr	r2, [pc, #396]	@ (8006fa0 <HAL_MDF_Init+0x248>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d018      	beq.n	8006e48 <HAL_MDF_Init+0xf0>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a62      	ldr	r2, [pc, #392]	@ (8006fa4 <HAL_MDF_Init+0x24c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d013      	beq.n	8006e48 <HAL_MDF_Init+0xf0>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a60      	ldr	r2, [pc, #384]	@ (8006fa8 <HAL_MDF_Init+0x250>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00e      	beq.n	8006e48 <HAL_MDF_Init+0xf0>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a5f      	ldr	r2, [pc, #380]	@ (8006fac <HAL_MDF_Init+0x254>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d009      	beq.n	8006e48 <HAL_MDF_Init+0xf0>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a5d      	ldr	r2, [pc, #372]	@ (8006fb0 <HAL_MDF_Init+0x258>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d004      	beq.n	8006e48 <HAL_MDF_Init+0xf0>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a5c      	ldr	r2, [pc, #368]	@ (8006fb4 <HAL_MDF_Init+0x25c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d10d      	bne.n	8006e64 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	011b      	lsls	r3, r3, #4
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2200      	movs	r2, #0
 8006e68:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	061b      	lsls	r3, r3, #24
 8006e76:	431a      	orrs	r2, r3
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	7b1b      	ldrb	r3, [r3, #12]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d137      	bne.n	8006ef4 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006e94:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8006e9c:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	7e1b      	ldrb	r3, [r3, #24]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d123      	bne.n	8006ef4 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a3b      	ldr	r2, [pc, #236]	@ (8006fa0 <HAL_MDF_Init+0x248>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d012      	beq.n	8006edc <HAL_MDF_Init+0x184>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a3a      	ldr	r2, [pc, #232]	@ (8006fa4 <HAL_MDF_Init+0x24c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00d      	beq.n	8006edc <HAL_MDF_Init+0x184>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a38      	ldr	r2, [pc, #224]	@ (8006fa8 <HAL_MDF_Init+0x250>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d008      	beq.n	8006edc <HAL_MDF_Init+0x184>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a37      	ldr	r2, [pc, #220]	@ (8006fac <HAL_MDF_Init+0x254>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d003      	beq.n	8006edc <HAL_MDF_Init+0x184>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a35      	ldr	r2, [pc, #212]	@ (8006fb0 <HAL_MDF_Init+0x258>)
 8006eda:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006ee8:	430b      	orrs	r3, r1
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f043 0210 	orr.w	r2, r3, #16
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f043 0201 	orr.w	r2, r3, #1
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d128      	bne.n	8006f58 <HAL_MDF_Init+0x200>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d123      	bne.n	8006f58 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	da02      	bge.n	8006f20 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	73fb      	strb	r3, [r7, #15]
 8006f1e:	e01b      	b.n	8006f58 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2200      	movs	r2, #0
 8006f26:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6819      	ldr	r1, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f32:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8006f38:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3e:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f042 0201 	orr.w	r2, r2, #1
 8006f56:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d14a      	bne.n	8006ff4 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 021f 	bic.w	r2, r2, #31
 8006f6c:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6859      	ldr	r1, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a0d      	ldr	r2, [pc, #52]	@ (8006fbc <HAL_MDF_Init+0x264>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d11e      	bne.n	8006fc8 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8006f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb8 <HAL_MDF_Init+0x260>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	4a09      	ldr	r2, [pc, #36]	@ (8006fb8 <HAL_MDF_Init+0x260>)
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	e01d      	b.n	8006fd2 <HAL_MDF_Init+0x27a>
 8006f96:	bf00      	nop
 8006f98:	20000838 	.word	0x20000838
 8006f9c:	20000830 	.word	0x20000830
 8006fa0:	40025080 	.word	0x40025080
 8006fa4:	40025100 	.word	0x40025100
 8006fa8:	40025180 	.word	0x40025180
 8006fac:	40025200 	.word	0x40025200
 8006fb0:	40025280 	.word	0x40025280
 8006fb4:	40025300 	.word	0x40025300
 8006fb8:	20000834 	.word	0x20000834
 8006fbc:	46024080 	.word	0x46024080
 8006fc0:	46024000 	.word	0x46024000
 8006fc4:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8006fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8007000 <HAL_MDF_Init+0x2a8>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	4a0c      	ldr	r2, [pc, #48]	@ (8007000 <HAL_MDF_Init+0x2a8>)
 8006fd0:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 f816 	bl	8007008 <MDF_GetHandleNumberFromInstance>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	4909      	ldr	r1, [pc, #36]	@ (8007004 <HAL_MDF_Init+0x2ac>)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	641a      	str	r2, [r3, #64]	@ 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	20000830 	.word	0x20000830
 8007004:	20000838 	.word	0x20000838

08007008 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a19      	ldr	r2, [pc, #100]	@ (8007078 <MDF_GetHandleNumberFromInstance+0x70>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d102      	bne.n	800701e <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	e024      	b.n	8007068 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a16      	ldr	r2, [pc, #88]	@ (800707c <MDF_GetHandleNumberFromInstance+0x74>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d102      	bne.n	800702c <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8007026:	2301      	movs	r3, #1
 8007028:	60fb      	str	r3, [r7, #12]
 800702a:	e01d      	b.n	8007068 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a14      	ldr	r2, [pc, #80]	@ (8007080 <MDF_GetHandleNumberFromInstance+0x78>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d102      	bne.n	800703a <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8007034:	2302      	movs	r3, #2
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	e016      	b.n	8007068 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a11      	ldr	r2, [pc, #68]	@ (8007084 <MDF_GetHandleNumberFromInstance+0x7c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d102      	bne.n	8007048 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8007042:	2303      	movs	r3, #3
 8007044:	60fb      	str	r3, [r7, #12]
 8007046:	e00f      	b.n	8007068 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a0f      	ldr	r2, [pc, #60]	@ (8007088 <MDF_GetHandleNumberFromInstance+0x80>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d102      	bne.n	8007056 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8007050:	2304      	movs	r3, #4
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	e008      	b.n	8007068 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a0c      	ldr	r2, [pc, #48]	@ (800708c <MDF_GetHandleNumberFromInstance+0x84>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d102      	bne.n	8007064 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 800705e:	2305      	movs	r3, #5
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	e001      	b.n	8007068 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8007064:	2306      	movs	r3, #6
 8007066:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8007068:	68fb      	ldr	r3, [r7, #12]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	40025080 	.word	0x40025080
 800707c:	40025100 	.word	0x40025100
 8007080:	40025180 	.word	0x40025180
 8007084:	40025200 	.word	0x40025200
 8007088:	40025280 	.word	0x40025280
 800708c:	40025300 	.word	0x40025300

08007090 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f043 0201 	orr.w	r2, r3, #1
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	601a      	str	r2, [r3, #0]
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af02      	add	r7, sp, #8
 80070b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80070bc:	f7fc fd20 	bl	8003b00 <HAL_GetTick>
 80070c0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d102      	bne.n	80070ce <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	73fb      	strb	r3, [r7, #15]
 80070cc:	e0a5      	b.n	800721a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f040 809e 	bne.w	800721a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7fc f8ae 	bl	8003240 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80070e4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f951 	bl	8007390 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	4b4b      	ldr	r3, [pc, #300]	@ (8007224 <HAL_OSPI_Init+0x174>)
 80070f6:	4013      	ands	r3, r2
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	68d1      	ldr	r1, [r2, #12]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	6912      	ldr	r2, [r2, #16]
 8007100:	3a01      	subs	r2, #1
 8007102:	0412      	lsls	r2, r2, #16
 8007104:	4311      	orrs	r1, r2
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	6952      	ldr	r2, [r2, #20]
 800710a:	3a01      	subs	r2, #1
 800710c:	0212      	lsls	r2, r2, #8
 800710e:	4311      	orrs	r1, r2
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007114:	4311      	orrs	r1, r2
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	69d2      	ldr	r2, [r2, #28]
 800711a:	4311      	orrs	r1, r2
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6812      	ldr	r2, [r2, #0]
 8007120:	430b      	orrs	r3, r1
 8007122:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1a      	ldr	r2, [r3, #32]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800713e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007154:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	3b01      	subs	r3, #1
 8007166:	021a      	lsls	r2, r3, #8
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2200      	movs	r2, #0
 800717a:	2120      	movs	r1, #32
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fe09 	bl	8007d94 <OSPI_WaitFlagStateUntilTimeout>
 8007182:	4603      	mov	r3, r0
 8007184:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d146      	bne.n	800721a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719a:	1e5a      	subs	r2, r3, #1
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	689a      	ldr	r2, [r3, #8]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80071c2:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f042 0201 	orr.w	r2, r2, #1
 80071e8:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d107      	bne.n	8007202 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 0202 	orr.w	r2, r2, #2
 8007200:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800720a:	d103      	bne.n	8007214 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	651a      	str	r2, [r3, #80]	@ 0x50
 8007212:	e002      	b.n	800721a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2202      	movs	r2, #2
 8007218:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800721a:	7bfb      	ldrb	r3, [r7, #15]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	f8e0c0f4 	.word	0xf8e0c0f4

08007228 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08a      	sub	sp, #40	@ 0x28
 800722c:	af02      	add	r7, sp, #8
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8007234:	f7fc fc64 	bl	8003b00 <HAL_GetTick>
 8007238:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800723e:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d002      	beq.n	800724c <HAL_OSPI_HyperbusCfg+0x24>
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b02      	cmp	r3, #2
 800724a:	d122      	bne.n	8007292 <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	2200      	movs	r2, #0
 8007254:	2120      	movs	r1, #32
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 fd9c 	bl	8007d94 <OSPI_WaitFlagStateUntilTimeout>
 800725c:	4603      	mov	r3, r0
 800725e:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8007260:	7ffb      	ldrb	r3, [r7, #31]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d11a      	bne.n	800729c <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	041a      	lsls	r2, r3, #16
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	021b      	lsls	r3, r3, #8
 8007272:	431a      	orrs	r2, r3
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	ea42 0103 	orr.w	r1, r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	68da      	ldr	r2, [r3, #12]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2202      	movs	r2, #2
 800728e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8007290:	e004      	b.n	800729c <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2210      	movs	r2, #16
 800729a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 800729c:	7ffb      	ldrb	r3, [r7, #31]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3720      	adds	r7, #32
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b088      	sub	sp, #32
 80072aa:	af02      	add	r7, sp, #8
 80072ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80072b2:	f7fc fc25 	bl	8003b00 <HAL_GetTick>
 80072b6:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072bc:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f003 0308 	and.w	r3, r3, #8
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d104      	bne.n	80072d2 <HAL_OSPI_Abort+0x2c>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f003 0304 	and.w	r3, r3, #4
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d052      	beq.n	8007378 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0304 	and.w	r3, r3, #4
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d014      	beq.n	800730a <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0204 	bic.w	r2, r2, #4
 80072ee:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fc feb0 	bl	800405a <HAL_DMA_Abort>
 80072fa:	4603      	mov	r3, r0
 80072fc:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2204      	movs	r2, #4
 8007308:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	f003 0320 	and.w	r3, r3, #32
 8007314:	2b00      	cmp	r3, #0
 8007316:	d02b      	beq.n	8007370 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0202 	orr.w	r2, r2, #2
 8007326:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	2201      	movs	r2, #1
 8007332:	2102      	movs	r1, #2
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fd2d 	bl	8007d94 <OSPI_WaitFlagStateUntilTimeout>
 800733a:	4603      	mov	r3, r0
 800733c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800733e:	7dfb      	ldrb	r3, [r7, #23]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d11f      	bne.n	8007384 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2202      	movs	r2, #2
 800734a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	2200      	movs	r2, #0
 8007356:	2120      	movs	r1, #32
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fd1b 	bl	8007d94 <OSPI_WaitFlagStateUntilTimeout>
 800735e:	4603      	mov	r3, r0
 8007360:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8007362:	7dfb      	ldrb	r3, [r7, #23]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10d      	bne.n	8007384 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800736e:	e009      	b.n	8007384 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2202      	movs	r2, #2
 8007374:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007376:	e005      	b.n	8007384 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2210      	movs	r2, #16
 8007380:	655a      	str	r2, [r3, #84]	@ 0x54
 8007382:	e000      	b.n	8007386 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007384:	bf00      	nop
  }

  /* Return function status */
  return status;
 8007386:	7dfb      	ldrb	r3, [r7, #23]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
	...

080073b0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b094      	sub	sp, #80	@ 0x50
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a9d      	ldr	r2, [pc, #628]	@ (8007644 <HAL_OSPIM_Config+0x294>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d105      	bne.n	80073de <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 80073d6:	2301      	movs	r3, #1
 80073d8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80073dc:	e004      	b.n	80073e8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80073de:	2301      	movs	r3, #1
 80073e0:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80073e8:	2300      	movs	r3, #0
 80073ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80073ee:	e01d      	b.n	800742c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80073f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80073f4:	3301      	adds	r3, #1
 80073f6:	b2d8      	uxtb	r0, r3
 80073f8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80073fc:	f107 0114 	add.w	r1, r7, #20
 8007400:	4613      	mov	r3, r2
 8007402:	005b      	lsls	r3, r3, #1
 8007404:	4413      	add	r3, r2
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	440b      	add	r3, r1
 800740a:	4619      	mov	r1, r3
 800740c:	f000 fd02 	bl	8007e14 <OSPIM_GetConfig>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d005      	beq.n	8007422 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2208      	movs	r2, #8
 8007420:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007422:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007426:	3301      	adds	r3, #1
 8007428:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800742c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007430:	2b01      	cmp	r3, #1
 8007432:	d9dd      	bls.n	80073f0 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8007434:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007438:	2b00      	cmp	r3, #0
 800743a:	f040 849e 	bne.w	8007d7a <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800743e:	4b81      	ldr	r3, [pc, #516]	@ (8007644 <HAL_OSPIM_Config+0x294>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00b      	beq.n	8007462 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800744a:	4b7e      	ldr	r3, [pc, #504]	@ (8007644 <HAL_OSPIM_Config+0x294>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a7d      	ldr	r2, [pc, #500]	@ (8007644 <HAL_OSPIM_Config+0x294>)
 8007450:	f023 0301 	bic.w	r3, r3, #1
 8007454:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8007456:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800745a:	f043 0301 	orr.w	r3, r3, #1
 800745e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8007462:	4b79      	ldr	r3, [pc, #484]	@ (8007648 <HAL_OSPIM_Config+0x298>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00b      	beq.n	8007486 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800746e:	4b76      	ldr	r3, [pc, #472]	@ (8007648 <HAL_OSPIM_Config+0x298>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a75      	ldr	r2, [pc, #468]	@ (8007648 <HAL_OSPIM_Config+0x298>)
 8007474:	f023 0301 	bic.w	r3, r3, #1
 8007478:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800747a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800747e:	f043 0302 	orr.w	r3, r3, #2
 8007482:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8007486:	4971      	ldr	r1, [pc, #452]	@ (800764c <HAL_OSPIM_Config+0x29c>)
 8007488:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800748a:	4613      	mov	r3, r2
 800748c:	005b      	lsls	r3, r3, #1
 800748e:	4413      	add	r3, r2
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	3350      	adds	r3, #80	@ 0x50
 8007494:	443b      	add	r3, r7
 8007496:	3b34      	subs	r3, #52	@ 0x34
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3b01      	subs	r3, #1
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	440b      	add	r3, r1
 80074a0:	6859      	ldr	r1, [r3, #4]
 80074a2:	486a      	ldr	r0, [pc, #424]	@ (800764c <HAL_OSPIM_Config+0x29c>)
 80074a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074a6:	4613      	mov	r3, r2
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	4413      	add	r3, r2
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	3350      	adds	r3, #80	@ 0x50
 80074b0:	443b      	add	r3, r7
 80074b2:	3b34      	subs	r3, #52	@ 0x34
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3b01      	subs	r3, #1
 80074b8:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4403      	add	r3, r0
 80074c0:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80074c2:	4b62      	ldr	r3, [pc, #392]	@ (800764c <HAL_OSPIM_Config+0x29c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 80c0 	beq.w	8007650 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80074d0:	4b5e      	ldr	r3, [pc, #376]	@ (800764c <HAL_OSPIM_Config+0x29c>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a5d      	ldr	r2, [pc, #372]	@ (800764c <HAL_OSPIM_Config+0x29c>)
 80074d6:	f023 0301 	bic.w	r3, r3, #1
 80074da:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80074dc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	f040 8162 	bne.w	80077aa <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 80074e6:	4959      	ldr	r1, [pc, #356]	@ (800764c <HAL_OSPIM_Config+0x29c>)
 80074e8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80074ec:	4613      	mov	r3, r2
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	4413      	add	r3, r2
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	3350      	adds	r3, #80	@ 0x50
 80074f6:	443b      	add	r3, r7
 80074f8:	3b3c      	subs	r3, #60	@ 0x3c
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	440b      	add	r3, r1
 8007502:	6859      	ldr	r1, [r3, #4]
 8007504:	4851      	ldr	r0, [pc, #324]	@ (800764c <HAL_OSPIM_Config+0x29c>)
 8007506:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800750a:	4613      	mov	r3, r2
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	4413      	add	r3, r2
 8007510:	00db      	lsls	r3, r3, #3
 8007512:	3350      	adds	r3, #80	@ 0x50
 8007514:	443b      	add	r3, r7
 8007516:	3b3c      	subs	r3, #60	@ 0x3c
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3b01      	subs	r3, #1
 800751c:	f041 0202 	orr.w	r2, r1, #2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4403      	add	r3, r0
 8007524:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007526:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800752a:	4613      	mov	r3, r2
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	4413      	add	r3, r2
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	3350      	adds	r3, #80	@ 0x50
 8007534:	443b      	add	r3, r7
 8007536:	3b38      	subs	r3, #56	@ 0x38
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d01f      	beq.n	800757e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800753e:	4943      	ldr	r1, [pc, #268]	@ (800764c <HAL_OSPIM_Config+0x29c>)
 8007540:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007544:	4613      	mov	r3, r2
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	4413      	add	r3, r2
 800754a:	00db      	lsls	r3, r3, #3
 800754c:	3350      	adds	r3, #80	@ 0x50
 800754e:	443b      	add	r3, r7
 8007550:	3b38      	subs	r3, #56	@ 0x38
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3b01      	subs	r3, #1
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	440b      	add	r3, r1
 800755a:	6859      	ldr	r1, [r3, #4]
 800755c:	483b      	ldr	r0, [pc, #236]	@ (800764c <HAL_OSPIM_Config+0x29c>)
 800755e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007562:	4613      	mov	r3, r2
 8007564:	005b      	lsls	r3, r3, #1
 8007566:	4413      	add	r3, r2
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	3350      	adds	r3, #80	@ 0x50
 800756c:	443b      	add	r3, r7
 800756e:	3b38      	subs	r3, #56	@ 0x38
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3b01      	subs	r3, #1
 8007574:	f041 0220 	orr.w	r2, r1, #32
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4403      	add	r3, r0
 800757c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800757e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007582:	4613      	mov	r3, r2
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	4413      	add	r3, r2
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	3350      	adds	r3, #80	@ 0x50
 800758c:	443b      	add	r3, r7
 800758e:	3b30      	subs	r3, #48	@ 0x30
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d023      	beq.n	80075de <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8007596:	492d      	ldr	r1, [pc, #180]	@ (800764c <HAL_OSPIM_Config+0x29c>)
 8007598:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800759c:	4613      	mov	r3, r2
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	4413      	add	r3, r2
 80075a2:	00db      	lsls	r3, r3, #3
 80075a4:	3350      	adds	r3, #80	@ 0x50
 80075a6:	443b      	add	r3, r7
 80075a8:	3b30      	subs	r3, #48	@ 0x30
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	440b      	add	r3, r1
 80075b6:	6859      	ldr	r1, [r3, #4]
 80075b8:	4824      	ldr	r0, [pc, #144]	@ (800764c <HAL_OSPIM_Config+0x29c>)
 80075ba:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80075be:	4613      	mov	r3, r2
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	4413      	add	r3, r2
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	3350      	adds	r3, #80	@ 0x50
 80075c8:	443b      	add	r3, r7
 80075ca:	3b30      	subs	r3, #48	@ 0x30
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4403      	add	r3, r0
 80075dc:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80075de:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80075e2:	4613      	mov	r3, r2
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	4413      	add	r3, r2
 80075e8:	00db      	lsls	r3, r3, #3
 80075ea:	3350      	adds	r3, #80	@ 0x50
 80075ec:	443b      	add	r3, r7
 80075ee:	3b2c      	subs	r3, #44	@ 0x2c
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 80d9 	beq.w	80077aa <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80075f8:	4914      	ldr	r1, [pc, #80]	@ (800764c <HAL_OSPIM_Config+0x29c>)
 80075fa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80075fe:	4613      	mov	r3, r2
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	4413      	add	r3, r2
 8007604:	00db      	lsls	r3, r3, #3
 8007606:	3350      	adds	r3, #80	@ 0x50
 8007608:	443b      	add	r3, r7
 800760a:	3b2c      	subs	r3, #44	@ 0x2c
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3b01      	subs	r3, #1
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	440b      	add	r3, r1
 8007618:	6859      	ldr	r1, [r3, #4]
 800761a:	480c      	ldr	r0, [pc, #48]	@ (800764c <HAL_OSPIM_Config+0x29c>)
 800761c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007620:	4613      	mov	r3, r2
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	4413      	add	r3, r2
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	3350      	adds	r3, #80	@ 0x50
 800762a:	443b      	add	r3, r7
 800762c:	3b2c      	subs	r3, #44	@ 0x2c
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3b01      	subs	r3, #1
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4403      	add	r3, r0
 800763e:	605a      	str	r2, [r3, #4]
 8007640:	e0b3      	b.n	80077aa <HAL_OSPIM_Config+0x3fa>
 8007642:	bf00      	nop
 8007644:	420d1400 	.word	0x420d1400
 8007648:	420d2400 	.word	0x420d2400
 800764c:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8007650:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007652:	4613      	mov	r3, r2
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	4413      	add	r3, r2
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	3350      	adds	r3, #80	@ 0x50
 800765c:	443b      	add	r3, r7
 800765e:	3b3c      	subs	r3, #60	@ 0x3c
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 80a1 	beq.w	80077aa <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8007668:	4993      	ldr	r1, [pc, #588]	@ (80078b8 <HAL_OSPIM_Config+0x508>)
 800766a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800766c:	4613      	mov	r3, r2
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	4413      	add	r3, r2
 8007672:	00db      	lsls	r3, r3, #3
 8007674:	3350      	adds	r3, #80	@ 0x50
 8007676:	443b      	add	r3, r7
 8007678:	3b3c      	subs	r3, #60	@ 0x3c
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3b01      	subs	r3, #1
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	440b      	add	r3, r1
 8007682:	6859      	ldr	r1, [r3, #4]
 8007684:	488c      	ldr	r0, [pc, #560]	@ (80078b8 <HAL_OSPIM_Config+0x508>)
 8007686:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007688:	4613      	mov	r3, r2
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	4413      	add	r3, r2
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	3350      	adds	r3, #80	@ 0x50
 8007692:	443b      	add	r3, r7
 8007694:	3b3c      	subs	r3, #60	@ 0x3c
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	3b01      	subs	r3, #1
 800769a:	f021 0201 	bic.w	r2, r1, #1
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4403      	add	r3, r0
 80076a2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80076a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076a6:	4613      	mov	r3, r2
 80076a8:	005b      	lsls	r3, r3, #1
 80076aa:	4413      	add	r3, r2
 80076ac:	00db      	lsls	r3, r3, #3
 80076ae:	3350      	adds	r3, #80	@ 0x50
 80076b0:	443b      	add	r3, r7
 80076b2:	3b38      	subs	r3, #56	@ 0x38
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d01d      	beq.n	80076f6 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80076ba:	497f      	ldr	r1, [pc, #508]	@ (80078b8 <HAL_OSPIM_Config+0x508>)
 80076bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076be:	4613      	mov	r3, r2
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	4413      	add	r3, r2
 80076c4:	00db      	lsls	r3, r3, #3
 80076c6:	3350      	adds	r3, #80	@ 0x50
 80076c8:	443b      	add	r3, r7
 80076ca:	3b38      	subs	r3, #56	@ 0x38
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3b01      	subs	r3, #1
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	440b      	add	r3, r1
 80076d4:	6859      	ldr	r1, [r3, #4]
 80076d6:	4878      	ldr	r0, [pc, #480]	@ (80078b8 <HAL_OSPIM_Config+0x508>)
 80076d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076da:	4613      	mov	r3, r2
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	4413      	add	r3, r2
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	3350      	adds	r3, #80	@ 0x50
 80076e4:	443b      	add	r3, r7
 80076e6:	3b38      	subs	r3, #56	@ 0x38
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	f021 0210 	bic.w	r2, r1, #16
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4403      	add	r3, r0
 80076f4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80076f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076f8:	4613      	mov	r3, r2
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	4413      	add	r3, r2
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	3350      	adds	r3, #80	@ 0x50
 8007702:	443b      	add	r3, r7
 8007704:	3b30      	subs	r3, #48	@ 0x30
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d021      	beq.n	8007750 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800770c:	496a      	ldr	r1, [pc, #424]	@ (80078b8 <HAL_OSPIM_Config+0x508>)
 800770e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007710:	4613      	mov	r3, r2
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	4413      	add	r3, r2
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	3350      	adds	r3, #80	@ 0x50
 800771a:	443b      	add	r3, r7
 800771c:	3b30      	subs	r3, #48	@ 0x30
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3b01      	subs	r3, #1
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	440b      	add	r3, r1
 800772a:	6859      	ldr	r1, [r3, #4]
 800772c:	4862      	ldr	r0, [pc, #392]	@ (80078b8 <HAL_OSPIM_Config+0x508>)
 800772e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007730:	4613      	mov	r3, r2
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	4413      	add	r3, r2
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	3350      	adds	r3, #80	@ 0x50
 800773a:	443b      	add	r3, r7
 800773c:	3b30      	subs	r3, #48	@ 0x30
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3b01      	subs	r3, #1
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4403      	add	r3, r0
 800774e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007750:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007752:	4613      	mov	r3, r2
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	4413      	add	r3, r2
 8007758:	00db      	lsls	r3, r3, #3
 800775a:	3350      	adds	r3, #80	@ 0x50
 800775c:	443b      	add	r3, r7
 800775e:	3b2c      	subs	r3, #44	@ 0x2c
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d021      	beq.n	80077aa <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8007766:	4954      	ldr	r1, [pc, #336]	@ (80078b8 <HAL_OSPIM_Config+0x508>)
 8007768:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800776a:	4613      	mov	r3, r2
 800776c:	005b      	lsls	r3, r3, #1
 800776e:	4413      	add	r3, r2
 8007770:	00db      	lsls	r3, r3, #3
 8007772:	3350      	adds	r3, #80	@ 0x50
 8007774:	443b      	add	r3, r7
 8007776:	3b2c      	subs	r3, #44	@ 0x2c
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3b01      	subs	r3, #1
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	440b      	add	r3, r1
 8007784:	6859      	ldr	r1, [r3, #4]
 8007786:	484c      	ldr	r0, [pc, #304]	@ (80078b8 <HAL_OSPIM_Config+0x508>)
 8007788:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800778a:	4613      	mov	r3, r2
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	4413      	add	r3, r2
 8007790:	00db      	lsls	r3, r3, #3
 8007792:	3350      	adds	r3, #80	@ 0x50
 8007794:	443b      	add	r3, r7
 8007796:	3b2c      	subs	r3, #44	@ 0x2c
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3b01      	subs	r3, #1
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4403      	add	r3, r0
 80077a8:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	6819      	ldr	r1, [r3, #0]
 80077ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80077b2:	4613      	mov	r3, r2
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	4413      	add	r3, r2
 80077b8:	00db      	lsls	r3, r3, #3
 80077ba:	3350      	adds	r3, #80	@ 0x50
 80077bc:	443b      	add	r3, r7
 80077be:	3b3c      	subs	r3, #60	@ 0x3c
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4299      	cmp	r1, r3
 80077c4:	d038      	beq.n	8007838 <HAL_OSPIM_Config+0x488>
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	6859      	ldr	r1, [r3, #4]
 80077ca:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80077ce:	4613      	mov	r3, r2
 80077d0:	005b      	lsls	r3, r3, #1
 80077d2:	4413      	add	r3, r2
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	3350      	adds	r3, #80	@ 0x50
 80077d8:	443b      	add	r3, r7
 80077da:	3b38      	subs	r3, #56	@ 0x38
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4299      	cmp	r1, r3
 80077e0:	d02a      	beq.n	8007838 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	6899      	ldr	r1, [r3, #8]
 80077e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80077ea:	4613      	mov	r3, r2
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	4413      	add	r3, r2
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	3350      	adds	r3, #80	@ 0x50
 80077f4:	443b      	add	r3, r7
 80077f6:	3b34      	subs	r3, #52	@ 0x34
 80077f8:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80077fa:	4299      	cmp	r1, r3
 80077fc:	d01c      	beq.n	8007838 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	68d9      	ldr	r1, [r3, #12]
 8007802:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007806:	4613      	mov	r3, r2
 8007808:	005b      	lsls	r3, r3, #1
 800780a:	4413      	add	r3, r2
 800780c:	00db      	lsls	r3, r3, #3
 800780e:	3350      	adds	r3, #80	@ 0x50
 8007810:	443b      	add	r3, r7
 8007812:	3b30      	subs	r3, #48	@ 0x30
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4299      	cmp	r1, r3
 8007818:	d00e      	beq.n	8007838 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	6919      	ldr	r1, [r3, #16]
 800781e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007822:	4613      	mov	r3, r2
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	4413      	add	r3, r2
 8007828:	00db      	lsls	r3, r3, #3
 800782a:	3350      	adds	r3, #80	@ 0x50
 800782c:	443b      	add	r3, r7
 800782e:	3b2c      	subs	r3, #44	@ 0x2c
 8007830:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007832:	4299      	cmp	r1, r3
 8007834:	f040 810e 	bne.w	8007a54 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	6819      	ldr	r1, [r3, #0]
 800783c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007840:	4613      	mov	r3, r2
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	4413      	add	r3, r2
 8007846:	00db      	lsls	r3, r3, #3
 8007848:	3350      	adds	r3, #80	@ 0x50
 800784a:	443b      	add	r3, r7
 800784c:	3b3c      	subs	r3, #60	@ 0x3c
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4299      	cmp	r1, r3
 8007852:	d133      	bne.n	80078bc <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	6859      	ldr	r1, [r3, #4]
 8007858:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800785c:	4613      	mov	r3, r2
 800785e:	005b      	lsls	r3, r3, #1
 8007860:	4413      	add	r3, r2
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	3350      	adds	r3, #80	@ 0x50
 8007866:	443b      	add	r3, r7
 8007868:	3b38      	subs	r3, #56	@ 0x38
 800786a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800786c:	4299      	cmp	r1, r3
 800786e:	d125      	bne.n	80078bc <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	68d9      	ldr	r1, [r3, #12]
 8007874:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007878:	4613      	mov	r3, r2
 800787a:	005b      	lsls	r3, r3, #1
 800787c:	4413      	add	r3, r2
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	3350      	adds	r3, #80	@ 0x50
 8007882:	443b      	add	r3, r7
 8007884:	3b30      	subs	r3, #48	@ 0x30
 8007886:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007888:	4299      	cmp	r1, r3
 800788a:	d117      	bne.n	80078bc <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	6919      	ldr	r1, [r3, #16]
 8007890:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007894:	4613      	mov	r3, r2
 8007896:	005b      	lsls	r3, r3, #1
 8007898:	4413      	add	r3, r2
 800789a:	00db      	lsls	r3, r3, #3
 800789c:	3350      	adds	r3, #80	@ 0x50
 800789e:	443b      	add	r3, r7
 80078a0:	3b2c      	subs	r3, #44	@ 0x2c
 80078a2:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80078a4:	4299      	cmp	r1, r3
 80078a6:	d109      	bne.n	80078bc <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80078a8:	4b03      	ldr	r3, [pc, #12]	@ (80078b8 <HAL_OSPIM_Config+0x508>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a02      	ldr	r2, [pc, #8]	@ (80078b8 <HAL_OSPIM_Config+0x508>)
 80078ae:	f043 0301 	orr.w	r3, r3, #1
 80078b2:	6013      	str	r3, [r2, #0]
 80078b4:	e0ce      	b.n	8007a54 <HAL_OSPIM_Config+0x6a4>
 80078b6:	bf00      	nop
 80078b8:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80078bc:	49a4      	ldr	r1, [pc, #656]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 80078be:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80078c2:	4613      	mov	r3, r2
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	4413      	add	r3, r2
 80078c8:	00db      	lsls	r3, r3, #3
 80078ca:	3350      	adds	r3, #80	@ 0x50
 80078cc:	443b      	add	r3, r7
 80078ce:	3b3c      	subs	r3, #60	@ 0x3c
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	440b      	add	r3, r1
 80078d8:	6859      	ldr	r1, [r3, #4]
 80078da:	489d      	ldr	r0, [pc, #628]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 80078dc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80078e0:	4613      	mov	r3, r2
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	4413      	add	r3, r2
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	3350      	adds	r3, #80	@ 0x50
 80078ea:	443b      	add	r3, r7
 80078ec:	3b3c      	subs	r3, #60	@ 0x3c
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	f021 0201 	bic.w	r2, r1, #1
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4403      	add	r3, r0
 80078fa:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80078fc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007900:	4613      	mov	r3, r2
 8007902:	005b      	lsls	r3, r3, #1
 8007904:	4413      	add	r3, r2
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	3350      	adds	r3, #80	@ 0x50
 800790a:	443b      	add	r3, r7
 800790c:	3b38      	subs	r3, #56	@ 0x38
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d01f      	beq.n	8007954 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8007914:	498e      	ldr	r1, [pc, #568]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 8007916:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800791a:	4613      	mov	r3, r2
 800791c:	005b      	lsls	r3, r3, #1
 800791e:	4413      	add	r3, r2
 8007920:	00db      	lsls	r3, r3, #3
 8007922:	3350      	adds	r3, #80	@ 0x50
 8007924:	443b      	add	r3, r7
 8007926:	3b38      	subs	r3, #56	@ 0x38
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3b01      	subs	r3, #1
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	440b      	add	r3, r1
 8007930:	6859      	ldr	r1, [r3, #4]
 8007932:	4887      	ldr	r0, [pc, #540]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 8007934:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007938:	4613      	mov	r3, r2
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	4413      	add	r3, r2
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	3350      	adds	r3, #80	@ 0x50
 8007942:	443b      	add	r3, r7
 8007944:	3b38      	subs	r3, #56	@ 0x38
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3b01      	subs	r3, #1
 800794a:	f021 0210 	bic.w	r2, r1, #16
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4403      	add	r3, r0
 8007952:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8007954:	497e      	ldr	r1, [pc, #504]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 8007956:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800795a:	4613      	mov	r3, r2
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	4413      	add	r3, r2
 8007960:	00db      	lsls	r3, r3, #3
 8007962:	3350      	adds	r3, #80	@ 0x50
 8007964:	443b      	add	r3, r7
 8007966:	3b34      	subs	r3, #52	@ 0x34
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3b01      	subs	r3, #1
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	440b      	add	r3, r1
 8007970:	6859      	ldr	r1, [r3, #4]
 8007972:	4877      	ldr	r0, [pc, #476]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 8007974:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007978:	4613      	mov	r3, r2
 800797a:	005b      	lsls	r3, r3, #1
 800797c:	4413      	add	r3, r2
 800797e:	00db      	lsls	r3, r3, #3
 8007980:	3350      	adds	r3, #80	@ 0x50
 8007982:	443b      	add	r3, r7
 8007984:	3b34      	subs	r3, #52	@ 0x34
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3b01      	subs	r3, #1
 800798a:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4403      	add	r3, r0
 8007992:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007994:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007998:	4613      	mov	r3, r2
 800799a:	005b      	lsls	r3, r3, #1
 800799c:	4413      	add	r3, r2
 800799e:	00db      	lsls	r3, r3, #3
 80079a0:	3350      	adds	r3, #80	@ 0x50
 80079a2:	443b      	add	r3, r7
 80079a4:	3b30      	subs	r3, #48	@ 0x30
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d023      	beq.n	80079f4 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80079ac:	4968      	ldr	r1, [pc, #416]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 80079ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80079b2:	4613      	mov	r3, r2
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	4413      	add	r3, r2
 80079b8:	00db      	lsls	r3, r3, #3
 80079ba:	3350      	adds	r3, #80	@ 0x50
 80079bc:	443b      	add	r3, r7
 80079be:	3b30      	subs	r3, #48	@ 0x30
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	f003 0301 	and.w	r3, r3, #1
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	440b      	add	r3, r1
 80079cc:	6859      	ldr	r1, [r3, #4]
 80079ce:	4860      	ldr	r0, [pc, #384]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 80079d0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80079d4:	4613      	mov	r3, r2
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	4413      	add	r3, r2
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	3350      	adds	r3, #80	@ 0x50
 80079de:	443b      	add	r3, r7
 80079e0:	3b30      	subs	r3, #48	@ 0x30
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3b01      	subs	r3, #1
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4403      	add	r3, r0
 80079f2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80079f4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80079f8:	4613      	mov	r3, r2
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	4413      	add	r3, r2
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	3350      	adds	r3, #80	@ 0x50
 8007a02:	443b      	add	r3, r7
 8007a04:	3b2c      	subs	r3, #44	@ 0x2c
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d023      	beq.n	8007a54 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007a0c:	4950      	ldr	r1, [pc, #320]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 8007a0e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007a12:	4613      	mov	r3, r2
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	4413      	add	r3, r2
 8007a18:	00db      	lsls	r3, r3, #3
 8007a1a:	3350      	adds	r3, #80	@ 0x50
 8007a1c:	443b      	add	r3, r7
 8007a1e:	3b2c      	subs	r3, #44	@ 0x2c
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	440b      	add	r3, r1
 8007a2c:	6859      	ldr	r1, [r3, #4]
 8007a2e:	4848      	ldr	r0, [pc, #288]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 8007a30:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007a34:	4613      	mov	r3, r2
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	4413      	add	r3, r2
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	3350      	adds	r3, #80	@ 0x50
 8007a3e:	443b      	add	r3, r7
 8007a40:	3b2c      	subs	r3, #44	@ 0x2c
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3b01      	subs	r3, #1
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4403      	add	r3, r0
 8007a52:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8007a54:	4a3e      	ldr	r2, [pc, #248]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a68:	025b      	lsls	r3, r3, #9
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	4938      	ldr	r1, [pc, #224]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	3b01      	subs	r3, #1
 8007a74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	440b      	add	r3, r1
 8007a7c:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d018      	beq.n	8007ab8 <HAL_OSPIM_Config+0x708>
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a8e:	d813      	bhi.n	8007ab8 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	1e5a      	subs	r2, r3, #1
 8007a96:	4b2e      	ldr	r3, [pc, #184]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	0c1b      	lsrs	r3, r3, #16
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d90a      	bls.n	8007ab8 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8007aa2:	4b2b      	ldr	r3, [pc, #172]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	041b      	lsls	r3, r3, #16
 8007ab2:	4927      	ldr	r1, [pc, #156]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007ab8:	4b25      	ldr	r3, [pc, #148]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 809a 	beq.w	8007bfa <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8007ac6:	4a22      	ldr	r2, [pc, #136]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3b01      	subs	r3, #1
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f023 0203 	bic.w	r2, r3, #3
 8007ad8:	491d      	ldr	r1, [pc, #116]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	f042 0201 	orr.w	r2, r2, #1
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	440b      	add	r3, r1
 8007ae8:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d011      	beq.n	8007b16 <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8007af2:	4a17      	ldr	r2, [pc, #92]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007b04:	4912      	ldr	r1, [pc, #72]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	f042 0210 	orr.w	r2, r2, #16
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	440b      	add	r3, r1
 8007b14:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d018      	beq.n	8007b54 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007b22:	4a0b      	ldr	r2, [pc, #44]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007b38:	4905      	ldr	r1, [pc, #20]	@ (8007b50 <HAL_OSPIM_Config+0x7a0>)
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	440b      	add	r3, r1
 8007b4c:	605a      	str	r2, [r3, #4]
 8007b4e:	e01b      	b.n	8007b88 <HAL_OSPIM_Config+0x7d8>
 8007b50:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d015      	beq.n	8007b88 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007b5c:	4a8a      	ldr	r2, [pc, #552]	@ (8007d88 <HAL_OSPIM_Config+0x9d8>)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007b72:	4985      	ldr	r1, [pc, #532]	@ (8007d88 <HAL_OSPIM_Config+0x9d8>)
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	440b      	add	r3, r1
 8007b86:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d016      	beq.n	8007bc2 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007b94:	4a7c      	ldr	r2, [pc, #496]	@ (8007d88 <HAL_OSPIM_Config+0x9d8>)
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007baa:	4977      	ldr	r1, [pc, #476]	@ (8007d88 <HAL_OSPIM_Config+0x9d8>)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	605a      	str	r2, [r3, #4]
 8007bc0:	e0c3      	b.n	8007d4a <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 80bf 	beq.w	8007d4a <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007bcc:	4a6e      	ldr	r2, [pc, #440]	@ (8007d88 <HAL_OSPIM_Config+0x9d8>)
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	f003 0301 	and.w	r3, r3, #1
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007be2:	4969      	ldr	r1, [pc, #420]	@ (8007d88 <HAL_OSPIM_Config+0x9d8>)
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	440b      	add	r3, r1
 8007bf6:	605a      	str	r2, [r3, #4]
 8007bf8:	e0a7      	b.n	8007d4a <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8007bfa:	4a63      	ldr	r2, [pc, #396]	@ (8007d88 <HAL_OSPIM_Config+0x9d8>)
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3b01      	subs	r3, #1
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f023 0203 	bic.w	r2, r3, #3
 8007c0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c0e:	005b      	lsls	r3, r3, #1
 8007c10:	431a      	orrs	r2, r3
 8007c12:	495d      	ldr	r1, [pc, #372]	@ (8007d88 <HAL_OSPIM_Config+0x9d8>)
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	f042 0201 	orr.w	r2, r2, #1
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	440b      	add	r3, r1
 8007c22:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d014      	beq.n	8007c56 <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8007c2c:	4a56      	ldr	r2, [pc, #344]	@ (8007d88 <HAL_OSPIM_Config+0x9d8>)
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007c3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c40:	015b      	lsls	r3, r3, #5
 8007c42:	431a      	orrs	r2, r3
 8007c44:	4950      	ldr	r1, [pc, #320]	@ (8007d88 <HAL_OSPIM_Config+0x9d8>)
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	f042 0210 	orr.w	r2, r2, #16
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	440b      	add	r3, r1
 8007c54:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d019      	beq.n	8007c96 <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007c62:	4a49      	ldr	r2, [pc, #292]	@ (8007d88 <HAL_OSPIM_Config+0x9d8>)
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007c78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c7a:	049b      	lsls	r3, r3, #18
 8007c7c:	431a      	orrs	r2, r3
 8007c7e:	4942      	ldr	r1, [pc, #264]	@ (8007d88 <HAL_OSPIM_Config+0x9d8>)
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	440b      	add	r3, r1
 8007c92:	605a      	str	r2, [r3, #4]
 8007c94:	e01c      	b.n	8007cd0 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d018      	beq.n	8007cd0 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007c9e:	4a3a      	ldr	r2, [pc, #232]	@ (8007d88 <HAL_OSPIM_Config+0x9d8>)
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007cb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cb6:	069b      	lsls	r3, r3, #26
 8007cb8:	431a      	orrs	r2, r3
 8007cba:	4933      	ldr	r1, [pc, #204]	@ (8007d88 <HAL_OSPIM_Config+0x9d8>)
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	440b      	add	r3, r1
 8007cce:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d019      	beq.n	8007d10 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007cdc:	4a2a      	ldr	r2, [pc, #168]	@ (8007d88 <HAL_OSPIM_Config+0x9d8>)
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cf4:	049b      	lsls	r3, r3, #18
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	4923      	ldr	r1, [pc, #140]	@ (8007d88 <HAL_OSPIM_Config+0x9d8>)
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	440b      	add	r3, r1
 8007d0c:	605a      	str	r2, [r3, #4]
 8007d0e:	e01c      	b.n	8007d4a <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d018      	beq.n	8007d4a <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007d18:	4a1b      	ldr	r2, [pc, #108]	@ (8007d88 <HAL_OSPIM_Config+0x9d8>)
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d30:	069b      	lsls	r3, r3, #26
 8007d32:	431a      	orrs	r2, r3
 8007d34:	4914      	ldr	r1, [pc, #80]	@ (8007d88 <HAL_OSPIM_Config+0x9d8>)
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8007d4a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d005      	beq.n	8007d62 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007d56:	4b0d      	ldr	r3, [pc, #52]	@ (8007d8c <HAL_OSPIM_Config+0x9dc>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8007d8c <HAL_OSPIM_Config+0x9dc>)
 8007d5c:	f043 0301 	orr.w	r3, r3, #1
 8007d60:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8007d62:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d005      	beq.n	8007d7a <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007d6e:	4b08      	ldr	r3, [pc, #32]	@ (8007d90 <HAL_OSPIM_Config+0x9e0>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a07      	ldr	r2, [pc, #28]	@ (8007d90 <HAL_OSPIM_Config+0x9e0>)
 8007d74:	f043 0301 	orr.w	r3, r3, #1
 8007d78:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007d7a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3750      	adds	r7, #80	@ 0x50
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	420c4000 	.word	0x420c4000
 8007d8c:	420d1400 	.word	0x420d1400
 8007d90:	420d2400 	.word	0x420d2400

08007d94 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	603b      	str	r3, [r7, #0]
 8007da0:	4613      	mov	r3, r2
 8007da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007da4:	e022      	b.n	8007dec <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dac:	d01e      	beq.n	8007dec <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dae:	f7fb fea7 	bl	8003b00 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d302      	bcc.n	8007dc4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d113      	bne.n	8007dec <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6a1a      	ldr	r2, [r3, #32]
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	401a      	ands	r2, r3
 8007dce:	79fb      	ldrb	r3, [r7, #7]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d00b      	beq.n	8007dec <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007dda:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de0:	f043 0201 	orr.w	r2, r3, #1
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e00e      	b.n	8007e0a <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6a1a      	ldr	r2, [r3, #32]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	4013      	ands	r3, r2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	bf14      	ite	ne
 8007dfa:	2301      	movne	r3, #1
 8007dfc:	2300      	moveq	r3, #0
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	461a      	mov	r2, r3
 8007e02:	79fb      	ldrb	r3, [r7, #7]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d1ce      	bne.n	8007da6 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
	...

08007e14 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b087      	sub	sp, #28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	6039      	str	r1, [r7, #0]
 8007e1e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8007e24:	2300      	movs	r3, #0
 8007e26:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8007e28:	79fb      	ldrb	r3, [r7, #7]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d005      	beq.n	8007e3a <OSPIM_GetConfig+0x26>
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d802      	bhi.n	8007e3a <OSPIM_GetConfig+0x26>
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d102      	bne.n	8007e40 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	75fb      	strb	r3, [r7, #23]
 8007e3e:	e098      	b.n	8007f72 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	2200      	movs	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2200      	movs	r2, #0
 8007e56:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8007e5e:	79fb      	ldrb	r3, [r7, #7]
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d10b      	bne.n	8007e7c <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007e64:	4b46      	ldr	r3, [pc, #280]	@ (8007f80 <OSPIM_GetConfig+0x16c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d102      	bne.n	8007e76 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007e70:	4b44      	ldr	r3, [pc, #272]	@ (8007f84 <OSPIM_GetConfig+0x170>)
 8007e72:	613b      	str	r3, [r7, #16]
 8007e74:	e002      	b.n	8007e7c <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8007e76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e7a:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	e074      	b.n	8007f6c <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8007e82:	4a3f      	ldr	r2, [pc, #252]	@ (8007f80 <OSPIM_GetConfig+0x16c>)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00a      	beq.n	8007eae <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	4053      	eors	r3, r2
 8007e9e:	f003 0302 	and.w	r3, r3, #2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d103      	bne.n	8007eae <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	f003 0310 	and.w	r3, r3, #16
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00a      	beq.n	8007ece <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	4053      	eors	r3, r2
 8007ebe:	f003 0320 	and.w	r3, r3, #32
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d103      	bne.n	8007ece <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	1c5a      	adds	r2, r3, #1
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00a      	beq.n	8007eee <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	4053      	eors	r3, r2
 8007ede:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d103      	bne.n	8007eee <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	1c5a      	adds	r2, r3, #1
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d018      	beq.n	8007f2a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	4053      	eors	r3, r2
 8007efe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d111      	bne.n	8007f2a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d106      	bne.n	8007f1e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	3301      	adds	r3, #1
 8007f14:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	60da      	str	r2, [r3, #12]
 8007f1c:	e005      	b.n	8007f2a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3301      	adds	r3, #1
 8007f22:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d018      	beq.n	8007f66 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	4053      	eors	r3, r2
 8007f3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d111      	bne.n	8007f66 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d106      	bne.n	8007f5a <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	611a      	str	r2, [r3, #16]
 8007f58:	e005      	b.n	8007f66 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d987      	bls.n	8007e82 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	371c      	adds	r7, #28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	420c4000 	.word	0x420c4000
 8007f84:	04040222 	.word	0x04040222

08007f88 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	689a      	ldr	r2, [r3, #8]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f042 0202 	orr.w	r2, r2, #2
 8007fa4:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2208      	movs	r2, #8
 8007faa:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a15      	ldr	r2, [pc, #84]	@ (8008008 <HAL_OSPI_DLYB_SetConfig+0x80>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d109      	bne.n	8007fca <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8007fb6:	4815      	ldr	r0, [pc, #84]	@ (800800c <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007fb8:	f7ff f86a 	bl	8007090 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	4813      	ldr	r0, [pc, #76]	@ (800800c <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007fc0:	f006 f928 	bl	800e214 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73fb      	strb	r3, [r7, #15]
 8007fc8:	e00d      	b.n	8007fe6 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a10      	ldr	r2, [pc, #64]	@ (8008010 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d108      	bne.n	8007fe6 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8007fd4:	480f      	ldr	r0, [pc, #60]	@ (8008014 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8007fd6:	f7ff f85b 	bl	8007090 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	480d      	ldr	r0, [pc, #52]	@ (8008014 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8007fde:	f006 f919 	bl	800e214 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7ff f95d 	bl	80072a6 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f022 0202 	bic.w	r2, r2, #2
 8007ffa:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	420d1400 	.word	0x420d1400
 800800c:	420cf000 	.word	0x420cf000
 8008010:	420d2400 	.word	0x420d2400
 8008014:	420cf400 	.word	0x420cf400

08008018 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008018:	b480      	push	{r7}
 800801a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800801c:	4b05      	ldr	r3, [pc, #20]	@ (8008034 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800801e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008020:	4a04      	ldr	r2, [pc, #16]	@ (8008034 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008022:	f043 0301 	orr.w	r3, r3, #1
 8008026:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8008028:	bf00      	nop
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	46020800 	.word	0x46020800

08008038 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8008040:	4b39      	ldr	r3, [pc, #228]	@ (8008128 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008044:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008048:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	429a      	cmp	r2, r3
 8008050:	d10b      	bne.n	800806a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008058:	d905      	bls.n	8008066 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800805a:	4b33      	ldr	r3, [pc, #204]	@ (8008128 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	4a32      	ldr	r2, [pc, #200]	@ (8008128 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008064:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	e057      	b.n	800811a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008070:	d90a      	bls.n	8008088 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8008072:	4b2d      	ldr	r3, [pc, #180]	@ (8008128 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4313      	orrs	r3, r2
 800807e:	4a2a      	ldr	r2, [pc, #168]	@ (8008128 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008084:	60d3      	str	r3, [r2, #12]
 8008086:	e007      	b.n	8008098 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8008088:	4b27      	ldr	r3, [pc, #156]	@ (8008128 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8008090:	4925      	ldr	r1, [pc, #148]	@ (8008128 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4313      	orrs	r3, r2
 8008096:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008098:	4b24      	ldr	r3, [pc, #144]	@ (800812c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a24      	ldr	r2, [pc, #144]	@ (8008130 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800809e:	fba2 2303 	umull	r2, r3, r2, r3
 80080a2:	099b      	lsrs	r3, r3, #6
 80080a4:	2232      	movs	r2, #50	@ 0x32
 80080a6:	fb02 f303 	mul.w	r3, r2, r3
 80080aa:	4a21      	ldr	r2, [pc, #132]	@ (8008130 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80080ac:	fba2 2303 	umull	r2, r3, r2, r3
 80080b0:	099b      	lsrs	r3, r3, #6
 80080b2:	3301      	adds	r3, #1
 80080b4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80080b6:	e002      	b.n	80080be <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	3b01      	subs	r3, #1
 80080bc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80080be:	4b1a      	ldr	r3, [pc, #104]	@ (8008128 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d102      	bne.n	80080d0 <HAL_PWREx_ControlVoltageScaling+0x98>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1f3      	bne.n	80080b8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d01b      	beq.n	800810e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80080d6:	4b15      	ldr	r3, [pc, #84]	@ (800812c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a15      	ldr	r2, [pc, #84]	@ (8008130 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80080dc:	fba2 2303 	umull	r2, r3, r2, r3
 80080e0:	099b      	lsrs	r3, r3, #6
 80080e2:	2232      	movs	r2, #50	@ 0x32
 80080e4:	fb02 f303 	mul.w	r3, r2, r3
 80080e8:	4a11      	ldr	r2, [pc, #68]	@ (8008130 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80080ea:	fba2 2303 	umull	r2, r3, r2, r3
 80080ee:	099b      	lsrs	r3, r3, #6
 80080f0:	3301      	adds	r3, #1
 80080f2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80080f4:	e002      	b.n	80080fc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80080fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008128 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80080fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008100:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d102      	bne.n	800810e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1f3      	bne.n	80080f6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8008114:	2303      	movs	r3, #3
 8008116:	e000      	b.n	800811a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	46020800 	.word	0x46020800
 800812c:	20000000 	.word	0x20000000
 8008130:	10624dd3 	.word	0x10624dd3

08008134 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008134:	b480      	push	{r7}
 8008136:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8008138:	4b04      	ldr	r3, [pc, #16]	@ (800814c <HAL_PWREx_GetVoltageRange+0x18>)
 800813a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800813c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8008140:	4618      	mov	r0, r3
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	46020800 	.word	0x46020800

08008150 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008158:	4b22      	ldr	r3, [pc, #136]	@ (80081e4 <HAL_PWREx_ConfigSupply+0x94>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a22      	ldr	r2, [pc, #136]	@ (80081e8 <HAL_PWREx_ConfigSupply+0x98>)
 800815e:	fba2 2303 	umull	r2, r3, r2, r3
 8008162:	099b      	lsrs	r3, r3, #6
 8008164:	2232      	movs	r2, #50	@ 0x32
 8008166:	fb02 f303 	mul.w	r3, r2, r3
 800816a:	4a1f      	ldr	r2, [pc, #124]	@ (80081e8 <HAL_PWREx_ConfigSupply+0x98>)
 800816c:	fba2 2303 	umull	r2, r3, r2, r3
 8008170:	099b      	lsrs	r3, r3, #6
 8008172:	3301      	adds	r3, #1
 8008174:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d113      	bne.n	80081a4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800817c:	4b1b      	ldr	r3, [pc, #108]	@ (80081ec <HAL_PWREx_ConfigSupply+0x9c>)
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	4a1a      	ldr	r2, [pc, #104]	@ (80081ec <HAL_PWREx_ConfigSupply+0x9c>)
 8008182:	f023 0302 	bic.w	r3, r3, #2
 8008186:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008188:	e002      	b.n	8008190 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	3b01      	subs	r3, #1
 800818e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008190:	4b16      	ldr	r3, [pc, #88]	@ (80081ec <HAL_PWREx_ConfigSupply+0x9c>)
 8008192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b02      	cmp	r3, #2
 800819a:	d116      	bne.n	80081ca <HAL_PWREx_ConfigSupply+0x7a>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1f3      	bne.n	800818a <HAL_PWREx_ConfigSupply+0x3a>
 80081a2:	e012      	b.n	80081ca <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80081a4:	4b11      	ldr	r3, [pc, #68]	@ (80081ec <HAL_PWREx_ConfigSupply+0x9c>)
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	4a10      	ldr	r2, [pc, #64]	@ (80081ec <HAL_PWREx_ConfigSupply+0x9c>)
 80081aa:	f043 0302 	orr.w	r3, r3, #2
 80081ae:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80081b0:	e002      	b.n	80081b8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80081b8:	4b0c      	ldr	r3, [pc, #48]	@ (80081ec <HAL_PWREx_ConfigSupply+0x9c>)
 80081ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081bc:	f003 0302 	and.w	r3, r3, #2
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d102      	bne.n	80081ca <HAL_PWREx_ConfigSupply+0x7a>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1f3      	bne.n	80081b2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e000      	b.n	80081d6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	20000000 	.word	0x20000000
 80081e8:	10624dd3 	.word	0x10624dd3
 80081ec:	46020800 	.word	0x46020800

080081f0 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80081f4:	4b05      	ldr	r3, [pc, #20]	@ (800820c <HAL_PWREx_EnableVddIO2+0x1c>)
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	4a04      	ldr	r2, [pc, #16]	@ (800820c <HAL_PWREx_EnableVddIO2+0x1c>)
 80081fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80081fe:	6113      	str	r3, [r2, #16]
}
 8008200:	bf00      	nop
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	46020800 	.word	0x46020800

08008210 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b08e      	sub	sp, #56	@ 0x38
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8008218:	2300      	movs	r3, #0
 800821a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d102      	bne.n	800822a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	f000 bec8 	b.w	8008fba <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800822a:	4b99      	ldr	r3, [pc, #612]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	f003 030c 	and.w	r3, r3, #12
 8008232:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008234:	4b96      	ldr	r3, [pc, #600]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 8008236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008238:	f003 0303 	and.w	r3, r3, #3
 800823c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0310 	and.w	r3, r3, #16
 8008246:	2b00      	cmp	r3, #0
 8008248:	f000 816c 	beq.w	8008524 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800824c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824e:	2b00      	cmp	r3, #0
 8008250:	d007      	beq.n	8008262 <HAL_RCC_OscConfig+0x52>
 8008252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008254:	2b0c      	cmp	r3, #12
 8008256:	f040 80de 	bne.w	8008416 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800825a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800825c:	2b01      	cmp	r3, #1
 800825e:	f040 80da 	bne.w	8008416 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d102      	bne.n	8008270 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	f000 bea5 	b.w	8008fba <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008274:	4b86      	ldr	r3, [pc, #536]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d004      	beq.n	800828a <HAL_RCC_OscConfig+0x7a>
 8008280:	4b83      	ldr	r3, [pc, #524]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008288:	e005      	b.n	8008296 <HAL_RCC_OscConfig+0x86>
 800828a:	4b81      	ldr	r3, [pc, #516]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 800828c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008290:	041b      	lsls	r3, r3, #16
 8008292:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008296:	4293      	cmp	r3, r2
 8008298:	d255      	bcs.n	8008346 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800829a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10a      	bne.n	80082b6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a4:	4618      	mov	r0, r3
 80082a6:	f001 fa3d 	bl	8009724 <RCC_SetFlashLatencyFromMSIRange>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	f000 be82 	b.w	8008fba <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80082b6:	4b76      	ldr	r3, [pc, #472]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	4a75      	ldr	r2, [pc, #468]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 80082bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80082c0:	6093      	str	r3, [r2, #8]
 80082c2:	4b73      	ldr	r3, [pc, #460]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ce:	4970      	ldr	r1, [pc, #448]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80082dc:	d309      	bcc.n	80082f2 <HAL_RCC_OscConfig+0xe2>
 80082de:	4b6c      	ldr	r3, [pc, #432]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f023 021f 	bic.w	r2, r3, #31
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	4969      	ldr	r1, [pc, #420]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	60cb      	str	r3, [r1, #12]
 80082f0:	e07e      	b.n	80083f0 <HAL_RCC_OscConfig+0x1e0>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	da0a      	bge.n	8008310 <HAL_RCC_OscConfig+0x100>
 80082fa:	4b65      	ldr	r3, [pc, #404]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	015b      	lsls	r3, r3, #5
 8008308:	4961      	ldr	r1, [pc, #388]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 800830a:	4313      	orrs	r3, r2
 800830c:	60cb      	str	r3, [r1, #12]
 800830e:	e06f      	b.n	80083f0 <HAL_RCC_OscConfig+0x1e0>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008318:	d30a      	bcc.n	8008330 <HAL_RCC_OscConfig+0x120>
 800831a:	4b5d      	ldr	r3, [pc, #372]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	029b      	lsls	r3, r3, #10
 8008328:	4959      	ldr	r1, [pc, #356]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 800832a:	4313      	orrs	r3, r2
 800832c:	60cb      	str	r3, [r1, #12]
 800832e:	e05f      	b.n	80083f0 <HAL_RCC_OscConfig+0x1e0>
 8008330:	4b57      	ldr	r3, [pc, #348]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	03db      	lsls	r3, r3, #15
 800833e:	4954      	ldr	r1, [pc, #336]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 8008340:	4313      	orrs	r3, r2
 8008342:	60cb      	str	r3, [r1, #12]
 8008344:	e054      	b.n	80083f0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008346:	4b52      	ldr	r3, [pc, #328]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	4a51      	ldr	r2, [pc, #324]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 800834c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008350:	6093      	str	r3, [r2, #8]
 8008352:	4b4f      	ldr	r3, [pc, #316]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835e:	494c      	ldr	r1, [pc, #304]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 8008360:	4313      	orrs	r3, r2
 8008362:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008368:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800836c:	d309      	bcc.n	8008382 <HAL_RCC_OscConfig+0x172>
 800836e:	4b48      	ldr	r3, [pc, #288]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	f023 021f 	bic.w	r2, r3, #31
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	4945      	ldr	r1, [pc, #276]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 800837c:	4313      	orrs	r3, r2
 800837e:	60cb      	str	r3, [r1, #12]
 8008380:	e028      	b.n	80083d4 <HAL_RCC_OscConfig+0x1c4>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008386:	2b00      	cmp	r3, #0
 8008388:	da0a      	bge.n	80083a0 <HAL_RCC_OscConfig+0x190>
 800838a:	4b41      	ldr	r3, [pc, #260]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	015b      	lsls	r3, r3, #5
 8008398:	493d      	ldr	r1, [pc, #244]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 800839a:	4313      	orrs	r3, r2
 800839c:	60cb      	str	r3, [r1, #12]
 800839e:	e019      	b.n	80083d4 <HAL_RCC_OscConfig+0x1c4>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083a8:	d30a      	bcc.n	80083c0 <HAL_RCC_OscConfig+0x1b0>
 80083aa:	4b39      	ldr	r3, [pc, #228]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	029b      	lsls	r3, r3, #10
 80083b8:	4935      	ldr	r1, [pc, #212]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	60cb      	str	r3, [r1, #12]
 80083be:	e009      	b.n	80083d4 <HAL_RCC_OscConfig+0x1c4>
 80083c0:	4b33      	ldr	r3, [pc, #204]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	03db      	lsls	r3, r3, #15
 80083ce:	4930      	ldr	r1, [pc, #192]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80083d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10a      	bne.n	80083f0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083de:	4618      	mov	r0, r3
 80083e0:	f001 f9a0 	bl	8009724 <RCC_SetFlashLatencyFromMSIRange>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	f000 bde5 	b.w	8008fba <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80083f0:	f001 f8de 	bl	80095b0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80083f4:	4b27      	ldr	r3, [pc, #156]	@ (8008494 <HAL_RCC_OscConfig+0x284>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7fb f9f5 	bl	80037e8 <HAL_InitTick>
 80083fe:	4603      	mov	r3, r0
 8008400:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8008404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 808a 	beq.w	8008522 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800840e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008412:	f000 bdd2 	b.w	8008fba <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	69db      	ldr	r3, [r3, #28]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d066      	beq.n	80084ec <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800841e:	4b1c      	ldr	r3, [pc, #112]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a1b      	ldr	r2, [pc, #108]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 8008424:	f043 0301 	orr.w	r3, r3, #1
 8008428:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800842a:	f7fb fb69 	bl	8003b00 <HAL_GetTick>
 800842e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008430:	e009      	b.n	8008446 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008432:	f7fb fb65 	bl	8003b00 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	2b02      	cmp	r3, #2
 800843e:	d902      	bls.n	8008446 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	f000 bdba 	b.w	8008fba <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008446:	4b12      	ldr	r3, [pc, #72]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0304 	and.w	r3, r3, #4
 800844e:	2b00      	cmp	r3, #0
 8008450:	d0ef      	beq.n	8008432 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008452:	4b0f      	ldr	r3, [pc, #60]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	4a0e      	ldr	r2, [pc, #56]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 8008458:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800845c:	6093      	str	r3, [r2, #8]
 800845e:	4b0c      	ldr	r3, [pc, #48]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846a:	4909      	ldr	r1, [pc, #36]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 800846c:	4313      	orrs	r3, r2
 800846e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008474:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008478:	d30e      	bcc.n	8008498 <HAL_RCC_OscConfig+0x288>
 800847a:	4b05      	ldr	r3, [pc, #20]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	f023 021f 	bic.w	r2, r3, #31
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	4902      	ldr	r1, [pc, #8]	@ (8008490 <HAL_RCC_OscConfig+0x280>)
 8008488:	4313      	orrs	r3, r2
 800848a:	60cb      	str	r3, [r1, #12]
 800848c:	e04a      	b.n	8008524 <HAL_RCC_OscConfig+0x314>
 800848e:	bf00      	nop
 8008490:	46020c00 	.word	0x46020c00
 8008494:	20000004 	.word	0x20000004
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800849c:	2b00      	cmp	r3, #0
 800849e:	da0a      	bge.n	80084b6 <HAL_RCC_OscConfig+0x2a6>
 80084a0:	4b98      	ldr	r3, [pc, #608]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	015b      	lsls	r3, r3, #5
 80084ae:	4995      	ldr	r1, [pc, #596]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80084b0:	4313      	orrs	r3, r2
 80084b2:	60cb      	str	r3, [r1, #12]
 80084b4:	e036      	b.n	8008524 <HAL_RCC_OscConfig+0x314>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084be:	d30a      	bcc.n	80084d6 <HAL_RCC_OscConfig+0x2c6>
 80084c0:	4b90      	ldr	r3, [pc, #576]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	029b      	lsls	r3, r3, #10
 80084ce:	498d      	ldr	r1, [pc, #564]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	60cb      	str	r3, [r1, #12]
 80084d4:	e026      	b.n	8008524 <HAL_RCC_OscConfig+0x314>
 80084d6:	4b8b      	ldr	r3, [pc, #556]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	03db      	lsls	r3, r3, #15
 80084e4:	4987      	ldr	r1, [pc, #540]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	60cb      	str	r3, [r1, #12]
 80084ea:	e01b      	b.n	8008524 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80084ec:	4b85      	ldr	r3, [pc, #532]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a84      	ldr	r2, [pc, #528]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80084f2:	f023 0301 	bic.w	r3, r3, #1
 80084f6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80084f8:	f7fb fb02 	bl	8003b00 <HAL_GetTick>
 80084fc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80084fe:	e009      	b.n	8008514 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008500:	f7fb fafe 	bl	8003b00 <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b02      	cmp	r3, #2
 800850c:	d902      	bls.n	8008514 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	f000 bd53 	b.w	8008fba <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008514:	4b7b      	ldr	r3, [pc, #492]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1ef      	bne.n	8008500 <HAL_RCC_OscConfig+0x2f0>
 8008520:	e000      	b.n	8008524 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008522:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	f000 808b 	beq.w	8008648 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008534:	2b08      	cmp	r3, #8
 8008536:	d005      	beq.n	8008544 <HAL_RCC_OscConfig+0x334>
 8008538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853a:	2b0c      	cmp	r3, #12
 800853c:	d109      	bne.n	8008552 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800853e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008540:	2b03      	cmp	r3, #3
 8008542:	d106      	bne.n	8008552 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d17d      	bne.n	8008648 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	f000 bd34 	b.w	8008fba <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800855a:	d106      	bne.n	800856a <HAL_RCC_OscConfig+0x35a>
 800855c:	4b69      	ldr	r3, [pc, #420]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a68      	ldr	r2, [pc, #416]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 8008562:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	e041      	b.n	80085ee <HAL_RCC_OscConfig+0x3de>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008572:	d112      	bne.n	800859a <HAL_RCC_OscConfig+0x38a>
 8008574:	4b63      	ldr	r3, [pc, #396]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a62      	ldr	r2, [pc, #392]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 800857a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800857e:	6013      	str	r3, [r2, #0]
 8008580:	4b60      	ldr	r3, [pc, #384]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a5f      	ldr	r2, [pc, #380]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 8008586:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	4b5d      	ldr	r3, [pc, #372]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a5c      	ldr	r2, [pc, #368]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 8008592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	e029      	b.n	80085ee <HAL_RCC_OscConfig+0x3de>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80085a2:	d112      	bne.n	80085ca <HAL_RCC_OscConfig+0x3ba>
 80085a4:	4b57      	ldr	r3, [pc, #348]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a56      	ldr	r2, [pc, #344]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80085aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	4b54      	ldr	r3, [pc, #336]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a53      	ldr	r2, [pc, #332]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80085b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085ba:	6013      	str	r3, [r2, #0]
 80085bc:	4b51      	ldr	r3, [pc, #324]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a50      	ldr	r2, [pc, #320]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80085c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085c6:	6013      	str	r3, [r2, #0]
 80085c8:	e011      	b.n	80085ee <HAL_RCC_OscConfig+0x3de>
 80085ca:	4b4e      	ldr	r3, [pc, #312]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a4d      	ldr	r2, [pc, #308]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80085d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	4b4b      	ldr	r3, [pc, #300]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a4a      	ldr	r2, [pc, #296]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80085dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	4b48      	ldr	r3, [pc, #288]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a47      	ldr	r2, [pc, #284]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80085e8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80085ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d014      	beq.n	8008620 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80085f6:	f7fb fa83 	bl	8003b00 <HAL_GetTick>
 80085fa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80085fc:	e009      	b.n	8008612 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085fe:	f7fb fa7f 	bl	8003b00 <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	2b64      	cmp	r3, #100	@ 0x64
 800860a:	d902      	bls.n	8008612 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	f000 bcd4 	b.w	8008fba <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008612:	4b3c      	ldr	r3, [pc, #240]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d0ef      	beq.n	80085fe <HAL_RCC_OscConfig+0x3ee>
 800861e:	e013      	b.n	8008648 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8008620:	f7fb fa6e 	bl	8003b00 <HAL_GetTick>
 8008624:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008626:	e009      	b.n	800863c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008628:	f7fb fa6a 	bl	8003b00 <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	2b64      	cmp	r3, #100	@ 0x64
 8008634:	d902      	bls.n	800863c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	f000 bcbf 	b.w	8008fba <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800863c:	4b31      	ldr	r3, [pc, #196]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1ef      	bne.n	8008628 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0302 	and.w	r3, r3, #2
 8008650:	2b00      	cmp	r3, #0
 8008652:	d05f      	beq.n	8008714 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008656:	2b04      	cmp	r3, #4
 8008658:	d005      	beq.n	8008666 <HAL_RCC_OscConfig+0x456>
 800865a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865c:	2b0c      	cmp	r3, #12
 800865e:	d114      	bne.n	800868a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008662:	2b02      	cmp	r3, #2
 8008664:	d111      	bne.n	800868a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d102      	bne.n	8008674 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	f000 bca3 	b.w	8008fba <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8008674:	4b23      	ldr	r3, [pc, #140]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	041b      	lsls	r3, r3, #16
 8008682:	4920      	ldr	r1, [pc, #128]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 8008684:	4313      	orrs	r3, r2
 8008686:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008688:	e044      	b.n	8008714 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d024      	beq.n	80086dc <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8008692:	4b1c      	ldr	r3, [pc, #112]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a1b      	ldr	r2, [pc, #108]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 8008698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800869c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800869e:	f7fb fa2f 	bl	8003b00 <HAL_GetTick>
 80086a2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086a4:	e009      	b.n	80086ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086a6:	f7fb fa2b 	bl	8003b00 <HAL_GetTick>
 80086aa:	4602      	mov	r2, r0
 80086ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d902      	bls.n	80086ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	f000 bc80 	b.w	8008fba <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086ba:	4b12      	ldr	r3, [pc, #72]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d0ef      	beq.n	80086a6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80086c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	041b      	lsls	r3, r3, #16
 80086d4:	490b      	ldr	r1, [pc, #44]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80086d6:	4313      	orrs	r3, r2
 80086d8:	610b      	str	r3, [r1, #16]
 80086da:	e01b      	b.n	8008714 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80086dc:	4b09      	ldr	r3, [pc, #36]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a08      	ldr	r2, [pc, #32]	@ (8008704 <HAL_RCC_OscConfig+0x4f4>)
 80086e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086e6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80086e8:	f7fb fa0a 	bl	8003b00 <HAL_GetTick>
 80086ec:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80086ee:	e00b      	b.n	8008708 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086f0:	f7fb fa06 	bl	8003b00 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d904      	bls.n	8008708 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	f000 bc5b 	b.w	8008fba <HAL_RCC_OscConfig+0xdaa>
 8008704:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008708:	4baf      	ldr	r3, [pc, #700]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1ed      	bne.n	80086f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0308 	and.w	r3, r3, #8
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 80c8 	beq.w	80088b2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8008722:	2300      	movs	r3, #0
 8008724:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008728:	4ba7      	ldr	r3, [pc, #668]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 800872a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800872e:	f003 0304 	and.w	r3, r3, #4
 8008732:	2b00      	cmp	r3, #0
 8008734:	d111      	bne.n	800875a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008736:	4ba4      	ldr	r3, [pc, #656]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 8008738:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800873c:	4aa2      	ldr	r2, [pc, #648]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 800873e:	f043 0304 	orr.w	r3, r3, #4
 8008742:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008746:	4ba0      	ldr	r3, [pc, #640]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 8008748:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800874c:	f003 0304 	and.w	r3, r3, #4
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8008754:	2301      	movs	r3, #1
 8008756:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800875a:	4b9c      	ldr	r3, [pc, #624]	@ (80089cc <HAL_RCC_OscConfig+0x7bc>)
 800875c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	d119      	bne.n	800879a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008766:	4b99      	ldr	r3, [pc, #612]	@ (80089cc <HAL_RCC_OscConfig+0x7bc>)
 8008768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800876a:	4a98      	ldr	r2, [pc, #608]	@ (80089cc <HAL_RCC_OscConfig+0x7bc>)
 800876c:	f043 0301 	orr.w	r3, r3, #1
 8008770:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008772:	f7fb f9c5 	bl	8003b00 <HAL_GetTick>
 8008776:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008778:	e009      	b.n	800878e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800877a:	f7fb f9c1 	bl	8003b00 <HAL_GetTick>
 800877e:	4602      	mov	r2, r0
 8008780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	2b02      	cmp	r3, #2
 8008786:	d902      	bls.n	800878e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8008788:	2303      	movs	r3, #3
 800878a:	f000 bc16 	b.w	8008fba <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800878e:	4b8f      	ldr	r3, [pc, #572]	@ (80089cc <HAL_RCC_OscConfig+0x7bc>)
 8008790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0ef      	beq.n	800877a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d05f      	beq.n	8008862 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80087a2:	4b89      	ldr	r3, [pc, #548]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 80087a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087a8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	699a      	ldr	r2, [r3, #24]
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d037      	beq.n	8008828 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d006      	beq.n	80087d0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80087c2:	6a3b      	ldr	r3, [r7, #32]
 80087c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d101      	bne.n	80087d0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e3f4      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80087d0:	6a3b      	ldr	r3, [r7, #32]
 80087d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d01b      	beq.n	8008812 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80087da:	4b7b      	ldr	r3, [pc, #492]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 80087dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087e0:	4a79      	ldr	r2, [pc, #484]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 80087e2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80087e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80087ea:	f7fb f989 	bl	8003b00 <HAL_GetTick>
 80087ee:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80087f0:	e008      	b.n	8008804 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087f2:	f7fb f985 	bl	8003b00 <HAL_GetTick>
 80087f6:	4602      	mov	r2, r0
 80087f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	2b05      	cmp	r3, #5
 80087fe:	d901      	bls.n	8008804 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e3da      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008804:	4b70      	ldr	r3, [pc, #448]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 8008806:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800880a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1ef      	bne.n	80087f2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8008812:	4b6d      	ldr	r3, [pc, #436]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 8008814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008818:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	4969      	ldr	r1, [pc, #420]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 8008822:	4313      	orrs	r3, r2
 8008824:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8008828:	4b67      	ldr	r3, [pc, #412]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 800882a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800882e:	4a66      	ldr	r2, [pc, #408]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 8008830:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008834:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8008838:	f7fb f962 	bl	8003b00 <HAL_GetTick>
 800883c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800883e:	e008      	b.n	8008852 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008840:	f7fb f95e 	bl	8003b00 <HAL_GetTick>
 8008844:	4602      	mov	r2, r0
 8008846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	2b05      	cmp	r3, #5
 800884c:	d901      	bls.n	8008852 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e3b3      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8008852:	4b5d      	ldr	r3, [pc, #372]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 8008854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d0ef      	beq.n	8008840 <HAL_RCC_OscConfig+0x630>
 8008860:	e01b      	b.n	800889a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8008862:	4b59      	ldr	r3, [pc, #356]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 8008864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008868:	4a57      	ldr	r2, [pc, #348]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 800886a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800886e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8008872:	f7fb f945 	bl	8003b00 <HAL_GetTick>
 8008876:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008878:	e008      	b.n	800888c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800887a:	f7fb f941 	bl	8003b00 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	2b05      	cmp	r3, #5
 8008886:	d901      	bls.n	800888c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e396      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800888c:	4b4e      	ldr	r3, [pc, #312]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 800888e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008892:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1ef      	bne.n	800887a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800889a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d107      	bne.n	80088b2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088a2:	4b49      	ldr	r3, [pc, #292]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 80088a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088a8:	4a47      	ldr	r2, [pc, #284]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 80088aa:	f023 0304 	bic.w	r3, r3, #4
 80088ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 0304 	and.w	r3, r3, #4
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 8111 	beq.w	8008ae2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80088c0:	2300      	movs	r3, #0
 80088c2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088c6:	4b40      	ldr	r3, [pc, #256]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 80088c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088cc:	f003 0304 	and.w	r3, r3, #4
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d111      	bne.n	80088f8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088d4:	4b3c      	ldr	r3, [pc, #240]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 80088d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088da:	4a3b      	ldr	r2, [pc, #236]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 80088dc:	f043 0304 	orr.w	r3, r3, #4
 80088e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80088e4:	4b38      	ldr	r3, [pc, #224]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 80088e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088ea:	f003 0304 	and.w	r3, r3, #4
 80088ee:	613b      	str	r3, [r7, #16]
 80088f0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80088f2:	2301      	movs	r3, #1
 80088f4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80088f8:	4b34      	ldr	r3, [pc, #208]	@ (80089cc <HAL_RCC_OscConfig+0x7bc>)
 80088fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088fc:	f003 0301 	and.w	r3, r3, #1
 8008900:	2b00      	cmp	r3, #0
 8008902:	d118      	bne.n	8008936 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008904:	4b31      	ldr	r3, [pc, #196]	@ (80089cc <HAL_RCC_OscConfig+0x7bc>)
 8008906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008908:	4a30      	ldr	r2, [pc, #192]	@ (80089cc <HAL_RCC_OscConfig+0x7bc>)
 800890a:	f043 0301 	orr.w	r3, r3, #1
 800890e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008910:	f7fb f8f6 	bl	8003b00 <HAL_GetTick>
 8008914:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008916:	e008      	b.n	800892a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008918:	f7fb f8f2 	bl	8003b00 <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	2b02      	cmp	r3, #2
 8008924:	d901      	bls.n	800892a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	e347      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800892a:	4b28      	ldr	r3, [pc, #160]	@ (80089cc <HAL_RCC_OscConfig+0x7bc>)
 800892c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0f0      	beq.n	8008918 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	2b00      	cmp	r3, #0
 8008940:	d01f      	beq.n	8008982 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f003 0304 	and.w	r3, r3, #4
 800894a:	2b00      	cmp	r3, #0
 800894c:	d010      	beq.n	8008970 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800894e:	4b1e      	ldr	r3, [pc, #120]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 8008950:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008954:	4a1c      	ldr	r2, [pc, #112]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 8008956:	f043 0304 	orr.w	r3, r3, #4
 800895a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800895e:	4b1a      	ldr	r3, [pc, #104]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 8008960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008964:	4a18      	ldr	r2, [pc, #96]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 8008966:	f043 0301 	orr.w	r3, r3, #1
 800896a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800896e:	e018      	b.n	80089a2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008970:	4b15      	ldr	r3, [pc, #84]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 8008972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008976:	4a14      	ldr	r2, [pc, #80]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 8008978:	f043 0301 	orr.w	r3, r3, #1
 800897c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008980:	e00f      	b.n	80089a2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008982:	4b11      	ldr	r3, [pc, #68]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 8008984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008988:	4a0f      	ldr	r2, [pc, #60]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 800898a:	f023 0301 	bic.w	r3, r3, #1
 800898e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008992:	4b0d      	ldr	r3, [pc, #52]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 8008994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008998:	4a0b      	ldr	r2, [pc, #44]	@ (80089c8 <HAL_RCC_OscConfig+0x7b8>)
 800899a:	f023 0304 	bic.w	r3, r3, #4
 800899e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d057      	beq.n	8008a5a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80089aa:	f7fb f8a9 	bl	8003b00 <HAL_GetTick>
 80089ae:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089b0:	e00e      	b.n	80089d0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089b2:	f7fb f8a5 	bl	8003b00 <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d905      	bls.n	80089d0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e2f8      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
 80089c8:	46020c00 	.word	0x46020c00
 80089cc:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089d0:	4b9c      	ldr	r3, [pc, #624]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 80089d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089d6:	f003 0302 	and.w	r3, r3, #2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0e9      	beq.n	80089b2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d01b      	beq.n	8008a22 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80089ea:	4b96      	ldr	r3, [pc, #600]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 80089ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089f0:	4a94      	ldr	r2, [pc, #592]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 80089f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80089fa:	e00a      	b.n	8008a12 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089fc:	f7fb f880 	bl	8003b00 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d901      	bls.n	8008a12 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e2d3      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008a12:	4b8c      	ldr	r3, [pc, #560]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d0ed      	beq.n	80089fc <HAL_RCC_OscConfig+0x7ec>
 8008a20:	e053      	b.n	8008aca <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008a22:	4b88      	ldr	r3, [pc, #544]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008a24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a28:	4a86      	ldr	r2, [pc, #536]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008a2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008a32:	e00a      	b.n	8008a4a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a34:	f7fb f864 	bl	8003b00 <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d901      	bls.n	8008a4a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e2b7      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008a4a:	4b7e      	ldr	r3, [pc, #504]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1ed      	bne.n	8008a34 <HAL_RCC_OscConfig+0x824>
 8008a58:	e037      	b.n	8008aca <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8008a5a:	f7fb f851 	bl	8003b00 <HAL_GetTick>
 8008a5e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a60:	e00a      	b.n	8008a78 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a62:	f7fb f84d 	bl	8003b00 <HAL_GetTick>
 8008a66:	4602      	mov	r2, r0
 8008a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d901      	bls.n	8008a78 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8008a74:	2303      	movs	r3, #3
 8008a76:	e2a0      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a78:	4b72      	ldr	r3, [pc, #456]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a7e:	f003 0302 	and.w	r3, r3, #2
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1ed      	bne.n	8008a62 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8008a86:	4b6f      	ldr	r3, [pc, #444]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d01a      	beq.n	8008aca <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008a94:	4b6b      	ldr	r3, [pc, #428]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008a96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a9a:	4a6a      	ldr	r2, [pc, #424]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008a9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008aa0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008aa4:	e00a      	b.n	8008abc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aa6:	f7fb f82b 	bl	8003b00 <HAL_GetTick>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d901      	bls.n	8008abc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e27e      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008abc:	4b61      	ldr	r3, [pc, #388]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008abe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ac2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1ed      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008aca:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d107      	bne.n	8008ae2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ad2:	4b5c      	ldr	r3, [pc, #368]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ad8:	4a5a      	ldr	r2, [pc, #360]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008ada:	f023 0304 	bic.w	r3, r3, #4
 8008ade:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0320 	and.w	r3, r3, #32
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d036      	beq.n	8008b5c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d019      	beq.n	8008b2a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8008af6:	4b53      	ldr	r3, [pc, #332]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a52      	ldr	r2, [pc, #328]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008afc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008b00:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008b02:	f7fa fffd 	bl	8003b00 <HAL_GetTick>
 8008b06:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008b08:	e008      	b.n	8008b1c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b0a:	f7fa fff9 	bl	8003b00 <HAL_GetTick>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d901      	bls.n	8008b1c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e24e      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008b1c:	4b49      	ldr	r3, [pc, #292]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d0f0      	beq.n	8008b0a <HAL_RCC_OscConfig+0x8fa>
 8008b28:	e018      	b.n	8008b5c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8008b2a:	4b46      	ldr	r3, [pc, #280]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a45      	ldr	r2, [pc, #276]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008b30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b34:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008b36:	f7fa ffe3 	bl	8003b00 <HAL_GetTick>
 8008b3a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008b3c:	e008      	b.n	8008b50 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b3e:	f7fa ffdf 	bl	8003b00 <HAL_GetTick>
 8008b42:	4602      	mov	r2, r0
 8008b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d901      	bls.n	8008b50 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	e234      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008b50:	4b3c      	ldr	r3, [pc, #240]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1f0      	bne.n	8008b3e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d036      	beq.n	8008bd6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d019      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8008b70:	4b34      	ldr	r3, [pc, #208]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a33      	ldr	r2, [pc, #204]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008b76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b7a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008b7c:	f7fa ffc0 	bl	8003b00 <HAL_GetTick>
 8008b80:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008b82:	e008      	b.n	8008b96 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008b84:	f7fa ffbc 	bl	8003b00 <HAL_GetTick>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d901      	bls.n	8008b96 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e211      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008b96:	4b2b      	ldr	r3, [pc, #172]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0f0      	beq.n	8008b84 <HAL_RCC_OscConfig+0x974>
 8008ba2:	e018      	b.n	8008bd6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8008ba4:	4b27      	ldr	r3, [pc, #156]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a26      	ldr	r2, [pc, #152]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008baa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008bb0:	f7fa ffa6 	bl	8003b00 <HAL_GetTick>
 8008bb4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008bb6:	e008      	b.n	8008bca <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008bb8:	f7fa ffa2 	bl	8003b00 <HAL_GetTick>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d901      	bls.n	8008bca <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e1f7      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008bca:	4b1e      	ldr	r3, [pc, #120]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1f0      	bne.n	8008bb8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d07f      	beq.n	8008ce2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d062      	beq.n	8008cb0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8008bea:	4b16      	ldr	r3, [pc, #88]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	4a15      	ldr	r2, [pc, #84]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008bf0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008bf4:	6093      	str	r3, [r2, #8]
 8008bf6:	4b13      	ldr	r3, [pc, #76]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c02:	4910      	ldr	r1, [pc, #64]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008c04:	4313      	orrs	r3, r2
 8008c06:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c0c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008c10:	d309      	bcc.n	8008c26 <HAL_RCC_OscConfig+0xa16>
 8008c12:	4b0c      	ldr	r3, [pc, #48]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	f023 021f 	bic.w	r2, r3, #31
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	4909      	ldr	r1, [pc, #36]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008c20:	4313      	orrs	r3, r2
 8008c22:	60cb      	str	r3, [r1, #12]
 8008c24:	e02a      	b.n	8008c7c <HAL_RCC_OscConfig+0xa6c>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	da0c      	bge.n	8008c48 <HAL_RCC_OscConfig+0xa38>
 8008c2e:	4b05      	ldr	r3, [pc, #20]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	015b      	lsls	r3, r3, #5
 8008c3c:	4901      	ldr	r1, [pc, #4]	@ (8008c44 <HAL_RCC_OscConfig+0xa34>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	60cb      	str	r3, [r1, #12]
 8008c42:	e01b      	b.n	8008c7c <HAL_RCC_OscConfig+0xa6c>
 8008c44:	46020c00 	.word	0x46020c00
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c50:	d30a      	bcc.n	8008c68 <HAL_RCC_OscConfig+0xa58>
 8008c52:	4ba1      	ldr	r3, [pc, #644]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	029b      	lsls	r3, r3, #10
 8008c60:	499d      	ldr	r1, [pc, #628]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	60cb      	str	r3, [r1, #12]
 8008c66:	e009      	b.n	8008c7c <HAL_RCC_OscConfig+0xa6c>
 8008c68:	4b9b      	ldr	r3, [pc, #620]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	03db      	lsls	r3, r3, #15
 8008c76:	4998      	ldr	r1, [pc, #608]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8008c7c:	4b96      	ldr	r3, [pc, #600]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a95      	ldr	r2, [pc, #596]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008c82:	f043 0310 	orr.w	r3, r3, #16
 8008c86:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008c88:	f7fa ff3a 	bl	8003b00 <HAL_GetTick>
 8008c8c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008c8e:	e008      	b.n	8008ca2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008c90:	f7fa ff36 	bl	8003b00 <HAL_GetTick>
 8008c94:	4602      	mov	r2, r0
 8008c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d901      	bls.n	8008ca2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	e18b      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008ca2:	4b8d      	ldr	r3, [pc, #564]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0320 	and.w	r3, r3, #32
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d0f0      	beq.n	8008c90 <HAL_RCC_OscConfig+0xa80>
 8008cae:	e018      	b.n	8008ce2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8008cb0:	4b89      	ldr	r3, [pc, #548]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a88      	ldr	r2, [pc, #544]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008cb6:	f023 0310 	bic.w	r3, r3, #16
 8008cba:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008cbc:	f7fa ff20 	bl	8003b00 <HAL_GetTick>
 8008cc0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008cc2:	e008      	b.n	8008cd6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008cc4:	f7fa ff1c 	bl	8003b00 <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d901      	bls.n	8008cd6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e171      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008cd6:	4b80      	ldr	r3, [pc, #512]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0320 	and.w	r3, r3, #32
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1f0      	bne.n	8008cc4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 8166 	beq.w	8008fb8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008cec:	2300      	movs	r3, #0
 8008cee:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008cf2:	4b79      	ldr	r3, [pc, #484]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008cf4:	69db      	ldr	r3, [r3, #28]
 8008cf6:	f003 030c 	and.w	r3, r3, #12
 8008cfa:	2b0c      	cmp	r3, #12
 8008cfc:	f000 80f2 	beq.w	8008ee4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	f040 80c5 	bne.w	8008e94 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008d0a:	4b73      	ldr	r3, [pc, #460]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a72      	ldr	r2, [pc, #456]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008d10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d14:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008d16:	f7fa fef3 	bl	8003b00 <HAL_GetTick>
 8008d1a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008d1c:	e008      	b.n	8008d30 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d1e:	f7fa feef 	bl	8003b00 <HAL_GetTick>
 8008d22:	4602      	mov	r2, r0
 8008d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d901      	bls.n	8008d30 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e144      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008d30:	4b69      	ldr	r3, [pc, #420]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1f0      	bne.n	8008d1e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d3c:	4b66      	ldr	r3, [pc, #408]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d42:	f003 0304 	and.w	r3, r3, #4
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d111      	bne.n	8008d6e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8008d4a:	4b63      	ldr	r3, [pc, #396]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d50:	4a61      	ldr	r2, [pc, #388]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008d52:	f043 0304 	orr.w	r3, r3, #4
 8008d56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d60:	f003 0304 	and.w	r3, r3, #4
 8008d64:	60fb      	str	r3, [r7, #12]
 8008d66:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8008d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8008edc <HAL_RCC_OscConfig+0xccc>)
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008d76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d7a:	d102      	bne.n	8008d82 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008d82:	4b56      	ldr	r3, [pc, #344]	@ (8008edc <HAL_RCC_OscConfig+0xccc>)
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	4a55      	ldr	r2, [pc, #340]	@ (8008edc <HAL_RCC_OscConfig+0xccc>)
 8008d88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d8c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8008d8e:	4b52      	ldr	r3, [pc, #328]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d96:	f023 0303 	bic.w	r3, r3, #3
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008da2:	3a01      	subs	r2, #1
 8008da4:	0212      	lsls	r2, r2, #8
 8008da6:	4311      	orrs	r1, r2
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008dac:	430a      	orrs	r2, r1
 8008dae:	494a      	ldr	r1, [pc, #296]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008db0:	4313      	orrs	r3, r2
 8008db2:	628b      	str	r3, [r1, #40]	@ 0x28
 8008db4:	4b48      	ldr	r3, [pc, #288]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008db6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008db8:	4b49      	ldr	r3, [pc, #292]	@ (8008ee0 <HAL_RCC_OscConfig+0xcd0>)
 8008dba:	4013      	ands	r3, r2
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008dc0:	3a01      	subs	r2, #1
 8008dc2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008dca:	3a01      	subs	r2, #1
 8008dcc:	0252      	lsls	r2, r2, #9
 8008dce:	b292      	uxth	r2, r2
 8008dd0:	4311      	orrs	r1, r2
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008dd6:	3a01      	subs	r2, #1
 8008dd8:	0412      	lsls	r2, r2, #16
 8008dda:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008dde:	4311      	orrs	r1, r2
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008de4:	3a01      	subs	r2, #1
 8008de6:	0612      	lsls	r2, r2, #24
 8008de8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008dec:	430a      	orrs	r2, r1
 8008dee:	493a      	ldr	r1, [pc, #232]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008df0:	4313      	orrs	r3, r2
 8008df2:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008df4:	4b38      	ldr	r3, [pc, #224]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df8:	4a37      	ldr	r2, [pc, #220]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008dfa:	f023 0310 	bic.w	r3, r3, #16
 8008dfe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e04:	4a34      	ldr	r2, [pc, #208]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008e06:	00db      	lsls	r3, r3, #3
 8008e08:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008e0a:	4b33      	ldr	r3, [pc, #204]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e0e:	4a32      	ldr	r2, [pc, #200]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008e10:	f043 0310 	orr.w	r3, r3, #16
 8008e14:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8008e16:	4b30      	ldr	r3, [pc, #192]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e1a:	f023 020c 	bic.w	r2, r3, #12
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e22:	492d      	ldr	r1, [pc, #180]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8008e28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d105      	bne.n	8008e3c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008e30:	4b2a      	ldr	r3, [pc, #168]	@ (8008edc <HAL_RCC_OscConfig+0xccc>)
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	4a29      	ldr	r2, [pc, #164]	@ (8008edc <HAL_RCC_OscConfig+0xccc>)
 8008e36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e3a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8008e3c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d107      	bne.n	8008e54 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8008e44:	4b24      	ldr	r3, [pc, #144]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e4a:	4a23      	ldr	r2, [pc, #140]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008e4c:	f023 0304 	bic.w	r3, r3, #4
 8008e50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e54:	4b20      	ldr	r3, [pc, #128]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e58:	4a1f      	ldr	r2, [pc, #124]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008e5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e5e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8008e60:	4b1d      	ldr	r3, [pc, #116]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a1c      	ldr	r2, [pc, #112]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008e66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e6a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008e6c:	f7fa fe48 	bl	8003b00 <HAL_GetTick>
 8008e70:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008e72:	e008      	b.n	8008e86 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e74:	f7fa fe44 	bl	8003b00 <HAL_GetTick>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d901      	bls.n	8008e86 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8008e82:	2303      	movs	r3, #3
 8008e84:	e099      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008e86:	4b14      	ldr	r3, [pc, #80]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d0f0      	beq.n	8008e74 <HAL_RCC_OscConfig+0xc64>
 8008e92:	e091      	b.n	8008fb8 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008e94:	4b10      	ldr	r3, [pc, #64]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a0f      	ldr	r2, [pc, #60]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008e9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e9e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008ea0:	f7fa fe2e 	bl	8003b00 <HAL_GetTick>
 8008ea4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008ea6:	e008      	b.n	8008eba <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ea8:	f7fa fe2a 	bl	8003b00 <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	d901      	bls.n	8008eba <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e07f      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008eba:	4b07      	ldr	r3, [pc, #28]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1f0      	bne.n	8008ea8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8008ec6:	4b04      	ldr	r3, [pc, #16]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eca:	4a03      	ldr	r2, [pc, #12]	@ (8008ed8 <HAL_RCC_OscConfig+0xcc8>)
 8008ecc:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8008ed0:	f023 0303 	bic.w	r3, r3, #3
 8008ed4:	6293      	str	r3, [r2, #40]	@ 0x28
 8008ed6:	e06f      	b.n	8008fb8 <HAL_RCC_OscConfig+0xda8>
 8008ed8:	46020c00 	.word	0x46020c00
 8008edc:	46020800 	.word	0x46020800
 8008ee0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008ee4:	4b37      	ldr	r3, [pc, #220]	@ (8008fc4 <HAL_RCC_OscConfig+0xdb4>)
 8008ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008eea:	4b36      	ldr	r3, [pc, #216]	@ (8008fc4 <HAL_RCC_OscConfig+0xdb4>)
 8008eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eee:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d039      	beq.n	8008f6c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	f003 0203 	and.w	r2, r3, #3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d132      	bne.n	8008f6c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	0a1b      	lsrs	r3, r3, #8
 8008f0a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f12:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d129      	bne.n	8008f6c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d122      	bne.n	8008f6c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f30:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d11a      	bne.n	8008f6c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	0a5b      	lsrs	r3, r3, #9
 8008f3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f42:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d111      	bne.n	8008f6c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	0c1b      	lsrs	r3, r3, #16
 8008f4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f54:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d108      	bne.n	8008f6c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	0e1b      	lsrs	r3, r3, #24
 8008f5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f66:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d001      	beq.n	8008f70 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e024      	b.n	8008fba <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008f70:	4b14      	ldr	r3, [pc, #80]	@ (8008fc4 <HAL_RCC_OscConfig+0xdb4>)
 8008f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f74:	08db      	lsrs	r3, r3, #3
 8008f76:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d01a      	beq.n	8008fb8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008f82:	4b10      	ldr	r3, [pc, #64]	@ (8008fc4 <HAL_RCC_OscConfig+0xdb4>)
 8008f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f86:	4a0f      	ldr	r2, [pc, #60]	@ (8008fc4 <HAL_RCC_OscConfig+0xdb4>)
 8008f88:	f023 0310 	bic.w	r3, r3, #16
 8008f8c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f8e:	f7fa fdb7 	bl	8003b00 <HAL_GetTick>
 8008f92:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8008f94:	bf00      	nop
 8008f96:	f7fa fdb3 	bl	8003b00 <HAL_GetTick>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d0f9      	beq.n	8008f96 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fa6:	4a07      	ldr	r2, [pc, #28]	@ (8008fc4 <HAL_RCC_OscConfig+0xdb4>)
 8008fa8:	00db      	lsls	r3, r3, #3
 8008faa:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008fac:	4b05      	ldr	r3, [pc, #20]	@ (8008fc4 <HAL_RCC_OscConfig+0xdb4>)
 8008fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb0:	4a04      	ldr	r2, [pc, #16]	@ (8008fc4 <HAL_RCC_OscConfig+0xdb4>)
 8008fb2:	f043 0310 	orr.w	r3, r3, #16
 8008fb6:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3738      	adds	r7, #56	@ 0x38
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	46020c00 	.word	0x46020c00

08008fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d101      	bne.n	8008fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e1d9      	b.n	8009390 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fdc:	4b9b      	ldr	r3, [pc, #620]	@ (800924c <HAL_RCC_ClockConfig+0x284>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 030f 	and.w	r3, r3, #15
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d910      	bls.n	800900c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fea:	4b98      	ldr	r3, [pc, #608]	@ (800924c <HAL_RCC_ClockConfig+0x284>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f023 020f 	bic.w	r2, r3, #15
 8008ff2:	4996      	ldr	r1, [pc, #600]	@ (800924c <HAL_RCC_ClockConfig+0x284>)
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ffa:	4b94      	ldr	r3, [pc, #592]	@ (800924c <HAL_RCC_ClockConfig+0x284>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 030f 	and.w	r3, r3, #15
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	429a      	cmp	r2, r3
 8009006:	d001      	beq.n	800900c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	e1c1      	b.n	8009390 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0310 	and.w	r3, r3, #16
 8009014:	2b00      	cmp	r3, #0
 8009016:	d010      	beq.n	800903a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	695a      	ldr	r2, [r3, #20]
 800901c:	4b8c      	ldr	r3, [pc, #560]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 800901e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009020:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009024:	429a      	cmp	r2, r3
 8009026:	d908      	bls.n	800903a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8009028:	4b89      	ldr	r3, [pc, #548]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 800902a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800902c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	695b      	ldr	r3, [r3, #20]
 8009034:	4986      	ldr	r1, [pc, #536]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 8009036:	4313      	orrs	r3, r2
 8009038:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 0308 	and.w	r3, r3, #8
 8009042:	2b00      	cmp	r3, #0
 8009044:	d012      	beq.n	800906c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	691a      	ldr	r2, [r3, #16]
 800904a:	4b81      	ldr	r3, [pc, #516]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	091b      	lsrs	r3, r3, #4
 8009050:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009054:	429a      	cmp	r2, r3
 8009056:	d909      	bls.n	800906c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009058:	4b7d      	ldr	r3, [pc, #500]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 800905a:	6a1b      	ldr	r3, [r3, #32]
 800905c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	497a      	ldr	r1, [pc, #488]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 8009068:	4313      	orrs	r3, r2
 800906a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0304 	and.w	r3, r3, #4
 8009074:	2b00      	cmp	r3, #0
 8009076:	d010      	beq.n	800909a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68da      	ldr	r2, [r3, #12]
 800907c:	4b74      	ldr	r3, [pc, #464]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 800907e:	6a1b      	ldr	r3, [r3, #32]
 8009080:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009084:	429a      	cmp	r2, r3
 8009086:	d908      	bls.n	800909a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009088:	4b71      	ldr	r3, [pc, #452]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	496e      	ldr	r1, [pc, #440]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 8009096:	4313      	orrs	r3, r2
 8009098:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0302 	and.w	r3, r3, #2
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d010      	beq.n	80090c8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	689a      	ldr	r2, [r3, #8]
 80090aa:	4b69      	ldr	r3, [pc, #420]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	f003 030f 	and.w	r3, r3, #15
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d908      	bls.n	80090c8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80090b6:	4b66      	ldr	r3, [pc, #408]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	f023 020f 	bic.w	r2, r3, #15
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	4963      	ldr	r1, [pc, #396]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0301 	and.w	r3, r3, #1
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f000 80d2 	beq.w	800927a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80090d6:	2300      	movs	r3, #0
 80090d8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d143      	bne.n	800916a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090e2:	4b5b      	ldr	r3, [pc, #364]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 80090e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090e8:	f003 0304 	and.w	r3, r3, #4
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d110      	bne.n	8009112 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80090f0:	4b57      	ldr	r3, [pc, #348]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 80090f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090f6:	4a56      	ldr	r2, [pc, #344]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 80090f8:	f043 0304 	orr.w	r3, r3, #4
 80090fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009100:	4b53      	ldr	r3, [pc, #332]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 8009102:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009106:	f003 0304 	and.w	r3, r3, #4
 800910a:	60bb      	str	r3, [r7, #8]
 800910c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800910e:	2301      	movs	r3, #1
 8009110:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8009112:	f7fa fcf5 	bl	8003b00 <HAL_GetTick>
 8009116:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8009118:	4b4e      	ldr	r3, [pc, #312]	@ (8009254 <HAL_RCC_ClockConfig+0x28c>)
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00f      	beq.n	8009144 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009124:	e008      	b.n	8009138 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8009126:	f7fa fceb 	bl	8003b00 <HAL_GetTick>
 800912a:	4602      	mov	r2, r0
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	2b02      	cmp	r3, #2
 8009132:	d901      	bls.n	8009138 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e12b      	b.n	8009390 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009138:	4b46      	ldr	r3, [pc, #280]	@ (8009254 <HAL_RCC_ClockConfig+0x28c>)
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d0f0      	beq.n	8009126 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009144:	7dfb      	ldrb	r3, [r7, #23]
 8009146:	2b01      	cmp	r3, #1
 8009148:	d107      	bne.n	800915a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800914a:	4b41      	ldr	r3, [pc, #260]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 800914c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009150:	4a3f      	ldr	r2, [pc, #252]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 8009152:	f023 0304 	bic.w	r3, r3, #4
 8009156:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800915a:	4b3d      	ldr	r3, [pc, #244]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d121      	bne.n	80091aa <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e112      	b.n	8009390 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	2b02      	cmp	r3, #2
 8009170:	d107      	bne.n	8009182 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009172:	4b37      	ldr	r3, [pc, #220]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d115      	bne.n	80091aa <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e106      	b.n	8009390 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d107      	bne.n	800919a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800918a:	4b31      	ldr	r3, [pc, #196]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0304 	and.w	r3, r3, #4
 8009192:	2b00      	cmp	r3, #0
 8009194:	d109      	bne.n	80091aa <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e0fa      	b.n	8009390 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800919a:	4b2d      	ldr	r3, [pc, #180]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e0f2      	b.n	8009390 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80091aa:	4b29      	ldr	r3, [pc, #164]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	f023 0203 	bic.w	r2, r3, #3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	4926      	ldr	r1, [pc, #152]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 80091b8:	4313      	orrs	r3, r2
 80091ba:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80091bc:	f7fa fca0 	bl	8003b00 <HAL_GetTick>
 80091c0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	d112      	bne.n	80091f0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80091ca:	e00a      	b.n	80091e2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091cc:	f7fa fc98 	bl	8003b00 <HAL_GetTick>
 80091d0:	4602      	mov	r2, r0
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091da:	4293      	cmp	r3, r2
 80091dc:	d901      	bls.n	80091e2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e0d6      	b.n	8009390 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80091e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 80091e4:	69db      	ldr	r3, [r3, #28]
 80091e6:	f003 030c 	and.w	r3, r3, #12
 80091ea:	2b0c      	cmp	r3, #12
 80091ec:	d1ee      	bne.n	80091cc <HAL_RCC_ClockConfig+0x204>
 80091ee:	e044      	b.n	800927a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d112      	bne.n	800921e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80091f8:	e00a      	b.n	8009210 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091fa:	f7fa fc81 	bl	8003b00 <HAL_GetTick>
 80091fe:	4602      	mov	r2, r0
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009208:	4293      	cmp	r3, r2
 800920a:	d901      	bls.n	8009210 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800920c:	2303      	movs	r3, #3
 800920e:	e0bf      	b.n	8009390 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009210:	4b0f      	ldr	r3, [pc, #60]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	f003 030c 	and.w	r3, r3, #12
 8009218:	2b08      	cmp	r3, #8
 800921a:	d1ee      	bne.n	80091fa <HAL_RCC_ClockConfig+0x232>
 800921c:	e02d      	b.n	800927a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d123      	bne.n	800926e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009226:	e00a      	b.n	800923e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009228:	f7fa fc6a 	bl	8003b00 <HAL_GetTick>
 800922c:	4602      	mov	r2, r0
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009236:	4293      	cmp	r3, r2
 8009238:	d901      	bls.n	800923e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800923a:	2303      	movs	r3, #3
 800923c:	e0a8      	b.n	8009390 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800923e:	4b04      	ldr	r3, [pc, #16]	@ (8009250 <HAL_RCC_ClockConfig+0x288>)
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	f003 030c 	and.w	r3, r3, #12
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1ee      	bne.n	8009228 <HAL_RCC_ClockConfig+0x260>
 800924a:	e016      	b.n	800927a <HAL_RCC_ClockConfig+0x2b2>
 800924c:	40022000 	.word	0x40022000
 8009250:	46020c00 	.word	0x46020c00
 8009254:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009258:	f7fa fc52 	bl	8003b00 <HAL_GetTick>
 800925c:	4602      	mov	r2, r0
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009266:	4293      	cmp	r3, r2
 8009268:	d901      	bls.n	800926e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e090      	b.n	8009390 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800926e:	4b4a      	ldr	r3, [pc, #296]	@ (8009398 <HAL_RCC_ClockConfig+0x3d0>)
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	f003 030c 	and.w	r3, r3, #12
 8009276:	2b04      	cmp	r3, #4
 8009278:	d1ee      	bne.n	8009258 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 0302 	and.w	r3, r3, #2
 8009282:	2b00      	cmp	r3, #0
 8009284:	d010      	beq.n	80092a8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	689a      	ldr	r2, [r3, #8]
 800928a:	4b43      	ldr	r3, [pc, #268]	@ (8009398 <HAL_RCC_ClockConfig+0x3d0>)
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	f003 030f 	and.w	r3, r3, #15
 8009292:	429a      	cmp	r2, r3
 8009294:	d208      	bcs.n	80092a8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8009296:	4b40      	ldr	r3, [pc, #256]	@ (8009398 <HAL_RCC_ClockConfig+0x3d0>)
 8009298:	6a1b      	ldr	r3, [r3, #32]
 800929a:	f023 020f 	bic.w	r2, r3, #15
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	493d      	ldr	r1, [pc, #244]	@ (8009398 <HAL_RCC_ClockConfig+0x3d0>)
 80092a4:	4313      	orrs	r3, r2
 80092a6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092a8:	4b3c      	ldr	r3, [pc, #240]	@ (800939c <HAL_RCC_ClockConfig+0x3d4>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 030f 	and.w	r3, r3, #15
 80092b0:	683a      	ldr	r2, [r7, #0]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d210      	bcs.n	80092d8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092b6:	4b39      	ldr	r3, [pc, #228]	@ (800939c <HAL_RCC_ClockConfig+0x3d4>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f023 020f 	bic.w	r2, r3, #15
 80092be:	4937      	ldr	r1, [pc, #220]	@ (800939c <HAL_RCC_ClockConfig+0x3d4>)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092c6:	4b35      	ldr	r3, [pc, #212]	@ (800939c <HAL_RCC_ClockConfig+0x3d4>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 030f 	and.w	r3, r3, #15
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d001      	beq.n	80092d8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e05b      	b.n	8009390 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 0304 	and.w	r3, r3, #4
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d010      	beq.n	8009306 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	68da      	ldr	r2, [r3, #12]
 80092e8:	4b2b      	ldr	r3, [pc, #172]	@ (8009398 <HAL_RCC_ClockConfig+0x3d0>)
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d208      	bcs.n	8009306 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80092f4:	4b28      	ldr	r3, [pc, #160]	@ (8009398 <HAL_RCC_ClockConfig+0x3d0>)
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	4925      	ldr	r1, [pc, #148]	@ (8009398 <HAL_RCC_ClockConfig+0x3d0>)
 8009302:	4313      	orrs	r3, r2
 8009304:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 0308 	and.w	r3, r3, #8
 800930e:	2b00      	cmp	r3, #0
 8009310:	d012      	beq.n	8009338 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	691a      	ldr	r2, [r3, #16]
 8009316:	4b20      	ldr	r3, [pc, #128]	@ (8009398 <HAL_RCC_ClockConfig+0x3d0>)
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	091b      	lsrs	r3, r3, #4
 800931c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009320:	429a      	cmp	r2, r3
 8009322:	d209      	bcs.n	8009338 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009324:	4b1c      	ldr	r3, [pc, #112]	@ (8009398 <HAL_RCC_ClockConfig+0x3d0>)
 8009326:	6a1b      	ldr	r3, [r3, #32]
 8009328:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	011b      	lsls	r3, r3, #4
 8009332:	4919      	ldr	r1, [pc, #100]	@ (8009398 <HAL_RCC_ClockConfig+0x3d0>)
 8009334:	4313      	orrs	r3, r2
 8009336:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0310 	and.w	r3, r3, #16
 8009340:	2b00      	cmp	r3, #0
 8009342:	d010      	beq.n	8009366 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	695a      	ldr	r2, [r3, #20]
 8009348:	4b13      	ldr	r3, [pc, #76]	@ (8009398 <HAL_RCC_ClockConfig+0x3d0>)
 800934a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800934c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009350:	429a      	cmp	r2, r3
 8009352:	d208      	bcs.n	8009366 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8009354:	4b10      	ldr	r3, [pc, #64]	@ (8009398 <HAL_RCC_ClockConfig+0x3d0>)
 8009356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009358:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	490d      	ldr	r1, [pc, #52]	@ (8009398 <HAL_RCC_ClockConfig+0x3d0>)
 8009362:	4313      	orrs	r3, r2
 8009364:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009366:	f000 f821 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800936a:	4602      	mov	r2, r0
 800936c:	4b0a      	ldr	r3, [pc, #40]	@ (8009398 <HAL_RCC_ClockConfig+0x3d0>)
 800936e:	6a1b      	ldr	r3, [r3, #32]
 8009370:	f003 030f 	and.w	r3, r3, #15
 8009374:	490a      	ldr	r1, [pc, #40]	@ (80093a0 <HAL_RCC_ClockConfig+0x3d8>)
 8009376:	5ccb      	ldrb	r3, [r1, r3]
 8009378:	fa22 f303 	lsr.w	r3, r2, r3
 800937c:	4a09      	ldr	r2, [pc, #36]	@ (80093a4 <HAL_RCC_ClockConfig+0x3dc>)
 800937e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009380:	4b09      	ldr	r3, [pc, #36]	@ (80093a8 <HAL_RCC_ClockConfig+0x3e0>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4618      	mov	r0, r3
 8009386:	f7fa fa2f 	bl	80037e8 <HAL_InitTick>
 800938a:	4603      	mov	r3, r0
 800938c:	73fb      	strb	r3, [r7, #15]

  return status;
 800938e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	46020c00 	.word	0x46020c00
 800939c:	40022000 	.word	0x40022000
 80093a0:	0800e2c4 	.word	0x0800e2c4
 80093a4:	20000000 	.word	0x20000000
 80093a8:	20000004 	.word	0x20000004

080093ac <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b08b      	sub	sp, #44	@ 0x2c
 80093b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80093b6:	2300      	movs	r3, #0
 80093b8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80093ba:	4b78      	ldr	r3, [pc, #480]	@ (800959c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	f003 030c 	and.w	r3, r3, #12
 80093c2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80093c4:	4b75      	ldr	r3, [pc, #468]	@ (800959c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093c8:	f003 0303 	and.w	r3, r3, #3
 80093cc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d005      	beq.n	80093e0 <HAL_RCC_GetSysClockFreq+0x34>
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	2b0c      	cmp	r3, #12
 80093d8:	d121      	bne.n	800941e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d11e      	bne.n	800941e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80093e0:	4b6e      	ldr	r3, [pc, #440]	@ (800959c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d107      	bne.n	80093fc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80093ec:	4b6b      	ldr	r3, [pc, #428]	@ (800959c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80093f2:	0b1b      	lsrs	r3, r3, #12
 80093f4:	f003 030f 	and.w	r3, r3, #15
 80093f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80093fa:	e005      	b.n	8009408 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80093fc:	4b67      	ldr	r3, [pc, #412]	@ (800959c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	0f1b      	lsrs	r3, r3, #28
 8009402:	f003 030f 	and.w	r3, r3, #15
 8009406:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009408:	4a65      	ldr	r2, [pc, #404]	@ (80095a0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800940a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009410:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d110      	bne.n	800943a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800941c:	e00d      	b.n	800943a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800941e:	4b5f      	ldr	r3, [pc, #380]	@ (800959c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009420:	69db      	ldr	r3, [r3, #28]
 8009422:	f003 030c 	and.w	r3, r3, #12
 8009426:	2b04      	cmp	r3, #4
 8009428:	d102      	bne.n	8009430 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800942a:	4b5e      	ldr	r3, [pc, #376]	@ (80095a4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800942c:	623b      	str	r3, [r7, #32]
 800942e:	e004      	b.n	800943a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	2b08      	cmp	r3, #8
 8009434:	d101      	bne.n	800943a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009436:	4b5b      	ldr	r3, [pc, #364]	@ (80095a4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8009438:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	2b0c      	cmp	r3, #12
 800943e:	f040 80a5 	bne.w	800958c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009442:	4b56      	ldr	r3, [pc, #344]	@ (800959c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009446:	f003 0303 	and.w	r3, r3, #3
 800944a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800944c:	4b53      	ldr	r3, [pc, #332]	@ (800959c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800944e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009450:	0a1b      	lsrs	r3, r3, #8
 8009452:	f003 030f 	and.w	r3, r3, #15
 8009456:	3301      	adds	r3, #1
 8009458:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800945a:	4b50      	ldr	r3, [pc, #320]	@ (800959c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800945c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800945e:	091b      	lsrs	r3, r3, #4
 8009460:	f003 0301 	and.w	r3, r3, #1
 8009464:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009466:	4b4d      	ldr	r3, [pc, #308]	@ (800959c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800946a:	08db      	lsrs	r3, r3, #3
 800946c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009470:	68ba      	ldr	r2, [r7, #8]
 8009472:	fb02 f303 	mul.w	r3, r2, r3
 8009476:	ee07 3a90 	vmov	s15, r3
 800947a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	2b02      	cmp	r3, #2
 8009486:	d003      	beq.n	8009490 <HAL_RCC_GetSysClockFreq+0xe4>
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	2b03      	cmp	r3, #3
 800948c:	d022      	beq.n	80094d4 <HAL_RCC_GetSysClockFreq+0x128>
 800948e:	e043      	b.n	8009518 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	ee07 3a90 	vmov	s15, r3
 8009496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800949a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80095a8 <HAL_RCC_GetSysClockFreq+0x1fc>
 800949e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094a2:	4b3e      	ldr	r3, [pc, #248]	@ (800959c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80094a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094aa:	ee07 3a90 	vmov	s15, r3
 80094ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80094b2:	ed97 6a01 	vldr	s12, [r7, #4]
 80094b6:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80095ac <HAL_RCC_GetSysClockFreq+0x200>
 80094ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80094be:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80094c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80094ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094d2:	e046      	b.n	8009562 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	ee07 3a90 	vmov	s15, r3
 80094da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094de:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80095a8 <HAL_RCC_GetSysClockFreq+0x1fc>
 80094e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094e6:	4b2d      	ldr	r3, [pc, #180]	@ (800959c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80094e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ee:	ee07 3a90 	vmov	s15, r3
 80094f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80094f6:	ed97 6a01 	vldr	s12, [r7, #4]
 80094fa:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80095ac <HAL_RCC_GetSysClockFreq+0x200>
 80094fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009502:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800950a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800950e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009516:	e024      	b.n	8009562 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951a:	ee07 3a90 	vmov	s15, r3
 800951e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	ee07 3a90 	vmov	s15, r3
 8009528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009530:	4b1a      	ldr	r3, [pc, #104]	@ (800959c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009538:	ee07 3a90 	vmov	s15, r3
 800953c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009540:	ed97 6a01 	vldr	s12, [r7, #4]
 8009544:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80095ac <HAL_RCC_GetSysClockFreq+0x200>
 8009548:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800954c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009550:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009554:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800955c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009560:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8009562:	4b0e      	ldr	r3, [pc, #56]	@ (800959c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009566:	0e1b      	lsrs	r3, r3, #24
 8009568:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800956c:	3301      	adds	r3, #1
 800956e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	ee07 3a90 	vmov	s15, r3
 8009576:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800957a:	edd7 6a07 	vldr	s13, [r7, #28]
 800957e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009586:	ee17 3a90 	vmov	r3, s15
 800958a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800958c:	6a3b      	ldr	r3, [r7, #32]
}
 800958e:	4618      	mov	r0, r3
 8009590:	372c      	adds	r7, #44	@ 0x2c
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop
 800959c:	46020c00 	.word	0x46020c00
 80095a0:	0800e2dc 	.word	0x0800e2dc
 80095a4:	00f42400 	.word	0x00f42400
 80095a8:	4b742400 	.word	0x4b742400
 80095ac:	46000000 	.word	0x46000000

080095b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80095b4:	f7ff fefa 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 80095b8:	4602      	mov	r2, r0
 80095ba:	4b07      	ldr	r3, [pc, #28]	@ (80095d8 <HAL_RCC_GetHCLKFreq+0x28>)
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	f003 030f 	and.w	r3, r3, #15
 80095c2:	4906      	ldr	r1, [pc, #24]	@ (80095dc <HAL_RCC_GetHCLKFreq+0x2c>)
 80095c4:	5ccb      	ldrb	r3, [r1, r3]
 80095c6:	fa22 f303 	lsr.w	r3, r2, r3
 80095ca:	4a05      	ldr	r2, [pc, #20]	@ (80095e0 <HAL_RCC_GetHCLKFreq+0x30>)
 80095cc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80095ce:	4b04      	ldr	r3, [pc, #16]	@ (80095e0 <HAL_RCC_GetHCLKFreq+0x30>)
 80095d0:	681b      	ldr	r3, [r3, #0]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	46020c00 	.word	0x46020c00
 80095dc:	0800e2c4 	.word	0x0800e2c4
 80095e0:	20000000 	.word	0x20000000

080095e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80095e8:	f7ff ffe2 	bl	80095b0 <HAL_RCC_GetHCLKFreq>
 80095ec:	4602      	mov	r2, r0
 80095ee:	4b05      	ldr	r3, [pc, #20]	@ (8009604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80095f0:	6a1b      	ldr	r3, [r3, #32]
 80095f2:	091b      	lsrs	r3, r3, #4
 80095f4:	f003 0307 	and.w	r3, r3, #7
 80095f8:	4903      	ldr	r1, [pc, #12]	@ (8009608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095fa:	5ccb      	ldrb	r3, [r1, r3]
 80095fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009600:	4618      	mov	r0, r3
 8009602:	bd80      	pop	{r7, pc}
 8009604:	46020c00 	.word	0x46020c00
 8009608:	0800e2d4 	.word	0x0800e2d4

0800960c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8009610:	f7ff ffce 	bl	80095b0 <HAL_RCC_GetHCLKFreq>
 8009614:	4602      	mov	r2, r0
 8009616:	4b05      	ldr	r3, [pc, #20]	@ (800962c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009618:	6a1b      	ldr	r3, [r3, #32]
 800961a:	0a1b      	lsrs	r3, r3, #8
 800961c:	f003 0307 	and.w	r3, r3, #7
 8009620:	4903      	ldr	r1, [pc, #12]	@ (8009630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009622:	5ccb      	ldrb	r3, [r1, r3]
 8009624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009628:	4618      	mov	r0, r3
 800962a:	bd80      	pop	{r7, pc}
 800962c:	46020c00 	.word	0x46020c00
 8009630:	0800e2d4 	.word	0x0800e2d4

08009634 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8009638:	f7ff ffba 	bl	80095b0 <HAL_RCC_GetHCLKFreq>
 800963c:	4602      	mov	r2, r0
 800963e:	4b05      	ldr	r3, [pc, #20]	@ (8009654 <HAL_RCC_GetPCLK3Freq+0x20>)
 8009640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009642:	091b      	lsrs	r3, r3, #4
 8009644:	f003 0307 	and.w	r3, r3, #7
 8009648:	4903      	ldr	r1, [pc, #12]	@ (8009658 <HAL_RCC_GetPCLK3Freq+0x24>)
 800964a:	5ccb      	ldrb	r3, [r1, r3]
 800964c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009650:	4618      	mov	r0, r3
 8009652:	bd80      	pop	{r7, pc}
 8009654:	46020c00 	.word	0x46020c00
 8009658:	0800e2d4 	.word	0x0800e2d4

0800965c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	221f      	movs	r2, #31
 800966a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800966c:	4b15      	ldr	r3, [pc, #84]	@ (80096c4 <HAL_RCC_GetClockConfig+0x68>)
 800966e:	69db      	ldr	r3, [r3, #28]
 8009670:	f003 0203 	and.w	r2, r3, #3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8009678:	4b12      	ldr	r3, [pc, #72]	@ (80096c4 <HAL_RCC_GetClockConfig+0x68>)
 800967a:	6a1b      	ldr	r3, [r3, #32]
 800967c:	f003 020f 	and.w	r2, r3, #15
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8009684:	4b0f      	ldr	r3, [pc, #60]	@ (80096c4 <HAL_RCC_GetClockConfig+0x68>)
 8009686:	6a1b      	ldr	r3, [r3, #32]
 8009688:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8009690:	4b0c      	ldr	r3, [pc, #48]	@ (80096c4 <HAL_RCC_GetClockConfig+0x68>)
 8009692:	6a1b      	ldr	r3, [r3, #32]
 8009694:	091b      	lsrs	r3, r3, #4
 8009696:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800969e:	4b09      	ldr	r3, [pc, #36]	@ (80096c4 <HAL_RCC_GetClockConfig+0x68>)
 80096a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80096aa:	4b07      	ldr	r3, [pc, #28]	@ (80096c8 <HAL_RCC_GetClockConfig+0x6c>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 020f 	and.w	r2, r3, #15
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	601a      	str	r2, [r3, #0]
}
 80096b6:	bf00      	nop
 80096b8:	370c      	adds	r7, #12
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	46020c00 	.word	0x46020c00
 80096c8:	40022000 	.word	0x40022000

080096cc <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80096cc:	b480      	push	{r7}
 80096ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80096d0:	4b05      	ldr	r3, [pc, #20]	@ (80096e8 <HAL_RCC_EnableCSS+0x1c>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a04      	ldr	r2, [pc, #16]	@ (80096e8 <HAL_RCC_EnableCSS+0x1c>)
 80096d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80096da:	6013      	str	r3, [r2, #0]
}
 80096dc:	bf00      	nop
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	46020c00 	.word	0x46020c00

080096ec <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80096f0:	4b07      	ldr	r3, [pc, #28]	@ (8009710 <HAL_RCC_NMI_IRQHandler+0x24>)
 80096f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096fc:	d105      	bne.n	800970a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80096fe:	f000 f809 	bl	8009714 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009702:	4b03      	ldr	r3, [pc, #12]	@ (8009710 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009708:	659a      	str	r2, [r3, #88]	@ 0x58
  }
}
 800970a:	bf00      	nop
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	46020c00 	.word	0x46020c00

08009714 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009714:	b480      	push	{r7}
 8009716:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8009718:	bf00      	nop
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
	...

08009724 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800972c:	4b3e      	ldr	r3, [pc, #248]	@ (8009828 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800972e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009732:	f003 0304 	and.w	r3, r3, #4
 8009736:	2b00      	cmp	r3, #0
 8009738:	d003      	beq.n	8009742 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800973a:	f7fe fcfb 	bl	8008134 <HAL_PWREx_GetVoltageRange>
 800973e:	6178      	str	r0, [r7, #20]
 8009740:	e019      	b.n	8009776 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009742:	4b39      	ldr	r3, [pc, #228]	@ (8009828 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009744:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009748:	4a37      	ldr	r2, [pc, #220]	@ (8009828 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800974a:	f043 0304 	orr.w	r3, r3, #4
 800974e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009752:	4b35      	ldr	r3, [pc, #212]	@ (8009828 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009758:	f003 0304 	and.w	r3, r3, #4
 800975c:	60fb      	str	r3, [r7, #12]
 800975e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009760:	f7fe fce8 	bl	8008134 <HAL_PWREx_GetVoltageRange>
 8009764:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009766:	4b30      	ldr	r3, [pc, #192]	@ (8009828 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009768:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800976c:	4a2e      	ldr	r2, [pc, #184]	@ (8009828 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800976e:	f023 0304 	bic.w	r3, r3, #4
 8009772:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800977c:	d003      	beq.n	8009786 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009784:	d109      	bne.n	800979a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800978c:	d202      	bcs.n	8009794 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800978e:	2301      	movs	r3, #1
 8009790:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009792:	e033      	b.n	80097fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8009794:	2300      	movs	r3, #0
 8009796:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009798:	e030      	b.n	80097fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097a0:	d208      	bcs.n	80097b4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097a8:	d102      	bne.n	80097b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80097aa:	2303      	movs	r3, #3
 80097ac:	613b      	str	r3, [r7, #16]
 80097ae:	e025      	b.n	80097fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e035      	b.n	8009820 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097ba:	d90f      	bls.n	80097dc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d109      	bne.n	80097d6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097c8:	d902      	bls.n	80097d0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80097ca:	2300      	movs	r3, #0
 80097cc:	613b      	str	r3, [r7, #16]
 80097ce:	e015      	b.n	80097fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80097d0:	2301      	movs	r3, #1
 80097d2:	613b      	str	r3, [r7, #16]
 80097d4:	e012      	b.n	80097fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80097d6:	2300      	movs	r3, #0
 80097d8:	613b      	str	r3, [r7, #16]
 80097da:	e00f      	b.n	80097fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097e2:	d109      	bne.n	80097f8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097ea:	d102      	bne.n	80097f2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80097ec:	2301      	movs	r3, #1
 80097ee:	613b      	str	r3, [r7, #16]
 80097f0:	e004      	b.n	80097fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80097f2:	2302      	movs	r3, #2
 80097f4:	613b      	str	r3, [r7, #16]
 80097f6:	e001      	b.n	80097fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80097f8:	2301      	movs	r3, #1
 80097fa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80097fc:	4b0b      	ldr	r3, [pc, #44]	@ (800982c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f023 020f 	bic.w	r2, r3, #15
 8009804:	4909      	ldr	r1, [pc, #36]	@ (800982c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	4313      	orrs	r3, r2
 800980a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800980c:	4b07      	ldr	r3, [pc, #28]	@ (800982c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 030f 	and.w	r3, r3, #15
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	429a      	cmp	r2, r3
 8009818:	d001      	beq.n	800981e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e000      	b.n	8009820 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	46020c00 	.word	0x46020c00
 800982c:	40022000 	.word	0x40022000

08009830 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8009830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009834:	b0c8      	sub	sp, #288	@ 0x120
 8009836:	af00      	add	r7, sp, #0
 8009838:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800983c:	2300      	movs	r3, #0
 800983e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009842:	2300      	movs	r3, #0
 8009844:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800984c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009850:	f002 0401 	and.w	r4, r2, #1
 8009854:	2500      	movs	r5, #0
 8009856:	ea54 0305 	orrs.w	r3, r4, r5
 800985a:	d00b      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800985c:	4bd5      	ldr	r3, [pc, #852]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800985e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009862:	f023 0103 	bic.w	r1, r3, #3
 8009866:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800986a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800986c:	4ad1      	ldr	r2, [pc, #836]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800986e:	430b      	orrs	r3, r1
 8009870:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987c:	f002 0802 	and.w	r8, r2, #2
 8009880:	f04f 0900 	mov.w	r9, #0
 8009884:	ea58 0309 	orrs.w	r3, r8, r9
 8009888:	d00b      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800988a:	4bca      	ldr	r3, [pc, #808]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800988c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009890:	f023 010c 	bic.w	r1, r3, #12
 8009894:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800989a:	4ac6      	ldr	r2, [pc, #792]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800989c:	430b      	orrs	r3, r1
 800989e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80098a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098aa:	f002 0a04 	and.w	sl, r2, #4
 80098ae:	f04f 0b00 	mov.w	fp, #0
 80098b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80098b6:	d00b      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80098b8:	4bbe      	ldr	r3, [pc, #760]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80098be:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80098c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098c8:	4aba      	ldr	r2, [pc, #744]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098ca:	430b      	orrs	r3, r1
 80098cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80098d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d8:	f002 0308 	and.w	r3, r2, #8
 80098dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80098e0:	2300      	movs	r3, #0
 80098e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80098e6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80098ea:	460b      	mov	r3, r1
 80098ec:	4313      	orrs	r3, r2
 80098ee:	d00b      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80098f0:	4bb0      	ldr	r3, [pc, #704]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80098f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80098fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009900:	4aac      	ldr	r2, [pc, #688]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009902:	430b      	orrs	r3, r1
 8009904:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009908:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800990c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009910:	f002 0310 	and.w	r3, r2, #16
 8009914:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009918:	2300      	movs	r3, #0
 800991a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800991e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009922:	460b      	mov	r3, r1
 8009924:	4313      	orrs	r3, r2
 8009926:	d00b      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8009928:	4ba2      	ldr	r3, [pc, #648]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800992a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800992e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009932:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009938:	4a9e      	ldr	r2, [pc, #632]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800993a:	430b      	orrs	r3, r1
 800993c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009940:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009948:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800994c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009950:	2300      	movs	r3, #0
 8009952:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009956:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800995a:	460b      	mov	r3, r1
 800995c:	4313      	orrs	r3, r2
 800995e:	d00b      	beq.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8009960:	4b94      	ldr	r3, [pc, #592]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009962:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009966:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800996a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800996e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009970:	4a90      	ldr	r2, [pc, #576]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009972:	430b      	orrs	r3, r1
 8009974:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	f002 0320 	and.w	r3, r2, #32
 8009984:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009988:	2300      	movs	r3, #0
 800998a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800998e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009992:	460b      	mov	r3, r1
 8009994:	4313      	orrs	r3, r2
 8009996:	d00b      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8009998:	4b86      	ldr	r3, [pc, #536]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800999a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800999e:	f023 0107 	bic.w	r1, r3, #7
 80099a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099a8:	4a82      	ldr	r2, [pc, #520]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099aa:	430b      	orrs	r3, r1
 80099ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80099b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80099bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80099c0:	2300      	movs	r3, #0
 80099c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80099c6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4313      	orrs	r3, r2
 80099ce:	d00b      	beq.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80099d0:	4b78      	ldr	r3, [pc, #480]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80099d6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80099da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099e0:	4a74      	ldr	r2, [pc, #464]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099e2:	430b      	orrs	r3, r1
 80099e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80099e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80099f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80099f8:	2300      	movs	r3, #0
 80099fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80099fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009a02:	460b      	mov	r3, r1
 8009a04:	4313      	orrs	r3, r2
 8009a06:	d00b      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8009a08:	4b6a      	ldr	r3, [pc, #424]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a18:	4a66      	ldr	r2, [pc, #408]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a1a:	430b      	orrs	r3, r1
 8009a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a28:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8009a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a30:	2300      	movs	r3, #0
 8009a32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009a36:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	d00b      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8009a40:	4b5c      	ldr	r3, [pc, #368]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a50:	4a58      	ldr	r2, [pc, #352]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a52:	430b      	orrs	r3, r1
 8009a54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a60:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009a64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009a6e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009a72:	460b      	mov	r3, r1
 8009a74:	4313      	orrs	r3, r2
 8009a76:	d00b      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8009a78:	4b4e      	ldr	r3, [pc, #312]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a7e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8009a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a88:	4a4a      	ldr	r2, [pc, #296]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a8a:	430b      	orrs	r3, r1
 8009a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8009a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a98:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009a9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009aa6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009aaa:	460b      	mov	r3, r1
 8009aac:	4313      	orrs	r3, r2
 8009aae:	d00b      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8009ab0:	4b40      	ldr	r3, [pc, #256]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009ab2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ab6:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8009aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009abe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ac0:	4a3c      	ldr	r2, [pc, #240]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009ac2:	430b      	orrs	r3, r1
 8009ac4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8009ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009ade:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	d00c      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8009ae8:	4b32      	ldr	r3, [pc, #200]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009aea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009aee:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009afa:	4a2e      	ldr	r2, [pc, #184]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009afc:	430b      	orrs	r3, r1
 8009afe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0a:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8009b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b12:	2300      	movs	r3, #0
 8009b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b18:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	d00c      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8009b22:	4b24      	ldr	r3, [pc, #144]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b28:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8009b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b34:	4a1f      	ldr	r2, [pc, #124]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b36:	430b      	orrs	r3, r1
 8009b38:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b44:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009b48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009b52:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009b56:	460b      	mov	r3, r1
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	d00c      	beq.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8009b5c:	4b15      	ldr	r3, [pc, #84]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b62:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8009b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b6e:	4a11      	ldr	r2, [pc, #68]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b70:	430b      	orrs	r3, r1
 8009b72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8009b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009b82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b86:	2300      	movs	r3, #0
 8009b88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009b8c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009b90:	460b      	mov	r3, r1
 8009b92:	4313      	orrs	r3, r2
 8009b94:	d010      	beq.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8009b96:	4b07      	ldr	r3, [pc, #28]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b9c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ba8:	4a02      	ldr	r2, [pc, #8]	@ (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009baa:	430b      	orrs	r3, r1
 8009bac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009bb0:	e002      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8009bb2:	bf00      	nop
 8009bb4:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009bc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009bce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	d04c      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009be0:	2b80      	cmp	r3, #128	@ 0x80
 8009be2:	d02d      	beq.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009be4:	2b80      	cmp	r3, #128	@ 0x80
 8009be6:	d827      	bhi.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009be8:	2b60      	cmp	r3, #96	@ 0x60
 8009bea:	d02b      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009bec:	2b60      	cmp	r3, #96	@ 0x60
 8009bee:	d823      	bhi.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009bf0:	2b40      	cmp	r3, #64	@ 0x40
 8009bf2:	d006      	beq.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8009bf4:	2b40      	cmp	r3, #64	@ 0x40
 8009bf6:	d81f      	bhi.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d009      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009bfc:	2b20      	cmp	r3, #32
 8009bfe:	d011      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009c00:	e01a      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009c02:	4bc0      	ldr	r3, [pc, #768]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c06:	4abf      	ldr	r2, [pc, #764]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c0c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009c0e:	e01a      	b.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c14:	3308      	adds	r3, #8
 8009c16:	4618      	mov	r0, r3
 8009c18:	f002 fce8 	bl	800c5ec <RCCEx_PLL2_Config>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009c22:	e010      	b.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c28:	332c      	adds	r3, #44	@ 0x2c
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f002 fd76 	bl	800c71c <RCCEx_PLL3_Config>
 8009c30:	4603      	mov	r3, r0
 8009c32:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009c36:	e006      	b.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009c3e:	e002      	b.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009c40:	bf00      	nop
 8009c42:	e000      	b.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c46:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10d      	bne.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8009c4e:	4bad      	ldr	r3, [pc, #692]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009c54:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8009c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c60:	4aa8      	ldr	r2, [pc, #672]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c62:	430b      	orrs	r3, r1
 8009c64:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009c68:	e003      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c6a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009c6e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009c7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c82:	2300      	movs	r3, #0
 8009c84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c88:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	d053      	beq.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8009c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c9e:	d033      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8009ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ca4:	d82c      	bhi.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009ca6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009caa:	d02f      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8009cac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cb0:	d826      	bhi.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009cb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cb6:	d008      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8009cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cbc:	d820      	bhi.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00a      	beq.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cc6:	d011      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009cc8:	e01a      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009cca:	4b8e      	ldr	r3, [pc, #568]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cce:	4a8d      	ldr	r2, [pc, #564]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009cd4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009cd6:	e01a      	b.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cdc:	3308      	adds	r3, #8
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f002 fc84 	bl	800c5ec <RCCEx_PLL2_Config>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009cea:	e010      	b.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cf0:	332c      	adds	r3, #44	@ 0x2c
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f002 fd12 	bl	800c71c <RCCEx_PLL3_Config>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009cfe:	e006      	b.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009d06:	e002      	b.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009d08:	bf00      	nop
 8009d0a:	e000      	b.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d0e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d10d      	bne.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8009d16:	4b7b      	ldr	r3, [pc, #492]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009d18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d1c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8009d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009d28:	4a76      	ldr	r2, [pc, #472]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009d2a:	430b      	orrs	r3, r1
 8009d2c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009d30:	e003      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d32:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009d36:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8009d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d42:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009d46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009d50:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009d54:	460b      	mov	r3, r1
 8009d56:	4313      	orrs	r3, r2
 8009d58:	d046      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8009d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009d62:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009d66:	d028      	beq.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009d68:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009d6c:	d821      	bhi.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009d6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d72:	d022      	beq.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009d74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d78:	d81b      	bhi.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009d7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d7e:	d01c      	beq.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009d80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d84:	d815      	bhi.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009d86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d8a:	d008      	beq.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8009d8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d90:	d80f      	bhi.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d011      	beq.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d9a:	d00e      	beq.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009d9c:	e009      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009da2:	3308      	adds	r3, #8
 8009da4:	4618      	mov	r0, r3
 8009da6:	f002 fc21 	bl	800c5ec <RCCEx_PLL2_Config>
 8009daa:	4603      	mov	r3, r0
 8009dac:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009db0:	e004      	b.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009db8:	e000      	b.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8009dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dbc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10d      	bne.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009dc4:	4b4f      	ldr	r3, [pc, #316]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009dc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009dca:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009dd6:	4a4b      	ldr	r2, [pc, #300]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009dd8:	430b      	orrs	r3, r1
 8009dda:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009dde:	e003      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009de4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009df4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009df8:	2300      	movs	r3, #0
 8009dfa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009dfe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009e02:	460b      	mov	r3, r1
 8009e04:	4313      	orrs	r3, r2
 8009e06:	d03f      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8009e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e10:	2b04      	cmp	r3, #4
 8009e12:	d81e      	bhi.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8009e14:	a201      	add	r2, pc, #4	@ (adr r2, 8009e1c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1a:	bf00      	nop
 8009e1c:	08009e5b 	.word	0x08009e5b
 8009e20:	08009e31 	.word	0x08009e31
 8009e24:	08009e3f 	.word	0x08009e3f
 8009e28:	08009e5b 	.word	0x08009e5b
 8009e2c:	08009e5b 	.word	0x08009e5b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e30:	4b34      	ldr	r3, [pc, #208]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e34:	4a33      	ldr	r2, [pc, #204]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e3a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009e3c:	e00e      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e42:	332c      	adds	r3, #44	@ 0x2c
 8009e44:	4618      	mov	r0, r3
 8009e46:	f002 fc69 	bl	800c71c <RCCEx_PLL3_Config>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009e50:	e004      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009e58:	e000      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 8009e5a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009e5c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10d      	bne.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8009e64:	4b27      	ldr	r3, [pc, #156]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009e6a:	f023 0107 	bic.w	r1, r3, #7
 8009e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e76:	4a23      	ldr	r2, [pc, #140]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e78:	430b      	orrs	r3, r1
 8009e7a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009e7e:	e003      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e80:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009e84:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8009e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e90:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009e94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e96:	2300      	movs	r3, #0
 8009e98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e9a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	d04c      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8009ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009eac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009eb0:	d02a      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8009eb2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009eb6:	d821      	bhi.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009eb8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ebc:	d026      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8009ebe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ec2:	d81b      	bhi.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009ec4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ec8:	d00e      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009eca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ece:	d815      	bhi.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d01d      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8009ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ed8:	d110      	bne.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009eda:	4b0a      	ldr	r3, [pc, #40]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ede:	4a09      	ldr	r2, [pc, #36]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ee4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009ee6:	e014      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eec:	332c      	adds	r3, #44	@ 0x2c
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f002 fc14 	bl	800c71c <RCCEx_PLL3_Config>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009efa:	e00a      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009f02:	e006      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8009f04:	46020c00 	.word	0x46020c00
        break;
 8009f08:	bf00      	nop
 8009f0a:	e002      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8009f0c:	bf00      	nop
 8009f0e:	e000      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8009f10:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009f12:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10d      	bne.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8009f1a:	4baf      	ldr	r3, [pc, #700]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009f20:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f2c:	4aaa      	ldr	r2, [pc, #680]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f2e:	430b      	orrs	r3, r1
 8009f30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009f34:	e003      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f36:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009f3a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009f4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009f50:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009f54:	460b      	mov	r3, r1
 8009f56:	4313      	orrs	r3, r2
 8009f58:	f000 80b5 	beq.w	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f62:	4b9d      	ldr	r3, [pc, #628]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f68:	f003 0304 	and.w	r3, r3, #4
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d113      	bne.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f70:	4b99      	ldr	r3, [pc, #612]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f76:	4a98      	ldr	r2, [pc, #608]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f78:	f043 0304 	orr.w	r3, r3, #4
 8009f7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009f80:	4b95      	ldr	r3, [pc, #596]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f86:	f003 0304 	and.w	r3, r3, #4
 8009f8a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8009f8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 8009f92:	2301      	movs	r3, #1
 8009f94:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009f98:	4b90      	ldr	r3, [pc, #576]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f9c:	4a8f      	ldr	r2, [pc, #572]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009f9e:	f043 0301 	orr.w	r3, r3, #1
 8009fa2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009fa4:	f7f9 fdac 	bl	8003b00 <HAL_GetTick>
 8009fa8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009fac:	e00b      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fae:	f7f9 fda7 	bl	8003b00 <HAL_GetTick>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d903      	bls.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009fc4:	e005      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009fc6:	4b85      	ldr	r3, [pc, #532]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d0ed      	beq.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 8009fd2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d165      	bne.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009fda:	4b7f      	ldr	r3, [pc, #508]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fe0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fe4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d023      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8009ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ff4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8009ff8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d01b      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a000:	4b75      	ldr	r3, [pc, #468]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a002:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a006:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a00a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a00e:	4b72      	ldr	r3, [pc, #456]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a014:	4a70      	ldr	r2, [pc, #448]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a016:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a01a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a01e:	4b6e      	ldr	r3, [pc, #440]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a024:	4a6c      	ldr	r2, [pc, #432]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a02a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a02e:	4a6a      	ldr	r2, [pc, #424]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a030:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a034:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a038:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	2b00      	cmp	r3, #0
 800a042:	d019      	beq.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a044:	f7f9 fd5c 	bl	8003b00 <HAL_GetTick>
 800a048:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a04c:	e00d      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a04e:	f7f9 fd57 	bl	8003b00 <HAL_GetTick>
 800a052:	4602      	mov	r2, r0
 800a054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a058:	1ad2      	subs	r2, r2, r3
 800a05a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a05e:	429a      	cmp	r2, r3
 800a060:	d903      	bls.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800a062:	2303      	movs	r3, #3
 800a064:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800a068:	e006      	b.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a06a:	4b5b      	ldr	r3, [pc, #364]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a06c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a070:	f003 0302 	and.w	r3, r3, #2
 800a074:	2b00      	cmp	r3, #0
 800a076:	d0ea      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800a078:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10d      	bne.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800a080:	4b55      	ldr	r3, [pc, #340]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a086:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a08a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a08e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800a092:	4a51      	ldr	r2, [pc, #324]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a094:	430b      	orrs	r3, r1
 800a096:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a09a:	e008      	b.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a09c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a0a0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800a0a4:	e003      	b.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0a6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a0aa:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a0ae:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d107      	bne.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0b6:	4b48      	ldr	r3, [pc, #288]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a0b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a0bc:	4a46      	ldr	r2, [pc, #280]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a0be:	f023 0304 	bic.w	r3, r3, #4
 800a0c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800a0c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a0d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a0d8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a0dc:	460b      	mov	r3, r1
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	d042      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800a0e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a0ea:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a0ee:	d022      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800a0f0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a0f4:	d81b      	bhi.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a0f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0fa:	d011      	beq.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800a0fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a100:	d815      	bhi.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a102:	2b00      	cmp	r3, #0
 800a104:	d019      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800a106:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a10a:	d110      	bne.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a10c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a110:	3308      	adds	r3, #8
 800a112:	4618      	mov	r0, r3
 800a114:	f002 fa6a 	bl	800c5ec <RCCEx_PLL2_Config>
 800a118:	4603      	mov	r3, r0
 800a11a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a11e:	e00d      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a120:	4b2d      	ldr	r3, [pc, #180]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a124:	4a2c      	ldr	r2, [pc, #176]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a126:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a12a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800a12c:	e006      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a134:	e002      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800a136:	bf00      	nop
 800a138:	e000      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800a13a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a13c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10d      	bne.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800a144:	4b24      	ldr	r3, [pc, #144]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a14a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800a14e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a152:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a156:	4a20      	ldr	r2, [pc, #128]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a158:	430b      	orrs	r3, r1
 800a15a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a15e:	e003      	b.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a160:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a164:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a168:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a170:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a174:	663b      	str	r3, [r7, #96]	@ 0x60
 800a176:	2300      	movs	r3, #0
 800a178:	667b      	str	r3, [r7, #100]	@ 0x64
 800a17a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a17e:	460b      	mov	r3, r1
 800a180:	4313      	orrs	r3, r2
 800a182:	d031      	beq.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800a184:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a188:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a18c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a190:	d00b      	beq.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800a192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a196:	d804      	bhi.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d008      	beq.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800a19c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1a0:	d007      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a1a8:	e004      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a1aa:	bf00      	nop
 800a1ac:	e002      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a1ae:	bf00      	nop
 800a1b0:	e000      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a1b2:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a1b4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d111      	bne.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800a1bc:	4b06      	ldr	r3, [pc, #24]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a1c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a1c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a1ce:	4a02      	ldr	r2, [pc, #8]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1d0:	430b      	orrs	r3, r1
 800a1d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a1d6:	e007      	b.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800a1d8:	46020c00 	.word	0x46020c00
 800a1dc:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a1e4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800a1e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f0:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a1f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a1fe:	460b      	mov	r3, r1
 800a200:	4313      	orrs	r3, r2
 800a202:	d00c      	beq.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800a204:	4bb2      	ldr	r3, [pc, #712]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a206:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a20a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800a20e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a212:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a216:	4aae      	ldr	r2, [pc, #696]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a218:	430b      	orrs	r3, r1
 800a21a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800a21e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a226:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a22a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a22c:	2300      	movs	r3, #0
 800a22e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a230:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a234:	460b      	mov	r3, r1
 800a236:	4313      	orrs	r3, r2
 800a238:	d019      	beq.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800a23a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a23e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a242:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a246:	d105      	bne.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a248:	4ba1      	ldr	r3, [pc, #644]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a24a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a24c:	4aa0      	ldr	r2, [pc, #640]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a24e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a252:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800a254:	4b9e      	ldr	r3, [pc, #632]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a256:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a25a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a25e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a262:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a266:	4a9a      	ldr	r2, [pc, #616]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a268:	430b      	orrs	r3, r1
 800a26a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800a26e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a276:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a27a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a27c:	2300      	movs	r3, #0
 800a27e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a280:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a284:	460b      	mov	r3, r1
 800a286:	4313      	orrs	r3, r2
 800a288:	d00c      	beq.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800a28a:	4b91      	ldr	r3, [pc, #580]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a28c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a290:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a294:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a298:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a29c:	4a8c      	ldr	r2, [pc, #560]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a29e:	430b      	orrs	r3, r1
 800a2a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800a2a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a2b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2b6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	d00c      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800a2c0:	4b83      	ldr	r3, [pc, #524]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a2c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a2ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a2d2:	4a7f      	ldr	r2, [pc, #508]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2d4:	430b      	orrs	r3, r1
 800a2d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800a2da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a2e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2ec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	d00c      	beq.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800a2f6:	4b76      	ldr	r3, [pc, #472]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a2fc:	f023 0118 	bic.w	r1, r3, #24
 800a300:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a304:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800a308:	4a71      	ldr	r2, [pc, #452]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a30a:	430b      	orrs	r3, r1
 800a30c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a318:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800a31c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a31e:	2300      	movs	r3, #0
 800a320:	637b      	str	r3, [r7, #52]	@ 0x34
 800a322:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a326:	460b      	mov	r3, r1
 800a328:	4313      	orrs	r3, r2
 800a32a:	d032      	beq.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800a32c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a330:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a334:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a338:	d105      	bne.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a33a:	4b65      	ldr	r3, [pc, #404]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a33c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a33e:	4a64      	ldr	r2, [pc, #400]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a344:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800a346:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a34a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a34e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a352:	d108      	bne.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a358:	3308      	adds	r3, #8
 800a35a:	4618      	mov	r0, r3
 800a35c:	f002 f946 	bl	800c5ec <RCCEx_PLL2_Config>
 800a360:	4603      	mov	r3, r0
 800a362:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800a366:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10d      	bne.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800a36e:	4b58      	ldr	r3, [pc, #352]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a370:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a374:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a37c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a380:	4a53      	ldr	r2, [pc, #332]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a382:	430b      	orrs	r3, r1
 800a384:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a388:	e003      	b.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a38a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a38e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800a392:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39a:	2100      	movs	r1, #0
 800a39c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	d04a      	beq.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800a3ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a3b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a3ba:	d01e      	beq.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800a3bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a3c0:	d825      	bhi.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a3c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a3c6:	d00e      	beq.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800a3c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a3cc:	d81f      	bhi.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d021      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800a3d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a3d6:	d11a      	bne.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3d8:	4b3d      	ldr	r3, [pc, #244]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3dc:	4a3c      	ldr	r2, [pc, #240]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3e2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a3e4:	e018      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a3e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3ea:	3308      	adds	r3, #8
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f002 f8fd 	bl	800c5ec <RCCEx_PLL2_Config>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a3f8:	e00e      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a3fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3fe:	332c      	adds	r3, #44	@ 0x2c
 800a400:	4618      	mov	r0, r3
 800a402:	f002 f98b 	bl	800c71c <RCCEx_PLL3_Config>
 800a406:	4603      	mov	r3, r0
 800a408:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a40c:	e004      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a414:	e000      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800a416:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a418:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10d      	bne.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800a420:	4b2b      	ldr	r3, [pc, #172]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a422:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a426:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a42a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a42e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a432:	4927      	ldr	r1, [pc, #156]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a434:	4313      	orrs	r3, r2
 800a436:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a43a:	e003      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a43c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a440:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800a444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800a450:	623b      	str	r3, [r7, #32]
 800a452:	2300      	movs	r3, #0
 800a454:	627b      	str	r3, [r7, #36]	@ 0x24
 800a456:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a45a:	460b      	mov	r3, r1
 800a45c:	4313      	orrs	r3, r2
 800a45e:	d03d      	beq.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800a460:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a468:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a46c:	d00e      	beq.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800a46e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a472:	d815      	bhi.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a474:	2b00      	cmp	r3, #0
 800a476:	d017      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a478:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a47c:	d110      	bne.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a47e:	4b14      	ldr	r3, [pc, #80]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a482:	4a13      	ldr	r2, [pc, #76]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a488:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a48a:	e00e      	b.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a48c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a490:	3308      	adds	r3, #8
 800a492:	4618      	mov	r0, r3
 800a494:	f002 f8aa 	bl	800c5ec <RCCEx_PLL2_Config>
 800a498:	4603      	mov	r3, r0
 800a49a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a49e:	e004      	b.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a4a6:	e000      	b.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a4a8:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a4aa:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d110      	bne.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800a4b2:	4b07      	ldr	r3, [pc, #28]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a4b8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a4bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4c4:	4902      	ldr	r1, [pc, #8]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800a4cc:	e006      	b.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800a4ce:	bf00      	nop
 800a4d0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4d4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a4d8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800a4dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a4e8:	61bb      	str	r3, [r7, #24]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	61fb      	str	r3, [r7, #28]
 800a4ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	d00c      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800a4f8:	4b68      	ldr	r3, [pc, #416]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a4fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a4fe:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800a502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a506:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a50a:	4964      	ldr	r1, [pc, #400]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a50c:	4313      	orrs	r3, r2
 800a50e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a512:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51a:	2100      	movs	r1, #0
 800a51c:	6139      	str	r1, [r7, #16]
 800a51e:	f003 0302 	and.w	r3, r3, #2
 800a522:	617b      	str	r3, [r7, #20]
 800a524:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a528:	460b      	mov	r3, r1
 800a52a:	4313      	orrs	r3, r2
 800a52c:	d036      	beq.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800a52e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a532:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00c      	beq.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800a53a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a53e:	d113      	bne.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a544:	3308      	adds	r3, #8
 800a546:	4618      	mov	r0, r3
 800a548:	f002 f850 	bl	800c5ec <RCCEx_PLL2_Config>
 800a54c:	4603      	mov	r3, r0
 800a54e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a552:	e00d      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a558:	332c      	adds	r3, #44	@ 0x2c
 800a55a:	4618      	mov	r0, r3
 800a55c:	f002 f8de 	bl	800c71c <RCCEx_PLL3_Config>
 800a560:	4603      	mov	r3, r0
 800a562:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a566:	e003      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a56e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a570:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10d      	bne.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800a578:	4b48      	ldr	r3, [pc, #288]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a57a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a57e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a586:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800a58a:	4944      	ldr	r1, [pc, #272]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a58c:	4313      	orrs	r3, r2
 800a58e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a592:	e003      	b.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a594:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a598:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a59c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	60b9      	str	r1, [r7, #8]
 800a5a8:	f003 0304 	and.w	r3, r3, #4
 800a5ac:	60fb      	str	r3, [r7, #12]
 800a5ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	d024      	beq.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800a5b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d108      	bne.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a5c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5c8:	332c      	adds	r3, #44	@ 0x2c
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f002 f8a6 	bl	800c71c <RCCEx_PLL3_Config>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800a5d6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10d      	bne.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800a5de:	4b2f      	ldr	r3, [pc, #188]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a5e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a5e4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800a5e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a5f0:	492a      	ldr	r1, [pc, #168]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a5f8:	e003      	b.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5fa:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a5fe:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800a602:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60a:	2100      	movs	r1, #0
 800a60c:	6039      	str	r1, [r7, #0]
 800a60e:	f003 0308 	and.w	r3, r3, #8
 800a612:	607b      	str	r3, [r7, #4]
 800a614:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a618:	460b      	mov	r3, r1
 800a61a:	4313      	orrs	r3, r2
 800a61c:	d036      	beq.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800a61e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a622:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a626:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a62a:	d00d      	beq.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800a62c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a630:	d811      	bhi.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a632:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a636:	d012      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a638:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a63c:	d80b      	bhi.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00d      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a646:	d106      	bne.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a648:	4b14      	ldr	r3, [pc, #80]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a64a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a64c:	4a13      	ldr	r2, [pc, #76]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a64e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a652:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800a654:	e004      	b.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a65c:	e000      	b.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800a65e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a660:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10d      	bne.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800a668:	4b0c      	ldr	r3, [pc, #48]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a66a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a66e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800a672:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a676:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a67a:	4908      	ldr	r1, [pc, #32]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a67c:	4313      	orrs	r3, r2
 800a67e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a682:	e003      	b.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a684:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a688:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800a68c:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800a690:	4618      	mov	r0, r3
 800a692:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a696:	46bd      	mov	sp, r7
 800a698:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a69c:	46020c00 	.word	0x46020c00

0800a6a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b089      	sub	sp, #36	@ 0x24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800a6a8:	4ba6      	ldr	r3, [pc, #664]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6b0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a6b2:	4ba4      	ldr	r3, [pc, #656]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b6:	f003 0303 	and.w	r3, r3, #3
 800a6ba:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a6bc:	4ba1      	ldr	r3, [pc, #644]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c0:	0a1b      	lsrs	r3, r3, #8
 800a6c2:	f003 030f 	and.w	r3, r3, #15
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a6ca:	4b9e      	ldr	r3, [pc, #632]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ce:	091b      	lsrs	r3, r3, #4
 800a6d0:	f003 0301 	and.w	r3, r3, #1
 800a6d4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a6d6:	4b9b      	ldr	r3, [pc, #620]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6da:	08db      	lsrs	r3, r3, #3
 800a6dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	fb02 f303 	mul.w	r3, r2, r3
 800a6e6:	ee07 3a90 	vmov	s15, r3
 800a6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ee:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	2b03      	cmp	r3, #3
 800a6f6:	d062      	beq.n	800a7be <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	2b03      	cmp	r3, #3
 800a6fc:	f200 8081 	bhi.w	800a802 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d024      	beq.n	800a750 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d17a      	bne.n	800a802 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	ee07 3a90 	vmov	s15, r3
 800a712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a716:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a71a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a71e:	4b89      	ldr	r3, [pc, #548]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a726:	ee07 3a90 	vmov	s15, r3
 800a72a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a72e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a732:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a736:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a73a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a73e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a742:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a74a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a74e:	e08f      	b.n	800a870 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a750:	4b7c      	ldr	r3, [pc, #496]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d005      	beq.n	800a768 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800a75c:	4b79      	ldr	r3, [pc, #484]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	0f1b      	lsrs	r3, r3, #28
 800a762:	f003 030f 	and.w	r3, r3, #15
 800a766:	e006      	b.n	800a776 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800a768:	4b76      	ldr	r3, [pc, #472]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a76a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a76e:	041b      	lsls	r3, r3, #16
 800a770:	0f1b      	lsrs	r3, r3, #28
 800a772:	f003 030f 	and.w	r3, r3, #15
 800a776:	4a76      	ldr	r2, [pc, #472]	@ (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a77c:	ee07 3a90 	vmov	s15, r3
 800a780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	ee07 3a90 	vmov	s15, r3
 800a78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a78e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	ee07 3a90 	vmov	s15, r3
 800a798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a79c:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7a0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a7a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a7b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7bc:	e058      	b.n	800a870 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	ee07 3a90 	vmov	s15, r3
 800a7c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7c8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a7cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7d0:	4b5c      	ldr	r3, [pc, #368]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a7d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7d8:	ee07 3a90 	vmov	s15, r3
 800a7dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7e0:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7e4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a7e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a7ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a7f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a800:	e036      	b.n	800a870 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a802:	4b50      	ldr	r3, [pc, #320]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d005      	beq.n	800a81a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800a80e:	4b4d      	ldr	r3, [pc, #308]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	0f1b      	lsrs	r3, r3, #28
 800a814:	f003 030f 	and.w	r3, r3, #15
 800a818:	e006      	b.n	800a828 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800a81a:	4b4a      	ldr	r3, [pc, #296]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a81c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a820:	041b      	lsls	r3, r3, #16
 800a822:	0f1b      	lsrs	r3, r3, #28
 800a824:	f003 030f 	and.w	r3, r3, #15
 800a828:	4a49      	ldr	r2, [pc, #292]	@ (800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a82a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a82e:	ee07 3a90 	vmov	s15, r3
 800a832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	ee07 3a90 	vmov	s15, r3
 800a83c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a840:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	ee07 3a90 	vmov	s15, r3
 800a84a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a84e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a852:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a85a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a85e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a862:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a86a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a86e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a870:	4b34      	ldr	r3, [pc, #208]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a874:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d017      	beq.n	800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a87c:	4b31      	ldr	r3, [pc, #196]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a87e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a880:	0a5b      	lsrs	r3, r3, #9
 800a882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a886:	ee07 3a90 	vmov	s15, r3
 800a88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800a88e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a892:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a896:	edd7 6a07 	vldr	s13, [r7, #28]
 800a89a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a89e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8a2:	ee17 2a90 	vmov	r2, s15
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	601a      	str	r2, [r3, #0]
 800a8aa:	e002      	b.n	800a8b2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a8b2:	4b24      	ldr	r3, [pc, #144]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d017      	beq.n	800a8ee <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a8be:	4b21      	ldr	r3, [pc, #132]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8c2:	0c1b      	lsrs	r3, r3, #16
 800a8c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8c8:	ee07 3a90 	vmov	s15, r3
 800a8cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a8d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a8d4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a8d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8e4:	ee17 2a90 	vmov	r2, s15
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	605a      	str	r2, [r3, #4]
 800a8ec:	e002      	b.n	800a8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a8f4:	4b13      	ldr	r3, [pc, #76]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d017      	beq.n	800a930 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a900:	4b10      	ldr	r3, [pc, #64]	@ (800a944 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a904:	0e1b      	lsrs	r3, r3, #24
 800a906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a90a:	ee07 3a90 	vmov	s15, r3
 800a90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800a912:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a916:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a91a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a91e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a926:	ee17 2a90 	vmov	r2, s15
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a92e:	e002      	b.n	800a936 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	609a      	str	r2, [r3, #8]
}
 800a936:	bf00      	nop
 800a938:	3724      	adds	r7, #36	@ 0x24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	46020c00 	.word	0x46020c00
 800a948:	4b742400 	.word	0x4b742400
 800a94c:	46000000 	.word	0x46000000
 800a950:	0800e2dc 	.word	0x0800e2dc

0800a954 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a954:	b480      	push	{r7}
 800a956:	b089      	sub	sp, #36	@ 0x24
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a95c:	4ba6      	ldr	r3, [pc, #664]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a95e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a964:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a966:	4ba4      	ldr	r3, [pc, #656]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a96a:	f003 0303 	and.w	r3, r3, #3
 800a96e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800a970:	4ba1      	ldr	r3, [pc, #644]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a974:	0a1b      	lsrs	r3, r3, #8
 800a976:	f003 030f 	and.w	r3, r3, #15
 800a97a:	3301      	adds	r3, #1
 800a97c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800a97e:	4b9e      	ldr	r3, [pc, #632]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a982:	091b      	lsrs	r3, r3, #4
 800a984:	f003 0301 	and.w	r3, r3, #1
 800a988:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a98a:	4b9b      	ldr	r3, [pc, #620]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a98c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a98e:	08db      	lsrs	r3, r3, #3
 800a990:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	fb02 f303 	mul.w	r3, r2, r3
 800a99a:	ee07 3a90 	vmov	s15, r3
 800a99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9a2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	2b03      	cmp	r3, #3
 800a9aa:	d062      	beq.n	800aa72 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	2b03      	cmp	r3, #3
 800a9b0:	f200 8081 	bhi.w	800aab6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d024      	beq.n	800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d17a      	bne.n	800aab6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	ee07 3a90 	vmov	s15, r3
 800a9c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ca:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a9ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9d2:	4b89      	ldr	r3, [pc, #548]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a9d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9da:	ee07 3a90 	vmov	s15, r3
 800a9de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9e6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a9ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a9ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a9fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa02:	e08f      	b.n	800ab24 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800aa04:	4b7c      	ldr	r3, [pc, #496]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d005      	beq.n	800aa1c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800aa10:	4b79      	ldr	r3, [pc, #484]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	0f1b      	lsrs	r3, r3, #28
 800aa16:	f003 030f 	and.w	r3, r3, #15
 800aa1a:	e006      	b.n	800aa2a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800aa1c:	4b76      	ldr	r3, [pc, #472]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aa22:	041b      	lsls	r3, r3, #16
 800aa24:	0f1b      	lsrs	r3, r3, #28
 800aa26:	f003 030f 	and.w	r3, r3, #15
 800aa2a:	4a76      	ldr	r2, [pc, #472]	@ (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800aa2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa30:	ee07 3a90 	vmov	s15, r3
 800aa34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	ee07 3a90 	vmov	s15, r3
 800aa3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	ee07 3a90 	vmov	s15, r3
 800aa4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa50:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa54:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800aa58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa64:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800aa68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa70:	e058      	b.n	800ab24 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	ee07 3a90 	vmov	s15, r3
 800aa78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa7c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800aa80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa84:	4b5c      	ldr	r3, [pc, #368]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa8c:	ee07 3a90 	vmov	s15, r3
 800aa90:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa94:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa98:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800aa9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aaa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800aaa4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aaa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aaac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aab0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aab4:	e036      	b.n	800ab24 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800aab6:	4b50      	ldr	r3, [pc, #320]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d005      	beq.n	800aace <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800aac2:	4b4d      	ldr	r3, [pc, #308]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	0f1b      	lsrs	r3, r3, #28
 800aac8:	f003 030f 	and.w	r3, r3, #15
 800aacc:	e006      	b.n	800aadc <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800aace:	4b4a      	ldr	r3, [pc, #296]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aad0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aad4:	041b      	lsls	r3, r3, #16
 800aad6:	0f1b      	lsrs	r3, r3, #28
 800aad8:	f003 030f 	and.w	r3, r3, #15
 800aadc:	4a49      	ldr	r2, [pc, #292]	@ (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800aade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aae2:	ee07 3a90 	vmov	s15, r3
 800aae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	ee07 3a90 	vmov	s15, r3
 800aaf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	ee07 3a90 	vmov	s15, r3
 800aafe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab02:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab06:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ab0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab16:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ab1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab22:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800ab24:	4b34      	ldr	r3, [pc, #208]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d017      	beq.n	800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab30:	4b31      	ldr	r3, [pc, #196]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab34:	0a5b      	lsrs	r3, r3, #9
 800ab36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab3a:	ee07 3a90 	vmov	s15, r3
 800ab3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800ab42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab46:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab56:	ee17 2a90 	vmov	r2, s15
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	601a      	str	r2, [r3, #0]
 800ab5e:	e002      	b.n	800ab66 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800ab66:	4b24      	ldr	r3, [pc, #144]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d017      	beq.n	800aba2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab72:	4b21      	ldr	r3, [pc, #132]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab76:	0c1b      	lsrs	r3, r3, #16
 800ab78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab7c:	ee07 3a90 	vmov	s15, r3
 800ab80:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800ab84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab88:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab98:	ee17 2a90 	vmov	r2, s15
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	605a      	str	r2, [r3, #4]
 800aba0:	e002      	b.n	800aba8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800aba8:	4b13      	ldr	r3, [pc, #76]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d017      	beq.n	800abe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800abb4:	4b10      	ldr	r3, [pc, #64]	@ (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abb8:	0e1b      	lsrs	r3, r3, #24
 800abba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abbe:	ee07 3a90 	vmov	s15, r3
 800abc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800abc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800abce:	edd7 6a07 	vldr	s13, [r7, #28]
 800abd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abda:	ee17 2a90 	vmov	r2, s15
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800abe2:	e002      	b.n	800abea <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	609a      	str	r2, [r3, #8]
}
 800abea:	bf00      	nop
 800abec:	3724      	adds	r7, #36	@ 0x24
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	46020c00 	.word	0x46020c00
 800abfc:	4b742400 	.word	0x4b742400
 800ac00:	46000000 	.word	0x46000000
 800ac04:	0800e2dc 	.word	0x0800e2dc

0800ac08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b089      	sub	sp, #36	@ 0x24
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800ac10:	4ba6      	ldr	r3, [pc, #664]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac18:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800ac1a:	4ba4      	ldr	r3, [pc, #656]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac1e:	f003 0303 	and.w	r3, r3, #3
 800ac22:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800ac24:	4ba1      	ldr	r3, [pc, #644]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac28:	0a1b      	lsrs	r3, r3, #8
 800ac2a:	f003 030f 	and.w	r3, r3, #15
 800ac2e:	3301      	adds	r3, #1
 800ac30:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800ac32:	4b9e      	ldr	r3, [pc, #632]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac36:	091b      	lsrs	r3, r3, #4
 800ac38:	f003 0301 	and.w	r3, r3, #1
 800ac3c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800ac3e:	4b9b      	ldr	r3, [pc, #620]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac42:	08db      	lsrs	r3, r3, #3
 800ac44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	fb02 f303 	mul.w	r3, r2, r3
 800ac4e:	ee07 3a90 	vmov	s15, r3
 800ac52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac56:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	2b03      	cmp	r3, #3
 800ac5e:	d062      	beq.n	800ad26 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	2b03      	cmp	r3, #3
 800ac64:	f200 8081 	bhi.w	800ad6a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d024      	beq.n	800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	2b02      	cmp	r3, #2
 800ac72:	d17a      	bne.n	800ad6a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	ee07 3a90 	vmov	s15, r3
 800ac7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac7e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800ac82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac86:	4b89      	ldr	r3, [pc, #548]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac8e:	ee07 3a90 	vmov	s15, r3
 800ac92:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac96:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac9a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ac9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800aca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800aca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800acae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acb2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800acb6:	e08f      	b.n	800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800acb8:	4b7c      	ldr	r3, [pc, #496]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d005      	beq.n	800acd0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800acc4:	4b79      	ldr	r3, [pc, #484]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	0f1b      	lsrs	r3, r3, #28
 800acca:	f003 030f 	and.w	r3, r3, #15
 800acce:	e006      	b.n	800acde <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800acd0:	4b76      	ldr	r3, [pc, #472]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800acd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800acd6:	041b      	lsls	r3, r3, #16
 800acd8:	0f1b      	lsrs	r3, r3, #28
 800acda:	f003 030f 	and.w	r3, r3, #15
 800acde:	4a76      	ldr	r2, [pc, #472]	@ (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800ace0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ace4:	ee07 3a90 	vmov	s15, r3
 800ace8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	ee07 3a90 	vmov	s15, r3
 800ad00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad04:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad08:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ad0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad18:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ad1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad24:	e058      	b.n	800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	ee07 3a90 	vmov	s15, r3
 800ad2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad30:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800ad34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad38:	4b5c      	ldr	r3, [pc, #368]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad40:	ee07 3a90 	vmov	s15, r3
 800ad44:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad48:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad4c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ad50:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ad54:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ad60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad68:	e036      	b.n	800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ad6a:	4b50      	ldr	r3, [pc, #320]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d005      	beq.n	800ad82 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800ad76:	4b4d      	ldr	r3, [pc, #308]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	0f1b      	lsrs	r3, r3, #28
 800ad7c:	f003 030f 	and.w	r3, r3, #15
 800ad80:	e006      	b.n	800ad90 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800ad82:	4b4a      	ldr	r3, [pc, #296]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ad88:	041b      	lsls	r3, r3, #16
 800ad8a:	0f1b      	lsrs	r3, r3, #28
 800ad8c:	f003 030f 	and.w	r3, r3, #15
 800ad90:	4a49      	ldr	r2, [pc, #292]	@ (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800ad92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad96:	ee07 3a90 	vmov	s15, r3
 800ad9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	ee07 3a90 	vmov	s15, r3
 800ada4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ada8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	ee07 3a90 	vmov	s15, r3
 800adb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adb6:	ed97 6a02 	vldr	s12, [r7, #8]
 800adba:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800adbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800adce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800add2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800add6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800add8:	4b34      	ldr	r3, [pc, #208]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800adda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800addc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d017      	beq.n	800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ade4:	4b31      	ldr	r3, [pc, #196]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ade6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ade8:	0a5b      	lsrs	r3, r3, #9
 800adea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adee:	ee07 3a90 	vmov	s15, r3
 800adf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800adf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adfa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800adfe:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae0a:	ee17 2a90 	vmov	r2, s15
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	601a      	str	r2, [r3, #0]
 800ae12:	e002      	b.n	800ae1a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2200      	movs	r2, #0
 800ae18:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800ae1a:	4b24      	ldr	r3, [pc, #144]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d017      	beq.n	800ae56 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae26:	4b21      	ldr	r3, [pc, #132]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae2a:	0c1b      	lsrs	r3, r3, #16
 800ae2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae30:	ee07 3a90 	vmov	s15, r3
 800ae34:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800ae38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae3c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae40:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae4c:	ee17 2a90 	vmov	r2, s15
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	605a      	str	r2, [r3, #4]
 800ae54:	e002      	b.n	800ae5c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800ae5c:	4b13      	ldr	r3, [pc, #76]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d017      	beq.n	800ae98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae68:	4b10      	ldr	r3, [pc, #64]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae6c:	0e1b      	lsrs	r3, r3, #24
 800ae6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae72:	ee07 3a90 	vmov	s15, r3
 800ae76:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800ae7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae7e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae82:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae8e:	ee17 2a90 	vmov	r2, s15
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae96:	e002      	b.n	800ae9e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	609a      	str	r2, [r3, #8]
}
 800ae9e:	bf00      	nop
 800aea0:	3724      	adds	r7, #36	@ 0x24
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop
 800aeac:	46020c00 	.word	0x46020c00
 800aeb0:	4b742400 	.word	0x4b742400
 800aeb4:	46000000 	.word	0x46000000
 800aeb8:	0800e2dc 	.word	0x0800e2dc

0800aebc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b08e      	sub	sp, #56	@ 0x38
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800aec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeca:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800aece:	430b      	orrs	r3, r1
 800aed0:	d145      	bne.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800aed2:	4ba7      	ldr	r3, [pc, #668]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aed8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aedc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800aede:	4ba4      	ldr	r3, [pc, #656]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aee4:	f003 0302 	and.w	r3, r3, #2
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d108      	bne.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800aeec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aef2:	d104      	bne.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800aef4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aef8:	637b      	str	r3, [r7, #52]	@ 0x34
 800aefa:	f001 bb5a 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800aefe:	4b9c      	ldr	r3, [pc, #624]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af0c:	d114      	bne.n	800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800af0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af14:	d110      	bne.n	800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af16:	4b96      	ldr	r3, [pc, #600]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af24:	d103      	bne.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800af26:	23fa      	movs	r3, #250	@ 0xfa
 800af28:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af2a:	f001 bb42 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800af2e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800af32:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af34:	f001 bb3d 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800af38:	4b8d      	ldr	r3, [pc, #564]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af44:	d107      	bne.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800af46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af4c:	d103      	bne.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800af4e:	4b89      	ldr	r3, [pc, #548]	@ (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800af50:	637b      	str	r3, [r7, #52]	@ 0x34
 800af52:	f001 bb2e 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800af56:	2300      	movs	r3, #0
 800af58:	637b      	str	r3, [r7, #52]	@ 0x34
 800af5a:	f001 bb2a 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800af5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af62:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800af66:	430b      	orrs	r3, r1
 800af68:	d151      	bne.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800af6a:	4b81      	ldr	r3, [pc, #516]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800af70:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800af74:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800af76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af78:	2b80      	cmp	r3, #128	@ 0x80
 800af7a:	d035      	beq.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800af7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af7e:	2b80      	cmp	r3, #128	@ 0x80
 800af80:	d841      	bhi.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800af82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af84:	2b60      	cmp	r3, #96	@ 0x60
 800af86:	d02a      	beq.n	800afde <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800af88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8a:	2b60      	cmp	r3, #96	@ 0x60
 800af8c:	d83b      	bhi.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800af8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af90:	2b40      	cmp	r3, #64	@ 0x40
 800af92:	d009      	beq.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800af94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af96:	2b40      	cmp	r3, #64	@ 0x40
 800af98:	d835      	bhi.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800af9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00c      	beq.n	800afba <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800afa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa2:	2b20      	cmp	r3, #32
 800afa4:	d012      	beq.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800afa6:	e02e      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afac:	4618      	mov	r0, r3
 800afae:	f7ff fb77 	bl	800a6a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800afb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afb6:	f001 bafc 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afba:	f107 0318 	add.w	r3, r7, #24
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7ff fcc8 	bl	800a954 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afc8:	f001 baf3 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afcc:	f107 030c 	add.w	r3, r7, #12
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7ff fe19 	bl	800ac08 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afda:	f001 baea 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800afde:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800afe2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afe4:	f001 bae5 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800afe8:	4b61      	ldr	r3, [pc, #388]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aff4:	d103      	bne.n	800affe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800aff6:	4b60      	ldr	r3, [pc, #384]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800aff8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800affa:	f001 bada 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800affe:	2300      	movs	r3, #0
 800b000:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b002:	f001 bad6 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800b006:	2300      	movs	r3, #0
 800b008:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b00a:	f001 bad2 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b00e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b012:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b016:	430b      	orrs	r3, r1
 800b018:	d158      	bne.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b01a:	4b55      	ldr	r3, [pc, #340]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b01c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b020:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b024:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b02c:	d03b      	beq.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800b02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b034:	d846      	bhi.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b038:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b03c:	d02e      	beq.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800b03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b040:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b044:	d83e      	bhi.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b04c:	d00b      	beq.n	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800b04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b054:	d836      	bhi.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00d      	beq.n	800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800b05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b062:	d012      	beq.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800b064:	e02e      	b.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7ff fb18 	bl	800a6a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b072:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b074:	f001 ba9d 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b078:	f107 0318 	add.w	r3, r7, #24
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7ff fc69 	bl	800a954 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b086:	f001 ba94 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b08a:	f107 030c 	add.w	r3, r7, #12
 800b08e:	4618      	mov	r0, r3
 800b090:	f7ff fdba 	bl	800ac08 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b098:	f001 ba8b 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b09c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b0a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0a2:	f001 ba86 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0a6:	4b32      	ldr	r3, [pc, #200]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b0ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0b2:	d103      	bne.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800b0b4:	4b30      	ldr	r3, [pc, #192]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b0b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b0b8:	f001 ba7b 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0c0:	f001 ba77 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0c8:	f001 ba73 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800b0cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0d0:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b0d4:	430b      	orrs	r3, r1
 800b0d6:	d126      	bne.n	800b126 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800b0d8:	4b25      	ldr	r3, [pc, #148]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b0da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b0de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0e2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800b0e4:	4b22      	ldr	r3, [pc, #136]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b0ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0f0:	d106      	bne.n	800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d103      	bne.n	800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800b0f8:	4b1f      	ldr	r3, [pc, #124]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b0fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0fc:	f001 ba59 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800b100:	4b1b      	ldr	r3, [pc, #108]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b108:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b10c:	d107      	bne.n	800b11e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800b10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b114:	d103      	bne.n	800b11e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800b116:	4b19      	ldr	r3, [pc, #100]	@ (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b118:	637b      	str	r3, [r7, #52]	@ 0x34
 800b11a:	f001 ba4a 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800b11e:	2300      	movs	r3, #0
 800b120:	637b      	str	r3, [r7, #52]	@ 0x34
 800b122:	f001 ba46 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800b126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b12a:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800b12e:	430b      	orrs	r3, r1
 800b130:	d16e      	bne.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b132:	4b0f      	ldr	r3, [pc, #60]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b138:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800b13c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b140:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b144:	d03d      	beq.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b148:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b14c:	d85c      	bhi.n	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b150:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b154:	d014      	beq.n	800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800b156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b158:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b15c:	d854      	bhi.n	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b160:	2b00      	cmp	r3, #0
 800b162:	d01f      	beq.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800b164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b166:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b16a:	d012      	beq.n	800b192 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800b16c:	e04c      	b.n	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b16e:	bf00      	nop
 800b170:	46020c00 	.word	0x46020c00
 800b174:	0007a120 	.word	0x0007a120
 800b178:	00f42400 	.word	0x00f42400
 800b17c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b180:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b184:	4618      	mov	r0, r3
 800b186:	f7ff fa8b 	bl	800a6a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b18a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b18c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b18e:	f001 ba10 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b192:	f107 0318 	add.w	r3, r7, #24
 800b196:	4618      	mov	r0, r3
 800b198:	f7ff fbdc 	bl	800a954 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1a0:	f001 ba07 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b1a4:	4ba7      	ldr	r3, [pc, #668]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b1ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1b0:	d103      	bne.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800b1b2:	4ba5      	ldr	r3, [pc, #660]	@ (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b1b4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b1b6:	f001 b9fc 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1be:	f001 b9f8 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b1c2:	4ba0      	ldr	r3, [pc, #640]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f003 0320 	and.w	r3, r3, #32
 800b1ca:	2b20      	cmp	r3, #32
 800b1cc:	d118      	bne.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b1ce:	4b9d      	ldr	r3, [pc, #628]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d005      	beq.n	800b1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b1da:	4b9a      	ldr	r3, [pc, #616]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	0e1b      	lsrs	r3, r3, #24
 800b1e0:	f003 030f 	and.w	r3, r3, #15
 800b1e4:	e006      	b.n	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b1e6:	4b97      	ldr	r3, [pc, #604]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b1ec:	041b      	lsls	r3, r3, #16
 800b1ee:	0e1b      	lsrs	r3, r3, #24
 800b1f0:	f003 030f 	and.w	r3, r3, #15
 800b1f4:	4a95      	ldr	r2, [pc, #596]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b1f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1fa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b1fc:	f001 b9d9 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b200:	2300      	movs	r3, #0
 800b202:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b204:	f001 b9d5 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800b208:	2300      	movs	r3, #0
 800b20a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b20c:	f001 b9d1 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b210:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b214:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800b218:	430b      	orrs	r3, r1
 800b21a:	d17f      	bne.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b21c:	4b89      	ldr	r3, [pc, #548]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b21e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b226:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800b228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d165      	bne.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b22e:	4b85      	ldr	r3, [pc, #532]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b234:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800b238:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800b23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b23c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b240:	d034      	beq.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800b242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b244:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b248:	d853      	bhi.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800b24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b250:	d00b      	beq.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800b252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b254:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b258:	d84b      	bhi.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800b25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d016      	beq.n	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800b260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b262:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b266:	d009      	beq.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b268:	e043      	b.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b26a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b26e:	4618      	mov	r0, r3
 800b270:	f7ff fa16 	bl	800a6a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b276:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b278:	f001 b99b 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b27c:	f107 0318 	add.w	r3, r7, #24
 800b280:	4618      	mov	r0, r3
 800b282:	f7ff fb67 	bl	800a954 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b28a:	f001 b992 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b28e:	4b6d      	ldr	r3, [pc, #436]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b29a:	d103      	bne.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800b29c:	4b6a      	ldr	r3, [pc, #424]	@ (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b29e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b2a0:	f001 b987 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b2a8:	f001 b983 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b2ac:	4b65      	ldr	r3, [pc, #404]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f003 0320 	and.w	r3, r3, #32
 800b2b4:	2b20      	cmp	r3, #32
 800b2b6:	d118      	bne.n	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b2b8:	4b62      	ldr	r3, [pc, #392]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d005      	beq.n	800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800b2c4:	4b5f      	ldr	r3, [pc, #380]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	0e1b      	lsrs	r3, r3, #24
 800b2ca:	f003 030f 	and.w	r3, r3, #15
 800b2ce:	e006      	b.n	800b2de <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b2d0:	4b5c      	ldr	r3, [pc, #368]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b2d6:	041b      	lsls	r3, r3, #16
 800b2d8:	0e1b      	lsrs	r3, r3, #24
 800b2da:	f003 030f 	and.w	r3, r3, #15
 800b2de:	4a5b      	ldr	r2, [pc, #364]	@ (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b2e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2e4:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b2e6:	f001 b964 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b2ee:	f001 b960 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b2f6:	f001 b95c 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b300:	d108      	bne.n	800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b306:	4618      	mov	r0, r3
 800b308:	f7ff f9ca 	bl	800a6a0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b30e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b310:	f001 b94f 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800b314:	2300      	movs	r3, #0
 800b316:	637b      	str	r3, [r7, #52]	@ 0x34
 800b318:	f001 b94b 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800b31c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b320:	1e51      	subs	r1, r2, #1
 800b322:	430b      	orrs	r3, r1
 800b324:	d136      	bne.n	800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b326:	4b47      	ldr	r3, [pc, #284]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b32c:	f003 0303 	and.w	r3, r3, #3
 800b330:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b334:	2b00      	cmp	r3, #0
 800b336:	d104      	bne.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800b338:	f7fe f968 	bl	800960c <HAL_RCC_GetPCLK2Freq>
 800b33c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b33e:	f001 b938 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800b342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b344:	2b01      	cmp	r3, #1
 800b346:	d104      	bne.n	800b352 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b348:	f7fe f830 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800b34c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b34e:	f001 b930 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b352:	4b3c      	ldr	r3, [pc, #240]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b35a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b35e:	d106      	bne.n	800b36e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800b360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b362:	2b02      	cmp	r3, #2
 800b364:	d103      	bne.n	800b36e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800b366:	4b3a      	ldr	r3, [pc, #232]	@ (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b368:	637b      	str	r3, [r7, #52]	@ 0x34
 800b36a:	f001 b922 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b36e:	4b35      	ldr	r3, [pc, #212]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b374:	f003 0302 	and.w	r3, r3, #2
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d107      	bne.n	800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37e:	2b03      	cmp	r3, #3
 800b380:	d104      	bne.n	800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800b382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b386:	637b      	str	r3, [r7, #52]	@ 0x34
 800b388:	f001 b913 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800b38c:	2300      	movs	r3, #0
 800b38e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b390:	f001 b90f 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800b394:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b398:	1e91      	subs	r1, r2, #2
 800b39a:	430b      	orrs	r3, r1
 800b39c:	d136      	bne.n	800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b39e:	4b29      	ldr	r3, [pc, #164]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b3a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b3a4:	f003 030c 	and.w	r3, r3, #12
 800b3a8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d104      	bne.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b3b0:	f7fe f918 	bl	80095e4 <HAL_RCC_GetPCLK1Freq>
 800b3b4:	6378      	str	r0, [r7, #52]	@ 0x34
 800b3b6:	f001 b8fc 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800b3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3bc:	2b04      	cmp	r3, #4
 800b3be:	d104      	bne.n	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b3c0:	f7fd fff4 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800b3c4:	6378      	str	r0, [r7, #52]	@ 0x34
 800b3c6:	f001 b8f4 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b3ca:	4b1e      	ldr	r3, [pc, #120]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3d6:	d106      	bne.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3da:	2b08      	cmp	r3, #8
 800b3dc:	d103      	bne.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800b3de:	4b1c      	ldr	r3, [pc, #112]	@ (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b3e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3e2:	f001 b8e6 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b3e6:	4b17      	ldr	r3, [pc, #92]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b3e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b3ec:	f003 0302 	and.w	r3, r3, #2
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d107      	bne.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800b3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f6:	2b0c      	cmp	r3, #12
 800b3f8:	d104      	bne.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800b3fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b400:	f001 b8d7 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800b404:	2300      	movs	r3, #0
 800b406:	637b      	str	r3, [r7, #52]	@ 0x34
 800b408:	f001 b8d3 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800b40c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b410:	1f11      	subs	r1, r2, #4
 800b412:	430b      	orrs	r3, r1
 800b414:	d13f      	bne.n	800b496 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b416:	4b0b      	ldr	r3, [pc, #44]	@ (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b41c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b420:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b424:	2b00      	cmp	r3, #0
 800b426:	d104      	bne.n	800b432 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b428:	f7fe f8dc 	bl	80095e4 <HAL_RCC_GetPCLK1Freq>
 800b42c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b42e:	f001 b8c0 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800b432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b434:	2b10      	cmp	r3, #16
 800b436:	d10d      	bne.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b438:	f7fd ffb8 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800b43c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b43e:	f001 b8b8 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b442:	bf00      	nop
 800b444:	46020c00 	.word	0x46020c00
 800b448:	02dc6c00 	.word	0x02dc6c00
 800b44c:	0800e2dc 	.word	0x0800e2dc
 800b450:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b454:	4ba8      	ldr	r3, [pc, #672]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b45c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b460:	d106      	bne.n	800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800b462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b464:	2b20      	cmp	r3, #32
 800b466:	d103      	bne.n	800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800b468:	4ba4      	ldr	r3, [pc, #656]	@ (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b46a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b46c:	f001 b8a1 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b470:	4ba1      	ldr	r3, [pc, #644]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b472:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b476:	f003 0302 	and.w	r3, r3, #2
 800b47a:	2b02      	cmp	r3, #2
 800b47c:	d107      	bne.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b480:	2b30      	cmp	r3, #48	@ 0x30
 800b482:	d104      	bne.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800b484:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b488:	637b      	str	r3, [r7, #52]	@ 0x34
 800b48a:	f001 b892 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800b48e:	2300      	movs	r3, #0
 800b490:	637b      	str	r3, [r7, #52]	@ 0x34
 800b492:	f001 b88e 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800b496:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b49a:	f1a2 0108 	sub.w	r1, r2, #8
 800b49e:	430b      	orrs	r3, r1
 800b4a0:	d136      	bne.n	800b510 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b4a2:	4b95      	ldr	r3, [pc, #596]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b4a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b4a8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b4ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d104      	bne.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b4b4:	f7fe f896 	bl	80095e4 <HAL_RCC_GetPCLK1Freq>
 800b4b8:	6378      	str	r0, [r7, #52]	@ 0x34
 800b4ba:	f001 b87a 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800b4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c0:	2b40      	cmp	r3, #64	@ 0x40
 800b4c2:	d104      	bne.n	800b4ce <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b4c4:	f7fd ff72 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800b4c8:	6378      	str	r0, [r7, #52]	@ 0x34
 800b4ca:	f001 b872 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b4ce:	4b8a      	ldr	r3, [pc, #552]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4da:	d106      	bne.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4de:	2b80      	cmp	r3, #128	@ 0x80
 800b4e0:	d103      	bne.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800b4e2:	4b86      	ldr	r3, [pc, #536]	@ (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b4e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4e6:	f001 b864 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b4ea:	4b83      	ldr	r3, [pc, #524]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b4ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b4f0:	f003 0302 	and.w	r3, r3, #2
 800b4f4:	2b02      	cmp	r3, #2
 800b4f6:	d107      	bne.n	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800b4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4fa:	2bc0      	cmp	r3, #192	@ 0xc0
 800b4fc:	d104      	bne.n	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800b4fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b502:	637b      	str	r3, [r7, #52]	@ 0x34
 800b504:	f001 b855 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800b508:	2300      	movs	r3, #0
 800b50a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b50c:	f001 b851 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800b510:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b514:	f1a2 0110 	sub.w	r1, r2, #16
 800b518:	430b      	orrs	r3, r1
 800b51a:	d139      	bne.n	800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b51c:	4b76      	ldr	r3, [pc, #472]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b51e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b526:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d104      	bne.n	800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b52e:	f7fe f859 	bl	80095e4 <HAL_RCC_GetPCLK1Freq>
 800b532:	6378      	str	r0, [r7, #52]	@ 0x34
 800b534:	f001 b83d 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800b538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b53a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b53e:	d104      	bne.n	800b54a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b540:	f7fd ff34 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800b544:	6378      	str	r0, [r7, #52]	@ 0x34
 800b546:	f001 b834 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800b54a:	4b6b      	ldr	r3, [pc, #428]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b556:	d107      	bne.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800b558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b55e:	d103      	bne.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800b560:	4b66      	ldr	r3, [pc, #408]	@ (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b562:	637b      	str	r3, [r7, #52]	@ 0x34
 800b564:	f001 b825 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800b568:	4b63      	ldr	r3, [pc, #396]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b56a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b56e:	f003 0302 	and.w	r3, r3, #2
 800b572:	2b02      	cmp	r3, #2
 800b574:	d108      	bne.n	800b588 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800b576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b578:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b57c:	d104      	bne.n	800b588 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800b57e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b582:	637b      	str	r3, [r7, #52]	@ 0x34
 800b584:	f001 b815 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b588:	2300      	movs	r3, #0
 800b58a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b58c:	f001 b811 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800b590:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b594:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800b598:	430b      	orrs	r3, r1
 800b59a:	d139      	bne.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800b59c:	4b56      	ldr	r3, [pc, #344]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b59e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b5a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b5a6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800b5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d104      	bne.n	800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b5ae:	f7fe f819 	bl	80095e4 <HAL_RCC_GetPCLK1Freq>
 800b5b2:	6378      	str	r0, [r7, #52]	@ 0x34
 800b5b4:	f000 bffd 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800b5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5be:	d104      	bne.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b5c0:	f7fd fef4 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800b5c4:	6378      	str	r0, [r7, #52]	@ 0x34
 800b5c6:	f000 bff4 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800b5ca:	4b4b      	ldr	r3, [pc, #300]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b5d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5d6:	d107      	bne.n	800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800b5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5de:	d103      	bne.n	800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800b5e0:	4b46      	ldr	r3, [pc, #280]	@ (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b5e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5e4:	f000 bfe5 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800b5e8:	4b43      	ldr	r3, [pc, #268]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5ee:	f003 0302 	and.w	r3, r3, #2
 800b5f2:	2b02      	cmp	r3, #2
 800b5f4:	d108      	bne.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800b5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b5fc:	d104      	bne.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800b5fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b602:	637b      	str	r3, [r7, #52]	@ 0x34
 800b604:	f000 bfd5 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b608:	2300      	movs	r3, #0
 800b60a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b60c:	f000 bfd1 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800b610:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b614:	f1a2 0120 	sub.w	r1, r2, #32
 800b618:	430b      	orrs	r3, r1
 800b61a:	d158      	bne.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b61c:	4b36      	ldr	r3, [pc, #216]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b61e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b622:	f003 0307 	and.w	r3, r3, #7
 800b626:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800b628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d104      	bne.n	800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800b62e:	f7fe f801 	bl	8009634 <HAL_RCC_GetPCLK3Freq>
 800b632:	6378      	str	r0, [r7, #52]	@ 0x34
 800b634:	f000 bfbd 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800b638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d104      	bne.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b63e:	f7fd feb5 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800b642:	6378      	str	r0, [r7, #52]	@ 0x34
 800b644:	f000 bfb5 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800b648:	4b2b      	ldr	r3, [pc, #172]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b654:	d106      	bne.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800b656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b658:	2b02      	cmp	r3, #2
 800b65a:	d103      	bne.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800b65c:	4b27      	ldr	r3, [pc, #156]	@ (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b65e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b660:	f000 bfa7 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800b664:	4b24      	ldr	r3, [pc, #144]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b666:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b66a:	f003 0302 	and.w	r3, r3, #2
 800b66e:	2b02      	cmp	r3, #2
 800b670:	d107      	bne.n	800b682 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800b672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b674:	2b03      	cmp	r3, #3
 800b676:	d104      	bne.n	800b682 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800b678:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b67c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b67e:	f000 bf98 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800b682:	4b1d      	ldr	r3, [pc, #116]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f003 0320 	and.w	r3, r3, #32
 800b68a:	2b20      	cmp	r3, #32
 800b68c:	d11b      	bne.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800b68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b690:	2b04      	cmp	r3, #4
 800b692:	d118      	bne.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b694:	4b18      	ldr	r3, [pc, #96]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d005      	beq.n	800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800b6a0:	4b15      	ldr	r3, [pc, #84]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	0e1b      	lsrs	r3, r3, #24
 800b6a6:	f003 030f 	and.w	r3, r3, #15
 800b6aa:	e006      	b.n	800b6ba <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800b6ac:	4b12      	ldr	r3, [pc, #72]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b6b2:	041b      	lsls	r3, r3, #16
 800b6b4:	0e1b      	lsrs	r3, r3, #24
 800b6b6:	f003 030f 	and.w	r3, r3, #15
 800b6ba:	4a11      	ldr	r2, [pc, #68]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b6bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6c2:	f000 bf76 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6ca:	f000 bf72 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800b6ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6d2:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b6d6:	430b      	orrs	r3, r1
 800b6d8:	d172      	bne.n	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800b6da:	4b07      	ldr	r3, [pc, #28]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b6e0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b6e4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6ec:	d10a      	bne.n	800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b6ee:	f7fd fe5d 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800b6f2:	6378      	str	r0, [r7, #52]	@ 0x34
 800b6f4:	f000 bf5d 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b6f8:	46020c00 	.word	0x46020c00
 800b6fc:	00f42400 	.word	0x00f42400
 800b700:	0800e2dc 	.word	0x0800e2dc
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800b704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b706:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b70a:	d108      	bne.n	800b71e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b70c:	f107 0318 	add.w	r3, r7, #24
 800b710:	4618      	mov	r0, r3
 800b712:	f7ff f91f 	bl	800a954 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	637b      	str	r3, [r7, #52]	@ 0x34
 800b71a:	f000 bf4a 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800b71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b720:	2b00      	cmp	r3, #0
 800b722:	d104      	bne.n	800b72e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800b724:	f7fd ff44 	bl	80095b0 <HAL_RCC_GetHCLKFreq>
 800b728:	6378      	str	r0, [r7, #52]	@ 0x34
 800b72a:	f000 bf42 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800b72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b730:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b734:	d122      	bne.n	800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b736:	4bb0      	ldr	r3, [pc, #704]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f003 0320 	and.w	r3, r3, #32
 800b73e:	2b20      	cmp	r3, #32
 800b740:	d118      	bne.n	800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b742:	4bad      	ldr	r3, [pc, #692]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d005      	beq.n	800b75a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800b74e:	4baa      	ldr	r3, [pc, #680]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	0e1b      	lsrs	r3, r3, #24
 800b754:	f003 030f 	and.w	r3, r3, #15
 800b758:	e006      	b.n	800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800b75a:	4ba7      	ldr	r3, [pc, #668]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b75c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b760:	041b      	lsls	r3, r3, #16
 800b762:	0e1b      	lsrs	r3, r3, #24
 800b764:	f003 030f 	and.w	r3, r3, #15
 800b768:	4aa4      	ldr	r2, [pc, #656]	@ (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b76a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b76e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b770:	f000 bf1f 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b774:	2300      	movs	r3, #0
 800b776:	637b      	str	r3, [r7, #52]	@ 0x34
 800b778:	f000 bf1b 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800b77c:	4b9e      	ldr	r3, [pc, #632]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b784:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b788:	d107      	bne.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b78c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b790:	d103      	bne.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800b792:	4b9b      	ldr	r3, [pc, #620]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b794:	637b      	str	r3, [r7, #52]	@ 0x34
 800b796:	f000 bf0c 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800b79a:	4b97      	ldr	r3, [pc, #604]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b7a6:	d107      	bne.n	800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b7ae:	d103      	bne.n	800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800b7b0:	4b93      	ldr	r3, [pc, #588]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b7b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7b4:	f000 befd 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7bc:	f000 bef9 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800b7c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7c4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b7c8:	430b      	orrs	r3, r1
 800b7ca:	d158      	bne.n	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800b7cc:	4b8a      	ldr	r3, [pc, #552]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b7ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b7d2:	f003 0307 	and.w	r3, r3, #7
 800b7d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7da:	2b04      	cmp	r3, #4
 800b7dc:	d84b      	bhi.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800b7de:	a201      	add	r2, pc, #4	@ (adr r2, 800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800b7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e4:	0800b81d 	.word	0x0800b81d
 800b7e8:	0800b7f9 	.word	0x0800b7f9
 800b7ec:	0800b80b 	.word	0x0800b80b
 800b7f0:	0800b827 	.word	0x0800b827
 800b7f4:	0800b831 	.word	0x0800b831
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7fe ff4f 	bl	800a6a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b804:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b806:	f000 bed4 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b80a:	f107 030c 	add.w	r3, r7, #12
 800b80e:	4618      	mov	r0, r3
 800b810:	f7ff f9fa 	bl	800ac08 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b818:	f000 becb 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b81c:	f7fd fec8 	bl	80095b0 <HAL_RCC_GetHCLKFreq>
 800b820:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b822:	f000 bec6 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b826:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b82a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b82c:	f000 bec1 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b830:	4b71      	ldr	r3, [pc, #452]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f003 0320 	and.w	r3, r3, #32
 800b838:	2b20      	cmp	r3, #32
 800b83a:	d118      	bne.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b83c:	4b6e      	ldr	r3, [pc, #440]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b844:	2b00      	cmp	r3, #0
 800b846:	d005      	beq.n	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800b848:	4b6b      	ldr	r3, [pc, #428]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	0e1b      	lsrs	r3, r3, #24
 800b84e:	f003 030f 	and.w	r3, r3, #15
 800b852:	e006      	b.n	800b862 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800b854:	4b68      	ldr	r3, [pc, #416]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b856:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b85a:	041b      	lsls	r3, r3, #16
 800b85c:	0e1b      	lsrs	r3, r3, #24
 800b85e:	f003 030f 	and.w	r3, r3, #15
 800b862:	4a66      	ldr	r2, [pc, #408]	@ (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b868:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b86a:	f000 bea2 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b86e:	2300      	movs	r3, #0
 800b870:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b872:	f000 be9e 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b876:	2300      	movs	r3, #0
 800b878:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b87a:	f000 be9a 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800b87e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b882:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800b886:	430b      	orrs	r3, r1
 800b888:	d167      	bne.n	800b95a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800b88a:	4b5b      	ldr	r3, [pc, #364]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b88c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b890:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b894:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b898:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b89c:	d036      	beq.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800b89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b8a4:	d855      	bhi.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b8ac:	d029      	beq.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800b8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b8b4:	d84d      	bhi.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8bc:	d013      	beq.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800b8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8c4:	d845      	bhi.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d015      	beq.n	800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800b8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8d2:	d13e      	bne.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7fe fee1 	bl	800a6a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b8e2:	f000 be66 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8e6:	f107 030c 	add.w	r3, r7, #12
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7ff f98c 	bl	800ac08 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b8f4:	f000 be5d 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b8f8:	f7fd fe5a 	bl	80095b0 <HAL_RCC_GetHCLKFreq>
 800b8fc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b8fe:	f000 be58 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b902:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b906:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b908:	f000 be53 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b90c:	4b3a      	ldr	r3, [pc, #232]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f003 0320 	and.w	r3, r3, #32
 800b914:	2b20      	cmp	r3, #32
 800b916:	d118      	bne.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b918:	4b37      	ldr	r3, [pc, #220]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b920:	2b00      	cmp	r3, #0
 800b922:	d005      	beq.n	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800b924:	4b34      	ldr	r3, [pc, #208]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	0e1b      	lsrs	r3, r3, #24
 800b92a:	f003 030f 	and.w	r3, r3, #15
 800b92e:	e006      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b930:	4b31      	ldr	r3, [pc, #196]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b932:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b936:	041b      	lsls	r3, r3, #16
 800b938:	0e1b      	lsrs	r3, r3, #24
 800b93a:	f003 030f 	and.w	r3, r3, #15
 800b93e:	4a2f      	ldr	r2, [pc, #188]	@ (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b944:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b946:	f000 be34 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b94a:	2300      	movs	r3, #0
 800b94c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b94e:	f000 be30 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b952:	2300      	movs	r3, #0
 800b954:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b956:	f000 be2c 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800b95a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b95e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800b962:	430b      	orrs	r3, r1
 800b964:	d152      	bne.n	800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b966:	4b24      	ldr	r3, [pc, #144]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b96c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b970:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800b972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b974:	2b00      	cmp	r3, #0
 800b976:	d104      	bne.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b978:	f7fd fe34 	bl	80095e4 <HAL_RCC_GetPCLK1Freq>
 800b97c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b97e:	f000 be18 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800b982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b988:	d104      	bne.n	800b994 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b98a:	f7fd fd0f 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800b98e:	6378      	str	r0, [r7, #52]	@ 0x34
 800b990:	f000 be0f 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800b994:	4b18      	ldr	r3, [pc, #96]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b99c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9a0:	d107      	bne.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b9a8:	d103      	bne.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800b9aa:	4b15      	ldr	r3, [pc, #84]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b9ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9ae:	f000 be00 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800b9b2:	4b11      	ldr	r3, [pc, #68]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f003 0320 	and.w	r3, r3, #32
 800b9ba:	2b20      	cmp	r3, #32
 800b9bc:	d122      	bne.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800b9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b9c4:	d11e      	bne.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b9c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d005      	beq.n	800b9de <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800b9d2:	4b09      	ldr	r3, [pc, #36]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	0e1b      	lsrs	r3, r3, #24
 800b9d8:	f003 030f 	and.w	r3, r3, #15
 800b9dc:	e006      	b.n	800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800b9de:	4b06      	ldr	r3, [pc, #24]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b9e4:	041b      	lsls	r3, r3, #16
 800b9e6:	0e1b      	lsrs	r3, r3, #24
 800b9e8:	f003 030f 	and.w	r3, r3, #15
 800b9ec:	4a03      	ldr	r2, [pc, #12]	@ (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b9ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9f4:	f000 bddd 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b9f8:	46020c00 	.word	0x46020c00
 800b9fc:	0800e2dc 	.word	0x0800e2dc
 800ba00:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800ba04:	2300      	movs	r3, #0
 800ba06:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba08:	f000 bdd3 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800ba0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba10:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800ba14:	430b      	orrs	r3, r1
 800ba16:	d14c      	bne.n	800bab2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ba18:	4ba8      	ldr	r3, [pc, #672]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba1e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ba22:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800ba24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d104      	bne.n	800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ba2a:	f7fd fddb 	bl	80095e4 <HAL_RCC_GetPCLK1Freq>
 800ba2e:	6378      	str	r0, [r7, #52]	@ 0x34
 800ba30:	f000 bdbf 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800ba34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba3a:	d104      	bne.n	800ba46 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ba3c:	f7fd fcb6 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800ba40:	6378      	str	r0, [r7, #52]	@ 0x34
 800ba42:	f000 bdb6 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800ba46:	4b9d      	ldr	r3, [pc, #628]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba52:	d107      	bne.n	800ba64 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800ba54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba5a:	d103      	bne.n	800ba64 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800ba5c:	4b98      	ldr	r3, [pc, #608]	@ (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ba5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba60:	f000 bda7 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800ba64:	4b95      	ldr	r3, [pc, #596]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 0320 	and.w	r3, r3, #32
 800ba6c:	2b20      	cmp	r3, #32
 800ba6e:	d11c      	bne.n	800baaa <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800ba70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ba76:	d118      	bne.n	800baaa <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ba78:	4b90      	ldr	r3, [pc, #576]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d005      	beq.n	800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800ba84:	4b8d      	ldr	r3, [pc, #564]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	0e1b      	lsrs	r3, r3, #24
 800ba8a:	f003 030f 	and.w	r3, r3, #15
 800ba8e:	e006      	b.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800ba90:	4b8a      	ldr	r3, [pc, #552]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ba96:	041b      	lsls	r3, r3, #16
 800ba98:	0e1b      	lsrs	r3, r3, #24
 800ba9a:	f003 030f 	and.w	r3, r3, #15
 800ba9e:	4a89      	ldr	r2, [pc, #548]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800baa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baa4:	637b      	str	r3, [r7, #52]	@ 0x34
 800baa6:	f000 bd84 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800baaa:	2300      	movs	r3, #0
 800baac:	637b      	str	r3, [r7, #52]	@ 0x34
 800baae:	f000 bd80 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800bab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bab6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800baba:	430b      	orrs	r3, r1
 800babc:	d158      	bne.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800babe:	4b7f      	ldr	r3, [pc, #508]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bac4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bac8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800baca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bacc:	2bc0      	cmp	r3, #192	@ 0xc0
 800bace:	d028      	beq.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800bad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bad2:	2bc0      	cmp	r3, #192	@ 0xc0
 800bad4:	d848      	bhi.n	800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800bad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bad8:	2b80      	cmp	r3, #128	@ 0x80
 800bada:	d00e      	beq.n	800bafa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800badc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bade:	2b80      	cmp	r3, #128	@ 0x80
 800bae0:	d842      	bhi.n	800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800bae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d003      	beq.n	800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800bae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baea:	2b40      	cmp	r3, #64	@ 0x40
 800baec:	d014      	beq.n	800bb18 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800baee:	e03b      	b.n	800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800baf0:	f7fd fda0 	bl	8009634 <HAL_RCC_GetPCLK3Freq>
 800baf4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800baf6:	f000 bd5c 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bafa:	4b70      	ldr	r3, [pc, #448]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bb02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb06:	d103      	bne.n	800bb10 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800bb08:	4b6d      	ldr	r3, [pc, #436]	@ (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bb0a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bb0c:	f000 bd51 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bb10:	2300      	movs	r3, #0
 800bb12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb14:	f000 bd4d 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800bb18:	f7fd fc48 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800bb1c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bb1e:	f000 bd48 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bb22:	4b66      	ldr	r3, [pc, #408]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f003 0320 	and.w	r3, r3, #32
 800bb2a:	2b20      	cmp	r3, #32
 800bb2c:	d118      	bne.n	800bb60 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bb2e:	4b63      	ldr	r3, [pc, #396]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d005      	beq.n	800bb46 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800bb3a:	4b60      	ldr	r3, [pc, #384]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	0e1b      	lsrs	r3, r3, #24
 800bb40:	f003 030f 	and.w	r3, r3, #15
 800bb44:	e006      	b.n	800bb54 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800bb46:	4b5d      	ldr	r3, [pc, #372]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bb4c:	041b      	lsls	r3, r3, #16
 800bb4e:	0e1b      	lsrs	r3, r3, #24
 800bb50:	f003 030f 	and.w	r3, r3, #15
 800bb54:	4a5b      	ldr	r2, [pc, #364]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bb56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb5a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bb5c:	f000 bd29 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bb60:	2300      	movs	r3, #0
 800bb62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb64:	f000 bd25 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb6c:	f000 bd21 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800bb70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb74:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800bb78:	430b      	orrs	r3, r1
 800bb7a:	d14c      	bne.n	800bc16 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800bb7c:	4b4f      	ldr	r3, [pc, #316]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb82:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bb86:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800bb88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d104      	bne.n	800bb98 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bb8e:	f7fd fd29 	bl	80095e4 <HAL_RCC_GetPCLK1Freq>
 800bb92:	6378      	str	r0, [r7, #52]	@ 0x34
 800bb94:	f000 bd0d 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800bb98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bb9e:	d104      	bne.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bba0:	f7fd fc04 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800bba4:	6378      	str	r0, [r7, #52]	@ 0x34
 800bba6:	f000 bd04 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800bbaa:	4b44      	ldr	r3, [pc, #272]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bbb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bbb6:	d107      	bne.n	800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800bbb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bbbe:	d103      	bne.n	800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800bbc0:	4b3f      	ldr	r3, [pc, #252]	@ (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bbc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbc4:	f000 bcf5 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800bbc8:	4b3c      	ldr	r3, [pc, #240]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f003 0320 	and.w	r3, r3, #32
 800bbd0:	2b20      	cmp	r3, #32
 800bbd2:	d11c      	bne.n	800bc0e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800bbd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbd6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bbda:	d118      	bne.n	800bc0e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bbdc:	4b37      	ldr	r3, [pc, #220]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d005      	beq.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800bbe8:	4b34      	ldr	r3, [pc, #208]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbea:	689b      	ldr	r3, [r3, #8]
 800bbec:	0e1b      	lsrs	r3, r3, #24
 800bbee:	f003 030f 	and.w	r3, r3, #15
 800bbf2:	e006      	b.n	800bc02 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800bbf4:	4b31      	ldr	r3, [pc, #196]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bbfa:	041b      	lsls	r3, r3, #16
 800bbfc:	0e1b      	lsrs	r3, r3, #24
 800bbfe:	f003 030f 	and.w	r3, r3, #15
 800bc02:	4a30      	ldr	r2, [pc, #192]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bc04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc08:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc0a:	f000 bcd2 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc12:	f000 bcce 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800bc16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc1a:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800bc1e:	430b      	orrs	r3, r1
 800bc20:	d152      	bne.n	800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800bc22:	4b26      	ldr	r3, [pc, #152]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc28:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800bc2c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800bc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d104      	bne.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bc34:	f7fd fcd6 	bl	80095e4 <HAL_RCC_GetPCLK1Freq>
 800bc38:	6378      	str	r0, [r7, #52]	@ 0x34
 800bc3a:	f000 bcba 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800bc3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bc44:	d104      	bne.n	800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bc46:	f7fd fbb1 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800bc4a:	6378      	str	r0, [r7, #52]	@ 0x34
 800bc4c:	f000 bcb1 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800bc50:	4b1a      	ldr	r3, [pc, #104]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bc58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc5c:	d107      	bne.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800bc5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc64:	d103      	bne.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800bc66:	4b16      	ldr	r3, [pc, #88]	@ (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bc68:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc6a:	f000 bca2 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800bc6e:	4b13      	ldr	r3, [pc, #76]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f003 0320 	and.w	r3, r3, #32
 800bc76:	2b20      	cmp	r3, #32
 800bc78:	d11c      	bne.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bc80:	d118      	bne.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bc82:	4b0e      	ldr	r3, [pc, #56]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc84:	689b      	ldr	r3, [r3, #8]
 800bc86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d005      	beq.n	800bc9a <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800bc8e:	4b0b      	ldr	r3, [pc, #44]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	0e1b      	lsrs	r3, r3, #24
 800bc94:	f003 030f 	and.w	r3, r3, #15
 800bc98:	e006      	b.n	800bca8 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800bc9a:	4b08      	ldr	r3, [pc, #32]	@ (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bca0:	041b      	lsls	r3, r3, #16
 800bca2:	0e1b      	lsrs	r3, r3, #24
 800bca4:	f003 030f 	and.w	r3, r3, #15
 800bca8:	4a06      	ldr	r2, [pc, #24]	@ (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bcaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcae:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcb0:	f000 bc7f 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcb8:	f000 bc7b 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bcbc:	46020c00 	.word	0x46020c00
 800bcc0:	00f42400 	.word	0x00f42400
 800bcc4:	0800e2dc 	.word	0x0800e2dc
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800bcc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bccc:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800bcd0:	430b      	orrs	r3, r1
 800bcd2:	d14c      	bne.n	800bd6e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800bcd4:	4ba6      	ldr	r3, [pc, #664]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bcd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bcda:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800bcde:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800bce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d104      	bne.n	800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bce6:	f7fd fc7d 	bl	80095e4 <HAL_RCC_GetPCLK1Freq>
 800bcea:	6378      	str	r0, [r7, #52]	@ 0x34
 800bcec:	f000 bc61 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800bcf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bcf6:	d104      	bne.n	800bd02 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bcf8:	f7fd fb58 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800bcfc:	6378      	str	r0, [r7, #52]	@ 0x34
 800bcfe:	f000 bc58 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800bd02:	4b9b      	ldr	r3, [pc, #620]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd0e:	d107      	bne.n	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800bd10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd16:	d103      	bne.n	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800bd18:	4b96      	ldr	r3, [pc, #600]	@ (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800bd1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd1c:	f000 bc49 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800bd20:	4b93      	ldr	r3, [pc, #588]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f003 0320 	and.w	r3, r3, #32
 800bd28:	2b20      	cmp	r3, #32
 800bd2a:	d11c      	bne.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd2e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800bd32:	d118      	bne.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bd34:	4b8e      	ldr	r3, [pc, #568]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d005      	beq.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800bd40:	4b8b      	ldr	r3, [pc, #556]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	0e1b      	lsrs	r3, r3, #24
 800bd46:	f003 030f 	and.w	r3, r3, #15
 800bd4a:	e006      	b.n	800bd5a <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800bd4c:	4b88      	ldr	r3, [pc, #544]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bd52:	041b      	lsls	r3, r3, #16
 800bd54:	0e1b      	lsrs	r3, r3, #24
 800bd56:	f003 030f 	and.w	r3, r3, #15
 800bd5a:	4a87      	ldr	r2, [pc, #540]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bd5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd60:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd62:	f000 bc26 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800bd66:	2300      	movs	r3, #0
 800bd68:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd6a:	f000 bc22 	b.w	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800bd6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd72:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800bd76:	430b      	orrs	r3, r1
 800bd78:	d164      	bne.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800bd7a:	4b7d      	ldr	r3, [pc, #500]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bd80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd84:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800bd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d120      	bne.n	800bdce <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bd8c:	4b78      	ldr	r3, [pc, #480]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f003 0320 	and.w	r3, r3, #32
 800bd94:	2b20      	cmp	r3, #32
 800bd96:	d117      	bne.n	800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bd98:	4b75      	ldr	r3, [pc, #468]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d005      	beq.n	800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800bda4:	4b72      	ldr	r3, [pc, #456]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	0e1b      	lsrs	r3, r3, #24
 800bdaa:	f003 030f 	and.w	r3, r3, #15
 800bdae:	e006      	b.n	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800bdb0:	4b6f      	ldr	r3, [pc, #444]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bdb6:	041b      	lsls	r3, r3, #16
 800bdb8:	0e1b      	lsrs	r3, r3, #24
 800bdba:	f003 030f 	and.w	r3, r3, #15
 800bdbe:	4a6e      	ldr	r2, [pc, #440]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bdc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdc4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdc6:	e3f4      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdcc:	e3f1      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800bdce:	4b68      	ldr	r3, [pc, #416]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bdd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bdd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bddc:	d112      	bne.n	800be04 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800bdde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bde0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bde4:	d10e      	bne.n	800be04 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bde6:	4b62      	ldr	r3, [pc, #392]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bde8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bdec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bdf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bdf4:	d102      	bne.n	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800bdf6:	23fa      	movs	r3, #250	@ 0xfa
 800bdf8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bdfa:	e3da      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800bdfc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800be00:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800be02:	e3d6      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800be04:	4b5a      	ldr	r3, [pc, #360]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be10:	d106      	bne.n	800be20 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800be12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be18:	d102      	bne.n	800be20 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800be1a:	4b56      	ldr	r3, [pc, #344]	@ (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800be1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800be1e:	e3c8      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800be20:	4b53      	ldr	r3, [pc, #332]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be26:	f003 0302 	and.w	r3, r3, #2
 800be2a:	2b02      	cmp	r3, #2
 800be2c:	d107      	bne.n	800be3e <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800be2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be34:	d103      	bne.n	800be3e <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800be36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800be3c:	e3b9      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800be3e:	2300      	movs	r3, #0
 800be40:	637b      	str	r3, [r7, #52]	@ 0x34
 800be42:	e3b6      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800be44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be48:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800be4c:	430b      	orrs	r3, r1
 800be4e:	d164      	bne.n	800bf1a <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800be50:	4b47      	ldr	r3, [pc, #284]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800be56:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800be5a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800be5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d120      	bne.n	800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800be62:	4b43      	ldr	r3, [pc, #268]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f003 0320 	and.w	r3, r3, #32
 800be6a:	2b20      	cmp	r3, #32
 800be6c:	d117      	bne.n	800be9e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800be6e:	4b40      	ldr	r3, [pc, #256]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be76:	2b00      	cmp	r3, #0
 800be78:	d005      	beq.n	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800be7a:	4b3d      	ldr	r3, [pc, #244]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	0e1b      	lsrs	r3, r3, #24
 800be80:	f003 030f 	and.w	r3, r3, #15
 800be84:	e006      	b.n	800be94 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800be86:	4b3a      	ldr	r3, [pc, #232]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800be8c:	041b      	lsls	r3, r3, #16
 800be8e:	0e1b      	lsrs	r3, r3, #24
 800be90:	f003 030f 	and.w	r3, r3, #15
 800be94:	4a38      	ldr	r2, [pc, #224]	@ (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800be96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800be9c:	e389      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800be9e:	2300      	movs	r3, #0
 800bea0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bea2:	e386      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800bea4:	4b32      	ldr	r3, [pc, #200]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800beaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800beae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800beb2:	d112      	bne.n	800beda <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800beb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800beba:	d10e      	bne.n	800beda <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bebc:	4b2c      	ldr	r3, [pc, #176]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bebe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bec6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800beca:	d102      	bne.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800becc:	23fa      	movs	r3, #250	@ 0xfa
 800bece:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bed0:	e36f      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800bed2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bed6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bed8:	e36b      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800beda:	4b25      	ldr	r3, [pc, #148]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bee6:	d106      	bne.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800bee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800beee:	d102      	bne.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800bef0:	4b20      	ldr	r3, [pc, #128]	@ (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800bef2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bef4:	e35d      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800bef6:	4b1e      	ldr	r3, [pc, #120]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800befc:	f003 0302 	and.w	r3, r3, #2
 800bf00:	2b02      	cmp	r3, #2
 800bf02:	d107      	bne.n	800bf14 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800bf04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bf0a:	d103      	bne.n	800bf14 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800bf0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf10:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf12:	e34e      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800bf14:	2300      	movs	r3, #0
 800bf16:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf18:	e34b      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800bf1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf1e:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800bf22:	430b      	orrs	r3, r1
 800bf24:	d14e      	bne.n	800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800bf26:	4b12      	ldr	r3, [pc, #72]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf2c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800bf30:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800bf32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d103      	bne.n	800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bf38:	f7fd fb54 	bl	80095e4 <HAL_RCC_GetPCLK1Freq>
 800bf3c:	6378      	str	r0, [r7, #52]	@ 0x34
 800bf3e:	e338      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800bf40:	4b0b      	ldr	r3, [pc, #44]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf4e:	d119      	bne.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800bf50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bf56:	d115      	bne.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf58:	4b05      	ldr	r3, [pc, #20]	@ (800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf66:	d109      	bne.n	800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800bf68:	23fa      	movs	r3, #250	@ 0xfa
 800bf6a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf6c:	e321      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bf6e:	bf00      	nop
 800bf70:	46020c00 	.word	0x46020c00
 800bf74:	00f42400 	.word	0x00f42400
 800bf78:	0800e2dc 	.word	0x0800e2dc
      }
      else
      {
        frequency = LSI_VALUE;
 800bf7c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bf80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf82:	e316      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800bf84:	4ba8      	ldr	r3, [pc, #672]	@ (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf90:	d106      	bne.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800bf92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800bf98:	d102      	bne.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800bf9a:	4ba4      	ldr	r3, [pc, #656]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bf9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf9e:	e308      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800bfa0:	4ba1      	ldr	r3, [pc, #644]	@ (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bfa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfa6:	f003 0302 	and.w	r3, r3, #2
 800bfaa:	2b02      	cmp	r3, #2
 800bfac:	d107      	bne.n	800bfbe <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800bfae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800bfb4:	d103      	bne.n	800bfbe <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800bfb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bfba:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfbc:	e2f9      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfc2:	e2f6      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800bfc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfc8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800bfcc:	430b      	orrs	r3, r1
 800bfce:	d12d      	bne.n	800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800bfd0:	4b95      	ldr	r3, [pc, #596]	@ (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bfd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bfd6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800bfda:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800bfdc:	4b92      	ldr	r3, [pc, #584]	@ (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bfe4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bfe8:	d105      	bne.n	800bff6 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800bfea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d102      	bne.n	800bff6 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800bff0:	4b8e      	ldr	r3, [pc, #568]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bff2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bff4:	e2dd      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800bff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bffc:	d107      	bne.n	800c00e <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c002:	4618      	mov	r0, r3
 800c004:	f7fe fb4c 	bl	800a6a0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800c008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c00a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c00c:	e2d1      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800c00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c010:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c014:	d107      	bne.n	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c016:	f107 0318 	add.w	r3, r7, #24
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fe fc9a 	bl	800a954 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	637b      	str	r3, [r7, #52]	@ 0x34
 800c024:	e2c5      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800c026:	2300      	movs	r3, #0
 800c028:	637b      	str	r3, [r7, #52]	@ 0x34
 800c02a:	e2c2      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800c02c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c030:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800c034:	430b      	orrs	r3, r1
 800c036:	d156      	bne.n	800c0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800c038:	4b7b      	ldr	r3, [pc, #492]	@ (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c03a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c03e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c042:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800c044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c046:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c04a:	d028      	beq.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800c04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c04e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c052:	d845      	bhi.n	800c0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800c054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c056:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c05a:	d013      	beq.n	800c084 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800c05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c05e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c062:	d83d      	bhi.n	800c0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800c064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c066:	2b00      	cmp	r3, #0
 800c068:	d004      	beq.n	800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800c06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c06c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c070:	d004      	beq.n	800c07c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800c072:	e035      	b.n	800c0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800c074:	f7fd faca 	bl	800960c <HAL_RCC_GetPCLK2Freq>
 800c078:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c07a:	e29a      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c07c:	f7fd f996 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800c080:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c082:	e296      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c084:	4b68      	ldr	r3, [pc, #416]	@ (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c08c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c090:	d102      	bne.n	800c098 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800c092:	4b66      	ldr	r3, [pc, #408]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c094:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c096:	e28c      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c098:	2300      	movs	r3, #0
 800c09a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c09c:	e289      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c09e:	4b62      	ldr	r3, [pc, #392]	@ (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f003 0320 	and.w	r3, r3, #32
 800c0a6:	2b20      	cmp	r3, #32
 800c0a8:	d117      	bne.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c0aa:	4b5f      	ldr	r3, [pc, #380]	@ (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d005      	beq.n	800c0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800c0b6:	4b5c      	ldr	r3, [pc, #368]	@ (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0b8:	689b      	ldr	r3, [r3, #8]
 800c0ba:	0e1b      	lsrs	r3, r3, #24
 800c0bc:	f003 030f 	and.w	r3, r3, #15
 800c0c0:	e006      	b.n	800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800c0c2:	4b59      	ldr	r3, [pc, #356]	@ (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c0c8:	041b      	lsls	r3, r3, #16
 800c0ca:	0e1b      	lsrs	r3, r3, #24
 800c0cc:	f003 030f 	and.w	r3, r3, #15
 800c0d0:	4a57      	ldr	r2, [pc, #348]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800c0d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0d6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c0d8:	e26b      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0de:	e268      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0e4:	e265      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800c0e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0ea:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800c0ee:	430b      	orrs	r3, r1
 800c0f0:	d156      	bne.n	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800c0f2:	4b4d      	ldr	r3, [pc, #308]	@ (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c0f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c0fc:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800c0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c100:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c104:	d028      	beq.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800c106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c108:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c10c:	d845      	bhi.n	800c19a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800c10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c110:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c114:	d013      	beq.n	800c13e <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800c116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c118:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c11c:	d83d      	bhi.n	800c19a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800c11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c120:	2b00      	cmp	r3, #0
 800c122:	d004      	beq.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800c124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c12a:	d004      	beq.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800c12c:	e035      	b.n	800c19a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800c12e:	f7fd fa59 	bl	80095e4 <HAL_RCC_GetPCLK1Freq>
 800c132:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c134:	e23d      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c136:	f7fd f939 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800c13a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c13c:	e239      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c13e:	4b3a      	ldr	r3, [pc, #232]	@ (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c14a:	d102      	bne.n	800c152 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800c14c:	4b37      	ldr	r3, [pc, #220]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c14e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c150:	e22f      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c152:	2300      	movs	r3, #0
 800c154:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c156:	e22c      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c158:	4b33      	ldr	r3, [pc, #204]	@ (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f003 0320 	and.w	r3, r3, #32
 800c160:	2b20      	cmp	r3, #32
 800c162:	d117      	bne.n	800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c164:	4b30      	ldr	r3, [pc, #192]	@ (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d005      	beq.n	800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800c170:	4b2d      	ldr	r3, [pc, #180]	@ (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	0e1b      	lsrs	r3, r3, #24
 800c176:	f003 030f 	and.w	r3, r3, #15
 800c17a:	e006      	b.n	800c18a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800c17c:	4b2a      	ldr	r3, [pc, #168]	@ (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c17e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c182:	041b      	lsls	r3, r3, #16
 800c184:	0e1b      	lsrs	r3, r3, #24
 800c186:	f003 030f 	and.w	r3, r3, #15
 800c18a:	4a29      	ldr	r2, [pc, #164]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800c18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c190:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c192:	e20e      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c194:	2300      	movs	r3, #0
 800c196:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c198:	e20b      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c19a:	2300      	movs	r3, #0
 800c19c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c19e:	e208      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800c1a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1a4:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800c1a8:	430b      	orrs	r3, r1
 800c1aa:	d17c      	bne.n	800c2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800c1ac:	4b1e      	ldr	r3, [pc, #120]	@ (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c1ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c1b2:	f003 0318 	and.w	r3, r3, #24
 800c1b6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800c1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ba:	2b18      	cmp	r3, #24
 800c1bc:	d870      	bhi.n	800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800c1be:	a201      	add	r2, pc, #4	@ (adr r2, 800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800c1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c4:	0800c235 	.word	0x0800c235
 800c1c8:	0800c2a1 	.word	0x0800c2a1
 800c1cc:	0800c2a1 	.word	0x0800c2a1
 800c1d0:	0800c2a1 	.word	0x0800c2a1
 800c1d4:	0800c2a1 	.word	0x0800c2a1
 800c1d8:	0800c2a1 	.word	0x0800c2a1
 800c1dc:	0800c2a1 	.word	0x0800c2a1
 800c1e0:	0800c2a1 	.word	0x0800c2a1
 800c1e4:	0800c23d 	.word	0x0800c23d
 800c1e8:	0800c2a1 	.word	0x0800c2a1
 800c1ec:	0800c2a1 	.word	0x0800c2a1
 800c1f0:	0800c2a1 	.word	0x0800c2a1
 800c1f4:	0800c2a1 	.word	0x0800c2a1
 800c1f8:	0800c2a1 	.word	0x0800c2a1
 800c1fc:	0800c2a1 	.word	0x0800c2a1
 800c200:	0800c2a1 	.word	0x0800c2a1
 800c204:	0800c245 	.word	0x0800c245
 800c208:	0800c2a1 	.word	0x0800c2a1
 800c20c:	0800c2a1 	.word	0x0800c2a1
 800c210:	0800c2a1 	.word	0x0800c2a1
 800c214:	0800c2a1 	.word	0x0800c2a1
 800c218:	0800c2a1 	.word	0x0800c2a1
 800c21c:	0800c2a1 	.word	0x0800c2a1
 800c220:	0800c2a1 	.word	0x0800c2a1
 800c224:	0800c25f 	.word	0x0800c25f
 800c228:	46020c00 	.word	0x46020c00
 800c22c:	00f42400 	.word	0x00f42400
 800c230:	0800e2dc 	.word	0x0800e2dc
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800c234:	f7fd f9fe 	bl	8009634 <HAL_RCC_GetPCLK3Freq>
 800c238:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c23a:	e1ba      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c23c:	f7fd f8b6 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800c240:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c242:	e1b6      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c244:	4b9f      	ldr	r3, [pc, #636]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c24c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c250:	d102      	bne.n	800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800c252:	4b9d      	ldr	r3, [pc, #628]	@ (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800c254:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c256:	e1ac      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c258:	2300      	movs	r3, #0
 800c25a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c25c:	e1a9      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c25e:	4b99      	ldr	r3, [pc, #612]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f003 0320 	and.w	r3, r3, #32
 800c266:	2b20      	cmp	r3, #32
 800c268:	d117      	bne.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c26a:	4b96      	ldr	r3, [pc, #600]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c26c:	689b      	ldr	r3, [r3, #8]
 800c26e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c272:	2b00      	cmp	r3, #0
 800c274:	d005      	beq.n	800c282 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800c276:	4b93      	ldr	r3, [pc, #588]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c278:	689b      	ldr	r3, [r3, #8]
 800c27a:	0e1b      	lsrs	r3, r3, #24
 800c27c:	f003 030f 	and.w	r3, r3, #15
 800c280:	e006      	b.n	800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800c282:	4b90      	ldr	r3, [pc, #576]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c284:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c288:	041b      	lsls	r3, r3, #16
 800c28a:	0e1b      	lsrs	r3, r3, #24
 800c28c:	f003 030f 	and.w	r3, r3, #15
 800c290:	4a8e      	ldr	r2, [pc, #568]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800c292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c296:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c298:	e18b      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c29a:	2300      	movs	r3, #0
 800c29c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c29e:	e188      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2a4:	e185      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800c2a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2aa:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800c2ae:	430b      	orrs	r3, r1
 800c2b0:	d155      	bne.n	800c35e <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c2b2:	4b84      	ldr	r3, [pc, #528]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c2b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c2b8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c2bc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c2c4:	d013      	beq.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c2cc:	d844      	bhi.n	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800c2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c2d4:	d013      	beq.n	800c2fe <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c2dc:	d83c      	bhi.n	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800c2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d014      	beq.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c2ea:	d014      	beq.n	800c316 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800c2ec:	e034      	b.n	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2ee:	f107 0318 	add.w	r3, r7, #24
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7fe fb2e 	bl	800a954 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2fc:	e159      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c302:	4618      	mov	r0, r3
 800c304:	f7fe f9cc 	bl	800a6a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c30a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c30c:	e151      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c30e:	f7fd f84d 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800c312:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c314:	e14d      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c316:	4b6b      	ldr	r3, [pc, #428]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f003 0320 	and.w	r3, r3, #32
 800c31e:	2b20      	cmp	r3, #32
 800c320:	d117      	bne.n	800c352 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c322:	4b68      	ldr	r3, [pc, #416]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c324:	689b      	ldr	r3, [r3, #8]
 800c326:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d005      	beq.n	800c33a <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800c32e:	4b65      	ldr	r3, [pc, #404]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	0e1b      	lsrs	r3, r3, #24
 800c334:	f003 030f 	and.w	r3, r3, #15
 800c338:	e006      	b.n	800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800c33a:	4b62      	ldr	r3, [pc, #392]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c33c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c340:	041b      	lsls	r3, r3, #16
 800c342:	0e1b      	lsrs	r3, r3, #24
 800c344:	f003 030f 	and.w	r3, r3, #15
 800c348:	4a60      	ldr	r2, [pc, #384]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800c34a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c34e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c350:	e12f      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c352:	2300      	movs	r3, #0
 800c354:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c356:	e12c      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c358:	2300      	movs	r3, #0
 800c35a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c35c:	e129      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800c35e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c362:	1e59      	subs	r1, r3, #1
 800c364:	ea52 0301 	orrs.w	r3, r2, r1
 800c368:	d13c      	bne.n	800c3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800c36a:	4b56      	ldr	r3, [pc, #344]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c36c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c370:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800c374:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c378:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c37c:	d027      	beq.n	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800c37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c380:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c384:	d82b      	bhi.n	800c3de <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800c386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c388:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c38c:	d017      	beq.n	800c3be <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800c38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c390:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c394:	d823      	bhi.n	800c3de <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800c396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d004      	beq.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800c39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c39e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c3a2:	d004      	beq.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800c3a4:	e01b      	b.n	800c3de <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c3a6:	f7fd f801 	bl	80093ac <HAL_RCC_GetSysClockFreq>
 800c3aa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c3ac:	e101      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7fe f974 	bl	800a6a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3bc:	e0f9      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3be:	f107 0318 	add.w	r3, r7, #24
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7fe fac6 	bl	800a954 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3cc:	e0f1      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3ce:	f107 030c 	add.w	r3, r7, #12
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7fe fc18 	bl	800ac08 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3dc:	e0e9      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3e2:	e0e6      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800c3e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3e8:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800c3ec:	430b      	orrs	r3, r1
 800c3ee:	d131      	bne.n	800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800c3f0:	4b34      	ldr	r3, [pc, #208]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c3f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c3f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c3fa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800c3fc:	4b31      	ldr	r3, [pc, #196]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c3fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c402:	f003 0302 	and.w	r3, r3, #2
 800c406:	2b02      	cmp	r3, #2
 800c408:	d106      	bne.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800c40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d103      	bne.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800c410:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c414:	637b      	str	r3, [r7, #52]	@ 0x34
 800c416:	e0cc      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800c418:	4b2a      	ldr	r3, [pc, #168]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c41a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c41e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c422:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c426:	d112      	bne.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800c428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c42a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c42e:	d10e      	bne.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c430:	4b24      	ldr	r3, [pc, #144]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c432:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c43a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c43e:	d102      	bne.n	800c446 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800c440:	23fa      	movs	r3, #250	@ 0xfa
 800c442:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c444:	e0b5      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c446:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c44a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c44c:	e0b1      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800c44e:	2300      	movs	r3, #0
 800c450:	637b      	str	r3, [r7, #52]	@ 0x34
 800c452:	e0ae      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800c454:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c458:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800c45c:	430b      	orrs	r3, r1
 800c45e:	d13b      	bne.n	800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800c460:	4b18      	ldr	r3, [pc, #96]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c462:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c466:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c46a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800c46c:	4b15      	ldr	r3, [pc, #84]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c478:	d105      	bne.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800c47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d102      	bne.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800c480:	4b13      	ldr	r3, [pc, #76]	@ (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800c482:	637b      	str	r3, [r7, #52]	@ 0x34
 800c484:	e095      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800c486:	4b0f      	ldr	r3, [pc, #60]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c48e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c492:	d106      	bne.n	800c4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800c494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c49a:	d102      	bne.n	800c4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800c49c:	4b0d      	ldr	r3, [pc, #52]	@ (800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800c49e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4a0:	e087      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800c4a2:	4b08      	ldr	r3, [pc, #32]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c4aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4ae:	d106      	bne.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800c4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4b6:	d102      	bne.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800c4b8:	4b03      	ldr	r3, [pc, #12]	@ (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800c4ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4bc:	e079      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4c2:	e076      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c4c4:	46020c00 	.word	0x46020c00
 800c4c8:	00f42400 	.word	0x00f42400
 800c4cc:	0800e2dc 	.word	0x0800e2dc
 800c4d0:	02dc6c00 	.word	0x02dc6c00
 800c4d4:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800c4d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4dc:	1e99      	subs	r1, r3, #2
 800c4de:	ea52 0301 	orrs.w	r3, r2, r1
 800c4e2:	d120      	bne.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800c4e4:	4b35      	ldr	r3, [pc, #212]	@ (800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c4e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c4ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c4ee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d004      	beq.n	800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800c4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c4fc:	d008      	beq.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800c4fe:	e00f      	b.n	800c520 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c500:	f107 030c 	add.w	r3, r7, #12
 800c504:	4618      	mov	r0, r3
 800c506:	f7fe fb7f 	bl	800ac08 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c50e:	e050      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c510:	f107 0318 	add.w	r3, r7, #24
 800c514:	4618      	mov	r0, r3
 800c516:	f7fe fa1d 	bl	800a954 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800c51a:	6a3b      	ldr	r3, [r7, #32]
 800c51c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c51e:	e048      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c520:	2300      	movs	r3, #0
 800c522:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c524:	e045      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800c526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c52a:	f1a3 0108 	sub.w	r1, r3, #8
 800c52e:	ea52 0301 	orrs.w	r3, r2, r1
 800c532:	d13c      	bne.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800c534:	4b21      	ldr	r3, [pc, #132]	@ (800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c536:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c53a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c53e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800c540:	4b1e      	ldr	r3, [pc, #120]	@ (800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c548:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c54c:	d105      	bne.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800c54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c550:	2b00      	cmp	r3, #0
 800c552:	d102      	bne.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800c554:	4b1a      	ldr	r3, [pc, #104]	@ (800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800c556:	637b      	str	r3, [r7, #52]	@ 0x34
 800c558:	e02b      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800c55a:	4b18      	ldr	r3, [pc, #96]	@ (800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c562:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c566:	d106      	bne.n	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800c568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c56a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c56e:	d102      	bne.n	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800c570:	4b14      	ldr	r3, [pc, #80]	@ (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800c572:	637b      	str	r3, [r7, #52]	@ 0x34
 800c574:	e01d      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800c576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c57c:	d107      	bne.n	800c58e <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c57e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c582:	4618      	mov	r0, r3
 800c584:	f7fe f88c 	bl	800a6a0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c58c:	e011      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800c58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c590:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c594:	d108      	bne.n	800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c596:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7fe f880 	bl	800a6a0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a2:	085b      	lsrs	r3, r3, #1
 800c5a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5a6:	e004      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5ac:	e001      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800c5b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3738      	adds	r7, #56	@ 0x38
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	46020c00 	.word	0x46020c00
 800c5c0:	00f42400 	.word	0x00f42400
 800c5c4:	007a1200 	.word	0x007a1200

0800c5c8 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800c5cc:	4b06      	ldr	r3, [pc, #24]	@ (800c5e8 <HAL_RCCEx_EnableLSECSS+0x20>)
 800c5ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c5d2:	4a05      	ldr	r2, [pc, #20]	@ (800c5e8 <HAL_RCCEx_EnableLSECSS+0x20>)
 800c5d4:	f043 0320 	orr.w	r3, r3, #32
 800c5d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 800c5dc:	bf00      	nop
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr
 800c5e6:	bf00      	nop
 800c5e8:	46020c00 	.word	0x46020c00

0800c5ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800c5f4:	4b47      	ldr	r3, [pc, #284]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a46      	ldr	r2, [pc, #280]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c5fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c5fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c600:	f7f7 fa7e 	bl	8003b00 <HAL_GetTick>
 800c604:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c606:	e008      	b.n	800c61a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c608:	f7f7 fa7a 	bl	8003b00 <HAL_GetTick>
 800c60c:	4602      	mov	r2, r0
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	2b02      	cmp	r3, #2
 800c614:	d901      	bls.n	800c61a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c616:	2303      	movs	r3, #3
 800c618:	e077      	b.n	800c70a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c61a:	4b3e      	ldr	r3, [pc, #248]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c622:	2b00      	cmp	r3, #0
 800c624:	d1f0      	bne.n	800c608 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c626:	4b3b      	ldr	r3, [pc, #236]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c62a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c62e:	f023 0303 	bic.w	r3, r3, #3
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	6811      	ldr	r1, [r2, #0]
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	6852      	ldr	r2, [r2, #4]
 800c63a:	3a01      	subs	r2, #1
 800c63c:	0212      	lsls	r2, r2, #8
 800c63e:	430a      	orrs	r2, r1
 800c640:	4934      	ldr	r1, [pc, #208]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c642:	4313      	orrs	r3, r2
 800c644:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800c646:	4b33      	ldr	r3, [pc, #204]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c648:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c64a:	4b33      	ldr	r3, [pc, #204]	@ (800c718 <RCCEx_PLL2_Config+0x12c>)
 800c64c:	4013      	ands	r3, r2
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	6892      	ldr	r2, [r2, #8]
 800c652:	3a01      	subs	r2, #1
 800c654:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	68d2      	ldr	r2, [r2, #12]
 800c65c:	3a01      	subs	r2, #1
 800c65e:	0252      	lsls	r2, r2, #9
 800c660:	b292      	uxth	r2, r2
 800c662:	4311      	orrs	r1, r2
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	6912      	ldr	r2, [r2, #16]
 800c668:	3a01      	subs	r2, #1
 800c66a:	0412      	lsls	r2, r2, #16
 800c66c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c670:	4311      	orrs	r1, r2
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	6952      	ldr	r2, [r2, #20]
 800c676:	3a01      	subs	r2, #1
 800c678:	0612      	lsls	r2, r2, #24
 800c67a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c67e:	430a      	orrs	r2, r1
 800c680:	4924      	ldr	r1, [pc, #144]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c682:	4313      	orrs	r3, r2
 800c684:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c686:	4b23      	ldr	r3, [pc, #140]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c68a:	f023 020c 	bic.w	r2, r3, #12
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	699b      	ldr	r3, [r3, #24]
 800c692:	4920      	ldr	r1, [pc, #128]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c694:	4313      	orrs	r3, r2
 800c696:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c698:	4b1e      	ldr	r3, [pc, #120]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c69a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6a1b      	ldr	r3, [r3, #32]
 800c6a0:	491c      	ldr	r1, [pc, #112]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800c6a6:	4b1b      	ldr	r3, [pc, #108]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c6a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6aa:	4a1a      	ldr	r2, [pc, #104]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c6ac:	f023 0310 	bic.w	r3, r3, #16
 800c6b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c6b2:	4b18      	ldr	r3, [pc, #96]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c6b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c6ba:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	69d2      	ldr	r2, [r2, #28]
 800c6c2:	00d2      	lsls	r2, r2, #3
 800c6c4:	4913      	ldr	r1, [pc, #76]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800c6ca:	4b12      	ldr	r3, [pc, #72]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ce:	4a11      	ldr	r2, [pc, #68]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c6d0:	f043 0310 	orr.w	r3, r3, #16
 800c6d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800c6d6:	4b0f      	ldr	r3, [pc, #60]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a0e      	ldr	r2, [pc, #56]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c6dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c6e0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c6e2:	f7f7 fa0d 	bl	8003b00 <HAL_GetTick>
 800c6e6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6e8:	e008      	b.n	800c6fc <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c6ea:	f7f7 fa09 	bl	8003b00 <HAL_GetTick>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	1ad3      	subs	r3, r2, r3
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	d901      	bls.n	800c6fc <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c6f8:	2303      	movs	r3, #3
 800c6fa:	e006      	b.n	800c70a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6fc:	4b05      	ldr	r3, [pc, #20]	@ (800c714 <RCCEx_PLL2_Config+0x128>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c704:	2b00      	cmp	r3, #0
 800c706:	d0f0      	beq.n	800c6ea <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800c708:	2300      	movs	r3, #0

}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	46020c00 	.word	0x46020c00
 800c718:	80800000 	.word	0x80800000

0800c71c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800c724:	4b47      	ldr	r3, [pc, #284]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a46      	ldr	r2, [pc, #280]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c72a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c72e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c730:	f7f7 f9e6 	bl	8003b00 <HAL_GetTick>
 800c734:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c736:	e008      	b.n	800c74a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c738:	f7f7 f9e2 	bl	8003b00 <HAL_GetTick>
 800c73c:	4602      	mov	r2, r0
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	2b02      	cmp	r3, #2
 800c744:	d901      	bls.n	800c74a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c746:	2303      	movs	r3, #3
 800c748:	e077      	b.n	800c83a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c74a:	4b3e      	ldr	r3, [pc, #248]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1f0      	bne.n	800c738 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c756:	4b3b      	ldr	r3, [pc, #236]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c75a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c75e:	f023 0303 	bic.w	r3, r3, #3
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	6811      	ldr	r1, [r2, #0]
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	6852      	ldr	r2, [r2, #4]
 800c76a:	3a01      	subs	r2, #1
 800c76c:	0212      	lsls	r2, r2, #8
 800c76e:	430a      	orrs	r2, r1
 800c770:	4934      	ldr	r1, [pc, #208]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c772:	4313      	orrs	r3, r2
 800c774:	630b      	str	r3, [r1, #48]	@ 0x30
 800c776:	4b33      	ldr	r3, [pc, #204]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c77a:	4b33      	ldr	r3, [pc, #204]	@ (800c848 <RCCEx_PLL3_Config+0x12c>)
 800c77c:	4013      	ands	r3, r2
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	6892      	ldr	r2, [r2, #8]
 800c782:	3a01      	subs	r2, #1
 800c784:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	68d2      	ldr	r2, [r2, #12]
 800c78c:	3a01      	subs	r2, #1
 800c78e:	0252      	lsls	r2, r2, #9
 800c790:	b292      	uxth	r2, r2
 800c792:	4311      	orrs	r1, r2
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	6912      	ldr	r2, [r2, #16]
 800c798:	3a01      	subs	r2, #1
 800c79a:	0412      	lsls	r2, r2, #16
 800c79c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c7a0:	4311      	orrs	r1, r2
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	6952      	ldr	r2, [r2, #20]
 800c7a6:	3a01      	subs	r2, #1
 800c7a8:	0612      	lsls	r2, r2, #24
 800c7aa:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c7ae:	430a      	orrs	r2, r1
 800c7b0:	4924      	ldr	r1, [pc, #144]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800c7b6:	4b23      	ldr	r3, [pc, #140]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c7b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7ba:	f023 020c 	bic.w	r2, r3, #12
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	699b      	ldr	r3, [r3, #24]
 800c7c2:	4920      	ldr	r1, [pc, #128]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c7c8:	4b1e      	ldr	r3, [pc, #120]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c7ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6a1b      	ldr	r3, [r3, #32]
 800c7d0:	491c      	ldr	r1, [pc, #112]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800c7d6:	4b1b      	ldr	r3, [pc, #108]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c7d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7da:	4a1a      	ldr	r2, [pc, #104]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c7dc:	f023 0310 	bic.w	r3, r3, #16
 800c7e0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c7e2:	4b18      	ldr	r3, [pc, #96]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c7e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c7ea:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	69d2      	ldr	r2, [r2, #28]
 800c7f2:	00d2      	lsls	r2, r2, #3
 800c7f4:	4913      	ldr	r1, [pc, #76]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800c7fa:	4b12      	ldr	r3, [pc, #72]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c7fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7fe:	4a11      	ldr	r2, [pc, #68]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c800:	f043 0310 	orr.w	r3, r3, #16
 800c804:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800c806:	4b0f      	ldr	r3, [pc, #60]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a0e      	ldr	r2, [pc, #56]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c80c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c810:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c812:	f7f7 f975 	bl	8003b00 <HAL_GetTick>
 800c816:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c818:	e008      	b.n	800c82c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c81a:	f7f7 f971 	bl	8003b00 <HAL_GetTick>
 800c81e:	4602      	mov	r2, r0
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	1ad3      	subs	r3, r2, r3
 800c824:	2b02      	cmp	r3, #2
 800c826:	d901      	bls.n	800c82c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c828:	2303      	movs	r3, #3
 800c82a:	e006      	b.n	800c83a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c82c:	4b05      	ldr	r3, [pc, #20]	@ (800c844 <RCCEx_PLL3_Config+0x128>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c834:	2b00      	cmp	r3, #0
 800c836:	d0f0      	beq.n	800c81a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800c838:	2300      	movs	r3, #0
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	46020c00 	.word	0x46020c00
 800c848:	80800000 	.word	0x80800000

0800c84c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c854:	2301      	movs	r3, #1
 800c856:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d071      	beq.n	800c942 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c864:	b2db      	uxtb	r3, r3
 800c866:	2b00      	cmp	r3, #0
 800c868:	d106      	bne.n	800c878 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2200      	movs	r2, #0
 800c86e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f7f6 fec4 	bl	8003600 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2202      	movs	r2, #2
 800c87c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c880:	4b32      	ldr	r3, [pc, #200]	@ (800c94c <HAL_RTC_Init+0x100>)
 800c882:	68db      	ldr	r3, [r3, #12]
 800c884:	f003 0310 	and.w	r3, r3, #16
 800c888:	2b10      	cmp	r3, #16
 800c88a:	d051      	beq.n	800c930 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c88c:	4b2f      	ldr	r3, [pc, #188]	@ (800c94c <HAL_RTC_Init+0x100>)
 800c88e:	22ca      	movs	r2, #202	@ 0xca
 800c890:	625a      	str	r2, [r3, #36]	@ 0x24
 800c892:	4b2e      	ldr	r3, [pc, #184]	@ (800c94c <HAL_RTC_Init+0x100>)
 800c894:	2253      	movs	r2, #83	@ 0x53
 800c896:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 f9ad 	bl	800cbf8 <RTC_EnterInitMode>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c8a2:	7bfb      	ldrb	r3, [r7, #15]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d13f      	bne.n	800c928 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800c8a8:	4b28      	ldr	r3, [pc, #160]	@ (800c94c <HAL_RTC_Init+0x100>)
 800c8aa:	699b      	ldr	r3, [r3, #24]
 800c8ac:	4a27      	ldr	r2, [pc, #156]	@ (800c94c <HAL_RTC_Init+0x100>)
 800c8ae:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800c8b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8b6:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800c8b8:	4b24      	ldr	r3, [pc, #144]	@ (800c94c <HAL_RTC_Init+0x100>)
 800c8ba:	699a      	ldr	r2, [r3, #24]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6859      	ldr	r1, [r3, #4]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	691b      	ldr	r3, [r3, #16]
 800c8c4:	4319      	orrs	r1, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	699b      	ldr	r3, [r3, #24]
 800c8ca:	430b      	orrs	r3, r1
 800c8cc:	491f      	ldr	r1, [pc, #124]	@ (800c94c <HAL_RTC_Init+0x100>)
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	68da      	ldr	r2, [r3, #12]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	041b      	lsls	r3, r3, #16
 800c8dc:	491b      	ldr	r1, [pc, #108]	@ (800c94c <HAL_RTC_Init+0x100>)
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800c8e2:	4b1a      	ldr	r3, [pc, #104]	@ (800c94c <HAL_RTC_Init+0x100>)
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8f2:	430b      	orrs	r3, r1
 800c8f4:	4915      	ldr	r1, [pc, #84]	@ (800c94c <HAL_RTC_Init+0x100>)
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 f9b8 	bl	800cc70 <RTC_ExitInitMode>
 800c900:	4603      	mov	r3, r0
 800c902:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800c904:	7bfb      	ldrb	r3, [r7, #15]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d10e      	bne.n	800c928 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800c90a:	4b10      	ldr	r3, [pc, #64]	@ (800c94c <HAL_RTC_Init+0x100>)
 800c90c:	699b      	ldr	r3, [r3, #24]
 800c90e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a19      	ldr	r1, [r3, #32]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	69db      	ldr	r3, [r3, #28]
 800c91a:	4319      	orrs	r1, r3
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	695b      	ldr	r3, [r3, #20]
 800c920:	430b      	orrs	r3, r1
 800c922:	490a      	ldr	r1, [pc, #40]	@ (800c94c <HAL_RTC_Init+0x100>)
 800c924:	4313      	orrs	r3, r2
 800c926:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c928:	4b08      	ldr	r3, [pc, #32]	@ (800c94c <HAL_RTC_Init+0x100>)
 800c92a:	22ff      	movs	r2, #255	@ 0xff
 800c92c:	625a      	str	r2, [r3, #36]	@ 0x24
 800c92e:	e001      	b.n	800c934 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800c930:	2300      	movs	r3, #0
 800c932:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c934:	7bfb      	ldrb	r3, [r7, #15]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d103      	bne.n	800c942 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2201      	movs	r2, #1
 800c93e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800c942:	7bfb      	ldrb	r3, [r7, #15]
}
 800c944:	4618      	mov	r0, r3
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	46007800 	.word	0x46007800

0800c950 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c950:	b590      	push	{r4, r7, lr}
 800c952:	b087      	sub	sp, #28
 800c954:	af00      	add	r7, sp, #0
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c962:	2b01      	cmp	r3, #1
 800c964:	d101      	bne.n	800c96a <HAL_RTC_SetTime+0x1a>
 800c966:	2302      	movs	r3, #2
 800c968:	e088      	b.n	800ca7c <HAL_RTC_SetTime+0x12c>
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2201      	movs	r2, #1
 800c96e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2202      	movs	r2, #2
 800c976:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c97a:	4b42      	ldr	r3, [pc, #264]	@ (800ca84 <HAL_RTC_SetTime+0x134>)
 800c97c:	22ca      	movs	r2, #202	@ 0xca
 800c97e:	625a      	str	r2, [r3, #36]	@ 0x24
 800c980:	4b40      	ldr	r3, [pc, #256]	@ (800ca84 <HAL_RTC_SetTime+0x134>)
 800c982:	2253      	movs	r2, #83	@ 0x53
 800c984:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c986:	68f8      	ldr	r0, [r7, #12]
 800c988:	f000 f936 	bl	800cbf8 <RTC_EnterInitMode>
 800c98c:	4603      	mov	r3, r0
 800c98e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c990:	7cfb      	ldrb	r3, [r7, #19]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d163      	bne.n	800ca5e <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800c996:	4b3b      	ldr	r3, [pc, #236]	@ (800ca84 <HAL_RTC_SetTime+0x134>)
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c99e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c9a2:	d057      	beq.n	800ca54 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d125      	bne.n	800c9f6 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c9aa:	4b36      	ldr	r3, [pc, #216]	@ (800ca84 <HAL_RTC_SetTime+0x134>)
 800c9ac:	699b      	ldr	r3, [r3, #24]
 800c9ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d102      	bne.n	800c9bc <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f000 f993 	bl	800ccec <RTC_ByteToBcd2>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	785b      	ldrb	r3, [r3, #1]
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f000 f98c 	bl	800ccec <RTC_ByteToBcd2>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9d8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	789b      	ldrb	r3, [r3, #2]
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f000 f984 	bl	800ccec <RTC_ByteToBcd2>
 800c9e4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9e6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	78db      	ldrb	r3, [r3, #3]
 800c9ee:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	617b      	str	r3, [r7, #20]
 800c9f4:	e017      	b.n	800ca26 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c9f6:	4b23      	ldr	r3, [pc, #140]	@ (800ca84 <HAL_RTC_SetTime+0x134>)
 800c9f8:	699b      	ldr	r3, [r3, #24]
 800c9fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d102      	bne.n	800ca08 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	2200      	movs	r2, #0
 800ca06:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	785b      	ldrb	r3, [r3, #1]
 800ca12:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca14:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ca16:	68ba      	ldr	r2, [r7, #8]
 800ca18:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ca1a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	78db      	ldrb	r3, [r3, #3]
 800ca20:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca22:	4313      	orrs	r3, r2
 800ca24:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800ca26:	4a17      	ldr	r2, [pc, #92]	@ (800ca84 <HAL_RTC_SetTime+0x134>)
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800ca2e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800ca32:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800ca34:	4b13      	ldr	r3, [pc, #76]	@ (800ca84 <HAL_RTC_SetTime+0x134>)
 800ca36:	699b      	ldr	r3, [r3, #24]
 800ca38:	4a12      	ldr	r2, [pc, #72]	@ (800ca84 <HAL_RTC_SetTime+0x134>)
 800ca3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ca3e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800ca40:	4b10      	ldr	r3, [pc, #64]	@ (800ca84 <HAL_RTC_SetTime+0x134>)
 800ca42:	699a      	ldr	r2, [r3, #24]
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	68d9      	ldr	r1, [r3, #12]
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	691b      	ldr	r3, [r3, #16]
 800ca4c:	430b      	orrs	r3, r1
 800ca4e:	490d      	ldr	r1, [pc, #52]	@ (800ca84 <HAL_RTC_SetTime+0x134>)
 800ca50:	4313      	orrs	r3, r2
 800ca52:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f000 f90b 	bl	800cc70 <RTC_ExitInitMode>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca5e:	4b09      	ldr	r3, [pc, #36]	@ (800ca84 <HAL_RTC_SetTime+0x134>)
 800ca60:	22ff      	movs	r2, #255	@ 0xff
 800ca62:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800ca64:	7cfb      	ldrb	r3, [r7, #19]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d103      	bne.n	800ca72 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2200      	movs	r2, #0
 800ca76:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800ca7a:	7cfb      	ldrb	r3, [r7, #19]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	371c      	adds	r7, #28
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd90      	pop	{r4, r7, pc}
 800ca84:	46007800 	.word	0x46007800

0800ca88 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ca88:	b590      	push	{r4, r7, lr}
 800ca8a:	b087      	sub	sp, #28
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d101      	bne.n	800caa2 <HAL_RTC_SetDate+0x1a>
 800ca9e:	2302      	movs	r3, #2
 800caa0:	e071      	b.n	800cb86 <HAL_RTC_SetDate+0xfe>
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2201      	movs	r2, #1
 800caa6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2202      	movs	r2, #2
 800caae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d10e      	bne.n	800cad6 <HAL_RTC_SetDate+0x4e>
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	785b      	ldrb	r3, [r3, #1]
 800cabc:	f003 0310 	and.w	r3, r3, #16
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d008      	beq.n	800cad6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	785b      	ldrb	r3, [r3, #1]
 800cac8:	f023 0310 	bic.w	r3, r3, #16
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	330a      	adds	r3, #10
 800cad0:	b2da      	uxtb	r2, r3
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d11c      	bne.n	800cb16 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	78db      	ldrb	r3, [r3, #3]
 800cae0:	4618      	mov	r0, r3
 800cae2:	f000 f903 	bl	800ccec <RTC_ByteToBcd2>
 800cae6:	4603      	mov	r3, r0
 800cae8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	785b      	ldrb	r3, [r3, #1]
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 f8fc 	bl	800ccec <RTC_ByteToBcd2>
 800caf4:	4603      	mov	r3, r0
 800caf6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800caf8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	789b      	ldrb	r3, [r3, #2]
 800cafe:	4618      	mov	r0, r3
 800cb00:	f000 f8f4 	bl	800ccec <RTC_ByteToBcd2>
 800cb04:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cb06:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cb10:	4313      	orrs	r3, r2
 800cb12:	617b      	str	r3, [r7, #20]
 800cb14:	e00e      	b.n	800cb34 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	78db      	ldrb	r3, [r3, #3]
 800cb1a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	785b      	ldrb	r3, [r3, #1]
 800cb20:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cb22:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800cb24:	68ba      	ldr	r2, [r7, #8]
 800cb26:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cb28:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cb30:	4313      	orrs	r3, r2
 800cb32:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb34:	4b16      	ldr	r3, [pc, #88]	@ (800cb90 <HAL_RTC_SetDate+0x108>)
 800cb36:	22ca      	movs	r2, #202	@ 0xca
 800cb38:	625a      	str	r2, [r3, #36]	@ 0x24
 800cb3a:	4b15      	ldr	r3, [pc, #84]	@ (800cb90 <HAL_RTC_SetDate+0x108>)
 800cb3c:	2253      	movs	r2, #83	@ 0x53
 800cb3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f000 f859 	bl	800cbf8 <RTC_EnterInitMode>
 800cb46:	4603      	mov	r3, r0
 800cb48:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800cb4a:	7cfb      	ldrb	r3, [r7, #19]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d10b      	bne.n	800cb68 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800cb50:	4a0f      	ldr	r2, [pc, #60]	@ (800cb90 <HAL_RTC_SetDate+0x108>)
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cb58:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cb5c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	f000 f886 	bl	800cc70 <RTC_ExitInitMode>
 800cb64:	4603      	mov	r3, r0
 800cb66:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb68:	4b09      	ldr	r3, [pc, #36]	@ (800cb90 <HAL_RTC_SetDate+0x108>)
 800cb6a:	22ff      	movs	r2, #255	@ 0xff
 800cb6c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800cb6e:	7cfb      	ldrb	r3, [r7, #19]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d103      	bne.n	800cb7c <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2201      	movs	r2, #1
 800cb78:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800cb84:	7cfb      	ldrb	r3, [r7, #19]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	371c      	adds	r7, #28
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd90      	pop	{r4, r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	46007800 	.word	0x46007800

0800cb94 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800cb9c:	4b15      	ldr	r3, [pc, #84]	@ (800cbf4 <HAL_RTC_WaitForSynchro+0x60>)
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	4a14      	ldr	r2, [pc, #80]	@ (800cbf4 <HAL_RTC_WaitForSynchro+0x60>)
 800cba2:	f023 0320 	bic.w	r3, r3, #32
 800cba6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800cba8:	f7f6 ffaa 	bl	8003b00 <HAL_GetTick>
 800cbac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cbae:	e013      	b.n	800cbd8 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cbb0:	f7f6 ffa6 	bl	8003b00 <HAL_GetTick>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cbbe:	d90b      	bls.n	800cbd8 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cbc0:	4b0c      	ldr	r3, [pc, #48]	@ (800cbf4 <HAL_RTC_WaitForSynchro+0x60>)
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	f003 0320 	and.w	r3, r3, #32
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d10c      	bne.n	800cbe6 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2203      	movs	r2, #3
 800cbd0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800cbd4:	2303      	movs	r3, #3
 800cbd6:	e008      	b.n	800cbea <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cbd8:	4b06      	ldr	r3, [pc, #24]	@ (800cbf4 <HAL_RTC_WaitForSynchro+0x60>)
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	f003 0320 	and.w	r3, r3, #32
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d0e5      	beq.n	800cbb0 <HAL_RTC_WaitForSynchro+0x1c>
 800cbe4:	e000      	b.n	800cbe8 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800cbe6:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	46007800 	.word	0x46007800

0800cbf8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc00:	2300      	movs	r3, #0
 800cc02:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cc04:	4b19      	ldr	r3, [pc, #100]	@ (800cc6c <RTC_EnterInitMode+0x74>)
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d128      	bne.n	800cc62 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cc10:	4b16      	ldr	r3, [pc, #88]	@ (800cc6c <RTC_EnterInitMode+0x74>)
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	4a15      	ldr	r2, [pc, #84]	@ (800cc6c <RTC_EnterInitMode+0x74>)
 800cc16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc1a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800cc1c:	f7f6 ff70 	bl	8003b00 <HAL_GetTick>
 800cc20:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cc22:	e013      	b.n	800cc4c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cc24:	f7f6 ff6c 	bl	8003b00 <HAL_GetTick>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	1ad3      	subs	r3, r2, r3
 800cc2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cc32:	d90b      	bls.n	800cc4c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cc34:	4b0d      	ldr	r3, [pc, #52]	@ (800cc6c <RTC_EnterInitMode+0x74>)
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d10f      	bne.n	800cc60 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800cc40:	2303      	movs	r3, #3
 800cc42:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2203      	movs	r2, #3
 800cc48:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cc4c:	4b07      	ldr	r3, [pc, #28]	@ (800cc6c <RTC_EnterInitMode+0x74>)
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d104      	bne.n	800cc62 <RTC_EnterInitMode+0x6a>
 800cc58:	7bfb      	ldrb	r3, [r7, #15]
 800cc5a:	2b03      	cmp	r3, #3
 800cc5c:	d1e2      	bne.n	800cc24 <RTC_EnterInitMode+0x2c>
 800cc5e:	e000      	b.n	800cc62 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800cc60:	bf00      	nop
        }
      }
    }
  }

  return status;
 800cc62:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3710      	adds	r7, #16
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	46007800 	.word	0x46007800

0800cc70 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cc7c:	4b1a      	ldr	r3, [pc, #104]	@ (800cce8 <RTC_ExitInitMode+0x78>)
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	4a19      	ldr	r2, [pc, #100]	@ (800cce8 <RTC_ExitInitMode+0x78>)
 800cc82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc86:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cc88:	4b17      	ldr	r3, [pc, #92]	@ (800cce8 <RTC_ExitInitMode+0x78>)
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	f003 0320 	and.w	r3, r3, #32
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10c      	bne.n	800ccae <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f7ff ff7d 	bl	800cb94 <HAL_RTC_WaitForSynchro>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d01e      	beq.n	800ccde <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2203      	movs	r2, #3
 800cca4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800cca8:	2303      	movs	r3, #3
 800ccaa:	73fb      	strb	r3, [r7, #15]
 800ccac:	e017      	b.n	800ccde <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ccae:	4b0e      	ldr	r3, [pc, #56]	@ (800cce8 <RTC_ExitInitMode+0x78>)
 800ccb0:	699b      	ldr	r3, [r3, #24]
 800ccb2:	4a0d      	ldr	r2, [pc, #52]	@ (800cce8 <RTC_ExitInitMode+0x78>)
 800ccb4:	f023 0320 	bic.w	r3, r3, #32
 800ccb8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f7ff ff6a 	bl	800cb94 <HAL_RTC_WaitForSynchro>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d005      	beq.n	800ccd2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2203      	movs	r2, #3
 800ccca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ccce:	2303      	movs	r3, #3
 800ccd0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ccd2:	4b05      	ldr	r3, [pc, #20]	@ (800cce8 <RTC_ExitInitMode+0x78>)
 800ccd4:	699b      	ldr	r3, [r3, #24]
 800ccd6:	4a04      	ldr	r2, [pc, #16]	@ (800cce8 <RTC_ExitInitMode+0x78>)
 800ccd8:	f043 0320 	orr.w	r3, r3, #32
 800ccdc:	6193      	str	r3, [r2, #24]
  }
  return status;
 800ccde:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3710      	adds	r7, #16
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	46007800 	.word	0x46007800

0800ccec <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800ccfa:	79fb      	ldrb	r3, [r7, #7]
 800ccfc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800ccfe:	e005      	b.n	800cd0c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	3301      	adds	r3, #1
 800cd04:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800cd06:	7afb      	ldrb	r3, [r7, #11]
 800cd08:	3b0a      	subs	r3, #10
 800cd0a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800cd0c:	7afb      	ldrb	r3, [r7, #11]
 800cd0e:	2b09      	cmp	r3, #9
 800cd10:	d8f6      	bhi.n	800cd00 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	011b      	lsls	r3, r3, #4
 800cd18:	b2da      	uxtb	r2, r3
 800cd1a:	7afb      	ldrb	r3, [r7, #11]
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	b2db      	uxtb	r3, r3
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3714      	adds	r7, #20
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	4910      	ldr	r1, [pc, #64]	@ (800cd80 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800cd40:	4313      	orrs	r3, r2
 800cd42:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	689a      	ldr	r2, [r3, #8]
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	68db      	ldr	r3, [r3, #12]
 800cd4c:	431a      	orrs	r2, r3
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	699b      	ldr	r3, [r3, #24]
 800cd52:	490c      	ldr	r1, [pc, #48]	@ (800cd84 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd54:	4313      	orrs	r3, r2
 800cd56:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800cd58:	4b0a      	ldr	r3, [pc, #40]	@ (800cd84 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd5a:	6a1b      	ldr	r3, [r3, #32]
 800cd5c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	6919      	ldr	r1, [r3, #16]
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	695b      	ldr	r3, [r3, #20]
 800cd68:	041b      	lsls	r3, r3, #16
 800cd6a:	430b      	orrs	r3, r1
 800cd6c:	4905      	ldr	r1, [pc, #20]	@ (800cd84 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800cd72:	2300      	movs	r3, #0
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	370c      	adds	r7, #12
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr
 800cd80:	46007800 	.word	0x46007800
 800cd84:	46007c00 	.word	0x46007c00

0800cd88 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b084      	sub	sp, #16
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d101      	bne.n	800cd9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cd96:	2301      	movs	r3, #1
 800cd98:	e0fb      	b.n	800cf92 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a7f      	ldr	r2, [pc, #508]	@ (800cf9c <HAL_SPI_Init+0x214>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d004      	beq.n	800cdae <HAL_SPI_Init+0x26>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4a7d      	ldr	r2, [pc, #500]	@ (800cfa0 <HAL_SPI_Init+0x218>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	e000      	b.n	800cdb0 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800cdae:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a78      	ldr	r2, [pc, #480]	@ (800cf9c <HAL_SPI_Init+0x214>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d004      	beq.n	800cdca <HAL_SPI_Init+0x42>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a76      	ldr	r2, [pc, #472]	@ (800cfa0 <HAL_SPI_Init+0x218>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d105      	bne.n	800cdd6 <HAL_SPI_Init+0x4e>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	68db      	ldr	r3, [r3, #12]
 800cdce:	2b0f      	cmp	r3, #15
 800cdd0:	d901      	bls.n	800cdd6 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	e0dd      	b.n	800cf92 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 f8ec 	bl	800cfb4 <SPI_GetPacketSize>
 800cddc:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4a6e      	ldr	r2, [pc, #440]	@ (800cf9c <HAL_SPI_Init+0x214>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d004      	beq.n	800cdf2 <HAL_SPI_Init+0x6a>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a6c      	ldr	r2, [pc, #432]	@ (800cfa0 <HAL_SPI_Init+0x218>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d102      	bne.n	800cdf8 <HAL_SPI_Init+0x70>
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2b08      	cmp	r3, #8
 800cdf6:	d816      	bhi.n	800ce26 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cdfc:	4a69      	ldr	r2, [pc, #420]	@ (800cfa4 <HAL_SPI_Init+0x21c>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d00e      	beq.n	800ce20 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4a68      	ldr	r2, [pc, #416]	@ (800cfa8 <HAL_SPI_Init+0x220>)
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d009      	beq.n	800ce20 <HAL_SPI_Init+0x98>
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4a66      	ldr	r2, [pc, #408]	@ (800cfac <HAL_SPI_Init+0x224>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d004      	beq.n	800ce20 <HAL_SPI_Init+0x98>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4a65      	ldr	r2, [pc, #404]	@ (800cfb0 <HAL_SPI_Init+0x228>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d104      	bne.n	800ce2a <HAL_SPI_Init+0xa2>
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2b10      	cmp	r3, #16
 800ce24:	d901      	bls.n	800ce2a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800ce26:	2301      	movs	r3, #1
 800ce28:	e0b3      	b.n	800cf92 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ce30:	b2db      	uxtb	r3, r3
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d106      	bne.n	800ce44 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f7f6 fc2a 	bl	8003698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2202      	movs	r2, #2
 800ce48:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f022 0201 	bic.w	r2, r2, #1
 800ce5a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ce66:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	699b      	ldr	r3, [r3, #24]
 800ce6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ce70:	d119      	bne.n	800cea6 <HAL_SPI_Init+0x11e>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ce7a:	d103      	bne.n	800ce84 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d008      	beq.n	800ce96 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d10c      	bne.n	800cea6 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ce90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce94:	d107      	bne.n	800cea6 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cea4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d00f      	beq.n	800ced2 <HAL_SPI_Init+0x14a>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	68db      	ldr	r3, [r3, #12]
 800ceb6:	2b06      	cmp	r3, #6
 800ceb8:	d90b      	bls.n	800ced2 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	430a      	orrs	r2, r1
 800cece:	601a      	str	r2, [r3, #0]
 800ced0:	e007      	b.n	800cee2 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	681a      	ldr	r2, [r3, #0]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cee0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	69da      	ldr	r2, [r3, #28]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ceea:	431a      	orrs	r2, r3
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	431a      	orrs	r2, r3
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cef4:	ea42 0103 	orr.w	r1, r2, r3
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	68da      	ldr	r2, [r3, #12]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	430a      	orrs	r2, r1
 800cf02:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf0c:	431a      	orrs	r2, r3
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf12:	431a      	orrs	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	699b      	ldr	r3, [r3, #24]
 800cf18:	431a      	orrs	r2, r3
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	431a      	orrs	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	695b      	ldr	r3, [r3, #20]
 800cf24:	431a      	orrs	r2, r3
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6a1b      	ldr	r3, [r3, #32]
 800cf2a:	431a      	orrs	r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	685b      	ldr	r3, [r3, #4]
 800cf30:	431a      	orrs	r2, r3
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf36:	431a      	orrs	r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	431a      	orrs	r2, r3
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cf42:	431a      	orrs	r2, r3
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf48:	431a      	orrs	r2, r3
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf4e:	ea42 0103 	orr.w	r1, r2, r3
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	430a      	orrs	r2, r1
 800cf5c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d00a      	beq.n	800cf80 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	430a      	orrs	r2, r1
 800cf7e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800cf90:	2300      	movs	r3, #0
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3710      	adds	r7, #16
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	46002000 	.word	0x46002000
 800cfa0:	56002000 	.word	0x56002000
 800cfa4:	40013000 	.word	0x40013000
 800cfa8:	50013000 	.word	0x50013000
 800cfac:	40003800 	.word	0x40003800
 800cfb0:	50003800 	.word	0x50003800

0800cfb4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b085      	sub	sp, #20
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfc0:	095b      	lsrs	r3, r3, #5
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	3301      	adds	r3, #1
 800cfcc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	3307      	adds	r3, #7
 800cfd2:	08db      	lsrs	r3, r3, #3
 800cfd4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	68fa      	ldr	r2, [r7, #12]
 800cfda:	fb02 f303 	mul.w	r3, r2, r3
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3714      	adds	r7, #20
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr

0800cfea <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800cfea:	b480      	push	{r7}
 800cfec:	b083      	sub	sp, #12
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
 800cff2:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d12e      	bne.n	800d05e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800d006:	2b01      	cmp	r3, #1
 800d008:	d101      	bne.n	800d00e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800d00a:	2302      	movs	r3, #2
 800d00c:	e028      	b.n	800d060 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2201      	movs	r2, #1
 800d012:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2202      	movs	r2, #2
 800d01a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f022 0201 	bic.w	r2, r2, #1
 800d02c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	685b      	ldr	r3, [r3, #4]
 800d036:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800d03a:	ea42 0103 	orr.w	r1, r2, r3
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	689a      	ldr	r2, [r3, #8]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	430a      	orrs	r2, r1
 800d048:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2201      	movs	r2, #1
 800d04e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2200      	movs	r2, #0
 800d056:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d05a:	2300      	movs	r3, #0
 800d05c:	e000      	b.n	800d060 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800d05e:	2301      	movs	r3, #1
  }
}
 800d060:	4618      	mov	r0, r3
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d101      	bne.n	800d07e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d07a:	2301      	movs	r3, #1
 800d07c:	e049      	b.n	800d112 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d084:	b2db      	uxtb	r3, r3
 800d086:	2b00      	cmp	r3, #0
 800d088:	d106      	bne.n	800d098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 f841 	bl	800d11a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2202      	movs	r2, #2
 800d09c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	3304      	adds	r3, #4
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	4610      	mov	r0, r2
 800d0ac:	f000 fa58 	bl	800d560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2201      	movs	r2, #1
 800d0dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2201      	movs	r2, #1
 800d104:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2201      	movs	r2, #1
 800d10c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d110:	2300      	movs	r3, #0
}
 800d112:	4618      	mov	r0, r3
 800d114:	3708      	adds	r7, #8
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}

0800d11a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d11a:	b480      	push	{r7}
 800d11c:	b083      	sub	sp, #12
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d122:	bf00      	nop
 800d124:	370c      	adds	r7, #12
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
	...

0800d130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d130:	b480      	push	{r7}
 800d132:	b085      	sub	sp, #20
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	2b01      	cmp	r3, #1
 800d142:	d001      	beq.n	800d148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d144:	2301      	movs	r3, #1
 800d146:	e072      	b.n	800d22e <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2202      	movs	r2, #2
 800d14c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	68da      	ldr	r2, [r3, #12]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f042 0201 	orr.w	r2, r2, #1
 800d15e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a35      	ldr	r2, [pc, #212]	@ (800d23c <HAL_TIM_Base_Start_IT+0x10c>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d040      	beq.n	800d1ec <HAL_TIM_Base_Start_IT+0xbc>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a34      	ldr	r2, [pc, #208]	@ (800d240 <HAL_TIM_Base_Start_IT+0x110>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d03b      	beq.n	800d1ec <HAL_TIM_Base_Start_IT+0xbc>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d17c:	d036      	beq.n	800d1ec <HAL_TIM_Base_Start_IT+0xbc>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d186:	d031      	beq.n	800d1ec <HAL_TIM_Base_Start_IT+0xbc>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a2d      	ldr	r2, [pc, #180]	@ (800d244 <HAL_TIM_Base_Start_IT+0x114>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d02c      	beq.n	800d1ec <HAL_TIM_Base_Start_IT+0xbc>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4a2c      	ldr	r2, [pc, #176]	@ (800d248 <HAL_TIM_Base_Start_IT+0x118>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d027      	beq.n	800d1ec <HAL_TIM_Base_Start_IT+0xbc>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a2a      	ldr	r2, [pc, #168]	@ (800d24c <HAL_TIM_Base_Start_IT+0x11c>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d022      	beq.n	800d1ec <HAL_TIM_Base_Start_IT+0xbc>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	4a29      	ldr	r2, [pc, #164]	@ (800d250 <HAL_TIM_Base_Start_IT+0x120>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d01d      	beq.n	800d1ec <HAL_TIM_Base_Start_IT+0xbc>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a27      	ldr	r2, [pc, #156]	@ (800d254 <HAL_TIM_Base_Start_IT+0x124>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d018      	beq.n	800d1ec <HAL_TIM_Base_Start_IT+0xbc>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4a26      	ldr	r2, [pc, #152]	@ (800d258 <HAL_TIM_Base_Start_IT+0x128>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d013      	beq.n	800d1ec <HAL_TIM_Base_Start_IT+0xbc>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4a24      	ldr	r2, [pc, #144]	@ (800d25c <HAL_TIM_Base_Start_IT+0x12c>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d00e      	beq.n	800d1ec <HAL_TIM_Base_Start_IT+0xbc>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	4a23      	ldr	r2, [pc, #140]	@ (800d260 <HAL_TIM_Base_Start_IT+0x130>)
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d009      	beq.n	800d1ec <HAL_TIM_Base_Start_IT+0xbc>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4a21      	ldr	r2, [pc, #132]	@ (800d264 <HAL_TIM_Base_Start_IT+0x134>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d004      	beq.n	800d1ec <HAL_TIM_Base_Start_IT+0xbc>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4a20      	ldr	r2, [pc, #128]	@ (800d268 <HAL_TIM_Base_Start_IT+0x138>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d115      	bne.n	800d218 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	689a      	ldr	r2, [r3, #8]
 800d1f2:	4b1e      	ldr	r3, [pc, #120]	@ (800d26c <HAL_TIM_Base_Start_IT+0x13c>)
 800d1f4:	4013      	ands	r3, r2
 800d1f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2b06      	cmp	r3, #6
 800d1fc:	d015      	beq.n	800d22a <HAL_TIM_Base_Start_IT+0xfa>
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d204:	d011      	beq.n	800d22a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f042 0201 	orr.w	r2, r2, #1
 800d214:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d216:	e008      	b.n	800d22a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f042 0201 	orr.w	r2, r2, #1
 800d226:	601a      	str	r2, [r3, #0]
 800d228:	e000      	b.n	800d22c <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d22a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d22c:	2300      	movs	r3, #0
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3714      	adds	r7, #20
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	40012c00 	.word	0x40012c00
 800d240:	50012c00 	.word	0x50012c00
 800d244:	40000400 	.word	0x40000400
 800d248:	50000400 	.word	0x50000400
 800d24c:	40000800 	.word	0x40000800
 800d250:	50000800 	.word	0x50000800
 800d254:	40000c00 	.word	0x40000c00
 800d258:	50000c00 	.word	0x50000c00
 800d25c:	40013400 	.word	0x40013400
 800d260:	50013400 	.word	0x50013400
 800d264:	40014000 	.word	0x40014000
 800d268:	50014000 	.word	0x50014000
 800d26c:	00010007 	.word	0x00010007

0800d270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	68db      	ldr	r3, [r3, #12]
 800d27e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	691b      	ldr	r3, [r3, #16]
 800d286:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	f003 0302 	and.w	r3, r3, #2
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d020      	beq.n	800d2d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f003 0302 	and.w	r3, r3, #2
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d01b      	beq.n	800d2d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f06f 0202 	mvn.w	r2, #2
 800d2a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	699b      	ldr	r3, [r3, #24]
 800d2b2:	f003 0303 	and.w	r3, r3, #3
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d003      	beq.n	800d2c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f000 f931 	bl	800d522 <HAL_TIM_IC_CaptureCallback>
 800d2c0:	e005      	b.n	800d2ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f000 f923 	bl	800d50e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f000 f934 	bl	800d536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	f003 0304 	and.w	r3, r3, #4
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d020      	beq.n	800d320 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f003 0304 	and.w	r3, r3, #4
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d01b      	beq.n	800d320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f06f 0204 	mvn.w	r2, #4
 800d2f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2202      	movs	r2, #2
 800d2f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	699b      	ldr	r3, [r3, #24]
 800d2fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d302:	2b00      	cmp	r3, #0
 800d304:	d003      	beq.n	800d30e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 f90b 	bl	800d522 <HAL_TIM_IC_CaptureCallback>
 800d30c:	e005      	b.n	800d31a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f8fd 	bl	800d50e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 f90e 	bl	800d536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2200      	movs	r2, #0
 800d31e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	f003 0308 	and.w	r3, r3, #8
 800d326:	2b00      	cmp	r3, #0
 800d328:	d020      	beq.n	800d36c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f003 0308 	and.w	r3, r3, #8
 800d330:	2b00      	cmp	r3, #0
 800d332:	d01b      	beq.n	800d36c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f06f 0208 	mvn.w	r2, #8
 800d33c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2204      	movs	r2, #4
 800d342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	69db      	ldr	r3, [r3, #28]
 800d34a:	f003 0303 	and.w	r3, r3, #3
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d003      	beq.n	800d35a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f000 f8e5 	bl	800d522 <HAL_TIM_IC_CaptureCallback>
 800d358:	e005      	b.n	800d366 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f8d7 	bl	800d50e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f000 f8e8 	bl	800d536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	f003 0310 	and.w	r3, r3, #16
 800d372:	2b00      	cmp	r3, #0
 800d374:	d020      	beq.n	800d3b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f003 0310 	and.w	r3, r3, #16
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d01b      	beq.n	800d3b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f06f 0210 	mvn.w	r2, #16
 800d388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2208      	movs	r2, #8
 800d38e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	69db      	ldr	r3, [r3, #28]
 800d396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d003      	beq.n	800d3a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 f8bf 	bl	800d522 <HAL_TIM_IC_CaptureCallback>
 800d3a4:	e005      	b.n	800d3b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 f8b1 	bl	800d50e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 f8c2 	bl	800d536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	f003 0301 	and.w	r3, r3, #1
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d00c      	beq.n	800d3dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	f003 0301 	and.w	r3, r3, #1
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d007      	beq.n	800d3dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f06f 0201 	mvn.w	r2, #1
 800d3d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f7f5 f914 	bl	8002604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d104      	bne.n	800d3f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00c      	beq.n	800d40a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d007      	beq.n	800d40a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 f9af 	bl	800d768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d410:	2b00      	cmp	r3, #0
 800d412:	d00c      	beq.n	800d42e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d007      	beq.n	800d42e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 f9a7 	bl	800d77c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d434:	2b00      	cmp	r3, #0
 800d436:	d00c      	beq.n	800d452 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d007      	beq.n	800d452 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d44a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 f87c 	bl	800d54a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	f003 0320 	and.w	r3, r3, #32
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d00c      	beq.n	800d476 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f003 0320 	and.w	r3, r3, #32
 800d462:	2b00      	cmp	r3, #0
 800d464:	d007      	beq.n	800d476 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f06f 0220 	mvn.w	r2, #32
 800d46e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 f96f 	bl	800d754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00c      	beq.n	800d49a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d486:	2b00      	cmp	r3, #0
 800d488:	d007      	beq.n	800d49a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800d492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 f97b 	bl	800d790 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d00c      	beq.n	800d4be <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d007      	beq.n	800d4be <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800d4b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 f973 	bl	800d7a4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d00c      	beq.n	800d4e2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d007      	beq.n	800d4e2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800d4da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 f96b 	bl	800d7b8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d00c      	beq.n	800d506 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d007      	beq.n	800d506 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800d4fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 f963 	bl	800d7cc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d506:	bf00      	nop
 800d508:	3710      	adds	r7, #16
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d50e:	b480      	push	{r7}
 800d510:	b083      	sub	sp, #12
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d516:	bf00      	nop
 800d518:	370c      	adds	r7, #12
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr

0800d522 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d522:	b480      	push	{r7}
 800d524:	b083      	sub	sp, #12
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d52a:	bf00      	nop
 800d52c:	370c      	adds	r7, #12
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr

0800d536 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d536:	b480      	push	{r7}
 800d538:	b083      	sub	sp, #12
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d53e:	bf00      	nop
 800d540:	370c      	adds	r7, #12
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr

0800d54a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d54a:	b480      	push	{r7}
 800d54c:	b083      	sub	sp, #12
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d552:	bf00      	nop
 800d554:	370c      	adds	r7, #12
 800d556:	46bd      	mov	sp, r7
 800d558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55c:	4770      	bx	lr
	...

0800d560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d560:	b480      	push	{r7}
 800d562:	b085      	sub	sp, #20
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	4a68      	ldr	r2, [pc, #416]	@ (800d714 <TIM_Base_SetConfig+0x1b4>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d02b      	beq.n	800d5d0 <TIM_Base_SetConfig+0x70>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	4a67      	ldr	r2, [pc, #412]	@ (800d718 <TIM_Base_SetConfig+0x1b8>)
 800d57c:	4293      	cmp	r3, r2
 800d57e:	d027      	beq.n	800d5d0 <TIM_Base_SetConfig+0x70>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d586:	d023      	beq.n	800d5d0 <TIM_Base_SetConfig+0x70>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d58e:	d01f      	beq.n	800d5d0 <TIM_Base_SetConfig+0x70>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	4a62      	ldr	r2, [pc, #392]	@ (800d71c <TIM_Base_SetConfig+0x1bc>)
 800d594:	4293      	cmp	r3, r2
 800d596:	d01b      	beq.n	800d5d0 <TIM_Base_SetConfig+0x70>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	4a61      	ldr	r2, [pc, #388]	@ (800d720 <TIM_Base_SetConfig+0x1c0>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d017      	beq.n	800d5d0 <TIM_Base_SetConfig+0x70>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	4a60      	ldr	r2, [pc, #384]	@ (800d724 <TIM_Base_SetConfig+0x1c4>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d013      	beq.n	800d5d0 <TIM_Base_SetConfig+0x70>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	4a5f      	ldr	r2, [pc, #380]	@ (800d728 <TIM_Base_SetConfig+0x1c8>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d00f      	beq.n	800d5d0 <TIM_Base_SetConfig+0x70>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	4a5e      	ldr	r2, [pc, #376]	@ (800d72c <TIM_Base_SetConfig+0x1cc>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d00b      	beq.n	800d5d0 <TIM_Base_SetConfig+0x70>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	4a5d      	ldr	r2, [pc, #372]	@ (800d730 <TIM_Base_SetConfig+0x1d0>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d007      	beq.n	800d5d0 <TIM_Base_SetConfig+0x70>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4a5c      	ldr	r2, [pc, #368]	@ (800d734 <TIM_Base_SetConfig+0x1d4>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d003      	beq.n	800d5d0 <TIM_Base_SetConfig+0x70>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	4a5b      	ldr	r2, [pc, #364]	@ (800d738 <TIM_Base_SetConfig+0x1d8>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d108      	bne.n	800d5e2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d5d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	4a4b      	ldr	r2, [pc, #300]	@ (800d714 <TIM_Base_SetConfig+0x1b4>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d043      	beq.n	800d672 <TIM_Base_SetConfig+0x112>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	4a4a      	ldr	r2, [pc, #296]	@ (800d718 <TIM_Base_SetConfig+0x1b8>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d03f      	beq.n	800d672 <TIM_Base_SetConfig+0x112>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5f8:	d03b      	beq.n	800d672 <TIM_Base_SetConfig+0x112>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d600:	d037      	beq.n	800d672 <TIM_Base_SetConfig+0x112>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	4a45      	ldr	r2, [pc, #276]	@ (800d71c <TIM_Base_SetConfig+0x1bc>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d033      	beq.n	800d672 <TIM_Base_SetConfig+0x112>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	4a44      	ldr	r2, [pc, #272]	@ (800d720 <TIM_Base_SetConfig+0x1c0>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d02f      	beq.n	800d672 <TIM_Base_SetConfig+0x112>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	4a43      	ldr	r2, [pc, #268]	@ (800d724 <TIM_Base_SetConfig+0x1c4>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d02b      	beq.n	800d672 <TIM_Base_SetConfig+0x112>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	4a42      	ldr	r2, [pc, #264]	@ (800d728 <TIM_Base_SetConfig+0x1c8>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d027      	beq.n	800d672 <TIM_Base_SetConfig+0x112>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	4a41      	ldr	r2, [pc, #260]	@ (800d72c <TIM_Base_SetConfig+0x1cc>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d023      	beq.n	800d672 <TIM_Base_SetConfig+0x112>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	4a40      	ldr	r2, [pc, #256]	@ (800d730 <TIM_Base_SetConfig+0x1d0>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	d01f      	beq.n	800d672 <TIM_Base_SetConfig+0x112>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	4a3f      	ldr	r2, [pc, #252]	@ (800d734 <TIM_Base_SetConfig+0x1d4>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d01b      	beq.n	800d672 <TIM_Base_SetConfig+0x112>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4a3e      	ldr	r2, [pc, #248]	@ (800d738 <TIM_Base_SetConfig+0x1d8>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d017      	beq.n	800d672 <TIM_Base_SetConfig+0x112>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	4a3d      	ldr	r2, [pc, #244]	@ (800d73c <TIM_Base_SetConfig+0x1dc>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d013      	beq.n	800d672 <TIM_Base_SetConfig+0x112>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4a3c      	ldr	r2, [pc, #240]	@ (800d740 <TIM_Base_SetConfig+0x1e0>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d00f      	beq.n	800d672 <TIM_Base_SetConfig+0x112>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	4a3b      	ldr	r2, [pc, #236]	@ (800d744 <TIM_Base_SetConfig+0x1e4>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d00b      	beq.n	800d672 <TIM_Base_SetConfig+0x112>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	4a3a      	ldr	r2, [pc, #232]	@ (800d748 <TIM_Base_SetConfig+0x1e8>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	d007      	beq.n	800d672 <TIM_Base_SetConfig+0x112>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	4a39      	ldr	r2, [pc, #228]	@ (800d74c <TIM_Base_SetConfig+0x1ec>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d003      	beq.n	800d672 <TIM_Base_SetConfig+0x112>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	4a38      	ldr	r2, [pc, #224]	@ (800d750 <TIM_Base_SetConfig+0x1f0>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d108      	bne.n	800d684 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	68db      	ldr	r3, [r3, #12]
 800d67e:	68fa      	ldr	r2, [r7, #12]
 800d680:	4313      	orrs	r3, r2
 800d682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	695b      	ldr	r3, [r3, #20]
 800d68e:	4313      	orrs	r3, r2
 800d690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	689a      	ldr	r2, [r3, #8]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	681a      	ldr	r2, [r3, #0]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	4a1a      	ldr	r2, [pc, #104]	@ (800d714 <TIM_Base_SetConfig+0x1b4>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d023      	beq.n	800d6f8 <TIM_Base_SetConfig+0x198>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	4a19      	ldr	r2, [pc, #100]	@ (800d718 <TIM_Base_SetConfig+0x1b8>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d01f      	beq.n	800d6f8 <TIM_Base_SetConfig+0x198>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	4a1e      	ldr	r2, [pc, #120]	@ (800d734 <TIM_Base_SetConfig+0x1d4>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d01b      	beq.n	800d6f8 <TIM_Base_SetConfig+0x198>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	4a1d      	ldr	r2, [pc, #116]	@ (800d738 <TIM_Base_SetConfig+0x1d8>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d017      	beq.n	800d6f8 <TIM_Base_SetConfig+0x198>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	4a1c      	ldr	r2, [pc, #112]	@ (800d73c <TIM_Base_SetConfig+0x1dc>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d013      	beq.n	800d6f8 <TIM_Base_SetConfig+0x198>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	4a1b      	ldr	r2, [pc, #108]	@ (800d740 <TIM_Base_SetConfig+0x1e0>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d00f      	beq.n	800d6f8 <TIM_Base_SetConfig+0x198>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	4a1a      	ldr	r2, [pc, #104]	@ (800d744 <TIM_Base_SetConfig+0x1e4>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d00b      	beq.n	800d6f8 <TIM_Base_SetConfig+0x198>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	4a19      	ldr	r2, [pc, #100]	@ (800d748 <TIM_Base_SetConfig+0x1e8>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d007      	beq.n	800d6f8 <TIM_Base_SetConfig+0x198>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4a18      	ldr	r2, [pc, #96]	@ (800d74c <TIM_Base_SetConfig+0x1ec>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d003      	beq.n	800d6f8 <TIM_Base_SetConfig+0x198>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	4a17      	ldr	r2, [pc, #92]	@ (800d750 <TIM_Base_SetConfig+0x1f0>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d103      	bne.n	800d700 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	691a      	ldr	r2, [r3, #16]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2201      	movs	r2, #1
 800d704:	615a      	str	r2, [r3, #20]
}
 800d706:	bf00      	nop
 800d708:	3714      	adds	r7, #20
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop
 800d714:	40012c00 	.word	0x40012c00
 800d718:	50012c00 	.word	0x50012c00
 800d71c:	40000400 	.word	0x40000400
 800d720:	50000400 	.word	0x50000400
 800d724:	40000800 	.word	0x40000800
 800d728:	50000800 	.word	0x50000800
 800d72c:	40000c00 	.word	0x40000c00
 800d730:	50000c00 	.word	0x50000c00
 800d734:	40013400 	.word	0x40013400
 800d738:	50013400 	.word	0x50013400
 800d73c:	40014000 	.word	0x40014000
 800d740:	50014000 	.word	0x50014000
 800d744:	40014400 	.word	0x40014400
 800d748:	50014400 	.word	0x50014400
 800d74c:	40014800 	.word	0x40014800
 800d750:	50014800 	.word	0x50014800

0800d754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d75c:	bf00      	nop
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d770:	bf00      	nop
 800d772:	370c      	adds	r7, #12
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr

0800d77c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d784:	bf00      	nop
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d798:	bf00      	nop
 800d79a:	370c      	adds	r7, #12
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr

0800d7a4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d7ac:	bf00      	nop
 800d7ae:	370c      	adds	r7, #12
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr

0800d7b8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d7c0:	bf00      	nop
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d7d4:	bf00      	nop
 800d7d6:	370c      	adds	r7, #12
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d101      	bne.n	800d7f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	e042      	b.n	800d878 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d106      	bne.n	800d80a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2200      	movs	r2, #0
 800d800:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f7f5 fb57 	bl	8002eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2224      	movs	r2, #36	@ 0x24
 800d80e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f022 0201 	bic.w	r2, r2, #1
 800d820:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d826:	2b00      	cmp	r3, #0
 800d828:	d002      	beq.n	800d830 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f000 f9d6 	bl	800dbdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 f825 	bl	800d880 <UART_SetConfig>
 800d836:	4603      	mov	r3, r0
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d101      	bne.n	800d840 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d83c:	2301      	movs	r3, #1
 800d83e:	e01b      	b.n	800d878 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	685a      	ldr	r2, [r3, #4]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d84e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	689a      	ldr	r2, [r3, #8]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d85e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f042 0201 	orr.w	r2, r2, #1
 800d86e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f000 fa55 	bl	800dd20 <UART_CheckIdleState>
 800d876:	4603      	mov	r3, r0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3708      	adds	r7, #8
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d884:	b094      	sub	sp, #80	@ 0x50
 800d886:	af00      	add	r7, sp, #0
 800d888:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d88a:	2300      	movs	r3, #0
 800d88c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	4b83      	ldr	r3, [pc, #524]	@ (800daa4 <UART_SetConfig+0x224>)
 800d896:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89a:	689a      	ldr	r2, [r3, #8]
 800d89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89e:	691b      	ldr	r3, [r3, #16]
 800d8a0:	431a      	orrs	r2, r3
 800d8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a4:	695b      	ldr	r3, [r3, #20]
 800d8a6:	431a      	orrs	r2, r3
 800d8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8aa:	69db      	ldr	r3, [r3, #28]
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	497c      	ldr	r1, [pc, #496]	@ (800daa8 <UART_SetConfig+0x228>)
 800d8b8:	4019      	ands	r1, r3
 800d8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8c0:	430b      	orrs	r3, r1
 800d8c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8d0:	68d9      	ldr	r1, [r3, #12]
 800d8d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	ea40 0301 	orr.w	r3, r0, r1
 800d8da:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8de:	699b      	ldr	r3, [r3, #24]
 800d8e0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e4:	681a      	ldr	r2, [r3, #0]
 800d8e6:	4b6f      	ldr	r3, [pc, #444]	@ (800daa4 <UART_SetConfig+0x224>)
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d009      	beq.n	800d900 <UART_SetConfig+0x80>
 800d8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	4b6e      	ldr	r3, [pc, #440]	@ (800daac <UART_SetConfig+0x22c>)
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d004      	beq.n	800d900 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8f8:	6a1a      	ldr	r2, [r3, #32]
 800d8fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	689b      	ldr	r3, [r3, #8]
 800d906:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d90a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d914:	430b      	orrs	r3, r1
 800d916:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d91e:	f023 000f 	bic.w	r0, r3, #15
 800d922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d924:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	ea40 0301 	orr.w	r3, r0, r1
 800d92e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	4b5e      	ldr	r3, [pc, #376]	@ (800dab0 <UART_SetConfig+0x230>)
 800d936:	429a      	cmp	r2, r3
 800d938:	d102      	bne.n	800d940 <UART_SetConfig+0xc0>
 800d93a:	2301      	movs	r3, #1
 800d93c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d93e:	e032      	b.n	800d9a6 <UART_SetConfig+0x126>
 800d940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	4b5b      	ldr	r3, [pc, #364]	@ (800dab4 <UART_SetConfig+0x234>)
 800d946:	429a      	cmp	r2, r3
 800d948:	d102      	bne.n	800d950 <UART_SetConfig+0xd0>
 800d94a:	2302      	movs	r3, #2
 800d94c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d94e:	e02a      	b.n	800d9a6 <UART_SetConfig+0x126>
 800d950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	4b58      	ldr	r3, [pc, #352]	@ (800dab8 <UART_SetConfig+0x238>)
 800d956:	429a      	cmp	r2, r3
 800d958:	d102      	bne.n	800d960 <UART_SetConfig+0xe0>
 800d95a:	2304      	movs	r3, #4
 800d95c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d95e:	e022      	b.n	800d9a6 <UART_SetConfig+0x126>
 800d960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	4b55      	ldr	r3, [pc, #340]	@ (800dabc <UART_SetConfig+0x23c>)
 800d966:	429a      	cmp	r2, r3
 800d968:	d102      	bne.n	800d970 <UART_SetConfig+0xf0>
 800d96a:	2308      	movs	r3, #8
 800d96c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d96e:	e01a      	b.n	800d9a6 <UART_SetConfig+0x126>
 800d970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	4b52      	ldr	r3, [pc, #328]	@ (800dac0 <UART_SetConfig+0x240>)
 800d976:	429a      	cmp	r2, r3
 800d978:	d102      	bne.n	800d980 <UART_SetConfig+0x100>
 800d97a:	2310      	movs	r3, #16
 800d97c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d97e:	e012      	b.n	800d9a6 <UART_SetConfig+0x126>
 800d980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d982:	681a      	ldr	r2, [r3, #0]
 800d984:	4b4f      	ldr	r3, [pc, #316]	@ (800dac4 <UART_SetConfig+0x244>)
 800d986:	429a      	cmp	r2, r3
 800d988:	d103      	bne.n	800d992 <UART_SetConfig+0x112>
 800d98a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800d98e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d990:	e009      	b.n	800d9a6 <UART_SetConfig+0x126>
 800d992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	4b43      	ldr	r3, [pc, #268]	@ (800daa4 <UART_SetConfig+0x224>)
 800d998:	429a      	cmp	r2, r3
 800d99a:	d102      	bne.n	800d9a2 <UART_SetConfig+0x122>
 800d99c:	2320      	movs	r3, #32
 800d99e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9a0:	e001      	b.n	800d9a6 <UART_SetConfig+0x126>
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	4b3e      	ldr	r3, [pc, #248]	@ (800daa4 <UART_SetConfig+0x224>)
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d005      	beq.n	800d9bc <UART_SetConfig+0x13c>
 800d9b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9b2:	681a      	ldr	r2, [r3, #0]
 800d9b4:	4b3d      	ldr	r3, [pc, #244]	@ (800daac <UART_SetConfig+0x22c>)
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	f040 8088 	bne.w	800dacc <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d9bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9be:	2200      	movs	r2, #0
 800d9c0:	623b      	str	r3, [r7, #32]
 800d9c2:	627a      	str	r2, [r7, #36]	@ 0x24
 800d9c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d9c8:	f7fd fa78 	bl	800aebc <HAL_RCCEx_GetPeriphCLKFreq>
 800d9cc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d9ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	f000 80eb 	beq.w	800dbac <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9da:	4a3b      	ldr	r2, [pc, #236]	@ (800dac8 <UART_SetConfig+0x248>)
 800d9dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9e8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ec:	685a      	ldr	r2, [r3, #4]
 800d9ee:	4613      	mov	r3, r2
 800d9f0:	005b      	lsls	r3, r3, #1
 800d9f2:	4413      	add	r3, r2
 800d9f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d305      	bcc.n	800da06 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9fc:	685b      	ldr	r3, [r3, #4]
 800d9fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800da00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da02:	429a      	cmp	r2, r3
 800da04:	d903      	bls.n	800da0e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800da06:	2301      	movs	r3, #1
 800da08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800da0c:	e048      	b.n	800daa0 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da10:	2200      	movs	r2, #0
 800da12:	61bb      	str	r3, [r7, #24]
 800da14:	61fa      	str	r2, [r7, #28]
 800da16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da1a:	4a2b      	ldr	r2, [pc, #172]	@ (800dac8 <UART_SetConfig+0x248>)
 800da1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da20:	b29b      	uxth	r3, r3
 800da22:	2200      	movs	r2, #0
 800da24:	613b      	str	r3, [r7, #16]
 800da26:	617a      	str	r2, [r7, #20]
 800da28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800da2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800da30:	f7f2 ff44 	bl	80008bc <__aeabi_uldivmod>
 800da34:	4602      	mov	r2, r0
 800da36:	460b      	mov	r3, r1
 800da38:	4610      	mov	r0, r2
 800da3a:	4619      	mov	r1, r3
 800da3c:	f04f 0200 	mov.w	r2, #0
 800da40:	f04f 0300 	mov.w	r3, #0
 800da44:	020b      	lsls	r3, r1, #8
 800da46:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800da4a:	0202      	lsls	r2, r0, #8
 800da4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da4e:	6849      	ldr	r1, [r1, #4]
 800da50:	0849      	lsrs	r1, r1, #1
 800da52:	2000      	movs	r0, #0
 800da54:	460c      	mov	r4, r1
 800da56:	4605      	mov	r5, r0
 800da58:	eb12 0804 	adds.w	r8, r2, r4
 800da5c:	eb43 0905 	adc.w	r9, r3, r5
 800da60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	2200      	movs	r2, #0
 800da66:	60bb      	str	r3, [r7, #8]
 800da68:	60fa      	str	r2, [r7, #12]
 800da6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800da6e:	4640      	mov	r0, r8
 800da70:	4649      	mov	r1, r9
 800da72:	f7f2 ff23 	bl	80008bc <__aeabi_uldivmod>
 800da76:	4602      	mov	r2, r0
 800da78:	460b      	mov	r3, r1
 800da7a:	4613      	mov	r3, r2
 800da7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800da7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800da84:	d308      	bcc.n	800da98 <UART_SetConfig+0x218>
 800da86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da8c:	d204      	bcs.n	800da98 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800da8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da94:	60da      	str	r2, [r3, #12]
 800da96:	e003      	b.n	800daa0 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800da98:	2301      	movs	r3, #1
 800da9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800da9e:	e085      	b.n	800dbac <UART_SetConfig+0x32c>
 800daa0:	e084      	b.n	800dbac <UART_SetConfig+0x32c>
 800daa2:	bf00      	nop
 800daa4:	46002400 	.word	0x46002400
 800daa8:	cfff69f3 	.word	0xcfff69f3
 800daac:	56002400 	.word	0x56002400
 800dab0:	40013800 	.word	0x40013800
 800dab4:	40004400 	.word	0x40004400
 800dab8:	40004800 	.word	0x40004800
 800dabc:	40004c00 	.word	0x40004c00
 800dac0:	40005000 	.word	0x40005000
 800dac4:	40006400 	.word	0x40006400
 800dac8:	0800e39c 	.word	0x0800e39c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dace:	69db      	ldr	r3, [r3, #28]
 800dad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dad4:	d13c      	bne.n	800db50 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800dad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dad8:	2200      	movs	r2, #0
 800dada:	603b      	str	r3, [r7, #0]
 800dadc:	607a      	str	r2, [r7, #4]
 800dade:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dae2:	f7fd f9eb 	bl	800aebc <HAL_RCCEx_GetPeriphCLKFreq>
 800dae6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800daea:	2b00      	cmp	r3, #0
 800daec:	d05e      	beq.n	800dbac <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800daee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daf2:	4a39      	ldr	r2, [pc, #228]	@ (800dbd8 <UART_SetConfig+0x358>)
 800daf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800daf8:	461a      	mov	r2, r3
 800dafa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dafc:	fbb3 f3f2 	udiv	r3, r3, r2
 800db00:	005a      	lsls	r2, r3, #1
 800db02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	085b      	lsrs	r3, r3, #1
 800db08:	441a      	add	r2, r3
 800db0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800db12:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db16:	2b0f      	cmp	r3, #15
 800db18:	d916      	bls.n	800db48 <UART_SetConfig+0x2c8>
 800db1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db20:	d212      	bcs.n	800db48 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800db22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db24:	b29b      	uxth	r3, r3
 800db26:	f023 030f 	bic.w	r3, r3, #15
 800db2a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800db2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db2e:	085b      	lsrs	r3, r3, #1
 800db30:	b29b      	uxth	r3, r3
 800db32:	f003 0307 	and.w	r3, r3, #7
 800db36:	b29a      	uxth	r2, r3
 800db38:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800db3a:	4313      	orrs	r3, r2
 800db3c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800db3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800db44:	60da      	str	r2, [r3, #12]
 800db46:	e031      	b.n	800dbac <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800db48:	2301      	movs	r3, #1
 800db4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800db4e:	e02d      	b.n	800dbac <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800db50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db52:	2200      	movs	r2, #0
 800db54:	469a      	mov	sl, r3
 800db56:	4693      	mov	fp, r2
 800db58:	4650      	mov	r0, sl
 800db5a:	4659      	mov	r1, fp
 800db5c:	f7fd f9ae 	bl	800aebc <HAL_RCCEx_GetPeriphCLKFreq>
 800db60:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800db62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db64:	2b00      	cmp	r3, #0
 800db66:	d021      	beq.n	800dbac <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db6c:	4a1a      	ldr	r2, [pc, #104]	@ (800dbd8 <UART_SetConfig+0x358>)
 800db6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db72:	461a      	mov	r2, r3
 800db74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db76:	fbb3 f2f2 	udiv	r2, r3, r2
 800db7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	085b      	lsrs	r3, r3, #1
 800db80:	441a      	add	r2, r3
 800db82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	fbb2 f3f3 	udiv	r3, r2, r3
 800db8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db8e:	2b0f      	cmp	r3, #15
 800db90:	d909      	bls.n	800dba6 <UART_SetConfig+0x326>
 800db92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db98:	d205      	bcs.n	800dba6 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800db9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	60da      	str	r2, [r3, #12]
 800dba4:	e002      	b.n	800dbac <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800dba6:	2301      	movs	r3, #1
 800dba8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dbac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbae:	2201      	movs	r2, #1
 800dbb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800dbb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800dbc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800dbc8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3750      	adds	r7, #80	@ 0x50
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbd6:	bf00      	nop
 800dbd8:	0800e39c 	.word	0x0800e39c

0800dbdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b083      	sub	sp, #12
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbe8:	f003 0308 	and.w	r3, r3, #8
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00a      	beq.n	800dc06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	430a      	orrs	r2, r1
 800dc04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc0a:	f003 0301 	and.w	r3, r3, #1
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d00a      	beq.n	800dc28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	430a      	orrs	r2, r1
 800dc26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc2c:	f003 0302 	and.w	r3, r3, #2
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d00a      	beq.n	800dc4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	430a      	orrs	r2, r1
 800dc48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc4e:	f003 0304 	and.w	r3, r3, #4
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00a      	beq.n	800dc6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	430a      	orrs	r2, r1
 800dc6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc70:	f003 0310 	and.w	r3, r3, #16
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d00a      	beq.n	800dc8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	689b      	ldr	r3, [r3, #8]
 800dc7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	430a      	orrs	r2, r1
 800dc8c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc92:	f003 0320 	and.w	r3, r3, #32
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d00a      	beq.n	800dcb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	689b      	ldr	r3, [r3, #8]
 800dca0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	430a      	orrs	r2, r1
 800dcae:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d01a      	beq.n	800dcf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	430a      	orrs	r2, r1
 800dcd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dcda:	d10a      	bne.n	800dcf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	430a      	orrs	r2, r1
 800dcf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00a      	beq.n	800dd14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	430a      	orrs	r2, r1
 800dd12:	605a      	str	r2, [r3, #4]
  }
}
 800dd14:	bf00      	nop
 800dd16:	370c      	adds	r7, #12
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr

0800dd20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b098      	sub	sp, #96	@ 0x60
 800dd24:	af02      	add	r7, sp, #8
 800dd26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd30:	f7f5 fee6 	bl	8003b00 <HAL_GetTick>
 800dd34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f003 0308 	and.w	r3, r3, #8
 800dd40:	2b08      	cmp	r3, #8
 800dd42:	d12f      	bne.n	800dda4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dd48:	9300      	str	r3, [sp, #0]
 800dd4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 f88e 	bl	800de74 <UART_WaitOnFlagUntilTimeout>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d022      	beq.n	800dda4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd66:	e853 3f00 	ldrex	r3, [r3]
 800dd6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dd6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd72:	653b      	str	r3, [r7, #80]	@ 0x50
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	461a      	mov	r2, r3
 800dd7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd84:	e841 2300 	strex	r3, r2, [r1]
 800dd88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dd8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d1e6      	bne.n	800dd5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2220      	movs	r2, #32
 800dd94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dda0:	2303      	movs	r3, #3
 800dda2:	e063      	b.n	800de6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f003 0304 	and.w	r3, r3, #4
 800ddae:	2b04      	cmp	r3, #4
 800ddb0:	d149      	bne.n	800de46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ddb2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f000 f857 	bl	800de74 <UART_WaitOnFlagUntilTimeout>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d03c      	beq.n	800de46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd4:	e853 3f00 	ldrex	r3, [r3]
 800ddd8:	623b      	str	r3, [r7, #32]
   return(result);
 800ddda:	6a3b      	ldr	r3, [r7, #32]
 800dddc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dde0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	461a      	mov	r2, r3
 800dde8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddea:	633b      	str	r3, [r7, #48]	@ 0x30
 800ddec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ddf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddf2:	e841 2300 	strex	r3, r2, [r1]
 800ddf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ddf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d1e6      	bne.n	800ddcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	3308      	adds	r3, #8
 800de04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	e853 3f00 	ldrex	r3, [r3]
 800de0c:	60fb      	str	r3, [r7, #12]
   return(result);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f023 0301 	bic.w	r3, r3, #1
 800de14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	3308      	adds	r3, #8
 800de1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de1e:	61fa      	str	r2, [r7, #28]
 800de20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de22:	69b9      	ldr	r1, [r7, #24]
 800de24:	69fa      	ldr	r2, [r7, #28]
 800de26:	e841 2300 	strex	r3, r2, [r1]
 800de2a:	617b      	str	r3, [r7, #20]
   return(result);
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d1e5      	bne.n	800ddfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2220      	movs	r2, #32
 800de36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2200      	movs	r2, #0
 800de3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de42:	2303      	movs	r3, #3
 800de44:	e012      	b.n	800de6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2220      	movs	r2, #32
 800de4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2220      	movs	r2, #32
 800de52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2200      	movs	r2, #0
 800de5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2200      	movs	r2, #0
 800de60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de6a:	2300      	movs	r3, #0
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3758      	adds	r7, #88	@ 0x58
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	603b      	str	r3, [r7, #0]
 800de80:	4613      	mov	r3, r2
 800de82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de84:	e049      	b.n	800df1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de86:	69bb      	ldr	r3, [r7, #24]
 800de88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de8c:	d045      	beq.n	800df1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de8e:	f7f5 fe37 	bl	8003b00 <HAL_GetTick>
 800de92:	4602      	mov	r2, r0
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	1ad3      	subs	r3, r2, r3
 800de98:	69ba      	ldr	r2, [r7, #24]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d302      	bcc.n	800dea4 <UART_WaitOnFlagUntilTimeout+0x30>
 800de9e:	69bb      	ldr	r3, [r7, #24]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d101      	bne.n	800dea8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dea4:	2303      	movs	r3, #3
 800dea6:	e048      	b.n	800df3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f003 0304 	and.w	r3, r3, #4
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d031      	beq.n	800df1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	69db      	ldr	r3, [r3, #28]
 800debc:	f003 0308 	and.w	r3, r3, #8
 800dec0:	2b08      	cmp	r3, #8
 800dec2:	d110      	bne.n	800dee6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2208      	movs	r2, #8
 800deca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800decc:	68f8      	ldr	r0, [r7, #12]
 800dece:	f000 f838 	bl	800df42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2208      	movs	r2, #8
 800ded6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2200      	movs	r2, #0
 800dede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dee2:	2301      	movs	r3, #1
 800dee4:	e029      	b.n	800df3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	69db      	ldr	r3, [r3, #28]
 800deec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800def0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800def4:	d111      	bne.n	800df1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800defe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800df00:	68f8      	ldr	r0, [r7, #12]
 800df02:	f000 f81e 	bl	800df42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	2220      	movs	r2, #32
 800df0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2200      	movs	r2, #0
 800df12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800df16:	2303      	movs	r3, #3
 800df18:	e00f      	b.n	800df3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	69da      	ldr	r2, [r3, #28]
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	4013      	ands	r3, r2
 800df24:	68ba      	ldr	r2, [r7, #8]
 800df26:	429a      	cmp	r2, r3
 800df28:	bf0c      	ite	eq
 800df2a:	2301      	moveq	r3, #1
 800df2c:	2300      	movne	r3, #0
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	461a      	mov	r2, r3
 800df32:	79fb      	ldrb	r3, [r7, #7]
 800df34:	429a      	cmp	r2, r3
 800df36:	d0a6      	beq.n	800de86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df38:	2300      	movs	r3, #0
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}

0800df42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df42:	b480      	push	{r7}
 800df44:	b095      	sub	sp, #84	@ 0x54
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df52:	e853 3f00 	ldrex	r3, [r3]
 800df56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800df58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800df5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	461a      	mov	r2, r3
 800df66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df68:	643b      	str	r3, [r7, #64]	@ 0x40
 800df6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800df6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df70:	e841 2300 	strex	r3, r2, [r1]
 800df74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800df76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d1e6      	bne.n	800df4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	3308      	adds	r3, #8
 800df82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df84:	6a3b      	ldr	r3, [r7, #32]
 800df86:	e853 3f00 	ldrex	r3, [r3]
 800df8a:	61fb      	str	r3, [r7, #28]
   return(result);
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800df92:	f023 0301 	bic.w	r3, r3, #1
 800df96:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	3308      	adds	r3, #8
 800df9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dfa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dfa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dfa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfa8:	e841 2300 	strex	r3, r2, [r1]
 800dfac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dfae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d1e3      	bne.n	800df7c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d118      	bne.n	800dfee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	e853 3f00 	ldrex	r3, [r3]
 800dfc8:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	f023 0310 	bic.w	r3, r3, #16
 800dfd0:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfda:	61bb      	str	r3, [r7, #24]
 800dfdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfde:	6979      	ldr	r1, [r7, #20]
 800dfe0:	69ba      	ldr	r2, [r7, #24]
 800dfe2:	e841 2300 	strex	r3, r2, [r1]
 800dfe6:	613b      	str	r3, [r7, #16]
   return(result);
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d1e6      	bne.n	800dfbc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2220      	movs	r2, #32
 800dff2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2200      	movs	r2, #0
 800dffa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2200      	movs	r2, #0
 800e000:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e002:	bf00      	nop
 800e004:	3754      	adds	r7, #84	@ 0x54
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr

0800e00e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e00e:	b480      	push	{r7}
 800e010:	b085      	sub	sp, #20
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e01c:	2b01      	cmp	r3, #1
 800e01e:	d101      	bne.n	800e024 <HAL_UARTEx_DisableFifoMode+0x16>
 800e020:	2302      	movs	r3, #2
 800e022:	e027      	b.n	800e074 <HAL_UARTEx_DisableFifoMode+0x66>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2201      	movs	r2, #1
 800e028:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2224      	movs	r2, #36	@ 0x24
 800e030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	681a      	ldr	r2, [r3, #0]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f022 0201 	bic.w	r2, r2, #1
 800e04a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e052:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2200      	movs	r2, #0
 800e058:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	68fa      	ldr	r2, [r7, #12]
 800e060:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2220      	movs	r2, #32
 800e066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2200      	movs	r2, #0
 800e06e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e072:	2300      	movs	r3, #0
}
 800e074:	4618      	mov	r0, r3
 800e076:	3714      	adds	r7, #20
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr

0800e080 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b084      	sub	sp, #16
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e090:	2b01      	cmp	r3, #1
 800e092:	d101      	bne.n	800e098 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e094:	2302      	movs	r3, #2
 800e096:	e02d      	b.n	800e0f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2201      	movs	r2, #1
 800e09c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2224      	movs	r2, #36	@ 0x24
 800e0a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f022 0201 	bic.w	r2, r2, #1
 800e0be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	683a      	ldr	r2, [r7, #0]
 800e0d0:	430a      	orrs	r2, r1
 800e0d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 f84f 	bl	800e178 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	68fa      	ldr	r2, [r7, #12]
 800e0e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2220      	movs	r2, #32
 800e0e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e0f2:	2300      	movs	r3, #0
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d101      	bne.n	800e114 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e110:	2302      	movs	r3, #2
 800e112:	e02d      	b.n	800e170 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2201      	movs	r2, #1
 800e118:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2224      	movs	r2, #36	@ 0x24
 800e120:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f022 0201 	bic.w	r2, r2, #1
 800e13a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	689b      	ldr	r3, [r3, #8]
 800e142:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	683a      	ldr	r2, [r7, #0]
 800e14c:	430a      	orrs	r2, r1
 800e14e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f000 f811 	bl	800e178 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	68fa      	ldr	r2, [r7, #12]
 800e15c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2220      	movs	r2, #32
 800e162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2200      	movs	r2, #0
 800e16a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e16e:	2300      	movs	r3, #0
}
 800e170:	4618      	mov	r0, r3
 800e172:	3710      	adds	r7, #16
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e178:	b480      	push	{r7}
 800e17a:	b085      	sub	sp, #20
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e184:	2b00      	cmp	r3, #0
 800e186:	d108      	bne.n	800e19a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2201      	movs	r2, #1
 800e18c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2201      	movs	r2, #1
 800e194:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e198:	e031      	b.n	800e1fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e19a:	2308      	movs	r3, #8
 800e19c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e19e:	2308      	movs	r3, #8
 800e1a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	689b      	ldr	r3, [r3, #8]
 800e1a8:	0e5b      	lsrs	r3, r3, #25
 800e1aa:	b2db      	uxtb	r3, r3
 800e1ac:	f003 0307 	and.w	r3, r3, #7
 800e1b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	689b      	ldr	r3, [r3, #8]
 800e1b8:	0f5b      	lsrs	r3, r3, #29
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	f003 0307 	and.w	r3, r3, #7
 800e1c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1c2:	7bbb      	ldrb	r3, [r7, #14]
 800e1c4:	7b3a      	ldrb	r2, [r7, #12]
 800e1c6:	4911      	ldr	r1, [pc, #68]	@ (800e20c <UARTEx_SetNbDataToProcess+0x94>)
 800e1c8:	5c8a      	ldrb	r2, [r1, r2]
 800e1ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e1ce:	7b3a      	ldrb	r2, [r7, #12]
 800e1d0:	490f      	ldr	r1, [pc, #60]	@ (800e210 <UARTEx_SetNbDataToProcess+0x98>)
 800e1d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1d8:	b29a      	uxth	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1e0:	7bfb      	ldrb	r3, [r7, #15]
 800e1e2:	7b7a      	ldrb	r2, [r7, #13]
 800e1e4:	4909      	ldr	r1, [pc, #36]	@ (800e20c <UARTEx_SetNbDataToProcess+0x94>)
 800e1e6:	5c8a      	ldrb	r2, [r1, r2]
 800e1e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e1ec:	7b7a      	ldrb	r2, [r7, #13]
 800e1ee:	4908      	ldr	r1, [pc, #32]	@ (800e210 <UARTEx_SetNbDataToProcess+0x98>)
 800e1f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e1fe:	bf00      	nop
 800e200:	3714      	adds	r7, #20
 800e202:	46bd      	mov	sp, r7
 800e204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e208:	4770      	bx	lr
 800e20a:	bf00      	nop
 800e20c:	0800e3b4 	.word	0x0800e3b4
 800e210:	0800e3bc 	.word	0x0800e3bc

0800e214 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800e214:	b480      	push	{r7}
 800e216:	b083      	sub	sp, #12
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f043 0202 	orr.w	r2, r3, #2
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	685a      	ldr	r2, [r3, #4]
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	021b      	lsls	r3, r3, #8
 800e234:	431a      	orrs	r2, r3
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f023 0202 	bic.w	r2, r3, #2
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	601a      	str	r2, [r3, #0]
}
 800e246:	bf00      	nop
 800e248:	370c      	adds	r7, #12
 800e24a:	46bd      	mov	sp, r7
 800e24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e250:	4770      	bx	lr

0800e252 <memset>:
 800e252:	4402      	add	r2, r0
 800e254:	4603      	mov	r3, r0
 800e256:	4293      	cmp	r3, r2
 800e258:	d100      	bne.n	800e25c <memset+0xa>
 800e25a:	4770      	bx	lr
 800e25c:	f803 1b01 	strb.w	r1, [r3], #1
 800e260:	e7f9      	b.n	800e256 <memset+0x4>
	...

0800e264 <__libc_init_array>:
 800e264:	b570      	push	{r4, r5, r6, lr}
 800e266:	4d0d      	ldr	r5, [pc, #52]	@ (800e29c <__libc_init_array+0x38>)
 800e268:	2600      	movs	r6, #0
 800e26a:	4c0d      	ldr	r4, [pc, #52]	@ (800e2a0 <__libc_init_array+0x3c>)
 800e26c:	1b64      	subs	r4, r4, r5
 800e26e:	10a4      	asrs	r4, r4, #2
 800e270:	42a6      	cmp	r6, r4
 800e272:	d109      	bne.n	800e288 <__libc_init_array+0x24>
 800e274:	4d0b      	ldr	r5, [pc, #44]	@ (800e2a4 <__libc_init_array+0x40>)
 800e276:	2600      	movs	r6, #0
 800e278:	4c0b      	ldr	r4, [pc, #44]	@ (800e2a8 <__libc_init_array+0x44>)
 800e27a:	f000 f817 	bl	800e2ac <_init>
 800e27e:	1b64      	subs	r4, r4, r5
 800e280:	10a4      	asrs	r4, r4, #2
 800e282:	42a6      	cmp	r6, r4
 800e284:	d105      	bne.n	800e292 <__libc_init_array+0x2e>
 800e286:	bd70      	pop	{r4, r5, r6, pc}
 800e288:	f855 3b04 	ldr.w	r3, [r5], #4
 800e28c:	3601      	adds	r6, #1
 800e28e:	4798      	blx	r3
 800e290:	e7ee      	b.n	800e270 <__libc_init_array+0xc>
 800e292:	f855 3b04 	ldr.w	r3, [r5], #4
 800e296:	3601      	adds	r6, #1
 800e298:	4798      	blx	r3
 800e29a:	e7f2      	b.n	800e282 <__libc_init_array+0x1e>
 800e29c:	0800e3cc 	.word	0x0800e3cc
 800e2a0:	0800e3cc 	.word	0x0800e3cc
 800e2a4:	0800e3cc 	.word	0x0800e3cc
 800e2a8:	0800e3d0 	.word	0x0800e3d0

0800e2ac <_init>:
 800e2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ae:	bf00      	nop
 800e2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2b2:	bc08      	pop	{r3}
 800e2b4:	469e      	mov	lr, r3
 800e2b6:	4770      	bx	lr

0800e2b8 <_fini>:
 800e2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ba:	bf00      	nop
 800e2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2be:	bc08      	pop	{r3}
 800e2c0:	469e      	mov	lr, r3
 800e2c2:	4770      	bx	lr
