
DRV2605_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8f0  0800026c  0800026c  0001026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800db5c  0800db5c  0001db5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dc5c  0800dc5c  0001dc5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dc64  0800dc64  0001dc64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dc68  0800dc68  0001dc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000d09  20000000  0800dc6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000840  20000d0c  0800e975  00020d0c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000154c  0800e975  0002154c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020d09  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020d3f  2**0
                  CONTENTS, READONLY
 11 .debug_info   00031091  00000000  00000000  00020d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000052d5  00000000  00000000  00051e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002878  00000000  00000000  000570e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001f87  00000000  00000000  00059960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00044f02  00000000  00000000  0005b8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00035dcf  00000000  00000000  000a07e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a2177  00000000  00000000  000d65b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000b0a4  00000000  00000000  00278730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008d  00000000  00000000  002837d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800026c <__do_global_dtors_aux>:
 800026c:	b510      	push	{r4, lr}
 800026e:	4c05      	ldr	r4, [pc, #20]	; (8000284 <__do_global_dtors_aux+0x18>)
 8000270:	7823      	ldrb	r3, [r4, #0]
 8000272:	b933      	cbnz	r3, 8000282 <__do_global_dtors_aux+0x16>
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <__do_global_dtors_aux+0x1c>)
 8000276:	b113      	cbz	r3, 800027e <__do_global_dtors_aux+0x12>
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <__do_global_dtors_aux+0x20>)
 800027a:	f3af 8000 	nop.w
 800027e:	2301      	movs	r3, #1
 8000280:	7023      	strb	r3, [r4, #0]
 8000282:	bd10      	pop	{r4, pc}
 8000284:	20000d0c 	.word	0x20000d0c
 8000288:	00000000 	.word	0x00000000
 800028c:	0800db44 	.word	0x0800db44

08000290 <frame_dummy>:
 8000290:	b508      	push	{r3, lr}
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <frame_dummy+0x10>)
 8000294:	b11b      	cbz	r3, 800029e <frame_dummy+0xe>
 8000296:	4903      	ldr	r1, [pc, #12]	; (80002a4 <frame_dummy+0x14>)
 8000298:	4803      	ldr	r0, [pc, #12]	; (80002a8 <frame_dummy+0x18>)
 800029a:	f3af 8000 	nop.w
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	00000000 	.word	0x00000000
 80002a4:	20000d10 	.word	0x20000d10
 80002a8:	0800db44 	.word	0x0800db44

080002ac <__aeabi_uldivmod>:
 80002ac:	b953      	cbnz	r3, 80002c4 <__aeabi_uldivmod+0x18>
 80002ae:	b94a      	cbnz	r2, 80002c4 <__aeabi_uldivmod+0x18>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	bf08      	it	eq
 80002b4:	2800      	cmpeq	r0, #0
 80002b6:	bf1c      	itt	ne
 80002b8:	f04f 31ff 	movne.w	r1, #4294967295
 80002bc:	f04f 30ff 	movne.w	r0, #4294967295
 80002c0:	f000 b982 	b.w	80005c8 <__aeabi_idiv0>
 80002c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002cc:	f000 f806 	bl	80002dc <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4770      	bx	lr

080002dc <__udivmoddi4>:
 80002dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002e2:	460d      	mov	r5, r1
 80002e4:	4604      	mov	r4, r0
 80002e6:	460f      	mov	r7, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d146      	bne.n	800037a <__udivmoddi4+0x9e>
 80002ec:	428a      	cmp	r2, r1
 80002ee:	4694      	mov	ip, r2
 80002f0:	d95e      	bls.n	80003b0 <__udivmoddi4+0xd4>
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	b143      	cbz	r3, 800030a <__udivmoddi4+0x2e>
 80002f8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002fc:	f1c3 0220 	rsb	r2, r3, #32
 8000300:	409f      	lsls	r7, r3
 8000302:	409c      	lsls	r4, r3
 8000304:	fa20 f202 	lsr.w	r2, r0, r2
 8000308:	4317      	orrs	r7, r2
 800030a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800030e:	fa1f f58c 	uxth.w	r5, ip
 8000312:	0c22      	lsrs	r2, r4, #16
 8000314:	fbb7 f1fe 	udiv	r1, r7, lr
 8000318:	fb0e 7711 	mls	r7, lr, r1, r7
 800031c:	fb01 f005 	mul.w	r0, r1, r5
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	4290      	cmp	r0, r2
 8000326:	d908      	bls.n	800033a <__udivmoddi4+0x5e>
 8000328:	eb1c 0202 	adds.w	r2, ip, r2
 800032c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x5c>
 8000332:	4290      	cmp	r0, r2
 8000334:	f200 8134 	bhi.w	80005a0 <__udivmoddi4+0x2c4>
 8000338:	4639      	mov	r1, r7
 800033a:	1a12      	subs	r2, r2, r0
 800033c:	b2a4      	uxth	r4, r4
 800033e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000342:	fb0e 2210 	mls	r2, lr, r0, r2
 8000346:	fb00 f505 	mul.w	r5, r0, r5
 800034a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034e:	42a5      	cmp	r5, r4
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x88>
 8000352:	eb1c 0404 	adds.w	r4, ip, r4
 8000356:	f100 32ff 	add.w	r2, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x86>
 800035c:	42a5      	cmp	r5, r4
 800035e:	f200 8119 	bhi.w	8000594 <__udivmoddi4+0x2b8>
 8000362:	4610      	mov	r0, r2
 8000364:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	2100      	movs	r1, #0
 800036c:	b11e      	cbz	r6, 8000376 <__udivmoddi4+0x9a>
 800036e:	40dc      	lsrs	r4, r3
 8000370:	2300      	movs	r3, #0
 8000372:	e9c6 4300 	strd	r4, r3, [r6]
 8000376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0xb4>
 800037e:	2e00      	cmp	r6, #0
 8000380:	f000 80fc 	beq.w	800057c <__udivmoddi4+0x2a0>
 8000384:	2100      	movs	r1, #0
 8000386:	e9c6 0500 	strd	r0, r5, [r6]
 800038a:	4608      	mov	r0, r1
 800038c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000390:	fab3 f183 	clz	r1, r3
 8000394:	2900      	cmp	r1, #0
 8000396:	d14c      	bne.n	8000432 <__udivmoddi4+0x156>
 8000398:	42ab      	cmp	r3, r5
 800039a:	f0c0 80f2 	bcc.w	8000582 <__udivmoddi4+0x2a6>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f240 80ef 	bls.w	8000582 <__udivmoddi4+0x2a6>
 80003a4:	4608      	mov	r0, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d0e5      	beq.n	8000376 <__udivmoddi4+0x9a>
 80003aa:	e9c6 4700 	strd	r4, r7, [r6]
 80003ae:	e7e2      	b.n	8000376 <__udivmoddi4+0x9a>
 80003b0:	b902      	cbnz	r2, 80003b4 <__udivmoddi4+0xd8>
 80003b2:	deff      	udf	#255	; 0xff
 80003b4:	fab2 f382 	clz	r3, r2
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	f040 809f 	bne.w	80004fc <__udivmoddi4+0x220>
 80003be:	1a8a      	subs	r2, r1, r2
 80003c0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c4:	fa1f f78c 	uxth.w	r7, ip
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ce:	fb0e 2015 	mls	r0, lr, r5, r2
 80003d2:	0c22      	lsrs	r2, r4, #16
 80003d4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003d8:	fb07 f005 	mul.w	r0, r7, r5
 80003dc:	4290      	cmp	r0, r2
 80003de:	d90f      	bls.n	8000400 <__udivmoddi4+0x124>
 80003e0:	eb1c 0202 	adds.w	r2, ip, r2
 80003e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003e8:	bf2c      	ite	cs
 80003ea:	f04f 0901 	movcs.w	r9, #1
 80003ee:	f04f 0900 	movcc.w	r9, #0
 80003f2:	4290      	cmp	r0, r2
 80003f4:	d903      	bls.n	80003fe <__udivmoddi4+0x122>
 80003f6:	f1b9 0f00 	cmp.w	r9, #0
 80003fa:	f000 80ce 	beq.w	800059a <__udivmoddi4+0x2be>
 80003fe:	4645      	mov	r5, r8
 8000400:	1a12      	subs	r2, r2, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb2 f0fe 	udiv	r0, r2, lr
 8000408:	fb0e 2210 	mls	r2, lr, r0, r2
 800040c:	fb00 f707 	mul.w	r7, r0, r7
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	42a7      	cmp	r7, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x14e>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x14c>
 8000422:	42a7      	cmp	r7, r4
 8000424:	f200 80b3 	bhi.w	800058e <__udivmoddi4+0x2b2>
 8000428:	4610      	mov	r0, r2
 800042a:	1be4      	subs	r4, r4, r7
 800042c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000430:	e79c      	b.n	800036c <__udivmoddi4+0x90>
 8000432:	f1c1 0420 	rsb	r4, r1, #32
 8000436:	408b      	lsls	r3, r1
 8000438:	fa05 fc01 	lsl.w	ip, r5, r1
 800043c:	fa22 f704 	lsr.w	r7, r2, r4
 8000440:	40e5      	lsrs	r5, r4
 8000442:	408a      	lsls	r2, r1
 8000444:	431f      	orrs	r7, r3
 8000446:	fa20 f304 	lsr.w	r3, r0, r4
 800044a:	4088      	lsls	r0, r1
 800044c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000450:	ea43 030c 	orr.w	r3, r3, ip
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800045c:	fbb5 fef8 	udiv	lr, r5, r8
 8000460:	fb08 551e 	mls	r5, r8, lr, r5
 8000464:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000468:	fb0e f90c 	mul.w	r9, lr, ip
 800046c:	45a9      	cmp	r9, r5
 800046e:	d90e      	bls.n	800048e <__udivmoddi4+0x1b2>
 8000470:	197d      	adds	r5, r7, r5
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	bf2c      	ite	cs
 8000478:	f04f 0b01 	movcs.w	fp, #1
 800047c:	f04f 0b00 	movcc.w	fp, #0
 8000480:	45a9      	cmp	r9, r5
 8000482:	d903      	bls.n	800048c <__udivmoddi4+0x1b0>
 8000484:	f1bb 0f00 	cmp.w	fp, #0
 8000488:	f000 808d 	beq.w	80005a6 <__udivmoddi4+0x2ca>
 800048c:	46d6      	mov	lr, sl
 800048e:	eba5 0509 	sub.w	r5, r5, r9
 8000492:	fa1f f983 	uxth.w	r9, r3
 8000496:	fbb5 f3f8 	udiv	r3, r5, r8
 800049a:	fb08 5513 	mls	r5, r8, r3, r5
 800049e:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a2:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80004a6:	45ac      	cmp	ip, r5
 80004a8:	d906      	bls.n	80004b8 <__udivmoddi4+0x1dc>
 80004aa:	197d      	adds	r5, r7, r5
 80004ac:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x1da>
 80004b2:	45ac      	cmp	ip, r5
 80004b4:	d87e      	bhi.n	80005b4 <__udivmoddi4+0x2d8>
 80004b6:	4643      	mov	r3, r8
 80004b8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004bc:	eba5 050c 	sub.w	r5, r5, ip
 80004c0:	fba3 9802 	umull	r9, r8, r3, r2
 80004c4:	4545      	cmp	r5, r8
 80004c6:	46ce      	mov	lr, r9
 80004c8:	46c4      	mov	ip, r8
 80004ca:	d302      	bcc.n	80004d2 <__udivmoddi4+0x1f6>
 80004cc:	d106      	bne.n	80004dc <__udivmoddi4+0x200>
 80004ce:	4548      	cmp	r0, r9
 80004d0:	d204      	bcs.n	80004dc <__udivmoddi4+0x200>
 80004d2:	3b01      	subs	r3, #1
 80004d4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004dc:	2e00      	cmp	r6, #0
 80004de:	d06f      	beq.n	80005c0 <__udivmoddi4+0x2e4>
 80004e0:	ebb0 020e 	subs.w	r2, r0, lr
 80004e4:	eb65 050c 	sbc.w	r5, r5, ip
 80004e8:	40ca      	lsrs	r2, r1
 80004ea:	fa05 f404 	lsl.w	r4, r5, r4
 80004ee:	40cd      	lsrs	r5, r1
 80004f0:	4618      	mov	r0, r3
 80004f2:	4314      	orrs	r4, r2
 80004f4:	2100      	movs	r1, #0
 80004f6:	e9c6 4500 	strd	r4, r5, [r6]
 80004fa:	e73c      	b.n	8000376 <__udivmoddi4+0x9a>
 80004fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000500:	f1c3 0220 	rsb	r2, r3, #32
 8000504:	4099      	lsls	r1, r3
 8000506:	409c      	lsls	r4, r3
 8000508:	40d5      	lsrs	r5, r2
 800050a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800050e:	fa20 f202 	lsr.w	r2, r0, r2
 8000512:	fa1f f78c 	uxth.w	r7, ip
 8000516:	fbb5 f0fe 	udiv	r0, r5, lr
 800051a:	430a      	orrs	r2, r1
 800051c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000520:	0c11      	lsrs	r1, r2, #16
 8000522:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000526:	fb00 f507 	mul.w	r5, r0, r7
 800052a:	428d      	cmp	r5, r1
 800052c:	d90e      	bls.n	800054c <__udivmoddi4+0x270>
 800052e:	eb1c 0101 	adds.w	r1, ip, r1
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	bf2c      	ite	cs
 8000538:	f04f 0901 	movcs.w	r9, #1
 800053c:	f04f 0900 	movcc.w	r9, #0
 8000540:	428d      	cmp	r5, r1
 8000542:	d902      	bls.n	800054a <__udivmoddi4+0x26e>
 8000544:	f1b9 0f00 	cmp.w	r9, #0
 8000548:	d031      	beq.n	80005ae <__udivmoddi4+0x2d2>
 800054a:	4640      	mov	r0, r8
 800054c:	1b49      	subs	r1, r1, r5
 800054e:	b292      	uxth	r2, r2
 8000550:	fbb1 f5fe 	udiv	r5, r1, lr
 8000554:	fb0e 1115 	mls	r1, lr, r5, r1
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	fb05 f107 	mul.w	r1, r5, r7
 8000560:	4291      	cmp	r1, r2
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x298>
 8000564:	eb1c 0202 	adds.w	r2, ip, r2
 8000568:	f105 38ff 	add.w	r8, r5, #4294967295
 800056c:	d201      	bcs.n	8000572 <__udivmoddi4+0x296>
 800056e:	4291      	cmp	r1, r2
 8000570:	d823      	bhi.n	80005ba <__udivmoddi4+0x2de>
 8000572:	4645      	mov	r5, r8
 8000574:	1a52      	subs	r2, r2, r1
 8000576:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800057a:	e726      	b.n	80003ca <__udivmoddi4+0xee>
 800057c:	4631      	mov	r1, r6
 800057e:	4630      	mov	r0, r6
 8000580:	e6f9      	b.n	8000376 <__udivmoddi4+0x9a>
 8000582:	1a84      	subs	r4, r0, r2
 8000584:	eb65 0203 	sbc.w	r2, r5, r3
 8000588:	2001      	movs	r0, #1
 800058a:	4617      	mov	r7, r2
 800058c:	e70b      	b.n	80003a6 <__udivmoddi4+0xca>
 800058e:	4464      	add	r4, ip
 8000590:	3802      	subs	r0, #2
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14e>
 8000594:	4464      	add	r4, ip
 8000596:	3802      	subs	r0, #2
 8000598:	e6e4      	b.n	8000364 <__udivmoddi4+0x88>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e72f      	b.n	8000400 <__udivmoddi4+0x124>
 80005a0:	3902      	subs	r1, #2
 80005a2:	4462      	add	r2, ip
 80005a4:	e6c9      	b.n	800033a <__udivmoddi4+0x5e>
 80005a6:	f1ae 0e02 	sub.w	lr, lr, #2
 80005aa:	443d      	add	r5, r7
 80005ac:	e76f      	b.n	800048e <__udivmoddi4+0x1b2>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	e7cb      	b.n	800054c <__udivmoddi4+0x270>
 80005b4:	3b02      	subs	r3, #2
 80005b6:	443d      	add	r5, r7
 80005b8:	e77e      	b.n	80004b8 <__udivmoddi4+0x1dc>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	e7d9      	b.n	8000574 <__udivmoddi4+0x298>
 80005c0:	4618      	mov	r0, r3
 80005c2:	4631      	mov	r1, r6
 80005c4:	e6d7      	b.n	8000376 <__udivmoddi4+0x9a>
 80005c6:	bf00      	nop

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <DRV2605_Init>:

#ifndef min
#define min(a,b) ((a)<(b)?(a):(b))
#endif

DRV2605_StatusTypeDef DRV2605_Init(DRV2605_HandleTypeDef *dev, I2C_HandleTypeDef *i2cHandle, GPIO_TypeDef *EN_Port, uint16_t EN_Pin){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
 80005d8:	807b      	strh	r3, [r7, #2]

	DRV2605_StatusTypeDef status = DRV2605_OK;
 80005da:	2300      	movs	r3, #0
 80005dc:	75fb      	strb	r3, [r7, #23]
	uint8_t regData;

	/* Assign I2C handle */
	dev->i2cHandle = i2cHandle;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	68ba      	ldr	r2, [r7, #8]
 80005e2:	601a      	str	r2, [r3, #0]

	/* Assign EN pin */
	dev->EN_Port = EN_Port;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	605a      	str	r2, [r3, #4]
	dev->EN_Pin = EN_Pin;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	887a      	ldrh	r2, [r7, #2]
 80005ee:	811a      	strh	r2, [r3, #8]

	/* Set default values */
	dev->sequencePointer = 1;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2201      	movs	r2, #1
 80005f4:	759a      	strb	r2, [r3, #22]

	/* Take the device out of standby */
	status = DRV2605_Enable(dev);
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f000 f866 	bl	80006c8 <DRV2605_Enable>
 80005fc:	4603      	mov	r3, r0
 80005fe:	75fb      	strb	r3, [r7, #23]
	if (status != DRV2605_OK){
 8000600:	7dfb      	ldrb	r3, [r7, #23]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <DRV2605_Init+0x3e>
		return status;
 8000606:	7dfb      	ldrb	r3, [r7, #23]
 8000608:	e05a      	b.n	80006c0 <DRV2605_Init+0xf4>
	}

	/* Update the device struct */
	dev->enabled = true;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2201      	movs	r2, #1
 800060e:	729a      	strb	r2, [r3, #10]

	/* Read the device ID */
	status = DRV2605_ReadRegister(dev, DRV2605_REG_STATUS, &regData);
 8000610:	f107 0316 	add.w	r3, r7, #22
 8000614:	461a      	mov	r2, r3
 8000616:	2100      	movs	r1, #0
 8000618:	68f8      	ldr	r0, [r7, #12]
 800061a:	f000 f981 	bl	8000920 <DRV2605_ReadRegister>
 800061e:	4603      	mov	r3, r0
 8000620:	75fb      	strb	r3, [r7, #23]
	if (status != DRV2605_OK){
 8000622:	7dfb      	ldrb	r3, [r7, #23]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <DRV2605_Init+0x60>
		return status;
 8000628:	7dfb      	ldrb	r3, [r7, #23]
 800062a:	e049      	b.n	80006c0 <DRV2605_Init+0xf4>
	}

	/* Check device ID for wrong model */
	if (((regData & DRV2605_BITS_DEVICE_ID) == (DRV2604_ID << 5)) || ((regData & DRV2605_BITS_DEVICE_ID) == (DRV2604L_ID << 5))){
 800062c:	7dbb      	ldrb	r3, [r7, #22]
 800062e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000632:	2b80      	cmp	r3, #128	; 0x80
 8000634:	d004      	beq.n	8000640 <DRV2605_Init+0x74>
 8000636:	7dbb      	ldrb	r3, [r7, #22]
 8000638:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800063c:	2bc0      	cmp	r3, #192	; 0xc0
 800063e:	d103      	bne.n	8000648 <DRV2605_Init+0x7c>
		status = DRV2605_ERROR_UNSUPPORTED_MODEL;
 8000640:	2305      	movs	r3, #5
 8000642:	75fb      	strb	r3, [r7, #23]
		return status;
 8000644:	7dfb      	ldrb	r3, [r7, #23]
 8000646:	e03b      	b.n	80006c0 <DRV2605_Init+0xf4>
	}

	/* Check device ID is valid */
	else if (((regData & DRV2605_BITS_DEVICE_ID) == (DRV2605_ID << 5)) != ((regData & DRV2605_BITS_DEVICE_ID) == (DRV2605L_ID << 5))){
 8000648:	7dbb      	ldrb	r3, [r7, #22]
 800064a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800064e:	2b60      	cmp	r3, #96	; 0x60
 8000650:	bf0c      	ite	eq
 8000652:	2301      	moveq	r3, #1
 8000654:	2300      	movne	r3, #0
 8000656:	b2da      	uxtb	r2, r3
 8000658:	7dbb      	ldrb	r3, [r7, #22]
 800065a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800065e:	2be0      	cmp	r3, #224	; 0xe0
 8000660:	bf0c      	ite	eq
 8000662:	2301      	moveq	r3, #1
 8000664:	2300      	movne	r3, #0
 8000666:	b2db      	uxtb	r3, r3
 8000668:	4053      	eors	r3, r2
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	d003      	beq.n	8000678 <DRV2605_Init+0xac>
		status = DRV2605_ERROR_WRONG_ID;
 8000670:	2304      	movs	r3, #4
 8000672:	75fb      	strb	r3, [r7, #23]
		return status;
 8000674:	7dfb      	ldrb	r3, [r7, #23]
 8000676:	e023      	b.n	80006c0 <DRV2605_Init+0xf4>
	}

	/* Reset the device */
	status = DRV2605_Reset(dev);
 8000678:	68f8      	ldr	r0, [r7, #12]
 800067a:	f000 f836 	bl	80006ea <DRV2605_Reset>
 800067e:	4603      	mov	r3, r0
 8000680:	75fb      	strb	r3, [r7, #23]
	if (status != DRV2605_OK){
 8000682:	7dfb      	ldrb	r3, [r7, #23]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <DRV2605_Init+0xc0>
		return status;
 8000688:	7dfb      	ldrb	r3, [r7, #23]
 800068a:	e019      	b.n	80006c0 <DRV2605_Init+0xf4>
	}

	/* Update the device struct */
	dev->standby = true;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2201      	movs	r2, #1
 8000690:	72da      	strb	r2, [r3, #11]

	/* Set the device mode */
	status = DRV2605_SetMode(dev, DRV2605_DEFAULT_MODE);
 8000692:	2100      	movs	r1, #0
 8000694:	68f8      	ldr	r0, [r7, #12]
 8000696:	f000 f83e 	bl	8000716 <DRV2605_SetMode>
 800069a:	4603      	mov	r3, r0
 800069c:	75fb      	strb	r3, [r7, #23]
	if (status != DRV2605_OK){
 800069e:	7dfb      	ldrb	r3, [r7, #23]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <DRV2605_Init+0xdc>
		return status;
 80006a4:	7dfb      	ldrb	r3, [r7, #23]
 80006a6:	e00b      	b.n	80006c0 <DRV2605_Init+0xf4>
	}

	/* Set the device library */
	status = DRV2605_SetLibrary(dev, DRV2605_DEFAULT_LIBRARY);
 80006a8:	2101      	movs	r1, #1
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f000 f86a 	bl	8000784 <DRV2605_SetLibrary>
 80006b0:	4603      	mov	r3, r0
 80006b2:	75fb      	strb	r3, [r7, #23]
	if (status != DRV2605_OK){
 80006b4:	7dfb      	ldrb	r3, [r7, #23]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <DRV2605_Init+0xf2>
		return status;
 80006ba:	7dfb      	ldrb	r3, [r7, #23]
 80006bc:	e000      	b.n	80006c0 <DRV2605_Init+0xf4>
	}

	return status;
 80006be:	7dfb      	ldrb	r3, [r7, #23]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <DRV2605_Enable>:

DRV2605_StatusTypeDef DRV2605_Enable(DRV2605_HandleTypeDef *dev){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(dev->EN_Port, dev->EN_Pin, SET);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6858      	ldr	r0, [r3, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	891b      	ldrh	r3, [r3, #8]
 80006d8:	2201      	movs	r2, #1
 80006da:	4619      	mov	r1, r3
 80006dc:	f004 fcf2 	bl	80050c4 <HAL_GPIO_WritePin>

	return DRV2605_OK;
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <DRV2605_Reset>:
	HAL_GPIO_WritePin(dev->EN_Port, dev->EN_Pin, RESET);

	return DRV2605_OK;
}

DRV2605_StatusTypeDef DRV2605_Reset(DRV2605_HandleTypeDef *dev){
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b084      	sub	sp, #16
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]

	DRV2605_StatusTypeDef status = DRV2605_OK;
 80006f2:	2300      	movs	r3, #0
 80006f4:	73fb      	strb	r3, [r7, #15]
	uint8_t regData = DRV2605_BIT_RESET;
 80006f6:	2380      	movs	r3, #128	; 0x80
 80006f8:	73bb      	strb	r3, [r7, #14]

	/* Write the "DRV2605_REG_MODE" register */
	status = DRV2605_WriteRegister(dev, DRV2605_REG_MODE, &regData);
 80006fa:	f107 030e 	add.w	r3, r7, #14
 80006fe:	461a      	mov	r2, r3
 8000700:	2101      	movs	r1, #1
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 f927 	bl	8000956 <DRV2605_WriteRegister>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]

	return status;
 800070c:	7bfb      	ldrb	r3, [r7, #15]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <DRV2605_SetMode>:
	/* Update the device struct */
	dev->standby = false;
	return status;
}

DRV2605_StatusTypeDef DRV2605_SetMode(DRV2605_HandleTypeDef *dev, DRV2605_Mode mode){
 8000716:	b580      	push	{r7, lr}
 8000718:	b084      	sub	sp, #16
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	460b      	mov	r3, r1
 8000720:	70fb      	strb	r3, [r7, #3]

	DRV2605_StatusTypeDef status = DRV2605_OK;
 8000722:	2300      	movs	r3, #0
 8000724:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "DRV2605_REG_MODE" register */
	status = DRV2605_ReadRegister(dev, DRV2605_REG_MODE, &regData);
 8000726:	f107 030e 	add.w	r3, r7, #14
 800072a:	461a      	mov	r2, r3
 800072c:	2101      	movs	r1, #1
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f000 f8f6 	bl	8000920 <DRV2605_ReadRegister>
 8000734:	4603      	mov	r3, r0
 8000736:	73fb      	strb	r3, [r7, #15]
	if (status != DRV2605_OK){
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <DRV2605_SetMode+0x2c>
		return status;
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	e01c      	b.n	800077c <DRV2605_SetMode+0x66>
	}

	/* Set the "MODE" bits */
	regData = (regData & ~DRV2605_BITS_MODE) | mode;
 8000742:	7bbb      	ldrb	r3, [r7, #14]
 8000744:	b25b      	sxtb	r3, r3
 8000746:	f023 0307 	bic.w	r3, r3, #7
 800074a:	b25a      	sxtb	r2, r3
 800074c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000750:	4313      	orrs	r3, r2
 8000752:	b25b      	sxtb	r3, r3
 8000754:	b2db      	uxtb	r3, r3
 8000756:	73bb      	strb	r3, [r7, #14]

	/* Write the "DRV2605_REG_MODE" register */
	status = DRV2605_WriteRegister(dev, DRV2605_REG_MODE, &regData);
 8000758:	f107 030e 	add.w	r3, r7, #14
 800075c:	461a      	mov	r2, r3
 800075e:	2101      	movs	r1, #1
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f8f8 	bl	8000956 <DRV2605_WriteRegister>
 8000766:	4603      	mov	r3, r0
 8000768:	73fb      	strb	r3, [r7, #15]
	if (status != DRV2605_OK){
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <DRV2605_SetMode+0x5e>
		return status;
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	e003      	b.n	800077c <DRV2605_SetMode+0x66>
	}

	/* Update the device struct */
	dev->mode = mode;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	78fa      	ldrb	r2, [r7, #3]
 8000778:	731a      	strb	r2, [r3, #12]
	return status;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <DRV2605_SetLibrary>:

DRV2605_StatusTypeDef DRV2605_SetLibrary(DRV2605_HandleTypeDef *dev, DRV2605_Library library){
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]

	DRV2605_StatusTypeDef status = DRV2605_OK;
 8000790:	2300      	movs	r3, #0
 8000792:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "DRV2605_REG_LIBRARY_SELECT" register */
	status = DRV2605_ReadRegister(dev, DRV2605_REG_LIBRARY_SELECT, &regData);
 8000794:	f107 030e 	add.w	r3, r7, #14
 8000798:	461a      	mov	r2, r3
 800079a:	2103      	movs	r1, #3
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f000 f8bf 	bl	8000920 <DRV2605_ReadRegister>
 80007a2:	4603      	mov	r3, r0
 80007a4:	73fb      	strb	r3, [r7, #15]
	if (status != DRV2605_OK){
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <DRV2605_SetLibrary+0x2c>
		return status;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	e01c      	b.n	80007ea <DRV2605_SetLibrary+0x66>
	}

	/* Set the "LIBRARY_SEL" bits */
	regData = (regData & ~DRV2605_BITS_LIBRARY_SEL) | library;
 80007b0:	7bbb      	ldrb	r3, [r7, #14]
 80007b2:	b25b      	sxtb	r3, r3
 80007b4:	f023 0307 	bic.w	r3, r3, #7
 80007b8:	b25a      	sxtb	r2, r3
 80007ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80007be:	4313      	orrs	r3, r2
 80007c0:	b25b      	sxtb	r3, r3
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	73bb      	strb	r3, [r7, #14]

	/* Write the "DRV2605_REG_LIBRARY_SELECT" register */
	status = DRV2605_WriteRegister(dev, DRV2605_REG_LIBRARY_SELECT, &regData);
 80007c6:	f107 030e 	add.w	r3, r7, #14
 80007ca:	461a      	mov	r2, r3
 80007cc:	2103      	movs	r1, #3
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f000 f8c1 	bl	8000956 <DRV2605_WriteRegister>
 80007d4:	4603      	mov	r3, r0
 80007d6:	73fb      	strb	r3, [r7, #15]
	if (status != DRV2605_OK){
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <DRV2605_SetLibrary+0x5e>
		return status;
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	e003      	b.n	80007ea <DRV2605_SetLibrary+0x66>
	}

	/* Update the device struct */
	dev->library = library;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	78fa      	ldrb	r2, [r7, #3]
 80007e6:	735a      	strb	r2, [r3, #13]
	return status;
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <DRV2605_SequenceAddDelay>:
	status = DRV2605_SequenceWrite(dev);

	return status;
}

DRV2605_StatusTypeDef DRV2605_SequenceAddDelay(DRV2605_HandleTypeDef *dev, uint8_t delay){
 80007f2:	b480      	push	{r7}
 80007f4:	b085      	sub	sp, #20
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
 80007fa:	460b      	mov	r3, r1
 80007fc:	70fb      	strb	r3, [r7, #3]

	DRV2605_StatusTypeDef status = DRV2605_OK;
 80007fe:	2300      	movs	r3, #0
 8000800:	73fb      	strb	r3, [r7, #15]

	/* Check the sequence isn't too long */
	if (dev->sequencePointer >= DRV2605_MAX_SEQUENCE_LENGTH){
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	7d9b      	ldrb	r3, [r3, #22]
 8000806:	2b07      	cmp	r3, #7
 8000808:	d903      	bls.n	8000812 <DRV2605_SequenceAddDelay+0x20>
		status = DRV2605_ERROR_SEQUENCE_TOO_LONG;
 800080a:	2305      	movs	r3, #5
 800080c:	73fb      	strb	r3, [r7, #15]
		return status;
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	e01b      	b.n	800084a <DRV2605_SequenceAddDelay+0x58>
	}

	/* Update the device struct */
	dev->sequence[dev->sequencePointer] = delay | 0x80;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	7d9b      	ldrb	r3, [r3, #22]
 8000816:	4619      	mov	r1, r3
 8000818:	78fb      	ldrb	r3, [r7, #3]
 800081a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800081e:	b2da      	uxtb	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	440b      	add	r3, r1
 8000824:	739a      	strb	r2, [r3, #14]
	dev->sequencePointer++;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7d9b      	ldrb	r3, [r3, #22]
 800082a:	3301      	adds	r3, #1
 800082c:	b2da      	uxtb	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	759a      	strb	r2, [r3, #22]

	/* Add the stop sequence command to the end of the sequence */
	if (dev->sequencePointer < DRV2605_MAX_SEQUENCE_LENGTH){
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	7d9b      	ldrb	r3, [r3, #22]
 8000836:	2b07      	cmp	r3, #7
 8000838:	d806      	bhi.n	8000848 <DRV2605_SequenceAddDelay+0x56>
		dev->sequence[dev->sequencePointer] = 0;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	7d9b      	ldrb	r3, [r3, #22]
 800083e:	461a      	mov	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4413      	add	r3, r2
 8000844:	2200      	movs	r2, #0
 8000846:	739a      	strb	r2, [r3, #14]
	}

	return status;
 8000848:	7bfb      	ldrb	r3, [r7, #15]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <DRV2605_SequenceAddWaveform>:

DRV2605_StatusTypeDef DRV2605_SequenceAddWaveform(DRV2605_HandleTypeDef *dev, uint8_t effect){
 8000856:	b480      	push	{r7}
 8000858:	b085      	sub	sp, #20
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	460b      	mov	r3, r1
 8000860:	70fb      	strb	r3, [r7, #3]

	DRV2605_StatusTypeDef status = DRV2605_OK;
 8000862:	2300      	movs	r3, #0
 8000864:	73fb      	strb	r3, [r7, #15]

	/* Check the sequence isn't too long */
	if (dev->sequencePointer >= DRV2605_MAX_SEQUENCE_LENGTH){
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	7d9b      	ldrb	r3, [r3, #22]
 800086a:	2b07      	cmp	r3, #7
 800086c:	d903      	bls.n	8000876 <DRV2605_SequenceAddWaveform+0x20>
		status = DRV2605_ERROR_SEQUENCE_TOO_LONG;
 800086e:	2305      	movs	r3, #5
 8000870:	73fb      	strb	r3, [r7, #15]
		return status;
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	e01b      	b.n	80008ae <DRV2605_SequenceAddWaveform+0x58>
	}

	/* Update the device struct */
	dev->sequence[dev->sequencePointer] = effect & 0x7F;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7d9b      	ldrb	r3, [r3, #22]
 800087a:	4619      	mov	r1, r3
 800087c:	78fb      	ldrb	r3, [r7, #3]
 800087e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000882:	b2da      	uxtb	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	440b      	add	r3, r1
 8000888:	739a      	strb	r2, [r3, #14]
	dev->sequencePointer++;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	7d9b      	ldrb	r3, [r3, #22]
 800088e:	3301      	adds	r3, #1
 8000890:	b2da      	uxtb	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	759a      	strb	r2, [r3, #22]

	/* Add the stop sequence command to the end of the sequence */
	if (dev->sequencePointer < DRV2605_MAX_SEQUENCE_LENGTH){
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	7d9b      	ldrb	r3, [r3, #22]
 800089a:	2b07      	cmp	r3, #7
 800089c:	d806      	bhi.n	80008ac <DRV2605_SequenceAddWaveform+0x56>
		dev->sequence[dev->sequencePointer] = 0;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	7d9b      	ldrb	r3, [r3, #22]
 80008a2:	461a      	mov	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4413      	add	r3, r2
 80008a8:	2200      	movs	r2, #0
 80008aa:	739a      	strb	r2, [r3, #14]
	}

	return status;
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <DRV2605_SequenceWrite>:

DRV2605_StatusTypeDef DRV2605_SequenceWrite(DRV2605_HandleTypeDef *dev){
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b084      	sub	sp, #16
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]

	DRV2605_StatusTypeDef status = DRV2605_OK;
 80008c2:	2300      	movs	r3, #0
 80008c4:	73fb      	strb	r3, [r7, #15]

	/* Write sequence to device */
	for (uint8_t i = 0; i < min((dev->sequencePointer + 1), DRV2605_MAX_SEQUENCE_LENGTH); i++){
 80008c6:	2300      	movs	r3, #0
 80008c8:	73bb      	strb	r3, [r7, #14]
 80008ca:	e015      	b.n	80008f8 <DRV2605_SequenceWrite+0x3e>
		status = DRV2605_WriteRegister(dev, DRV2605_REG_WAVEFORM_SEQUENCER_FIRST + i, &dev->sequence[i]);
 80008cc:	7bbb      	ldrb	r3, [r7, #14]
 80008ce:	3304      	adds	r3, #4
 80008d0:	b2d9      	uxtb	r1, r3
 80008d2:	7bbb      	ldrb	r3, [r7, #14]
 80008d4:	3308      	adds	r3, #8
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	3306      	adds	r3, #6
 80008dc:	461a      	mov	r2, r3
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f000 f839 	bl	8000956 <DRV2605_WriteRegister>
 80008e4:	4603      	mov	r3, r0
 80008e6:	73fb      	strb	r3, [r7, #15]
		if (status != DRV2605_OK){
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <DRV2605_SequenceWrite+0x38>
			return status;
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	e012      	b.n	8000918 <DRV2605_SequenceWrite+0x5e>
	for (uint8_t i = 0; i < min((dev->sequencePointer + 1), DRV2605_MAX_SEQUENCE_LENGTH); i++){
 80008f2:	7bbb      	ldrb	r3, [r7, #14]
 80008f4:	3301      	adds	r3, #1
 80008f6:	73bb      	strb	r3, [r7, #14]
 80008f8:	7bba      	ldrb	r2, [r7, #14]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	7d9b      	ldrb	r3, [r3, #22]
 80008fe:	2b06      	cmp	r3, #6
 8000900:	d803      	bhi.n	800090a <DRV2605_SequenceWrite+0x50>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	7d9b      	ldrb	r3, [r3, #22]
 8000906:	3301      	adds	r3, #1
 8000908:	e000      	b.n	800090c <DRV2605_SequenceWrite+0x52>
 800090a:	2308      	movs	r3, #8
 800090c:	4293      	cmp	r3, r2
 800090e:	dcdd      	bgt.n	80008cc <DRV2605_SequenceWrite+0x12>
		}
	}

	/* Update the device struct */
	dev->sequencePointer = 0;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	759a      	strb	r2, [r3, #22]

	return status;
 8000916:	7bfb      	ldrb	r3, [r7, #15]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <DRV2605_ReadRegister>:
	/* TODO: Implement function */

	return status;
}

DRV2605_StatusTypeDef DRV2605_ReadRegister(DRV2605_HandleTypeDef *dev, uint8_t reg, uint8_t *data){
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af04      	add	r7, sp, #16
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	460b      	mov	r3, r1
 800092a:	607a      	str	r2, [r7, #4]
 800092c:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, DRV2605_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	6818      	ldr	r0, [r3, #0]
 8000932:	7afb      	ldrb	r3, [r7, #11]
 8000934:	b29a      	uxth	r2, r3
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	9302      	str	r3, [sp, #8]
 800093c:	2301      	movs	r3, #1
 800093e:	9301      	str	r3, [sp, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2301      	movs	r3, #1
 8000946:	21b4      	movs	r1, #180	; 0xb4
 8000948:	f004 fdee 	bl	8005528 <HAL_I2C_Mem_Read>
 800094c:	4603      	mov	r3, r0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <DRV2605_WriteRegister>:

DRV2605_StatusTypeDef DRV2605_WriteRegister(DRV2605_HandleTypeDef *dev, uint8_t reg, uint8_t *data){
 8000956:	b580      	push	{r7, lr}
 8000958:	b088      	sub	sp, #32
 800095a:	af04      	add	r7, sp, #16
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	460b      	mov	r3, r1
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write(dev->i2cHandle, DRV2605_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	7afb      	ldrb	r3, [r7, #11]
 800096a:	b29a      	uxth	r2, r3
 800096c:	f04f 33ff 	mov.w	r3, #4294967295
 8000970:	9302      	str	r3, [sp, #8]
 8000972:	2301      	movs	r3, #1
 8000974:	9301      	str	r3, [sp, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	2301      	movs	r3, #1
 800097c:	21b4      	movs	r1, #180	; 0xb4
 800097e:	f004 fcbf 	bl	8005300 <HAL_I2C_Mem_Write>
 8000982:	4603      	mov	r3, r0
}
 8000984:	4618      	mov	r0, r3
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000990:	f002 fcc2 	bl	8003318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000994:	f000 f862 	bl	8000a5c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000998:	f000 f8ca 	bl	8000b30 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099c:	f001 f80c 	bl	80019b8 <MX_GPIO_Init>
  MX_DCACHE1_Init();
 80009a0:	f000 f944 	bl	8000c2c <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 80009a4:	f000 f958 	bl	8000c58 <MX_DCACHE2_Init>
  MX_ICACHE_Init();
 80009a8:	f000 fc4a 	bl	8001240 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80009ac:	f000 fc7a 	bl	80012a4 <MX_LPUART1_UART_Init>
  MX_OCTOSPI1_Init();
 80009b0:	f000 fde0 	bl	8001574 <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 80009b4:	f000 f918 	bl	8000be8 <MX_CRC_Init>
  MX_DMA2D_Init();
 80009b8:	f000 f964 	bl	8000c84 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80009bc:	f000 f9a0 	bl	8000d00 <MX_DSIHOST_DSI_Init>
  MX_GFXMMU_Init();
 80009c0:	f000 fa9a 	bl	8000ef8 <MX_GFXMMU_Init>
  MX_GPU2D_Init();
 80009c4:	f000 fae8 	bl	8000f98 <MX_GPU2D_Init>
  MX_LTDC_Init();
 80009c8:	f000 fd50 	bl	800146c <MX_LTDC_Init>
  MX_RTC_Init();
 80009cc:	f000 ff04 	bl	80017d8 <MX_RTC_Init>
  MX_OCTOSPI2_Init();
 80009d0:	f000 fe6a 	bl	80016a8 <MX_OCTOSPI2_Init>
  MX_ADF1_Init();
 80009d4:	f000 f8ba 	bl	8000b4c <MX_ADF1_Init>
  MX_I2C1_Init();
 80009d8:	f000 faf2 	bl	8000fc0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80009dc:	f000 fb30 	bl	8001040 <MX_I2C2_Init>
  MX_I2C4_Init();
 80009e0:	f000 fbae 	bl	8001140 <MX_I2C4_Init>
  MX_I2C6_Init();
 80009e4:	f000 fbec 	bl	80011c0 <MX_I2C6_Init>
  MX_USART1_UART_Init();
 80009e8:	f000 fca8 	bl	800133c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80009ec:	f000 fcf2 	bl	80013d4 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80009f0:	f000 ff74 	bl	80018dc <MX_SPI1_Init>
  MX_I2C3_Init();
 80009f4:	f000 fb64 	bl	80010c0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  DRV2605_Init(&hdrv, &hi2c4, LRA_EN_GPIO_Port, LRA_EN_Pin);
 80009f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009fc:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <main+0xc4>)
 80009fe:	4915      	ldr	r1, [pc, #84]	; (8000a54 <main+0xc8>)
 8000a00:	4815      	ldr	r0, [pc, #84]	; (8000a58 <main+0xcc>)
 8000a02:	f7ff fde3 	bl	80005cc <DRV2605_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  DRV2605_SequenceAddWaveform(&hdrv, 1);	/* Strong Click - 100% */
 8000a06:	2101      	movs	r1, #1
 8000a08:	4813      	ldr	r0, [pc, #76]	; (8000a58 <main+0xcc>)
 8000a0a:	f7ff ff24 	bl	8000856 <DRV2605_SequenceAddWaveform>
  DRV2605_SequenceAddDelay(&hdrv, 50);		/* Wait for 500ms */
 8000a0e:	2132      	movs	r1, #50	; 0x32
 8000a10:	4811      	ldr	r0, [pc, #68]	; (8000a58 <main+0xcc>)
 8000a12:	f7ff feee 	bl	80007f2 <DRV2605_SequenceAddDelay>
  DRV2605_SequenceAddWaveform(&hdrv, 1);	/* Strong Click - 100% */
 8000a16:	2101      	movs	r1, #1
 8000a18:	480f      	ldr	r0, [pc, #60]	; (8000a58 <main+0xcc>)
 8000a1a:	f7ff ff1c 	bl	8000856 <DRV2605_SequenceAddWaveform>
  DRV2605_SequenceAddDelay(&hdrv, 100);		/* Wait for 1000ms */
 8000a1e:	2164      	movs	r1, #100	; 0x64
 8000a20:	480d      	ldr	r0, [pc, #52]	; (8000a58 <main+0xcc>)
 8000a22:	f7ff fee6 	bl	80007f2 <DRV2605_SequenceAddDelay>
  DRV2605_SequenceAddWaveform(&hdrv, 108);	/* Transition Ramp Up Medium Smooth 1 – 0 to 50% */
 8000a26:	216c      	movs	r1, #108	; 0x6c
 8000a28:	480b      	ldr	r0, [pc, #44]	; (8000a58 <main+0xcc>)
 8000a2a:	f7ff ff14 	bl	8000856 <DRV2605_SequenceAddWaveform>
  DRV2605_SequenceAddWaveform(&hdrv, 96);	/* Transition Ramp Down Medium Smooth 1 – 50 to 0% */
 8000a2e:	2160      	movs	r1, #96	; 0x60
 8000a30:	4809      	ldr	r0, [pc, #36]	; (8000a58 <main+0xcc>)
 8000a32:	f7ff ff10 	bl	8000856 <DRV2605_SequenceAddWaveform>
  DRV2605_SequenceAddDelay(&hdrv, 100);		/* Wait for 1000ms */
 8000a36:	2164      	movs	r1, #100	; 0x64
 8000a38:	4807      	ldr	r0, [pc, #28]	; (8000a58 <main+0xcc>)
 8000a3a:	f7ff feda 	bl	80007f2 <DRV2605_SequenceAddDelay>
  DRV2605_SequenceAddWaveform(&hdrv, 123);	/* Smooth Hum 5 (No kick or brake pulse) – 10% */
 8000a3e:	217b      	movs	r1, #123	; 0x7b
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <main+0xcc>)
 8000a42:	f7ff ff08 	bl	8000856 <DRV2605_SequenceAddWaveform>

  DRV2605_SequenceWrite(&hdrv);
 8000a46:	4804      	ldr	r0, [pc, #16]	; (8000a58 <main+0xcc>)
 8000a48:	f7ff ff37 	bl	80008ba <DRV2605_SequenceWrite>

  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <main+0xc0>
 8000a4e:	bf00      	nop
 8000a50:	42020c00 	.word	0x42020c00
 8000a54:	20001038 	.word	0x20001038
 8000a58:	200014bc 	.word	0x200014bc

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09e      	sub	sp, #120	; 0x78
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0318 	add.w	r3, r7, #24
 8000a66:	2260      	movs	r2, #96	; 0x60
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f00d f83d 	bl	800daea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	463b      	mov	r3, r7
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]
 8000a7e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a80:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000a84:	f006 ff24 	bl	80078d0 <HAL_PWREx_ControlVoltageScaling>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000a8e:	f001 fa1d 	bl	8001ecc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a92:	f006 ff0d 	bl	80078b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <SystemClock_Config+0xd0>)
 8000a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a9c:	4a23      	ldr	r2, [pc, #140]	; (8000b2c <SystemClock_Config+0xd0>)
 8000a9e:	f023 0318 	bic.w	r3, r3, #24
 8000aa2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000aa6:	2305      	movs	r3, #5
 8000aa8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ab0:	2381      	movs	r3, #129	; 0x81
 8000ab2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ac4:	230a      	movs	r3, #10
 8000ac6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000adc:	f107 0318 	add.w	r3, r7, #24
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f006 ffe1 	bl	8007aa8 <HAL_RCC_OscConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aec:	f001 f9ee 	bl	8001ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af0:	231f      	movs	r3, #31
 8000af2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af4:	2303      	movs	r3, #3
 8000af6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2104      	movs	r1, #4
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f007 fea7 	bl	8008860 <HAL_RCC_ClockConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b18:	f001 f9d8 	bl	8001ecc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000b1c:	f008 fa22 	bl	8008f64 <HAL_RCC_EnableCSS>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8000b20:	f00b f99e 	bl	800be60 <HAL_RCCEx_EnableLSECSS>
}
 8000b24:	bf00      	nop
 8000b26:	3778      	adds	r7, #120	; 0x78
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	46020c00 	.word	0x46020c00

08000b30 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000b34:	f006 ffa8 	bl	8007a88 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f006 ff55 	bl	80079e8 <HAL_PWREx_ConfigSupply>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000b44:	f001 f9c2 	bl	8001ecc <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 8000b50:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <MX_ADF1_Init+0x90>)
 8000b52:	4a23      	ldr	r2, [pc, #140]	; (8000be0 <MX_ADF1_Init+0x94>)
 8000b54:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 8000b56:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <MX_ADF1_Init+0x90>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <MX_ADF1_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 8000b62:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <MX_ADF1_Init+0x90>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <MX_ADF1_Init+0x90>)
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	629a      	str	r2, [r3, #40]	; 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 8000b70:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_ADF1_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_ADF1_Init+0x90>)
 8000b78:	2204      	movs	r2, #4
 8000b7a:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_ADF1_Init+0x90>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 8000b82:	4816      	ldr	r0, [pc, #88]	; (8000bdc <MX_ADF1_Init+0x90>)
 8000b84:	f005 fd34 	bl	80065f0 <HAL_MDF_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_ADF1_Init+0x46>
  {
    Error_Handler();
 8000b8e:	f001 f99d 	bl	8001ecc <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_ADF1_Init+0x98>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <MX_ADF1_Init+0x98>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_ADF1_Init+0x98>)
 8000ba0:	2240      	movs	r2, #64	; 0x40
 8000ba2:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_ADF1_Init+0x98>)
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_ADF1_Init+0x98>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_ADF1_Init+0x98>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_ADF1_Init+0x98>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_ADF1_Init+0x98>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <MX_ADF1_Init+0x98>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <MX_ADF1_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <MX_ADF1_Init+0x98>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000d28 	.word	0x20000d28
 8000be0:	46024080 	.word	0x46024080
 8000be4:	20000d6c 	.word	0x20000d6c

08000be8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <MX_CRC_Init+0x3c>)
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <MX_CRC_Init+0x40>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_CRC_Init+0x3c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_CRC_Init+0x3c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_CRC_Init+0x3c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <MX_CRC_Init+0x3c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_CRC_Init+0x3c>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_CRC_Init+0x3c>)
 8000c12:	f002 fcd3 	bl	80035bc <HAL_CRC_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c1c:	f001 f956 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000de8 	.word	0x20000de8
 8000c28:	40023000 	.word	0x40023000

08000c2c <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <MX_DCACHE1_Init+0x24>)
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <MX_DCACHE1_Init+0x28>)
 8000c34:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_DCACHE1_Init+0x24>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_DCACHE1_Init+0x24>)
 8000c3e:	f002 fdaf 	bl	80037a0 <HAL_DCACHE_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 8000c48:	f001 f940 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000e0c 	.word	0x20000e0c
 8000c54:	40031400 	.word	0x40031400

08000c58 <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <MX_DCACHE2_Init+0x24>)
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <MX_DCACHE2_Init+0x28>)
 8000c60:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_DCACHE2_Init+0x24>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_DCACHE2_Init+0x24>)
 8000c6a:	f002 fd99 	bl	80037a0 <HAL_DCACHE_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_DCACHE2_Init+0x20>
  {
    Error_Handler();
 8000c74:	f001 f92a 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000e38 	.word	0x20000e38
 8000c80:	40031800 	.word	0x40031800

08000c84 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MX_DMA2D_Init+0x74>)
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	; (8000cfc <MX_DMA2D_Init+0x78>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_DMA2D_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_DMA2D_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 608;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_DMA2D_Init+0x74>)
 8000c9c:	f44f 7218 	mov.w	r2, #608	; 0x260
 8000ca0:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_DMA2D_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_DMA2D_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_DMA2D_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MX_DMA2D_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_DMA2D_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <MX_DMA2D_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_DMA2D_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <MX_DMA2D_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000cd2:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <MX_DMA2D_Init+0x74>)
 8000cd4:	f002 fe8b 	bl	80039ee <HAL_DMA2D_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 8000cde:	f001 f8f5 	bl	8001ecc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_DMA2D_Init+0x74>)
 8000ce6:	f002 fff3 	bl	8003cd0 <HAL_DMA2D_ConfigLayer>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 8000cf0:	f001 f8ec 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000e64 	.word	0x20000e64
 8000cfc:	4002b000 	.word	0x4002b000

08000d00 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0ae      	sub	sp, #184	; 0xb8
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000d06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
 8000d16:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000d18:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d1c:	2224      	movs	r2, #36	; 0x24
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00c fee2 	bl	800daea <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000d26:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]
 8000d36:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000d38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d3c:	2234      	movs	r2, #52	; 0x34
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f00c fed2 	bl	800daea <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	222c      	movs	r2, #44	; 0x2c
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f00c fecc 	bl	800daea <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000d52:	4b67      	ldr	r3, [pc, #412]	; (8000ef0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000d54:	4a67      	ldr	r2, [pc, #412]	; (8000ef4 <MX_DSIHOST_DSI_Init+0x1f4>)
 8000d56:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000d58:	4b65      	ldr	r3, [pc, #404]	; (8000ef0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000d5e:	4b64      	ldr	r3, [pc, #400]	; (8000ef0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000d64:	4b62      	ldr	r3, [pc, #392]	; (8000ef0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 8000d6a:	4b61      	ldr	r3, [pc, #388]	; (8000ef0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000d6c:	2208      	movs	r2, #8
 8000d6e:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 8000d70:	4b5f      	ldr	r3, [pc, #380]	; (8000ef0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 8000d76:	237d      	movs	r3, #125	; 0x7d
 8000d78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000d82:	2302      	movs	r3, #2
 8000d84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000d9a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4853      	ldr	r0, [pc, #332]	; (8000ef0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000da2:	f003 f93d 	bl	8004020 <HAL_DSI_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 8000dac:	f001 f88e 	bl	8001ecc <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.LowPowerReadTimeout = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.BTATimeout = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000de4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000de8:	4619      	mov	r1, r3
 8000dea:	4841      	ldr	r0, [pc, #260]	; (8000ef0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000dec:	f003 fdc8 	bl	8004980 <HAL_DSI_ConfigHostTimeouts>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_DSIHOST_DSI_Init+0xfa>
  {
    Error_Handler();
 8000df6:	f001 f869 	bl	8001ecc <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 10;
 8000dfa:	230a      	movs	r3, #10
 8000dfc:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.ClockLaneLP2HSTime = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneHS2LPTime = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneLP2HSTime = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.DataLaneMaxReadTime = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.StopWaitTime = 10;
 8000e0e:	230a      	movs	r3, #10
 8000e10:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000e12:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e16:	4619      	mov	r1, r3
 8000e18:	4835      	ldr	r0, [pc, #212]	; (8000ef0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000e1a:	f003 fd1b 	bl	8004854 <HAL_DSI_ConfigPhyTimer>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000e24:	f001 f852 	bl	8001ecc <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000e28:	2104      	movs	r1, #4
 8000e2a:	4831      	ldr	r0, [pc, #196]	; (8000ef0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000e2c:	f003 fcea 	bl	8004804 <HAL_DSI_ConfigFlowControl>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000e36:	f001 f849 	bl	8001ecc <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	482c      	ldr	r0, [pc, #176]	; (8000ef0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000e3e:	f003 f9c3 	bl	80041c8 <HAL_DSI_ConfigErrorMonitor>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 8000e48:	f001 f840 	bl	8001ecc <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000e80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e84:	4619      	mov	r1, r3
 8000e86:	481a      	ldr	r0, [pc, #104]	; (8000ef0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000e88:	f003 fc5e 	bl	8004748 <HAL_DSI_ConfigCommand>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_DSIHOST_DSI_Init+0x196>
  {
    Error_Handler();
 8000e92:	f001 f81b 	bl	8001ecc <Error_Handler>
  }
  CmdCfg.ColorCoding = DSI_RGB888;
 8000e96:	2305      	movs	r3, #5
 8000e98:	60bb      	str	r3, [r7, #8]
  CmdCfg.CommandSize = 416;
 8000e9a:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8000e9e:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000ea0:	2310      	movs	r3, #16
 8000ea2:	613b      	str	r3, [r7, #16]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000eb8:	2340      	movs	r3, #64	; 0x40
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480a      	ldr	r0, [pc, #40]	; (8000ef0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000ec6:	f003 fb68 	bl	800459a <HAL_DSI_ConfigAdaptedCommandMode>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 8000ed0:	f000 fffc 	bl	8001ecc <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000ed8:	f003 fb34 	bl	8004544 <HAL_DSI_SetGenericVCID>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 8000ee2:	f000 fff3 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	37b8      	adds	r7, #184	; 0xb8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000ec4 	.word	0x20000ec4
 8000ef4:	40016c00 	.word	0x40016c00

08000ef8 <MX_GFXMMU_Init>:
  * @brief GFXMMU Initialization Function
  * @param None
  * @retval None
  */
static void MX_GFXMMU_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END GFXMMU_Init 0 */

  /* USER CODE BEGIN GFXMMU_Init 1 */

  /* USER CODE END GFXMMU_Init 1 */
  hgfxmmu.Instance = GFXMMU;
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <MX_GFXMMU_Init+0x94>)
 8000efe:	4a24      	ldr	r2, [pc, #144]	; (8000f90 <MX_GFXMMU_Init+0x98>)
 8000f00:	601a      	str	r2, [r3, #0]
  hgfxmmu.Init.BlocksPerLine = GFXMMU_256BLOCKS;
 8000f02:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <MX_GFXMMU_Init+0x94>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  hgfxmmu.Init.DefaultValue = 0;
 8000f08:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <MX_GFXMMU_Init+0x94>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  hgfxmmu.Init.Buffers.Buf0Address = 0;
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <MX_GFXMMU_Init+0x94>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
  hgfxmmu.Init.Buffers.Buf1Address = 0;
 8000f14:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_GFXMMU_Init+0x94>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  hgfxmmu.Init.Buffers.Buf2Address = 0;
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <MX_GFXMMU_Init+0x94>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	615a      	str	r2, [r3, #20]
  hgfxmmu.Init.Buffers.Buf3Address = 0;
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_GFXMMU_Init+0x94>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	619a      	str	r2, [r3, #24]
  hgfxmmu.Init.CachePrefetch.Activation = ENABLE;
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <MX_GFXMMU_Init+0x94>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	771a      	strb	r2, [r3, #28]
  hgfxmmu.Init.CachePrefetch.CacheLock = GFXMMU_CACHE_LOCK_ENABLE;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_GFXMMU_Init+0x94>)
 8000f2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f32:	621a      	str	r2, [r3, #32]
  hgfxmmu.Init.CachePrefetch.CacheLockBuffer = GFXMMU_CACHE_LOCK_BUFFER0;
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_GFXMMU_Init+0x94>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24
  hgfxmmu.Init.CachePrefetch.CacheForce = GFXMMU_CACHE_FORCE_ENABLE;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_GFXMMU_Init+0x94>)
 8000f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f40:	629a      	str	r2, [r3, #40]	; 0x28
  hgfxmmu.Init.CachePrefetch.OutterBufferability = GFXMMU_OUTTER_BUFFERABILITY_ENABLE;
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_GFXMMU_Init+0x94>)
 8000f44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f48:	62da      	str	r2, [r3, #44]	; 0x2c
  hgfxmmu.Init.CachePrefetch.OutterCachability = GFXMMU_OUTTER_CACHABILITY_ENABLE;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_GFXMMU_Init+0x94>)
 8000f4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f50:	631a      	str	r2, [r3, #48]	; 0x30
  hgfxmmu.Init.CachePrefetch.Prefetch = GFXMMU_PREFETCH_ENABLE;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_GFXMMU_Init+0x94>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
  hgfxmmu.Init.Interrupts.Activation = ENABLE;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_GFXMMU_Init+0x94>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_GFXMMU_Init(&hgfxmmu) != HAL_OK)
 8000f60:	480a      	ldr	r0, [pc, #40]	; (8000f8c <MX_GFXMMU_Init+0x94>)
 8000f62:	f003 fdd3 	bl	8004b0c <HAL_GFXMMU_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_GFXMMU_Init+0x78>
  {
    Error_Handler();
 8000f6c:	f000 ffae 	bl	8001ecc <Error_Handler>
  }
  if (HAL_GFXMMU_ConfigLut(&hgfxmmu, GFXMMU_LUT_FIRST, GFXMMU_LUT_SIZE, (uint32_t)gfxmmu_lut_config) != HAL_OK)
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_GFXMMU_Init+0x9c>)
 8000f72:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8000f76:	2100      	movs	r1, #0
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_GFXMMU_Init+0x94>)
 8000f7a:	f003 fe47 	bl	8004c0c <HAL_GFXMMU_ConfigLut>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_GFXMMU_Init+0x90>
  {
    Error_Handler();
 8000f84:	f000 ffa2 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN GFXMMU_Init 2 */

  /* USER CODE END GFXMMU_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000ee8 	.word	0x20000ee8
 8000f90:	4002c000 	.word	0x4002c000
 8000f94:	20000000 	.word	0x20000000

08000f98 <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_GPU2D_Init+0x20>)
 8000f9e:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <MX_GPU2D_Init+0x24>)
 8000fa0:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_GPU2D_Init+0x20>)
 8000fa4:	f004 f8a6 	bl	80050f4 <HAL_GPU2D_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 8000fae:	f000 ff8d 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000f30 	.word	0x20000f30
 8000fbc:	4002f000 	.word	0x4002f000

08000fc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fc6:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <MX_I2C1_Init+0x78>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	; (800103c <MX_I2C1_Init+0x7c>)
 8000fce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_I2C1_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_I2C1_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <MX_I2C1_Init+0x74>)
 8000ffc:	f004 f8e5 	bl	80051ca <HAL_I2C_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001006:	f000 ff61 	bl	8001ecc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800100a:	2100      	movs	r1, #0
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <MX_I2C1_Init+0x74>)
 800100e:	f004 fe5d 	bl	8005ccc <HAL_I2CEx_ConfigAnalogFilter>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001018:	f000 ff58 	bl	8001ecc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800101c:	2100      	movs	r1, #0
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_I2C1_Init+0x74>)
 8001020:	f004 fe9f 	bl	8005d62 <HAL_I2CEx_ConfigDigitalFilter>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800102a:	f000 ff4f 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000f3c 	.word	0x20000f3c
 8001038:	40005400 	.word	0x40005400
 800103c:	30909dec 	.word	0x30909dec

08001040 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MX_I2C2_Init+0x74>)
 8001046:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <MX_I2C2_Init+0x78>)
 8001048:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_I2C2_Init+0x74>)
 800104c:	4a1b      	ldr	r2, [pc, #108]	; (80010bc <MX_I2C2_Init+0x7c>)
 800104e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MX_I2C2_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_I2C2_Init+0x74>)
 8001058:	2201      	movs	r2, #1
 800105a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <MX_I2C2_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_I2C2_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_I2C2_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_I2C2_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_I2C2_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800107a:	480e      	ldr	r0, [pc, #56]	; (80010b4 <MX_I2C2_Init+0x74>)
 800107c:	f004 f8a5 	bl	80051ca <HAL_I2C_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001086:	f000 ff21 	bl	8001ecc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800108a:	2100      	movs	r1, #0
 800108c:	4809      	ldr	r0, [pc, #36]	; (80010b4 <MX_I2C2_Init+0x74>)
 800108e:	f004 fe1d 	bl	8005ccc <HAL_I2CEx_ConfigAnalogFilter>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001098:	f000 ff18 	bl	8001ecc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800109c:	2100      	movs	r1, #0
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_I2C2_Init+0x74>)
 80010a0:	f004 fe5f 	bl	8005d62 <HAL_I2CEx_ConfigDigitalFilter>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80010aa:	f000 ff0f 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000f90 	.word	0x20000f90
 80010b8:	40005800 	.word	0x40005800
 80010bc:	30909dec 	.word	0x30909dec

080010c0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MX_I2C3_Init+0x74>)
 80010c6:	4a1c      	ldr	r2, [pc, #112]	; (8001138 <MX_I2C3_Init+0x78>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_I2C3_Init+0x74>)
 80010cc:	4a1b      	ldr	r2, [pc, #108]	; (800113c <MX_I2C3_Init+0x7c>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MX_I2C3_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <MX_I2C3_Init+0x74>)
 80010d8:	2201      	movs	r2, #1
 80010da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <MX_I2C3_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_I2C3_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_I2C3_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_I2C3_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_I2C3_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010fa:	480e      	ldr	r0, [pc, #56]	; (8001134 <MX_I2C3_Init+0x74>)
 80010fc:	f004 f865 	bl	80051ca <HAL_I2C_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001106:	f000 fee1 	bl	8001ecc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800110a:	2100      	movs	r1, #0
 800110c:	4809      	ldr	r0, [pc, #36]	; (8001134 <MX_I2C3_Init+0x74>)
 800110e:	f004 fddd 	bl	8005ccc <HAL_I2CEx_ConfigAnalogFilter>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001118:	f000 fed8 	bl	8001ecc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800111c:	2100      	movs	r1, #0
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_I2C3_Init+0x74>)
 8001120:	f004 fe1f 	bl	8005d62 <HAL_I2CEx_ConfigDigitalFilter>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800112a:	f000 fecf 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000fe4 	.word	0x20000fe4
 8001138:	46002800 	.word	0x46002800
 800113c:	30909dec 	.word	0x30909dec

08001140 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_I2C4_Init+0x74>)
 8001146:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <MX_I2C4_Init+0x78>)
 8001148:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30909DEC;
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_I2C4_Init+0x74>)
 800114c:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <MX_I2C4_Init+0x7c>)
 800114e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_I2C4_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <MX_I2C4_Init+0x74>)
 8001158:	2201      	movs	r2, #1
 800115a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_I2C4_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001162:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <MX_I2C4_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_I2C4_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_I2C4_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_I2C4_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800117a:	480e      	ldr	r0, [pc, #56]	; (80011b4 <MX_I2C4_Init+0x74>)
 800117c:	f004 f825 	bl	80051ca <HAL_I2C_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001186:	f000 fea1 	bl	8001ecc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800118a:	2100      	movs	r1, #0
 800118c:	4809      	ldr	r0, [pc, #36]	; (80011b4 <MX_I2C4_Init+0x74>)
 800118e:	f004 fd9d 	bl	8005ccc <HAL_I2CEx_ConfigAnalogFilter>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001198:	f000 fe98 	bl	8001ecc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800119c:	2100      	movs	r1, #0
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_I2C4_Init+0x74>)
 80011a0:	f004 fddf 	bl	8005d62 <HAL_I2CEx_ConfigDigitalFilter>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80011aa:	f000 fe8f 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20001038 	.word	0x20001038
 80011b8:	40008400 	.word	0x40008400
 80011bc:	30909dec 	.word	0x30909dec

080011c0 <MX_I2C6_Init>:
  * @brief I2C6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C6_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C6_Init 0 */

  /* USER CODE BEGIN I2C6_Init 1 */

  /* USER CODE END I2C6_Init 1 */
  hi2c6.Instance = I2C6;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_I2C6_Init+0x74>)
 80011c6:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <MX_I2C6_Init+0x78>)
 80011c8:	601a      	str	r2, [r3, #0]
  hi2c6.Init.Timing = 0x30909DEC;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <MX_I2C6_Init+0x74>)
 80011cc:	4a1b      	ldr	r2, [pc, #108]	; (800123c <MX_I2C6_Init+0x7c>)
 80011ce:	605a      	str	r2, [r3, #4]
  hi2c6.Init.OwnAddress1 = 0;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <MX_I2C6_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  hi2c6.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_I2C6_Init+0x74>)
 80011d8:	2201      	movs	r2, #1
 80011da:	60da      	str	r2, [r3, #12]
  hi2c6.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_I2C6_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  hi2c6.Init.OwnAddress2 = 0;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_I2C6_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  hi2c6.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_I2C6_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
  hi2c6.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_I2C6_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	61da      	str	r2, [r3, #28]
  hi2c6.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_I2C6_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c6) != HAL_OK)
 80011fa:	480e      	ldr	r0, [pc, #56]	; (8001234 <MX_I2C6_Init+0x74>)
 80011fc:	f003 ffe5 	bl	80051ca <HAL_I2C_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_I2C6_Init+0x4a>
  {
    Error_Handler();
 8001206:	f000 fe61 	bl	8001ecc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c6, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800120a:	2100      	movs	r1, #0
 800120c:	4809      	ldr	r0, [pc, #36]	; (8001234 <MX_I2C6_Init+0x74>)
 800120e:	f004 fd5d 	bl	8005ccc <HAL_I2CEx_ConfigAnalogFilter>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_I2C6_Init+0x5c>
  {
    Error_Handler();
 8001218:	f000 fe58 	bl	8001ecc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c6, 0) != HAL_OK)
 800121c:	2100      	movs	r1, #0
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_I2C6_Init+0x74>)
 8001220:	f004 fd9f 	bl	8005d62 <HAL_I2CEx_ConfigDigitalFilter>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_I2C6_Init+0x6e>
  {
    Error_Handler();
 800122a:	f000 fe4f 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C6_Init 2 */

  /* USER CODE END I2C6_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000108c 	.word	0x2000108c
 8001238:	40009c00 	.word	0x40009c00
 800123c:	30909dec 	.word	0x30909dec

08001240 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8001254:	f004 fde2 	bl	8005e1c <HAL_ICACHE_Disable>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800125e:	f000 fe35 	bl	8001ecc <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 8001262:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001266:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8001268:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800126c:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 800126e:	2301      	movs	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	4619      	mov	r1, r3
 800127e:	2000      	movs	r0, #0
 8001280:	f004 fdfc 	bl	8005e7c <HAL_ICACHE_EnableRemapRegion>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 800128a:	f000 fe1f 	bl	8001ecc <Error_Handler>
  }

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 800128e:	f004 fdb5 	bl	8005dfc <HAL_ICACHE_Enable>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ICACHE_Init+0x5c>
  {
    Error_Handler();
 8001298:	f000 fe18 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80012a8:	4b21      	ldr	r3, [pc, #132]	; (8001330 <MX_LPUART1_UART_Init+0x8c>)
 80012aa:	4a22      	ldr	r2, [pc, #136]	; (8001334 <MX_LPUART1_UART_Init+0x90>)
 80012ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80012ae:	4b20      	ldr	r3, [pc, #128]	; (8001330 <MX_LPUART1_UART_Init+0x8c>)
 80012b0:	4a21      	ldr	r2, [pc, #132]	; (8001338 <MX_LPUART1_UART_Init+0x94>)
 80012b2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012b4:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <MX_LPUART1_UART_Init+0x8c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <MX_LPUART1_UART_Init+0x8c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <MX_LPUART1_UART_Init+0x8c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_LPUART1_UART_Init+0x8c>)
 80012c8:	220c      	movs	r2, #12
 80012ca:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_LPUART1_UART_Init+0x8c>)
 80012ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_LPUART1_UART_Init+0x8c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_LPUART1_UART_Init+0x8c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <MX_LPUART1_UART_Init+0x8c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012e6:	4812      	ldr	r0, [pc, #72]	; (8001330 <MX_LPUART1_UART_Init+0x8c>)
 80012e8:	f00b fec6 	bl	800d078 <HAL_UART_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80012f2:	f000 fdeb 	bl	8001ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f6:	2100      	movs	r1, #0
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_LPUART1_UART_Init+0x8c>)
 80012fa:	f00c fb0d 	bl	800d918 <HAL_UARTEx_SetTxFifoThreshold>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001304:	f000 fde2 	bl	8001ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001308:	2100      	movs	r1, #0
 800130a:	4809      	ldr	r0, [pc, #36]	; (8001330 <MX_LPUART1_UART_Init+0x8c>)
 800130c:	f00c fb42 	bl	800d994 <HAL_UARTEx_SetRxFifoThreshold>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001316:	f000 fdd9 	bl	8001ecc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_LPUART1_UART_Init+0x8c>)
 800131c:	f00c fac3 	bl	800d8a6 <HAL_UARTEx_DisableFifoMode>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001326:	f000 fdd1 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200010e0 	.word	0x200010e0
 8001334:	46002400 	.word	0x46002400
 8001338:	00033324 	.word	0x00033324

0800133c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001342:	4a23      	ldr	r2, [pc, #140]	; (80013d0 <MX_USART1_UART_Init+0x94>)
 8001344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800134c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_USART1_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001362:	220c      	movs	r2, #12
 8001364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_USART1_UART_Init+0x90>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_USART1_UART_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001384:	4811      	ldr	r0, [pc, #68]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001386:	f00b fe77 	bl	800d078 <HAL_UART_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001390:	f000 fd9c 	bl	8001ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001394:	2100      	movs	r1, #0
 8001396:	480d      	ldr	r0, [pc, #52]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001398:	f00c fabe 	bl	800d918 <HAL_UARTEx_SetTxFifoThreshold>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013a2:	f000 fd93 	bl	8001ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a6:	2100      	movs	r1, #0
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <MX_USART1_UART_Init+0x90>)
 80013aa:	f00c faf3 	bl	800d994 <HAL_UARTEx_SetRxFifoThreshold>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013b4:	f000 fd8a 	bl	8001ecc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <MX_USART1_UART_Init+0x90>)
 80013ba:	f00c fa74 	bl	800d8a6 <HAL_UARTEx_DisableFifoMode>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013c4:	f000 fd82 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20001174 	.word	0x20001174
 80013d0:	40013800 	.word	0x40013800

080013d4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013d8:	4b22      	ldr	r3, [pc, #136]	; (8001464 <MX_USART6_UART_Init+0x90>)
 80013da:	4a23      	ldr	r2, [pc, #140]	; (8001468 <MX_USART6_UART_Init+0x94>)
 80013dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <MX_USART6_UART_Init+0x90>)
 80013e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <MX_USART6_UART_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <MX_USART6_UART_Init+0x90>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <MX_USART6_UART_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <MX_USART6_UART_Init+0x90>)
 80013fa:	220c      	movs	r2, #12
 80013fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <MX_USART6_UART_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <MX_USART6_UART_Init+0x90>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <MX_USART6_UART_Init+0x90>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_USART6_UART_Init+0x90>)
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <MX_USART6_UART_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800141c:	4811      	ldr	r0, [pc, #68]	; (8001464 <MX_USART6_UART_Init+0x90>)
 800141e:	f00b fe2b 	bl	800d078 <HAL_UART_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001428:	f000 fd50 	bl	8001ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142c:	2100      	movs	r1, #0
 800142e:	480d      	ldr	r0, [pc, #52]	; (8001464 <MX_USART6_UART_Init+0x90>)
 8001430:	f00c fa72 	bl	800d918 <HAL_UARTEx_SetTxFifoThreshold>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800143a:	f000 fd47 	bl	8001ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800143e:	2100      	movs	r1, #0
 8001440:	4808      	ldr	r0, [pc, #32]	; (8001464 <MX_USART6_UART_Init+0x90>)
 8001442:	f00c faa7 	bl	800d994 <HAL_UARTEx_SetRxFifoThreshold>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 800144c:	f000 fd3e 	bl	8001ecc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <MX_USART6_UART_Init+0x90>)
 8001452:	f00c fa28 	bl	800d8a6 <HAL_UARTEx_DisableFifoMode>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800145c:	f000 fd36 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20001208 	.word	0x20001208
 8001468:	40006400 	.word	0x40006400

0800146c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08e      	sub	sp, #56	; 0x38
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2234      	movs	r2, #52	; 0x34
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f00c fb36 	bl	800daea <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <MX_LTDC_Init+0x100>)
 8001480:	4a3b      	ldr	r2, [pc, #236]	; (8001570 <MX_LTDC_Init+0x104>)
 8001482:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8001484:	4b39      	ldr	r3, [pc, #228]	; (800156c <MX_LTDC_Init+0x100>)
 8001486:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800148a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 800148c:	4b37      	ldr	r3, [pc, #220]	; (800156c <MX_LTDC_Init+0x100>)
 800148e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001492:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001494:	4b35      	ldr	r3, [pc, #212]	; (800156c <MX_LTDC_Init+0x100>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800149a:	4b34      	ldr	r3, [pc, #208]	; (800156c <MX_LTDC_Init+0x100>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 80014a0:	4b32      	ldr	r3, [pc, #200]	; (800156c <MX_LTDC_Init+0x100>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 80014a6:	4b31      	ldr	r3, [pc, #196]	; (800156c <MX_LTDC_Init+0x100>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 0;
 80014ac:	4b2f      	ldr	r3, [pc, #188]	; (800156c <MX_LTDC_Init+0x100>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 0;
 80014b2:	4b2e      	ldr	r3, [pc, #184]	; (800156c <MX_LTDC_Init+0x100>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 416;
 80014b8:	4b2c      	ldr	r3, [pc, #176]	; (800156c <MX_LTDC_Init+0x100>)
 80014ba:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80014be:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 416;
 80014c0:	4b2a      	ldr	r3, [pc, #168]	; (800156c <MX_LTDC_Init+0x100>)
 80014c2:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 416;
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <MX_LTDC_Init+0x100>)
 80014ca:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80014ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 416;
 80014d0:	4b26      	ldr	r3, [pc, #152]	; (800156c <MX_LTDC_Init+0x100>)
 80014d2:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80014d6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80014d8:	4b24      	ldr	r3, [pc, #144]	; (800156c <MX_LTDC_Init+0x100>)
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <MX_LTDC_Init+0x100>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80014e8:	4b20      	ldr	r3, [pc, #128]	; (800156c <MX_LTDC_Init+0x100>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80014f0:	481e      	ldr	r0, [pc, #120]	; (800156c <MX_LTDC_Init+0x100>)
 80014f2:	f004 fd15 	bl	8005f20 <HAL_LTDC_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 80014fc:	f000 fce6 	bl	8001ecc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 416;
 8001504:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001508:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 416;
 800150e:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001512:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001518:	23ff      	movs	r3, #255	; 0xff
 800151a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001524:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001526:	2305      	movs	r3, #5
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = GFXMMU_VIRTUAL_BUFFER0_BASE;
 800152a:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 416;
 8001530:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 416;
 8001536:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800153a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_LTDC_Init+0x100>)
 8001556:	f004 fe75 	bl	8006244 <HAL_LTDC_ConfigLayer>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8001560:	f000 fcb4 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	3738      	adds	r7, #56	; 0x38
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2000129c 	.word	0x2000129c
 8001570:	40016800 	.word	0x40016800

08001574 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	; 0x30
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800157a:	f107 0318 	add.w	r3, r7, #24
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]
 800158a:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 800159a:	463b      	mov	r3, r7
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80015a2:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 80015a4:	4a3d      	ldr	r2, [pc, #244]	; (800169c <MX_OCTOSPI1_Init+0x128>)
 80015a6:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80015a8:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80015ae:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 80015b4:	4b38      	ldr	r3, [pc, #224]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 80015b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015ba:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 80015bc:	4b36      	ldr	r3, [pc, #216]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 80015be:	221a      	movs	r2, #26
 80015c0:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80015c2:	4b35      	ldr	r3, [pc, #212]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80015c8:	4b33      	ldr	r3, [pc, #204]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80015ce:	4b32      	ldr	r3, [pc, #200]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_64_BYTES;
 80015d4:	4b30      	ldr	r3, [pc, #192]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 80015d6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015da:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 16;
 80015dc:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 80015de:	2210      	movs	r2, #16
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80015e2:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80015e8:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 80015f6:	2208      	movs	r2, #8
 80015f8:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 16;
 80015fa:	4b27      	ldr	r3, [pc, #156]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 80015fc:	2210      	movs	r2, #16
 80015fe:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 8001602:	2200      	movs	r2, #0
 8001604:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001606:	4824      	ldr	r0, [pc, #144]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 8001608:	f005 f99e 	bl	8006948 <HAL_OSPI_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_OCTOSPI1_Init+0xa2>
  {
    Error_Handler();
 8001612:	f000 fc5b 	bl	8001ecc <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001616:	2301      	movs	r3, #1
 8001618:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 800161a:	2301      	movs	r3, #1
 800161c:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 1;
 800161e:	2301      	movs	r3, #1
 8001620:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001622:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <MX_OCTOSPI1_Init+0x12c>)
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <MX_OCTOSPI1_Init+0x130>)
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 800162a:	2301      	movs	r3, #1
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800162e:	f107 0318 	add.w	r3, r7, #24
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4619      	mov	r1, r3
 8001638:	4817      	ldr	r0, [pc, #92]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 800163a:	f005 fb05 	bl	8006c48 <HAL_OSPIM_Config>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_OCTOSPI1_Init+0xd4>
  {
    Error_Handler();
 8001644:	f000 fc42 	bl	8001ecc <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001650:	2302      	movs	r3, #2
 8001652:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi1, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001660:	4619      	mov	r1, r3
 8001662:	480d      	ldr	r0, [pc, #52]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 8001664:	f005 fa2c 	bl	8006ac0 <HAL_OSPI_HyperbusCfg>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_OCTOSPI1_Init+0xfe>
  {
    Error_Handler();
 800166e:	f000 fc2d 	bl	8001ecc <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 800167a:	463b      	mov	r3, r7
 800167c:	4619      	mov	r1, r3
 800167e:	4806      	ldr	r0, [pc, #24]	; (8001698 <MX_OCTOSPI1_Init+0x124>)
 8001680:	f006 f8ce 	bl	8007820 <HAL_OSPI_DLYB_SetConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_OCTOSPI1_Init+0x11a>
  {
    Error_Handler();
 800168a:	f000 fc1f 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	3730      	adds	r7, #48	; 0x30
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20001344 	.word	0x20001344
 800169c:	420d1400 	.word	0x420d1400
 80016a0:	00010002 	.word	0x00010002
 80016a4:	01000002 	.word	0x01000002

080016a8 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08c      	sub	sp, #48	; 0x30
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80016ae:	f107 0318 	add.w	r3, r7, #24
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]
 80016be:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80016ce:	463b      	mov	r3, r7
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 80016d6:	4b3c      	ldr	r3, [pc, #240]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 80016d8:	4a3c      	ldr	r2, [pc, #240]	; (80017cc <MX_OCTOSPI2_Init+0x124>)
 80016da:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 80016dc:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 80016de:	2201      	movs	r2, #1
 80016e0:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80016e2:	4b39      	ldr	r3, [pc, #228]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 80016e8:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 80016ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016ee:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 80016f0:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 80016f2:	2220      	movs	r2, #32
 80016f4:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 80016f6:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80016fc:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001702:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 8001704:	2200      	movs	r2, #0
 8001706:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001708:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 800170a:	2200      	movs	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 800170e:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 8001710:	2201      	movs	r2, #1
 8001712:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001714:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 8001716:	2200      	movs	r2, #0
 8001718:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800171a:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 800171c:	2200      	movs	r2, #0
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8001720:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 8001722:	2200      	movs	r2, #0
 8001724:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001726:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 8001728:	2208      	movs	r2, #8
 800172a:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.MaxTran = 0;
 800172c:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 800172e:	2200      	movs	r2, #0
 8001730:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.Refresh = 0;
 8001732:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 8001734:	2200      	movs	r2, #0
 8001736:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8001738:	4823      	ldr	r0, [pc, #140]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 800173a:	f005 f905 	bl	8006948 <HAL_OSPI_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_OCTOSPI2_Init+0xa0>
  {
    Error_Handler();
 8001744:	f000 fbc2 	bl	8001ecc <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001748:	2301      	movs	r3, #1
 800174a:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 800174c:	2301      	movs	r3, #1
 800174e:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 2;
 8001750:	2302      	movs	r3, #2
 8001752:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <MX_OCTOSPI2_Init+0x128>)
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <MX_OCTOSPI2_Init+0x12c>)
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 800175c:	2301      	movs	r3, #1
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001760:	f107 0318 	add.w	r3, r7, #24
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4619      	mov	r1, r3
 800176a:	4817      	ldr	r0, [pc, #92]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 800176c:	f005 fa6c 	bl	8006c48 <HAL_OSPIM_Config>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_OCTOSPI2_Init+0xd2>
  {
    Error_Handler();
 8001776:	f000 fba9 	bl	8001ecc <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001782:	2302      	movs	r3, #2
 8001784:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800178a:	f107 0308 	add.w	r3, r7, #8
 800178e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001792:	4619      	mov	r1, r3
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 8001796:	f005 f993 	bl	8006ac0 <HAL_OSPI_HyperbusCfg>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_OCTOSPI2_Init+0xfc>
  {
    Error_Handler();
 80017a0:	f000 fb94 	bl	8001ecc <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_OCTOSPI2_Init+0x120>)
 80017b2:	f006 f835 	bl	8007820 <HAL_OSPI_DLYB_SetConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_OCTOSPI2_Init+0x118>
  {
    Error_Handler();
 80017bc:	f000 fb86 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	3730      	adds	r7, #48	; 0x30
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200013a0 	.word	0x200013a0
 80017cc:	420d2400 	.word	0x420d2400
 80017d0:	00010002 	.word	0x00010002
 80017d4:	01000002 	.word	0x01000002

080017d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08e      	sub	sp, #56	; 0x38
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]
 80017ee:	615a      	str	r2, [r3, #20]
 80017f0:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001806:	4b33      	ldr	r3, [pc, #204]	; (80018d4 <MX_RTC_Init+0xfc>)
 8001808:	4a33      	ldr	r2, [pc, #204]	; (80018d8 <MX_RTC_Init+0x100>)
 800180a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800180c:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <MX_RTC_Init+0xfc>)
 800180e:	2200      	movs	r2, #0
 8001810:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001812:	4b30      	ldr	r3, [pc, #192]	; (80018d4 <MX_RTC_Init+0xfc>)
 8001814:	227f      	movs	r2, #127	; 0x7f
 8001816:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001818:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <MX_RTC_Init+0xfc>)
 800181a:	22ff      	movs	r2, #255	; 0xff
 800181c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800181e:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <MX_RTC_Init+0xfc>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <MX_RTC_Init+0xfc>)
 8001826:	2200      	movs	r2, #0
 8001828:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800182a:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <MX_RTC_Init+0xfc>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001830:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <MX_RTC_Init+0xfc>)
 8001832:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001836:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001838:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <MX_RTC_Init+0xfc>)
 800183a:	2200      	movs	r2, #0
 800183c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800183e:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <MX_RTC_Init+0xfc>)
 8001840:	2200      	movs	r2, #0
 8001842:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001844:	4823      	ldr	r0, [pc, #140]	; (80018d4 <MX_RTC_Init+0xfc>)
 8001846:	f00a fc4d 	bl	800c0e4 <HAL_RTC_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001850:	f000 fb3c 	bl	8001ecc <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001858:	2300      	movs	r3, #0
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800185c:	2300      	movs	r3, #0
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001860:	2300      	movs	r3, #0
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	4619      	mov	r1, r3
 800186a:	481a      	ldr	r0, [pc, #104]	; (80018d4 <MX_RTC_Init+0xfc>)
 800186c:	f00a feaa 	bl	800c5c4 <HAL_RTCEx_PrivilegeModeSet>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001876:	f000 fb29 	bl	8001ecc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800187a:	2300      	movs	r3, #0
 800187c:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 800187e:	2300      	movs	r3, #0
 8001880:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8001882:	2300      	movs	r3, #0
 8001884:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800188e:	f107 0308 	add.w	r3, r7, #8
 8001892:	2201      	movs	r2, #1
 8001894:	4619      	mov	r1, r3
 8001896:	480f      	ldr	r0, [pc, #60]	; (80018d4 <MX_RTC_Init+0xfc>)
 8001898:	f00a fca6 	bl	800c1e8 <HAL_RTC_SetTime>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80018a2:	f000 fb13 	bl	8001ecc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80018a6:	2301      	movs	r3, #1
 80018a8:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80018aa:	2301      	movs	r3, #1
 80018ac:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 80018ae:	2301      	movs	r3, #1
 80018b0:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2201      	movs	r2, #1
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_RTC_Init+0xfc>)
 80018be:	f00a fd2f 	bl	800c320 <HAL_RTC_SetDate>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 80018c8:	f000 fb00 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	3738      	adds	r7, #56	; 0x38
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200013fc 	.word	0x200013fc
 80018d8:	46007800 	.word	0x46007800

080018dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018ec:	4b30      	ldr	r3, [pc, #192]	; (80019b0 <MX_SPI1_Init+0xd4>)
 80018ee:	4a31      	ldr	r2, [pc, #196]	; (80019b4 <MX_SPI1_Init+0xd8>)
 80018f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018f2:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <MX_SPI1_Init+0xd4>)
 80018f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80018f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018fa:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <MX_SPI1_Init+0xd4>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <MX_SPI1_Init+0xd4>)
 8001902:	2203      	movs	r2, #3
 8001904:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <MX_SPI1_Init+0xd4>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <MX_SPI1_Init+0xd4>)
 800190e:	2200      	movs	r2, #0
 8001910:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <MX_SPI1_Init+0xd4>)
 8001914:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001918:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800191a:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <MX_SPI1_Init+0xd4>)
 800191c:	2200      	movs	r2, #0
 800191e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <MX_SPI1_Init+0xd4>)
 8001922:	2200      	movs	r2, #0
 8001924:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001926:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <MX_SPI1_Init+0xd4>)
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800192c:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <MX_SPI1_Init+0xd4>)
 800192e:	2200      	movs	r2, #0
 8001930:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <MX_SPI1_Init+0xd4>)
 8001934:	2207      	movs	r2, #7
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <MX_SPI1_Init+0xd4>)
 800193a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <MX_SPI1_Init+0xd4>)
 8001942:	2200      	movs	r2, #0
 8001944:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <MX_SPI1_Init+0xd4>)
 8001948:	2200      	movs	r2, #0
 800194a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <MX_SPI1_Init+0xd4>)
 800194e:	2200      	movs	r2, #0
 8001950:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <MX_SPI1_Init+0xd4>)
 8001954:	2200      	movs	r2, #0
 8001956:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <MX_SPI1_Init+0xd4>)
 800195a:	2200      	movs	r2, #0
 800195c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800195e:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <MX_SPI1_Init+0xd4>)
 8001960:	2200      	movs	r2, #0
 8001962:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <MX_SPI1_Init+0xd4>)
 8001966:	2200      	movs	r2, #0
 8001968:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_SPI1_Init+0xd4>)
 800196c:	2200      	movs	r2, #0
 800196e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_SPI1_Init+0xd4>)
 8001972:	2200      	movs	r2, #0
 8001974:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001976:	480e      	ldr	r0, [pc, #56]	; (80019b0 <MX_SPI1_Init+0xd4>)
 8001978:	f00a fe52 	bl	800c620 <HAL_SPI_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8001982:	f000 faa3 	bl	8001ecc <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800198a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800198e:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_SPI1_Init+0xd4>)
 800199a:	f00a ff72 	bl	800c882 <HAL_SPIEx_SetConfigAutonomousMode>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 80019a4:	f000 fa92 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	2000142c 	.word	0x2000142c
 80019b4:	40013000 	.word	0x40013000

080019b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b090      	sub	sp, #64	; 0x40
 80019bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	4bbf      	ldr	r3, [pc, #764]	; (8001ccc <MX_GPIO_Init+0x314>)
 80019d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019d4:	4abd      	ldr	r2, [pc, #756]	; (8001ccc <MX_GPIO_Init+0x314>)
 80019d6:	f043 0302 	orr.w	r3, r3, #2
 80019da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019de:	4bbb      	ldr	r3, [pc, #748]	; (8001ccc <MX_GPIO_Init+0x314>)
 80019e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019ec:	4bb7      	ldr	r3, [pc, #732]	; (8001ccc <MX_GPIO_Init+0x314>)
 80019ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019f2:	4ab6      	ldr	r2, [pc, #728]	; (8001ccc <MX_GPIO_Init+0x314>)
 80019f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019fc:	4bb3      	ldr	r3, [pc, #716]	; (8001ccc <MX_GPIO_Init+0x314>)
 80019fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a0a:	4bb0      	ldr	r3, [pc, #704]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a10:	4aae      	ldr	r2, [pc, #696]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001a12:	f043 0308 	orr.w	r3, r3, #8
 8001a16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a1a:	4bac      	ldr	r3, [pc, #688]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	623b      	str	r3, [r7, #32]
 8001a26:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a28:	4ba8      	ldr	r3, [pc, #672]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a2e:	4aa7      	ldr	r2, [pc, #668]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a38:	4ba4      	ldr	r3, [pc, #656]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4ba1      	ldr	r3, [pc, #644]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a4c:	4a9f      	ldr	r2, [pc, #636]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a56:	4b9d      	ldr	r3, [pc, #628]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	61bb      	str	r3, [r7, #24]
 8001a62:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a64:	4b99      	ldr	r3, [pc, #612]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a6a:	4a98      	ldr	r2, [pc, #608]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a70:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a74:	4b95      	ldr	r3, [pc, #596]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a82:	4b92      	ldr	r3, [pc, #584]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a88:	4a90      	ldr	r2, [pc, #576]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a92:	4b8e      	ldr	r3, [pc, #568]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001aa0:	4b8a      	ldr	r3, [pc, #552]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aa6:	4a89      	ldr	r2, [pc, #548]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ab0:	4b86      	ldr	r3, [pc, #536]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001abe:	4b83      	ldr	r3, [pc, #524]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ac4:	4a81      	ldr	r2, [pc, #516]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001ac6:	f043 0320 	orr.w	r3, r3, #32
 8001aca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ace:	4b7f      	ldr	r3, [pc, #508]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001adc:	4b7b      	ldr	r3, [pc, #492]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ae2:	4a7a      	ldr	r2, [pc, #488]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001ae4:	f043 0310 	orr.w	r3, r3, #16
 8001ae8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001aec:	4b77      	ldr	r3, [pc, #476]	; (8001ccc <MX_GPIO_Init+0x314>)
 8001aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, GPIO_PIN_RESET);
 8001afa:	2200      	movs	r2, #0
 8001afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b00:	4873      	ldr	r0, [pc, #460]	; (8001cd0 <MX_GPIO_Init+0x318>)
 8001b02:	f003 fadf 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SDMMC_EN_Pin|LRA_EN_Pin, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001b0c:	4871      	ldr	r0, [pc, #452]	; (8001cd4 <MX_GPIO_Init+0x31c>)
 8001b0e:	f003 fad9 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO3_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	f248 0120 	movw	r1, #32800	; 0x8020
 8001b18:	486f      	ldr	r0, [pc, #444]	; (8001cd8 <MX_GPIO_Init+0x320>)
 8001b1a:	f003 fad3 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GNSS_RST_Pin|TP_RST_Pin|GNSS_WAKEUP_Pin, GPIO_PIN_RESET);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	21c8      	movs	r1, #200	; 0xc8
 8001b22:	486e      	ldr	r0, [pc, #440]	; (8001cdc <MX_GPIO_Init+0x324>)
 8001b24:	f003 face 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_RST_GPIO_Port, FLASH_RST_Pin, GPIO_PIN_RESET);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b2e:	486c      	ldr	r0, [pc, #432]	; (8001ce0 <MX_GPIO_Init+0x328>)
 8001b30:	f003 fac8 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, GPIO_PIN_RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2180      	movs	r1, #128	; 0x80
 8001b38:	486a      	ldr	r0, [pc, #424]	; (8001ce4 <MX_GPIO_Init+0x32c>)
 8001b3a:	f003 fac3 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b44:	4868      	ldr	r0, [pc, #416]	; (8001ce8 <MX_GPIO_Init+0x330>)
 8001b46:	f003 fabd 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPLAY_SWIRE_IN_Pin DISPLAY_SWIRE_OUT_Pin */
  GPIO_InitStruct.Pin = DISPLAY_SWIRE_IN_Pin|DISPLAY_SWIRE_OUT_Pin;
 8001b4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b50:	2300      	movs	r3, #0
 8001b52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	485c      	ldr	r0, [pc, #368]	; (8001cd0 <MX_GPIO_Init+0x318>)
 8001b60:	f003 f8d8 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : AVDDEN_Pin */
  GPIO_InitStruct.Pin = AVDDEN_Pin;
 8001b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(AVDDEN_GPIO_Port, &GPIO_InitStruct);
 8001b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4854      	ldr	r0, [pc, #336]	; (8001cd0 <MX_GPIO_Init+0x318>)
 8001b7e:	f003 f8c9 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_EN_Pin */
  GPIO_InitStruct.Pin = SDMMC_EN_Pin;
 8001b82:	2310      	movs	r3, #16
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b86:	2301      	movs	r3, #1
 8001b88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SDMMC_EN_GPIO_Port, &GPIO_InitStruct);
 8001b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b96:	4619      	mov	r1, r3
 8001b98:	484e      	ldr	r0, [pc, #312]	; (8001cd4 <MX_GPIO_Init+0x31c>)
 8001b9a:	f003 f8bb 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_CD_Pin PWR_INT_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|PWR_INT_Pin;
 8001b9e:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4848      	ldr	r0, [pc, #288]	; (8001cd4 <MX_GPIO_Init+0x31c>)
 8001bb4:	f003 f8ae 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC8 PC11 PC12
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
 8001bb8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001bca:	230c      	movs	r3, #12
 8001bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4845      	ldr	r0, [pc, #276]	; (8001cec <MX_GPIO_Init+0x334>)
 8001bd6:	f003 f89d 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|PWR_ENCHG_Pin;
 8001bda:	f248 0320 	movw	r3, #32800	; 0x8020
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001be4:	2302      	movs	r3, #2
 8001be6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4839      	ldr	r0, [pc, #228]	; (8001cd8 <MX_GPIO_Init+0x320>)
 8001bf4:	f003 f88e 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c04:	2302      	movs	r3, #2
 8001c06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c08:	230c      	movs	r3, #12
 8001c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c10:	4619      	mov	r1, r3
 8001c12:	4830      	ldr	r0, [pc, #192]	; (8001cd4 <MX_GPIO_Init+0x31c>)
 8001c14:	f003 f87e 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001c18:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c2e:	4619      	mov	r1, r3
 8001c30:	482f      	ldr	r0, [pc, #188]	; (8001cf0 <MX_GPIO_Init+0x338>)
 8001c32:	f003 f86f 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT2_Pin */
  GPIO_InitStruct.Pin = BT_INT2_Pin;
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BT_INT2_GPIO_Port, &GPIO_InitStruct);
 8001c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c46:	4619      	mov	r1, r3
 8001c48:	4828      	ldr	r0, [pc, #160]	; (8001cec <MX_GPIO_Init+0x334>)
 8001c4a:	f003 f863 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001c60:	2308      	movs	r3, #8
 8001c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c68:	4619      	mov	r1, r3
 8001c6a:	481b      	ldr	r0, [pc, #108]	; (8001cd8 <MX_GPIO_Init+0x320>)
 8001c6c:	f003 f852 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_Pin GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO1_Pin;
 8001c70:	2303      	movs	r3, #3
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c74:	2300      	movs	r3, #0
 8001c76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c80:	4619      	mov	r1, r3
 8001c82:	4814      	ldr	r0, [pc, #80]	; (8001cd4 <MX_GPIO_Init+0x31c>)
 8001c84:	f003 f846 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT1_Pin */
  GPIO_InitStruct.Pin = BT_INT1_Pin;
 8001c88:	2340      	movs	r3, #64	; 0x40
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <MX_GPIO_Init+0x33c>)
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c90:	2302      	movs	r3, #2
 8001c92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BT_INT1_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4814      	ldr	r0, [pc, #80]	; (8001cec <MX_GPIO_Init+0x334>)
 8001c9c:	f003 f83a 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin|TP_RST_Pin;
 8001ca0:	2388      	movs	r3, #136	; 0x88
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001cb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4809      	ldr	r0, [pc, #36]	; (8001cdc <MX_GPIO_Init+0x324>)
 8001cb8:	f003 f82c 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_PPS_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin;
 8001cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <MX_GPIO_Init+0x33c>)
 8001cc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cca:	e015      	b.n	8001cf8 <MX_GPIO_Init+0x340>
 8001ccc:	46020c00 	.word	0x46020c00
 8001cd0:	42021800 	.word	0x42021800
 8001cd4:	42020c00 	.word	0x42020c00
 8001cd8:	42020400 	.word	0x42020400
 8001cdc:	42022400 	.word	0x42022400
 8001ce0:	42022000 	.word	0x42022000
 8001ce4:	42021400 	.word	0x42021400
 8001ce8:	42021000 	.word	0x42021000
 8001cec:	42020800 	.word	0x42020800
 8001cf0:	42020000 	.word	0x42020000
 8001cf4:	10110000 	.word	0x10110000
  HAL_GPIO_Init(GNSS_PPS_GPIO_Port, &GPIO_InitStruct);
 8001cf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4860      	ldr	r0, [pc, #384]	; (8001e80 <MX_GPIO_Init+0x4c8>)
 8001d00:	f003 f808 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_WAKEUP_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin;
 8001d04:	2340      	movs	r3, #64	; 0x40
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GNSS_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d18:	4619      	mov	r1, r3
 8001d1a:	485a      	ldr	r0, [pc, #360]	; (8001e84 <MX_GPIO_Init+0x4cc>)
 8001d1c:	f002 fffa 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 8001d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d26:	4b58      	ldr	r3, [pc, #352]	; (8001e88 <MX_GPIO_Init+0x4d0>)
 8001d28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8001d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d32:	4619      	mov	r1, r3
 8001d34:	4853      	ldr	r0, [pc, #332]	; (8001e84 <MX_GPIO_Init+0x4cc>)
 8001d36:	f002 ffed 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RST_Pin */
  GPIO_InitStruct.Pin = FLASH_RST_Pin;
 8001d3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d40:	2301      	movs	r3, #1
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d44:	2301      	movs	r3, #1
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FLASH_RST_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d50:	4619      	mov	r1, r3
 8001d52:	484e      	ldr	r0, [pc, #312]	; (8001e8c <MX_GPIO_Init+0x4d4>)
 8001d54:	f002 ffde 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_INT_Pin */
  GPIO_InitStruct.Pin = FLASH_INT_Pin;
 8001d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <MX_GPIO_Init+0x4d0>)
 8001d60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d62:	2301      	movs	r3, #1
 8001d64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(FLASH_INT_GPIO_Port, &GPIO_InitStruct);
 8001d66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4847      	ldr	r0, [pc, #284]	; (8001e8c <MX_GPIO_Init+0x4d4>)
 8001d6e:	f002 ffd1 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RSTO_Pin */
  GPIO_InitStruct.Pin = FLASH_RSTO_Pin;
 8001d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(FLASH_RSTO_GPIO_Port, &GPIO_InitStruct);
 8001d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d84:	4619      	mov	r1, r3
 8001d86:	4841      	ldr	r0, [pc, #260]	; (8001e8c <MX_GPIO_Init+0x4d4>)
 8001d88:	f002 ffc4 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin;
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d90:	2301      	movs	r3, #1
 8001d92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d94:	2301      	movs	r3, #1
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DISPLAY_RST_GPIO_Port, &GPIO_InitStruct);
 8001d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da0:	4619      	mov	r1, r3
 8001da2:	483b      	ldr	r0, [pc, #236]	; (8001e90 <MX_GPIO_Init+0x4d8>)
 8001da4:	f002 ffb6 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALS_INT_Pin */
  GPIO_InitStruct.Pin = ALS_INT_Pin;
 8001da8:	2340      	movs	r3, #64	; 0x40
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dac:	2300      	movs	r3, #0
 8001dae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001db0:	2301      	movs	r3, #1
 8001db2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ALS_INT_GPIO_Port, &GPIO_InitStruct);
 8001db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db8:	4619      	mov	r1, r3
 8001dba:	4835      	ldr	r0, [pc, #212]	; (8001e90 <MX_GPIO_Init+0x4d8>)
 8001dbc:	f002 ffaa 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dc4:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <MX_GPIO_Init+0x4d0>)
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8001dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4830      	ldr	r0, [pc, #192]	; (8001e94 <MX_GPIO_Init+0x4dc>)
 8001dd4:	f002 ff9e 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8001dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dde:	2301      	movs	r3, #1
 8001de0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001de2:	2301      	movs	r3, #1
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dee:	4619      	mov	r1, r3
 8001df0:	4828      	ldr	r0, [pc, #160]	; (8001e94 <MX_GPIO_Init+0x4dc>)
 8001df2:	f002 ff8f 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : HR_INT_Pin */
  GPIO_InitStruct.Pin = HR_INT_Pin;
 8001df6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dfc:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <MX_GPIO_Init+0x4d0>)
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HR_INT_GPIO_Port, &GPIO_InitStruct);
 8001e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4823      	ldr	r0, [pc, #140]	; (8001e98 <MX_GPIO_Init+0x4e0>)
 8001e0c:	f002 ff82 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LRA_EN_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin;
 8001e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e16:	2301      	movs	r3, #1
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LRA_EN_GPIO_Port, &GPIO_InitStruct);
 8001e22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e26:	4619      	mov	r1, r3
 8001e28:	481b      	ldr	r0, [pc, #108]	; (8001e98 <MX_GPIO_Init+0x4e0>)
 8001e2a:	f002 ff73 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_INT_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin;
 8001e2e:	2310      	movs	r3, #16
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <MX_GPIO_Init+0x4d0>)
 8001e34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e36:	2301      	movs	r3, #1
 8001e38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MAG_INT_GPIO_Port, &GPIO_InitStruct);
 8001e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4816      	ldr	r0, [pc, #88]	; (8001e9c <MX_GPIO_Init+0x4e4>)
 8001e42:	f002 ff67 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 8001e46:	2304      	movs	r3, #4
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <MX_GPIO_Init+0x4e8>)
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 8001e52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e56:	4619      	mov	r1, r3
 8001e58:	4812      	ldr	r0, [pc, #72]	; (8001ea4 <MX_GPIO_Init+0x4ec>)
 8001e5a:	f002 ff5b 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin;
 8001e5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e64:	2300      	movs	r3, #0
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IMU_INT2_GPIO_Port, &GPIO_InitStruct);
 8001e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e70:	4619      	mov	r1, r3
 8001e72:	4807      	ldr	r0, [pc, #28]	; (8001e90 <MX_GPIO_Init+0x4d8>)
 8001e74:	f002 ff4e 	bl	8004d14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e78:	bf00      	nop
 8001e7a:	3740      	adds	r7, #64	; 0x40
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	42020000 	.word	0x42020000
 8001e84:	42022400 	.word	0x42022400
 8001e88:	10210000 	.word	0x10210000
 8001e8c:	42022000 	.word	0x42022000
 8001e90:	42021400 	.word	0x42021400
 8001e94:	42021000 	.word	0x42021000
 8001e98:	42020c00 	.word	0x42020c00
 8001e9c:	42020800 	.word	0x42020800
 8001ea0:	10110000 	.word	0x10110000
 8001ea4:	42020400 	.word	0x42020400

08001ea8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001eba:	f001 fa5b 	bl	8003374 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40001000 	.word	0x40001000

08001ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
}
 8001ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <Error_Handler+0x8>
	...

08001ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_MspInit+0x30>)
 8001ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee4:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <HAL_MspInit+0x30>)
 8001ee6:	f043 0304 	orr.w	r3, r3, #4
 8001eea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_MspInit+0x30>)
 8001ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	46020c00 	.word	0x46020c00

08001f0c <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b0c2      	sub	sp, #264	; 0x108
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f1a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	22e0      	movs	r2, #224	; 0xe0
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f00b fdd8 	bl	800daea <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8001f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a2b      	ldr	r2, [pc, #172]	; (8001ff4 <HAL_MDF_MspInit+0xe8>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d14e      	bne.n	8001fea <HAL_MDF_MspInit+0xde>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001f4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f5e:	f107 0310 	add.w	r3, r7, #16
 8001f62:	4618      	mov	r0, r3
 8001f64:	f007 f8b0 	bl	80090c8 <HAL_RCCEx_PeriphCLKConfig>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_MDF_MspInit+0x66>
    {
      Error_Handler();
 8001f6e:	f7ff ffad 	bl	8001ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_MDF_MspInit+0xec>)
 8001f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f78:	4a1f      	ldr	r2, [pc, #124]	; (8001ff8 <HAL_MDF_MspInit+0xec>)
 8001f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_MDF_MspInit+0xec>)
 8001f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_MDF_MspInit+0xec>)
 8001f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f96:	4a18      	ldr	r2, [pc, #96]	; (8001ff8 <HAL_MDF_MspInit+0xec>)
 8001f98:	f043 0310 	orr.w	r3, r3, #16
 8001f9c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_MDF_MspInit+0xec>)
 8001fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fa6:	f003 0210 	and.w	r2, r3, #16
 8001faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fb8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001fbc:	681b      	ldr	r3, [r3, #0]
    /**ADF1 GPIO Configuration
    PE9     ------> ADF1_CCK0
    PE10     ------> ADF1_SDI0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fbe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fde:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4805      	ldr	r0, [pc, #20]	; (8001ffc <HAL_MDF_MspInit+0xf0>)
 8001fe6:	f002 fe95 	bl	8004d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 8001fea:	bf00      	nop
 8001fec:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	46024080 	.word	0x46024080
 8001ff8:	46020c00 	.word	0x46020c00
 8001ffc:	42021000 	.word	0x42021000

08002000 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0b      	ldr	r2, [pc, #44]	; (800203c <HAL_CRC_MspInit+0x3c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d10e      	bne.n	8002030 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_CRC_MspInit+0x40>)
 8002014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002018:	4a09      	ldr	r2, [pc, #36]	; (8002040 <HAL_CRC_MspInit+0x40>)
 800201a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800201e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <HAL_CRC_MspInit+0x40>)
 8002024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	40023000 	.word	0x40023000
 8002040:	46020c00 	.word	0x46020c00

08002044 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a16      	ldr	r2, [pc, #88]	; (80020ac <HAL_DCACHE_MspInit+0x68>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d10f      	bne.n	8002076 <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8002056:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <HAL_DCACHE_MspInit+0x6c>)
 8002058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205c:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <HAL_DCACHE_MspInit+0x6c>)
 800205e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002062:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_DCACHE_MspInit+0x6c>)
 8002068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 8002074:	e013      	b.n	800209e <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a0e      	ldr	r2, [pc, #56]	; (80020b4 <HAL_DCACHE_MspInit+0x70>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d10e      	bne.n	800209e <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_DCACHE_MspInit+0x6c>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <HAL_DCACHE_MspInit+0x6c>)
 8002088:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800208c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002090:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <HAL_DCACHE_MspInit+0x6c>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40031400 	.word	0x40031400
 80020b0:	46020c00 	.word	0x46020c00
 80020b4:	40031800 	.word	0x40031800

080020b8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <HAL_DMA2D_MspInit+0x48>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d116      	bne.n	80020f8 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <HAL_DMA2D_MspInit+0x4c>)
 80020cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d0:	4a0c      	ldr	r2, [pc, #48]	; (8002104 <HAL_DMA2D_MspInit+0x4c>)
 80020d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80020da:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <HAL_DMA2D_MspInit+0x4c>)
 80020dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2100      	movs	r1, #0
 80020ec:	2076      	movs	r0, #118	; 0x76
 80020ee:	f001 fa3d 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80020f2:	2076      	movs	r0, #118	; 0x76
 80020f4:	f001 fa54 	bl	80035a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	4002b000 	.word	0x4002b000
 8002104:	46020c00 	.word	0x46020c00

08002108 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b0c2      	sub	sp, #264	; 0x108
 800210c:	af00      	add	r7, sp, #0
 800210e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002112:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002116:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	22e0      	movs	r2, #224	; 0xe0
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f00b fcda 	bl	800daea <memset>
  if(hdsi->Instance==DSI)
 8002136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800213a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a30      	ldr	r2, [pc, #192]	; (8002204 <HAL_DSI_MspInit+0xfc>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d157      	bne.n	80021f8 <HAL_DSI_MspInit+0xf0>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0304 	mov.w	r3, #4
 8002150:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 8002154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002158:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800215c:	f107 0310 	add.w	r3, r7, #16
 8002160:	4618      	mov	r0, r3
 8002162:	f006 ffb1 	bl	80090c8 <HAL_RCCEx_PeriphCLKConfig>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_DSI_MspInit+0x68>
    {
      Error_Handler();
 800216c:	f7ff feae 	bl	8001ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8002170:	4b25      	ldr	r3, [pc, #148]	; (8002208 <HAL_DSI_MspInit+0x100>)
 8002172:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002176:	4a24      	ldr	r2, [pc, #144]	; (8002208 <HAL_DSI_MspInit+0x100>)
 8002178:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800217c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002180:	4b21      	ldr	r3, [pc, #132]	; (8002208 <HAL_DSI_MspInit+0x100>)
 8002182:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_DSI_MspInit+0x100>)
 8002190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002194:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <HAL_DSI_MspInit+0x100>)
 8002196:	f043 0320 	orr.w	r3, r3, #32
 800219a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <HAL_DSI_MspInit+0x100>)
 80021a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021a4:	f003 0220 	and.w	r2, r3, #32
 80021a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021b6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021ba:	681b      	ldr	r3, [r3, #0]
    DSI_CKN     ------> DSIHOST_CKN
    DSI_D1N     ------> DSIHOST_D1N
    DSI_D1P     ------> DSIHOST_D1P
    PF10     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 80021d6:	230b      	movs	r3, #11
 80021d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021dc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80021e0:	4619      	mov	r1, r3
 80021e2:	480a      	ldr	r0, [pc, #40]	; (800220c <HAL_DSI_MspInit+0x104>)
 80021e4:	f002 fd96 	bl	8004d14 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 80021e8:	2200      	movs	r2, #0
 80021ea:	2100      	movs	r1, #0
 80021ec:	2089      	movs	r0, #137	; 0x89
 80021ee:	f001 f9bd 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80021f2:	2089      	movs	r0, #137	; 0x89
 80021f4:	f001 f9d4 	bl	80035a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80021f8:	bf00      	nop
 80021fa:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40016c00 	.word	0x40016c00
 8002208:	46020c00 	.word	0x46020c00
 800220c:	42021400 	.word	0x42021400

08002210 <HAL_GFXMMU_MspInit>:
* This function configures the hardware resources used in this example
* @param hgfxmmu: GFXMMU handle pointer
* @retval None
*/
void HAL_GFXMMU_MspInit(GFXMMU_HandleTypeDef* hgfxmmu)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if(hgfxmmu->Instance==GFXMMU)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <HAL_GFXMMU_MspInit+0x48>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d116      	bne.n	8002250 <HAL_GFXMMU_MspInit+0x40>
  {
  /* USER CODE BEGIN GFXMMU_MspInit 0 */

  /* USER CODE END GFXMMU_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GFXMMU_CLK_ENABLE();
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <HAL_GFXMMU_MspInit+0x4c>)
 8002224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002228:	4a0c      	ldr	r2, [pc, #48]	; (800225c <HAL_GFXMMU_MspInit+0x4c>)
 800222a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800222e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_GFXMMU_MspInit+0x4c>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]
    /* GFXMMU interrupt Init */
    HAL_NVIC_SetPriority(GFXMMU_IRQn, 0, 0);
 8002240:	2200      	movs	r2, #0
 8002242:	2100      	movs	r1, #0
 8002244:	2086      	movs	r0, #134	; 0x86
 8002246:	f001 f991 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GFXMMU_IRQn);
 800224a:	2086      	movs	r0, #134	; 0x86
 800224c:	f001 f9a8 	bl	80035a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GFXMMU_MspInit 1 */

  /* USER CODE END GFXMMU_MspInit 1 */
  }

}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	4002c000 	.word	0x4002c000
 800225c:	46020c00 	.word	0x46020c00

08002260 <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1a      	ldr	r2, [pc, #104]	; (80022d8 <HAL_GPU2D_MspInit+0x78>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d12d      	bne.n	80022ce <HAL_GPU2D_MspInit+0x6e>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 8002272:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <HAL_GPU2D_MspInit+0x7c>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002278:	4a18      	ldr	r2, [pc, #96]	; (80022dc <HAL_GPU2D_MspInit+0x7c>)
 800227a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800227e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002282:	4b16      	ldr	r3, [pc, #88]	; (80022dc <HAL_GPU2D_MspInit+0x7c>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_GPU2D_MspInit+0x7c>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	4a11      	ldr	r2, [pc, #68]	; (80022dc <HAL_GPU2D_MspInit+0x7c>)
 8002298:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800229c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80022a0:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <HAL_GPU2D_MspInit+0x7c>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 0, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	2084      	movs	r0, #132	; 0x84
 80022b4:	f001 f95a 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 80022b8:	2084      	movs	r0, #132	; 0x84
 80022ba:	f001 f971 	bl	80035a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 0, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2100      	movs	r1, #0
 80022c2:	2085      	movs	r0, #133	; 0x85
 80022c4:	f001 f952 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 80022c8:	2085      	movs	r0, #133	; 0x85
 80022ca:	f001 f969 	bl	80035a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */

  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	4002f000 	.word	0x4002f000
 80022dc:	46020c00 	.word	0x46020c00

080022e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b0cc      	sub	sp, #304	; 0x130
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80022ee:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002300:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002304:	22e0      	movs	r2, #224	; 0xe0
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f00b fbee 	bl	800daea <memset>
  if(hi2c->Instance==I2C1)
 800230e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002312:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4aba      	ldr	r2, [pc, #744]	; (8002604 <HAL_I2C_MspInit+0x324>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d14f      	bne.n	80023c0 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002320:	f04f 0240 	mov.w	r2, #64	; 0x40
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800232c:	2300      	movs	r3, #0
 800232e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002332:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002336:	4618      	mov	r0, r3
 8002338:	f006 fec6 	bl	80090c8 <HAL_RCCEx_PeriphCLKConfig>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8002342:	f7ff fdc3 	bl	8001ecc <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002346:	4bb0      	ldr	r3, [pc, #704]	; (8002608 <HAL_I2C_MspInit+0x328>)
 8002348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800234c:	4aae      	ldr	r2, [pc, #696]	; (8002608 <HAL_I2C_MspInit+0x328>)
 800234e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002352:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002356:	4bac      	ldr	r3, [pc, #688]	; (8002608 <HAL_I2C_MspInit+0x328>)
 8002358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800235c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002360:	637b      	str	r3, [r7, #52]	; 0x34
 8002362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002364:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002368:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800236c:	2312      	movs	r3, #18
 800236e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800237e:	2304      	movs	r3, #4
 8002380:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002384:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002388:	4619      	mov	r1, r3
 800238a:	48a0      	ldr	r0, [pc, #640]	; (800260c <HAL_I2C_MspInit+0x32c>)
 800238c:	f002 fcc2 	bl	8004d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002390:	4b9d      	ldr	r3, [pc, #628]	; (8002608 <HAL_I2C_MspInit+0x328>)
 8002392:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002396:	4a9c      	ldr	r2, [pc, #624]	; (8002608 <HAL_I2C_MspInit+0x328>)
 8002398:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800239c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80023a0:	4b99      	ldr	r3, [pc, #612]	; (8002608 <HAL_I2C_MspInit+0x328>)
 80023a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023a6:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80023aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023ae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023bc:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C6_MspInit 1 */

  /* USER CODE END I2C6_MspInit 1 */
  }

}
 80023be:	e1c0      	b.n	8002742 <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C2)
 80023c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a90      	ldr	r2, [pc, #576]	; (8002610 <HAL_I2C_MspInit+0x330>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d157      	bne.n	8002482 <HAL_I2C_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80023d2:	f04f 0280 	mov.w	r2, #128	; 0x80
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80023de:	2300      	movs	r3, #0
 80023e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023e8:	4618      	mov	r0, r3
 80023ea:	f006 fe6d 	bl	80090c8 <HAL_RCCEx_PeriphCLKConfig>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 80023f4:	f7ff fd6a 	bl	8001ecc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f8:	4b83      	ldr	r3, [pc, #524]	; (8002608 <HAL_I2C_MspInit+0x328>)
 80023fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023fe:	4a82      	ldr	r2, [pc, #520]	; (8002608 <HAL_I2C_MspInit+0x328>)
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002408:	4b7f      	ldr	r3, [pc, #508]	; (8002608 <HAL_I2C_MspInit+0x328>)
 800240a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800240e:	f003 0202 	and.w	r2, r3, #2
 8002412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002416:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002420:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002424:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002426:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800242a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800242e:	2312      	movs	r3, #18
 8002430:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243a:	2300      	movs	r3, #0
 800243c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002440:	2304      	movs	r3, #4
 8002442:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002446:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800244a:	4619      	mov	r1, r3
 800244c:	4871      	ldr	r0, [pc, #452]	; (8002614 <HAL_I2C_MspInit+0x334>)
 800244e:	f002 fc61 	bl	8004d14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002452:	4b6d      	ldr	r3, [pc, #436]	; (8002608 <HAL_I2C_MspInit+0x328>)
 8002454:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002458:	4a6b      	ldr	r2, [pc, #428]	; (8002608 <HAL_I2C_MspInit+0x328>)
 800245a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800245e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002462:	4b69      	ldr	r3, [pc, #420]	; (8002608 <HAL_I2C_MspInit+0x328>)
 8002464:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002468:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800246c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800247a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	e15f      	b.n	8002742 <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C3)
 8002482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002486:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a62      	ldr	r2, [pc, #392]	; (8002618 <HAL_I2C_MspInit+0x338>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d156      	bne.n	8002542 <HAL_I2C_MspInit+0x262>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024aa:	4618      	mov	r0, r3
 80024ac:	f006 fe0c 	bl	80090c8 <HAL_RCCEx_PeriphCLKConfig>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_MspInit+0x1da>
      Error_Handler();
 80024b6:	f7ff fd09 	bl	8001ecc <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ba:	4b53      	ldr	r3, [pc, #332]	; (8002608 <HAL_I2C_MspInit+0x328>)
 80024bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024c0:	4a51      	ldr	r2, [pc, #324]	; (8002608 <HAL_I2C_MspInit+0x328>)
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024ca:	4b4f      	ldr	r3, [pc, #316]	; (8002608 <HAL_I2C_MspInit+0x328>)
 80024cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024d0:	f003 0204 	and.w	r2, r3, #4
 80024d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80024d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80024e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024e6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80024e8:	2303      	movs	r3, #3
 80024ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ee:	2312      	movs	r3, #18
 80024f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002500:	2304      	movs	r3, #4
 8002502:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002506:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800250a:	4619      	mov	r1, r3
 800250c:	4843      	ldr	r0, [pc, #268]	; (800261c <HAL_I2C_MspInit+0x33c>)
 800250e:	f002 fc01 	bl	8004d14 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002512:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <HAL_I2C_MspInit+0x328>)
 8002514:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002518:	4a3b      	ldr	r2, [pc, #236]	; (8002608 <HAL_I2C_MspInit+0x328>)
 800251a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800251e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002522:	4b39      	ldr	r3, [pc, #228]	; (8002608 <HAL_I2C_MspInit+0x328>)
 8002524:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002528:	f003 0280 	and.w	r2, r3, #128	; 0x80
 800252c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002530:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800253a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	e0ff      	b.n	8002742 <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C4)
 8002542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002546:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a34      	ldr	r2, [pc, #208]	; (8002620 <HAL_I2C_MspInit+0x340>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d169      	bne.n	8002628 <HAL_I2C_MspInit+0x348>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002554:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002566:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800256a:	4618      	mov	r0, r3
 800256c:	f006 fdac 	bl	80090c8 <HAL_RCCEx_PeriphCLKConfig>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_I2C_MspInit+0x29a>
      Error_Handler();
 8002576:	f7ff fca9 	bl	8001ecc <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800257a:	4b23      	ldr	r3, [pc, #140]	; (8002608 <HAL_I2C_MspInit+0x328>)
 800257c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002580:	4a21      	ldr	r2, [pc, #132]	; (8002608 <HAL_I2C_MspInit+0x328>)
 8002582:	f043 0308 	orr.w	r3, r3, #8
 8002586:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800258a:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <HAL_I2C_MspInit+0x328>)
 800258c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002590:	f003 0208 	and.w	r2, r3, #8
 8002594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002598:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80025a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025a6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80025a8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80025ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b0:	2312      	movs	r3, #18
 80025b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80025c2:	2304      	movs	r3, #4
 80025c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80025cc:	4619      	mov	r1, r3
 80025ce:	4815      	ldr	r0, [pc, #84]	; (8002624 <HAL_I2C_MspInit+0x344>)
 80025d0:	f002 fba0 	bl	8004d14 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_I2C_MspInit+0x328>)
 80025d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80025da:	4a0b      	ldr	r2, [pc, #44]	; (8002608 <HAL_I2C_MspInit+0x328>)
 80025dc:	f043 0302 	orr.w	r3, r3, #2
 80025e0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <HAL_I2C_MspInit+0x328>)
 80025e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80025ea:	f003 0202 	and.w	r2, r3, #2
 80025ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80025f2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80025fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002600:	681b      	ldr	r3, [r3, #0]
}
 8002602:	e09e      	b.n	8002742 <HAL_I2C_MspInit+0x462>
 8002604:	40005400 	.word	0x40005400
 8002608:	46020c00 	.word	0x46020c00
 800260c:	42021800 	.word	0x42021800
 8002610:	40005800 	.word	0x40005800
 8002614:	42020400 	.word	0x42020400
 8002618:	46002800 	.word	0x46002800
 800261c:	42020800 	.word	0x42020800
 8002620:	40008400 	.word	0x40008400
 8002624:	42020c00 	.word	0x42020c00
  else if(hi2c->Instance==I2C6)
 8002628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800262c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a45      	ldr	r2, [pc, #276]	; (800274c <HAL_I2C_MspInit+0x46c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	f040 8083 	bne.w	8002742 <HAL_I2C_MspInit+0x462>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C6;
 800263c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c6ClockSelection = RCC_I2C6CLKSOURCE_PCLK1;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800264e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002652:	4618      	mov	r0, r3
 8002654:	f006 fd38 	bl	80090c8 <HAL_RCCEx_PeriphCLKConfig>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_MspInit+0x382>
      Error_Handler();
 800265e:	f7ff fc35 	bl	8001ecc <Error_Handler>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002662:	4b3b      	ldr	r3, [pc, #236]	; (8002750 <HAL_I2C_MspInit+0x470>)
 8002664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002668:	4a39      	ldr	r2, [pc, #228]	; (8002750 <HAL_I2C_MspInit+0x470>)
 800266a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800266e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002672:	4b37      	ldr	r3, [pc, #220]	; (8002750 <HAL_I2C_MspInit+0x470>)
 8002674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002678:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800267c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002680:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800268a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800268e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002690:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <HAL_I2C_MspInit+0x470>)
 8002692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002696:	4a2e      	ldr	r2, [pc, #184]	; (8002750 <HAL_I2C_MspInit+0x470>)
 8002698:	f043 0320 	orr.w	r3, r3, #32
 800269c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026a0:	4b2b      	ldr	r3, [pc, #172]	; (8002750 <HAL_I2C_MspInit+0x470>)
 80026a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a6:	f003 0220 	and.w	r2, r3, #32
 80026aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80026ae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80026b8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80026bc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026c6:	2312      	movs	r3, #18
 80026c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 80026d8:	2302      	movs	r3, #2
 80026da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80026de:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80026e2:	4619      	mov	r1, r3
 80026e4:	481b      	ldr	r0, [pc, #108]	; (8002754 <HAL_I2C_MspInit+0x474>)
 80026e6:	f002 fb15 	bl	8004d14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026f0:	2312      	movs	r3, #18
 80026f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 8002702:	2302      	movs	r3, #2
 8002704:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002708:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800270c:	4619      	mov	r1, r3
 800270e:	4812      	ldr	r0, [pc, #72]	; (8002758 <HAL_I2C_MspInit+0x478>)
 8002710:	f002 fb00 	bl	8004d14 <HAL_GPIO_Init>
    __HAL_RCC_I2C6_CLK_ENABLE();
 8002714:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <HAL_I2C_MspInit+0x470>)
 8002716:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800271a:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <HAL_I2C_MspInit+0x470>)
 800271c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002720:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8002724:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <HAL_I2C_MspInit+0x470>)
 8002726:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800272a:	f003 0280 	and.w	r2, r3, #128	; 0x80
 800272e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002732:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800273c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002740:	681b      	ldr	r3, [r3, #0]
}
 8002742:	bf00      	nop
 8002744:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40009c00 	.word	0x40009c00
 8002750:	46020c00 	.word	0x46020c00
 8002754:	42022400 	.word	0x42022400
 8002758:	42021400 	.word	0x42021400

0800275c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b0c8      	sub	sp, #288	; 0x120
 8002760:	af00      	add	r7, sp, #0
 8002762:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002766:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800276a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800277c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002780:	22e0      	movs	r2, #224	; 0xe0
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f00b f9b0 	bl	800daea <memset>
  if(huart->Instance==LPUART1)
 800278a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800278e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4aa1      	ldr	r2, [pc, #644]	; (8002a1c <HAL_UART_MspInit+0x2c0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d17b      	bne.n	8002894 <HAL_UART_MspInit+0x138>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800279c:	f04f 0220 	mov.w	r2, #32
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027b2:	4618      	mov	r0, r3
 80027b4:	f006 fc88 	bl	80090c8 <HAL_RCCEx_PeriphCLKConfig>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80027be:	f7ff fb85 	bl	8001ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80027c2:	4b97      	ldr	r3, [pc, #604]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 80027c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80027c8:	4a95      	ldr	r2, [pc, #596]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 80027ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ce:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80027d2:	4b93      	ldr	r3, [pc, #588]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 80027d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80027d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027e0:	4b8f      	ldr	r3, [pc, #572]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 80027e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027e6:	4a8e      	ldr	r2, [pc, #568]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 80027e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027f0:	4b8b      	ldr	r3, [pc, #556]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 80027f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f6:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80027fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80027fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002808:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800280c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800280e:	4b84      	ldr	r3, [pc, #528]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 8002810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002814:	4a82      	ldr	r2, [pc, #520]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 8002816:	f043 0302 	orr.w	r3, r3, #2
 800281a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800281e:	4b80      	ldr	r3, [pc, #512]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 8002820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002824:	f003 0202 	and.w	r2, r3, #2
 8002828:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800282c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002836:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800283a:	681b      	ldr	r3, [r3, #0]
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    PG5     ------> LPUART1_CTS
    PB1     ------> LPUART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_5;
 800283c:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8002840:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	2300      	movs	r3, #0
 8002852:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002856:	2308      	movs	r3, #8
 8002858:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800285c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002860:	4619      	mov	r1, r3
 8002862:	4870      	ldr	r0, [pc, #448]	; (8002a24 <HAL_UART_MspInit+0x2c8>)
 8002864:	f002 fa56 	bl	8004d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002868:	2302      	movs	r3, #2
 800286a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287a:	2300      	movs	r3, #0
 800287c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002880:	2308      	movs	r3, #8
 8002882:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002886:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800288a:	4619      	mov	r1, r3
 800288c:	4866      	ldr	r0, [pc, #408]	; (8002a28 <HAL_UART_MspInit+0x2cc>)
 800288e:	f002 fa41 	bl	8004d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002892:	e0bd      	b.n	8002a10 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART1)
 8002894:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002898:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a62      	ldr	r2, [pc, #392]	; (8002a2c <HAL_UART_MspInit+0x2d0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d155      	bne.n	8002952 <HAL_UART_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028a6:	f04f 0201 	mov.w	r2, #1
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80028b2:	2300      	movs	r3, #0
 80028b4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028ba:	4618      	mov	r0, r3
 80028bc:	f006 fc04 	bl	80090c8 <HAL_RCCEx_PeriphCLKConfig>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_UART_MspInit+0x16e>
      Error_Handler();
 80028c6:	f7ff fb01 	bl	8001ecc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80028ca:	4b55      	ldr	r3, [pc, #340]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 80028cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028d0:	4a53      	ldr	r2, [pc, #332]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 80028d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80028da:	4b51      	ldr	r3, [pc, #324]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 80028dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028e0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80028e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80028e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80028f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028f6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f8:	4b49      	ldr	r3, [pc, #292]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 80028fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028fe:	4a48      	ldr	r2, [pc, #288]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002908:	4b45      	ldr	r3, [pc, #276]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 800290a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800290e:	f003 0202 	and.w	r2, r3, #2
 8002912:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002916:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002920:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002924:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002926:	23c0      	movs	r3, #192	; 0xc0
 8002928:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800293e:	2307      	movs	r3, #7
 8002940:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002944:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002948:	4619      	mov	r1, r3
 800294a:	4837      	ldr	r0, [pc, #220]	; (8002a28 <HAL_UART_MspInit+0x2cc>)
 800294c:	f002 f9e2 	bl	8004d14 <HAL_GPIO_Init>
}
 8002950:	e05e      	b.n	8002a10 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART6)
 8002952:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002956:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a34      	ldr	r2, [pc, #208]	; (8002a30 <HAL_UART_MspInit+0x2d4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d155      	bne.n	8002a10 <HAL_UART_MspInit+0x2b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002964:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8002970:	2300      	movs	r3, #0
 8002972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800297a:	4618      	mov	r0, r3
 800297c:	f006 fba4 	bl	80090c8 <HAL_RCCEx_PeriphCLKConfig>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_UART_MspInit+0x22e>
      Error_Handler();
 8002986:	f7ff faa1 	bl	8001ecc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800298a:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 800298c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002990:	4a23      	ldr	r2, [pc, #140]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 8002992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002996:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800299a:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 800299c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029a0:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 80029a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80029a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80029b2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80029b6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 80029ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029be:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029c8:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <HAL_UART_MspInit+0x2c4>)
 80029ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ce:	f003 0204 	and.w	r2, r3, #4
 80029d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80029d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80029e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029e4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80029e6:	230c      	movs	r3, #12
 80029e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ec:	2302      	movs	r3, #2
 80029ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80029fe:	2307      	movs	r3, #7
 8002a00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a04:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002a08:	4619      	mov	r1, r3
 8002a0a:	480a      	ldr	r0, [pc, #40]	; (8002a34 <HAL_UART_MspInit+0x2d8>)
 8002a0c:	f002 f982 	bl	8004d14 <HAL_GPIO_Init>
}
 8002a10:	bf00      	nop
 8002a12:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	46002400 	.word	0x46002400
 8002a20:	46020c00 	.word	0x46020c00
 8002a24:	42021800 	.word	0x42021800
 8002a28:	42020400 	.word	0x42020400
 8002a2c:	40013800 	.word	0x40013800
 8002a30:	40006400 	.word	0x40006400
 8002a34:	42020800 	.word	0x42020800

08002a38 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b0bc      	sub	sp, #240	; 0xf0
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a40:	f107 0310 	add.w	r3, r7, #16
 8002a44:	22e0      	movs	r2, #224	; 0xe0
 8002a46:	2100      	movs	r1, #0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f00b f84e 	bl	800daea <memset>
  if(hltdc->Instance==LTDC)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a22      	ldr	r2, [pc, #136]	; (8002adc <HAL_LTDC_MspInit+0xa4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d13d      	bne.n	8002ad4 <HAL_LTDC_MspInit+0x9c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0302 	mov.w	r3, #2
 8002a60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 8002a64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLL2.PLL2M = 1;
 8002a70:	2301      	movs	r3, #1
 8002a72:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLL2.PLL2N = 20;
 8002a74:	2314      	movs	r3, #20
 8002a76:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2P = 2;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLL2.PLL2Q = 2;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLL2.PLL2R = 2;
 8002a80:	2302      	movs	r3, #2
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8002a84:	230c      	movs	r3, #12
 8002a86:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8002a8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a90:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a92:	f107 0310 	add.w	r3, r7, #16
 8002a96:	4618      	mov	r0, r3
 8002a98:	f006 fb16 	bl	80090c8 <HAL_RCCEx_PeriphCLKConfig>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8002aa2:	f7ff fa13 	bl	8001ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <HAL_LTDC_MspInit+0xa8>)
 8002aa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002aac:	4a0c      	ldr	r2, [pc, #48]	; (8002ae0 <HAL_LTDC_MspInit+0xa8>)
 8002aae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ab2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <HAL_LTDC_MspInit+0xa8>)
 8002ab8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002abc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	2087      	movs	r0, #135	; 0x87
 8002aca:	f000 fd4f 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002ace:	2087      	movs	r0, #135	; 0x87
 8002ad0:	f000 fd66 	bl	80035a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002ad4:	bf00      	nop
 8002ad6:	37f0      	adds	r7, #240	; 0xf0
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40016800 	.word	0x40016800
 8002ae0:	46020c00 	.word	0x46020c00

08002ae4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b0ca      	sub	sp, #296	; 0x128
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002aee:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002af2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b08:	22e0      	movs	r2, #224	; 0xe0
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f00a ffec 	bl	800daea <memset>
  if(hospi->Instance==OCTOSPI1)
 8002b12:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002b16:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a93      	ldr	r2, [pc, #588]	; (8002d6c <HAL_OSPI_MspInit+0x288>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	f040 8133 	bne.w	8002d8c <HAL_OSPI_MspInit+0x2a8>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002b26:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f006 fac3 	bl	80090c8 <HAL_RCCEx_PeriphCLKConfig>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8002b48:	f7ff f9c0 	bl	8001ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8002b4c:	4b88      	ldr	r3, [pc, #544]	; (8002d70 <HAL_OSPI_MspInit+0x28c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	3301      	adds	r3, #1
 8002b52:	4a87      	ldr	r2, [pc, #540]	; (8002d70 <HAL_OSPI_MspInit+0x28c>)
 8002b54:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8002b56:	4b86      	ldr	r3, [pc, #536]	; (8002d70 <HAL_OSPI_MspInit+0x28c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d10e      	bne.n	8002b7c <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8002b5e:	4b85      	ldr	r3, [pc, #532]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b64:	4a83      	ldr	r2, [pc, #524]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002b66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b6e:	4b81      	ldr	r3, [pc, #516]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002b7c:	4b7d      	ldr	r3, [pc, #500]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	4a7c      	ldr	r2, [pc, #496]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002b84:	f043 0310 	orr.w	r3, r3, #16
 8002b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b8c:	4b79      	ldr	r3, [pc, #484]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b92:	f003 0210 	and.w	r2, r3, #16
 8002b96:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002b9a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002ba4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ba8:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002baa:	4b72      	ldr	r3, [pc, #456]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bb0:	4a70      	ldr	r2, [pc, #448]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002bba:	4b6e      	ldr	r3, [pc, #440]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc0:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002bc4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002bc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002bd6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bd8:	4b66      	ldr	r3, [pc, #408]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bde:	4a65      	ldr	r2, [pc, #404]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002be8:	4b62      	ldr	r3, [pc, #392]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bee:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002bf2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c04:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c06:	4b5b      	ldr	r3, [pc, #364]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c0c:	4a59      	ldr	r2, [pc, #356]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c16:	4b57      	ldr	r3, [pc, #348]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c1c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002c20:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002c24:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002c2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c32:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c34:	4b4f      	ldr	r3, [pc, #316]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c3a:	4a4e      	ldr	r2, [pc, #312]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c44:	4b4b      	ldr	r3, [pc, #300]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c4a:	f003 0202 	and.w	r2, r3, #2
 8002c4e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002c52:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002c5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c60:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c62:	4b44      	ldr	r3, [pc, #272]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c68:	4a42      	ldr	r2, [pc, #264]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002c6a:	f043 0310 	orr.w	r3, r3, #16
 8002c6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c72:	4b40      	ldr	r3, [pc, #256]	; (8002d74 <HAL_OSPI_MspInit+0x290>)
 8002c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c78:	f003 0210 	and.w	r2, r3, #16
 8002c7c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002c80:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002c8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c8e:	681b      	ldr	r3, [r3, #0]
    PH9     ------> OCTOSPIM_P2_IO4
    PH12     ------> OCTOSPIM_P2_IO7
    PB10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9
 8002c90:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002c94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8002caa:	2305      	movs	r3, #5
 8002cac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cb0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4830      	ldr	r0, [pc, #192]	; (8002d78 <HAL_OSPI_MspInit+0x294>)
 8002cb8:	f002 f82c 	bl	8004d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002cbc:	2340      	movs	r3, #64	; 0x40
 8002cbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cda:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4826      	ldr	r0, [pc, #152]	; (8002d7c <HAL_OSPI_MspInit+0x298>)
 8002ce2:	f002 f817 	bl	8004d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002ce6:	230e      	movs	r3, #14
 8002ce8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPI2;
 8002cfe:	2306      	movs	r3, #6
 8002d00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d04:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002d08:	4619      	mov	r1, r3
 8002d0a:	481d      	ldr	r0, [pc, #116]	; (8002d80 <HAL_OSPI_MspInit+0x29c>)
 8002d0c:	f002 f802 	bl	8004d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 8002d10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d14:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d24:	2303      	movs	r3, #3
 8002d26:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002d2a:	230a      	movs	r3, #10
 8002d2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d30:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002d34:	4619      	mov	r1, r3
 8002d36:	4813      	ldr	r0, [pc, #76]	; (8002d84 <HAL_OSPI_MspInit+0x2a0>)
 8002d38:	f001 ffec 	bl	8004d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d50:	2303      	movs	r3, #3
 8002d52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002d56:	230a      	movs	r3, #10
 8002d58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d5c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002d60:	4619      	mov	r1, r3
 8002d62:	4809      	ldr	r0, [pc, #36]	; (8002d88 <HAL_OSPI_MspInit+0x2a4>)
 8002d64:	f001 ffd6 	bl	8004d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8002d68:	e08f      	b.n	8002e8a <HAL_OSPI_MspInit+0x3a6>
 8002d6a:	bf00      	nop
 8002d6c:	420d1400 	.word	0x420d1400
 8002d70:	200014d4 	.word	0x200014d4
 8002d74:	46020c00 	.word	0x46020c00
 8002d78:	42021c00 	.word	0x42021c00
 8002d7c:	42021800 	.word	0x42021800
 8002d80:	42022000 	.word	0x42022000
 8002d84:	42020400 	.word	0x42020400
 8002d88:	42021000 	.word	0x42021000
  else if(hospi->Instance==OCTOSPI2)
 8002d8c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002d90:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a3e      	ldr	r2, [pc, #248]	; (8002e94 <HAL_OSPI_MspInit+0x3b0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d175      	bne.n	8002e8a <HAL_OSPI_MspInit+0x3a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002d9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002db0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002db4:	4618      	mov	r0, r3
 8002db6:	f006 f987 	bl	80090c8 <HAL_RCCEx_PeriphCLKConfig>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_OSPI_MspInit+0x2e0>
      Error_Handler();
 8002dc0:	f7ff f884 	bl	8001ecc <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8002dc4:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <HAL_OSPI_MspInit+0x3b4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	4a33      	ldr	r2, [pc, #204]	; (8002e98 <HAL_OSPI_MspInit+0x3b4>)
 8002dcc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8002dce:	4b32      	ldr	r3, [pc, #200]	; (8002e98 <HAL_OSPI_MspInit+0x3b4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d116      	bne.n	8002e04 <HAL_OSPI_MspInit+0x320>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8002dd6:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_OSPI_MspInit+0x3b8>)
 8002dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ddc:	4a2f      	ldr	r2, [pc, #188]	; (8002e9c <HAL_OSPI_MspInit+0x3b8>)
 8002dde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002de2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002de6:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <HAL_OSPI_MspInit+0x3b8>)
 8002de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dec:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002df0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002df4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002dfe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e02:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8002e04:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <HAL_OSPI_MspInit+0x3b8>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0a:	4a24      	ldr	r2, [pc, #144]	; (8002e9c <HAL_OSPI_MspInit+0x3b8>)
 8002e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e14:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <HAL_OSPI_MspInit+0x3b8>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002e1e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002e22:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002e2c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e30:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e32:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <HAL_OSPI_MspInit+0x3b8>)
 8002e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e38:	4a18      	ldr	r2, [pc, #96]	; (8002e9c <HAL_OSPI_MspInit+0x3b8>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <HAL_OSPI_MspInit+0x3b8>)
 8002e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e48:	f003 0201 	and.w	r2, r3, #1
 8002e4c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002e50:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002e5a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e5e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e66:	2302      	movs	r3, #2
 8002e68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e72:	2303      	movs	r3, #3
 8002e74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI2;
 8002e78:	230a      	movs	r3, #10
 8002e7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002e82:	4619      	mov	r1, r3
 8002e84:	4806      	ldr	r0, [pc, #24]	; (8002ea0 <HAL_OSPI_MspInit+0x3bc>)
 8002e86:	f001 ff45 	bl	8004d14 <HAL_GPIO_Init>
}
 8002e8a:	bf00      	nop
 8002e8c:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	420d2400 	.word	0x420d2400
 8002e98:	200014d4 	.word	0x200014d4
 8002e9c:	46020c00 	.word	0x46020c00
 8002ea0:	42020000 	.word	0x42020000

08002ea4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b0bc      	sub	sp, #240	; 0xf0
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002eac:	f107 0310 	add.w	r3, r7, #16
 8002eb0:	22e0      	movs	r2, #224	; 0xe0
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f00a fe18 	bl	800daea <memset>
  if(hrtc->Instance==RTC)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1d      	ldr	r2, [pc, #116]	; (8002f34 <HAL_RTC_MspInit+0x90>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d132      	bne.n	8002f2a <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ec4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ed8:	f107 0310 	add.w	r3, r7, #16
 8002edc:	4618      	mov	r0, r3
 8002ede:	f006 f8f3 	bl	80090c8 <HAL_RCCEx_PeriphCLKConfig>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002ee8:	f7fe fff0 	bl	8001ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_RTC_MspInit+0x94>)
 8002eee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ef2:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <HAL_RTC_MspInit+0x94>)
 8002ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <HAL_RTC_MspInit+0x94>)
 8002efe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f02:	4a0d      	ldr	r2, [pc, #52]	; (8002f38 <HAL_RTC_MspInit+0x94>)
 8002f04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f08:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <HAL_RTC_MspInit+0x94>)
 8002f0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002f1a:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <HAL_RTC_MspInit+0x94>)
 8002f1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f20:	4a05      	ldr	r2, [pc, #20]	; (8002f38 <HAL_RTC_MspInit+0x94>)
 8002f22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f2a:	bf00      	nop
 8002f2c:	37f0      	adds	r7, #240	; 0xf0
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	46007800 	.word	0x46007800
 8002f38:	46020c00 	.word	0x46020c00

08002f3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b0c4      	sub	sp, #272	; 0x110
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f4a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f4c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f5c:	f107 0318 	add.w	r3, r7, #24
 8002f60:	22e0      	movs	r2, #224	; 0xe0
 8002f62:	2100      	movs	r1, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f00a fdc0 	bl	800daea <memset>
  if(hspi->Instance==SPI1)
 8002f6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a41      	ldr	r2, [pc, #260]	; (800307c <HAL_SPI_MspInit+0x140>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d17a      	bne.n	8003072 <HAL_SPI_MspInit+0x136>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002f7c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8002f88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f90:	f107 0318 	add.w	r3, r7, #24
 8002f94:	4618      	mov	r0, r3
 8002f96:	f006 f897 	bl	80090c8 <HAL_RCCEx_PeriphCLKConfig>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8002fa0:	f7fe ff94 	bl	8001ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fa4:	4b36      	ldr	r3, [pc, #216]	; (8003080 <HAL_SPI_MspInit+0x144>)
 8002fa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002faa:	4a35      	ldr	r2, [pc, #212]	; (8003080 <HAL_SPI_MspInit+0x144>)
 8002fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fb0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002fb4:	4b32      	ldr	r3, [pc, #200]	; (8003080 <HAL_SPI_MspInit+0x144>)
 8002fb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc2:	4b2f      	ldr	r3, [pc, #188]	; (8003080 <HAL_SPI_MspInit+0x144>)
 8002fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc8:	4a2d      	ldr	r2, [pc, #180]	; (8003080 <HAL_SPI_MspInit+0x144>)
 8002fca:	f043 0302 	orr.w	r3, r3, #2
 8002fce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fd2:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <HAL_SPI_MspInit+0x144>)
 8002fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd8:	f003 0202 	and.w	r2, r3, #2
 8002fdc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002fe0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002fea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002fee:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff0:	4b23      	ldr	r3, [pc, #140]	; (8003080 <HAL_SPI_MspInit+0x144>)
 8002ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff6:	4a22      	ldr	r2, [pc, #136]	; (8003080 <HAL_SPI_MspInit+0x144>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003000:	4b1f      	ldr	r3, [pc, #124]	; (8003080 <HAL_SPI_MspInit+0x144>)
 8003002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003006:	f003 0201 	and.w	r2, r3, #1
 800300a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800300e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003018:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800301c:	681b      	ldr	r3, [r3, #0]
    PB0     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800301e:	2301      	movs	r3, #1
 8003020:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003024:	2302      	movs	r3, #2
 8003026:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	2300      	movs	r3, #0
 800302c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003030:	2300      	movs	r3, #0
 8003032:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003036:	2305      	movs	r3, #5
 8003038:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003040:	4619      	mov	r1, r3
 8003042:	4810      	ldr	r0, [pc, #64]	; (8003084 <HAL_SPI_MspInit+0x148>)
 8003044:	f001 fe66 	bl	8004d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 8003048:	23e0      	movs	r3, #224	; 0xe0
 800304a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304e:	2302      	movs	r3, #2
 8003050:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305a:	2300      	movs	r3, #0
 800305c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003060:	2305      	movs	r3, #5
 8003062:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003066:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800306a:	4619      	mov	r1, r3
 800306c:	4806      	ldr	r0, [pc, #24]	; (8003088 <HAL_SPI_MspInit+0x14c>)
 800306e:	f001 fe51 	bl	8004d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003072:	bf00      	nop
 8003074:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40013000 	.word	0x40013000
 8003080:	46020c00 	.word	0x46020c00
 8003084:	42020400 	.word	0x42020400
 8003088:	42020000 	.word	0x42020000

0800308c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08e      	sub	sp, #56	; 0x38
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800309c:	4b2e      	ldr	r3, [pc, #184]	; (8003158 <HAL_InitTick+0xcc>)
 800309e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030a2:	4a2d      	ldr	r2, [pc, #180]	; (8003158 <HAL_InitTick+0xcc>)
 80030a4:	f043 0310 	orr.w	r3, r3, #16
 80030a8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80030ac:	4b2a      	ldr	r3, [pc, #168]	; (8003158 <HAL_InitTick+0xcc>)
 80030ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030ba:	f107 0210 	add.w	r2, r7, #16
 80030be:	f107 0314 	add.w	r3, r7, #20
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f005 ff15 	bl	8008ef4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80030ca:	f005 fed7 	bl	8008e7c <HAL_RCC_GetPCLK1Freq>
 80030ce:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	4a22      	ldr	r2, [pc, #136]	; (800315c <HAL_InitTick+0xd0>)
 80030d4:	fba2 2303 	umull	r2, r3, r2, r3
 80030d8:	0c9b      	lsrs	r3, r3, #18
 80030da:	3b01      	subs	r3, #1
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80030de:	4b20      	ldr	r3, [pc, #128]	; (8003160 <HAL_InitTick+0xd4>)
 80030e0:	4a20      	ldr	r2, [pc, #128]	; (8003164 <HAL_InitTick+0xd8>)
 80030e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80030e4:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <HAL_InitTick+0xd4>)
 80030e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030ea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80030ec:	4a1c      	ldr	r2, [pc, #112]	; (8003160 <HAL_InitTick+0xd4>)
 80030ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80030f2:	4b1b      	ldr	r3, [pc, #108]	; (8003160 <HAL_InitTick+0xd4>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f8:	4b19      	ldr	r3, [pc, #100]	; (8003160 <HAL_InitTick+0xd4>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80030fe:	4818      	ldr	r0, [pc, #96]	; (8003160 <HAL_InitTick+0xd4>)
 8003100:	f009 fc00 	bl	800c904 <HAL_TIM_Base_Init>
 8003104:	4603      	mov	r3, r0
 8003106:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 800310a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800310e:	2b00      	cmp	r3, #0
 8003110:	d118      	bne.n	8003144 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003112:	4813      	ldr	r0, [pc, #76]	; (8003160 <HAL_InitTick+0xd4>)
 8003114:	f009 fc58 	bl	800c9c8 <HAL_TIM_Base_Start_IT>
 8003118:	4603      	mov	r3, r0
 800311a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 800311e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10e      	bne.n	8003144 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b0f      	cmp	r3, #15
 800312a:	d808      	bhi.n	800313e <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800312c:	2200      	movs	r2, #0
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	2031      	movs	r0, #49	; 0x31
 8003132:	f000 fa1b 	bl	800356c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003136:	4a0c      	ldr	r2, [pc, #48]	; (8003168 <HAL_InitTick+0xdc>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	e002      	b.n	8003144 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003144:	2031      	movs	r0, #49	; 0x31
 8003146:	f000 fa2b 	bl	80035a0 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800314a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800314e:	4618      	mov	r0, r3
 8003150:	3738      	adds	r7, #56	; 0x38
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	46020c00 	.word	0x46020c00
 800315c:	431bde83 	.word	0x431bde83
 8003160:	200014d8 	.word	0x200014d8
 8003164:	40001000 	.word	0x40001000
 8003168:	20000d04 	.word	0x20000d04

0800316c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003170:	f005 ff08 	bl	8008f84 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003174:	e7fe      	b.n	8003174 <NMI_Handler+0x8>

08003176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800317a:	e7fe      	b.n	800317a <HardFault_Handler+0x4>

0800317c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003180:	e7fe      	b.n	8003180 <MemManage_Handler+0x4>

08003182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003186:	e7fe      	b.n	8003186 <BusFault_Handler+0x4>

08003188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800318c:	e7fe      	b.n	800318c <UsageFault_Handler+0x4>

0800318e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031aa:	b480      	push	{r7}
 80031ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031cc:	4802      	ldr	r0, [pc, #8]	; (80031d8 <TIM6_IRQHandler+0x10>)
 80031ce:	f009 fc9b 	bl	800cb08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80031d2:	bf00      	nop
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	200014d8 	.word	0x200014d8

080031dc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80031e0:	4802      	ldr	r0, [pc, #8]	; (80031ec <DMA2D_IRQHandler+0x10>)
 80031e2:	f000 fc65 	bl	8003ab0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000e64 	.word	0x20000e64

080031f0 <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 80031f4:	4802      	ldr	r0, [pc, #8]	; (8003200 <GPU2D_IRQHandler+0x10>)
 80031f6:	f001 ffa7 	bl	8005148 <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000f30 	.word	0x20000f30

08003204 <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 8003208:	4802      	ldr	r0, [pc, #8]	; (8003214 <GPU2D_ER_IRQHandler+0x10>)
 800320a:	f001 ffc3 	bl	8005194 <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000f30 	.word	0x20000f30

08003218 <GFXMMU_IRQHandler>:

/**
  * @brief This function handles GFXMMU global interrupt.
  */
void GFXMMU_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GFXMMU_IRQn 0 */

  /* USER CODE END GFXMMU_IRQn 0 */
  HAL_GFXMMU_IRQHandler(&hgfxmmu);
 800321c:	4802      	ldr	r0, [pc, #8]	; (8003228 <GFXMMU_IRQHandler+0x10>)
 800321e:	f001 fd49 	bl	8004cb4 <HAL_GFXMMU_IRQHandler>
  /* USER CODE BEGIN GFXMMU_IRQn 1 */

  /* USER CODE END GFXMMU_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000ee8 	.word	0x20000ee8

0800322c <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003230:	4802      	ldr	r0, [pc, #8]	; (800323c <LTDC_IRQHandler+0x10>)
 8003232:	f002 ff45 	bl	80060c0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	2000129c 	.word	0x2000129c

08003240 <DSI_IRQHandler>:

/**
  * @brief This function handles DSIHOST global interrupt.
  */
void DSI_IRQHandler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8003244:	4802      	ldr	r0, [pc, #8]	; (8003250 <DSI_IRQHandler+0x10>)
 8003246:	f001 f88b 	bl	8004360 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20000ec4 	.word	0x20000ec4

08003254 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003258:	4b18      	ldr	r3, [pc, #96]	; (80032bc <SystemInit+0x68>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	4a17      	ldr	r2, [pc, #92]	; (80032bc <SystemInit+0x68>)
 8003260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8003268:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <SystemInit+0x6c>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800326e:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <SystemInit+0x6c>)
 8003270:	2200      	movs	r2, #0
 8003272:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003274:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <SystemInit+0x6c>)
 8003276:	2200      	movs	r2, #0
 8003278:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800327a:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <SystemInit+0x6c>)
 800327c:	2200      	movs	r2, #0
 800327e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8003280:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <SystemInit+0x6c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a0e      	ldr	r2, [pc, #56]	; (80032c0 <SystemInit+0x6c>)
 8003286:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800328a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800328e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <SystemInit+0x6c>)
 8003292:	2200      	movs	r2, #0
 8003294:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003296:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <SystemInit+0x6c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <SystemInit+0x6c>)
 800329c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80032a2:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <SystemInit+0x6c>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032a8:	4b04      	ldr	r3, [pc, #16]	; (80032bc <SystemInit+0x68>)
 80032aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032ae:	609a      	str	r2, [r3, #8]
  #endif
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	e000ed00 	.word	0xe000ed00
 80032c0:	46020c00 	.word	0x46020c00

080032c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80032c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032fc <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80032c8:	f7ff ffc4 	bl	8003254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80032cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80032ce:	e003      	b.n	80032d8 <LoopCopyDataInit>

080032d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80032d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80032d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80032d6:	3104      	adds	r1, #4

080032d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80032d8:	480a      	ldr	r0, [pc, #40]	; (8003304 <LoopForever+0xa>)
	ldr	r3, =_edata
 80032da:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <LoopForever+0xe>)
	adds	r2, r0, r1
 80032dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80032de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80032e0:	d3f6      	bcc.n	80032d0 <CopyDataInit>
	ldr	r2, =_sbss
 80032e2:	4a0a      	ldr	r2, [pc, #40]	; (800330c <LoopForever+0x12>)
	b	LoopFillZerobss
 80032e4:	e002      	b.n	80032ec <LoopFillZerobss>

080032e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80032e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80032e8:	f842 3b04 	str.w	r3, [r2], #4

080032ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80032ec:	4b08      	ldr	r3, [pc, #32]	; (8003310 <LoopForever+0x16>)
	cmp	r2, r3
 80032ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80032f0:	d3f9      	bcc.n	80032e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032f2:	f00a fc03 	bl	800dafc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032f6:	f7fd fb49 	bl	800098c <main>

080032fa <LoopForever>:

LoopForever:
    b LoopForever
 80032fa:	e7fe      	b.n	80032fa <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80032fc:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8003300:	0800dc6c 	.word	0x0800dc6c
	ldr	r0, =_sdata
 8003304:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003308:	20000d09 	.word	0x20000d09
	ldr	r2, =_sbss
 800330c:	20000d0c 	.word	0x20000d0c
	ldr	r3, = _ebss
 8003310:	2000154c 	.word	0x2000154c

08003314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003314:	e7fe      	b.n	8003314 <ADC1_2_IRQHandler>
	...

08003318 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800331c:	4b11      	ldr	r3, [pc, #68]	; (8003364 <HAL_Init+0x4c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a10      	ldr	r2, [pc, #64]	; (8003364 <HAL_Init+0x4c>)
 8003322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003326:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003328:	2003      	movs	r0, #3
 800332a:	f000 f914 	bl	8003556 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800332e:	f005 fc89 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 8003332:	4602      	mov	r2, r0
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <HAL_Init+0x50>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	490b      	ldr	r1, [pc, #44]	; (800336c <HAL_Init+0x54>)
 800333e:	5ccb      	ldrb	r3, [r1, r3]
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
 8003344:	4a0a      	ldr	r2, [pc, #40]	; (8003370 <HAL_Init+0x58>)
 8003346:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003348:	200f      	movs	r0, #15
 800334a:	f7ff fe9f 	bl	800308c <HAL_InitTick>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e002      	b.n	800335e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003358:	f7fe fdbe 	bl	8001ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40022000 	.word	0x40022000
 8003368:	46020c00 	.word	0x46020c00
 800336c:	0800db5c 	.word	0x0800db5c
 8003370:	20000d00 	.word	0x20000d00

08003374 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_IncTick+0x20>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_IncTick+0x24>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4413      	add	r3, r2
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <HAL_IncTick+0x24>)
 8003386:	6013      	str	r3, [r2, #0]
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000d08 	.word	0x20000d08
 8003398:	20001524 	.word	0x20001524

0800339c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return uwTick;
 80033a0:	4b03      	ldr	r3, [pc, #12]	; (80033b0 <HAL_GetTick+0x14>)
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20001524 	.word	0x20001524

080033b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033bc:	f7ff ffee 	bl	800339c <HAL_GetTick>
 80033c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d005      	beq.n	80033da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <HAL_Delay+0x44>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4413      	add	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033da:	bf00      	nop
 80033dc:	f7ff ffde 	bl	800339c <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d8f7      	bhi.n	80033dc <HAL_Delay+0x28>
  {
  }
}
 80033ec:	bf00      	nop
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000d08 	.word	0x20000d08

080033fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800340c:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <__NVIC_SetPriorityGrouping+0x44>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003418:	4013      	ands	r3, r2
 800341a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800342c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800342e:	4a04      	ldr	r2, [pc, #16]	; (8003440 <__NVIC_SetPriorityGrouping+0x44>)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	60d3      	str	r3, [r2, #12]
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003448:	4b04      	ldr	r3, [pc, #16]	; (800345c <__NVIC_GetPriorityGrouping+0x18>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	0a1b      	lsrs	r3, r3, #8
 800344e:	f003 0307 	and.w	r3, r3, #7
}
 8003452:	4618      	mov	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800346a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800346e:	2b00      	cmp	r3, #0
 8003470:	db0b      	blt.n	800348a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	f003 021f 	and.w	r2, r3, #31
 8003478:	4907      	ldr	r1, [pc, #28]	; (8003498 <__NVIC_EnableIRQ+0x38>)
 800347a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	2001      	movs	r0, #1
 8003482:	fa00 f202 	lsl.w	r2, r0, r2
 8003486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	e000e100 	.word	0xe000e100

0800349c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	6039      	str	r1, [r7, #0]
 80034a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	db0a      	blt.n	80034c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	490c      	ldr	r1, [pc, #48]	; (80034e8 <__NVIC_SetPriority+0x4c>)
 80034b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ba:	0112      	lsls	r2, r2, #4
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	440b      	add	r3, r1
 80034c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034c4:	e00a      	b.n	80034dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	4908      	ldr	r1, [pc, #32]	; (80034ec <__NVIC_SetPriority+0x50>)
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	3b04      	subs	r3, #4
 80034d4:	0112      	lsls	r2, r2, #4
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	440b      	add	r3, r1
 80034da:	761a      	strb	r2, [r3, #24]
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000e100 	.word	0xe000e100
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b089      	sub	sp, #36	; 0x24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f1c3 0307 	rsb	r3, r3, #7
 800350a:	2b04      	cmp	r3, #4
 800350c:	bf28      	it	cs
 800350e:	2304      	movcs	r3, #4
 8003510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3304      	adds	r3, #4
 8003516:	2b06      	cmp	r3, #6
 8003518:	d902      	bls.n	8003520 <NVIC_EncodePriority+0x30>
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3b03      	subs	r3, #3
 800351e:	e000      	b.n	8003522 <NVIC_EncodePriority+0x32>
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003524:	f04f 32ff 	mov.w	r2, #4294967295
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43da      	mvns	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	401a      	ands	r2, r3
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003538:	f04f 31ff 	mov.w	r1, #4294967295
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	fa01 f303 	lsl.w	r3, r1, r3
 8003542:	43d9      	mvns	r1, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	4313      	orrs	r3, r2
         );
}
 800354a:	4618      	mov	r0, r3
 800354c:	3724      	adds	r7, #36	; 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff ff4c 	bl	80033fc <__NVIC_SetPriorityGrouping>
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800357a:	f7ff ff63 	bl	8003444 <__NVIC_GetPriorityGrouping>
 800357e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	6978      	ldr	r0, [r7, #20]
 8003586:	f7ff ffb3 	bl	80034f0 <NVIC_EncodePriority>
 800358a:	4602      	mov	r2, r0
 800358c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003590:	4611      	mov	r1, r2
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff ff82 	bl	800349c <__NVIC_SetPriority>
}
 8003598:	bf00      	nop
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff ff56 	bl	8003460 <__NVIC_EnableIRQ>
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e054      	b.n	8003678 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7f5b      	ldrb	r3, [r3, #29]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fe fd0e 	bl	8002000 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	791b      	ldrb	r3, [r3, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10c      	bne.n	800360c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a22      	ldr	r2, [pc, #136]	; (8003680 <HAL_CRC_Init+0xc4>)
 80035f8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0218 	bic.w	r2, r2, #24
 8003608:	609a      	str	r2, [r3, #8]
 800360a:	e00c      	b.n	8003626 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6899      	ldr	r1, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	461a      	mov	r2, r3
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f834 	bl	8003684 <HAL_CRCEx_Polynomial_Set>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e028      	b.n	8003678 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	795b      	ldrb	r3, [r3, #5]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d105      	bne.n	800363a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f04f 32ff 	mov.w	r2, #4294967295
 8003636:	611a      	str	r2, [r3, #16]
 8003638:	e004      	b.n	8003644 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6912      	ldr	r2, [r2, #16]
 8003642:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699a      	ldr	r2, [r3, #24]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	04c11db7 	.word	0x04c11db7

08003684 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003694:	231f      	movs	r3, #31
 8003696:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d102      	bne.n	80036a8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	75fb      	strb	r3, [r7, #23]
 80036a6:	e063      	b.n	8003770 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80036a8:	bf00      	nop
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1e5a      	subs	r2, r3, #1
 80036ae:	613a      	str	r2, [r7, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d009      	beq.n	80036c8 <HAL_CRCEx_Polynomial_Set+0x44>
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b18      	cmp	r3, #24
 80036cc:	d846      	bhi.n	800375c <HAL_CRCEx_Polynomial_Set+0xd8>
 80036ce:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80036d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d4:	08003763 	.word	0x08003763
 80036d8:	0800375d 	.word	0x0800375d
 80036dc:	0800375d 	.word	0x0800375d
 80036e0:	0800375d 	.word	0x0800375d
 80036e4:	0800375d 	.word	0x0800375d
 80036e8:	0800375d 	.word	0x0800375d
 80036ec:	0800375d 	.word	0x0800375d
 80036f0:	0800375d 	.word	0x0800375d
 80036f4:	08003751 	.word	0x08003751
 80036f8:	0800375d 	.word	0x0800375d
 80036fc:	0800375d 	.word	0x0800375d
 8003700:	0800375d 	.word	0x0800375d
 8003704:	0800375d 	.word	0x0800375d
 8003708:	0800375d 	.word	0x0800375d
 800370c:	0800375d 	.word	0x0800375d
 8003710:	0800375d 	.word	0x0800375d
 8003714:	08003745 	.word	0x08003745
 8003718:	0800375d 	.word	0x0800375d
 800371c:	0800375d 	.word	0x0800375d
 8003720:	0800375d 	.word	0x0800375d
 8003724:	0800375d 	.word	0x0800375d
 8003728:	0800375d 	.word	0x0800375d
 800372c:	0800375d 	.word	0x0800375d
 8003730:	0800375d 	.word	0x0800375d
 8003734:	08003739 	.word	0x08003739
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b06      	cmp	r3, #6
 800373c:	d913      	bls.n	8003766 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003742:	e010      	b.n	8003766 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	2b07      	cmp	r3, #7
 8003748:	d90f      	bls.n	800376a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800374e:	e00c      	b.n	800376a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b0f      	cmp	r3, #15
 8003754:	d90b      	bls.n	800376e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800375a:	e008      	b.n	800376e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	75fb      	strb	r3, [r7, #23]
        break;
 8003760:	e006      	b.n	8003770 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003762:	bf00      	nop
 8003764:	e004      	b.n	8003770 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003766:	bf00      	nop
 8003768:	e002      	b.n	8003770 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800376a:	bf00      	nop
 800376c:	e000      	b.n	8003770 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800376e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10d      	bne.n	8003792 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f023 0118 	bic.w	r1, r3, #24
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	430a      	orrs	r2, r1
 8003790:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003792:	7dfb      	ldrb	r3, [r7, #23]
}
 8003794:	4618      	mov	r0, r3
 8003796:	371c      	adds	r7, #28
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e037      	b.n	8003822 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d119      	bne.n	80037f2 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a1a      	ldr	r2, [pc, #104]	; (800382c <HAL_DCACHE_Init+0x8c>)
 80037c2:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a1a      	ldr	r2, [pc, #104]	; (8003830 <HAL_DCACHE_Init+0x90>)
 80037c8:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a19      	ldr	r2, [pc, #100]	; (8003834 <HAL_DCACHE_Init+0x94>)
 80037ce:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a19      	ldr	r2, [pc, #100]	; (8003838 <HAL_DCACHE_Init+0x98>)
 80037d4:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a18      	ldr	r2, [pc, #96]	; (800383c <HAL_DCACHE_Init+0x9c>)
 80037da:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d102      	bne.n	80037ea <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a16      	ldr	r2, [pc, #88]	; (8003840 <HAL_DCACHE_Init+0xa0>)
 80037e8:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f814 	bl	8003844 <HAL_DCACHE_Enable>
 800381c:	4603      	mov	r3, r0
 800381e:	73fb      	strb	r3, [r7, #15]

  return status;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	080038e3 	.word	0x080038e3
 8003830:	08003893 	.word	0x08003893
 8003834:	080038a7 	.word	0x080038a7
 8003838:	080038cf 	.word	0x080038cf
 800383c:	080038bb 	.word	0x080038bb
 8003840:	08002045 	.word	0x08002045

08003844 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e015      	b.n	8003886 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0309 	and.w	r3, r3, #9
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8003868:	2302      	movs	r3, #2
 800386a:	73fb      	strb	r3, [r7, #15]
 800386c:	e00a      	b.n	8003884 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
  }

  return status;
 8003884:	7bfb      	ldrb	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80038fe:	f7ff fd4d 	bl	800339c <HAL_GetTick>
 8003902:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e06b      	b.n	80039e6 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d008      	beq.n	800392c <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e05c      	b.n	80039e6 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0204 	orr.w	r2, r2, #4
 800393a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2205      	movs	r2, #5
 8003940:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003944:	e020      	b.n	8003988 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003946:	f7ff fd29 	bl	800339c <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b05      	cmp	r3, #5
 8003952:	d919      	bls.n	8003988 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003958:	f043 0210 	orr.w	r2, r3, #16
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2203      	movs	r2, #3
 8003964:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003978:	2201      	movs	r2, #1
 800397a:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e02e      	b.n	80039e6 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0d7      	beq.n	8003946 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0202 	orr.w	r2, r2, #2
 80039a4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2204      	movs	r2, #4
 80039aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80039b6:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d0:	2201      	movs	r2, #1
 80039d2:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2200      	movs	r2, #0
 80039da:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e053      	b.n	8003aa8 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d106      	bne.n	8003a1a <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7fe fb4f 	bl	80020b8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6851      	ldr	r1, [r2, #4]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	69d2      	ldr	r2, [r2, #28]
 8003a38:	4311      	orrs	r1, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	430b      	orrs	r3, r1
 8003a40:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a48:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6891      	ldr	r1, [r2, #8]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6992      	ldr	r2, [r2, #24]
 8003a58:	4311      	orrs	r1, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	0c1b      	lsrs	r3, r3, #16
 8003a6a:	041b      	lsls	r3, r3, #16
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	68d1      	ldr	r1, [r2, #12]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	430b      	orrs	r3, r1
 8003a76:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	051a      	lsls	r2, r3, #20
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	055b      	lsls	r3, r3, #21
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d026      	beq.n	8003b20 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d021      	beq.n	8003b20 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aea:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af0:	f043 0201 	orr.w	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2201      	movs	r2, #1
 8003afe:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2204      	movs	r2, #4
 8003b04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d026      	beq.n	8003b78 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d021      	beq.n	8003b78 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b42:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b50:	f043 0202 	orr.w	r2, r3, #2
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d026      	beq.n	8003bd0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d021      	beq.n	8003bd0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b9a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2208      	movs	r2, #8
 8003ba2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba8:	f043 0204 	orr.w	r2, r3, #4
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d013      	beq.n	8003c02 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00e      	beq.n	8003c02 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2204      	movs	r2, #4
 8003bfa:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f853 	bl	8003ca8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d024      	beq.n	8003c56 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01f      	beq.n	8003c56 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c24:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferCpltCallback != NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01f      	beq.n	8003ca0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d01a      	beq.n	8003ca0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c78:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2210      	movs	r2, #16
 8003c80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f80e 	bl	8003cbc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003ca0:	bf00      	nop
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_DMA2D_ConfigLayer+0x20>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e084      	b.n	8003dfa <HAL_DMA2D_ConfigLayer+0x12a>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	4613      	mov	r3, r2
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	3328      	adds	r3, #40	; 0x28
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4413      	add	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	041b      	lsls	r3, r3, #16
 8003d1c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003d24:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003d30:	4b35      	ldr	r3, [pc, #212]	; (8003e08 <HAL_DMA2D_ConfigLayer+0x138>)
 8003d32:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b0a      	cmp	r3, #10
 8003d3a:	d003      	beq.n	8003d44 <HAL_DMA2D_ConfigLayer+0x74>
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b09      	cmp	r3, #9
 8003d42:	d107      	bne.n	8003d54 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	e005      	b.n	8003d60 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	061b      	lsls	r3, r3, #24
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d120      	bne.n	8003da8 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	ea02 0103 	and.w	r1, r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b0a      	cmp	r3, #10
 8003d8e:	d003      	beq.n	8003d98 <HAL_DMA2D_ConfigLayer+0xc8>
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b09      	cmp	r3, #9
 8003d96:	d127      	bne.n	8003de8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003da4:	629a      	str	r2, [r3, #40]	; 0x28
 8003da6:	e01f      	b.n	8003de8 <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	ea02 0103 	and.w	r1, r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b0a      	cmp	r3, #10
 8003dd0:	d003      	beq.n	8003dda <HAL_DMA2D_ConfigLayer+0x10a>
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b09      	cmp	r3, #9
 8003dd8:	d106      	bne.n	8003de8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003de6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	ff33000f 	.word	0xff33000f

08003e0c <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003e24:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	; 0xc04
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	00da      	lsls	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	220e      	movs	r2, #14
 8003e46:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	; 0xc70
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 021f 	bic.w	r2, r2, #31
 8003e5a:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6912      	ldr	r2, [r2, #16]
 8003e66:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	220e      	movs	r2, #14
 8003e70:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	; 0xd08
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 021f 	bic.w	r2, r2, #31
 8003e84:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6912      	ldr	r2, [r2, #16]
 8003e90:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	220e      	movs	r2, #14
 8003e9a:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	; 0xc5c
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003eae:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003ec2:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d007      	beq.n	8003ede <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d003      	beq.n	8003ede <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8003eda:	2b05      	cmp	r3, #5
 8003edc:	d10a      	bne.n	8003ef4 <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8003ef2:	e02c      	b.n	8003f4e <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00b      	beq.n	8003f14 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d007      	beq.n	8003f14 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d003      	beq.n	8003f14 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8003f10:	2b06      	cmp	r3, #6
 8003f12:	d10a      	bne.n	8003f2a <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2210      	movs	r2, #16
 8003f1a:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2210      	movs	r2, #16
 8003f24:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8003f28:	e011      	b.n	8003f4e <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b07      	cmp	r3, #7
 8003f30:	d003      	beq.n	8003f3a <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d109      	bne.n	8003f4e <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	; 0xc60
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 020f 	bic.w	r2, r2, #15
 8003f5e:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	; 0xcf8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 020f 	bic.w	r2, r2, #15
 8003f72:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6952      	ldr	r2, [r2, #20]
 8003f7e:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6952      	ldr	r2, [r2, #20]
 8003f8a:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003fb4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	075a      	lsls	r2, r3, #29
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003fe0:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	031a      	lsls	r2, r3, #12
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	021a      	lsls	r2, r3, #8
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0c3      	b.n	80041bc <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	7e5b      	ldrb	r3, [r3, #25]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d102      	bne.n	8004044 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7fe f862 	bl	8002108 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2203      	movs	r2, #3
 8004048:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800405a:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 800405e:	2002      	movs	r0, #2
 8004060:	f7ff f9a8 	bl	80033b4 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4b54      	ldr	r3, [pc, #336]	; (80041c4 <HAL_DSI_Init+0x1a4>)
 8004072:	400b      	ands	r3, r1
 8004074:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800408c:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004094:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff feb3 	bl	8003e0c <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 80040a6:	6839      	ldr	r1, [r7, #0]
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff ff76 	bl	8003f9a <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80040d6:	2001      	movs	r0, #1
 80040d8:	f7ff f96c 	bl	80033b4 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80040dc:	f7ff f95e 	bl	800339c <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80040e4:	f7ff f95a 	bl	800339c <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	; 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e062      	b.n	80041bc <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80040fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0ee      	beq.n	80040e4 <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0206 	orr.w	r2, r2, #6
 8004116:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0203 	bic.w	r2, r2, #3
 800412a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0201 	orr.w	r2, r2, #1
 8004144:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0203 	bic.w	r2, r2, #3
 8004158:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004180:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6899      	ldr	r1, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2200      	movs	r2, #0
 800419a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	e0000003 	.word	0xe0000003

080041c8 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	7e1b      	ldrb	r3, [r3, #24]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_DSI_ConfigErrorMonitor+0x16>
 80041da:	2302      	movs	r3, #2
 80041dc:	e0ba      	b.n	8004354 <HAL_DSI_ConfigErrorMonitor+0x18c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00b      	beq.n	8004220 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8004218:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800421c:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800423a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d009      	beq.n	800425c <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0201 	orr.w	r2, r2, #1
 8004258:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0202 	orr.w	r2, r2, #2
 8004276:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	2b00      	cmp	r3, #0
 8004282:	d009      	beq.n	8004298 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 020c 	orr.w	r2, r2, #12
 8004294:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0210 	orr.w	r2, r2, #16
 80042b2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0220 	orr.w	r2, r2, #32
 80042d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042ee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d009      	beq.n	8004310 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800430c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004316:	2b00      	cmp	r3, #0
 8004318:	d009      	beq.n	800432e <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800432a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004334:	2b00      	cmp	r3, #0
 8004336:	d009      	beq.n	800434c <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004348:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00f      	beq.n	8004398 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2201      	movs	r2, #1
 800438e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f8b8 	bl	8004508 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00f      	beq.n	80043c8 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2202      	movs	r2, #2
 80043be:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f8aa 	bl	800451c <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8097 	beq.w	8004500 <HAL_DSI_IRQHandler+0x1a0>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043da:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4013      	ands	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80043f2:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	4013      	ands	r3, r2
 8004400:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	f043 0201 	orr.w	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f043 0202 	orr.w	r2, r3, #2
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f043 0204 	orr.w	r2, r3, #4
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	f043 0208 	orr.w	r2, r3, #8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f043 0210 	orr.w	r2, r3, #16
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f043 0220 	orr.w	r2, r3, #32
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0320 	and.w	r3, r3, #32
 800448a:	2b00      	cmp	r3, #0
 800448c:	d005      	beq.n	800449a <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PBU_MASK) != 0U)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_DSI_IRQHandler+0x192>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PBU;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	61da      	str	r2, [r3, #28]
    }
    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_DSI_IRQHandler+0x1a0>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f818 	bl	8004530 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	7e1b      	ldrb	r3, [r3, #24]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_DSI_SetGenericVCID+0x16>
 8004556:	2302      	movs	r3, #2
 8004558:	e019      	b.n	800458e <HAL_DSI_SetGenericVCID+0x4a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6b19      	ldr	r1, [r3, #48]	; 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	7e1b      	ldrb	r3, [r3, #24]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e0c5      	b.n	800473c <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0201 	orr.w	r2, r2, #1
 80045c4:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0203 	bic.w	r2, r2, #3
 80045fc:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68d9      	ldr	r1, [r3, #12]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695a      	ldr	r2, [r3, #20]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0207 	bic.w	r2, r2, #7
 800461e:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6959      	ldr	r1, [r3, #20]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	69da      	ldr	r2, [r3, #28]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	431a      	orrs	r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 020f 	bic.w	r2, r2, #15
 800464c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6919      	ldr	r1, [r3, #16]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 020e 	bic.w	r2, r2, #14
 8004670:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	005a      	lsls	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80046be:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0201 	bic.w	r2, r2, #1
 80046f8:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0202 	orr.w	r2, r2, #2
 8004730:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	7e1b      	ldrb	r3, [r3, #24]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_DSI_ConfigCommand+0x16>
 800475a:	2302      	movs	r3, #2
 800475c:	e049      	b.n	80047f2 <HAL_DSI_ConfigCommand+0xaa>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b24      	ldr	r3, [pc, #144]	; (8004800 <HAL_DSI_ConfigCommand+0xb8>)
 8004770:	400b      	ands	r3, r1
 8004772:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004782:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004788:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800478e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004794:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800479a:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80047a0:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80047a6:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80047ac:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80047b2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80047b8:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80047be:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0202 	bic.w	r2, r2, #2
 80047d6:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	fef080ff 	.word	0xfef080ff

08004804 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	7e1b      	ldrb	r3, [r3, #24]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_DSI_ConfigFlowControl+0x16>
 8004816:	2302      	movs	r3, #2
 8004818:	e016      	b.n	8004848 <HAL_DSI_ConfigFlowControl+0x44>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800482e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	7e1b      	ldrb	r3, [r3, #24]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_DSI_ConfigPhyTimer+0x16>
 8004866:	2302      	movs	r3, #2
 8004868:	e084      	b.n	8004974 <HAL_DSI_ConfigPhyTimer+0x120>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	441a      	add	r2, r3
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695a      	ldr	r2, [r3, #20]
 8004886:	4613      	mov	r3, r2
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	4413      	add	r3, r2
 800488c:	18ca      	adds	r2, r1, r3
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	441a      	add	r2, r3
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4293      	cmp	r3, r2
 80048ac:	bf38      	it	cc
 80048ae:	4613      	movcc	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80048c2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	041a      	lsls	r2, r3, #16
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80048f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	041b      	lsls	r3, r3, #16
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004922:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004926:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	691a      	ldr	r2, [r3, #16]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004950:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	021a      	lsls	r2, r3, #8
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	7e1b      	ldrb	r3, [r3, #24]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_DSI_ConfigHostTimeouts+0x16>
 8004992:	2302      	movs	r3, #2
 8004994:	e0b4      	b.n	8004b00 <HAL_DSI_ConfigHostTimeouts+0x180>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80049aa:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6899      	ldr	r1, [r3, #8]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	021a      	lsls	r2, r3, #8
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	b292      	uxth	r2, r2
 80049cc:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	041a      	lsls	r2, r3, #16
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	0c1b      	lsrs	r3, r3, #16
 80049ee:	041b      	lsls	r3, r3, #16
 80049f0:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	0c1b      	lsrs	r3, r3, #16
 8004a10:	041b      	lsls	r3, r3, #16
 8004a12:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	0c1b      	lsrs	r3, r3, #16
 8004a34:	041b      	lsls	r3, r3, #16
 8004a36:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	0c1b      	lsrs	r3, r3, #16
 8004a5e:	041b      	lsls	r3, r3, #16
 8004a60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	695a      	ldr	r2, [r3, #20]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	0c1b      	lsrs	r3, r3, #16
 8004ab2:	041b      	lsls	r3, r3, #16
 8004ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	0c1b      	lsrs	r3, r3, #16
 8004adc:	041b      	lsls	r3, r3, #16
 8004ade:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6a1a      	ldr	r2, [r3, #32]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_GFXMMU_Init>:
  *         GFXMMU_InitTypeDef structure and initialize the associated handle.
  * @param  hgfxmmu GFXMMU handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GFXMMU_Init(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	73fb      	strb	r3, [r7, #15]

  /* Check GFXMMU handle */
  if (hgfxmmu == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <HAL_GFXMMU_Init+0x18>
  {
    status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	73fb      	strb	r3, [r7, #15]
 8004b22:	e06e      	b.n	8004c02 <HAL_GFXMMU_Init+0xf6>
      hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
    }
    hgfxmmu->MspInitCallback(hgfxmmu);
#else
    /* Call GFXMMU MSP init function */
    HAL_GFXMMU_MspInit(hgfxmmu);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7fd fb73 	bl	8002210 <HAL_GFXMMU_MspInit>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */

    /* Configure GFXMMU_CR register */
    hgfxmmu->Instance->CR = 0U;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
    hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlocksPerLine);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6819      	ldr	r1, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]
#if defined(GFXMMU_CR_CE)
    if (hgfxmmu->Init.CachePrefetch.Activation == ENABLE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	7f1b      	ldrb	r3, [r3, #28]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d12c      	bne.n	8004ba6 <HAL_GFXMMU_Init+0x9a>
    {
      assert_param(IS_GFXMMU_CACHE_LOCK(hgfxmmu->Init.CachePrefetch.CacheLock));
      assert_param(IS_GFXMMU_PREFETCH(hgfxmmu->Init.CachePrefetch.Prefetch));
      assert_param(IS_GFXMMU_OUTTER_BUFFERABILITY(hgfxmmu->Init.CachePrefetch.OutterBufferability));
      assert_param(IS_GFXMMU_OUTTER_CACHABILITY(hgfxmmu->Init.CachePrefetch.OutterCachability));
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a19      	ldr	r1, [r3, #32]
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 8004b5a:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 8004b60:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterCachability);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 8004b66:	430b      	orrs	r3, r1
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b72:	601a      	str	r2, [r3, #0]
      if (hgfxmmu->Init.CachePrefetch.CacheLock == GFXMMU_CACHE_LOCK_ENABLE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7c:	d10b      	bne.n	8004b96 <HAL_GFXMMU_Init+0x8a>
      {
        assert_param(IS_GFXMMU_CACHE_LOCK_BUFFER(hgfxmmu->Init.CachePrefetch.CacheLockBuffer));
        assert_param(IS_GFXMMU_CACHE_FORCE(hgfxmmu->Init.CachePrefetch.CacheForce));
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6819      	ldr	r1, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                  hgfxmmu->Init.CachePrefetch.CacheForce);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	601a      	str	r2, [r3, #0]
      }

      /* Force invalidate cache if cache is enabled */
      hgfxmmu->Instance->CCR |= GFXMMU_CACHE_FORCE_INVALIDATE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0202 	orr.w	r2, r2, #2
 8004ba4:	60da      	str	r2, [r3, #12]
      assert_param(IS_GFXMMU_ADDRESSCACHE_LOCK_BUFFER(hgfxmmu->Init.AddressCache.AddressCacheLockBuffer));
      hgfxmmu->Instance->CR |= GFXMMU_CR_ACE |
                               hgfxmmu->Init.AddressCache.AddressCacheLockBuffer;
    }
#endif /* GFXMMU_CR_ACE */
    if (hgfxmmu->Init.Interrupts.Activation == ENABLE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d108      	bne.n	8004bc2 <HAL_GFXMMU_Init+0xb6>
    {
      assert_param(IS_GFXMMU_INTERRUPTS(hgfxmmu->Init.Interrupts.UsedInterrupts));
      hgfxmmu->Instance->CR |= hgfxmmu->Init.Interrupts.UsedInterrupts;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6819      	ldr	r1, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	601a      	str	r2, [r3, #0]
    }

    /* Configure default value on GFXMMU_DVR register */
    hgfxmmu->Instance->DVR = hgfxmmu->Init.DefaultValue;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6892      	ldr	r2, [r2, #8]
 8004bca:	611a      	str	r2, [r3, #16]

    /* Configure physical buffer addresses on GFXMMU_BxCR registers */
    hgfxmmu->Instance->B0CR = hgfxmmu->Init.Buffers.Buf0Address;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	68d2      	ldr	r2, [r2, #12]
 8004bd4:	621a      	str	r2, [r3, #32]
    hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6912      	ldr	r2, [r2, #16]
 8004bde:	625a      	str	r2, [r3, #36]	; 0x24
    hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6952      	ldr	r2, [r2, #20]
 8004be8:	629a      	str	r2, [r3, #40]	; 0x28
    hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6992      	ldr	r2, [r2, #24]
 8004bf2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Reset GFXMMU error code */
    hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set GFXMMU to ready state */
    hgfxmmu->State = HAL_GFXMMU_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }
  /* Return function status */
  return status;
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_GFXMMU_ConfigLut>:
  */
HAL_StatusTypeDef HAL_GFXMMU_ConfigLut(GFXMMU_HandleTypeDef *hgfxmmu,
                                       uint32_t FirstLine,
                                       uint32_t LinesNumber,
                                       uint32_t Address)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b08b      	sub	sp, #44	; 0x2c
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
  assert_param(IS_GFXMMU_LUT_LINE(FirstLine));
  assert_param(IS_GFXMMU_LUT_LINES_NUMBER(LinesNumber));

  /* Check GFXMMU state and coherent parameters */
  if ((hgfxmmu->State != HAL_GFXMMU_STATE_READY) || ((FirstLine + LinesNumber) > 1024U))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d105      	bne.n	8004c36 <HAL_GFXMMU_ConfigLut+0x2a>
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c34:	d903      	bls.n	8004c3e <HAL_GFXMMU_ConfigLut+0x32>
  {
    status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004c3c:	e032      	b.n	8004ca4 <HAL_GFXMMU_ConfigLut+0x98>
    uint32_t current_line;
    uint32_t lutxl_address;
    uint32_t lutxh_address;

    /* Initialize local variables */
    current_address = Address;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	623b      	str	r3, [r7, #32]
    current_line    = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
    lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
    lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * FirstLine) + 1U]);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	3301      	adds	r3, #1
 8004c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]

    /* Copy LUT from flash to look up RAM */
    while (current_line < LinesNumber)
 8004c6c:	e016      	b.n	8004c9c <HAL_GFXMMU_ConfigLut+0x90>
    {
      *((uint32_t *)lutxl_address) = *((uint32_t *)current_address);
 8004c6e:	6a3a      	ldr	r2, [r7, #32]
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	623b      	str	r3, [r7, #32]
      *((uint32_t *)lutxh_address) = *((uint32_t *)current_address);
 8004c7c:	6a3a      	ldr	r2, [r7, #32]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	6812      	ldr	r2, [r2, #0]
 8004c82:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	3304      	adds	r3, #4
 8004c88:	623b      	str	r3, [r7, #32]
      lutxl_address += 8U;
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	61bb      	str	r3, [r7, #24]
      lutxh_address += 8U;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	3308      	adds	r3, #8
 8004c94:	617b      	str	r3, [r7, #20]
      current_line++;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	61fb      	str	r3, [r7, #28]
    while (current_line < LinesNumber)
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d3e4      	bcc.n	8004c6e <HAL_GFXMMU_ConfigLut+0x62>
    }
  }
  /* Return function status */
  return status;
 8004ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	372c      	adds	r7, #44	; 0x2c
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_GFXMMU_IRQHandler>:
  * @brief  This function handles the GFXMMU interrupts.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
void HAL_GFXMMU_IRQHandler(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t flags, interrupts, error;

  /* Read current flags and interrupts and determine which error occurs */
  flags = hgfxmmu->Instance->SR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	617b      	str	r3, [r7, #20]
  interrupts = (hgfxmmu->Instance->CR & GFXMMU_CR_ITS_MASK);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 031f 	and.w	r3, r3, #31
 8004cce:	613b      	str	r3, [r7, #16]
  error = (flags & interrupts);
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]

  if (error != 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00c      	beq.n	8004cf8 <HAL_GFXMMU_IRQHandler+0x44>
  {
    /* Clear flags on GFXMMU_FCR register */
    hgfxmmu->Instance->FCR = error;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	609a      	str	r2, [r3, #8]

    /* Update GFXMMU error code */
    hgfxmmu->ErrorCode |= error;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Call GFXMMU error callback */
#if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
    hgfxmmu->ErrorCallback(hgfxmmu);
#else
    HAL_GFXMMU_ErrorCallback(hgfxmmu);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f804 	bl	8004d00 <HAL_GFXMMU_ErrorCallback>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
  }
}
 8004cf8:	bf00      	nop
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_GFXMMU_ErrorCallback>:
  * @brief  Error callback.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
__weak void HAL_GFXMMU_ErrorCallback(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(hgfxmmu);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_GFXMMU_ErrorCallback could be implemented in the user file.
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b089      	sub	sp, #36	; 0x24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004d26:	e1ba      	b.n	800509e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	fa01 f303 	lsl.w	r3, r1, r3
 8004d34:	4013      	ands	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 81aa 	beq.w	8005098 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a55      	ldr	r2, [pc, #340]	; (8004e9c <HAL_GPIO_Init+0x188>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d15d      	bne.n	8004e08 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004d52:	2201      	movs	r2, #1
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f003 0201 	and.w	r2, r3, #1
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004d7c:	4a48      	ldr	r2, [pc, #288]	; (8004ea0 <HAL_GPIO_Init+0x18c>)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d84:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004d86:	4a46      	ldr	r2, [pc, #280]	; (8004ea0 <HAL_GPIO_Init+0x18c>)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	08da      	lsrs	r2, r3, #3
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	3208      	adds	r2, #8
 8004d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d9e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	220f      	movs	r2, #15
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43db      	mvns	r3, r3
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	4013      	ands	r3, r2
 8004db4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	220b      	movs	r2, #11
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	08da      	lsrs	r2, r3, #3
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	3208      	adds	r2, #8
 8004dd2:	69f9      	ldr	r1, [r7, #28]
 8004dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	2203      	movs	r2, #3
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	43db      	mvns	r3, r3
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	4013      	ands	r3, r2
 8004dee:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	2202      	movs	r2, #2
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	69fa      	ldr	r2, [r7, #28]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	e067      	b.n	8004ed8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d003      	beq.n	8004e18 <HAL_GPIO_Init+0x104>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b12      	cmp	r3, #18
 8004e16:	d145      	bne.n	8004ea4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	08da      	lsrs	r2, r3, #3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3208      	adds	r2, #8
 8004e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e24:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	220f      	movs	r2, #15
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	43db      	mvns	r3, r3
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f003 020f 	and.w	r2, r3, #15
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	69fa      	ldr	r2, [r7, #28]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	08da      	lsrs	r2, r3, #3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3208      	adds	r2, #8
 8004e5e:	69f9      	ldr	r1, [r7, #28]
 8004e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	2203      	movs	r2, #3
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	43db      	mvns	r3, r3
 8004e76:	69fa      	ldr	r2, [r7, #28]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 0203 	and.w	r2, r3, #3
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	69fa      	ldr	r2, [r7, #28]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	69fa      	ldr	r2, [r7, #28]
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e01e      	b.n	8004ed8 <HAL_GPIO_Init+0x1c4>
 8004e9a:	bf00      	nop
 8004e9c:	46020000 	.word	0x46020000
 8004ea0:	0800dbb4 	.word	0x0800dbb4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	2203      	movs	r2, #3
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 0203 	and.w	r2, r3, #3
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	69fa      	ldr	r2, [r7, #28]
 8004ed6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d00b      	beq.n	8004ef8 <HAL_GPIO_Init+0x1e4>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d007      	beq.n	8004ef8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004eec:	2b11      	cmp	r3, #17
 8004eee:	d003      	beq.n	8004ef8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b12      	cmp	r3, #18
 8004ef6:	d130      	bne.n	8004f5a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	2203      	movs	r2, #3
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	69fa      	ldr	r2, [r7, #28]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	69fa      	ldr	r2, [r7, #28]
 8004f26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004f2e:	2201      	movs	r2, #1
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	43db      	mvns	r3, r3
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	091b      	lsrs	r3, r3, #4
 8004f44:	f003 0201 	and.w	r2, r3, #1
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d017      	beq.n	8004f92 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	43db      	mvns	r3, r3
 8004f74:	69fa      	ldr	r2, [r7, #28]
 8004f76:	4013      	ands	r3, r2
 8004f78:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	69fa      	ldr	r2, [r7, #28]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	69fa      	ldr	r2, [r7, #28]
 8004f90:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d07c      	beq.n	8005098 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004f9e:	4a47      	ldr	r2, [pc, #284]	; (80050bc <HAL_GPIO_Init+0x3a8>)
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	089b      	lsrs	r3, r3, #2
 8004fa4:	3318      	adds	r3, #24
 8004fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004faa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	220f      	movs	r2, #15
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	0a9a      	lsrs	r2, r3, #10
 8004fc6:	4b3e      	ldr	r3, [pc, #248]	; (80050c0 <HAL_GPIO_Init+0x3ac>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	f002 0203 	and.w	r2, r2, #3
 8004fd0:	00d2      	lsls	r2, r2, #3
 8004fd2:	4093      	lsls	r3, r2
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004fda:	4938      	ldr	r1, [pc, #224]	; (80050bc <HAL_GPIO_Init+0x3a8>)
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	089b      	lsrs	r3, r3, #2
 8004fe0:	3318      	adds	r3, #24
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004fe8:	4b34      	ldr	r3, [pc, #208]	; (80050bc <HAL_GPIO_Init+0x3a8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4313      	orrs	r3, r2
 800500a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800500c:	4a2b      	ldr	r2, [pc, #172]	; (80050bc <HAL_GPIO_Init+0x3a8>)
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005012:	4b2a      	ldr	r3, [pc, #168]	; (80050bc <HAL_GPIO_Init+0x3a8>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	43db      	mvns	r3, r3
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	4013      	ands	r3, r2
 8005020:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8005036:	4a21      	ldr	r2, [pc, #132]	; (80050bc <HAL_GPIO_Init+0x3a8>)
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800503c:	4b1f      	ldr	r3, [pc, #124]	; (80050bc <HAL_GPIO_Init+0x3a8>)
 800503e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005042:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	43db      	mvns	r3, r3
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	4013      	ands	r3, r2
 800504c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800505a:	69fa      	ldr	r2, [r7, #28]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8005062:	4a16      	ldr	r2, [pc, #88]	; (80050bc <HAL_GPIO_Init+0x3a8>)
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800506a:	4b14      	ldr	r3, [pc, #80]	; (80050bc <HAL_GPIO_Init+0x3a8>)
 800506c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005070:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	43db      	mvns	r3, r3
 8005076:	69fa      	ldr	r2, [r7, #28]
 8005078:	4013      	ands	r3, r2
 800507a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005090:	4a0a      	ldr	r2, [pc, #40]	; (80050bc <HAL_GPIO_Init+0x3a8>)
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	3301      	adds	r3, #1
 800509c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f47f ae3d 	bne.w	8004d28 <HAL_GPIO_Init+0x14>
  }
}
 80050ae:	bf00      	nop
 80050b0:	bf00      	nop
 80050b2:	3724      	adds	r7, #36	; 0x24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	46022000 	.word	0x46022000
 80050c0:	002f7f7f 	.word	0x002f7f7f

080050c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	807b      	strh	r3, [r7, #2]
 80050d0:	4613      	mov	r3, r2
 80050d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050d4:	787b      	ldrb	r3, [r7, #1]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050da:	887a      	ldrh	r2, [r7, #2]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80050e0:	e002      	b.n	80050e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80050e2:	887a      	ldrh	r2, [r7, #2]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e01c      	b.n	8005140 <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	795b      	ldrb	r3, [r3, #5]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d105      	bne.n	800511a <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fd f8a6 	bl	8002260 <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	791b      	ldrb	r3, [r3, #4]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_GPU2D_Init+0x32>
 8005122:	2302      	movs	r3, #2
 8005124:	e00c      	b.n	8005140 <HAL_GPU2D_Init+0x4c>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	33f8      	adds	r3, #248	; 0xf8
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d013      	beq.n	800518c <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	33f8      	adds	r3, #248	; 0xf8
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f023 0201 	bic.w	r2, r3, #1
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 8005184:	68f9      	ldr	r1, [r7, #12]
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f80f 	bl	80051aa <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 800518c:	bf00      	nop
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f80f 	bl	80051c0 <HAL_GPU2D_ErrorCallback>
}
 80051a2:	bf00      	nop
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_GPU2D_CommandListCpltCallback>:
  *                the configuration information for the GPU2D.
  * @param  CmdListID Command list ID that got completed.
  * @retval None
  */
__weak void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	6039      	str	r1, [r7, #0]
  UNUSED(CmdListID);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_GPU2D_CommandListCpltCallback can be implemented in the user file.
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 80051c8:	e7fe      	b.n	80051c8 <HAL_GPU2D_ErrorCallback+0x8>

080051ca <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b082      	sub	sp, #8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e08d      	b.n	80052f8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d106      	bne.n	80051f6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7fd f875 	bl	80022e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2224      	movs	r2, #36	; 0x24
 80051fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0201 	bic.w	r2, r2, #1
 800520c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800521a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800522a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d107      	bne.n	8005244 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005240:	609a      	str	r2, [r3, #8]
 8005242:	e006      	b.n	8005252 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005250:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d108      	bne.n	800526c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005268:	605a      	str	r2, [r3, #4]
 800526a:	e007      	b.n	800527c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800527a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6812      	ldr	r2, [r2, #0]
 8005286:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800528a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800528e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800529e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69d9      	ldr	r1, [r3, #28]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1a      	ldr	r2, [r3, #32]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0201 	orr.w	r2, r2, #1
 80052d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af02      	add	r7, sp, #8
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	4608      	mov	r0, r1
 800530a:	4611      	mov	r1, r2
 800530c:	461a      	mov	r2, r3
 800530e:	4603      	mov	r3, r0
 8005310:	817b      	strh	r3, [r7, #10]
 8005312:	460b      	mov	r3, r1
 8005314:	813b      	strh	r3, [r7, #8]
 8005316:	4613      	mov	r3, r2
 8005318:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b20      	cmp	r3, #32
 8005324:	f040 80f9 	bne.w	800551a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_I2C_Mem_Write+0x34>
 800532e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005330:	2b00      	cmp	r3, #0
 8005332:	d105      	bne.n	8005340 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800533a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e0ed      	b.n	800551c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_I2C_Mem_Write+0x4e>
 800534a:	2302      	movs	r3, #2
 800534c:	e0e6      	b.n	800551c <HAL_I2C_Mem_Write+0x21c>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005356:	f7fe f821 	bl	800339c <HAL_GetTick>
 800535a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	2319      	movs	r3, #25
 8005362:	2201      	movs	r2, #1
 8005364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 fac3 	bl	80058f4 <I2C_WaitOnFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0d1      	b.n	800551c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2221      	movs	r2, #33	; 0x21
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2240      	movs	r2, #64	; 0x40
 8005384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a3a      	ldr	r2, [r7, #32]
 8005392:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005398:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053a0:	88f8      	ldrh	r0, [r7, #6]
 80053a2:	893a      	ldrh	r2, [r7, #8]
 80053a4:	8979      	ldrh	r1, [r7, #10]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	9301      	str	r3, [sp, #4]
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	4603      	mov	r3, r0
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f9d3 	bl	800575c <I2C_RequestMemoryWrite>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0a9      	b.n	800551c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2bff      	cmp	r3, #255	; 0xff
 80053d0:	d90e      	bls.n	80053f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	22ff      	movs	r2, #255	; 0xff
 80053d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	8979      	ldrh	r1, [r7, #10]
 80053e0:	2300      	movs	r3, #0
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 fc3d 	bl	8005c68 <I2C_TransferConfig>
 80053ee:	e00f      	b.n	8005410 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	8979      	ldrh	r1, [r7, #10]
 8005402:	2300      	movs	r3, #0
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 fc2c 	bl	8005c68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 fabc 	bl	8005992 <I2C_WaitOnTXISFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e07b      	b.n	800551c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	781a      	ldrb	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d034      	beq.n	80054c8 <HAL_I2C_Mem_Write+0x1c8>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005462:	2b00      	cmp	r3, #0
 8005464:	d130      	bne.n	80054c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546c:	2200      	movs	r2, #0
 800546e:	2180      	movs	r1, #128	; 0x80
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fa3f 	bl	80058f4 <I2C_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e04d      	b.n	800551c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005484:	b29b      	uxth	r3, r3
 8005486:	2bff      	cmp	r3, #255	; 0xff
 8005488:	d90e      	bls.n	80054a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	22ff      	movs	r2, #255	; 0xff
 800548e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005494:	b2da      	uxtb	r2, r3
 8005496:	8979      	ldrh	r1, [r7, #10]
 8005498:	2300      	movs	r3, #0
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 fbe1 	bl	8005c68 <I2C_TransferConfig>
 80054a6:	e00f      	b.n	80054c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	8979      	ldrh	r1, [r7, #10]
 80054ba:	2300      	movs	r3, #0
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 fbd0 	bl	8005c68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d19e      	bne.n	8005410 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 faa2 	bl	8005a20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e01a      	b.n	800551c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2220      	movs	r2, #32
 80054ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6859      	ldr	r1, [r3, #4]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <HAL_I2C_Mem_Write+0x224>)
 80054fa:	400b      	ands	r3, r1
 80054fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2220      	movs	r2, #32
 8005502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	e000      	b.n	800551c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800551a:	2302      	movs	r3, #2
  }
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	fe00e800 	.word	0xfe00e800

08005528 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af02      	add	r7, sp, #8
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	4608      	mov	r0, r1
 8005532:	4611      	mov	r1, r2
 8005534:	461a      	mov	r2, r3
 8005536:	4603      	mov	r3, r0
 8005538:	817b      	strh	r3, [r7, #10]
 800553a:	460b      	mov	r3, r1
 800553c:	813b      	strh	r3, [r7, #8]
 800553e:	4613      	mov	r3, r2
 8005540:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b20      	cmp	r3, #32
 800554c:	f040 80fd 	bne.w	800574a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <HAL_I2C_Mem_Read+0x34>
 8005556:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005558:	2b00      	cmp	r3, #0
 800555a:	d105      	bne.n	8005568 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005562:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e0f1      	b.n	800574c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800556e:	2b01      	cmp	r3, #1
 8005570:	d101      	bne.n	8005576 <HAL_I2C_Mem_Read+0x4e>
 8005572:	2302      	movs	r3, #2
 8005574:	e0ea      	b.n	800574c <HAL_I2C_Mem_Read+0x224>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800557e:	f7fd ff0d 	bl	800339c <HAL_GetTick>
 8005582:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	2319      	movs	r3, #25
 800558a:	2201      	movs	r2, #1
 800558c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 f9af 	bl	80058f4 <I2C_WaitOnFlagUntilTimeout>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e0d5      	b.n	800574c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2222      	movs	r2, #34	; 0x22
 80055a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2240      	movs	r2, #64	; 0x40
 80055ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a3a      	ldr	r2, [r7, #32]
 80055ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055c8:	88f8      	ldrh	r0, [r7, #6]
 80055ca:	893a      	ldrh	r2, [r7, #8]
 80055cc:	8979      	ldrh	r1, [r7, #10]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	4603      	mov	r3, r0
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f913 	bl	8005804 <I2C_RequestMemoryRead>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e0ad      	b.n	800574c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2bff      	cmp	r3, #255	; 0xff
 80055f8:	d90e      	bls.n	8005618 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	22ff      	movs	r2, #255	; 0xff
 80055fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005604:	b2da      	uxtb	r2, r3
 8005606:	8979      	ldrh	r1, [r7, #10]
 8005608:	4b52      	ldr	r3, [pc, #328]	; (8005754 <HAL_I2C_Mem_Read+0x22c>)
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 fb29 	bl	8005c68 <I2C_TransferConfig>
 8005616:	e00f      	b.n	8005638 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561c:	b29a      	uxth	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005626:	b2da      	uxtb	r2, r3
 8005628:	8979      	ldrh	r1, [r7, #10]
 800562a:	4b4a      	ldr	r3, [pc, #296]	; (8005754 <HAL_I2C_Mem_Read+0x22c>)
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 fb18 	bl	8005c68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	2200      	movs	r2, #0
 8005640:	2104      	movs	r1, #4
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 f956 	bl	80058f4 <I2C_WaitOnFlagUntilTimeout>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e07c      	b.n	800574c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567a:	b29b      	uxth	r3, r3
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005688:	b29b      	uxth	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d034      	beq.n	80056f8 <HAL_I2C_Mem_Read+0x1d0>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005692:	2b00      	cmp	r3, #0
 8005694:	d130      	bne.n	80056f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	2200      	movs	r2, #0
 800569e:	2180      	movs	r1, #128	; 0x80
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f927 	bl	80058f4 <I2C_WaitOnFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e04d      	b.n	800574c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2bff      	cmp	r3, #255	; 0xff
 80056b8:	d90e      	bls.n	80056d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	22ff      	movs	r2, #255	; 0xff
 80056be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	8979      	ldrh	r1, [r7, #10]
 80056c8:	2300      	movs	r3, #0
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 fac9 	bl	8005c68 <I2C_TransferConfig>
 80056d6:	e00f      	b.n	80056f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	8979      	ldrh	r1, [r7, #10]
 80056ea:	2300      	movs	r3, #0
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 fab8 	bl	8005c68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d19a      	bne.n	8005638 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 f98a 	bl	8005a20 <I2C_WaitOnSTOPFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e01a      	b.n	800574c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2220      	movs	r2, #32
 800571c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6859      	ldr	r1, [r3, #4]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <HAL_I2C_Mem_Read+0x230>)
 800572a:	400b      	ands	r3, r1
 800572c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	e000      	b.n	800574c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800574a:	2302      	movs	r3, #2
  }
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	80002400 	.word	0x80002400
 8005758:	fe00e800 	.word	0xfe00e800

0800575c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af02      	add	r7, sp, #8
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	4608      	mov	r0, r1
 8005766:	4611      	mov	r1, r2
 8005768:	461a      	mov	r2, r3
 800576a:	4603      	mov	r3, r0
 800576c:	817b      	strh	r3, [r7, #10]
 800576e:	460b      	mov	r3, r1
 8005770:	813b      	strh	r3, [r7, #8]
 8005772:	4613      	mov	r3, r2
 8005774:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005776:	88fb      	ldrh	r3, [r7, #6]
 8005778:	b2da      	uxtb	r2, r3
 800577a:	8979      	ldrh	r1, [r7, #10]
 800577c:	4b20      	ldr	r3, [pc, #128]	; (8005800 <I2C_RequestMemoryWrite+0xa4>)
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 fa6f 	bl	8005c68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800578a:	69fa      	ldr	r2, [r7, #28]
 800578c:	69b9      	ldr	r1, [r7, #24]
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f8ff 	bl	8005992 <I2C_WaitOnTXISFlagUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e02c      	b.n	80057f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800579e:	88fb      	ldrh	r3, [r7, #6]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d105      	bne.n	80057b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057a4:	893b      	ldrh	r3, [r7, #8]
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	629a      	str	r2, [r3, #40]	; 0x28
 80057ae:	e015      	b.n	80057dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057b0:	893b      	ldrh	r3, [r7, #8]
 80057b2:	0a1b      	lsrs	r3, r3, #8
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	69b9      	ldr	r1, [r7, #24]
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 f8e5 	bl	8005992 <I2C_WaitOnTXISFlagUntilTimeout>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e012      	b.n	80057f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057d2:	893b      	ldrh	r3, [r7, #8]
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	2200      	movs	r2, #0
 80057e4:	2180      	movs	r1, #128	; 0x80
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f884 	bl	80058f4 <I2C_WaitOnFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e000      	b.n	80057f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	80002000 	.word	0x80002000

08005804 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af02      	add	r7, sp, #8
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	4608      	mov	r0, r1
 800580e:	4611      	mov	r1, r2
 8005810:	461a      	mov	r2, r3
 8005812:	4603      	mov	r3, r0
 8005814:	817b      	strh	r3, [r7, #10]
 8005816:	460b      	mov	r3, r1
 8005818:	813b      	strh	r3, [r7, #8]
 800581a:	4613      	mov	r3, r2
 800581c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800581e:	88fb      	ldrh	r3, [r7, #6]
 8005820:	b2da      	uxtb	r2, r3
 8005822:	8979      	ldrh	r1, [r7, #10]
 8005824:	4b20      	ldr	r3, [pc, #128]	; (80058a8 <I2C_RequestMemoryRead+0xa4>)
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	2300      	movs	r3, #0
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fa1c 	bl	8005c68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005830:	69fa      	ldr	r2, [r7, #28]
 8005832:	69b9      	ldr	r1, [r7, #24]
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f8ac 	bl	8005992 <I2C_WaitOnTXISFlagUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e02c      	b.n	800589e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005844:	88fb      	ldrh	r3, [r7, #6]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d105      	bne.n	8005856 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800584a:	893b      	ldrh	r3, [r7, #8]
 800584c:	b2da      	uxtb	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	629a      	str	r2, [r3, #40]	; 0x28
 8005854:	e015      	b.n	8005882 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005856:	893b      	ldrh	r3, [r7, #8]
 8005858:	0a1b      	lsrs	r3, r3, #8
 800585a:	b29b      	uxth	r3, r3
 800585c:	b2da      	uxtb	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	69b9      	ldr	r1, [r7, #24]
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f892 	bl	8005992 <I2C_WaitOnTXISFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e012      	b.n	800589e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005878:	893b      	ldrh	r3, [r7, #8]
 800587a:	b2da      	uxtb	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	2200      	movs	r2, #0
 800588a:	2140      	movs	r1, #64	; 0x40
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 f831 	bl	80058f4 <I2C_WaitOnFlagUntilTimeout>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e000      	b.n	800589e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	80002000 	.word	0x80002000

080058ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d103      	bne.n	80058ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2200      	movs	r2, #0
 80058c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d007      	beq.n	80058e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	619a      	str	r2, [r3, #24]
  }
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	4613      	mov	r3, r2
 8005902:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005904:	e031      	b.n	800596a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590c:	d02d      	beq.n	800596a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590e:	f7fd fd45 	bl	800339c <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d302      	bcc.n	8005924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d122      	bne.n	800596a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699a      	ldr	r2, [r3, #24]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4013      	ands	r3, r2
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	429a      	cmp	r2, r3
 8005932:	bf0c      	ite	eq
 8005934:	2301      	moveq	r3, #1
 8005936:	2300      	movne	r3, #0
 8005938:	b2db      	uxtb	r3, r3
 800593a:	461a      	mov	r2, r3
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	429a      	cmp	r2, r3
 8005940:	d113      	bne.n	800596a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005946:	f043 0220 	orr.w	r2, r3, #32
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2220      	movs	r2, #32
 8005952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e00f      	b.n	800598a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	699a      	ldr	r2, [r3, #24]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	4013      	ands	r3, r2
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	429a      	cmp	r2, r3
 8005978:	bf0c      	ite	eq
 800597a:	2301      	moveq	r3, #1
 800597c:	2300      	movne	r3, #0
 800597e:	b2db      	uxtb	r3, r3
 8005980:	461a      	mov	r2, r3
 8005982:	79fb      	ldrb	r3, [r7, #7]
 8005984:	429a      	cmp	r2, r3
 8005986:	d0be      	beq.n	8005906 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	60f8      	str	r0, [r7, #12]
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800599e:	e033      	b.n	8005a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 f87f 	bl	8005aa8 <I2C_IsErrorOccurred>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e031      	b.n	8005a18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ba:	d025      	beq.n	8005a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059bc:	f7fd fcee 	bl	800339c <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d302      	bcc.n	80059d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d11a      	bne.n	8005a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d013      	beq.n	8005a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e4:	f043 0220 	orr.w	r2, r3, #32
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e007      	b.n	8005a18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d1c4      	bne.n	80059a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a2c:	e02f      	b.n	8005a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 f838 	bl	8005aa8 <I2C_IsErrorOccurred>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e02d      	b.n	8005a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a42:	f7fd fcab 	bl	800339c <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d302      	bcc.n	8005a58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d11a      	bne.n	8005a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	d013      	beq.n	8005a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6a:	f043 0220 	orr.w	r2, r3, #32
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e007      	b.n	8005a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	f003 0320 	and.w	r3, r3, #32
 8005a98:	2b20      	cmp	r3, #32
 8005a9a:	d1c8      	bne.n	8005a2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08a      	sub	sp, #40	; 0x28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	f003 0310 	and.w	r3, r3, #16
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d068      	beq.n	8005ba6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2210      	movs	r2, #16
 8005ada:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005adc:	e049      	b.n	8005b72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae4:	d045      	beq.n	8005b72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ae6:	f7fd fc59 	bl	800339c <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d302      	bcc.n	8005afc <I2C_IsErrorOccurred+0x54>
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d13a      	bne.n	8005b72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b1e:	d121      	bne.n	8005b64 <I2C_IsErrorOccurred+0xbc>
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b26:	d01d      	beq.n	8005b64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005b28:	7cfb      	ldrb	r3, [r7, #19]
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	d01a      	beq.n	8005b64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005b3e:	f7fd fc2d 	bl	800339c <HAL_GetTick>
 8005b42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b44:	e00e      	b.n	8005b64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b46:	f7fd fc29 	bl	800339c <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b19      	cmp	r3, #25
 8005b52:	d907      	bls.n	8005b64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	f043 0320 	orr.w	r3, r3, #32
 8005b5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005b62:	e006      	b.n	8005b72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d1e9      	bne.n	8005b46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d003      	beq.n	8005b88 <I2C_IsErrorOccurred+0xe0>
 8005b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0aa      	beq.n	8005ade <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d103      	bne.n	8005b98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2220      	movs	r2, #32
 8005b96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	f043 0304 	orr.w	r3, r3, #4
 8005b9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00b      	beq.n	8005bd0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	f043 0301 	orr.w	r3, r3, #1
 8005bbe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00b      	beq.n	8005bf2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f043 0308 	orr.w	r3, r3, #8
 8005be0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00b      	beq.n	8005c14 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	f043 0302 	orr.w	r3, r3, #2
 8005c02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01c      	beq.n	8005c56 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f7ff fe45 	bl	80058ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6859      	ldr	r1, [r3, #4]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <I2C_IsErrorOccurred+0x1bc>)
 8005c2e:	400b      	ands	r3, r1
 8005c30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005c56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3728      	adds	r7, #40	; 0x28
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	fe00e800 	.word	0xfe00e800

08005c68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	607b      	str	r3, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	817b      	strh	r3, [r7, #10]
 8005c76:	4613      	mov	r3, r2
 8005c78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c7a:	897b      	ldrh	r3, [r7, #10]
 8005c7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c80:	7a7b      	ldrb	r3, [r7, #9]
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	0d5b      	lsrs	r3, r3, #21
 8005ca2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005ca6:	4b08      	ldr	r3, [pc, #32]	; (8005cc8 <I2C_TransferConfig+0x60>)
 8005ca8:	430b      	orrs	r3, r1
 8005caa:	43db      	mvns	r3, r3
 8005cac:	ea02 0103 	and.w	r1, r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005cba:	bf00      	nop
 8005cbc:	371c      	adds	r7, #28
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	03ff63ff 	.word	0x03ff63ff

08005ccc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b20      	cmp	r3, #32
 8005ce0:	d138      	bne.n	8005d54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005cec:	2302      	movs	r3, #2
 8005cee:	e032      	b.n	8005d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2224      	movs	r2, #36	; 0x24
 8005cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0201 	bic.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6819      	ldr	r1, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	e000      	b.n	8005d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d54:	2302      	movs	r3, #2
  }
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b20      	cmp	r3, #32
 8005d76:	d139      	bne.n	8005dec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d101      	bne.n	8005d86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d82:	2302      	movs	r3, #2
 8005d84:	e033      	b.n	8005dee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2224      	movs	r2, #36	; 0x24
 8005d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0201 	bic.w	r2, r2, #1
 8005da4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005db4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	021b      	lsls	r3, r3, #8
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	e000      	b.n	8005dee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005dec:	2302      	movs	r3, #2
  }
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
	...

08005dfc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005e00:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <HAL_ICACHE_Enable+0x1c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a04      	ldr	r2, [pc, #16]	; (8005e18 <HAL_ICACHE_Enable+0x1c>)
 8005e06:	f043 0301 	orr.w	r3, r3, #1
 8005e0a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	40030400 	.word	0x40030400

08005e1c <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8005e26:	4b14      	ldr	r3, [pc, #80]	; (8005e78 <HAL_ICACHE_Disable+0x5c>)
 8005e28:	2202      	movs	r2, #2
 8005e2a:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005e2c:	4b12      	ldr	r3, [pc, #72]	; (8005e78 <HAL_ICACHE_Disable+0x5c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a11      	ldr	r2, [pc, #68]	; (8005e78 <HAL_ICACHE_Disable+0x5c>)
 8005e32:	f023 0301 	bic.w	r3, r3, #1
 8005e36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e38:	f7fd fab0 	bl	800339c <HAL_GetTick>
 8005e3c:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005e3e:	e00f      	b.n	8005e60 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8005e40:	f7fd faac 	bl	800339c <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d908      	bls.n	8005e60 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005e4e:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <HAL_ICACHE_Disable+0x5c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	71fb      	strb	r3, [r7, #7]
        break;
 8005e5e:	e005      	b.n	8005e6c <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005e60:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <HAL_ICACHE_Disable+0x5c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e9      	bne.n	8005e40 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8005e6c:	79fb      	ldrb	r3, [r7, #7]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	40030400 	.word	0x40030400

08005e7c <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005e8a:	4b22      	ldr	r3, [pc, #136]	; (8005f14 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	75fb      	strb	r3, [r7, #23]
 8005e9a:	e034      	b.n	8005f06 <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	009a      	lsls	r2, r3, #2
 8005ea0:	4b1d      	ldr	r3, [pc, #116]	; (8005f18 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8005ea2:	4413      	add	r3, r2
 8005ea4:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	75fb      	strb	r3, [r7, #23]
 8005eb6:	e026      	b.n	8005f06 <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	425b      	negs	r3, r3
 8005ed6:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8005ed8:	401a      	ands	r2, r3
 8005eda:	4b10      	ldr	r3, [pc, #64]	; (8005f1c <HAL_ICACHE_EnableRemapRegion+0xa0>)
 8005edc:	4013      	ands	r3, r2
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	025a      	lsls	r2, r3, #9
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	40030400 	.word	0x40030400
 8005f18:	40030420 	.word	0x40030420
 8005f1c:	07ff0000 	.word	0x07ff0000

08005f20 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e0bf      	b.n	80060b2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d106      	bne.n	8005f4c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7fc fd76 	bl	8002a38 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	699a      	ldr	r2, [r3, #24]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005f62:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6999      	ldr	r1, [r3, #24]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f78:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6899      	ldr	r1, [r3, #8]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	4b4a      	ldr	r3, [pc, #296]	; (80060bc <HAL_LTDC_Init+0x19c>)
 8005f94:	400b      	ands	r3, r1
 8005f96:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	041b      	lsls	r3, r3, #16
 8005f9e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6899      	ldr	r1, [r3, #8]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	699a      	ldr	r2, [r3, #24]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68d9      	ldr	r1, [r3, #12]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	4b3e      	ldr	r3, [pc, #248]	; (80060bc <HAL_LTDC_Init+0x19c>)
 8005fc2:	400b      	ands	r3, r1
 8005fc4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	041b      	lsls	r3, r3, #16
 8005fcc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68d9      	ldr	r1, [r3, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a1a      	ldr	r2, [r3, #32]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6919      	ldr	r1, [r3, #16]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	4b33      	ldr	r3, [pc, #204]	; (80060bc <HAL_LTDC_Init+0x19c>)
 8005ff0:	400b      	ands	r3, r1
 8005ff2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	041b      	lsls	r3, r3, #16
 8005ffa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6919      	ldr	r1, [r3, #16]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6959      	ldr	r1, [r3, #20]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	4b27      	ldr	r3, [pc, #156]	; (80060bc <HAL_LTDC_Init+0x19c>)
 800601e:	400b      	ands	r3, r1
 8006020:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	041b      	lsls	r3, r3, #16
 8006028:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6959      	ldr	r1, [r3, #20]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	431a      	orrs	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006046:	021b      	lsls	r3, r3, #8
 8006048:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006050:	041b      	lsls	r3, r3, #16
 8006052:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006062:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4313      	orrs	r3, r2
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0206 	orr.w	r2, r2, #6
 800608e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	f000f800 	.word	0xf000f800

080060c0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d023      	beq.n	800612a <HAL_LTDC_IRQHandler+0x6a>
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d01e      	beq.n	800612a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0204 	bic.w	r2, r2, #4
 80060fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2204      	movs	r2, #4
 8006102:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800610a:	f043 0201 	orr.w	r2, r3, #1
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2204      	movs	r2, #4
 8006118:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f86f 	bl	8006208 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b00      	cmp	r3, #0
 8006132:	d023      	beq.n	800617c <HAL_LTDC_IRQHandler+0xbc>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d01e      	beq.n	800617c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0202 	bic.w	r2, r2, #2
 800614c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2202      	movs	r2, #2
 8006154:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800615c:	f043 0202 	orr.w	r2, r3, #2
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2204      	movs	r2, #4
 800616a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f846 	bl	8006208 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d01b      	beq.n	80061be <HAL_LTDC_IRQHandler+0xfe>
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d016      	beq.n	80061be <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0201 	bic.w	r2, r2, #1
 800619e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2201      	movs	r2, #1
 80061a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f82f 	bl	800621c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01b      	beq.n	8006200 <HAL_LTDC_IRQHandler+0x140>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d016      	beq.n	8006200 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0208 	bic.w	r2, r2, #8
 80061e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2208      	movs	r2, #8
 80061e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f818 	bl	8006230 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006200:	bf00      	nop
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006244:	b5b0      	push	{r4, r5, r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <HAL_LTDC_ConfigLayer+0x1a>
 800625a:	2302      	movs	r3, #2
 800625c:	e02c      	b.n	80062b8 <HAL_LTDC_ConfigLayer+0x74>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2202      	movs	r2, #2
 800626a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2134      	movs	r1, #52	; 0x34
 8006274:	fb01 f303 	mul.w	r3, r1, r3
 8006278:	4413      	add	r3, r2
 800627a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	4614      	mov	r4, r2
 8006282:	461d      	mov	r5, r3
 8006284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800628a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800628c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800628e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	68b9      	ldr	r1, [r7, #8]
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 f811 	bl	80062c0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2201      	movs	r2, #1
 80062a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bdb0      	pop	{r4, r5, r7, pc}

080062c0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b089      	sub	sp, #36	; 0x24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	0c1b      	lsrs	r3, r3, #16
 80062d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062dc:	4413      	add	r3, r2
 80062de:	041b      	lsls	r3, r3, #16
 80062e0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	01db      	lsls	r3, r3, #7
 80062ec:	4413      	add	r3, r2
 80062ee:	3384      	adds	r3, #132	; 0x84
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	6812      	ldr	r2, [r2, #0]
 80062f6:	4611      	mov	r1, r2
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	01d2      	lsls	r2, r2, #7
 80062fc:	440a      	add	r2, r1
 80062fe:	3284      	adds	r2, #132	; 0x84
 8006300:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8006304:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	0c1b      	lsrs	r3, r3, #16
 8006312:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006316:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006318:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4619      	mov	r1, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	01db      	lsls	r3, r3, #7
 8006324:	440b      	add	r3, r1
 8006326:	3384      	adds	r3, #132	; 0x84
 8006328:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800632e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800633e:	4413      	add	r3, r2
 8006340:	041b      	lsls	r3, r3, #16
 8006342:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	461a      	mov	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	01db      	lsls	r3, r3, #7
 800634e:	4413      	add	r3, r2
 8006350:	3384      	adds	r3, #132	; 0x84
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	6812      	ldr	r2, [r2, #0]
 8006358:	4611      	mov	r1, r2
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	01d2      	lsls	r2, r2, #7
 800635e:	440a      	add	r2, r1
 8006360:	3284      	adds	r2, #132	; 0x84
 8006362:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8006366:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006376:	4413      	add	r3, r2
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4619      	mov	r1, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	01db      	lsls	r3, r3, #7
 8006384:	440b      	add	r3, r1
 8006386:	3384      	adds	r3, #132	; 0x84
 8006388:	4619      	mov	r1, r3
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	4313      	orrs	r3, r2
 800638e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	01db      	lsls	r3, r3, #7
 800639a:	4413      	add	r3, r2
 800639c:	3384      	adds	r3, #132	; 0x84
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	6812      	ldr	r2, [r2, #0]
 80063a4:	4611      	mov	r1, r2
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	01d2      	lsls	r2, r2, #7
 80063aa:	440a      	add	r2, r1
 80063ac:	3284      	adds	r2, #132	; 0x84
 80063ae:	f023 0307 	bic.w	r3, r3, #7
 80063b2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	01db      	lsls	r3, r3, #7
 80063be:	4413      	add	r3, r2
 80063c0:	3384      	adds	r3, #132	; 0x84
 80063c2:	461a      	mov	r2, r3
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80063da:	041b      	lsls	r3, r3, #16
 80063dc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	061b      	lsls	r3, r3, #24
 80063e4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	01db      	lsls	r3, r3, #7
 80063f0:	4413      	add	r3, r2
 80063f2:	3384      	adds	r3, #132	; 0x84
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	461a      	mov	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	01db      	lsls	r3, r3, #7
 8006400:	4413      	add	r3, r2
 8006402:	3384      	adds	r3, #132	; 0x84
 8006404:	461a      	mov	r2, r3
 8006406:	2300      	movs	r3, #0
 8006408:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006410:	461a      	mov	r2, r3
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	431a      	orrs	r2, r3
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	431a      	orrs	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4619      	mov	r1, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	01db      	lsls	r3, r3, #7
 8006424:	440b      	add	r3, r1
 8006426:	3384      	adds	r3, #132	; 0x84
 8006428:	4619      	mov	r1, r3
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	4313      	orrs	r3, r2
 800642e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	461a      	mov	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	01db      	lsls	r3, r3, #7
 800643a:	4413      	add	r3, r2
 800643c:	3384      	adds	r3, #132	; 0x84
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	6812      	ldr	r2, [r2, #0]
 8006444:	4611      	mov	r1, r2
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	01d2      	lsls	r2, r2, #7
 800644a:	440a      	add	r2, r1
 800644c:	3284      	adds	r2, #132	; 0x84
 800644e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006452:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	461a      	mov	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	01db      	lsls	r3, r3, #7
 800645e:	4413      	add	r3, r2
 8006460:	3384      	adds	r3, #132	; 0x84
 8006462:	461a      	mov	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	01db      	lsls	r3, r3, #7
 8006474:	4413      	add	r3, r2
 8006476:	3384      	adds	r3, #132	; 0x84
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	6812      	ldr	r2, [r2, #0]
 800647e:	4611      	mov	r1, r2
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	01d2      	lsls	r2, r2, #7
 8006484:	440a      	add	r2, r1
 8006486:	3284      	adds	r2, #132	; 0x84
 8006488:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800648c:	f023 0307 	bic.w	r3, r3, #7
 8006490:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	69da      	ldr	r2, [r3, #28]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	68f9      	ldr	r1, [r7, #12]
 800649c:	6809      	ldr	r1, [r1, #0]
 800649e:	4608      	mov	r0, r1
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	01c9      	lsls	r1, r1, #7
 80064a4:	4401      	add	r1, r0
 80064a6:	3184      	adds	r1, #132	; 0x84
 80064a8:	4313      	orrs	r3, r2
 80064aa:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	461a      	mov	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	01db      	lsls	r3, r3, #7
 80064b6:	4413      	add	r3, r2
 80064b8:	3384      	adds	r3, #132	; 0x84
 80064ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	461a      	mov	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	01db      	lsls	r3, r3, #7
 80064c6:	4413      	add	r3, r2
 80064c8:	3384      	adds	r3, #132	; 0x84
 80064ca:	461a      	mov	r2, r3
 80064cc:	2300      	movs	r3, #0
 80064ce:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	461a      	mov	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	01db      	lsls	r3, r3, #7
 80064da:	4413      	add	r3, r2
 80064dc:	3384      	adds	r3, #132	; 0x84
 80064de:	461a      	mov	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d102      	bne.n	80064f4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80064ee:	2304      	movs	r3, #4
 80064f0:	61fb      	str	r3, [r7, #28]
 80064f2:	e01b      	b.n	800652c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d102      	bne.n	8006502 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80064fc:	2303      	movs	r3, #3
 80064fe:	61fb      	str	r3, [r7, #28]
 8006500:	e014      	b.n	800652c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	2b04      	cmp	r3, #4
 8006508:	d00b      	beq.n	8006522 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800650e:	2b02      	cmp	r3, #2
 8006510:	d007      	beq.n	8006522 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006516:	2b03      	cmp	r3, #3
 8006518:	d003      	beq.n	8006522 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800651e:	2b07      	cmp	r3, #7
 8006520:	d102      	bne.n	8006528 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006522:	2302      	movs	r3, #2
 8006524:	61fb      	str	r3, [r7, #28]
 8006526:	e001      	b.n	800652c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006528:	2301      	movs	r3, #1
 800652a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	01db      	lsls	r3, r3, #7
 8006536:	4413      	add	r3, r2
 8006538:	3384      	adds	r3, #132	; 0x84
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	6812      	ldr	r2, [r2, #0]
 8006540:	4611      	mov	r1, r2
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	01d2      	lsls	r2, r2, #7
 8006546:	440a      	add	r2, r1
 8006548:	3284      	adds	r2, #132	; 0x84
 800654a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800654e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	69fa      	ldr	r2, [r7, #28]
 8006556:	fb02 f303 	mul.w	r3, r2, r3
 800655a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	6859      	ldr	r1, [r3, #4]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	1acb      	subs	r3, r1, r3
 8006566:	69f9      	ldr	r1, [r7, #28]
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800656e:	68f9      	ldr	r1, [r7, #12]
 8006570:	6809      	ldr	r1, [r1, #0]
 8006572:	4608      	mov	r0, r1
 8006574:	6879      	ldr	r1, [r7, #4]
 8006576:	01c9      	lsls	r1, r1, #7
 8006578:	4401      	add	r1, r0
 800657a:	3184      	adds	r1, #132	; 0x84
 800657c:	4313      	orrs	r3, r2
 800657e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	01db      	lsls	r3, r3, #7
 800658a:	4413      	add	r3, r2
 800658c:	3384      	adds	r3, #132	; 0x84
 800658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	6812      	ldr	r2, [r2, #0]
 8006594:	4611      	mov	r1, r2
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	01d2      	lsls	r2, r2, #7
 800659a:	440a      	add	r2, r1
 800659c:	3284      	adds	r2, #132	; 0x84
 800659e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80065a2:	f023 0307 	bic.w	r3, r3, #7
 80065a6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	01db      	lsls	r3, r3, #7
 80065b2:	4413      	add	r3, r2
 80065b4:	3384      	adds	r3, #132	; 0x84
 80065b6:	461a      	mov	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	01db      	lsls	r3, r3, #7
 80065c8:	4413      	add	r3, r2
 80065ca:	3384      	adds	r3, #132	; 0x84
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	6812      	ldr	r2, [r2, #0]
 80065d2:	4611      	mov	r1, r2
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	01d2      	lsls	r2, r2, #7
 80065d8:	440a      	add	r2, r1
 80065da:	3284      	adds	r2, #132	; 0x84
 80065dc:	f043 0301 	orr.w	r3, r3, #1
 80065e0:	6013      	str	r3, [r2, #0]
}
 80065e2:	bf00      	nop
 80065e4:	3724      	adds	r7, #36	; 0x24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
	...

080065f0 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	73fb      	strb	r3, [r7, #15]
 8006606:	e141      	b.n	800688c <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4618      	mov	r0, r3
 800660e:	f000 f947 	bl	80068a0 <MDF_GetHandleNumberFromInstance>
 8006612:	4603      	mov	r3, r0
 8006614:	4a86      	ldr	r2, [pc, #536]	; (8006830 <HAL_MDF_Init+0x240>)
 8006616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	73fb      	strb	r3, [r7, #15]
 8006622:	e133      	b.n	800688c <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7fb fc71 	bl	8001f0c <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 800662a:	4b82      	ldr	r3, [pc, #520]	; (8006834 <HAL_MDF_Init+0x244>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d11d      	bne.n	800666e <HAL_MDF_Init+0x7e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a80      	ldr	r2, [pc, #512]	; (8006838 <HAL_MDF_Init+0x248>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d023      	beq.n	8006684 <HAL_MDF_Init+0x94>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a7e      	ldr	r2, [pc, #504]	; (800683c <HAL_MDF_Init+0x24c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d01e      	beq.n	8006684 <HAL_MDF_Init+0x94>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a7d      	ldr	r2, [pc, #500]	; (8006840 <HAL_MDF_Init+0x250>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d019      	beq.n	8006684 <HAL_MDF_Init+0x94>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a7b      	ldr	r2, [pc, #492]	; (8006844 <HAL_MDF_Init+0x254>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d014      	beq.n	8006684 <HAL_MDF_Init+0x94>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a7a      	ldr	r2, [pc, #488]	; (8006848 <HAL_MDF_Init+0x258>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00f      	beq.n	8006684 <HAL_MDF_Init+0x94>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a78      	ldr	r2, [pc, #480]	; (800684c <HAL_MDF_Init+0x25c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00a      	beq.n	8006684 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 800666e:	4b78      	ldr	r3, [pc, #480]	; (8006850 <HAL_MDF_Init+0x260>)
 8006670:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8006672:	2b00      	cmp	r3, #0
 8006674:	f040 8090 	bne.w	8006798 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a75      	ldr	r2, [pc, #468]	; (8006854 <HAL_MDF_Init+0x264>)
 800667e:	4293      	cmp	r3, r2
 8006680:	f040 808a 	bne.w	8006798 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a72      	ldr	r2, [pc, #456]	; (8006854 <HAL_MDF_Init+0x264>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d101      	bne.n	8006692 <HAL_MDF_Init+0xa2>
 800668e:	4b72      	ldr	r3, [pc, #456]	; (8006858 <HAL_MDF_Init+0x268>)
 8006690:	e000      	b.n	8006694 <HAL_MDF_Init+0xa4>
 8006692:	4b72      	ldr	r3, [pc, #456]	; (800685c <HAL_MDF_Init+0x26c>)
 8006694:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	da02      	bge.n	80066a4 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	73fb      	strb	r3, [r7, #15]
 80066a2:	e079      	b.n	8006798 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a63      	ldr	r2, [pc, #396]	; (8006838 <HAL_MDF_Init+0x248>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d018      	beq.n	80066e0 <HAL_MDF_Init+0xf0>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a62      	ldr	r2, [pc, #392]	; (800683c <HAL_MDF_Init+0x24c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d013      	beq.n	80066e0 <HAL_MDF_Init+0xf0>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a60      	ldr	r2, [pc, #384]	; (8006840 <HAL_MDF_Init+0x250>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00e      	beq.n	80066e0 <HAL_MDF_Init+0xf0>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a5f      	ldr	r2, [pc, #380]	; (8006844 <HAL_MDF_Init+0x254>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d009      	beq.n	80066e0 <HAL_MDF_Init+0xf0>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a5d      	ldr	r2, [pc, #372]	; (8006848 <HAL_MDF_Init+0x258>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d004      	beq.n	80066e0 <HAL_MDF_Init+0xf0>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a5c      	ldr	r2, [pc, #368]	; (800684c <HAL_MDF_Init+0x25c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d10d      	bne.n	80066fc <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	431a      	orrs	r2, r3
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2200      	movs	r2, #0
 8006700:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	3b01      	subs	r3, #1
 800670c:	061b      	lsls	r3, r3, #24
 800670e:	431a      	orrs	r2, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	7b1b      	ldrb	r3, [r3, #12]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d137      	bne.n	800678c <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	3b01      	subs	r3, #1
 8006726:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 800672c:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8006734:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006736:	431a      	orrs	r2, r3
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	7e1b      	ldrb	r3, [r3, #24]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d123      	bne.n	800678c <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a3b      	ldr	r2, [pc, #236]	; (8006838 <HAL_MDF_Init+0x248>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d012      	beq.n	8006774 <HAL_MDF_Init+0x184>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a3a      	ldr	r2, [pc, #232]	; (800683c <HAL_MDF_Init+0x24c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00d      	beq.n	8006774 <HAL_MDF_Init+0x184>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a38      	ldr	r2, [pc, #224]	; (8006840 <HAL_MDF_Init+0x250>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d008      	beq.n	8006774 <HAL_MDF_Init+0x184>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a37      	ldr	r2, [pc, #220]	; (8006844 <HAL_MDF_Init+0x254>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d003      	beq.n	8006774 <HAL_MDF_Init+0x184>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a35      	ldr	r2, [pc, #212]	; (8006848 <HAL_MDF_Init+0x258>)
 8006772:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006780:	430b      	orrs	r3, r1
 8006782:	4313      	orrs	r3, r2
 8006784:	f043 0210 	orr.w	r2, r3, #16
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f043 0201 	orr.w	r2, r3, #1
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d128      	bne.n	80067f0 <HAL_MDF_Init+0x200>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d123      	bne.n	80067f0 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	da02      	bge.n	80067b8 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	73fb      	strb	r3, [r7, #15]
 80067b6:	e01b      	b.n	80067f0 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6819      	ldr	r1, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80067d0:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d6:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0201 	orr.w	r2, r2, #1
 80067ee:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d14a      	bne.n	800688c <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 021f 	bic.w	r2, r2, #31
 8006804:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6859      	ldr	r1, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a0d      	ldr	r2, [pc, #52]	; (8006854 <HAL_MDF_Init+0x264>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d11e      	bne.n	8006860 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8006822:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <HAL_MDF_Init+0x260>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3301      	adds	r3, #1
 8006828:	4a09      	ldr	r2, [pc, #36]	; (8006850 <HAL_MDF_Init+0x260>)
 800682a:	6013      	str	r3, [r2, #0]
 800682c:	e01d      	b.n	800686a <HAL_MDF_Init+0x27a>
 800682e:	bf00      	nop
 8006830:	20001530 	.word	0x20001530
 8006834:	20001528 	.word	0x20001528
 8006838:	40025080 	.word	0x40025080
 800683c:	40025100 	.word	0x40025100
 8006840:	40025180 	.word	0x40025180
 8006844:	40025200 	.word	0x40025200
 8006848:	40025280 	.word	0x40025280
 800684c:	40025300 	.word	0x40025300
 8006850:	2000152c 	.word	0x2000152c
 8006854:	46024080 	.word	0x46024080
 8006858:	46024000 	.word	0x46024000
 800685c:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8006860:	4b0d      	ldr	r3, [pc, #52]	; (8006898 <HAL_MDF_Init+0x2a8>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3301      	adds	r3, #1
 8006866:	4a0c      	ldr	r2, [pc, #48]	; (8006898 <HAL_MDF_Init+0x2a8>)
 8006868:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4618      	mov	r0, r3
 8006870:	f000 f816 	bl	80068a0 <MDF_GetHandleNumberFromInstance>
 8006874:	4602      	mov	r2, r0
 8006876:	4909      	ldr	r1, [pc, #36]	; (800689c <HAL_MDF_Init+0x2ac>)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 800688c:	7bfb      	ldrb	r3, [r7, #15]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20001528 	.word	0x20001528
 800689c:	20001530 	.word	0x20001530

080068a0 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a19      	ldr	r2, [pc, #100]	; (8006910 <MDF_GetHandleNumberFromInstance+0x70>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d102      	bne.n	80068b6 <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	e024      	b.n	8006900 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a16      	ldr	r2, [pc, #88]	; (8006914 <MDF_GetHandleNumberFromInstance+0x74>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d102      	bne.n	80068c4 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 80068be:	2301      	movs	r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	e01d      	b.n	8006900 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a14      	ldr	r2, [pc, #80]	; (8006918 <MDF_GetHandleNumberFromInstance+0x78>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d102      	bne.n	80068d2 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 80068cc:	2302      	movs	r3, #2
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	e016      	b.n	8006900 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a11      	ldr	r2, [pc, #68]	; (800691c <MDF_GetHandleNumberFromInstance+0x7c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d102      	bne.n	80068e0 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 80068da:	2303      	movs	r3, #3
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	e00f      	b.n	8006900 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a0f      	ldr	r2, [pc, #60]	; (8006920 <MDF_GetHandleNumberFromInstance+0x80>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d102      	bne.n	80068ee <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 80068e8:	2304      	movs	r3, #4
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	e008      	b.n	8006900 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a0c      	ldr	r2, [pc, #48]	; (8006924 <MDF_GetHandleNumberFromInstance+0x84>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d102      	bne.n	80068fc <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 80068f6:	2305      	movs	r3, #5
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	e001      	b.n	8006900 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 80068fc:	2306      	movs	r3, #6
 80068fe:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8006900:	68fb      	ldr	r3, [r7, #12]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	40025080 	.word	0x40025080
 8006914:	40025100 	.word	0x40025100
 8006918:	40025180 	.word	0x40025180
 800691c:	40025200 	.word	0x40025200
 8006920:	40025280 	.word	0x40025280
 8006924:	40025300 	.word	0x40025300

08006928 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f043 0201 	orr.w	r2, r3, #1
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	601a      	str	r2, [r3, #0]
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af02      	add	r7, sp, #8
 800694e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006950:	2300      	movs	r3, #0
 8006952:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006954:	f7fc fd22 	bl	800339c <HAL_GetTick>
 8006958:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d102      	bne.n	8006966 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	73fb      	strb	r3, [r7, #15]
 8006964:	e0a5      	b.n	8006ab2 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006970:	2b00      	cmp	r3, #0
 8006972:	f040 809e 	bne.w	8006ab2 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fc f8b4 	bl	8002ae4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800697c:	f241 3188 	movw	r1, #5000	; 0x1388
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f951 	bl	8006c28 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	4b4b      	ldr	r3, [pc, #300]	; (8006abc <HAL_OSPI_Init+0x174>)
 800698e:	4013      	ands	r3, r2
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	68d1      	ldr	r1, [r2, #12]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	6912      	ldr	r2, [r2, #16]
 8006998:	3a01      	subs	r2, #1
 800699a:	0412      	lsls	r2, r2, #16
 800699c:	4311      	orrs	r1, r2
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	6952      	ldr	r2, [r2, #20]
 80069a2:	3a01      	subs	r2, #1
 80069a4:	0212      	lsls	r2, r2, #8
 80069a6:	4311      	orrs	r1, r2
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069ac:	4311      	orrs	r1, r2
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	69d2      	ldr	r2, [r2, #28]
 80069b2:	4311      	orrs	r1, r2
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6812      	ldr	r2, [r2, #0]
 80069b8:	430b      	orrs	r3, r1
 80069ba:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1a      	ldr	r2, [r3, #32]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80069ec:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	3b01      	subs	r3, #1
 80069fe:	021a      	lsls	r2, r3, #8
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2200      	movs	r2, #0
 8006a12:	2120      	movs	r1, #32
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fe09 	bl	800762c <OSPI_WaitFlagStateUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d146      	bne.n	8006ab2 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	1e5a      	subs	r2, r3, #1
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689a      	ldr	r2, [r3, #8]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006a5a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f042 0201 	orr.w	r2, r2, #1
 8006a80:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d107      	bne.n	8006a9a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f042 0202 	orr.w	r2, r2, #2
 8006a98:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006aa2:	d103      	bne.n	8006aac <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	651a      	str	r2, [r3, #80]	; 0x50
 8006aaa:	e002      	b.n	8006ab2 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	f8e0c0f4 	.word	0xf8e0c0f4

08006ac0 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08a      	sub	sp, #40	; 0x28
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8006acc:	f7fc fc66 	bl	800339c <HAL_GetTick>
 8006ad0:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad6:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d002      	beq.n	8006ae4 <HAL_OSPI_HyperbusCfg+0x24>
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d122      	bne.n	8006b2a <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	2200      	movs	r2, #0
 8006aec:	2120      	movs	r1, #32
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 fd9c 	bl	800762c <OSPI_WaitFlagStateUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8006af8:	7ffb      	ldrb	r3, [r7, #31]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d11a      	bne.n	8006b34 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	041a      	lsls	r2, r3, #16
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	021b      	lsls	r3, r3, #8
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	ea42 0103 	orr.w	r1, r2, r3
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2202      	movs	r2, #2
 8006b26:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8006b28:	e004      	b.n	8006b34 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2210      	movs	r2, #16
 8006b32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8006b34:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3720      	adds	r7, #32
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b088      	sub	sp, #32
 8006b42:	af02      	add	r7, sp, #8
 8006b44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8006b4a:	f7fc fc27 	bl	800339c <HAL_GetTick>
 8006b4e:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b54:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f003 0308 	and.w	r3, r3, #8
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d104      	bne.n	8006b6a <HAL_OSPI_Abort+0x2c>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f003 0304 	and.w	r3, r3, #4
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d052      	beq.n	8006c10 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0304 	and.w	r3, r3, #4
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d014      	beq.n	8006ba2 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 0204 	bic.w	r2, r2, #4
 8006b86:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fc feb2 	bl	80038f6 <HAL_DMA_Abort>
 8006b92:	4603      	mov	r3, r0
 8006b94:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8006b96:	7dfb      	ldrb	r3, [r7, #23]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2204      	movs	r2, #4
 8006ba0:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	f003 0320 	and.w	r3, r3, #32
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d02b      	beq.n	8006c08 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0202 	orr.w	r2, r2, #2
 8006bbe:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	2102      	movs	r1, #2
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fd2d 	bl	800762c <OSPI_WaitFlagStateUntilTimeout>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d11f      	bne.n	8006c1c <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2202      	movs	r2, #2
 8006be2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2200      	movs	r2, #0
 8006bee:	2120      	movs	r1, #32
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fd1b 	bl	800762c <OSPI_WaitFlagStateUntilTimeout>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006bfa:	7dfb      	ldrb	r3, [r7, #23]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10d      	bne.n	8006c1c <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006c06:	e009      	b.n	8006c1c <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006c0e:	e005      	b.n	8006c1c <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2210      	movs	r2, #16
 8006c18:	655a      	str	r2, [r3, #84]	; 0x54
 8006c1a:	e000      	b.n	8006c1e <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006c1c:	bf00      	nop
  }

  /* Return function status */
  return status;
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
	...

08006c48 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b094      	sub	sp, #80	; 0x50
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a9d      	ldr	r2, [pc, #628]	; (8006edc <HAL_OSPIM_Config+0x294>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d105      	bne.n	8006c76 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8006c74:	e004      	b.n	8006c80 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8006c76:	2301      	movs	r3, #1
 8006c78:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006c80:	2300      	movs	r3, #0
 8006c82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006c86:	e01d      	b.n	8006cc4 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8006c88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	b2d8      	uxtb	r0, r3
 8006c90:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8006c94:	f107 0114 	add.w	r1, r7, #20
 8006c98:	4613      	mov	r3, r2
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	4413      	add	r3, r2
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	440b      	add	r3, r1
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	f000 fd02 	bl	80076ac <OSPIM_GetConfig>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2208      	movs	r2, #8
 8006cb8:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006cba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006cc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d9dd      	bls.n	8006c88 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8006ccc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f040 849e 	bne.w	8007612 <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8006cd6:	4b81      	ldr	r3, [pc, #516]	; (8006edc <HAL_OSPIM_Config+0x294>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00b      	beq.n	8006cfa <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006ce2:	4b7e      	ldr	r3, [pc, #504]	; (8006edc <HAL_OSPIM_Config+0x294>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a7d      	ldr	r2, [pc, #500]	; (8006edc <HAL_OSPIM_Config+0x294>)
 8006ce8:	f023 0301 	bic.w	r3, r3, #1
 8006cec:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8006cee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006cf2:	f043 0301 	orr.w	r3, r3, #1
 8006cf6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8006cfa:	4b79      	ldr	r3, [pc, #484]	; (8006ee0 <HAL_OSPIM_Config+0x298>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00b      	beq.n	8006d1e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006d06:	4b76      	ldr	r3, [pc, #472]	; (8006ee0 <HAL_OSPIM_Config+0x298>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a75      	ldr	r2, [pc, #468]	; (8006ee0 <HAL_OSPIM_Config+0x298>)
 8006d0c:	f023 0301 	bic.w	r3, r3, #1
 8006d10:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8006d12:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006d16:	f043 0302 	orr.w	r3, r3, #2
 8006d1a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006d1e:	4971      	ldr	r1, [pc, #452]	; (8006ee4 <HAL_OSPIM_Config+0x29c>)
 8006d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d22:	4613      	mov	r3, r2
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	4413      	add	r3, r2
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	3350      	adds	r3, #80	; 0x50
 8006d2c:	443b      	add	r3, r7
 8006d2e:	3b34      	subs	r3, #52	; 0x34
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3b01      	subs	r3, #1
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	6859      	ldr	r1, [r3, #4]
 8006d3a:	486a      	ldr	r0, [pc, #424]	; (8006ee4 <HAL_OSPIM_Config+0x29c>)
 8006d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d3e:	4613      	mov	r3, r2
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	4413      	add	r3, r2
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	3350      	adds	r3, #80	; 0x50
 8006d48:	443b      	add	r3, r7
 8006d4a:	3b34      	subs	r3, #52	; 0x34
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4403      	add	r3, r0
 8006d58:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006d5a:	4b62      	ldr	r3, [pc, #392]	; (8006ee4 <HAL_OSPIM_Config+0x29c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 80c0 	beq.w	8006ee8 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006d68:	4b5e      	ldr	r3, [pc, #376]	; (8006ee4 <HAL_OSPIM_Config+0x29c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a5d      	ldr	r2, [pc, #372]	; (8006ee4 <HAL_OSPIM_Config+0x29c>)
 8006d6e:	f023 0301 	bic.w	r3, r3, #1
 8006d72:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8006d74:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	f040 8162 	bne.w	8007042 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8006d7e:	4959      	ldr	r1, [pc, #356]	; (8006ee4 <HAL_OSPIM_Config+0x29c>)
 8006d80:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006d84:	4613      	mov	r3, r2
 8006d86:	005b      	lsls	r3, r3, #1
 8006d88:	4413      	add	r3, r2
 8006d8a:	00db      	lsls	r3, r3, #3
 8006d8c:	3350      	adds	r3, #80	; 0x50
 8006d8e:	443b      	add	r3, r7
 8006d90:	3b3c      	subs	r3, #60	; 0x3c
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	6859      	ldr	r1, [r3, #4]
 8006d9c:	4851      	ldr	r0, [pc, #324]	; (8006ee4 <HAL_OSPIM_Config+0x29c>)
 8006d9e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006da2:	4613      	mov	r3, r2
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	4413      	add	r3, r2
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	3350      	adds	r3, #80	; 0x50
 8006dac:	443b      	add	r3, r7
 8006dae:	3b3c      	subs	r3, #60	; 0x3c
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	f041 0202 	orr.w	r2, r1, #2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4403      	add	r3, r0
 8006dbc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006dbe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	4413      	add	r3, r2
 8006dc8:	00db      	lsls	r3, r3, #3
 8006dca:	3350      	adds	r3, #80	; 0x50
 8006dcc:	443b      	add	r3, r7
 8006dce:	3b38      	subs	r3, #56	; 0x38
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d01f      	beq.n	8006e16 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8006dd6:	4943      	ldr	r1, [pc, #268]	; (8006ee4 <HAL_OSPIM_Config+0x29c>)
 8006dd8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006ddc:	4613      	mov	r3, r2
 8006dde:	005b      	lsls	r3, r3, #1
 8006de0:	4413      	add	r3, r2
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	3350      	adds	r3, #80	; 0x50
 8006de6:	443b      	add	r3, r7
 8006de8:	3b38      	subs	r3, #56	; 0x38
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	440b      	add	r3, r1
 8006df2:	6859      	ldr	r1, [r3, #4]
 8006df4:	483b      	ldr	r0, [pc, #236]	; (8006ee4 <HAL_OSPIM_Config+0x29c>)
 8006df6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	4413      	add	r3, r2
 8006e00:	00db      	lsls	r3, r3, #3
 8006e02:	3350      	adds	r3, #80	; 0x50
 8006e04:	443b      	add	r3, r7
 8006e06:	3b38      	subs	r3, #56	; 0x38
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	f041 0220 	orr.w	r2, r1, #32
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4403      	add	r3, r0
 8006e14:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006e16:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	4413      	add	r3, r2
 8006e20:	00db      	lsls	r3, r3, #3
 8006e22:	3350      	adds	r3, #80	; 0x50
 8006e24:	443b      	add	r3, r7
 8006e26:	3b30      	subs	r3, #48	; 0x30
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d023      	beq.n	8006e76 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006e2e:	492d      	ldr	r1, [pc, #180]	; (8006ee4 <HAL_OSPIM_Config+0x29c>)
 8006e30:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e34:	4613      	mov	r3, r2
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	4413      	add	r3, r2
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	3350      	adds	r3, #80	; 0x50
 8006e3e:	443b      	add	r3, r7
 8006e40:	3b30      	subs	r3, #48	; 0x30
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	440b      	add	r3, r1
 8006e4e:	6859      	ldr	r1, [r3, #4]
 8006e50:	4824      	ldr	r0, [pc, #144]	; (8006ee4 <HAL_OSPIM_Config+0x29c>)
 8006e52:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e56:	4613      	mov	r3, r2
 8006e58:	005b      	lsls	r3, r3, #1
 8006e5a:	4413      	add	r3, r2
 8006e5c:	00db      	lsls	r3, r3, #3
 8006e5e:	3350      	adds	r3, #80	; 0x50
 8006e60:	443b      	add	r3, r7
 8006e62:	3b30      	subs	r3, #48	; 0x30
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4403      	add	r3, r0
 8006e74:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006e76:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	4413      	add	r3, r2
 8006e80:	00db      	lsls	r3, r3, #3
 8006e82:	3350      	adds	r3, #80	; 0x50
 8006e84:	443b      	add	r3, r7
 8006e86:	3b2c      	subs	r3, #44	; 0x2c
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 80d9 	beq.w	8007042 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006e90:	4914      	ldr	r1, [pc, #80]	; (8006ee4 <HAL_OSPIM_Config+0x29c>)
 8006e92:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e96:	4613      	mov	r3, r2
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	4413      	add	r3, r2
 8006e9c:	00db      	lsls	r3, r3, #3
 8006e9e:	3350      	adds	r3, #80	; 0x50
 8006ea0:	443b      	add	r3, r7
 8006ea2:	3b2c      	subs	r3, #44	; 0x2c
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	440b      	add	r3, r1
 8006eb0:	6859      	ldr	r1, [r3, #4]
 8006eb2:	480c      	ldr	r0, [pc, #48]	; (8006ee4 <HAL_OSPIM_Config+0x29c>)
 8006eb4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006eb8:	4613      	mov	r3, r2
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	4413      	add	r3, r2
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	3350      	adds	r3, #80	; 0x50
 8006ec2:	443b      	add	r3, r7
 8006ec4:	3b2c      	subs	r3, #44	; 0x2c
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4403      	add	r3, r0
 8006ed6:	605a      	str	r2, [r3, #4]
 8006ed8:	e0b3      	b.n	8007042 <HAL_OSPIM_Config+0x3fa>
 8006eda:	bf00      	nop
 8006edc:	420d1400 	.word	0x420d1400
 8006ee0:	420d2400 	.word	0x420d2400
 8006ee4:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8006ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eea:	4613      	mov	r3, r2
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	4413      	add	r3, r2
 8006ef0:	00db      	lsls	r3, r3, #3
 8006ef2:	3350      	adds	r3, #80	; 0x50
 8006ef4:	443b      	add	r3, r7
 8006ef6:	3b3c      	subs	r3, #60	; 0x3c
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 80a1 	beq.w	8007042 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006f00:	4993      	ldr	r1, [pc, #588]	; (8007150 <HAL_OSPIM_Config+0x508>)
 8006f02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f04:	4613      	mov	r3, r2
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	4413      	add	r3, r2
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	3350      	adds	r3, #80	; 0x50
 8006f0e:	443b      	add	r3, r7
 8006f10:	3b3c      	subs	r3, #60	; 0x3c
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	440b      	add	r3, r1
 8006f1a:	6859      	ldr	r1, [r3, #4]
 8006f1c:	488c      	ldr	r0, [pc, #560]	; (8007150 <HAL_OSPIM_Config+0x508>)
 8006f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f20:	4613      	mov	r3, r2
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	4413      	add	r3, r2
 8006f26:	00db      	lsls	r3, r3, #3
 8006f28:	3350      	adds	r3, #80	; 0x50
 8006f2a:	443b      	add	r3, r7
 8006f2c:	3b3c      	subs	r3, #60	; 0x3c
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3b01      	subs	r3, #1
 8006f32:	f021 0201 	bic.w	r2, r1, #1
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4403      	add	r3, r0
 8006f3a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006f3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f3e:	4613      	mov	r3, r2
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	4413      	add	r3, r2
 8006f44:	00db      	lsls	r3, r3, #3
 8006f46:	3350      	adds	r3, #80	; 0x50
 8006f48:	443b      	add	r3, r7
 8006f4a:	3b38      	subs	r3, #56	; 0x38
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01d      	beq.n	8006f8e <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006f52:	497f      	ldr	r1, [pc, #508]	; (8007150 <HAL_OSPIM_Config+0x508>)
 8006f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f56:	4613      	mov	r3, r2
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	4413      	add	r3, r2
 8006f5c:	00db      	lsls	r3, r3, #3
 8006f5e:	3350      	adds	r3, #80	; 0x50
 8006f60:	443b      	add	r3, r7
 8006f62:	3b38      	subs	r3, #56	; 0x38
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	440b      	add	r3, r1
 8006f6c:	6859      	ldr	r1, [r3, #4]
 8006f6e:	4878      	ldr	r0, [pc, #480]	; (8007150 <HAL_OSPIM_Config+0x508>)
 8006f70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f72:	4613      	mov	r3, r2
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	4413      	add	r3, r2
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	3350      	adds	r3, #80	; 0x50
 8006f7c:	443b      	add	r3, r7
 8006f7e:	3b38      	subs	r3, #56	; 0x38
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	f021 0210 	bic.w	r2, r1, #16
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4403      	add	r3, r0
 8006f8c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006f8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f90:	4613      	mov	r3, r2
 8006f92:	005b      	lsls	r3, r3, #1
 8006f94:	4413      	add	r3, r2
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	3350      	adds	r3, #80	; 0x50
 8006f9a:	443b      	add	r3, r7
 8006f9c:	3b30      	subs	r3, #48	; 0x30
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d021      	beq.n	8006fe8 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006fa4:	496a      	ldr	r1, [pc, #424]	; (8007150 <HAL_OSPIM_Config+0x508>)
 8006fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fa8:	4613      	mov	r3, r2
 8006faa:	005b      	lsls	r3, r3, #1
 8006fac:	4413      	add	r3, r2
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	3350      	adds	r3, #80	; 0x50
 8006fb2:	443b      	add	r3, r7
 8006fb4:	3b30      	subs	r3, #48	; 0x30
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	6859      	ldr	r1, [r3, #4]
 8006fc4:	4862      	ldr	r0, [pc, #392]	; (8007150 <HAL_OSPIM_Config+0x508>)
 8006fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fc8:	4613      	mov	r3, r2
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	4413      	add	r3, r2
 8006fce:	00db      	lsls	r3, r3, #3
 8006fd0:	3350      	adds	r3, #80	; 0x50
 8006fd2:	443b      	add	r3, r7
 8006fd4:	3b30      	subs	r3, #48	; 0x30
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4403      	add	r3, r0
 8006fe6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006fe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fea:	4613      	mov	r3, r2
 8006fec:	005b      	lsls	r3, r3, #1
 8006fee:	4413      	add	r3, r2
 8006ff0:	00db      	lsls	r3, r3, #3
 8006ff2:	3350      	adds	r3, #80	; 0x50
 8006ff4:	443b      	add	r3, r7
 8006ff6:	3b2c      	subs	r3, #44	; 0x2c
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d021      	beq.n	8007042 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006ffe:	4954      	ldr	r1, [pc, #336]	; (8007150 <HAL_OSPIM_Config+0x508>)
 8007000:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007002:	4613      	mov	r3, r2
 8007004:	005b      	lsls	r3, r3, #1
 8007006:	4413      	add	r3, r2
 8007008:	00db      	lsls	r3, r3, #3
 800700a:	3350      	adds	r3, #80	; 0x50
 800700c:	443b      	add	r3, r7
 800700e:	3b2c      	subs	r3, #44	; 0x2c
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3b01      	subs	r3, #1
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	6859      	ldr	r1, [r3, #4]
 800701e:	484c      	ldr	r0, [pc, #304]	; (8007150 <HAL_OSPIM_Config+0x508>)
 8007020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007022:	4613      	mov	r3, r2
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	4413      	add	r3, r2
 8007028:	00db      	lsls	r3, r3, #3
 800702a:	3350      	adds	r3, #80	; 0x50
 800702c:	443b      	add	r3, r7
 800702e:	3b2c      	subs	r3, #44	; 0x2c
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3b01      	subs	r3, #1
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4403      	add	r3, r0
 8007040:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	6819      	ldr	r1, [r3, #0]
 8007046:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800704a:	4613      	mov	r3, r2
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	4413      	add	r3, r2
 8007050:	00db      	lsls	r3, r3, #3
 8007052:	3350      	adds	r3, #80	; 0x50
 8007054:	443b      	add	r3, r7
 8007056:	3b3c      	subs	r3, #60	; 0x3c
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4299      	cmp	r1, r3
 800705c:	d038      	beq.n	80070d0 <HAL_OSPIM_Config+0x488>
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6859      	ldr	r1, [r3, #4]
 8007062:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007066:	4613      	mov	r3, r2
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	4413      	add	r3, r2
 800706c:	00db      	lsls	r3, r3, #3
 800706e:	3350      	adds	r3, #80	; 0x50
 8007070:	443b      	add	r3, r7
 8007072:	3b38      	subs	r3, #56	; 0x38
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4299      	cmp	r1, r3
 8007078:	d02a      	beq.n	80070d0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	6899      	ldr	r1, [r3, #8]
 800707e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007082:	4613      	mov	r3, r2
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	4413      	add	r3, r2
 8007088:	00db      	lsls	r3, r3, #3
 800708a:	3350      	adds	r3, #80	; 0x50
 800708c:	443b      	add	r3, r7
 800708e:	3b34      	subs	r3, #52	; 0x34
 8007090:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8007092:	4299      	cmp	r1, r3
 8007094:	d01c      	beq.n	80070d0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	68d9      	ldr	r1, [r3, #12]
 800709a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800709e:	4613      	mov	r3, r2
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	4413      	add	r3, r2
 80070a4:	00db      	lsls	r3, r3, #3
 80070a6:	3350      	adds	r3, #80	; 0x50
 80070a8:	443b      	add	r3, r7
 80070aa:	3b30      	subs	r3, #48	; 0x30
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4299      	cmp	r1, r3
 80070b0:	d00e      	beq.n	80070d0 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	6919      	ldr	r1, [r3, #16]
 80070b6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80070ba:	4613      	mov	r3, r2
 80070bc:	005b      	lsls	r3, r3, #1
 80070be:	4413      	add	r3, r2
 80070c0:	00db      	lsls	r3, r3, #3
 80070c2:	3350      	adds	r3, #80	; 0x50
 80070c4:	443b      	add	r3, r7
 80070c6:	3b2c      	subs	r3, #44	; 0x2c
 80070c8:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80070ca:	4299      	cmp	r1, r3
 80070cc:	f040 810e 	bne.w	80072ec <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	6819      	ldr	r1, [r3, #0]
 80070d4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80070d8:	4613      	mov	r3, r2
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	4413      	add	r3, r2
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	3350      	adds	r3, #80	; 0x50
 80070e2:	443b      	add	r3, r7
 80070e4:	3b3c      	subs	r3, #60	; 0x3c
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4299      	cmp	r1, r3
 80070ea:	d133      	bne.n	8007154 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	6859      	ldr	r1, [r3, #4]
 80070f0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80070f4:	4613      	mov	r3, r2
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	4413      	add	r3, r2
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	3350      	adds	r3, #80	; 0x50
 80070fe:	443b      	add	r3, r7
 8007100:	3b38      	subs	r3, #56	; 0x38
 8007102:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8007104:	4299      	cmp	r1, r3
 8007106:	d125      	bne.n	8007154 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	68d9      	ldr	r1, [r3, #12]
 800710c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007110:	4613      	mov	r3, r2
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	4413      	add	r3, r2
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	3350      	adds	r3, #80	; 0x50
 800711a:	443b      	add	r3, r7
 800711c:	3b30      	subs	r3, #48	; 0x30
 800711e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007120:	4299      	cmp	r1, r3
 8007122:	d117      	bne.n	8007154 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	6919      	ldr	r1, [r3, #16]
 8007128:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800712c:	4613      	mov	r3, r2
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	4413      	add	r3, r2
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	3350      	adds	r3, #80	; 0x50
 8007136:	443b      	add	r3, r7
 8007138:	3b2c      	subs	r3, #44	; 0x2c
 800713a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800713c:	4299      	cmp	r1, r3
 800713e:	d109      	bne.n	8007154 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007140:	4b03      	ldr	r3, [pc, #12]	; (8007150 <HAL_OSPIM_Config+0x508>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a02      	ldr	r2, [pc, #8]	; (8007150 <HAL_OSPIM_Config+0x508>)
 8007146:	f043 0301 	orr.w	r3, r3, #1
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	e0ce      	b.n	80072ec <HAL_OSPIM_Config+0x6a4>
 800714e:	bf00      	nop
 8007150:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8007154:	49a4      	ldr	r1, [pc, #656]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 8007156:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800715a:	4613      	mov	r3, r2
 800715c:	005b      	lsls	r3, r3, #1
 800715e:	4413      	add	r3, r2
 8007160:	00db      	lsls	r3, r3, #3
 8007162:	3350      	adds	r3, #80	; 0x50
 8007164:	443b      	add	r3, r7
 8007166:	3b3c      	subs	r3, #60	; 0x3c
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3b01      	subs	r3, #1
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	440b      	add	r3, r1
 8007170:	6859      	ldr	r1, [r3, #4]
 8007172:	489d      	ldr	r0, [pc, #628]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 8007174:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007178:	4613      	mov	r3, r2
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	4413      	add	r3, r2
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	3350      	adds	r3, #80	; 0x50
 8007182:	443b      	add	r3, r7
 8007184:	3b3c      	subs	r3, #60	; 0x3c
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3b01      	subs	r3, #1
 800718a:	f021 0201 	bic.w	r2, r1, #1
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4403      	add	r3, r0
 8007192:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007194:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007198:	4613      	mov	r3, r2
 800719a:	005b      	lsls	r3, r3, #1
 800719c:	4413      	add	r3, r2
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	3350      	adds	r3, #80	; 0x50
 80071a2:	443b      	add	r3, r7
 80071a4:	3b38      	subs	r3, #56	; 0x38
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01f      	beq.n	80071ec <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80071ac:	498e      	ldr	r1, [pc, #568]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 80071ae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80071b2:	4613      	mov	r3, r2
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	4413      	add	r3, r2
 80071b8:	00db      	lsls	r3, r3, #3
 80071ba:	3350      	adds	r3, #80	; 0x50
 80071bc:	443b      	add	r3, r7
 80071be:	3b38      	subs	r3, #56	; 0x38
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3b01      	subs	r3, #1
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	440b      	add	r3, r1
 80071c8:	6859      	ldr	r1, [r3, #4]
 80071ca:	4887      	ldr	r0, [pc, #540]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 80071cc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80071d0:	4613      	mov	r3, r2
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	4413      	add	r3, r2
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	3350      	adds	r3, #80	; 0x50
 80071da:	443b      	add	r3, r7
 80071dc:	3b38      	subs	r3, #56	; 0x38
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3b01      	subs	r3, #1
 80071e2:	f021 0210 	bic.w	r2, r1, #16
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4403      	add	r3, r0
 80071ea:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80071ec:	497e      	ldr	r1, [pc, #504]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 80071ee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80071f2:	4613      	mov	r3, r2
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	4413      	add	r3, r2
 80071f8:	00db      	lsls	r3, r3, #3
 80071fa:	3350      	adds	r3, #80	; 0x50
 80071fc:	443b      	add	r3, r7
 80071fe:	3b34      	subs	r3, #52	; 0x34
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3b01      	subs	r3, #1
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	440b      	add	r3, r1
 8007208:	6859      	ldr	r1, [r3, #4]
 800720a:	4877      	ldr	r0, [pc, #476]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 800720c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007210:	4613      	mov	r3, r2
 8007212:	005b      	lsls	r3, r3, #1
 8007214:	4413      	add	r3, r2
 8007216:	00db      	lsls	r3, r3, #3
 8007218:	3350      	adds	r3, #80	; 0x50
 800721a:	443b      	add	r3, r7
 800721c:	3b34      	subs	r3, #52	; 0x34
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3b01      	subs	r3, #1
 8007222:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4403      	add	r3, r0
 800722a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800722c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007230:	4613      	mov	r3, r2
 8007232:	005b      	lsls	r3, r3, #1
 8007234:	4413      	add	r3, r2
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	3350      	adds	r3, #80	; 0x50
 800723a:	443b      	add	r3, r7
 800723c:	3b30      	subs	r3, #48	; 0x30
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d023      	beq.n	800728c <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007244:	4968      	ldr	r1, [pc, #416]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 8007246:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800724a:	4613      	mov	r3, r2
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	4413      	add	r3, r2
 8007250:	00db      	lsls	r3, r3, #3
 8007252:	3350      	adds	r3, #80	; 0x50
 8007254:	443b      	add	r3, r7
 8007256:	3b30      	subs	r3, #48	; 0x30
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3b01      	subs	r3, #1
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	440b      	add	r3, r1
 8007264:	6859      	ldr	r1, [r3, #4]
 8007266:	4860      	ldr	r0, [pc, #384]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 8007268:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800726c:	4613      	mov	r3, r2
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	4413      	add	r3, r2
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	3350      	adds	r3, #80	; 0x50
 8007276:	443b      	add	r3, r7
 8007278:	3b30      	subs	r3, #48	; 0x30
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3b01      	subs	r3, #1
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4403      	add	r3, r0
 800728a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800728c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007290:	4613      	mov	r3, r2
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	4413      	add	r3, r2
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	3350      	adds	r3, #80	; 0x50
 800729a:	443b      	add	r3, r7
 800729c:	3b2c      	subs	r3, #44	; 0x2c
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d023      	beq.n	80072ec <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80072a4:	4950      	ldr	r1, [pc, #320]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 80072a6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80072aa:	4613      	mov	r3, r2
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	4413      	add	r3, r2
 80072b0:	00db      	lsls	r3, r3, #3
 80072b2:	3350      	adds	r3, #80	; 0x50
 80072b4:	443b      	add	r3, r7
 80072b6:	3b2c      	subs	r3, #44	; 0x2c
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	440b      	add	r3, r1
 80072c4:	6859      	ldr	r1, [r3, #4]
 80072c6:	4848      	ldr	r0, [pc, #288]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 80072c8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80072cc:	4613      	mov	r3, r2
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	4413      	add	r3, r2
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	3350      	adds	r3, #80	; 0x50
 80072d6:	443b      	add	r3, r7
 80072d8:	3b2c      	subs	r3, #44	; 0x2c
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3b01      	subs	r3, #1
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4403      	add	r3, r0
 80072ea:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80072ec:	4a3e      	ldr	r2, [pc, #248]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	3b01      	subs	r3, #1
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007300:	025b      	lsls	r3, r3, #9
 8007302:	431a      	orrs	r2, r3
 8007304:	4938      	ldr	r1, [pc, #224]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	3b01      	subs	r3, #1
 800730c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	440b      	add	r3, r1
 8007314:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d018      	beq.n	8007350 <HAL_OSPIM_Config+0x708>
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007326:	d813      	bhi.n	8007350 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	1e5a      	subs	r2, r3, #1
 800732e:	4b2e      	ldr	r3, [pc, #184]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	0c1b      	lsrs	r3, r3, #16
 8007334:	b2db      	uxtb	r3, r3
 8007336:	429a      	cmp	r2, r3
 8007338:	d90a      	bls.n	8007350 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800733a:	4b2b      	ldr	r3, [pc, #172]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	3b01      	subs	r3, #1
 8007348:	041b      	lsls	r3, r3, #16
 800734a:	4927      	ldr	r1, [pc, #156]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 800734c:	4313      	orrs	r3, r2
 800734e:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007350:	4b25      	ldr	r3, [pc, #148]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 809a 	beq.w	8007492 <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800735e:	4a22      	ldr	r2, [pc, #136]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3b01      	subs	r3, #1
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f023 0203 	bic.w	r2, r3, #3
 8007370:	491d      	ldr	r1, [pc, #116]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3b01      	subs	r3, #1
 8007378:	f042 0201 	orr.w	r2, r2, #1
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	440b      	add	r3, r1
 8007380:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d011      	beq.n	80073ae <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800738a:	4a17      	ldr	r2, [pc, #92]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	3b01      	subs	r3, #1
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800739c:	4912      	ldr	r1, [pc, #72]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	3b01      	subs	r3, #1
 80073a4:	f042 0210 	orr.w	r2, r2, #16
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	440b      	add	r3, r1
 80073ac:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d018      	beq.n	80073ec <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80073ba:	4a0b      	ldr	r2, [pc, #44]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80073d0:	4905      	ldr	r1, [pc, #20]	; (80073e8 <HAL_OSPIM_Config+0x7a0>)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	440b      	add	r3, r1
 80073e4:	605a      	str	r2, [r3, #4]
 80073e6:	e01b      	b.n	8007420 <HAL_OSPIM_Config+0x7d8>
 80073e8:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d015      	beq.n	8007420 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80073f4:	4a8a      	ldr	r2, [pc, #552]	; (8007620 <HAL_OSPIM_Config+0x9d8>)
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800740a:	4985      	ldr	r1, [pc, #532]	; (8007620 <HAL_OSPIM_Config+0x9d8>)
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	3b01      	subs	r3, #1
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	440b      	add	r3, r1
 800741e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d016      	beq.n	800745a <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800742c:	4a7c      	ldr	r2, [pc, #496]	; (8007620 <HAL_OSPIM_Config+0x9d8>)
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	3b01      	subs	r3, #1
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007442:	4977      	ldr	r1, [pc, #476]	; (8007620 <HAL_OSPIM_Config+0x9d8>)
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	3b01      	subs	r3, #1
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	440b      	add	r3, r1
 8007456:	605a      	str	r2, [r3, #4]
 8007458:	e0c3      	b.n	80075e2 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 80bf 	beq.w	80075e2 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007464:	4a6e      	ldr	r2, [pc, #440]	; (8007620 <HAL_OSPIM_Config+0x9d8>)
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	3b01      	subs	r3, #1
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800747a:	4969      	ldr	r1, [pc, #420]	; (8007620 <HAL_OSPIM_Config+0x9d8>)
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	3b01      	subs	r3, #1
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	440b      	add	r3, r1
 800748e:	605a      	str	r2, [r3, #4]
 8007490:	e0a7      	b.n	80075e2 <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8007492:	4a63      	ldr	r2, [pc, #396]	; (8007620 <HAL_OSPIM_Config+0x9d8>)
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3b01      	subs	r3, #1
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f023 0203 	bic.w	r2, r3, #3
 80074a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	431a      	orrs	r2, r3
 80074aa:	495d      	ldr	r1, [pc, #372]	; (8007620 <HAL_OSPIM_Config+0x9d8>)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	3b01      	subs	r3, #1
 80074b2:	f042 0201 	orr.w	r2, r2, #1
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	440b      	add	r3, r1
 80074ba:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d014      	beq.n	80074ee <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80074c4:	4a56      	ldr	r2, [pc, #344]	; (8007620 <HAL_OSPIM_Config+0x9d8>)
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074d8:	015b      	lsls	r3, r3, #5
 80074da:	431a      	orrs	r2, r3
 80074dc:	4950      	ldr	r1, [pc, #320]	; (8007620 <HAL_OSPIM_Config+0x9d8>)
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	f042 0210 	orr.w	r2, r2, #16
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	440b      	add	r3, r1
 80074ec:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d019      	beq.n	800752e <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80074fa:	4a49      	ldr	r2, [pc, #292]	; (8007620 <HAL_OSPIM_Config+0x9d8>)
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	3b01      	subs	r3, #1
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007512:	049b      	lsls	r3, r3, #18
 8007514:	431a      	orrs	r2, r3
 8007516:	4942      	ldr	r1, [pc, #264]	; (8007620 <HAL_OSPIM_Config+0x9d8>)
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	3b01      	subs	r3, #1
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	440b      	add	r3, r1
 800752a:	605a      	str	r2, [r3, #4]
 800752c:	e01c      	b.n	8007568 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d018      	beq.n	8007568 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007536:	4a3a      	ldr	r2, [pc, #232]	; (8007620 <HAL_OSPIM_Config+0x9d8>)
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	3b01      	subs	r3, #1
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800754c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754e:	069b      	lsls	r3, r3, #26
 8007550:	431a      	orrs	r2, r3
 8007552:	4933      	ldr	r1, [pc, #204]	; (8007620 <HAL_OSPIM_Config+0x9d8>)
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	3b01      	subs	r3, #1
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	440b      	add	r3, r1
 8007566:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d019      	beq.n	80075a8 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007574:	4a2a      	ldr	r2, [pc, #168]	; (8007620 <HAL_OSPIM_Config+0x9d8>)
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	3b01      	subs	r3, #1
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800758a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800758c:	049b      	lsls	r3, r3, #18
 800758e:	431a      	orrs	r2, r3
 8007590:	4923      	ldr	r1, [pc, #140]	; (8007620 <HAL_OSPIM_Config+0x9d8>)
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	3b01      	subs	r3, #1
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	440b      	add	r3, r1
 80075a4:	605a      	str	r2, [r3, #4]
 80075a6:	e01c      	b.n	80075e2 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d018      	beq.n	80075e2 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80075b0:	4a1b      	ldr	r2, [pc, #108]	; (8007620 <HAL_OSPIM_Config+0x9d8>)
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80075c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075c8:	069b      	lsls	r3, r3, #26
 80075ca:	431a      	orrs	r2, r3
 80075cc:	4914      	ldr	r1, [pc, #80]	; (8007620 <HAL_OSPIM_Config+0x9d8>)
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	440b      	add	r3, r1
 80075e0:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80075e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d005      	beq.n	80075fa <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80075ee:	4b0d      	ldr	r3, [pc, #52]	; (8007624 <HAL_OSPIM_Config+0x9dc>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a0c      	ldr	r2, [pc, #48]	; (8007624 <HAL_OSPIM_Config+0x9dc>)
 80075f4:	f043 0301 	orr.w	r3, r3, #1
 80075f8:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80075fa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d005      	beq.n	8007612 <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007606:	4b08      	ldr	r3, [pc, #32]	; (8007628 <HAL_OSPIM_Config+0x9e0>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a07      	ldr	r2, [pc, #28]	; (8007628 <HAL_OSPIM_Config+0x9e0>)
 800760c:	f043 0301 	orr.w	r3, r3, #1
 8007610:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007612:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007616:	4618      	mov	r0, r3
 8007618:	3750      	adds	r7, #80	; 0x50
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	420c4000 	.word	0x420c4000
 8007624:	420d1400 	.word	0x420d1400
 8007628:	420d2400 	.word	0x420d2400

0800762c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	603b      	str	r3, [r7, #0]
 8007638:	4613      	mov	r3, r2
 800763a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800763c:	e022      	b.n	8007684 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007644:	d01e      	beq.n	8007684 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007646:	f7fb fea9 	bl	800339c <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	429a      	cmp	r2, r3
 8007654:	d302      	bcc.n	800765c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d113      	bne.n	8007684 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6a1a      	ldr	r2, [r3, #32]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	401a      	ands	r2, r3
 8007666:	79fb      	ldrb	r3, [r7, #7]
 8007668:	429a      	cmp	r2, r3
 800766a:	d00b      	beq.n	8007684 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007672:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007678:	f043 0201 	orr.w	r2, r3, #1
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e00e      	b.n	80076a2 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6a1a      	ldr	r2, [r3, #32]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	4013      	ands	r3, r2
 800768e:	2b00      	cmp	r3, #0
 8007690:	bf14      	ite	ne
 8007692:	2301      	movne	r3, #1
 8007694:	2300      	moveq	r3, #0
 8007696:	b2db      	uxtb	r3, r3
 8007698:	461a      	mov	r2, r3
 800769a:	79fb      	ldrb	r3, [r7, #7]
 800769c:	429a      	cmp	r2, r3
 800769e:	d1ce      	bne.n	800763e <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b087      	sub	sp, #28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	4603      	mov	r3, r0
 80076b4:	6039      	str	r1, [r7, #0]
 80076b6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80076c0:	79fb      	ldrb	r3, [r7, #7]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d005      	beq.n	80076d2 <OSPIM_GetConfig+0x26>
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d802      	bhi.n	80076d2 <OSPIM_GetConfig+0x26>
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d102      	bne.n	80076d8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	75fb      	strb	r3, [r7, #23]
 80076d6:	e098      	b.n	800780a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	2200      	movs	r2, #0
 80076e2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2200      	movs	r2, #0
 80076e8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2200      	movs	r2, #0
 80076ee:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2200      	movs	r2, #0
 80076f4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80076f6:	79fb      	ldrb	r3, [r7, #7]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d10b      	bne.n	8007714 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80076fc:	4b46      	ldr	r3, [pc, #280]	; (8007818 <OSPIM_GetConfig+0x16c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	d102      	bne.n	800770e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007708:	4b44      	ldr	r3, [pc, #272]	; (800781c <OSPIM_GetConfig+0x170>)
 800770a:	613b      	str	r3, [r7, #16]
 800770c:	e002      	b.n	8007714 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800770e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007712:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007714:	2300      	movs	r3, #0
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	e074      	b.n	8007804 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800771a:	4a3f      	ldr	r2, [pc, #252]	; (8007818 <OSPIM_GetConfig+0x16c>)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00a      	beq.n	8007746 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	4053      	eors	r3, r2
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d103      	bne.n	8007746 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f003 0310 	and.w	r3, r3, #16
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00a      	beq.n	8007766 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	4053      	eors	r3, r2
 8007756:	f003 0320 	and.w	r3, r3, #32
 800775a:	2b00      	cmp	r3, #0
 800775c:	d103      	bne.n	8007766 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00a      	beq.n	8007786 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	4053      	eors	r3, r2
 8007776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800777a:	2b00      	cmp	r3, #0
 800777c:	d103      	bne.n	8007786 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d018      	beq.n	80077c2 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	4053      	eors	r3, r2
 8007796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d111      	bne.n	80077c2 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d106      	bne.n	80077b6 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3301      	adds	r3, #1
 80077ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	60da      	str	r2, [r3, #12]
 80077b4:	e005      	b.n	80077c2 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3301      	adds	r3, #1
 80077ba:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d018      	beq.n	80077fe <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	4053      	eors	r3, r2
 80077d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d111      	bne.n	80077fe <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d106      	bne.n	80077f2 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3301      	adds	r3, #1
 80077e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	611a      	str	r2, [r3, #16]
 80077f0:	e005      	b.n	80077fe <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3301      	adds	r3, #1
 80077f6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	3301      	adds	r3, #1
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d987      	bls.n	800771a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800780a:	7dfb      	ldrb	r3, [r7, #23]
}
 800780c:	4618      	mov	r0, r3
 800780e:	371c      	adds	r7, #28
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	420c4000 	.word	0x420c4000
 800781c:	04040222 	.word	0x04040222

08007820 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f042 0202 	orr.w	r2, r2, #2
 800783c:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2208      	movs	r2, #8
 8007842:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a15      	ldr	r2, [pc, #84]	; (80078a0 <HAL_OSPI_DLYB_SetConfig+0x80>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d109      	bne.n	8007862 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800784e:	4815      	ldr	r0, [pc, #84]	; (80078a4 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007850:	f7ff f86a 	bl	8006928 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	4813      	ldr	r0, [pc, #76]	; (80078a4 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007858:	f006 f928 	bl	800daac <LL_DLYB_SetDelay>
    status = HAL_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	73fb      	strb	r3, [r7, #15]
 8007860:	e00d      	b.n	800787e <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a10      	ldr	r2, [pc, #64]	; (80078a8 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d108      	bne.n	800787e <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 800786c:	480f      	ldr	r0, [pc, #60]	; (80078ac <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800786e:	f7ff f85b 	bl	8006928 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	480d      	ldr	r0, [pc, #52]	; (80078ac <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8007876:	f006 f919 	bl	800daac <LL_DLYB_SetDelay>
    status = HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff f95d 	bl	8006b3e <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689a      	ldr	r2, [r3, #8]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f022 0202 	bic.w	r2, r2, #2
 8007892:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8007894:	7bfb      	ldrb	r3, [r7, #15]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	420d1400 	.word	0x420d1400
 80078a4:	420cf000 	.word	0x420cf000
 80078a8:	420d2400 	.word	0x420d2400
 80078ac:	420cf400 	.word	0x420cf400

080078b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80078b4:	4b05      	ldr	r3, [pc, #20]	; (80078cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80078b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b8:	4a04      	ldr	r2, [pc, #16]	; (80078cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80078ba:	f043 0301 	orr.w	r3, r3, #1
 80078be:	6293      	str	r3, [r2, #40]	; 0x28
}
 80078c0:	bf00      	nop
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	46020800 	.word	0x46020800

080078d0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80078d8:	4b39      	ldr	r3, [pc, #228]	; (80079c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80078da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80078e0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d10b      	bne.n	8007902 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078f0:	d905      	bls.n	80078fe <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80078f2:	4b33      	ldr	r3, [pc, #204]	; (80079c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	4a32      	ldr	r2, [pc, #200]	; (80079c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80078f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078fc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	e057      	b.n	80079b2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007908:	d90a      	bls.n	8007920 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800790a:	4b2d      	ldr	r3, [pc, #180]	; (80079c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4313      	orrs	r3, r2
 8007916:	4a2a      	ldr	r2, [pc, #168]	; (80079c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800791c:	60d3      	str	r3, [r2, #12]
 800791e:	e007      	b.n	8007930 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8007920:	4b27      	ldr	r3, [pc, #156]	; (80079c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007928:	4925      	ldr	r1, [pc, #148]	; (80079c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4313      	orrs	r3, r2
 800792e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007930:	4b24      	ldr	r3, [pc, #144]	; (80079c4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a24      	ldr	r2, [pc, #144]	; (80079c8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007936:	fba2 2303 	umull	r2, r3, r2, r3
 800793a:	099b      	lsrs	r3, r3, #6
 800793c:	2232      	movs	r2, #50	; 0x32
 800793e:	fb02 f303 	mul.w	r3, r2, r3
 8007942:	4a21      	ldr	r2, [pc, #132]	; (80079c8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007944:	fba2 2303 	umull	r2, r3, r2, r3
 8007948:	099b      	lsrs	r3, r3, #6
 800794a:	3301      	adds	r3, #1
 800794c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800794e:	e002      	b.n	8007956 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3b01      	subs	r3, #1
 8007954:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007956:	4b1a      	ldr	r3, [pc, #104]	; (80079c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d102      	bne.n	8007968 <HAL_PWREx_ControlVoltageScaling+0x98>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1f3      	bne.n	8007950 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d01b      	beq.n	80079a6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800796e:	4b15      	ldr	r3, [pc, #84]	; (80079c4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a15      	ldr	r2, [pc, #84]	; (80079c8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007974:	fba2 2303 	umull	r2, r3, r2, r3
 8007978:	099b      	lsrs	r3, r3, #6
 800797a:	2232      	movs	r2, #50	; 0x32
 800797c:	fb02 f303 	mul.w	r3, r2, r3
 8007980:	4a11      	ldr	r2, [pc, #68]	; (80079c8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007982:	fba2 2303 	umull	r2, r3, r2, r3
 8007986:	099b      	lsrs	r3, r3, #6
 8007988:	3301      	adds	r3, #1
 800798a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800798c:	e002      	b.n	8007994 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3b01      	subs	r3, #1
 8007992:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007994:	4b0a      	ldr	r3, [pc, #40]	; (80079c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d102      	bne.n	80079a6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1f3      	bne.n	800798e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e000      	b.n	80079b2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	46020800 	.word	0x46020800
 80079c4:	20000d00 	.word	0x20000d00
 80079c8:	10624dd3 	.word	0x10624dd3

080079cc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80079cc:	b480      	push	{r7}
 80079ce:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80079d0:	4b04      	ldr	r3, [pc, #16]	; (80079e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80079d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80079d8:	4618      	mov	r0, r3
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	46020800 	.word	0x46020800

080079e8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80079f0:	4b22      	ldr	r3, [pc, #136]	; (8007a7c <HAL_PWREx_ConfigSupply+0x94>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a22      	ldr	r2, [pc, #136]	; (8007a80 <HAL_PWREx_ConfigSupply+0x98>)
 80079f6:	fba2 2303 	umull	r2, r3, r2, r3
 80079fa:	099b      	lsrs	r3, r3, #6
 80079fc:	2232      	movs	r2, #50	; 0x32
 80079fe:	fb02 f303 	mul.w	r3, r2, r3
 8007a02:	4a1f      	ldr	r2, [pc, #124]	; (8007a80 <HAL_PWREx_ConfigSupply+0x98>)
 8007a04:	fba2 2303 	umull	r2, r3, r2, r3
 8007a08:	099b      	lsrs	r3, r3, #6
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d113      	bne.n	8007a3c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007a14:	4b1b      	ldr	r3, [pc, #108]	; (8007a84 <HAL_PWREx_ConfigSupply+0x9c>)
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	4a1a      	ldr	r2, [pc, #104]	; (8007a84 <HAL_PWREx_ConfigSupply+0x9c>)
 8007a1a:	f023 0302 	bic.w	r3, r3, #2
 8007a1e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007a20:	e002      	b.n	8007a28 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3b01      	subs	r3, #1
 8007a26:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007a28:	4b16      	ldr	r3, [pc, #88]	; (8007a84 <HAL_PWREx_ConfigSupply+0x9c>)
 8007a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d116      	bne.n	8007a62 <HAL_PWREx_ConfigSupply+0x7a>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1f3      	bne.n	8007a22 <HAL_PWREx_ConfigSupply+0x3a>
 8007a3a:	e012      	b.n	8007a62 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007a3c:	4b11      	ldr	r3, [pc, #68]	; (8007a84 <HAL_PWREx_ConfigSupply+0x9c>)
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	4a10      	ldr	r2, [pc, #64]	; (8007a84 <HAL_PWREx_ConfigSupply+0x9c>)
 8007a42:	f043 0302 	orr.w	r3, r3, #2
 8007a46:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007a48:	e002      	b.n	8007a50 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007a50:	4b0c      	ldr	r3, [pc, #48]	; (8007a84 <HAL_PWREx_ConfigSupply+0x9c>)
 8007a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d102      	bne.n	8007a62 <HAL_PWREx_ConfigSupply+0x7a>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1f3      	bne.n	8007a4a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e000      	b.n	8007a6e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	20000d00 	.word	0x20000d00
 8007a80:	10624dd3 	.word	0x10624dd3
 8007a84:	46020800 	.word	0x46020800

08007a88 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8007a8c:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	4a04      	ldr	r2, [pc, #16]	; (8007aa4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007a92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a96:	6113      	str	r3, [r2, #16]
}
 8007a98:	bf00      	nop
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	46020800 	.word	0x46020800

08007aa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08e      	sub	sp, #56	; 0x38
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d102      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	f000 bec8 	b.w	8008852 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ac2:	4b99      	ldr	r3, [pc, #612]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	f003 030c 	and.w	r3, r3, #12
 8007aca:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007acc:	4b96      	ldr	r3, [pc, #600]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad0:	f003 0303 	and.w	r3, r3, #3
 8007ad4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0310 	and.w	r3, r3, #16
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 816c 	beq.w	8007dbc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d007      	beq.n	8007afa <HAL_RCC_OscConfig+0x52>
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	2b0c      	cmp	r3, #12
 8007aee:	f040 80de 	bne.w	8007cae <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	f040 80da 	bne.w	8007cae <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d102      	bne.n	8007b08 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	f000 bea5 	b.w	8008852 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b0c:	4b86      	ldr	r3, [pc, #536]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d004      	beq.n	8007b22 <HAL_RCC_OscConfig+0x7a>
 8007b18:	4b83      	ldr	r3, [pc, #524]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b20:	e005      	b.n	8007b2e <HAL_RCC_OscConfig+0x86>
 8007b22:	4b81      	ldr	r3, [pc, #516]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b28:	041b      	lsls	r3, r3, #16
 8007b2a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d255      	bcs.n	8007bde <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10a      	bne.n	8007b4e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f001 fa3d 	bl	8008fbc <RCC_SetFlashLatencyFromMSIRange>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	f000 be82 	b.w	8008852 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007b4e:	4b76      	ldr	r3, [pc, #472]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	4a75      	ldr	r2, [pc, #468]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007b54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b58:	6093      	str	r3, [r2, #8]
 8007b5a:	4b73      	ldr	r3, [pc, #460]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	4970      	ldr	r1, [pc, #448]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007b74:	d309      	bcc.n	8007b8a <HAL_RCC_OscConfig+0xe2>
 8007b76:	4b6c      	ldr	r3, [pc, #432]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f023 021f 	bic.w	r2, r3, #31
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	4969      	ldr	r1, [pc, #420]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	60cb      	str	r3, [r1, #12]
 8007b88:	e07e      	b.n	8007c88 <HAL_RCC_OscConfig+0x1e0>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	da0a      	bge.n	8007ba8 <HAL_RCC_OscConfig+0x100>
 8007b92:	4b65      	ldr	r3, [pc, #404]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	015b      	lsls	r3, r3, #5
 8007ba0:	4961      	ldr	r1, [pc, #388]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60cb      	str	r3, [r1, #12]
 8007ba6:	e06f      	b.n	8007c88 <HAL_RCC_OscConfig+0x1e0>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb0:	d30a      	bcc.n	8007bc8 <HAL_RCC_OscConfig+0x120>
 8007bb2:	4b5d      	ldr	r3, [pc, #372]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	029b      	lsls	r3, r3, #10
 8007bc0:	4959      	ldr	r1, [pc, #356]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	60cb      	str	r3, [r1, #12]
 8007bc6:	e05f      	b.n	8007c88 <HAL_RCC_OscConfig+0x1e0>
 8007bc8:	4b57      	ldr	r3, [pc, #348]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	03db      	lsls	r3, r3, #15
 8007bd6:	4954      	ldr	r1, [pc, #336]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	60cb      	str	r3, [r1, #12]
 8007bdc:	e054      	b.n	8007c88 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007bde:	4b52      	ldr	r3, [pc, #328]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	4a51      	ldr	r2, [pc, #324]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007be4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007be8:	6093      	str	r3, [r2, #8]
 8007bea:	4b4f      	ldr	r3, [pc, #316]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf6:	494c      	ldr	r1, [pc, #304]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007c04:	d309      	bcc.n	8007c1a <HAL_RCC_OscConfig+0x172>
 8007c06:	4b48      	ldr	r3, [pc, #288]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	f023 021f 	bic.w	r2, r3, #31
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	4945      	ldr	r1, [pc, #276]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60cb      	str	r3, [r1, #12]
 8007c18:	e028      	b.n	8007c6c <HAL_RCC_OscConfig+0x1c4>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	da0a      	bge.n	8007c38 <HAL_RCC_OscConfig+0x190>
 8007c22:	4b41      	ldr	r3, [pc, #260]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	015b      	lsls	r3, r3, #5
 8007c30:	493d      	ldr	r1, [pc, #244]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60cb      	str	r3, [r1, #12]
 8007c36:	e019      	b.n	8007c6c <HAL_RCC_OscConfig+0x1c4>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c40:	d30a      	bcc.n	8007c58 <HAL_RCC_OscConfig+0x1b0>
 8007c42:	4b39      	ldr	r3, [pc, #228]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	029b      	lsls	r3, r3, #10
 8007c50:	4935      	ldr	r1, [pc, #212]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60cb      	str	r3, [r1, #12]
 8007c56:	e009      	b.n	8007c6c <HAL_RCC_OscConfig+0x1c4>
 8007c58:	4b33      	ldr	r3, [pc, #204]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	03db      	lsls	r3, r3, #15
 8007c66:	4930      	ldr	r1, [pc, #192]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10a      	bne.n	8007c88 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	4618      	mov	r0, r3
 8007c78:	f001 f9a0 	bl	8008fbc <RCC_SetFlashLatencyFromMSIRange>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	f000 bde5 	b.w	8008852 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8007c88:	f001 f8de 	bl	8008e48 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007c8c:	4b27      	ldr	r3, [pc, #156]	; (8007d2c <HAL_RCC_OscConfig+0x284>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fb f9fb 	bl	800308c <HAL_InitTick>
 8007c96:	4603      	mov	r3, r0
 8007c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8007c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 808a 	beq.w	8007dba <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8007ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007caa:	f000 bdd2 	b.w	8008852 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d066      	beq.n	8007d84 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8007cb6:	4b1c      	ldr	r3, [pc, #112]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a1b      	ldr	r2, [pc, #108]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007cbc:	f043 0301 	orr.w	r3, r3, #1
 8007cc0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007cc2:	f7fb fb6b 	bl	800339c <HAL_GetTick>
 8007cc6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007cc8:	e009      	b.n	8007cde <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007cca:	f7fb fb67 	bl	800339c <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d902      	bls.n	8007cde <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	f000 bdba 	b.w	8008852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007cde:	4b12      	ldr	r3, [pc, #72]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0304 	and.w	r3, r3, #4
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d0ef      	beq.n	8007cca <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007cea:	4b0f      	ldr	r3, [pc, #60]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	4a0e      	ldr	r2, [pc, #56]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007cf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007cf4:	6093      	str	r3, [r2, #8]
 8007cf6:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d02:	4909      	ldr	r1, [pc, #36]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007d10:	d30e      	bcc.n	8007d30 <HAL_RCC_OscConfig+0x288>
 8007d12:	4b05      	ldr	r3, [pc, #20]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f023 021f 	bic.w	r2, r3, #31
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	4902      	ldr	r1, [pc, #8]	; (8007d28 <HAL_RCC_OscConfig+0x280>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60cb      	str	r3, [r1, #12]
 8007d24:	e04a      	b.n	8007dbc <HAL_RCC_OscConfig+0x314>
 8007d26:	bf00      	nop
 8007d28:	46020c00 	.word	0x46020c00
 8007d2c:	20000d04 	.word	0x20000d04
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	da0a      	bge.n	8007d4e <HAL_RCC_OscConfig+0x2a6>
 8007d38:	4b98      	ldr	r3, [pc, #608]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	015b      	lsls	r3, r3, #5
 8007d46:	4995      	ldr	r1, [pc, #596]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	60cb      	str	r3, [r1, #12]
 8007d4c:	e036      	b.n	8007dbc <HAL_RCC_OscConfig+0x314>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d56:	d30a      	bcc.n	8007d6e <HAL_RCC_OscConfig+0x2c6>
 8007d58:	4b90      	ldr	r3, [pc, #576]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	029b      	lsls	r3, r3, #10
 8007d66:	498d      	ldr	r1, [pc, #564]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	60cb      	str	r3, [r1, #12]
 8007d6c:	e026      	b.n	8007dbc <HAL_RCC_OscConfig+0x314>
 8007d6e:	4b8b      	ldr	r3, [pc, #556]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	03db      	lsls	r3, r3, #15
 8007d7c:	4987      	ldr	r1, [pc, #540]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	60cb      	str	r3, [r1, #12]
 8007d82:	e01b      	b.n	8007dbc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8007d84:	4b85      	ldr	r3, [pc, #532]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a84      	ldr	r2, [pc, #528]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007d8a:	f023 0301 	bic.w	r3, r3, #1
 8007d8e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007d90:	f7fb fb04 	bl	800339c <HAL_GetTick>
 8007d94:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007d96:	e009      	b.n	8007dac <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d98:	f7fb fb00 	bl	800339c <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d902      	bls.n	8007dac <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	f000 bd53 	b.w	8008852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007dac:	4b7b      	ldr	r3, [pc, #492]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 0304 	and.w	r3, r3, #4
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1ef      	bne.n	8007d98 <HAL_RCC_OscConfig+0x2f0>
 8007db8:	e000      	b.n	8007dbc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007dba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 808b 	beq.w	8007ee0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dcc:	2b08      	cmp	r3, #8
 8007dce:	d005      	beq.n	8007ddc <HAL_RCC_OscConfig+0x334>
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	2b0c      	cmp	r3, #12
 8007dd4:	d109      	bne.n	8007dea <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d106      	bne.n	8007dea <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d17d      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	f000 bd34 	b.w	8008852 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007df2:	d106      	bne.n	8007e02 <HAL_RCC_OscConfig+0x35a>
 8007df4:	4b69      	ldr	r3, [pc, #420]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a68      	ldr	r2, [pc, #416]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	e041      	b.n	8007e86 <HAL_RCC_OscConfig+0x3de>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e0a:	d112      	bne.n	8007e32 <HAL_RCC_OscConfig+0x38a>
 8007e0c:	4b63      	ldr	r3, [pc, #396]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a62      	ldr	r2, [pc, #392]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007e12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	4b60      	ldr	r3, [pc, #384]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a5f      	ldr	r2, [pc, #380]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007e1e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007e22:	6013      	str	r3, [r2, #0]
 8007e24:	4b5d      	ldr	r3, [pc, #372]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a5c      	ldr	r2, [pc, #368]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e2e:	6013      	str	r3, [r2, #0]
 8007e30:	e029      	b.n	8007e86 <HAL_RCC_OscConfig+0x3de>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8007e3a:	d112      	bne.n	8007e62 <HAL_RCC_OscConfig+0x3ba>
 8007e3c:	4b57      	ldr	r3, [pc, #348]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a56      	ldr	r2, [pc, #344]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e46:	6013      	str	r3, [r2, #0]
 8007e48:	4b54      	ldr	r3, [pc, #336]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a53      	ldr	r2, [pc, #332]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e52:	6013      	str	r3, [r2, #0]
 8007e54:	4b51      	ldr	r3, [pc, #324]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a50      	ldr	r2, [pc, #320]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	e011      	b.n	8007e86 <HAL_RCC_OscConfig+0x3de>
 8007e62:	4b4e      	ldr	r3, [pc, #312]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a4d      	ldr	r2, [pc, #308]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e6c:	6013      	str	r3, [r2, #0]
 8007e6e:	4b4b      	ldr	r3, [pc, #300]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a4a      	ldr	r2, [pc, #296]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e78:	6013      	str	r3, [r2, #0]
 8007e7a:	4b48      	ldr	r3, [pc, #288]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a47      	ldr	r2, [pc, #284]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007e80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007e84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d014      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8007e8e:	f7fb fa85 	bl	800339c <HAL_GetTick>
 8007e92:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e94:	e009      	b.n	8007eaa <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e96:	f7fb fa81 	bl	800339c <HAL_GetTick>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	2b64      	cmp	r3, #100	; 0x64
 8007ea2:	d902      	bls.n	8007eaa <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	f000 bcd4 	b.w	8008852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007eaa:	4b3c      	ldr	r3, [pc, #240]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0ef      	beq.n	8007e96 <HAL_RCC_OscConfig+0x3ee>
 8007eb6:	e013      	b.n	8007ee0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8007eb8:	f7fb fa70 	bl	800339c <HAL_GetTick>
 8007ebc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ebe:	e009      	b.n	8007ed4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ec0:	f7fb fa6c 	bl	800339c <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b64      	cmp	r3, #100	; 0x64
 8007ecc:	d902      	bls.n	8007ed4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	f000 bcbf 	b.w	8008852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ed4:	4b31      	ldr	r3, [pc, #196]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1ef      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0302 	and.w	r3, r3, #2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d05f      	beq.n	8007fac <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d005      	beq.n	8007efe <HAL_RCC_OscConfig+0x456>
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef4:	2b0c      	cmp	r3, #12
 8007ef6:	d114      	bne.n	8007f22 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d111      	bne.n	8007f22 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d102      	bne.n	8007f0c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	f000 bca3 	b.w	8008852 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007f0c:	4b23      	ldr	r3, [pc, #140]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	041b      	lsls	r3, r3, #16
 8007f1a:	4920      	ldr	r1, [pc, #128]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007f20:	e044      	b.n	8007fac <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d024      	beq.n	8007f74 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8007f2a:	4b1c      	ldr	r3, [pc, #112]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a1b      	ldr	r2, [pc, #108]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f34:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007f36:	f7fb fa31 	bl	800339c <HAL_GetTick>
 8007f3a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f3c:	e009      	b.n	8007f52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f3e:	f7fb fa2d 	bl	800339c <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d902      	bls.n	8007f52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	f000 bc80 	b.w	8008852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f52:	4b12      	ldr	r3, [pc, #72]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d0ef      	beq.n	8007f3e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007f5e:	4b0f      	ldr	r3, [pc, #60]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	041b      	lsls	r3, r3, #16
 8007f6c:	490b      	ldr	r1, [pc, #44]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	610b      	str	r3, [r1, #16]
 8007f72:	e01b      	b.n	8007fac <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8007f74:	4b09      	ldr	r3, [pc, #36]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a08      	ldr	r2, [pc, #32]	; (8007f9c <HAL_RCC_OscConfig+0x4f4>)
 8007f7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f7e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007f80:	f7fb fa0c 	bl	800339c <HAL_GetTick>
 8007f84:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f86:	e00b      	b.n	8007fa0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f88:	f7fb fa08 	bl	800339c <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d904      	bls.n	8007fa0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	f000 bc5b 	b.w	8008852 <HAL_RCC_OscConfig+0xdaa>
 8007f9c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007fa0:	4baf      	ldr	r3, [pc, #700]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1ed      	bne.n	8007f88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 0308 	and.w	r3, r3, #8
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 80c8 	beq.w	800814a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fc0:	4ba7      	ldr	r3, [pc, #668]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 8007fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fc6:	f003 0304 	and.w	r3, r3, #4
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d111      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fce:	4ba4      	ldr	r3, [pc, #656]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 8007fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fd4:	4aa2      	ldr	r2, [pc, #648]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 8007fd6:	f043 0304 	orr.w	r3, r3, #4
 8007fda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007fde:	4ba0      	ldr	r3, [pc, #640]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 8007fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	617b      	str	r3, [r7, #20]
 8007fea:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8007fec:	2301      	movs	r3, #1
 8007fee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007ff2:	4b9c      	ldr	r3, [pc, #624]	; (8008264 <HAL_RCC_OscConfig+0x7bc>)
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d119      	bne.n	8008032 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007ffe:	4b99      	ldr	r3, [pc, #612]	; (8008264 <HAL_RCC_OscConfig+0x7bc>)
 8008000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008002:	4a98      	ldr	r2, [pc, #608]	; (8008264 <HAL_RCC_OscConfig+0x7bc>)
 8008004:	f043 0301 	orr.w	r3, r3, #1
 8008008:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800800a:	f7fb f9c7 	bl	800339c <HAL_GetTick>
 800800e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008010:	e009      	b.n	8008026 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008012:	f7fb f9c3 	bl	800339c <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	2b02      	cmp	r3, #2
 800801e:	d902      	bls.n	8008026 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	f000 bc16 	b.w	8008852 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008026:	4b8f      	ldr	r3, [pc, #572]	; (8008264 <HAL_RCC_OscConfig+0x7bc>)
 8008028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	d0ef      	beq.n	8008012 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d05f      	beq.n	80080fa <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800803a:	4b89      	ldr	r3, [pc, #548]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 800803c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008040:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	699a      	ldr	r2, [r3, #24]
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800804c:	429a      	cmp	r2, r3
 800804e:	d037      	beq.n	80080c0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d006      	beq.n	8008068 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e3f4      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d01b      	beq.n	80080aa <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8008072:	4b7b      	ldr	r3, [pc, #492]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 8008074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008078:	4a79      	ldr	r2, [pc, #484]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 800807a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800807e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8008082:	f7fb f98b 	bl	800339c <HAL_GetTick>
 8008086:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008088:	e008      	b.n	800809c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800808a:	f7fb f987 	bl	800339c <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	2b05      	cmp	r3, #5
 8008096:	d901      	bls.n	800809c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e3da      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800809c:	4b70      	ldr	r3, [pc, #448]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 800809e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1ef      	bne.n	800808a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80080aa:	4b6d      	ldr	r3, [pc, #436]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 80080ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080b0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	4969      	ldr	r1, [pc, #420]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80080c0:	4b67      	ldr	r3, [pc, #412]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 80080c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080c6:	4a66      	ldr	r2, [pc, #408]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 80080c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80080d0:	f7fb f964 	bl	800339c <HAL_GetTick>
 80080d4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80080d6:	e008      	b.n	80080ea <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080d8:	f7fb f960 	bl	800339c <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	2b05      	cmp	r3, #5
 80080e4:	d901      	bls.n	80080ea <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e3b3      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80080ea:	4b5d      	ldr	r3, [pc, #372]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 80080ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d0ef      	beq.n	80080d8 <HAL_RCC_OscConfig+0x630>
 80080f8:	e01b      	b.n	8008132 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80080fa:	4b59      	ldr	r3, [pc, #356]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 80080fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008100:	4a57      	ldr	r2, [pc, #348]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 8008102:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8008106:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800810a:	f7fb f947 	bl	800339c <HAL_GetTick>
 800810e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008110:	e008      	b.n	8008124 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008112:	f7fb f943 	bl	800339c <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	2b05      	cmp	r3, #5
 800811e:	d901      	bls.n	8008124 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e396      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008124:	4b4e      	ldr	r3, [pc, #312]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 8008126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800812a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1ef      	bne.n	8008112 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008132:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008136:	2b01      	cmp	r3, #1
 8008138:	d107      	bne.n	800814a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800813a:	4b49      	ldr	r3, [pc, #292]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 800813c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008140:	4a47      	ldr	r2, [pc, #284]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 8008142:	f023 0304 	bic.w	r3, r3, #4
 8008146:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0304 	and.w	r3, r3, #4
 8008152:	2b00      	cmp	r3, #0
 8008154:	f000 8111 	beq.w	800837a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8008158:	2300      	movs	r3, #0
 800815a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800815e:	4b40      	ldr	r3, [pc, #256]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 8008160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b00      	cmp	r3, #0
 800816a:	d111      	bne.n	8008190 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800816c:	4b3c      	ldr	r3, [pc, #240]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 800816e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008172:	4a3b      	ldr	r2, [pc, #236]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 8008174:	f043 0304 	orr.w	r3, r3, #4
 8008178:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800817c:	4b38      	ldr	r3, [pc, #224]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 800817e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008182:	f003 0304 	and.w	r3, r3, #4
 8008186:	613b      	str	r3, [r7, #16]
 8008188:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800818a:	2301      	movs	r3, #1
 800818c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008190:	4b34      	ldr	r3, [pc, #208]	; (8008264 <HAL_RCC_OscConfig+0x7bc>)
 8008192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b00      	cmp	r3, #0
 800819a:	d118      	bne.n	80081ce <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800819c:	4b31      	ldr	r3, [pc, #196]	; (8008264 <HAL_RCC_OscConfig+0x7bc>)
 800819e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a0:	4a30      	ldr	r2, [pc, #192]	; (8008264 <HAL_RCC_OscConfig+0x7bc>)
 80081a2:	f043 0301 	orr.w	r3, r3, #1
 80081a6:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081a8:	f7fb f8f8 	bl	800339c <HAL_GetTick>
 80081ac:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80081ae:	e008      	b.n	80081c2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081b0:	f7fb f8f4 	bl	800339c <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d901      	bls.n	80081c2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e347      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80081c2:	4b28      	ldr	r3, [pc, #160]	; (8008264 <HAL_RCC_OscConfig+0x7bc>)
 80081c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d0f0      	beq.n	80081b0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d01f      	beq.n	800821a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	f003 0304 	and.w	r3, r3, #4
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d010      	beq.n	8008208 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80081e6:	4b1e      	ldr	r3, [pc, #120]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 80081e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081ec:	4a1c      	ldr	r2, [pc, #112]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 80081ee:	f043 0304 	orr.w	r3, r3, #4
 80081f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80081f6:	4b1a      	ldr	r3, [pc, #104]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 80081f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081fc:	4a18      	ldr	r2, [pc, #96]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 80081fe:	f043 0301 	orr.w	r3, r3, #1
 8008202:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008206:	e018      	b.n	800823a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008208:	4b15      	ldr	r3, [pc, #84]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 800820a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800820e:	4a14      	ldr	r2, [pc, #80]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 8008210:	f043 0301 	orr.w	r3, r3, #1
 8008214:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008218:	e00f      	b.n	800823a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800821a:	4b11      	ldr	r3, [pc, #68]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 800821c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008220:	4a0f      	ldr	r2, [pc, #60]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 8008222:	f023 0301 	bic.w	r3, r3, #1
 8008226:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800822a:	4b0d      	ldr	r3, [pc, #52]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 800822c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008230:	4a0b      	ldr	r2, [pc, #44]	; (8008260 <HAL_RCC_OscConfig+0x7b8>)
 8008232:	f023 0304 	bic.w	r3, r3, #4
 8008236:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d057      	beq.n	80082f2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8008242:	f7fb f8ab 	bl	800339c <HAL_GetTick>
 8008246:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008248:	e00e      	b.n	8008268 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800824a:	f7fb f8a7 	bl	800339c <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	f241 3288 	movw	r2, #5000	; 0x1388
 8008258:	4293      	cmp	r3, r2
 800825a:	d905      	bls.n	8008268 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e2f8      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
 8008260:	46020c00 	.word	0x46020c00
 8008264:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008268:	4b9c      	ldr	r3, [pc, #624]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 800826a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800826e:	f003 0302 	and.w	r3, r3, #2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0e9      	beq.n	800824a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800827e:	2b00      	cmp	r3, #0
 8008280:	d01b      	beq.n	80082ba <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008282:	4b96      	ldr	r3, [pc, #600]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 8008284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008288:	4a94      	ldr	r2, [pc, #592]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 800828a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800828e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008292:	e00a      	b.n	80082aa <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008294:	f7fb f882 	bl	800339c <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d901      	bls.n	80082aa <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e2d3      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80082aa:	4b8c      	ldr	r3, [pc, #560]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 80082ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80082b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d0ed      	beq.n	8008294 <HAL_RCC_OscConfig+0x7ec>
 80082b8:	e053      	b.n	8008362 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80082ba:	4b88      	ldr	r3, [pc, #544]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 80082bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80082c0:	4a86      	ldr	r2, [pc, #536]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 80082c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80082ca:	e00a      	b.n	80082e2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082cc:	f7fb f866 	bl	800339c <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082da:	4293      	cmp	r3, r2
 80082dc:	d901      	bls.n	80082e2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e2b7      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80082e2:	4b7e      	ldr	r3, [pc, #504]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 80082e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80082e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1ed      	bne.n	80082cc <HAL_RCC_OscConfig+0x824>
 80082f0:	e037      	b.n	8008362 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80082f2:	f7fb f853 	bl	800339c <HAL_GetTick>
 80082f6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80082f8:	e00a      	b.n	8008310 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082fa:	f7fb f84f 	bl	800339c <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	f241 3288 	movw	r2, #5000	; 0x1388
 8008308:	4293      	cmp	r3, r2
 800830a:	d901      	bls.n	8008310 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e2a0      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008310:	4b72      	ldr	r3, [pc, #456]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 8008312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008316:	f003 0302 	and.w	r3, r3, #2
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1ed      	bne.n	80082fa <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800831e:	4b6f      	ldr	r3, [pc, #444]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 8008320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008328:	2b00      	cmp	r3, #0
 800832a:	d01a      	beq.n	8008362 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800832c:	4b6b      	ldr	r3, [pc, #428]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 800832e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008332:	4a6a      	ldr	r2, [pc, #424]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 8008334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008338:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800833c:	e00a      	b.n	8008354 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800833e:	f7fb f82d 	bl	800339c <HAL_GetTick>
 8008342:	4602      	mov	r2, r0
 8008344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	f241 3288 	movw	r2, #5000	; 0x1388
 800834c:	4293      	cmp	r3, r2
 800834e:	d901      	bls.n	8008354 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e27e      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008354:	4b61      	ldr	r3, [pc, #388]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 8008356:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800835a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1ed      	bne.n	800833e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008362:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008366:	2b01      	cmp	r3, #1
 8008368:	d107      	bne.n	800837a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800836a:	4b5c      	ldr	r3, [pc, #368]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 800836c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008370:	4a5a      	ldr	r2, [pc, #360]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 8008372:	f023 0304 	bic.w	r3, r3, #4
 8008376:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0320 	and.w	r3, r3, #32
 8008382:	2b00      	cmp	r3, #0
 8008384:	d036      	beq.n	80083f4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838a:	2b00      	cmp	r3, #0
 800838c:	d019      	beq.n	80083c2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800838e:	4b53      	ldr	r3, [pc, #332]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a52      	ldr	r2, [pc, #328]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 8008394:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008398:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800839a:	f7fa ffff 	bl	800339c <HAL_GetTick>
 800839e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80083a0:	e008      	b.n	80083b4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083a2:	f7fa fffb 	bl	800339c <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d901      	bls.n	80083b4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e24e      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80083b4:	4b49      	ldr	r3, [pc, #292]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0f0      	beq.n	80083a2 <HAL_RCC_OscConfig+0x8fa>
 80083c0:	e018      	b.n	80083f4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80083c2:	4b46      	ldr	r3, [pc, #280]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a45      	ldr	r2, [pc, #276]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 80083c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083cc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80083ce:	f7fa ffe5 	bl	800339c <HAL_GetTick>
 80083d2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80083d4:	e008      	b.n	80083e8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083d6:	f7fa ffe1 	bl	800339c <HAL_GetTick>
 80083da:	4602      	mov	r2, r0
 80083dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d901      	bls.n	80083e8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e234      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80083e8:	4b3c      	ldr	r3, [pc, #240]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1f0      	bne.n	80083d6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d036      	beq.n	800846e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008404:	2b00      	cmp	r3, #0
 8008406:	d019      	beq.n	800843c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8008408:	4b34      	ldr	r3, [pc, #208]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a33      	ldr	r2, [pc, #204]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 800840e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008412:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008414:	f7fa ffc2 	bl	800339c <HAL_GetTick>
 8008418:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800841a:	e008      	b.n	800842e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800841c:	f7fa ffbe 	bl	800339c <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	2b02      	cmp	r3, #2
 8008428:	d901      	bls.n	800842e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e211      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800842e:	4b2b      	ldr	r3, [pc, #172]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d0f0      	beq.n	800841c <HAL_RCC_OscConfig+0x974>
 800843a:	e018      	b.n	800846e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800843c:	4b27      	ldr	r3, [pc, #156]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a26      	ldr	r2, [pc, #152]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 8008442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008446:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008448:	f7fa ffa8 	bl	800339c <HAL_GetTick>
 800844c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800844e:	e008      	b.n	8008462 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008450:	f7fa ffa4 	bl	800339c <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e1f7      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008462:	4b1e      	ldr	r3, [pc, #120]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1f0      	bne.n	8008450 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008476:	2b00      	cmp	r3, #0
 8008478:	d07f      	beq.n	800857a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847e:	2b00      	cmp	r3, #0
 8008480:	d062      	beq.n	8008548 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8008482:	4b16      	ldr	r3, [pc, #88]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	4a15      	ldr	r2, [pc, #84]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 8008488:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800848c:	6093      	str	r3, [r2, #8]
 800848e:	4b13      	ldr	r3, [pc, #76]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849a:	4910      	ldr	r1, [pc, #64]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 800849c:	4313      	orrs	r3, r2
 800849e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80084a8:	d309      	bcc.n	80084be <HAL_RCC_OscConfig+0xa16>
 80084aa:	4b0c      	ldr	r3, [pc, #48]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	f023 021f 	bic.w	r2, r3, #31
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	4909      	ldr	r1, [pc, #36]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	60cb      	str	r3, [r1, #12]
 80084bc:	e02a      	b.n	8008514 <HAL_RCC_OscConfig+0xa6c>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	da0c      	bge.n	80084e0 <HAL_RCC_OscConfig+0xa38>
 80084c6:	4b05      	ldr	r3, [pc, #20]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	015b      	lsls	r3, r3, #5
 80084d4:	4901      	ldr	r1, [pc, #4]	; (80084dc <HAL_RCC_OscConfig+0xa34>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	60cb      	str	r3, [r1, #12]
 80084da:	e01b      	b.n	8008514 <HAL_RCC_OscConfig+0xa6c>
 80084dc:	46020c00 	.word	0x46020c00
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e8:	d30a      	bcc.n	8008500 <HAL_RCC_OscConfig+0xa58>
 80084ea:	4ba1      	ldr	r3, [pc, #644]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	029b      	lsls	r3, r3, #10
 80084f8:	499d      	ldr	r1, [pc, #628]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	60cb      	str	r3, [r1, #12]
 80084fe:	e009      	b.n	8008514 <HAL_RCC_OscConfig+0xa6c>
 8008500:	4b9b      	ldr	r3, [pc, #620]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	03db      	lsls	r3, r3, #15
 800850e:	4998      	ldr	r1, [pc, #608]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 8008510:	4313      	orrs	r3, r2
 8008512:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8008514:	4b96      	ldr	r3, [pc, #600]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a95      	ldr	r2, [pc, #596]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 800851a:	f043 0310 	orr.w	r3, r3, #16
 800851e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008520:	f7fa ff3c 	bl	800339c <HAL_GetTick>
 8008524:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008526:	e008      	b.n	800853a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008528:	f7fa ff38 	bl	800339c <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	2b02      	cmp	r3, #2
 8008534:	d901      	bls.n	800853a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e18b      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800853a:	4b8d      	ldr	r3, [pc, #564]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0320 	and.w	r3, r3, #32
 8008542:	2b00      	cmp	r3, #0
 8008544:	d0f0      	beq.n	8008528 <HAL_RCC_OscConfig+0xa80>
 8008546:	e018      	b.n	800857a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8008548:	4b89      	ldr	r3, [pc, #548]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a88      	ldr	r2, [pc, #544]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 800854e:	f023 0310 	bic.w	r3, r3, #16
 8008552:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008554:	f7fa ff22 	bl	800339c <HAL_GetTick>
 8008558:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800855a:	e008      	b.n	800856e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800855c:	f7fa ff1e 	bl	800339c <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	2b02      	cmp	r3, #2
 8008568:	d901      	bls.n	800856e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e171      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800856e:	4b80      	ldr	r3, [pc, #512]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0320 	and.w	r3, r3, #32
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1f0      	bne.n	800855c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 8166 	beq.w	8008850 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008584:	2300      	movs	r3, #0
 8008586:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800858a:	4b79      	ldr	r3, [pc, #484]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	f003 030c 	and.w	r3, r3, #12
 8008592:	2b0c      	cmp	r3, #12
 8008594:	f000 80f2 	beq.w	800877c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859c:	2b02      	cmp	r3, #2
 800859e:	f040 80c5 	bne.w	800872c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80085a2:	4b73      	ldr	r3, [pc, #460]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a72      	ldr	r2, [pc, #456]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80085a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085ac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80085ae:	f7fa fef5 	bl	800339c <HAL_GetTick>
 80085b2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80085b4:	e008      	b.n	80085c8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085b6:	f7fa fef1 	bl	800339c <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d901      	bls.n	80085c8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e144      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80085c8:	4b69      	ldr	r3, [pc, #420]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1f0      	bne.n	80085b6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085d4:	4b66      	ldr	r3, [pc, #408]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80085d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085da:	f003 0304 	and.w	r3, r3, #4
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d111      	bne.n	8008606 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80085e2:	4b63      	ldr	r3, [pc, #396]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80085e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085e8:	4a61      	ldr	r2, [pc, #388]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80085ea:	f043 0304 	orr.w	r3, r3, #4
 80085ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80085f2:	4b5f      	ldr	r3, [pc, #380]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80085f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085f8:	f003 0304 	and.w	r3, r3, #4
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8008600:	2301      	movs	r3, #1
 8008602:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8008606:	4b5b      	ldr	r3, [pc, #364]	; (8008774 <HAL_RCC_OscConfig+0xccc>)
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800860e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008612:	d102      	bne.n	800861a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8008614:	2301      	movs	r3, #1
 8008616:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800861a:	4b56      	ldr	r3, [pc, #344]	; (8008774 <HAL_RCC_OscConfig+0xccc>)
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	4a55      	ldr	r2, [pc, #340]	; (8008774 <HAL_RCC_OscConfig+0xccc>)
 8008620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008624:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8008626:	4b52      	ldr	r3, [pc, #328]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 8008628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800862a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800862e:	f023 0303 	bic.w	r3, r3, #3
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800863a:	3a01      	subs	r2, #1
 800863c:	0212      	lsls	r2, r2, #8
 800863e:	4311      	orrs	r1, r2
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008644:	430a      	orrs	r2, r1
 8008646:	494a      	ldr	r1, [pc, #296]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 8008648:	4313      	orrs	r3, r2
 800864a:	628b      	str	r3, [r1, #40]	; 0x28
 800864c:	4b48      	ldr	r3, [pc, #288]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 800864e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008650:	4b49      	ldr	r3, [pc, #292]	; (8008778 <HAL_RCC_OscConfig+0xcd0>)
 8008652:	4013      	ands	r3, r2
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008658:	3a01      	subs	r2, #1
 800865a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008662:	3a01      	subs	r2, #1
 8008664:	0252      	lsls	r2, r2, #9
 8008666:	b292      	uxth	r2, r2
 8008668:	4311      	orrs	r1, r2
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800866e:	3a01      	subs	r2, #1
 8008670:	0412      	lsls	r2, r2, #16
 8008672:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008676:	4311      	orrs	r1, r2
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800867c:	3a01      	subs	r2, #1
 800867e:	0612      	lsls	r2, r2, #24
 8008680:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008684:	430a      	orrs	r2, r1
 8008686:	493a      	ldr	r1, [pc, #232]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 8008688:	4313      	orrs	r3, r2
 800868a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800868c:	4b38      	ldr	r3, [pc, #224]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 800868e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008690:	4a37      	ldr	r2, [pc, #220]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 8008692:	f023 0310 	bic.w	r3, r3, #16
 8008696:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800869c:	4a34      	ldr	r2, [pc, #208]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 800869e:	00db      	lsls	r3, r3, #3
 80086a0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80086a2:	4b33      	ldr	r3, [pc, #204]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80086a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a6:	4a32      	ldr	r2, [pc, #200]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80086a8:	f043 0310 	orr.w	r3, r3, #16
 80086ac:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80086ae:	4b30      	ldr	r3, [pc, #192]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80086b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b2:	f023 020c 	bic.w	r2, r3, #12
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ba:	492d      	ldr	r1, [pc, #180]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80086bc:	4313      	orrs	r3, r2
 80086be:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80086c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d105      	bne.n	80086d4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80086c8:	4b2a      	ldr	r3, [pc, #168]	; (8008774 <HAL_RCC_OscConfig+0xccc>)
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	4a29      	ldr	r2, [pc, #164]	; (8008774 <HAL_RCC_OscConfig+0xccc>)
 80086ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086d2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80086d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d107      	bne.n	80086ec <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80086dc:	4b24      	ldr	r3, [pc, #144]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80086de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086e2:	4a23      	ldr	r2, [pc, #140]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80086e4:	f023 0304 	bic.w	r3, r3, #4
 80086e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80086ec:	4b20      	ldr	r3, [pc, #128]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80086ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f0:	4a1f      	ldr	r2, [pc, #124]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80086f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086f6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80086f8:	4b1d      	ldr	r3, [pc, #116]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a1c      	ldr	r2, [pc, #112]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 80086fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008702:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008704:	f7fa fe4a 	bl	800339c <HAL_GetTick>
 8008708:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800870a:	e008      	b.n	800871e <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800870c:	f7fa fe46 	bl	800339c <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	2b02      	cmp	r3, #2
 8008718:	d901      	bls.n	800871e <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e099      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800871e:	4b14      	ldr	r3, [pc, #80]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d0f0      	beq.n	800870c <HAL_RCC_OscConfig+0xc64>
 800872a:	e091      	b.n	8008850 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800872c:	4b10      	ldr	r3, [pc, #64]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a0f      	ldr	r2, [pc, #60]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 8008732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008736:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008738:	f7fa fe30 	bl	800339c <HAL_GetTick>
 800873c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800873e:	e008      	b.n	8008752 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008740:	f7fa fe2c 	bl	800339c <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	2b02      	cmp	r3, #2
 800874c:	d901      	bls.n	8008752 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e07f      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008752:	4b07      	ldr	r3, [pc, #28]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1f0      	bne.n	8008740 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800875e:	4b04      	ldr	r3, [pc, #16]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 8008760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008762:	4a03      	ldr	r2, [pc, #12]	; (8008770 <HAL_RCC_OscConfig+0xcc8>)
 8008764:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008768:	f023 0303 	bic.w	r3, r3, #3
 800876c:	6293      	str	r3, [r2, #40]	; 0x28
 800876e:	e06f      	b.n	8008850 <HAL_RCC_OscConfig+0xda8>
 8008770:	46020c00 	.word	0x46020c00
 8008774:	46020800 	.word	0x46020800
 8008778:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800877c:	4b37      	ldr	r3, [pc, #220]	; (800885c <HAL_RCC_OscConfig+0xdb4>)
 800877e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008780:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008782:	4b36      	ldr	r3, [pc, #216]	; (800885c <HAL_RCC_OscConfig+0xdb4>)
 8008784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008786:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878c:	2b01      	cmp	r3, #1
 800878e:	d039      	beq.n	8008804 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	f003 0203 	and.w	r2, r3, #3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800879a:	429a      	cmp	r2, r3
 800879c:	d132      	bne.n	8008804 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	0a1b      	lsrs	r3, r3, #8
 80087a2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087aa:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d129      	bne.n	8008804 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d122      	bne.n	8008804 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087c8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d11a      	bne.n	8008804 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	0a5b      	lsrs	r3, r3, #9
 80087d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087dc:	429a      	cmp	r2, r3
 80087de:	d111      	bne.n	8008804 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	0c1b      	lsrs	r3, r3, #16
 80087e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ec:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d108      	bne.n	8008804 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	0e1b      	lsrs	r3, r3, #24
 80087f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fe:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008800:	429a      	cmp	r2, r3
 8008802:	d001      	beq.n	8008808 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e024      	b.n	8008852 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008808:	4b14      	ldr	r3, [pc, #80]	; (800885c <HAL_RCC_OscConfig+0xdb4>)
 800880a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880c:	08db      	lsrs	r3, r3, #3
 800880e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008816:	429a      	cmp	r2, r3
 8008818:	d01a      	beq.n	8008850 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800881a:	4b10      	ldr	r3, [pc, #64]	; (800885c <HAL_RCC_OscConfig+0xdb4>)
 800881c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881e:	4a0f      	ldr	r2, [pc, #60]	; (800885c <HAL_RCC_OscConfig+0xdb4>)
 8008820:	f023 0310 	bic.w	r3, r3, #16
 8008824:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008826:	f7fa fdb9 	bl	800339c <HAL_GetTick>
 800882a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800882c:	bf00      	nop
 800882e:	f7fa fdb5 	bl	800339c <HAL_GetTick>
 8008832:	4602      	mov	r2, r0
 8008834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008836:	4293      	cmp	r3, r2
 8008838:	d0f9      	beq.n	800882e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800883e:	4a07      	ldr	r2, [pc, #28]	; (800885c <HAL_RCC_OscConfig+0xdb4>)
 8008840:	00db      	lsls	r3, r3, #3
 8008842:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008844:	4b05      	ldr	r3, [pc, #20]	; (800885c <HAL_RCC_OscConfig+0xdb4>)
 8008846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008848:	4a04      	ldr	r2, [pc, #16]	; (800885c <HAL_RCC_OscConfig+0xdb4>)
 800884a:	f043 0310 	orr.w	r3, r3, #16
 800884e:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3738      	adds	r7, #56	; 0x38
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	46020c00 	.word	0x46020c00

08008860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e1d9      	b.n	8008c28 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008874:	4b9b      	ldr	r3, [pc, #620]	; (8008ae4 <HAL_RCC_ClockConfig+0x284>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 030f 	and.w	r3, r3, #15
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	429a      	cmp	r2, r3
 8008880:	d910      	bls.n	80088a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008882:	4b98      	ldr	r3, [pc, #608]	; (8008ae4 <HAL_RCC_ClockConfig+0x284>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f023 020f 	bic.w	r2, r3, #15
 800888a:	4996      	ldr	r1, [pc, #600]	; (8008ae4 <HAL_RCC_ClockConfig+0x284>)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	4313      	orrs	r3, r2
 8008890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008892:	4b94      	ldr	r3, [pc, #592]	; (8008ae4 <HAL_RCC_ClockConfig+0x284>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 030f 	and.w	r3, r3, #15
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	429a      	cmp	r2, r3
 800889e:	d001      	beq.n	80088a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e1c1      	b.n	8008c28 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0310 	and.w	r3, r3, #16
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d010      	beq.n	80088d2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	695a      	ldr	r2, [r3, #20]
 80088b4:	4b8c      	ldr	r3, [pc, #560]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 80088b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088bc:	429a      	cmp	r2, r3
 80088be:	d908      	bls.n	80088d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80088c0:	4b89      	ldr	r3, [pc, #548]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 80088c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	4986      	ldr	r1, [pc, #536]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 80088ce:	4313      	orrs	r3, r2
 80088d0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0308 	and.w	r3, r3, #8
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d012      	beq.n	8008904 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	691a      	ldr	r2, [r3, #16]
 80088e2:	4b81      	ldr	r3, [pc, #516]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	091b      	lsrs	r3, r3, #4
 80088e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d909      	bls.n	8008904 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80088f0:	4b7d      	ldr	r3, [pc, #500]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 80088f2:	6a1b      	ldr	r3, [r3, #32]
 80088f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	011b      	lsls	r3, r3, #4
 80088fe:	497a      	ldr	r1, [pc, #488]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 8008900:	4313      	orrs	r3, r2
 8008902:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0304 	and.w	r3, r3, #4
 800890c:	2b00      	cmp	r3, #0
 800890e:	d010      	beq.n	8008932 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68da      	ldr	r2, [r3, #12]
 8008914:	4b74      	ldr	r3, [pc, #464]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 8008916:	6a1b      	ldr	r3, [r3, #32]
 8008918:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800891c:	429a      	cmp	r2, r3
 800891e:	d908      	bls.n	8008932 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008920:	4b71      	ldr	r3, [pc, #452]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 8008922:	6a1b      	ldr	r3, [r3, #32]
 8008924:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	496e      	ldr	r1, [pc, #440]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 800892e:	4313      	orrs	r3, r2
 8008930:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	2b00      	cmp	r3, #0
 800893c:	d010      	beq.n	8008960 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	689a      	ldr	r2, [r3, #8]
 8008942:	4b69      	ldr	r3, [pc, #420]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 8008944:	6a1b      	ldr	r3, [r3, #32]
 8008946:	f003 030f 	and.w	r3, r3, #15
 800894a:	429a      	cmp	r2, r3
 800894c:	d908      	bls.n	8008960 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800894e:	4b66      	ldr	r3, [pc, #408]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	f023 020f 	bic.w	r2, r3, #15
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	4963      	ldr	r1, [pc, #396]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 800895c:	4313      	orrs	r3, r2
 800895e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0301 	and.w	r3, r3, #1
 8008968:	2b00      	cmp	r3, #0
 800896a:	f000 80d2 	beq.w	8008b12 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800896e:	2300      	movs	r3, #0
 8008970:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	2b03      	cmp	r3, #3
 8008978:	d143      	bne.n	8008a02 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800897a:	4b5b      	ldr	r3, [pc, #364]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 800897c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008980:	f003 0304 	and.w	r3, r3, #4
 8008984:	2b00      	cmp	r3, #0
 8008986:	d110      	bne.n	80089aa <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008988:	4b57      	ldr	r3, [pc, #348]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 800898a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800898e:	4a56      	ldr	r2, [pc, #344]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 8008990:	f043 0304 	orr.w	r3, r3, #4
 8008994:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008998:	4b53      	ldr	r3, [pc, #332]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 800899a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800899e:	f003 0304 	and.w	r3, r3, #4
 80089a2:	60bb      	str	r3, [r7, #8]
 80089a4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80089a6:	2301      	movs	r3, #1
 80089a8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80089aa:	f7fa fcf7 	bl	800339c <HAL_GetTick>
 80089ae:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80089b0:	4b4e      	ldr	r3, [pc, #312]	; (8008aec <HAL_RCC_ClockConfig+0x28c>)
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00f      	beq.n	80089dc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80089bc:	e008      	b.n	80089d0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80089be:	f7fa fced 	bl	800339c <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d901      	bls.n	80089d0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e12b      	b.n	8008c28 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80089d0:	4b46      	ldr	r3, [pc, #280]	; (8008aec <HAL_RCC_ClockConfig+0x28c>)
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d0f0      	beq.n	80089be <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d107      	bne.n	80089f2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80089e2:	4b41      	ldr	r3, [pc, #260]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 80089e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089e8:	4a3f      	ldr	r2, [pc, #252]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 80089ea:	f023 0304 	bic.w	r3, r3, #4
 80089ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80089f2:	4b3d      	ldr	r3, [pc, #244]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d121      	bne.n	8008a42 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e112      	b.n	8008c28 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d107      	bne.n	8008a1a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008a0a:	4b37      	ldr	r3, [pc, #220]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d115      	bne.n	8008a42 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e106      	b.n	8008c28 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d107      	bne.n	8008a32 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008a22:	4b31      	ldr	r3, [pc, #196]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0304 	and.w	r3, r3, #4
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d109      	bne.n	8008a42 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e0fa      	b.n	8008c28 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a32:	4b2d      	ldr	r3, [pc, #180]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d101      	bne.n	8008a42 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e0f2      	b.n	8008c28 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8008a42:	4b29      	ldr	r3, [pc, #164]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 8008a44:	69db      	ldr	r3, [r3, #28]
 8008a46:	f023 0203 	bic.w	r2, r3, #3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	4926      	ldr	r1, [pc, #152]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8008a54:	f7fa fca2 	bl	800339c <HAL_GetTick>
 8008a58:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d112      	bne.n	8008a88 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a62:	e00a      	b.n	8008a7a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a64:	f7fa fc9a 	bl	800339c <HAL_GetTick>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d901      	bls.n	8008a7a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e0d6      	b.n	8008c28 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a7a:	4b1b      	ldr	r3, [pc, #108]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	f003 030c 	and.w	r3, r3, #12
 8008a82:	2b0c      	cmp	r3, #12
 8008a84:	d1ee      	bne.n	8008a64 <HAL_RCC_ClockConfig+0x204>
 8008a86:	e044      	b.n	8008b12 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d112      	bne.n	8008ab6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a90:	e00a      	b.n	8008aa8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a92:	f7fa fc83 	bl	800339c <HAL_GetTick>
 8008a96:	4602      	mov	r2, r0
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d901      	bls.n	8008aa8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e0bf      	b.n	8008c28 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008aa8:	4b0f      	ldr	r3, [pc, #60]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 8008aaa:	69db      	ldr	r3, [r3, #28]
 8008aac:	f003 030c 	and.w	r3, r3, #12
 8008ab0:	2b08      	cmp	r3, #8
 8008ab2:	d1ee      	bne.n	8008a92 <HAL_RCC_ClockConfig+0x232>
 8008ab4:	e02d      	b.n	8008b12 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d123      	bne.n	8008b06 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008abe:	e00a      	b.n	8008ad6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ac0:	f7fa fc6c 	bl	800339c <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d901      	bls.n	8008ad6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e0a8      	b.n	8008c28 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008ad6:	4b04      	ldr	r3, [pc, #16]	; (8008ae8 <HAL_RCC_ClockConfig+0x288>)
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	f003 030c 	and.w	r3, r3, #12
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1ee      	bne.n	8008ac0 <HAL_RCC_ClockConfig+0x260>
 8008ae2:	e016      	b.n	8008b12 <HAL_RCC_ClockConfig+0x2b2>
 8008ae4:	40022000 	.word	0x40022000
 8008ae8:	46020c00 	.word	0x46020c00
 8008aec:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008af0:	f7fa fc54 	bl	800339c <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d901      	bls.n	8008b06 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e090      	b.n	8008c28 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b06:	4b4a      	ldr	r3, [pc, #296]	; (8008c30 <HAL_RCC_ClockConfig+0x3d0>)
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	f003 030c 	and.w	r3, r3, #12
 8008b0e:	2b04      	cmp	r3, #4
 8008b10:	d1ee      	bne.n	8008af0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 0302 	and.w	r3, r3, #2
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d010      	beq.n	8008b40 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	689a      	ldr	r2, [r3, #8]
 8008b22:	4b43      	ldr	r3, [pc, #268]	; (8008c30 <HAL_RCC_ClockConfig+0x3d0>)
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	f003 030f 	and.w	r3, r3, #15
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d208      	bcs.n	8008b40 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8008b2e:	4b40      	ldr	r3, [pc, #256]	; (8008c30 <HAL_RCC_ClockConfig+0x3d0>)
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	f023 020f 	bic.w	r2, r3, #15
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	493d      	ldr	r1, [pc, #244]	; (8008c30 <HAL_RCC_ClockConfig+0x3d0>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b40:	4b3c      	ldr	r3, [pc, #240]	; (8008c34 <HAL_RCC_ClockConfig+0x3d4>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 030f 	and.w	r3, r3, #15
 8008b48:	683a      	ldr	r2, [r7, #0]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d210      	bcs.n	8008b70 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b4e:	4b39      	ldr	r3, [pc, #228]	; (8008c34 <HAL_RCC_ClockConfig+0x3d4>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f023 020f 	bic.w	r2, r3, #15
 8008b56:	4937      	ldr	r1, [pc, #220]	; (8008c34 <HAL_RCC_ClockConfig+0x3d4>)
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b5e:	4b35      	ldr	r3, [pc, #212]	; (8008c34 <HAL_RCC_ClockConfig+0x3d4>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 030f 	and.w	r3, r3, #15
 8008b66:	683a      	ldr	r2, [r7, #0]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d001      	beq.n	8008b70 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e05b      	b.n	8008c28 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0304 	and.w	r3, r3, #4
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d010      	beq.n	8008b9e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	68da      	ldr	r2, [r3, #12]
 8008b80:	4b2b      	ldr	r3, [pc, #172]	; (8008c30 <HAL_RCC_ClockConfig+0x3d0>)
 8008b82:	6a1b      	ldr	r3, [r3, #32]
 8008b84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d208      	bcs.n	8008b9e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008b8c:	4b28      	ldr	r3, [pc, #160]	; (8008c30 <HAL_RCC_ClockConfig+0x3d0>)
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	4925      	ldr	r1, [pc, #148]	; (8008c30 <HAL_RCC_ClockConfig+0x3d0>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0308 	and.w	r3, r3, #8
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d012      	beq.n	8008bd0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	691a      	ldr	r2, [r3, #16]
 8008bae:	4b20      	ldr	r3, [pc, #128]	; (8008c30 <HAL_RCC_ClockConfig+0x3d0>)
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	091b      	lsrs	r3, r3, #4
 8008bb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d209      	bcs.n	8008bd0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8008bbc:	4b1c      	ldr	r3, [pc, #112]	; (8008c30 <HAL_RCC_ClockConfig+0x3d0>)
 8008bbe:	6a1b      	ldr	r3, [r3, #32]
 8008bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	011b      	lsls	r3, r3, #4
 8008bca:	4919      	ldr	r1, [pc, #100]	; (8008c30 <HAL_RCC_ClockConfig+0x3d0>)
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 0310 	and.w	r3, r3, #16
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d010      	beq.n	8008bfe <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	695a      	ldr	r2, [r3, #20]
 8008be0:	4b13      	ldr	r3, [pc, #76]	; (8008c30 <HAL_RCC_ClockConfig+0x3d0>)
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d208      	bcs.n	8008bfe <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8008bec:	4b10      	ldr	r3, [pc, #64]	; (8008c30 <HAL_RCC_ClockConfig+0x3d0>)
 8008bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	490d      	ldr	r1, [pc, #52]	; (8008c30 <HAL_RCC_ClockConfig+0x3d0>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008bfe:	f000 f821 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 8008c02:	4602      	mov	r2, r0
 8008c04:	4b0a      	ldr	r3, [pc, #40]	; (8008c30 <HAL_RCC_ClockConfig+0x3d0>)
 8008c06:	6a1b      	ldr	r3, [r3, #32]
 8008c08:	f003 030f 	and.w	r3, r3, #15
 8008c0c:	490a      	ldr	r1, [pc, #40]	; (8008c38 <HAL_RCC_ClockConfig+0x3d8>)
 8008c0e:	5ccb      	ldrb	r3, [r1, r3]
 8008c10:	fa22 f303 	lsr.w	r3, r2, r3
 8008c14:	4a09      	ldr	r2, [pc, #36]	; (8008c3c <HAL_RCC_ClockConfig+0x3dc>)
 8008c16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008c18:	4b09      	ldr	r3, [pc, #36]	; (8008c40 <HAL_RCC_ClockConfig+0x3e0>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fa fa35 	bl	800308c <HAL_InitTick>
 8008c22:	4603      	mov	r3, r0
 8008c24:	73fb      	strb	r3, [r7, #15]

  return status;
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3718      	adds	r7, #24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	46020c00 	.word	0x46020c00
 8008c34:	40022000 	.word	0x40022000
 8008c38:	0800db5c 	.word	0x0800db5c
 8008c3c:	20000d00 	.word	0x20000d00
 8008c40:	20000d04 	.word	0x20000d04

08008c44 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b08b      	sub	sp, #44	; 0x2c
 8008c48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c52:	4b78      	ldr	r3, [pc, #480]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008c54:	69db      	ldr	r3, [r3, #28]
 8008c56:	f003 030c 	and.w	r3, r3, #12
 8008c5a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c5c:	4b75      	ldr	r3, [pc, #468]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c60:	f003 0303 	and.w	r3, r3, #3
 8008c64:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d005      	beq.n	8008c78 <HAL_RCC_GetSysClockFreq+0x34>
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	2b0c      	cmp	r3, #12
 8008c70:	d121      	bne.n	8008cb6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d11e      	bne.n	8008cb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8008c78:	4b6e      	ldr	r3, [pc, #440]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d107      	bne.n	8008c94 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8008c84:	4b6b      	ldr	r3, [pc, #428]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008c86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008c8a:	0b1b      	lsrs	r3, r3, #12
 8008c8c:	f003 030f 	and.w	r3, r3, #15
 8008c90:	627b      	str	r3, [r7, #36]	; 0x24
 8008c92:	e005      	b.n	8008ca0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8008c94:	4b67      	ldr	r3, [pc, #412]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	0f1b      	lsrs	r3, r3, #28
 8008c9a:	f003 030f 	and.w	r3, r3, #15
 8008c9e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008ca0:	4a65      	ldr	r2, [pc, #404]	; (8008e38 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ca8:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d110      	bne.n	8008cd2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008cb4:	e00d      	b.n	8008cd2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008cb6:	4b5f      	ldr	r3, [pc, #380]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	f003 030c 	and.w	r3, r3, #12
 8008cbe:	2b04      	cmp	r3, #4
 8008cc0:	d102      	bne.n	8008cc8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008cc2:	4b5e      	ldr	r3, [pc, #376]	; (8008e3c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008cc4:	623b      	str	r3, [r7, #32]
 8008cc6:	e004      	b.n	8008cd2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	2b08      	cmp	r3, #8
 8008ccc:	d101      	bne.n	8008cd2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008cce:	4b5b      	ldr	r3, [pc, #364]	; (8008e3c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008cd0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	2b0c      	cmp	r3, #12
 8008cd6:	f040 80a5 	bne.w	8008e24 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008cda:	4b56      	ldr	r3, [pc, #344]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cde:	f003 0303 	and.w	r3, r3, #3
 8008ce2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008ce4:	4b53      	ldr	r3, [pc, #332]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce8:	0a1b      	lsrs	r3, r3, #8
 8008cea:	f003 030f 	and.w	r3, r3, #15
 8008cee:	3301      	adds	r3, #1
 8008cf0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008cf2:	4b50      	ldr	r3, [pc, #320]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf6:	091b      	lsrs	r3, r3, #4
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008cfe:	4b4d      	ldr	r3, [pc, #308]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d02:	08db      	lsrs	r3, r3, #3
 8008d04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	fb02 f303 	mul.w	r3, r2, r3
 8008d0e:	ee07 3a90 	vmov	s15, r3
 8008d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d16:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d003      	beq.n	8008d28 <HAL_RCC_GetSysClockFreq+0xe4>
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d022      	beq.n	8008d6c <HAL_RCC_GetSysClockFreq+0x128>
 8008d26:	e043      	b.n	8008db0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	ee07 3a90 	vmov	s15, r3
 8008d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d32:	eddf 6a43 	vldr	s13, [pc, #268]	; 8008e40 <HAL_RCC_GetSysClockFreq+0x1fc>
 8008d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d3a:	4b3e      	ldr	r3, [pc, #248]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d42:	ee07 3a90 	vmov	s15, r3
 8008d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008d4a:	ed97 6a01 	vldr	s12, [r7, #4]
 8008d4e:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8008e44 <HAL_RCC_GetSysClockFreq+0x200>
 8008d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d6a:	e046      	b.n	8008dfa <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d76:	eddf 6a32 	vldr	s13, [pc, #200]	; 8008e40 <HAL_RCC_GetSysClockFreq+0x1fc>
 8008d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d7e:	4b2d      	ldr	r3, [pc, #180]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d86:	ee07 3a90 	vmov	s15, r3
 8008d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008d8e:	ed97 6a01 	vldr	s12, [r7, #4]
 8008d92:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8008e44 <HAL_RCC_GetSysClockFreq+0x200>
 8008d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dae:	e024      	b.n	8008dfa <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	ee07 3a90 	vmov	s15, r3
 8008db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	ee07 3a90 	vmov	s15, r3
 8008dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dc8:	4b1a      	ldr	r3, [pc, #104]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dd0:	ee07 3a90 	vmov	s15, r3
 8008dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008dd8:	ed97 6a01 	vldr	s12, [r7, #4]
 8008ddc:	eddf 5a19 	vldr	s11, [pc, #100]	; 8008e44 <HAL_RCC_GetSysClockFreq+0x200>
 8008de0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008de8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dec:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008df4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008df8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8008dfa:	4b0e      	ldr	r3, [pc, #56]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dfe:	0e1b      	lsrs	r3, r3, #24
 8008e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e04:	3301      	adds	r3, #1
 8008e06:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	ee07 3a90 	vmov	s15, r3
 8008e0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e1e:	ee17 3a90 	vmov	r3, s15
 8008e22:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8008e24:	6a3b      	ldr	r3, [r7, #32]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	372c      	adds	r7, #44	; 0x2c
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	46020c00 	.word	0x46020c00
 8008e38:	0800db74 	.word	0x0800db74
 8008e3c:	00f42400 	.word	0x00f42400
 8008e40:	4b742400 	.word	0x4b742400
 8008e44:	46000000 	.word	0x46000000

08008e48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008e4c:	f7ff fefa 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 8008e50:	4602      	mov	r2, r0
 8008e52:	4b07      	ldr	r3, [pc, #28]	; (8008e70 <HAL_RCC_GetHCLKFreq+0x28>)
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	f003 030f 	and.w	r3, r3, #15
 8008e5a:	4906      	ldr	r1, [pc, #24]	; (8008e74 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008e5c:	5ccb      	ldrb	r3, [r1, r3]
 8008e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e62:	4a05      	ldr	r2, [pc, #20]	; (8008e78 <HAL_RCC_GetHCLKFreq+0x30>)
 8008e64:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8008e66:	4b04      	ldr	r3, [pc, #16]	; (8008e78 <HAL_RCC_GetHCLKFreq+0x30>)
 8008e68:	681b      	ldr	r3, [r3, #0]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	46020c00 	.word	0x46020c00
 8008e74:	0800db5c 	.word	0x0800db5c
 8008e78:	20000d00 	.word	0x20000d00

08008e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8008e80:	f7ff ffe2 	bl	8008e48 <HAL_RCC_GetHCLKFreq>
 8008e84:	4602      	mov	r2, r0
 8008e86:	4b05      	ldr	r3, [pc, #20]	; (8008e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	091b      	lsrs	r3, r3, #4
 8008e8c:	f003 0307 	and.w	r3, r3, #7
 8008e90:	4903      	ldr	r1, [pc, #12]	; (8008ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e92:	5ccb      	ldrb	r3, [r1, r3]
 8008e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	46020c00 	.word	0x46020c00
 8008ea0:	0800db6c 	.word	0x0800db6c

08008ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8008ea8:	f7ff ffce 	bl	8008e48 <HAL_RCC_GetHCLKFreq>
 8008eac:	4602      	mov	r2, r0
 8008eae:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	0a1b      	lsrs	r3, r3, #8
 8008eb4:	f003 0307 	and.w	r3, r3, #7
 8008eb8:	4903      	ldr	r1, [pc, #12]	; (8008ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008eba:	5ccb      	ldrb	r3, [r1, r3]
 8008ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	46020c00 	.word	0x46020c00
 8008ec8:	0800db6c 	.word	0x0800db6c

08008ecc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8008ed0:	f7ff ffba 	bl	8008e48 <HAL_RCC_GetHCLKFreq>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	4b05      	ldr	r3, [pc, #20]	; (8008eec <HAL_RCC_GetPCLK3Freq+0x20>)
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eda:	091b      	lsrs	r3, r3, #4
 8008edc:	f003 0307 	and.w	r3, r3, #7
 8008ee0:	4903      	ldr	r1, [pc, #12]	; (8008ef0 <HAL_RCC_GetPCLK3Freq+0x24>)
 8008ee2:	5ccb      	ldrb	r3, [r1, r3]
 8008ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	46020c00 	.word	0x46020c00
 8008ef0:	0800db6c 	.word	0x0800db6c

08008ef4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	221f      	movs	r2, #31
 8008f02:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8008f04:	4b15      	ldr	r3, [pc, #84]	; (8008f5c <HAL_RCC_GetClockConfig+0x68>)
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	f003 0203 	and.w	r2, r3, #3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8008f10:	4b12      	ldr	r3, [pc, #72]	; (8008f5c <HAL_RCC_GetClockConfig+0x68>)
 8008f12:	6a1b      	ldr	r3, [r3, #32]
 8008f14:	f003 020f 	and.w	r2, r3, #15
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8008f1c:	4b0f      	ldr	r3, [pc, #60]	; (8008f5c <HAL_RCC_GetClockConfig+0x68>)
 8008f1e:	6a1b      	ldr	r3, [r3, #32]
 8008f20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8008f28:	4b0c      	ldr	r3, [pc, #48]	; (8008f5c <HAL_RCC_GetClockConfig+0x68>)
 8008f2a:	6a1b      	ldr	r3, [r3, #32]
 8008f2c:	091b      	lsrs	r3, r3, #4
 8008f2e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8008f36:	4b09      	ldr	r3, [pc, #36]	; (8008f5c <HAL_RCC_GetClockConfig+0x68>)
 8008f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008f42:	4b07      	ldr	r3, [pc, #28]	; (8008f60 <HAL_RCC_GetClockConfig+0x6c>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 020f 	and.w	r2, r3, #15
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	601a      	str	r2, [r3, #0]
}
 8008f4e:	bf00      	nop
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	46020c00 	.word	0x46020c00
 8008f60:	40022000 	.word	0x40022000

08008f64 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008f64:	b480      	push	{r7}
 8008f66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8008f68:	4b05      	ldr	r3, [pc, #20]	; (8008f80 <HAL_RCC_EnableCSS+0x1c>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a04      	ldr	r2, [pc, #16]	; (8008f80 <HAL_RCC_EnableCSS+0x1c>)
 8008f6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f72:	6013      	str	r3, [r2, #0]
}
 8008f74:	bf00      	nop
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	46020c00 	.word	0x46020c00

08008f84 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008f88:	4b07      	ldr	r3, [pc, #28]	; (8008fa8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f94:	d105      	bne.n	8008fa2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008f96:	f000 f809 	bl	8008fac <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008f9a:	4b03      	ldr	r3, [pc, #12]	; (8008fa8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008fa0:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8008fa2:	bf00      	nop
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	46020c00 	.word	0x46020c00

08008fac <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008fac:	b480      	push	{r7}
 8008fae:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8008fb0:	bf00      	nop
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
	...

08008fbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008fc4:	4b3e      	ldr	r3, [pc, #248]	; (80090c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fca:	f003 0304 	and.w	r3, r3, #4
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008fd2:	f7fe fcfb 	bl	80079cc <HAL_PWREx_GetVoltageRange>
 8008fd6:	6178      	str	r0, [r7, #20]
 8008fd8:	e019      	b.n	800900e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008fda:	4b39      	ldr	r3, [pc, #228]	; (80090c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fe0:	4a37      	ldr	r2, [pc, #220]	; (80090c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008fe2:	f043 0304 	orr.w	r3, r3, #4
 8008fe6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008fea:	4b35      	ldr	r3, [pc, #212]	; (80090c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ff0:	f003 0304 	and.w	r3, r3, #4
 8008ff4:	60fb      	str	r3, [r7, #12]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008ff8:	f7fe fce8 	bl	80079cc <HAL_PWREx_GetVoltageRange>
 8008ffc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008ffe:	4b30      	ldr	r3, [pc, #192]	; (80090c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009004:	4a2e      	ldr	r2, [pc, #184]	; (80090c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009006:	f023 0304 	bic.w	r3, r3, #4
 800900a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009014:	d003      	beq.n	800901e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800901c:	d109      	bne.n	8009032 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009024:	d202      	bcs.n	800902c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8009026:	2301      	movs	r3, #1
 8009028:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800902a:	e033      	b.n	8009094 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800902c:	2300      	movs	r3, #0
 800902e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009030:	e030      	b.n	8009094 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009038:	d208      	bcs.n	800904c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009040:	d102      	bne.n	8009048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8009042:	2303      	movs	r3, #3
 8009044:	613b      	str	r3, [r7, #16]
 8009046:	e025      	b.n	8009094 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e035      	b.n	80090b8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009052:	d90f      	bls.n	8009074 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d109      	bne.n	800906e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009060:	d902      	bls.n	8009068 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8009062:	2300      	movs	r3, #0
 8009064:	613b      	str	r3, [r7, #16]
 8009066:	e015      	b.n	8009094 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8009068:	2301      	movs	r3, #1
 800906a:	613b      	str	r3, [r7, #16]
 800906c:	e012      	b.n	8009094 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800906e:	2300      	movs	r3, #0
 8009070:	613b      	str	r3, [r7, #16]
 8009072:	e00f      	b.n	8009094 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800907a:	d109      	bne.n	8009090 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009082:	d102      	bne.n	800908a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8009084:	2301      	movs	r3, #1
 8009086:	613b      	str	r3, [r7, #16]
 8009088:	e004      	b.n	8009094 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800908a:	2302      	movs	r3, #2
 800908c:	613b      	str	r3, [r7, #16]
 800908e:	e001      	b.n	8009094 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8009090:	2301      	movs	r3, #1
 8009092:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009094:	4b0b      	ldr	r3, [pc, #44]	; (80090c4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f023 020f 	bic.w	r2, r3, #15
 800909c:	4909      	ldr	r1, [pc, #36]	; (80090c4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80090a4:	4b07      	ldr	r3, [pc, #28]	; (80090c4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 030f 	and.w	r3, r3, #15
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d001      	beq.n	80090b6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e000      	b.n	80090b8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3718      	adds	r7, #24
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	46020c00 	.word	0x46020c00
 80090c4:	40022000 	.word	0x40022000

080090c8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80090c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090cc:	b0c8      	sub	sp, #288	; 0x120
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80090d4:	2300      	movs	r3, #0
 80090d6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80090da:	2300      	movs	r3, #0
 80090dc:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80090e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	f002 0401 	and.w	r4, r2, #1
 80090ec:	2500      	movs	r5, #0
 80090ee:	ea54 0305 	orrs.w	r3, r4, r5
 80090f2:	d00b      	beq.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80090f4:	4bd5      	ldr	r3, [pc, #852]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80090f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80090fa:	f023 0103 	bic.w	r1, r3, #3
 80090fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009104:	4ad1      	ldr	r2, [pc, #836]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009106:	430b      	orrs	r3, r1
 8009108:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800910c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009114:	f002 0802 	and.w	r8, r2, #2
 8009118:	f04f 0900 	mov.w	r9, #0
 800911c:	ea58 0309 	orrs.w	r3, r8, r9
 8009120:	d00b      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8009122:	4bca      	ldr	r3, [pc, #808]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009128:	f023 010c 	bic.w	r1, r3, #12
 800912c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009132:	4ac6      	ldr	r2, [pc, #792]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009134:	430b      	orrs	r3, r1
 8009136:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800913a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	f002 0a04 	and.w	sl, r2, #4
 8009146:	f04f 0b00 	mov.w	fp, #0
 800914a:	ea5a 030b 	orrs.w	r3, sl, fp
 800914e:	d00b      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8009150:	4bbe      	ldr	r3, [pc, #760]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009156:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800915a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800915e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009160:	4aba      	ldr	r2, [pc, #744]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009162:	430b      	orrs	r3, r1
 8009164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800916c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009170:	f002 0308 	and.w	r3, r2, #8
 8009174:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009178:	2300      	movs	r3, #0
 800917a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800917e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009182:	460b      	mov	r3, r1
 8009184:	4313      	orrs	r3, r2
 8009186:	d00b      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8009188:	4bb0      	ldr	r3, [pc, #704]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800918a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800918e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009192:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009198:	4aac      	ldr	r2, [pc, #688]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800919a:	430b      	orrs	r3, r1
 800919c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80091a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a8:	f002 0310 	and.w	r3, r2, #16
 80091ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80091b0:	2300      	movs	r3, #0
 80091b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80091b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80091ba:	460b      	mov	r3, r1
 80091bc:	4313      	orrs	r3, r2
 80091be:	d00b      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80091c0:	4ba2      	ldr	r3, [pc, #648]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80091c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80091ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091d0:	4a9e      	ldr	r2, [pc, #632]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80091d2:	430b      	orrs	r3, r1
 80091d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80091d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80091e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80091e8:	2300      	movs	r3, #0
 80091ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80091ee:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4313      	orrs	r3, r2
 80091f6:	d00b      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80091f8:	4b94      	ldr	r3, [pc, #592]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80091fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80091fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009202:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009208:	4a90      	ldr	r2, [pc, #576]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800920a:	430b      	orrs	r3, r1
 800920c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	f002 0320 	and.w	r3, r2, #32
 800921c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009220:	2300      	movs	r3, #0
 8009222:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009226:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800922a:	460b      	mov	r3, r1
 800922c:	4313      	orrs	r3, r2
 800922e:	d00b      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8009230:	4b86      	ldr	r3, [pc, #536]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009236:	f023 0107 	bic.w	r1, r3, #7
 800923a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800923e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009240:	4a82      	ldr	r2, [pc, #520]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009242:	430b      	orrs	r3, r1
 8009244:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800924c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009250:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009258:	2300      	movs	r3, #0
 800925a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800925e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009262:	460b      	mov	r3, r1
 8009264:	4313      	orrs	r3, r2
 8009266:	d00b      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8009268:	4b78      	ldr	r3, [pc, #480]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800926a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800926e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8009272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009278:	4a74      	ldr	r2, [pc, #464]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800927a:	430b      	orrs	r3, r1
 800927c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009280:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009288:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800928c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009290:	2300      	movs	r3, #0
 8009292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009296:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800929a:	460b      	mov	r3, r1
 800929c:	4313      	orrs	r3, r2
 800929e:	d00b      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80092a0:	4b6a      	ldr	r3, [pc, #424]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80092a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80092a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092b0:	4a66      	ldr	r2, [pc, #408]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80092b2:	430b      	orrs	r3, r1
 80092b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80092b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80092c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092c8:	2300      	movs	r3, #0
 80092ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80092ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4313      	orrs	r3, r2
 80092d6:	d00b      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80092d8:	4b5c      	ldr	r3, [pc, #368]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80092da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80092de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80092e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092e8:	4a58      	ldr	r2, [pc, #352]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80092ea:	430b      	orrs	r3, r1
 80092ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80092f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80092fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009300:	2300      	movs	r3, #0
 8009302:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009306:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800930a:	460b      	mov	r3, r1
 800930c:	4313      	orrs	r3, r2
 800930e:	d00b      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8009310:	4b4e      	ldr	r3, [pc, #312]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009316:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800931a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800931e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009320:	4a4a      	ldr	r2, [pc, #296]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009322:	430b      	orrs	r3, r1
 8009324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8009328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800932c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009330:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009334:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009338:	2300      	movs	r3, #0
 800933a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800933e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009342:	460b      	mov	r3, r1
 8009344:	4313      	orrs	r3, r2
 8009346:	d00b      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8009348:	4b40      	ldr	r3, [pc, #256]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800934a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800934e:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8009352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009358:	4a3c      	ldr	r2, [pc, #240]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800935a:	430b      	orrs	r3, r1
 800935c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8009360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009368:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800936c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009370:	2300      	movs	r3, #0
 8009372:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009376:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800937a:	460b      	mov	r3, r1
 800937c:	4313      	orrs	r3, r2
 800937e:	d00c      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8009380:	4b32      	ldr	r3, [pc, #200]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009382:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009386:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800938a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800938e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009392:	4a2e      	ldr	r2, [pc, #184]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009394:	430b      	orrs	r3, r1
 8009396:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800939a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800939e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a2:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80093a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093aa:	2300      	movs	r3, #0
 80093ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093b0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4313      	orrs	r3, r2
 80093b8:	d00c      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80093ba:	4b24      	ldr	r3, [pc, #144]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80093bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80093c0:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80093c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093cc:	4a1f      	ldr	r2, [pc, #124]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80093ce:	430b      	orrs	r3, r1
 80093d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80093d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093dc:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80093e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80093e4:	2300      	movs	r3, #0
 80093e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093ea:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80093ee:	460b      	mov	r3, r1
 80093f0:	4313      	orrs	r3, r2
 80093f2:	d00c      	beq.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80093f4:	4b15      	ldr	r3, [pc, #84]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80093f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80093fa:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80093fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009406:	4a11      	ldr	r2, [pc, #68]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009408:	430b      	orrs	r3, r1
 800940a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800940e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009416:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800941a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800941e:	2300      	movs	r3, #0
 8009420:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009424:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009428:	460b      	mov	r3, r1
 800942a:	4313      	orrs	r3, r2
 800942c:	d010      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800942e:	4b07      	ldr	r3, [pc, #28]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009434:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009438:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800943c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009440:	4a02      	ldr	r2, [pc, #8]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009442:	430b      	orrs	r3, r1
 8009444:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009448:	e002      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800944a:	bf00      	nop
 800944c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009458:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800945c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009460:	2300      	movs	r3, #0
 8009462:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009466:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800946a:	460b      	mov	r3, r1
 800946c:	4313      	orrs	r3, r2
 800946e:	d04c      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009474:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009478:	2b80      	cmp	r3, #128	; 0x80
 800947a:	d02d      	beq.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800947c:	2b80      	cmp	r3, #128	; 0x80
 800947e:	d827      	bhi.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009480:	2b60      	cmp	r3, #96	; 0x60
 8009482:	d02b      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009484:	2b60      	cmp	r3, #96	; 0x60
 8009486:	d823      	bhi.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009488:	2b40      	cmp	r3, #64	; 0x40
 800948a:	d006      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800948c:	2b40      	cmp	r3, #64	; 0x40
 800948e:	d81f      	bhi.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009490:	2b00      	cmp	r3, #0
 8009492:	d009      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009494:	2b20      	cmp	r3, #32
 8009496:	d011      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009498:	e01a      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800949a:	4bc0      	ldr	r3, [pc, #768]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800949c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949e:	4abf      	ldr	r2, [pc, #764]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80094a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094a4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80094a6:	e01a      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80094a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094ac:	3308      	adds	r3, #8
 80094ae:	4618      	mov	r0, r3
 80094b0:	f002 fce8 	bl	800be84 <RCCEx_PLL2_Config>
 80094b4:	4603      	mov	r3, r0
 80094b6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80094ba:	e010      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80094bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094c0:	332c      	adds	r3, #44	; 0x2c
 80094c2:	4618      	mov	r0, r3
 80094c4:	f002 fd76 	bl	800bfb4 <RCCEx_PLL3_Config>
 80094c8:	4603      	mov	r3, r0
 80094ca:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80094ce:	e006      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094d0:	2301      	movs	r3, #1
 80094d2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80094d6:	e002      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80094d8:	bf00      	nop
 80094da:	e000      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80094dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094de:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d10d      	bne.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80094e6:	4bad      	ldr	r3, [pc, #692]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80094e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80094ec:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80094f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094f8:	4aa8      	ldr	r2, [pc, #672]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80094fa:	430b      	orrs	r3, r1
 80094fc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009500:	e003      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009502:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009506:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800950a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800950e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009512:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800951a:	2300      	movs	r3, #0
 800951c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009520:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009524:	460b      	mov	r3, r1
 8009526:	4313      	orrs	r3, r2
 8009528:	d053      	beq.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800952a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800952e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009536:	d033      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8009538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800953c:	d82c      	bhi.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800953e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009542:	d02f      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8009544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009548:	d826      	bhi.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800954a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800954e:	d008      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8009550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009554:	d820      	bhi.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00a      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800955a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800955e:	d011      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009560:	e01a      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009562:	4b8e      	ldr	r3, [pc, #568]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009566:	4a8d      	ldr	r2, [pc, #564]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800956c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800956e:	e01a      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009574:	3308      	adds	r3, #8
 8009576:	4618      	mov	r0, r3
 8009578:	f002 fc84 	bl	800be84 <RCCEx_PLL2_Config>
 800957c:	4603      	mov	r3, r0
 800957e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009582:	e010      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009588:	332c      	adds	r3, #44	; 0x2c
 800958a:	4618      	mov	r0, r3
 800958c:	f002 fd12 	bl	800bfb4 <RCCEx_PLL3_Config>
 8009590:	4603      	mov	r3, r0
 8009592:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009596:	e006      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800959e:	e002      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80095a0:	bf00      	nop
 80095a2:	e000      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80095a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095a6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10d      	bne.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80095ae:	4b7b      	ldr	r3, [pc, #492]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80095b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80095b4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80095b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80095c0:	4a76      	ldr	r2, [pc, #472]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80095c2:	430b      	orrs	r3, r1
 80095c4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80095c8:	e003      	b.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ca:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80095ce:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80095d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095da:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80095de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80095e2:	2300      	movs	r3, #0
 80095e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80095e8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80095ec:	460b      	mov	r3, r1
 80095ee:	4313      	orrs	r3, r2
 80095f0:	d046      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80095f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80095fa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80095fe:	d028      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009600:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009604:	d821      	bhi.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800960a:	d022      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800960c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009610:	d81b      	bhi.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009612:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009616:	d01c      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009618:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800961c:	d815      	bhi.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800961e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009622:	d008      	beq.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8009624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009628:	d80f      	bhi.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800962a:	2b00      	cmp	r3, #0
 800962c:	d011      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800962e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009632:	d00e      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009634:	e009      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800963a:	3308      	adds	r3, #8
 800963c:	4618      	mov	r0, r3
 800963e:	f002 fc21 	bl	800be84 <RCCEx_PLL2_Config>
 8009642:	4603      	mov	r3, r0
 8009644:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009648:	e004      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009650:	e000      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8009652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009654:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10d      	bne.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800965c:	4b4f      	ldr	r3, [pc, #316]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800965e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009662:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800966a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800966e:	4a4b      	ldr	r2, [pc, #300]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009670:	430b      	orrs	r3, r1
 8009672:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009676:	e003      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009678:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800967c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009688:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800968c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009690:	2300      	movs	r3, #0
 8009692:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009696:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800969a:	460b      	mov	r3, r1
 800969c:	4313      	orrs	r3, r2
 800969e:	d03f      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80096a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096a8:	2b04      	cmp	r3, #4
 80096aa:	d81e      	bhi.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x622>
 80096ac:	a201      	add	r2, pc, #4	; (adr r2, 80096b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80096ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b2:	bf00      	nop
 80096b4:	080096f3 	.word	0x080096f3
 80096b8:	080096c9 	.word	0x080096c9
 80096bc:	080096d7 	.word	0x080096d7
 80096c0:	080096f3 	.word	0x080096f3
 80096c4:	080096f3 	.word	0x080096f3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80096c8:	4b34      	ldr	r3, [pc, #208]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80096ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096cc:	4a33      	ldr	r2, [pc, #204]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80096ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096d2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80096d4:	e00e      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80096d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096da:	332c      	adds	r3, #44	; 0x2c
 80096dc:	4618      	mov	r0, r3
 80096de:	f002 fc69 	bl	800bfb4 <RCCEx_PLL3_Config>
 80096e2:	4603      	mov	r3, r0
 80096e4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80096e8:	e004      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80096f0:	e000      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 80096f2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80096f4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10d      	bne.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80096fc:	4b27      	ldr	r3, [pc, #156]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80096fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009702:	f023 0107 	bic.w	r1, r3, #7
 8009706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800970a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800970e:	4a23      	ldr	r2, [pc, #140]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009710:	430b      	orrs	r3, r1
 8009712:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009716:	e003      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009718:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800971c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8009720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009728:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800972c:	67bb      	str	r3, [r7, #120]	; 0x78
 800972e:	2300      	movs	r3, #0
 8009730:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009732:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009736:	460b      	mov	r3, r1
 8009738:	4313      	orrs	r3, r2
 800973a:	d04c      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800973c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009744:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009748:	d02a      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800974a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800974e:	d821      	bhi.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009750:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009754:	d026      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8009756:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800975a:	d81b      	bhi.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800975c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009760:	d00e      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009762:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009766:	d815      	bhi.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009768:	2b00      	cmp	r3, #0
 800976a:	d01d      	beq.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800976c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009770:	d110      	bne.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009772:	4b0a      	ldr	r3, [pc, #40]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009776:	4a09      	ldr	r2, [pc, #36]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800977c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800977e:	e014      	b.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009784:	332c      	adds	r3, #44	; 0x2c
 8009786:	4618      	mov	r0, r3
 8009788:	f002 fc14 	bl	800bfb4 <RCCEx_PLL3_Config>
 800978c:	4603      	mov	r3, r0
 800978e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009792:	e00a      	b.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800979a:	e006      	b.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800979c:	46020c00 	.word	0x46020c00
        break;
 80097a0:	bf00      	nop
 80097a2:	e002      	b.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 80097a4:	bf00      	nop
 80097a6:	e000      	b.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 80097a8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80097aa:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10d      	bne.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80097b2:	4baf      	ldr	r3, [pc, #700]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80097b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80097b8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80097bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097c4:	4aaa      	ldr	r2, [pc, #680]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80097c6:	430b      	orrs	r3, r1
 80097c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80097cc:	e003      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ce:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80097d2:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80097e2:	673b      	str	r3, [r7, #112]	; 0x70
 80097e4:	2300      	movs	r3, #0
 80097e6:	677b      	str	r3, [r7, #116]	; 0x74
 80097e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80097ec:	460b      	mov	r3, r1
 80097ee:	4313      	orrs	r3, r2
 80097f0:	f000 80b5 	beq.w	800995e <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 80097f4:	2300      	movs	r3, #0
 80097f6:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097fa:	4b9d      	ldr	r3, [pc, #628]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80097fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009800:	f003 0304 	and.w	r3, r3, #4
 8009804:	2b00      	cmp	r3, #0
 8009806:	d113      	bne.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009808:	4b99      	ldr	r3, [pc, #612]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800980a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800980e:	4a98      	ldr	r2, [pc, #608]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009810:	f043 0304 	orr.w	r3, r3, #4
 8009814:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009818:	4b95      	ldr	r3, [pc, #596]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800981a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800981e:	f003 0304 	and.w	r3, r3, #4
 8009822:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009826:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
      pwrclkchanged = SET;
 800982a:	2301      	movs	r3, #1
 800982c:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009830:	4b90      	ldr	r3, [pc, #576]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009834:	4a8f      	ldr	r2, [pc, #572]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009836:	f043 0301 	orr.w	r3, r3, #1
 800983a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800983c:	f7f9 fdae 	bl	800339c <HAL_GetTick>
 8009840:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009844:	e00b      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009846:	f7f9 fda9 	bl	800339c <HAL_GetTick>
 800984a:	4602      	mov	r2, r0
 800984c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	2b02      	cmp	r3, #2
 8009854:	d903      	bls.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 8009856:	2303      	movs	r3, #3
 8009858:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800985c:	e005      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800985e:	4b85      	ldr	r3, [pc, #532]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009862:	f003 0301 	and.w	r3, r3, #1
 8009866:	2b00      	cmp	r3, #0
 8009868:	d0ed      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800986a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800986e:	2b00      	cmp	r3, #0
 8009870:	d165      	bne.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009872:	4b7f      	ldr	r3, [pc, #508]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800987c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009880:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009884:	2b00      	cmp	r3, #0
 8009886:	d023      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8009888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800988c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8009890:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009894:	4293      	cmp	r3, r2
 8009896:	d01b      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009898:	4b75      	ldr	r3, [pc, #468]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800989a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800989e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80098a6:	4b72      	ldr	r3, [pc, #456]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80098a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80098ac:	4a70      	ldr	r2, [pc, #448]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80098ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80098b6:	4b6e      	ldr	r3, [pc, #440]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80098b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80098bc:	4a6c      	ldr	r2, [pc, #432]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80098be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80098c6:	4a6a      	ldr	r2, [pc, #424]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80098c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80098cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80098d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80098d4:	f003 0301 	and.w	r3, r3, #1
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d019      	beq.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098dc:	f7f9 fd5e 	bl	800339c <HAL_GetTick>
 80098e0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80098e4:	e00d      	b.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098e6:	f7f9 fd59 	bl	800339c <HAL_GetTick>
 80098ea:	4602      	mov	r2, r0
 80098ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098f0:	1ad2      	subs	r2, r2, r3
 80098f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d903      	bls.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
            break;
 8009900:	e006      	b.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009902:	4b5b      	ldr	r3, [pc, #364]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009908:	f003 0302 	and.w	r3, r3, #2
 800990c:	2b00      	cmp	r3, #0
 800990e:	d0ea      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 8009910:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10d      	bne.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8009918:	4b55      	ldr	r3, [pc, #340]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800991a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800991e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009926:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800992a:	4a51      	ldr	r2, [pc, #324]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800992c:	430b      	orrs	r3, r1
 800992e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009932:	e008      	b.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009934:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009938:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 800993c:	e003      	b.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800993e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009942:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009946:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 800994a:	2b01      	cmp	r3, #1
 800994c:	d107      	bne.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800994e:	4b48      	ldr	r3, [pc, #288]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009954:	4a46      	ldr	r2, [pc, #280]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009956:	f023 0304 	bic.w	r3, r3, #4
 800995a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800995e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800996a:	66bb      	str	r3, [r7, #104]	; 0x68
 800996c:	2300      	movs	r3, #0
 800996e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009970:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009974:	460b      	mov	r3, r1
 8009976:	4313      	orrs	r3, r2
 8009978:	d042      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800997a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800997e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009982:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009986:	d022      	beq.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x906>
 8009988:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800998c:	d81b      	bhi.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800998e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009992:	d011      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8009994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009998:	d815      	bhi.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800999a:	2b00      	cmp	r3, #0
 800999c:	d019      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800999e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099a2:	d110      	bne.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80099a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099a8:	3308      	adds	r3, #8
 80099aa:	4618      	mov	r0, r3
 80099ac:	f002 fa6a 	bl	800be84 <RCCEx_PLL2_Config>
 80099b0:	4603      	mov	r3, r0
 80099b2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80099b6:	e00d      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099b8:	4b2d      	ldr	r3, [pc, #180]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80099ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099bc:	4a2c      	ldr	r2, [pc, #176]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80099be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099c2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80099c4:	e006      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80099cc:	e002      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 80099ce:	bf00      	nop
 80099d0:	e000      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 80099d2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80099d4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d10d      	bne.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80099dc:	4b24      	ldr	r3, [pc, #144]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80099de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099e2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80099e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099ee:	4a20      	ldr	r2, [pc, #128]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80099f0:	430b      	orrs	r3, r1
 80099f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80099f6:	e003      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80099fc:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a08:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009a0c:	663b      	str	r3, [r7, #96]	; 0x60
 8009a0e:	2300      	movs	r3, #0
 8009a10:	667b      	str	r3, [r7, #100]	; 0x64
 8009a12:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009a16:	460b      	mov	r3, r1
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	d031      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8009a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a28:	d00b      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8009a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a2e:	d804      	bhi.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d008      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8009a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a38:	d007      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009a40:	e004      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8009a42:	bf00      	nop
 8009a44:	e002      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8009a46:	bf00      	nop
 8009a48:	e000      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8009a4a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009a4c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d111      	bne.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009a54:	4b06      	ldr	r3, [pc, #24]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009a56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009a5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a66:	4a02      	ldr	r2, [pc, #8]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009a68:	430b      	orrs	r3, r1
 8009a6a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009a6e:	e007      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8009a70:	46020c00 	.word	0x46020c00
 8009a74:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a78:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009a7c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8009a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a88:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009a8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a8e:	2300      	movs	r3, #0
 8009a90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a92:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009a96:	460b      	mov	r3, r1
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	d00c      	beq.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8009a9c:	4bb2      	ldr	r3, [pc, #712]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009a9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009aa2:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8009aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009aaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009aae:	4aae      	ldr	r2, [pc, #696]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ab0:	430b      	orrs	r3, r1
 8009ab2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8009ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009ac2:	653b      	str	r3, [r7, #80]	; 0x50
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8009ac8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009acc:	460b      	mov	r3, r1
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	d019      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8009ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ad6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ada:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ade:	d105      	bne.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ae0:	4ba1      	ldr	r3, [pc, #644]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae4:	4aa0      	ldr	r2, [pc, #640]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009aea:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8009aec:	4b9e      	ldr	r3, [pc, #632]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009aee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009af2:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009afa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009afe:	4a9a      	ldr	r2, [pc, #616]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009b00:	430b      	orrs	r3, r1
 8009b02:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009b12:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b14:	2300      	movs	r3, #0
 8009b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b18:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	d00c      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8009b22:	4b91      	ldr	r3, [pc, #580]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b28:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b30:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009b34:	4a8c      	ldr	r2, [pc, #560]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009b36:	430b      	orrs	r3, r1
 8009b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b44:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009b48:	643b      	str	r3, [r7, #64]	; 0x40
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8009b4e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009b52:	460b      	mov	r3, r1
 8009b54:	4313      	orrs	r3, r2
 8009b56:	d00c      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8009b58:	4b83      	ldr	r3, [pc, #524]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b5e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b66:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8009b6a:	4a7f      	ldr	r2, [pc, #508]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009b6c:	430b      	orrs	r3, r1
 8009b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009b7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b80:	2300      	movs	r3, #0
 8009b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b84:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009b88:	460b      	mov	r3, r1
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	d00c      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8009b8e:	4b76      	ldr	r3, [pc, #472]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009b90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b94:	f023 0118 	bic.w	r1, r3, #24
 8009b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b9c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009ba0:	4a71      	ldr	r2, [pc, #452]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ba2:	430b      	orrs	r3, r1
 8009ba4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb0:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8009bb4:	633b      	str	r3, [r7, #48]	; 0x30
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8009bba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	d032      	beq.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8009bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bc8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009bcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bd0:	d105      	bne.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bd2:	4b65      	ldr	r3, [pc, #404]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd6:	4a64      	ldr	r2, [pc, #400]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bdc:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8009bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009be2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009be6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009bea:	d108      	bne.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f002 f946 	bl	800be84 <RCCEx_PLL2_Config>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }
    if (ret == HAL_OK)
 8009bfe:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10d      	bne.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8009c06:	4b58      	ldr	r3, [pc, #352]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009c08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009c0c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c14:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009c18:	4a53      	ldr	r2, [pc, #332]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009c1a:	430b      	orrs	r3, r1
 8009c1c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009c20:	e003      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c22:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009c26:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8009c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c32:	2100      	movs	r1, #0
 8009c34:	62b9      	str	r1, [r7, #40]	; 0x28
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c3c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009c40:	460b      	mov	r3, r1
 8009c42:	4313      	orrs	r3, r2
 8009c44:	d04a      	beq.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8009c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c4a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009c4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009c52:	d01e      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8009c54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009c58:	d825      	bhi.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8009c5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c5e:	d00e      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 8009c60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c64:	d81f      	bhi.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d021      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8009c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c6e:	d11a      	bne.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c70:	4b3d      	ldr	r3, [pc, #244]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c74:	4a3c      	ldr	r2, [pc, #240]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c7a:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009c7c:	e018      	b.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c82:	3308      	adds	r3, #8
 8009c84:	4618      	mov	r0, r3
 8009c86:	f002 f8fd 	bl	800be84 <RCCEx_PLL2_Config>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009c90:	e00e      	b.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c96:	332c      	adds	r3, #44	; 0x2c
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f002 f98b 	bl	800bfb4 <RCCEx_PLL3_Config>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009ca4:	e004      	b.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009cac:	e000      	b.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 8009cae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cb0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10d      	bne.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8009cb8:	4b2b      	ldr	r3, [pc, #172]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009cba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009cbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009cc6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009cca:	4927      	ldr	r1, [pc, #156]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009cd2:	e003      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cd4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009cd8:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8009cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8009ce8:	623b      	str	r3, [r7, #32]
 8009cea:	2300      	movs	r3, #0
 8009cec:	627b      	str	r3, [r7, #36]	; 0x24
 8009cee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	d03d      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8009cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d04:	d00e      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8009d06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d0a:	d815      	bhi.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d017      	beq.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d14:	d110      	bne.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d16:	4b14      	ldr	r3, [pc, #80]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1a:	4a13      	ldr	r2, [pc, #76]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d20:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009d22:	e00e      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d28:	3308      	adds	r3, #8
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f002 f8aa 	bl	800be84 <RCCEx_PLL2_Config>
 8009d30:	4603      	mov	r3, r0
 8009d32:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009d36:	e004      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009d3e:	e000      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009d40:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009d42:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d110      	bne.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8009d4a:	4b07      	ldr	r3, [pc, #28]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d5c:	4902      	ldr	r1, [pc, #8]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8009d64:	e006      	b.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8009d66:	bf00      	nop
 8009d68:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d6c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009d70:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8009d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009d80:	61bb      	str	r3, [r7, #24]
 8009d82:	2300      	movs	r3, #0
 8009d84:	61fb      	str	r3, [r7, #28]
 8009d86:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	d00c      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8009d90:	4b68      	ldr	r3, [pc, #416]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009d96:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009da2:	4964      	ldr	r1, [pc, #400]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009da4:	4313      	orrs	r3, r2
 8009da6:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db2:	2100      	movs	r1, #0
 8009db4:	6139      	str	r1, [r7, #16]
 8009db6:	f003 0302 	and.w	r3, r3, #2
 8009dba:	617b      	str	r3, [r7, #20]
 8009dbc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	d036      	beq.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 8009dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00c      	beq.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8009dd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009dd6:	d113      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ddc:	3308      	adds	r3, #8
 8009dde:	4618      	mov	r0, r3
 8009de0:	f002 f850 	bl	800be84 <RCCEx_PLL2_Config>
 8009de4:	4603      	mov	r3, r0
 8009de6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8009dea:	e00d      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009df0:	332c      	adds	r3, #44	; 0x2c
 8009df2:	4618      	mov	r0, r3
 8009df4:	f002 f8de 	bl	800bfb4 <RCCEx_PLL3_Config>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8009dfe:	e003      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e08:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10d      	bne.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 8009e10:	4b48      	ldr	r3, [pc, #288]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009e12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009e16:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009e22:	4944      	ldr	r1, [pc, #272]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009e24:	4313      	orrs	r3, r2
 8009e26:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009e2a:	e003      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e2c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009e30:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8009e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	60b9      	str	r1, [r7, #8]
 8009e40:	f003 0304 	and.w	r3, r3, #4
 8009e44:	60fb      	str	r3, [r7, #12]
 8009e46:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	d024      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 8009e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d108      	bne.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e60:	332c      	adds	r3, #44	; 0x2c
 8009e62:	4618      	mov	r0, r3
 8009e64:	f002 f8a6 	bl	800bfb4 <RCCEx_PLL3_Config>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }

    if (ret == HAL_OK)
 8009e6e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10d      	bne.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 8009e76:	4b2f      	ldr	r3, [pc, #188]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009e78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009e7c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009e88:	492a      	ldr	r1, [pc, #168]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009e90:	e003      	b.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e92:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009e96:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8009e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	6039      	str	r1, [r7, #0]
 8009ea6:	f003 0308 	and.w	r3, r3, #8
 8009eaa:	607b      	str	r3, [r7, #4]
 8009eac:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	d036      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8009eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009eba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009ebe:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009ec2:	d00d      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8009ec4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009ec8:	d811      	bhi.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8009eca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ece:	d012      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8009ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ed4:	d80b      	bhi.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00d      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8009eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ede:	d106      	bne.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ee0:	4b14      	ldr	r3, [pc, #80]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee4:	4a13      	ldr	r2, [pc, #76]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009eea:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8009eec:	e004      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009ef4:	e000      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 8009ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ef8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10d      	bne.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8009f00:	4b0c      	ldr	r3, [pc, #48]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009f02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009f06:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f0e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009f12:	4908      	ldr	r1, [pc, #32]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009f14:	4313      	orrs	r3, r2
 8009f16:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009f1a:	e003      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f1c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009f20:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8009f24:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f34:	46020c00 	.word	0x46020c00

08009f38 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b089      	sub	sp, #36	; 0x24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8009f40:	4ba6      	ldr	r3, [pc, #664]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f48:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009f4a:	4ba4      	ldr	r3, [pc, #656]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4e:	f003 0303 	and.w	r3, r3, #3
 8009f52:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009f54:	4ba1      	ldr	r3, [pc, #644]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f58:	0a1b      	lsrs	r3, r3, #8
 8009f5a:	f003 030f 	and.w	r3, r3, #15
 8009f5e:	3301      	adds	r3, #1
 8009f60:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009f62:	4b9e      	ldr	r3, [pc, #632]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f66:	091b      	lsrs	r3, r3, #4
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009f6e:	4b9b      	ldr	r3, [pc, #620]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f72:	08db      	lsrs	r3, r3, #3
 8009f74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	fb02 f303 	mul.w	r3, r2, r3
 8009f7e:	ee07 3a90 	vmov	s15, r3
 8009f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f86:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	2b03      	cmp	r3, #3
 8009f8e:	d062      	beq.n	800a056 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	2b03      	cmp	r3, #3
 8009f94:	f200 8081 	bhi.w	800a09a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d024      	beq.n	8009fe8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d17a      	bne.n	800a09a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	ee07 3a90 	vmov	s15, r3
 8009faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fae:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fb6:	4b89      	ldr	r3, [pc, #548]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fbe:	ee07 3a90 	vmov	s15, r3
 8009fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009fca:	eddf 5a86 	vldr	s11, [pc, #536]	; 800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fe6:	e08f      	b.n	800a108 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009fe8:	4b7c      	ldr	r3, [pc, #496]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d005      	beq.n	800a000 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8009ff4:	4b79      	ldr	r3, [pc, #484]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	0f1b      	lsrs	r3, r3, #28
 8009ffa:	f003 030f 	and.w	r3, r3, #15
 8009ffe:	e006      	b.n	800a00e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800a000:	4b76      	ldr	r3, [pc, #472]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a002:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a006:	041b      	lsls	r3, r3, #16
 800a008:	0f1b      	lsrs	r3, r3, #28
 800a00a:	f003 030f 	and.w	r3, r3, #15
 800a00e:	4a76      	ldr	r2, [pc, #472]	; (800a1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a014:	ee07 3a90 	vmov	s15, r3
 800a018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	ee07 3a90 	vmov	s15, r3
 800a022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	ee07 3a90 	vmov	s15, r3
 800a030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a034:	ed97 6a02 	vldr	s12, [r7, #8]
 800a038:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a03c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a040:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a048:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a04c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a050:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a054:	e058      	b.n	800a108 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	ee07 3a90 	vmov	s15, r3
 800a05c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a060:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a064:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a068:	4b5c      	ldr	r3, [pc, #368]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a06c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a070:	ee07 3a90 	vmov	s15, r3
 800a074:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a078:	ed97 6a02 	vldr	s12, [r7, #8]
 800a07c:	eddf 5a59 	vldr	s11, [pc, #356]	; 800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a080:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a084:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a088:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a08c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a090:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a094:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a098:	e036      	b.n	800a108 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a09a:	4b50      	ldr	r3, [pc, #320]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d005      	beq.n	800a0b2 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800a0a6:	4b4d      	ldr	r3, [pc, #308]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	0f1b      	lsrs	r3, r3, #28
 800a0ac:	f003 030f 	and.w	r3, r3, #15
 800a0b0:	e006      	b.n	800a0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800a0b2:	4b4a      	ldr	r3, [pc, #296]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a0b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a0b8:	041b      	lsls	r3, r3, #16
 800a0ba:	0f1b      	lsrs	r3, r3, #28
 800a0bc:	f003 030f 	and.w	r3, r3, #15
 800a0c0:	4a49      	ldr	r2, [pc, #292]	; (800a1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a0c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0c6:	ee07 3a90 	vmov	s15, r3
 800a0ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	ee07 3a90 	vmov	s15, r3
 800a0d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	ee07 3a90 	vmov	s15, r3
 800a0e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0ea:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a0ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a0fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a102:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a106:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a108:	4b34      	ldr	r3, [pc, #208]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d017      	beq.n	800a144 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a114:	4b31      	ldr	r3, [pc, #196]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a118:	0a5b      	lsrs	r3, r3, #9
 800a11a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a11e:	ee07 3a90 	vmov	s15, r3
 800a122:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800a126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a12a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a12e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a13a:	ee17 2a90 	vmov	r2, s15
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	601a      	str	r2, [r3, #0]
 800a142:	e002      	b.n	800a14a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a14a:	4b24      	ldr	r3, [pc, #144]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a152:	2b00      	cmp	r3, #0
 800a154:	d017      	beq.n	800a186 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a156:	4b21      	ldr	r3, [pc, #132]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a15a:	0c1b      	lsrs	r3, r3, #16
 800a15c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a160:	ee07 3a90 	vmov	s15, r3
 800a164:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a168:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a16c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a170:	edd7 6a07 	vldr	s13, [r7, #28]
 800a174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a17c:	ee17 2a90 	vmov	r2, s15
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	605a      	str	r2, [r3, #4]
 800a184:	e002      	b.n	800a18c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a18c:	4b13      	ldr	r3, [pc, #76]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a18e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a194:	2b00      	cmp	r3, #0
 800a196:	d017      	beq.n	800a1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a198:	4b10      	ldr	r3, [pc, #64]	; (800a1dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a19c:	0e1b      	lsrs	r3, r3, #24
 800a19e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1a2:	ee07 3a90 	vmov	s15, r3
 800a1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800a1aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1ae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a1b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1be:	ee17 2a90 	vmov	r2, s15
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a1c6:	e002      	b.n	800a1ce <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	609a      	str	r2, [r3, #8]
}
 800a1ce:	bf00      	nop
 800a1d0:	3724      	adds	r7, #36	; 0x24
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	46020c00 	.word	0x46020c00
 800a1e0:	4b742400 	.word	0x4b742400
 800a1e4:	46000000 	.word	0x46000000
 800a1e8:	0800db74 	.word	0x0800db74

0800a1ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b089      	sub	sp, #36	; 0x24
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a1f4:	4ba6      	ldr	r3, [pc, #664]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a1f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1fc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a1fe:	4ba4      	ldr	r3, [pc, #656]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a202:	f003 0303 	and.w	r3, r3, #3
 800a206:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800a208:	4ba1      	ldr	r3, [pc, #644]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20c:	0a1b      	lsrs	r3, r3, #8
 800a20e:	f003 030f 	and.w	r3, r3, #15
 800a212:	3301      	adds	r3, #1
 800a214:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800a216:	4b9e      	ldr	r3, [pc, #632]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21a:	091b      	lsrs	r3, r3, #4
 800a21c:	f003 0301 	and.w	r3, r3, #1
 800a220:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a222:	4b9b      	ldr	r3, [pc, #620]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a226:	08db      	lsrs	r3, r3, #3
 800a228:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	fb02 f303 	mul.w	r3, r2, r3
 800a232:	ee07 3a90 	vmov	s15, r3
 800a236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a23a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	2b03      	cmp	r3, #3
 800a242:	d062      	beq.n	800a30a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	2b03      	cmp	r3, #3
 800a248:	f200 8081 	bhi.w	800a34e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d024      	beq.n	800a29c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	2b02      	cmp	r3, #2
 800a256:	d17a      	bne.n	800a34e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	ee07 3a90 	vmov	s15, r3
 800a25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a262:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a26a:	4b89      	ldr	r3, [pc, #548]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a272:	ee07 3a90 	vmov	s15, r3
 800a276:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a27a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a27e:	eddf 5a86 	vldr	s11, [pc, #536]	; 800a498 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a282:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a286:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a28a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a28e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a292:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a296:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a29a:	e08f      	b.n	800a3bc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800a29c:	4b7c      	ldr	r3, [pc, #496]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d005      	beq.n	800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800a2a8:	4b79      	ldr	r3, [pc, #484]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	0f1b      	lsrs	r3, r3, #28
 800a2ae:	f003 030f 	and.w	r3, r3, #15
 800a2b2:	e006      	b.n	800a2c2 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800a2b4:	4b76      	ldr	r3, [pc, #472]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a2b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a2ba:	041b      	lsls	r3, r3, #16
 800a2bc:	0f1b      	lsrs	r3, r3, #28
 800a2be:	f003 030f 	and.w	r3, r3, #15
 800a2c2:	4a76      	ldr	r2, [pc, #472]	; (800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800a2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2c8:	ee07 3a90 	vmov	s15, r3
 800a2cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	ee07 3a90 	vmov	s15, r3
 800a2d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	ee07 3a90 	vmov	s15, r3
 800a2e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2e8:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2ec:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800a498 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a2f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800a300:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a304:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a308:	e058      	b.n	800a3bc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	ee07 3a90 	vmov	s15, r3
 800a310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a314:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a31c:	4b5c      	ldr	r3, [pc, #368]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a31e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a324:	ee07 3a90 	vmov	s15, r3
 800a328:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a32c:	ed97 6a02 	vldr	s12, [r7, #8]
 800a330:	eddf 5a59 	vldr	s11, [pc, #356]	; 800a498 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a334:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a338:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a33c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a340:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a344:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a348:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a34c:	e036      	b.n	800a3bc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800a34e:	4b50      	ldr	r3, [pc, #320]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a356:	2b00      	cmp	r3, #0
 800a358:	d005      	beq.n	800a366 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800a35a:	4b4d      	ldr	r3, [pc, #308]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	0f1b      	lsrs	r3, r3, #28
 800a360:	f003 030f 	and.w	r3, r3, #15
 800a364:	e006      	b.n	800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800a366:	4b4a      	ldr	r3, [pc, #296]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a36c:	041b      	lsls	r3, r3, #16
 800a36e:	0f1b      	lsrs	r3, r3, #28
 800a370:	f003 030f 	and.w	r3, r3, #15
 800a374:	4a49      	ldr	r2, [pc, #292]	; (800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800a376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a37a:	ee07 3a90 	vmov	s15, r3
 800a37e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	ee07 3a90 	vmov	s15, r3
 800a388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a38c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	ee07 3a90 	vmov	s15, r3
 800a396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a39a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a39e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a498 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a3a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800a3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3ba:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800a3bc:	4b34      	ldr	r3, [pc, #208]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d017      	beq.n	800a3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a3c8:	4b31      	ldr	r3, [pc, #196]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a3ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3cc:	0a5b      	lsrs	r3, r3, #9
 800a3ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3d2:	ee07 3a90 	vmov	s15, r3
 800a3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800a3da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3de:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a3e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3ee:	ee17 2a90 	vmov	r2, s15
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	601a      	str	r2, [r3, #0]
 800a3f6:	e002      	b.n	800a3fe <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800a3fe:	4b24      	ldr	r3, [pc, #144]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a406:	2b00      	cmp	r3, #0
 800a408:	d017      	beq.n	800a43a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a40a:	4b21      	ldr	r3, [pc, #132]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a40c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a40e:	0c1b      	lsrs	r3, r3, #16
 800a410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a414:	ee07 3a90 	vmov	s15, r3
 800a418:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800a41c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a420:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a424:	edd7 6a07 	vldr	s13, [r7, #28]
 800a428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a42c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a430:	ee17 2a90 	vmov	r2, s15
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	605a      	str	r2, [r3, #4]
 800a438:	e002      	b.n	800a440 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800a440:	4b13      	ldr	r3, [pc, #76]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d017      	beq.n	800a47c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a44c:	4b10      	ldr	r3, [pc, #64]	; (800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a44e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a450:	0e1b      	lsrs	r3, r3, #24
 800a452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a456:	ee07 3a90 	vmov	s15, r3
 800a45a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800a45e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a462:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a466:	edd7 6a07 	vldr	s13, [r7, #28]
 800a46a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a46e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a472:	ee17 2a90 	vmov	r2, s15
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a47a:	e002      	b.n	800a482 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	609a      	str	r2, [r3, #8]
}
 800a482:	bf00      	nop
 800a484:	3724      	adds	r7, #36	; 0x24
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	46020c00 	.word	0x46020c00
 800a494:	4b742400 	.word	0x4b742400
 800a498:	46000000 	.word	0x46000000
 800a49c:	0800db74 	.word	0x0800db74

0800a4a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b089      	sub	sp, #36	; 0x24
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800a4a8:	4ba6      	ldr	r3, [pc, #664]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a4aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4b0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800a4b2:	4ba4      	ldr	r3, [pc, #656]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b6:	f003 0303 	and.w	r3, r3, #3
 800a4ba:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800a4bc:	4ba1      	ldr	r3, [pc, #644]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c0:	0a1b      	lsrs	r3, r3, #8
 800a4c2:	f003 030f 	and.w	r3, r3, #15
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800a4ca:	4b9e      	ldr	r3, [pc, #632]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ce:	091b      	lsrs	r3, r3, #4
 800a4d0:	f003 0301 	and.w	r3, r3, #1
 800a4d4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800a4d6:	4b9b      	ldr	r3, [pc, #620]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a4d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4da:	08db      	lsrs	r3, r3, #3
 800a4dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	fb02 f303 	mul.w	r3, r2, r3
 800a4e6:	ee07 3a90 	vmov	s15, r3
 800a4ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ee:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2b03      	cmp	r3, #3
 800a4f6:	d062      	beq.n	800a5be <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2b03      	cmp	r3, #3
 800a4fc:	f200 8081 	bhi.w	800a602 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d024      	beq.n	800a550 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d17a      	bne.n	800a602 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	ee07 3a90 	vmov	s15, r3
 800a512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a516:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a51a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a51e:	4b89      	ldr	r3, [pc, #548]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a526:	ee07 3a90 	vmov	s15, r3
 800a52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a52e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a532:	eddf 5a86 	vldr	s11, [pc, #536]	; 800a74c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a536:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a53e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a542:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a54a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800a54e:	e08f      	b.n	800a670 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a550:	4b7c      	ldr	r3, [pc, #496]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d005      	beq.n	800a568 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800a55c:	4b79      	ldr	r3, [pc, #484]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	0f1b      	lsrs	r3, r3, #28
 800a562:	f003 030f 	and.w	r3, r3, #15
 800a566:	e006      	b.n	800a576 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800a568:	4b76      	ldr	r3, [pc, #472]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a56a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a56e:	041b      	lsls	r3, r3, #16
 800a570:	0f1b      	lsrs	r3, r3, #28
 800a572:	f003 030f 	and.w	r3, r3, #15
 800a576:	4a76      	ldr	r2, [pc, #472]	; (800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a57c:	ee07 3a90 	vmov	s15, r3
 800a580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	ee07 3a90 	vmov	s15, r3
 800a58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a58e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	ee07 3a90 	vmov	s15, r3
 800a598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a59c:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5a0:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800a74c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a5a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a5b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5bc:	e058      	b.n	800a670 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	ee07 3a90 	vmov	s15, r3
 800a5c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c8:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a5cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5d0:	4b5c      	ldr	r3, [pc, #368]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a5d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5d8:	ee07 3a90 	vmov	s15, r3
 800a5dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a5e0:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5e4:	eddf 5a59 	vldr	s11, [pc, #356]	; 800a74c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a5e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a5ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a5f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a5f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a600:	e036      	b.n	800a670 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a602:	4b50      	ldr	r3, [pc, #320]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d005      	beq.n	800a61a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800a60e:	4b4d      	ldr	r3, [pc, #308]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	0f1b      	lsrs	r3, r3, #28
 800a614:	f003 030f 	and.w	r3, r3, #15
 800a618:	e006      	b.n	800a628 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800a61a:	4b4a      	ldr	r3, [pc, #296]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a61c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a620:	041b      	lsls	r3, r3, #16
 800a622:	0f1b      	lsrs	r3, r3, #28
 800a624:	f003 030f 	and.w	r3, r3, #15
 800a628:	4a49      	ldr	r2, [pc, #292]	; (800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a62a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a62e:	ee07 3a90 	vmov	s15, r3
 800a632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	ee07 3a90 	vmov	s15, r3
 800a63c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	ee07 3a90 	vmov	s15, r3
 800a64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a64e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a652:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a74c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a65a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a65e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a662:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a66a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a66e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800a670:	4b34      	ldr	r3, [pc, #208]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d017      	beq.n	800a6ac <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a67c:	4b31      	ldr	r3, [pc, #196]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a67e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a680:	0a5b      	lsrs	r3, r3, #9
 800a682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a686:	ee07 3a90 	vmov	s15, r3
 800a68a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800a68e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a692:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a696:	edd7 6a07 	vldr	s13, [r7, #28]
 800a69a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a69e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6a2:	ee17 2a90 	vmov	r2, s15
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	601a      	str	r2, [r3, #0]
 800a6aa:	e002      	b.n	800a6b2 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800a6b2:	4b24      	ldr	r3, [pc, #144]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d017      	beq.n	800a6ee <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a6be:	4b21      	ldr	r3, [pc, #132]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a6c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6c2:	0c1b      	lsrs	r3, r3, #16
 800a6c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6c8:	ee07 3a90 	vmov	s15, r3
 800a6cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800a6d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6d4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a6d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6e4:	ee17 2a90 	vmov	r2, s15
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	605a      	str	r2, [r3, #4]
 800a6ec:	e002      	b.n	800a6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800a6f4:	4b13      	ldr	r3, [pc, #76]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d017      	beq.n	800a730 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a700:	4b10      	ldr	r3, [pc, #64]	; (800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a704:	0e1b      	lsrs	r3, r3, #24
 800a706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a70a:	ee07 3a90 	vmov	s15, r3
 800a70e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800a712:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a716:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a71a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a71e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a726:	ee17 2a90 	vmov	r2, s15
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a72e:	e002      	b.n	800a736 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	609a      	str	r2, [r3, #8]
}
 800a736:	bf00      	nop
 800a738:	3724      	adds	r7, #36	; 0x24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	46020c00 	.word	0x46020c00
 800a748:	4b742400 	.word	0x4b742400
 800a74c:	46000000 	.word	0x46000000
 800a750:	0800db74 	.word	0x0800db74

0800a754 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b08e      	sub	sp, #56	; 0x38
 800a758:	af00      	add	r7, sp, #0
 800a75a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a75e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a762:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800a766:	430b      	orrs	r3, r1
 800a768:	d145      	bne.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a76a:	4ba7      	ldr	r3, [pc, #668]	; (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a76c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a774:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800a776:	4ba4      	ldr	r3, [pc, #656]	; (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a77c:	f003 0302 	and.w	r3, r3, #2
 800a780:	2b02      	cmp	r3, #2
 800a782:	d108      	bne.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800a784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a78a:	d104      	bne.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800a78c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a790:	637b      	str	r3, [r7, #52]	; 0x34
 800a792:	f001 bb5a 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800a796:	4b9c      	ldr	r3, [pc, #624]	; (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a79c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7a4:	d114      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7ac:	d110      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a7ae:	4b96      	ldr	r3, [pc, #600]	; (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a7b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a7b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7bc:	d103      	bne.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800a7be:	23fa      	movs	r3, #250	; 0xfa
 800a7c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a7c2:	f001 bb42 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800a7c6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a7ca:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a7cc:	f001 bb3d 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800a7d0:	4b8d      	ldr	r3, [pc, #564]	; (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7dc:	d107      	bne.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7e4:	d103      	bne.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800a7e6:	4b89      	ldr	r3, [pc, #548]	; (800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a7e8:	637b      	str	r3, [r7, #52]	; 0x34
 800a7ea:	f001 bb2e 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	637b      	str	r3, [r7, #52]	; 0x34
 800a7f2:	f001 bb2a 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a7f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7fa:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a7fe:	430b      	orrs	r3, r1
 800a800:	d151      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a802:	4b81      	ldr	r3, [pc, #516]	; (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a804:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a808:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a80c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a810:	2b80      	cmp	r3, #128	; 0x80
 800a812:	d035      	beq.n	800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800a814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a816:	2b80      	cmp	r3, #128	; 0x80
 800a818:	d841      	bhi.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81c:	2b60      	cmp	r3, #96	; 0x60
 800a81e:	d02a      	beq.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800a820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a822:	2b60      	cmp	r3, #96	; 0x60
 800a824:	d83b      	bhi.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a828:	2b40      	cmp	r3, #64	; 0x40
 800a82a:	d009      	beq.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82e:	2b40      	cmp	r3, #64	; 0x40
 800a830:	d835      	bhi.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00c      	beq.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800a838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83a:	2b20      	cmp	r3, #32
 800a83c:	d012      	beq.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a83e:	e02e      	b.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a844:	4618      	mov	r0, r3
 800a846:	f7ff fb77 	bl	8009f38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a84e:	f001 bafc 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a852:	f107 0318 	add.w	r3, r7, #24
 800a856:	4618      	mov	r0, r3
 800a858:	f7ff fcc8 	bl	800a1ec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a860:	f001 baf3 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a864:	f107 030c 	add.w	r3, r7, #12
 800a868:	4618      	mov	r0, r3
 800a86a:	f7ff fe19 	bl	800a4a0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a872:	f001 baea 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a876:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a87a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a87c:	f001 bae5 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a880:	4b61      	ldr	r3, [pc, #388]	; (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a88c:	d103      	bne.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800a88e:	4b60      	ldr	r3, [pc, #384]	; (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a890:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a892:	f001 bada 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a896:	2300      	movs	r3, #0
 800a898:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a89a:	f001 bad6 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a8a2:	f001 bad2 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800a8a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8aa:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a8ae:	430b      	orrs	r3, r1
 800a8b0:	d158      	bne.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a8b2:	4b55      	ldr	r3, [pc, #340]	; (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a8b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a8b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8c4:	d03b      	beq.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8cc:	d846      	bhi.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8d4:	d02e      	beq.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8dc:	d83e      	bhi.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8e4:	d00b      	beq.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8ec:	d836      	bhi.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00d      	beq.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800a8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8fa:	d012      	beq.n	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800a8fc:	e02e      	b.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a902:	4618      	mov	r0, r3
 800a904:	f7ff fb18 	bl	8009f38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a90c:	f001 ba9d 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a910:	f107 0318 	add.w	r3, r7, #24
 800a914:	4618      	mov	r0, r3
 800a916:	f7ff fc69 	bl	800a1ec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a91e:	f001 ba94 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a922:	f107 030c 	add.w	r3, r7, #12
 800a926:	4618      	mov	r0, r3
 800a928:	f7ff fdba 	bl	800a4a0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a930:	f001 ba8b 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a934:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a938:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a93a:	f001 ba86 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a93e:	4b32      	ldr	r3, [pc, #200]	; (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a94a:	d103      	bne.n	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800a94c:	4b30      	ldr	r3, [pc, #192]	; (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a94e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a950:	f001 ba7b 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a954:	2300      	movs	r3, #0
 800a956:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a958:	f001 ba77 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800a95c:	2300      	movs	r3, #0
 800a95e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a960:	f001 ba73 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800a964:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a968:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a96c:	430b      	orrs	r3, r1
 800a96e:	d126      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800a970:	4b25      	ldr	r3, [pc, #148]	; (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a972:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a97a:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800a97c:	4b22      	ldr	r3, [pc, #136]	; (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a988:	d106      	bne.n	800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d103      	bne.n	800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800a990:	4b1f      	ldr	r3, [pc, #124]	; (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a992:	637b      	str	r3, [r7, #52]	; 0x34
 800a994:	f001 ba59 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800a998:	4b1b      	ldr	r3, [pc, #108]	; (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9a4:	d107      	bne.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9ac:	d103      	bne.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800a9ae:	4b19      	ldr	r3, [pc, #100]	; (800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a9b0:	637b      	str	r3, [r7, #52]	; 0x34
 800a9b2:	f001 ba4a 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	637b      	str	r3, [r7, #52]	; 0x34
 800a9ba:	f001 ba46 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800a9be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9c2:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800a9c6:	430b      	orrs	r3, r1
 800a9c8:	d16e      	bne.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a9ca:	4b0f      	ldr	r3, [pc, #60]	; (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a9cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9d0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a9d4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a9dc:	d03d      	beq.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a9e4:	d85c      	bhi.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9ec:	d014      	beq.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9f4:	d854      	bhi.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d01f      	beq.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800a9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa02:	d012      	beq.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800aa04:	e04c      	b.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800aa06:	bf00      	nop
 800aa08:	46020c00 	.word	0x46020c00
 800aa0c:	0007a120 	.word	0x0007a120
 800aa10:	00f42400 	.word	0x00f42400
 800aa14:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7ff fa8b 	bl	8009f38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa26:	f001 ba10 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa2a:	f107 0318 	add.w	r3, r7, #24
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7ff fbdc 	bl	800a1ec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa38:	f001 ba07 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800aa3c:	4ba7      	ldr	r3, [pc, #668]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa48:	d103      	bne.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800aa4a:	4ba5      	ldr	r3, [pc, #660]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aa4c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aa4e:	f001 b9fc 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800aa52:	2300      	movs	r3, #0
 800aa54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa56:	f001 b9f8 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800aa5a:	4ba0      	ldr	r3, [pc, #640]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f003 0320 	and.w	r3, r3, #32
 800aa62:	2b20      	cmp	r3, #32
 800aa64:	d118      	bne.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aa66:	4b9d      	ldr	r3, [pc, #628]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d005      	beq.n	800aa7e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800aa72:	4b9a      	ldr	r3, [pc, #616]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	0e1b      	lsrs	r3, r3, #24
 800aa78:	f003 030f 	and.w	r3, r3, #15
 800aa7c:	e006      	b.n	800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800aa7e:	4b97      	ldr	r3, [pc, #604]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aa80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aa84:	041b      	lsls	r3, r3, #16
 800aa86:	0e1b      	lsrs	r3, r3, #24
 800aa88:	f003 030f 	and.w	r3, r3, #15
 800aa8c:	4a95      	ldr	r2, [pc, #596]	; (800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa92:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aa94:	f001 b9d9 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa9c:	f001 b9d5 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aaa4:	f001 b9d1 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800aaa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaac:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800aab0:	430b      	orrs	r3, r1
 800aab2:	d17f      	bne.n	800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800aab4:	4b89      	ldr	r3, [pc, #548]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aab6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800aaba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aabe:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800aac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d165      	bne.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800aac6:	4b85      	ldr	r3, [pc, #532]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aacc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800aad0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800aad8:	d034      	beq.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800aada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aadc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800aae0:	d853      	bhi.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800aae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aae8:	d00b      	beq.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800aaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aaf0:	d84b      	bhi.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d016      	beq.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aafe:	d009      	beq.n	800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800ab00:	e043      	b.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7ff fa16 	bl	8009f38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800ab10:	f001 b99b 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab14:	f107 0318 	add.w	r3, r7, #24
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7ff fb67 	bl	800a1ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800ab22:	f001 b992 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800ab26:	4b6d      	ldr	r3, [pc, #436]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab32:	d103      	bne.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800ab34:	4b6a      	ldr	r3, [pc, #424]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ab36:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800ab38:	f001 b987 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800ab40:	f001 b983 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ab44:	4b65      	ldr	r3, [pc, #404]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f003 0320 	and.w	r3, r3, #32
 800ab4c:	2b20      	cmp	r3, #32
 800ab4e:	d118      	bne.n	800ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ab50:	4b62      	ldr	r3, [pc, #392]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d005      	beq.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800ab5c:	4b5f      	ldr	r3, [pc, #380]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	0e1b      	lsrs	r3, r3, #24
 800ab62:	f003 030f 	and.w	r3, r3, #15
 800ab66:	e006      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800ab68:	4b5c      	ldr	r3, [pc, #368]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ab6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ab6e:	041b      	lsls	r3, r3, #16
 800ab70:	0e1b      	lsrs	r3, r3, #24
 800ab72:	f003 030f 	and.w	r3, r3, #15
 800ab76:	4a5b      	ldr	r2, [pc, #364]	; (800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ab78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab7c:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800ab7e:	f001 b964 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800ab82:	2300      	movs	r3, #0
 800ab84:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800ab86:	f001 b960 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800ab8e:	f001 b95c 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800ab92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab98:	d108      	bne.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7ff f9ca 	bl	8009f38 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800aba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba6:	637b      	str	r3, [r7, #52]	; 0x34
 800aba8:	f001 b94f 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800abac:	2300      	movs	r3, #0
 800abae:	637b      	str	r3, [r7, #52]	; 0x34
 800abb0:	f001 b94b 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800abb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abb8:	1e51      	subs	r1, r2, #1
 800abba:	430b      	orrs	r3, r1
 800abbc:	d136      	bne.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800abbe:	4b47      	ldr	r3, [pc, #284]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800abc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800abc4:	f003 0303 	and.w	r3, r3, #3
 800abc8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800abca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d104      	bne.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800abd0:	f7fe f968 	bl	8008ea4 <HAL_RCC_GetPCLK2Freq>
 800abd4:	6378      	str	r0, [r7, #52]	; 0x34
 800abd6:	f001 b938 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800abda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d104      	bne.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800abe0:	f7fe f830 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800abe4:	6378      	str	r0, [r7, #52]	; 0x34
 800abe6:	f001 b930 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800abea:	4b3c      	ldr	r3, [pc, #240]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abf6:	d106      	bne.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800abf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d103      	bne.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800abfe:	4b3a      	ldr	r3, [pc, #232]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ac00:	637b      	str	r3, [r7, #52]	; 0x34
 800ac02:	f001 b922 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800ac06:	4b35      	ldr	r3, [pc, #212]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ac08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ac0c:	f003 0302 	and.w	r3, r3, #2
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	d107      	bne.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800ac14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac16:	2b03      	cmp	r3, #3
 800ac18:	d104      	bne.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800ac1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac1e:	637b      	str	r3, [r7, #52]	; 0x34
 800ac20:	f001 b913 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800ac24:	2300      	movs	r3, #0
 800ac26:	637b      	str	r3, [r7, #52]	; 0x34
 800ac28:	f001 b90f 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800ac2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac30:	1e91      	subs	r1, r2, #2
 800ac32:	430b      	orrs	r3, r1
 800ac34:	d136      	bne.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800ac36:	4b29      	ldr	r3, [pc, #164]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ac38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac3c:	f003 030c 	and.w	r3, r3, #12
 800ac40:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800ac42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d104      	bne.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ac48:	f7fe f918 	bl	8008e7c <HAL_RCC_GetPCLK1Freq>
 800ac4c:	6378      	str	r0, [r7, #52]	; 0x34
 800ac4e:	f001 b8fc 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800ac52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac54:	2b04      	cmp	r3, #4
 800ac56:	d104      	bne.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ac58:	f7fd fff4 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800ac5c:	6378      	str	r0, [r7, #52]	; 0x34
 800ac5e:	f001 b8f4 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800ac62:	4b1e      	ldr	r3, [pc, #120]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac6e:	d106      	bne.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ac70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac72:	2b08      	cmp	r3, #8
 800ac74:	d103      	bne.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800ac76:	4b1c      	ldr	r3, [pc, #112]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ac78:	637b      	str	r3, [r7, #52]	; 0x34
 800ac7a:	f001 b8e6 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800ac7e:	4b17      	ldr	r3, [pc, #92]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ac80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ac84:	f003 0302 	and.w	r3, r3, #2
 800ac88:	2b02      	cmp	r3, #2
 800ac8a:	d107      	bne.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800ac8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8e:	2b0c      	cmp	r3, #12
 800ac90:	d104      	bne.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800ac92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac96:	637b      	str	r3, [r7, #52]	; 0x34
 800ac98:	f001 b8d7 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	637b      	str	r3, [r7, #52]	; 0x34
 800aca0:	f001 b8d3 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800aca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aca8:	1f11      	subs	r1, r2, #4
 800acaa:	430b      	orrs	r3, r1
 800acac:	d13f      	bne.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800acae:	4b0b      	ldr	r3, [pc, #44]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800acb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800acb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800acb8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d104      	bne.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800acc0:	f7fe f8dc 	bl	8008e7c <HAL_RCC_GetPCLK1Freq>
 800acc4:	6378      	str	r0, [r7, #52]	; 0x34
 800acc6:	f001 b8c0 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800acca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800accc:	2b10      	cmp	r3, #16
 800acce:	d10d      	bne.n	800acec <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800acd0:	f7fd ffb8 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800acd4:	6378      	str	r0, [r7, #52]	; 0x34
 800acd6:	f001 b8b8 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800acda:	bf00      	nop
 800acdc:	46020c00 	.word	0x46020c00
 800ace0:	02dc6c00 	.word	0x02dc6c00
 800ace4:	0800db74 	.word	0x0800db74
 800ace8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800acec:	4ba8      	ldr	r3, [pc, #672]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acf8:	d106      	bne.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800acfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfc:	2b20      	cmp	r3, #32
 800acfe:	d103      	bne.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800ad00:	4ba4      	ldr	r3, [pc, #656]	; (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ad02:	637b      	str	r3, [r7, #52]	; 0x34
 800ad04:	f001 b8a1 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800ad08:	4ba1      	ldr	r3, [pc, #644]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ad0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ad0e:	f003 0302 	and.w	r3, r3, #2
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d107      	bne.n	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ad16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad18:	2b30      	cmp	r3, #48	; 0x30
 800ad1a:	d104      	bne.n	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800ad1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad20:	637b      	str	r3, [r7, #52]	; 0x34
 800ad22:	f001 b892 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800ad26:	2300      	movs	r3, #0
 800ad28:	637b      	str	r3, [r7, #52]	; 0x34
 800ad2a:	f001 b88e 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800ad2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad32:	f1a2 0108 	sub.w	r1, r2, #8
 800ad36:	430b      	orrs	r3, r1
 800ad38:	d136      	bne.n	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800ad3a:	4b95      	ldr	r3, [pc, #596]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ad3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ad40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ad44:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800ad46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d104      	bne.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ad4c:	f7fe f896 	bl	8008e7c <HAL_RCC_GetPCLK1Freq>
 800ad50:	6378      	str	r0, [r7, #52]	; 0x34
 800ad52:	f001 b87a 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800ad56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad58:	2b40      	cmp	r3, #64	; 0x40
 800ad5a:	d104      	bne.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ad5c:	f7fd ff72 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800ad60:	6378      	str	r0, [r7, #52]	; 0x34
 800ad62:	f001 b872 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800ad66:	4b8a      	ldr	r3, [pc, #552]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad72:	d106      	bne.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800ad74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad76:	2b80      	cmp	r3, #128	; 0x80
 800ad78:	d103      	bne.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800ad7a:	4b86      	ldr	r3, [pc, #536]	; (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ad7c:	637b      	str	r3, [r7, #52]	; 0x34
 800ad7e:	f001 b864 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800ad82:	4b83      	ldr	r3, [pc, #524]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ad84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ad88:	f003 0302 	and.w	r3, r3, #2
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d107      	bne.n	800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ad90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad92:	2bc0      	cmp	r3, #192	; 0xc0
 800ad94:	d104      	bne.n	800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800ad96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ad9c:	f001 b855 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800ada0:	2300      	movs	r3, #0
 800ada2:	637b      	str	r3, [r7, #52]	; 0x34
 800ada4:	f001 b851 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800ada8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adac:	f1a2 0110 	sub.w	r1, r2, #16
 800adb0:	430b      	orrs	r3, r1
 800adb2:	d139      	bne.n	800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800adb4:	4b76      	ldr	r3, [pc, #472]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800adb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800adba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adbe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800adc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d104      	bne.n	800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800adc6:	f7fe f859 	bl	8008e7c <HAL_RCC_GetPCLK1Freq>
 800adca:	6378      	str	r0, [r7, #52]	; 0x34
 800adcc:	f001 b83d 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800add0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800add6:	d104      	bne.n	800ade2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800add8:	f7fd ff34 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800addc:	6378      	str	r0, [r7, #52]	; 0x34
 800adde:	f001 b834 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800ade2:	4b6b      	ldr	r3, [pc, #428]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adee:	d107      	bne.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800adf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adf6:	d103      	bne.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800adf8:	4b66      	ldr	r3, [pc, #408]	; (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800adfa:	637b      	str	r3, [r7, #52]	; 0x34
 800adfc:	f001 b825 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800ae00:	4b63      	ldr	r3, [pc, #396]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ae02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae06:	f003 0302 	and.w	r3, r3, #2
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	d108      	bne.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae14:	d104      	bne.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800ae16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae1a:	637b      	str	r3, [r7, #52]	; 0x34
 800ae1c:	f001 b815 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800ae20:	2300      	movs	r3, #0
 800ae22:	637b      	str	r3, [r7, #52]	; 0x34
 800ae24:	f001 b811 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800ae28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae2c:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800ae30:	430b      	orrs	r3, r1
 800ae32:	d139      	bne.n	800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800ae34:	4b56      	ldr	r3, [pc, #344]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ae36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ae3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ae3e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800ae40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d104      	bne.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ae46:	f7fe f819 	bl	8008e7c <HAL_RCC_GetPCLK1Freq>
 800ae4a:	6378      	str	r0, [r7, #52]	; 0x34
 800ae4c:	f000 bffd 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800ae50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae56:	d104      	bne.n	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ae58:	f7fd fef4 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800ae5c:	6378      	str	r0, [r7, #52]	; 0x34
 800ae5e:	f000 bff4 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800ae62:	4b4b      	ldr	r3, [pc, #300]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae6e:	d107      	bne.n	800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800ae70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae76:	d103      	bne.n	800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800ae78:	4b46      	ldr	r3, [pc, #280]	; (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ae7a:	637b      	str	r3, [r7, #52]	; 0x34
 800ae7c:	f000 bfe5 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800ae80:	4b43      	ldr	r3, [pc, #268]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ae82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae86:	f003 0302 	and.w	r3, r3, #2
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d108      	bne.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae94:	d104      	bne.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800ae96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ae9c:	f000 bfd5 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800aea0:	2300      	movs	r3, #0
 800aea2:	637b      	str	r3, [r7, #52]	; 0x34
 800aea4:	f000 bfd1 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800aea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeac:	f1a2 0120 	sub.w	r1, r2, #32
 800aeb0:	430b      	orrs	r3, r1
 800aeb2:	d158      	bne.n	800af66 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800aeb4:	4b36      	ldr	r3, [pc, #216]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aeb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aeba:	f003 0307 	and.w	r3, r3, #7
 800aebe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800aec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d104      	bne.n	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800aec6:	f7fe f801 	bl	8008ecc <HAL_RCC_GetPCLK3Freq>
 800aeca:	6378      	str	r0, [r7, #52]	; 0x34
 800aecc:	f000 bfbd 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800aed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d104      	bne.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aed6:	f7fd feb5 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800aeda:	6378      	str	r0, [r7, #52]	; 0x34
 800aedc:	f000 bfb5 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800aee0:	4b2b      	ldr	r3, [pc, #172]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aeec:	d106      	bne.n	800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800aeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d103      	bne.n	800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800aef4:	4b27      	ldr	r3, [pc, #156]	; (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800aef6:	637b      	str	r3, [r7, #52]	; 0x34
 800aef8:	f000 bfa7 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800aefc:	4b24      	ldr	r3, [pc, #144]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aefe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af02:	f003 0302 	and.w	r3, r3, #2
 800af06:	2b02      	cmp	r3, #2
 800af08:	d107      	bne.n	800af1a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800af0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0c:	2b03      	cmp	r3, #3
 800af0e:	d104      	bne.n	800af1a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800af10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af14:	637b      	str	r3, [r7, #52]	; 0x34
 800af16:	f000 bf98 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800af1a:	4b1d      	ldr	r3, [pc, #116]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f003 0320 	and.w	r3, r3, #32
 800af22:	2b20      	cmp	r3, #32
 800af24:	d11b      	bne.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800af26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af28:	2b04      	cmp	r3, #4
 800af2a:	d118      	bne.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800af2c:	4b18      	ldr	r3, [pc, #96]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af34:	2b00      	cmp	r3, #0
 800af36:	d005      	beq.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800af38:	4b15      	ldr	r3, [pc, #84]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	0e1b      	lsrs	r3, r3, #24
 800af3e:	f003 030f 	and.w	r3, r3, #15
 800af42:	e006      	b.n	800af52 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800af44:	4b12      	ldr	r3, [pc, #72]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800af46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800af4a:	041b      	lsls	r3, r3, #16
 800af4c:	0e1b      	lsrs	r3, r3, #24
 800af4e:	f003 030f 	and.w	r3, r3, #15
 800af52:	4a11      	ldr	r2, [pc, #68]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800af54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af58:	637b      	str	r3, [r7, #52]	; 0x34
 800af5a:	f000 bf76 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800af5e:	2300      	movs	r3, #0
 800af60:	637b      	str	r3, [r7, #52]	; 0x34
 800af62:	f000 bf72 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800af66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af6a:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800af6e:	430b      	orrs	r3, r1
 800af70:	d172      	bne.n	800b058 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800af72:	4b07      	ldr	r3, [pc, #28]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800af74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800af78:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800af7c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800af7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af84:	d10a      	bne.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800af86:	f7fd fe5d 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800af8a:	6378      	str	r0, [r7, #52]	; 0x34
 800af8c:	f000 bf5d 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800af90:	46020c00 	.word	0x46020c00
 800af94:	00f42400 	.word	0x00f42400
 800af98:	0800db74 	.word	0x0800db74
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800af9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afa2:	d108      	bne.n	800afb6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afa4:	f107 0318 	add.w	r3, r7, #24
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7ff f91f 	bl	800a1ec <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800afae:	6a3b      	ldr	r3, [r7, #32]
 800afb0:	637b      	str	r3, [r7, #52]	; 0x34
 800afb2:	f000 bf4a 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d104      	bne.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800afbc:	f7fd ff44 	bl	8008e48 <HAL_RCC_GetHCLKFreq>
 800afc0:	6378      	str	r0, [r7, #52]	; 0x34
 800afc2:	f000 bf42 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800afcc:	d122      	bne.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800afce:	4bb0      	ldr	r3, [pc, #704]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f003 0320 	and.w	r3, r3, #32
 800afd6:	2b20      	cmp	r3, #32
 800afd8:	d118      	bne.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800afda:	4bad      	ldr	r3, [pc, #692]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d005      	beq.n	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800afe6:	4baa      	ldr	r3, [pc, #680]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	0e1b      	lsrs	r3, r3, #24
 800afec:	f003 030f 	and.w	r3, r3, #15
 800aff0:	e006      	b.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800aff2:	4ba7      	ldr	r3, [pc, #668]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aff4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aff8:	041b      	lsls	r3, r3, #16
 800affa:	0e1b      	lsrs	r3, r3, #24
 800affc:	f003 030f 	and.w	r3, r3, #15
 800b000:	4aa4      	ldr	r2, [pc, #656]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b006:	637b      	str	r3, [r7, #52]	; 0x34
 800b008:	f000 bf1f 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b00c:	2300      	movs	r3, #0
 800b00e:	637b      	str	r3, [r7, #52]	; 0x34
 800b010:	f000 bf1b 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800b014:	4b9e      	ldr	r3, [pc, #632]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b01c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b020:	d107      	bne.n	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b024:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b028:	d103      	bne.n	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800b02a:	4b9b      	ldr	r3, [pc, #620]	; (800b298 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b02c:	637b      	str	r3, [r7, #52]	; 0x34
 800b02e:	f000 bf0c 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800b032:	4b97      	ldr	r3, [pc, #604]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b03a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b03e:	d107      	bne.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800b040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b046:	d103      	bne.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800b048:	4b93      	ldr	r3, [pc, #588]	; (800b298 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b04a:	637b      	str	r3, [r7, #52]	; 0x34
 800b04c:	f000 befd 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800b050:	2300      	movs	r3, #0
 800b052:	637b      	str	r3, [r7, #52]	; 0x34
 800b054:	f000 bef9 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800b058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b05c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b060:	430b      	orrs	r3, r1
 800b062:	d158      	bne.n	800b116 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800b064:	4b8a      	ldr	r3, [pc, #552]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b066:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b06a:	f003 0307 	and.w	r3, r3, #7
 800b06e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b072:	2b04      	cmp	r3, #4
 800b074:	d84b      	bhi.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800b076:	a201      	add	r2, pc, #4	; (adr r2, 800b07c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800b078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b07c:	0800b0b5 	.word	0x0800b0b5
 800b080:	0800b091 	.word	0x0800b091
 800b084:	0800b0a3 	.word	0x0800b0a3
 800b088:	0800b0bf 	.word	0x0800b0bf
 800b08c:	0800b0c9 	.word	0x0800b0c9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b094:	4618      	mov	r0, r3
 800b096:	f7fe ff4f 	bl	8009f38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b09e:	f000 bed4 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0a2:	f107 030c 	add.w	r3, r7, #12
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7ff f9fa 	bl	800a4a0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0b0:	f000 becb 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b0b4:	f7fd fec8 	bl	8008e48 <HAL_RCC_GetHCLKFreq>
 800b0b8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b0ba:	f000 bec6 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b0be:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b0c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0c4:	f000 bec1 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b0c8:	4b71      	ldr	r3, [pc, #452]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 0320 	and.w	r3, r3, #32
 800b0d0:	2b20      	cmp	r3, #32
 800b0d2:	d118      	bne.n	800b106 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b0d4:	4b6e      	ldr	r3, [pc, #440]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d005      	beq.n	800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800b0e0:	4b6b      	ldr	r3, [pc, #428]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	0e1b      	lsrs	r3, r3, #24
 800b0e6:	f003 030f 	and.w	r3, r3, #15
 800b0ea:	e006      	b.n	800b0fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800b0ec:	4b68      	ldr	r3, [pc, #416]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b0ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b0f2:	041b      	lsls	r3, r3, #16
 800b0f4:	0e1b      	lsrs	r3, r3, #24
 800b0f6:	f003 030f 	and.w	r3, r3, #15
 800b0fa:	4a66      	ldr	r2, [pc, #408]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b100:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b102:	f000 bea2 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b106:	2300      	movs	r3, #0
 800b108:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b10a:	f000 be9e 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b10e:	2300      	movs	r3, #0
 800b110:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b112:	f000 be9a 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800b116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b11a:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800b11e:	430b      	orrs	r3, r1
 800b120:	d167      	bne.n	800b1f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800b122:	4b5b      	ldr	r3, [pc, #364]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b128:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b12c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b130:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b134:	d036      	beq.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800b136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b138:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b13c:	d855      	bhi.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b140:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b144:	d029      	beq.n	800b19a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800b146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b148:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b14c:	d84d      	bhi.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b154:	d013      	beq.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800b156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b15c:	d845      	bhi.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b160:	2b00      	cmp	r3, #0
 800b162:	d015      	beq.n	800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800b164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b16a:	d13e      	bne.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b16c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b170:	4618      	mov	r0, r3
 800b172:	f7fe fee1 	bl	8009f38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b178:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b17a:	f000 be66 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b17e:	f107 030c 	add.w	r3, r7, #12
 800b182:	4618      	mov	r0, r3
 800b184:	f7ff f98c 	bl	800a4a0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b18c:	f000 be5d 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b190:	f7fd fe5a 	bl	8008e48 <HAL_RCC_GetHCLKFreq>
 800b194:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b196:	f000 be58 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b19a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b19e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1a0:	f000 be53 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b1a4:	4b3a      	ldr	r3, [pc, #232]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 0320 	and.w	r3, r3, #32
 800b1ac:	2b20      	cmp	r3, #32
 800b1ae:	d118      	bne.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b1b0:	4b37      	ldr	r3, [pc, #220]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d005      	beq.n	800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800b1bc:	4b34      	ldr	r3, [pc, #208]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	0e1b      	lsrs	r3, r3, #24
 800b1c2:	f003 030f 	and.w	r3, r3, #15
 800b1c6:	e006      	b.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b1c8:	4b31      	ldr	r3, [pc, #196]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b1ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b1ce:	041b      	lsls	r3, r3, #16
 800b1d0:	0e1b      	lsrs	r3, r3, #24
 800b1d2:	f003 030f 	and.w	r3, r3, #15
 800b1d6:	4a2f      	ldr	r2, [pc, #188]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1dc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b1de:	f000 be34 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1e6:	f000 be30 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1ee:	f000 be2c 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800b1f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1f6:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800b1fa:	430b      	orrs	r3, r1
 800b1fc:	d152      	bne.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b1fe:	4b24      	ldr	r3, [pc, #144]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b204:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b208:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800b20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d104      	bne.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b210:	f7fd fe34 	bl	8008e7c <HAL_RCC_GetPCLK1Freq>
 800b214:	6378      	str	r0, [r7, #52]	; 0x34
 800b216:	f000 be18 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800b21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b220:	d104      	bne.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b222:	f7fd fd0f 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800b226:	6378      	str	r0, [r7, #52]	; 0x34
 800b228:	f000 be0f 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800b22c:	4b18      	ldr	r3, [pc, #96]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b238:	d107      	bne.n	800b24a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800b23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b240:	d103      	bne.n	800b24a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800b242:	4b15      	ldr	r3, [pc, #84]	; (800b298 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b244:	637b      	str	r3, [r7, #52]	; 0x34
 800b246:	f000 be00 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800b24a:	4b11      	ldr	r3, [pc, #68]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f003 0320 	and.w	r3, r3, #32
 800b252:	2b20      	cmp	r3, #32
 800b254:	d122      	bne.n	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800b256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b25c:	d11e      	bne.n	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b25e:	4b0c      	ldr	r3, [pc, #48]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b266:	2b00      	cmp	r3, #0
 800b268:	d005      	beq.n	800b276 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800b26a:	4b09      	ldr	r3, [pc, #36]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	0e1b      	lsrs	r3, r3, #24
 800b270:	f003 030f 	and.w	r3, r3, #15
 800b274:	e006      	b.n	800b284 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800b276:	4b06      	ldr	r3, [pc, #24]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b27c:	041b      	lsls	r3, r3, #16
 800b27e:	0e1b      	lsrs	r3, r3, #24
 800b280:	f003 030f 	and.w	r3, r3, #15
 800b284:	4a03      	ldr	r2, [pc, #12]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b28a:	637b      	str	r3, [r7, #52]	; 0x34
 800b28c:	f000 bddd 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b290:	46020c00 	.word	0x46020c00
 800b294:	0800db74 	.word	0x0800db74
 800b298:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800b29c:	2300      	movs	r3, #0
 800b29e:	637b      	str	r3, [r7, #52]	; 0x34
 800b2a0:	f000 bdd3 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800b2a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2a8:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800b2ac:	430b      	orrs	r3, r1
 800b2ae:	d14c      	bne.n	800b34a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800b2b0:	4ba8      	ldr	r3, [pc, #672]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b2b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b2b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b2ba:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800b2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d104      	bne.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b2c2:	f7fd fddb 	bl	8008e7c <HAL_RCC_GetPCLK1Freq>
 800b2c6:	6378      	str	r0, [r7, #52]	; 0x34
 800b2c8:	f000 bdbf 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2d2:	d104      	bne.n	800b2de <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b2d4:	f7fd fcb6 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800b2d8:	6378      	str	r0, [r7, #52]	; 0x34
 800b2da:	f000 bdb6 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800b2de:	4b9d      	ldr	r3, [pc, #628]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2ea:	d107      	bne.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2f2:	d103      	bne.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800b2f4:	4b98      	ldr	r3, [pc, #608]	; (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b2f6:	637b      	str	r3, [r7, #52]	; 0x34
 800b2f8:	f000 bda7 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800b2fc:	4b95      	ldr	r3, [pc, #596]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f003 0320 	and.w	r3, r3, #32
 800b304:	2b20      	cmp	r3, #32
 800b306:	d11c      	bne.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800b308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b30e:	d118      	bne.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b310:	4b90      	ldr	r3, [pc, #576]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b312:	689b      	ldr	r3, [r3, #8]
 800b314:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d005      	beq.n	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800b31c:	4b8d      	ldr	r3, [pc, #564]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	0e1b      	lsrs	r3, r3, #24
 800b322:	f003 030f 	and.w	r3, r3, #15
 800b326:	e006      	b.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800b328:	4b8a      	ldr	r3, [pc, #552]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b32a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b32e:	041b      	lsls	r3, r3, #16
 800b330:	0e1b      	lsrs	r3, r3, #24
 800b332:	f003 030f 	and.w	r3, r3, #15
 800b336:	4a89      	ldr	r2, [pc, #548]	; (800b55c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b33c:	637b      	str	r3, [r7, #52]	; 0x34
 800b33e:	f000 bd84 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800b342:	2300      	movs	r3, #0
 800b344:	637b      	str	r3, [r7, #52]	; 0x34
 800b346:	f000 bd80 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800b34a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b34e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b352:	430b      	orrs	r3, r1
 800b354:	d158      	bne.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b356:	4b7f      	ldr	r3, [pc, #508]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b35c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b360:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b364:	2bc0      	cmp	r3, #192	; 0xc0
 800b366:	d028      	beq.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800b368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36a:	2bc0      	cmp	r3, #192	; 0xc0
 800b36c:	d848      	bhi.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800b36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b370:	2b80      	cmp	r3, #128	; 0x80
 800b372:	d00e      	beq.n	800b392 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800b374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b376:	2b80      	cmp	r3, #128	; 0x80
 800b378:	d842      	bhi.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800b37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d003      	beq.n	800b388 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800b380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b382:	2b40      	cmp	r3, #64	; 0x40
 800b384:	d014      	beq.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800b386:	e03b      	b.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800b388:	f7fd fda0 	bl	8008ecc <HAL_RCC_GetPCLK3Freq>
 800b38c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b38e:	f000 bd5c 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b392:	4b70      	ldr	r3, [pc, #448]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b39a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b39e:	d103      	bne.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800b3a0:	4b6d      	ldr	r3, [pc, #436]	; (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b3a2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b3a4:	f000 bd51 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b3ac:	f000 bd4d 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800b3b0:	f7fd fc48 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800b3b4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b3b6:	f000 bd48 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b3ba:	4b66      	ldr	r3, [pc, #408]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f003 0320 	and.w	r3, r3, #32
 800b3c2:	2b20      	cmp	r3, #32
 800b3c4:	d118      	bne.n	800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b3c6:	4b63      	ldr	r3, [pc, #396]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d005      	beq.n	800b3de <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800b3d2:	4b60      	ldr	r3, [pc, #384]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	0e1b      	lsrs	r3, r3, #24
 800b3d8:	f003 030f 	and.w	r3, r3, #15
 800b3dc:	e006      	b.n	800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800b3de:	4b5d      	ldr	r3, [pc, #372]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b3e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b3e4:	041b      	lsls	r3, r3, #16
 800b3e6:	0e1b      	lsrs	r3, r3, #24
 800b3e8:	f003 030f 	and.w	r3, r3, #15
 800b3ec:	4a5b      	ldr	r2, [pc, #364]	; (800b55c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b3f4:	f000 bd29 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b3fc:	f000 bd25 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800b400:	2300      	movs	r3, #0
 800b402:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b404:	f000 bd21 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800b408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b40c:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800b410:	430b      	orrs	r3, r1
 800b412:	d14c      	bne.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b414:	4b4f      	ldr	r3, [pc, #316]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b41a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b41e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800b420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b422:	2b00      	cmp	r3, #0
 800b424:	d104      	bne.n	800b430 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b426:	f7fd fd29 	bl	8008e7c <HAL_RCC_GetPCLK1Freq>
 800b42a:	6378      	str	r0, [r7, #52]	; 0x34
 800b42c:	f000 bd0d 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800b430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b432:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b436:	d104      	bne.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b438:	f7fd fc04 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800b43c:	6378      	str	r0, [r7, #52]	; 0x34
 800b43e:	f000 bd04 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800b442:	4b44      	ldr	r3, [pc, #272]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b44a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b44e:	d107      	bne.n	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800b450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b456:	d103      	bne.n	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800b458:	4b3f      	ldr	r3, [pc, #252]	; (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b45a:	637b      	str	r3, [r7, #52]	; 0x34
 800b45c:	f000 bcf5 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800b460:	4b3c      	ldr	r3, [pc, #240]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 0320 	and.w	r3, r3, #32
 800b468:	2b20      	cmp	r3, #32
 800b46a:	d11c      	bne.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800b46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b472:	d118      	bne.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b474:	4b37      	ldr	r3, [pc, #220]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d005      	beq.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800b480:	4b34      	ldr	r3, [pc, #208]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	0e1b      	lsrs	r3, r3, #24
 800b486:	f003 030f 	and.w	r3, r3, #15
 800b48a:	e006      	b.n	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800b48c:	4b31      	ldr	r3, [pc, #196]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b48e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b492:	041b      	lsls	r3, r3, #16
 800b494:	0e1b      	lsrs	r3, r3, #24
 800b496:	f003 030f 	and.w	r3, r3, #15
 800b49a:	4a30      	ldr	r2, [pc, #192]	; (800b55c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b49c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4a0:	637b      	str	r3, [r7, #52]	; 0x34
 800b4a2:	f000 bcd2 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	637b      	str	r3, [r7, #52]	; 0x34
 800b4aa:	f000 bcce 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800b4ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4b2:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800b4b6:	430b      	orrs	r3, r1
 800b4b8:	d152      	bne.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800b4ba:	4b26      	ldr	r3, [pc, #152]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b4bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b4c0:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800b4c4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800b4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d104      	bne.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b4cc:	f7fd fcd6 	bl	8008e7c <HAL_RCC_GetPCLK1Freq>
 800b4d0:	6378      	str	r0, [r7, #52]	; 0x34
 800b4d2:	f000 bcba 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b4dc:	d104      	bne.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b4de:	f7fd fbb1 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800b4e2:	6378      	str	r0, [r7, #52]	; 0x34
 800b4e4:	f000 bcb1 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800b4e8:	4b1a      	ldr	r3, [pc, #104]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4f4:	d107      	bne.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4fc:	d103      	bne.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800b4fe:	4b16      	ldr	r3, [pc, #88]	; (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b500:	637b      	str	r3, [r7, #52]	; 0x34
 800b502:	f000 bca2 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800b506:	4b13      	ldr	r3, [pc, #76]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f003 0320 	and.w	r3, r3, #32
 800b50e:	2b20      	cmp	r3, #32
 800b510:	d11c      	bne.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800b512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b514:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b518:	d118      	bne.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b51a:	4b0e      	ldr	r3, [pc, #56]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b51c:	689b      	ldr	r3, [r3, #8]
 800b51e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b522:	2b00      	cmp	r3, #0
 800b524:	d005      	beq.n	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800b526:	4b0b      	ldr	r3, [pc, #44]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	0e1b      	lsrs	r3, r3, #24
 800b52c:	f003 030f 	and.w	r3, r3, #15
 800b530:	e006      	b.n	800b540 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800b532:	4b08      	ldr	r3, [pc, #32]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b534:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b538:	041b      	lsls	r3, r3, #16
 800b53a:	0e1b      	lsrs	r3, r3, #24
 800b53c:	f003 030f 	and.w	r3, r3, #15
 800b540:	4a06      	ldr	r2, [pc, #24]	; (800b55c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b546:	637b      	str	r3, [r7, #52]	; 0x34
 800b548:	f000 bc7f 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800b54c:	2300      	movs	r3, #0
 800b54e:	637b      	str	r3, [r7, #52]	; 0x34
 800b550:	f000 bc7b 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b554:	46020c00 	.word	0x46020c00
 800b558:	00f42400 	.word	0x00f42400
 800b55c:	0800db74 	.word	0x0800db74
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800b560:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b564:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800b568:	430b      	orrs	r3, r1
 800b56a:	d14c      	bne.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800b56c:	4ba6      	ldr	r3, [pc, #664]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b56e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b572:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b576:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800b578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d104      	bne.n	800b588 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b57e:	f7fd fc7d 	bl	8008e7c <HAL_RCC_GetPCLK1Freq>
 800b582:	6378      	str	r0, [r7, #52]	; 0x34
 800b584:	f000 bc61 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800b588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b58e:	d104      	bne.n	800b59a <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b590:	f7fd fb58 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800b594:	6378      	str	r0, [r7, #52]	; 0x34
 800b596:	f000 bc58 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800b59a:	4b9b      	ldr	r3, [pc, #620]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5a6:	d107      	bne.n	800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800b5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5ae:	d103      	bne.n	800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800b5b0:	4b96      	ldr	r3, [pc, #600]	; (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b5b2:	637b      	str	r3, [r7, #52]	; 0x34
 800b5b4:	f000 bc49 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800b5b8:	4b93      	ldr	r3, [pc, #588]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f003 0320 	and.w	r3, r3, #32
 800b5c0:	2b20      	cmp	r3, #32
 800b5c2:	d11c      	bne.n	800b5fe <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800b5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b5ca:	d118      	bne.n	800b5fe <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b5cc:	4b8e      	ldr	r3, [pc, #568]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d005      	beq.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800b5d8:	4b8b      	ldr	r3, [pc, #556]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	0e1b      	lsrs	r3, r3, #24
 800b5de:	f003 030f 	and.w	r3, r3, #15
 800b5e2:	e006      	b.n	800b5f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800b5e4:	4b88      	ldr	r3, [pc, #544]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b5e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b5ea:	041b      	lsls	r3, r3, #16
 800b5ec:	0e1b      	lsrs	r3, r3, #24
 800b5ee:	f003 030f 	and.w	r3, r3, #15
 800b5f2:	4a87      	ldr	r2, [pc, #540]	; (800b810 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b5f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5f8:	637b      	str	r3, [r7, #52]	; 0x34
 800b5fa:	f000 bc26 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800b5fe:	2300      	movs	r3, #0
 800b600:	637b      	str	r3, [r7, #52]	; 0x34
 800b602:	f000 bc22 	b.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800b606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b60a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b60e:	430b      	orrs	r3, r1
 800b610:	d164      	bne.n	800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800b612:	4b7d      	ldr	r3, [pc, #500]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b61c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800b61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b620:	2b00      	cmp	r3, #0
 800b622:	d120      	bne.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b624:	4b78      	ldr	r3, [pc, #480]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f003 0320 	and.w	r3, r3, #32
 800b62c:	2b20      	cmp	r3, #32
 800b62e:	d117      	bne.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b630:	4b75      	ldr	r3, [pc, #468]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d005      	beq.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800b63c:	4b72      	ldr	r3, [pc, #456]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	0e1b      	lsrs	r3, r3, #24
 800b642:	f003 030f 	and.w	r3, r3, #15
 800b646:	e006      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800b648:	4b6f      	ldr	r3, [pc, #444]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b64a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b64e:	041b      	lsls	r3, r3, #16
 800b650:	0e1b      	lsrs	r3, r3, #24
 800b652:	f003 030f 	and.w	r3, r3, #15
 800b656:	4a6e      	ldr	r2, [pc, #440]	; (800b810 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b65c:	637b      	str	r3, [r7, #52]	; 0x34
 800b65e:	e3f4      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b660:	2300      	movs	r3, #0
 800b662:	637b      	str	r3, [r7, #52]	; 0x34
 800b664:	e3f1      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800b666:	4b68      	ldr	r3, [pc, #416]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b66c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b670:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b674:	d112      	bne.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b67c:	d10e      	bne.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b67e:	4b62      	ldr	r3, [pc, #392]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b688:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b68c:	d102      	bne.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800b68e:	23fa      	movs	r3, #250	; 0xfa
 800b690:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b692:	e3da      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b694:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b698:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b69a:	e3d6      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800b69c:	4b5a      	ldr	r3, [pc, #360]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6a8:	d106      	bne.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800b6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6b0:	d102      	bne.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800b6b2:	4b56      	ldr	r3, [pc, #344]	; (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b6b4:	637b      	str	r3, [r7, #52]	; 0x34
 800b6b6:	e3c8      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800b6b8:	4b53      	ldr	r3, [pc, #332]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b6ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b6be:	f003 0302 	and.w	r3, r3, #2
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d107      	bne.n	800b6d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800b6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6cc:	d103      	bne.n	800b6d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800b6ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6d2:	637b      	str	r3, [r7, #52]	; 0x34
 800b6d4:	e3b9      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	637b      	str	r3, [r7, #52]	; 0x34
 800b6da:	e3b6      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800b6dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6e0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800b6e4:	430b      	orrs	r3, r1
 800b6e6:	d164      	bne.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b6e8:	4b47      	ldr	r3, [pc, #284]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b6ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b6ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b6f2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d120      	bne.n	800b73c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b6fa:	4b43      	ldr	r3, [pc, #268]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f003 0320 	and.w	r3, r3, #32
 800b702:	2b20      	cmp	r3, #32
 800b704:	d117      	bne.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b706:	4b40      	ldr	r3, [pc, #256]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d005      	beq.n	800b71e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800b712:	4b3d      	ldr	r3, [pc, #244]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	0e1b      	lsrs	r3, r3, #24
 800b718:	f003 030f 	and.w	r3, r3, #15
 800b71c:	e006      	b.n	800b72c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800b71e:	4b3a      	ldr	r3, [pc, #232]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b724:	041b      	lsls	r3, r3, #16
 800b726:	0e1b      	lsrs	r3, r3, #24
 800b728:	f003 030f 	and.w	r3, r3, #15
 800b72c:	4a38      	ldr	r2, [pc, #224]	; (800b810 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b72e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b732:	637b      	str	r3, [r7, #52]	; 0x34
 800b734:	e389      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b736:	2300      	movs	r3, #0
 800b738:	637b      	str	r3, [r7, #52]	; 0x34
 800b73a:	e386      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800b73c:	4b32      	ldr	r3, [pc, #200]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b73e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b742:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b74a:	d112      	bne.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800b74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b752:	d10e      	bne.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b754:	4b2c      	ldr	r3, [pc, #176]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b756:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b75a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b75e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b762:	d102      	bne.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800b764:	23fa      	movs	r3, #250	; 0xfa
 800b766:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b768:	e36f      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b76a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b76e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b770:	e36b      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800b772:	4b25      	ldr	r3, [pc, #148]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b77a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b77e:	d106      	bne.n	800b78e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800b780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b786:	d102      	bne.n	800b78e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800b788:	4b20      	ldr	r3, [pc, #128]	; (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b78a:	637b      	str	r3, [r7, #52]	; 0x34
 800b78c:	e35d      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800b78e:	4b1e      	ldr	r3, [pc, #120]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b794:	f003 0302 	and.w	r3, r3, #2
 800b798:	2b02      	cmp	r3, #2
 800b79a:	d107      	bne.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800b79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7a2:	d103      	bne.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800b7a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7a8:	637b      	str	r3, [r7, #52]	; 0x34
 800b7aa:	e34e      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	637b      	str	r3, [r7, #52]	; 0x34
 800b7b0:	e34b      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800b7b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7b6:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b7ba:	430b      	orrs	r3, r1
 800b7bc:	d14e      	bne.n	800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b7be:	4b12      	ldr	r3, [pc, #72]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b7c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b7c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800b7c8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800b7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d103      	bne.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b7d0:	f7fd fb54 	bl	8008e7c <HAL_RCC_GetPCLK1Freq>
 800b7d4:	6378      	str	r0, [r7, #52]	; 0x34
 800b7d6:	e338      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800b7d8:	4b0b      	ldr	r3, [pc, #44]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b7da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b7de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7e6:	d119      	bne.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b7ee:	d115      	bne.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b7f0:	4b05      	ldr	r3, [pc, #20]	; (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b7f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b7f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7fe:	d109      	bne.n	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800b800:	23fa      	movs	r3, #250	; 0xfa
 800b802:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b804:	e321      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b806:	bf00      	nop
 800b808:	46020c00 	.word	0x46020c00
 800b80c:	00f42400 	.word	0x00f42400
 800b810:	0800db74 	.word	0x0800db74
      }
      else
      {
        frequency = LSI_VALUE;
 800b814:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b818:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b81a:	e316      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800b81c:	4ba8      	ldr	r3, [pc, #672]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b828:	d106      	bne.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800b82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b830:	d102      	bne.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800b832:	4ba4      	ldr	r3, [pc, #656]	; (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b834:	637b      	str	r3, [r7, #52]	; 0x34
 800b836:	e308      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800b838:	4ba1      	ldr	r3, [pc, #644]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b83a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b83e:	f003 0302 	and.w	r3, r3, #2
 800b842:	2b02      	cmp	r3, #2
 800b844:	d107      	bne.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800b846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b848:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b84c:	d103      	bne.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800b84e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b852:	637b      	str	r3, [r7, #52]	; 0x34
 800b854:	e2f9      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800b856:	2300      	movs	r3, #0
 800b858:	637b      	str	r3, [r7, #52]	; 0x34
 800b85a:	e2f6      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800b85c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b860:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800b864:	430b      	orrs	r3, r1
 800b866:	d12d      	bne.n	800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800b868:	4b95      	ldr	r3, [pc, #596]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b86a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b86e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800b872:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800b874:	4b92      	ldr	r3, [pc, #584]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b87c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b880:	d105      	bne.n	800b88e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800b882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b884:	2b00      	cmp	r3, #0
 800b886:	d102      	bne.n	800b88e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800b888:	4b8e      	ldr	r3, [pc, #568]	; (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b88a:	637b      	str	r3, [r7, #52]	; 0x34
 800b88c:	e2dd      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800b88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b894:	d107      	bne.n	800b8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fe fb4c 	bl	8009f38 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a2:	637b      	str	r3, [r7, #52]	; 0x34
 800b8a4:	e2d1      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800b8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8ac:	d107      	bne.n	800b8be <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8ae:	f107 0318 	add.w	r3, r7, #24
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7fe fc9a 	bl	800a1ec <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800b8b8:	69bb      	ldr	r3, [r7, #24]
 800b8ba:	637b      	str	r3, [r7, #52]	; 0x34
 800b8bc:	e2c5      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	637b      	str	r3, [r7, #52]	; 0x34
 800b8c2:	e2c2      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800b8c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8c8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800b8cc:	430b      	orrs	r3, r1
 800b8ce:	d156      	bne.n	800b97e <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b8d0:	4b7b      	ldr	r3, [pc, #492]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b8d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b8d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b8da:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800b8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b8e2:	d028      	beq.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800b8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b8ea:	d845      	bhi.n	800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800b8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8f2:	d013      	beq.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8fa:	d83d      	bhi.n	800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800b8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d004      	beq.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800b902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b908:	d004      	beq.n	800b914 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800b90a:	e035      	b.n	800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800b90c:	f7fd faca 	bl	8008ea4 <HAL_RCC_GetPCLK2Freq>
 800b910:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b912:	e29a      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b914:	f7fd f996 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800b918:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b91a:	e296      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b91c:	4b68      	ldr	r3, [pc, #416]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b928:	d102      	bne.n	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800b92a:	4b66      	ldr	r3, [pc, #408]	; (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b92c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b92e:	e28c      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b930:	2300      	movs	r3, #0
 800b932:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b934:	e289      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b936:	4b62      	ldr	r3, [pc, #392]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f003 0320 	and.w	r3, r3, #32
 800b93e:	2b20      	cmp	r3, #32
 800b940:	d117      	bne.n	800b972 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b942:	4b5f      	ldr	r3, [pc, #380]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d005      	beq.n	800b95a <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800b94e:	4b5c      	ldr	r3, [pc, #368]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	0e1b      	lsrs	r3, r3, #24
 800b954:	f003 030f 	and.w	r3, r3, #15
 800b958:	e006      	b.n	800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800b95a:	4b59      	ldr	r3, [pc, #356]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b95c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b960:	041b      	lsls	r3, r3, #16
 800b962:	0e1b      	lsrs	r3, r3, #24
 800b964:	f003 030f 	and.w	r3, r3, #15
 800b968:	4a57      	ldr	r2, [pc, #348]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800b96a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b96e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b970:	e26b      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b972:	2300      	movs	r3, #0
 800b974:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b976:	e268      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b978:	2300      	movs	r3, #0
 800b97a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b97c:	e265      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800b97e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b982:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800b986:	430b      	orrs	r3, r1
 800b988:	d156      	bne.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b98a:	4b4d      	ldr	r3, [pc, #308]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b98c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b990:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b994:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800b996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b998:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b99c:	d028      	beq.n	800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800b99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b9a4:	d845      	bhi.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9ac:	d013      	beq.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800b9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9b4:	d83d      	bhi.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d004      	beq.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800b9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9c2:	d004      	beq.n	800b9ce <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800b9c4:	e035      	b.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800b9c6:	f7fd fa59 	bl	8008e7c <HAL_RCC_GetPCLK1Freq>
 800b9ca:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b9cc:	e23d      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b9ce:	f7fd f939 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800b9d2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b9d4:	e239      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b9d6:	4b3a      	ldr	r3, [pc, #232]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b9de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9e2:	d102      	bne.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800b9e4:	4b37      	ldr	r3, [pc, #220]	; (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b9e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b9e8:	e22f      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9ee:	e22c      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b9f0:	4b33      	ldr	r3, [pc, #204]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f003 0320 	and.w	r3, r3, #32
 800b9f8:	2b20      	cmp	r3, #32
 800b9fa:	d117      	bne.n	800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b9fc:	4b30      	ldr	r3, [pc, #192]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d005      	beq.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800ba08:	4b2d      	ldr	r3, [pc, #180]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	0e1b      	lsrs	r3, r3, #24
 800ba0e:	f003 030f 	and.w	r3, r3, #15
 800ba12:	e006      	b.n	800ba22 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800ba14:	4b2a      	ldr	r3, [pc, #168]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ba16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ba1a:	041b      	lsls	r3, r3, #16
 800ba1c:	0e1b      	lsrs	r3, r3, #24
 800ba1e:	f003 030f 	and.w	r3, r3, #15
 800ba22:	4a29      	ldr	r2, [pc, #164]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800ba24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba28:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ba2a:	e20e      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba30:	e20b      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ba32:	2300      	movs	r3, #0
 800ba34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba36:	e208      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800ba38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba3c:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800ba40:	430b      	orrs	r3, r1
 800ba42:	d17c      	bne.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800ba44:	4b1e      	ldr	r3, [pc, #120]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ba46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ba4a:	f003 0318 	and.w	r3, r3, #24
 800ba4e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800ba50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba52:	2b18      	cmp	r3, #24
 800ba54:	d870      	bhi.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800ba56:	a201      	add	r2, pc, #4	; (adr r2, 800ba5c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800ba58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba5c:	0800bacd 	.word	0x0800bacd
 800ba60:	0800bb39 	.word	0x0800bb39
 800ba64:	0800bb39 	.word	0x0800bb39
 800ba68:	0800bb39 	.word	0x0800bb39
 800ba6c:	0800bb39 	.word	0x0800bb39
 800ba70:	0800bb39 	.word	0x0800bb39
 800ba74:	0800bb39 	.word	0x0800bb39
 800ba78:	0800bb39 	.word	0x0800bb39
 800ba7c:	0800bad5 	.word	0x0800bad5
 800ba80:	0800bb39 	.word	0x0800bb39
 800ba84:	0800bb39 	.word	0x0800bb39
 800ba88:	0800bb39 	.word	0x0800bb39
 800ba8c:	0800bb39 	.word	0x0800bb39
 800ba90:	0800bb39 	.word	0x0800bb39
 800ba94:	0800bb39 	.word	0x0800bb39
 800ba98:	0800bb39 	.word	0x0800bb39
 800ba9c:	0800badd 	.word	0x0800badd
 800baa0:	0800bb39 	.word	0x0800bb39
 800baa4:	0800bb39 	.word	0x0800bb39
 800baa8:	0800bb39 	.word	0x0800bb39
 800baac:	0800bb39 	.word	0x0800bb39
 800bab0:	0800bb39 	.word	0x0800bb39
 800bab4:	0800bb39 	.word	0x0800bb39
 800bab8:	0800bb39 	.word	0x0800bb39
 800babc:	0800baf7 	.word	0x0800baf7
 800bac0:	46020c00 	.word	0x46020c00
 800bac4:	00f42400 	.word	0x00f42400
 800bac8:	0800db74 	.word	0x0800db74
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800bacc:	f7fd f9fe 	bl	8008ecc <HAL_RCC_GetPCLK3Freq>
 800bad0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bad2:	e1ba      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800bad4:	f7fd f8b6 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800bad8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bada:	e1b6      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800badc:	4b9f      	ldr	r3, [pc, #636]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bae8:	d102      	bne.n	800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800baea:	4b9d      	ldr	r3, [pc, #628]	; (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800baec:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800baee:	e1ac      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800baf0:	2300      	movs	r3, #0
 800baf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800baf4:	e1a9      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800baf6:	4b99      	ldr	r3, [pc, #612]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f003 0320 	and.w	r3, r3, #32
 800bafe:	2b20      	cmp	r3, #32
 800bb00:	d117      	bne.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bb02:	4b96      	ldr	r3, [pc, #600]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d005      	beq.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800bb0e:	4b93      	ldr	r3, [pc, #588]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bb10:	689b      	ldr	r3, [r3, #8]
 800bb12:	0e1b      	lsrs	r3, r3, #24
 800bb14:	f003 030f 	and.w	r3, r3, #15
 800bb18:	e006      	b.n	800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800bb1a:	4b90      	ldr	r3, [pc, #576]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bb1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bb20:	041b      	lsls	r3, r3, #16
 800bb22:	0e1b      	lsrs	r3, r3, #24
 800bb24:	f003 030f 	and.w	r3, r3, #15
 800bb28:	4a8e      	ldr	r2, [pc, #568]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800bb2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb2e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bb30:	e18b      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bb32:	2300      	movs	r3, #0
 800bb34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb36:	e188      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb3c:	e185      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800bb3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb42:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800bb46:	430b      	orrs	r3, r1
 800bb48:	d155      	bne.n	800bbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800bb4a:	4b84      	ldr	r3, [pc, #528]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bb4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bb50:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bb54:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800bb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb5c:	d013      	beq.n	800bb86 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb64:	d844      	bhi.n	800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800bb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb6c:	d013      	beq.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800bb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb74:	d83c      	bhi.n	800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800bb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d014      	beq.n	800bba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800bb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb82:	d014      	beq.n	800bbae <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800bb84:	e034      	b.n	800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb86:	f107 0318 	add.w	r3, r7, #24
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7fe fb2e 	bl	800a1ec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb94:	e159      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fe f9cc 	bl	8009f38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bba4:	e151      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800bba6:	f7fd f84d 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800bbaa:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bbac:	e14d      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bbae:	4b6b      	ldr	r3, [pc, #428]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f003 0320 	and.w	r3, r3, #32
 800bbb6:	2b20      	cmp	r3, #32
 800bbb8:	d117      	bne.n	800bbea <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bbba:	4b68      	ldr	r3, [pc, #416]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d005      	beq.n	800bbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800bbc6:	4b65      	ldr	r3, [pc, #404]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	0e1b      	lsrs	r3, r3, #24
 800bbcc:	f003 030f 	and.w	r3, r3, #15
 800bbd0:	e006      	b.n	800bbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800bbd2:	4b62      	ldr	r3, [pc, #392]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bbd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bbd8:	041b      	lsls	r3, r3, #16
 800bbda:	0e1b      	lsrs	r3, r3, #24
 800bbdc:	f003 030f 	and.w	r3, r3, #15
 800bbe0:	4a60      	ldr	r2, [pc, #384]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800bbe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbe6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bbe8:	e12f      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bbea:	2300      	movs	r3, #0
 800bbec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bbee:	e12c      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bbf4:	e129      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800bbf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbfa:	1e59      	subs	r1, r3, #1
 800bbfc:	ea52 0301 	orrs.w	r3, r2, r1
 800bc00:	d13c      	bne.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800bc02:	4b56      	ldr	r3, [pc, #344]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bc04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bc08:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800bc0c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800bc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bc14:	d027      	beq.n	800bc66 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800bc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bc1c:	d82b      	bhi.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800bc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bc24:	d017      	beq.n	800bc56 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800bc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bc2c:	d823      	bhi.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800bc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d004      	beq.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800bc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc3a:	d004      	beq.n	800bc46 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800bc3c:	e01b      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800bc3e:	f7fd f801 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800bc42:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bc44:	e101      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7fe f974 	bl	8009f38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc54:	e0f9      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc56:	f107 0318 	add.w	r3, r7, #24
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fe fac6 	bl	800a1ec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc64:	e0f1      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc66:	f107 030c 	add.w	r3, r7, #12
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7fe fc18 	bl	800a4a0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc74:	e0e9      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bc76:	2300      	movs	r3, #0
 800bc78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc7a:	e0e6      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800bc7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc80:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800bc84:	430b      	orrs	r3, r1
 800bc86:	d131      	bne.n	800bcec <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800bc88:	4b34      	ldr	r3, [pc, #208]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bc8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bc8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc92:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800bc94:	4b31      	ldr	r3, [pc, #196]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bc96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bc9a:	f003 0302 	and.w	r3, r3, #2
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	d106      	bne.n	800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800bca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d103      	bne.n	800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800bca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcac:	637b      	str	r3, [r7, #52]	; 0x34
 800bcae:	e0cc      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800bcb0:	4b2a      	ldr	r3, [pc, #168]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bcb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bcb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bcbe:	d112      	bne.n	800bce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800bcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcc6:	d10e      	bne.n	800bce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bcc8:	4b24      	ldr	r3, [pc, #144]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bcca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bcce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcd6:	d102      	bne.n	800bcde <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800bcd8:	23fa      	movs	r3, #250	; 0xfa
 800bcda:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bcdc:	e0b5      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800bcde:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bce2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bce4:	e0b1      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800bce6:	2300      	movs	r3, #0
 800bce8:	637b      	str	r3, [r7, #52]	; 0x34
 800bcea:	e0ae      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800bcec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcf0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800bcf4:	430b      	orrs	r3, r1
 800bcf6:	d13b      	bne.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800bcf8:	4b18      	ldr	r3, [pc, #96]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bcfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bcfe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bd02:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800bd04:	4b15      	ldr	r3, [pc, #84]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd10:	d105      	bne.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800bd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d102      	bne.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800bd18:	4b13      	ldr	r3, [pc, #76]	; (800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800bd1a:	637b      	str	r3, [r7, #52]	; 0x34
 800bd1c:	e095      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800bd1e:	4b0f      	ldr	r3, [pc, #60]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd2a:	d106      	bne.n	800bd3a <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd32:	d102      	bne.n	800bd3a <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800bd34:	4b0d      	ldr	r3, [pc, #52]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800bd36:	637b      	str	r3, [r7, #52]	; 0x34
 800bd38:	e087      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800bd3a:	4b08      	ldr	r3, [pc, #32]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd46:	d106      	bne.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800bd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd4e:	d102      	bne.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800bd50:	4b03      	ldr	r3, [pc, #12]	; (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800bd52:	637b      	str	r3, [r7, #52]	; 0x34
 800bd54:	e079      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800bd56:	2300      	movs	r3, #0
 800bd58:	637b      	str	r3, [r7, #52]	; 0x34
 800bd5a:	e076      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bd5c:	46020c00 	.word	0x46020c00
 800bd60:	00f42400 	.word	0x00f42400
 800bd64:	0800db74 	.word	0x0800db74
 800bd68:	02dc6c00 	.word	0x02dc6c00
 800bd6c:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800bd70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd74:	1e99      	subs	r1, r3, #2
 800bd76:	ea52 0301 	orrs.w	r3, r2, r1
 800bd7a:	d120      	bne.n	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800bd7c:	4b35      	ldr	r3, [pc, #212]	; (800be54 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800bd7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bd82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd86:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800bd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d004      	beq.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bd94:	d008      	beq.n	800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800bd96:	e00f      	b.n	800bdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd98:	f107 030c 	add.w	r3, r7, #12
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7fe fb7f 	bl	800a4a0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bda6:	e050      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bda8:	f107 0318 	add.w	r3, r7, #24
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7fe fa1d 	bl	800a1ec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800bdb2:	6a3b      	ldr	r3, [r7, #32]
 800bdb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bdb6:	e048      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bdbc:	e045      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800bdbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdc2:	f1a3 0108 	sub.w	r1, r3, #8
 800bdc6:	ea52 0301 	orrs.w	r3, r2, r1
 800bdca:	d13c      	bne.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800bdcc:	4b21      	ldr	r3, [pc, #132]	; (800be54 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800bdce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bdd2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800bdd6:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800bdd8:	4b1e      	ldr	r3, [pc, #120]	; (800be54 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bde0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bde4:	d105      	bne.n	800bdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800bde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d102      	bne.n	800bdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800bdec:	4b1a      	ldr	r3, [pc, #104]	; (800be58 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800bdee:	637b      	str	r3, [r7, #52]	; 0x34
 800bdf0:	e02b      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800bdf2:	4b18      	ldr	r3, [pc, #96]	; (800be54 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdfe:	d106      	bne.n	800be0e <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800be00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be06:	d102      	bne.n	800be0e <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800be08:	4b14      	ldr	r3, [pc, #80]	; (800be5c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800be0a:	637b      	str	r3, [r7, #52]	; 0x34
 800be0c:	e01d      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800be0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be14:	d107      	bne.n	800be26 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7fe f88c 	bl	8009f38 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800be20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be22:	637b      	str	r3, [r7, #52]	; 0x34
 800be24:	e011      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800be26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be28:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800be2c:	d108      	bne.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be32:	4618      	mov	r0, r3
 800be34:	f7fe f880 	bl	8009f38 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800be38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3a:	085b      	lsrs	r3, r3, #1
 800be3c:	637b      	str	r3, [r7, #52]	; 0x34
 800be3e:	e004      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800be40:	2300      	movs	r3, #0
 800be42:	637b      	str	r3, [r7, #52]	; 0x34
 800be44:	e001      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800be46:	2300      	movs	r3, #0
 800be48:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800be4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3738      	adds	r7, #56	; 0x38
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	46020c00 	.word	0x46020c00
 800be58:	00f42400 	.word	0x00f42400
 800be5c:	007a1200 	.word	0x007a1200

0800be60 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800be60:	b480      	push	{r7}
 800be62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800be64:	4b06      	ldr	r3, [pc, #24]	; (800be80 <HAL_RCCEx_EnableLSECSS+0x20>)
 800be66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be6a:	4a05      	ldr	r2, [pc, #20]	; (800be80 <HAL_RCCEx_EnableLSECSS+0x20>)
 800be6c:	f043 0320 	orr.w	r3, r3, #32
 800be70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 800be74:	bf00      	nop
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	46020c00 	.word	0x46020c00

0800be84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800be8c:	4b47      	ldr	r3, [pc, #284]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a46      	ldr	r2, [pc, #280]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800be92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800be96:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800be98:	f7f7 fa80 	bl	800339c <HAL_GetTick>
 800be9c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800be9e:	e008      	b.n	800beb2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bea0:	f7f7 fa7c 	bl	800339c <HAL_GetTick>
 800bea4:	4602      	mov	r2, r0
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	1ad3      	subs	r3, r2, r3
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d901      	bls.n	800beb2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800beae:	2303      	movs	r3, #3
 800beb0:	e077      	b.n	800bfa2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800beb2:	4b3e      	ldr	r3, [pc, #248]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1f0      	bne.n	800bea0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800bebe:	4b3b      	ldr	r3, [pc, #236]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800bec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bec6:	f023 0303 	bic.w	r3, r3, #3
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	6811      	ldr	r1, [r2, #0]
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	6852      	ldr	r2, [r2, #4]
 800bed2:	3a01      	subs	r2, #1
 800bed4:	0212      	lsls	r2, r2, #8
 800bed6:	430a      	orrs	r2, r1
 800bed8:	4934      	ldr	r1, [pc, #208]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800beda:	4313      	orrs	r3, r2
 800bedc:	62cb      	str	r3, [r1, #44]	; 0x2c
 800bede:	4b33      	ldr	r3, [pc, #204]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800bee0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bee2:	4b33      	ldr	r3, [pc, #204]	; (800bfb0 <RCCEx_PLL2_Config+0x12c>)
 800bee4:	4013      	ands	r3, r2
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	6892      	ldr	r2, [r2, #8]
 800beea:	3a01      	subs	r2, #1
 800beec:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	68d2      	ldr	r2, [r2, #12]
 800bef4:	3a01      	subs	r2, #1
 800bef6:	0252      	lsls	r2, r2, #9
 800bef8:	b292      	uxth	r2, r2
 800befa:	4311      	orrs	r1, r2
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	6912      	ldr	r2, [r2, #16]
 800bf00:	3a01      	subs	r2, #1
 800bf02:	0412      	lsls	r2, r2, #16
 800bf04:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800bf08:	4311      	orrs	r1, r2
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	6952      	ldr	r2, [r2, #20]
 800bf0e:	3a01      	subs	r2, #1
 800bf10:	0612      	lsls	r2, r2, #24
 800bf12:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800bf16:	430a      	orrs	r2, r1
 800bf18:	4924      	ldr	r1, [pc, #144]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800bf1e:	4b23      	ldr	r3, [pc, #140]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800bf20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf22:	f023 020c 	bic.w	r2, r3, #12
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	699b      	ldr	r3, [r3, #24]
 800bf2a:	4920      	ldr	r1, [pc, #128]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800bf30:	4b1e      	ldr	r3, [pc, #120]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800bf32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6a1b      	ldr	r3, [r3, #32]
 800bf38:	491c      	ldr	r1, [pc, #112]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800bf3e:	4b1b      	ldr	r3, [pc, #108]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800bf40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf42:	4a1a      	ldr	r2, [pc, #104]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800bf44:	f023 0310 	bic.w	r3, r3, #16
 800bf48:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bf4a:	4b18      	ldr	r3, [pc, #96]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800bf4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf52:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	69d2      	ldr	r2, [r2, #28]
 800bf5a:	00d2      	lsls	r2, r2, #3
 800bf5c:	4913      	ldr	r1, [pc, #76]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800bf62:	4b12      	ldr	r3, [pc, #72]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800bf64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf66:	4a11      	ldr	r2, [pc, #68]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800bf68:	f043 0310 	orr.w	r3, r3, #16
 800bf6c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800bf6e:	4b0f      	ldr	r3, [pc, #60]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a0e      	ldr	r2, [pc, #56]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800bf74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf78:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bf7a:	f7f7 fa0f 	bl	800339c <HAL_GetTick>
 800bf7e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf80:	e008      	b.n	800bf94 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bf82:	f7f7 fa0b 	bl	800339c <HAL_GetTick>
 800bf86:	4602      	mov	r2, r0
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	2b02      	cmp	r3, #2
 800bf8e:	d901      	bls.n	800bf94 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800bf90:	2303      	movs	r3, #3
 800bf92:	e006      	b.n	800bfa2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf94:	4b05      	ldr	r3, [pc, #20]	; (800bfac <RCCEx_PLL2_Config+0x128>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d0f0      	beq.n	800bf82 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800bfa0:	2300      	movs	r3, #0

}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	46020c00 	.word	0x46020c00
 800bfb0:	80800000 	.word	0x80800000

0800bfb4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800bfbc:	4b47      	ldr	r3, [pc, #284]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a46      	ldr	r2, [pc, #280]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800bfc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bfc6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bfc8:	f7f7 f9e8 	bl	800339c <HAL_GetTick>
 800bfcc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bfce:	e008      	b.n	800bfe2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bfd0:	f7f7 f9e4 	bl	800339c <HAL_GetTick>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	1ad3      	subs	r3, r2, r3
 800bfda:	2b02      	cmp	r3, #2
 800bfdc:	d901      	bls.n	800bfe2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800bfde:	2303      	movs	r3, #3
 800bfe0:	e077      	b.n	800c0d2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bfe2:	4b3e      	ldr	r3, [pc, #248]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d1f0      	bne.n	800bfd0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800bfee:	4b3b      	ldr	r3, [pc, #236]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800bff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bff6:	f023 0303 	bic.w	r3, r3, #3
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	6811      	ldr	r1, [r2, #0]
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	6852      	ldr	r2, [r2, #4]
 800c002:	3a01      	subs	r2, #1
 800c004:	0212      	lsls	r2, r2, #8
 800c006:	430a      	orrs	r2, r1
 800c008:	4934      	ldr	r1, [pc, #208]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800c00a:	4313      	orrs	r3, r2
 800c00c:	630b      	str	r3, [r1, #48]	; 0x30
 800c00e:	4b33      	ldr	r3, [pc, #204]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800c010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c012:	4b33      	ldr	r3, [pc, #204]	; (800c0e0 <RCCEx_PLL3_Config+0x12c>)
 800c014:	4013      	ands	r3, r2
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	6892      	ldr	r2, [r2, #8]
 800c01a:	3a01      	subs	r2, #1
 800c01c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	68d2      	ldr	r2, [r2, #12]
 800c024:	3a01      	subs	r2, #1
 800c026:	0252      	lsls	r2, r2, #9
 800c028:	b292      	uxth	r2, r2
 800c02a:	4311      	orrs	r1, r2
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	6912      	ldr	r2, [r2, #16]
 800c030:	3a01      	subs	r2, #1
 800c032:	0412      	lsls	r2, r2, #16
 800c034:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c038:	4311      	orrs	r1, r2
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	6952      	ldr	r2, [r2, #20]
 800c03e:	3a01      	subs	r2, #1
 800c040:	0612      	lsls	r2, r2, #24
 800c042:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c046:	430a      	orrs	r2, r1
 800c048:	4924      	ldr	r1, [pc, #144]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800c04a:	4313      	orrs	r3, r2
 800c04c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800c04e:	4b23      	ldr	r3, [pc, #140]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800c050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c052:	f023 020c 	bic.w	r2, r3, #12
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	699b      	ldr	r3, [r3, #24]
 800c05a:	4920      	ldr	r1, [pc, #128]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800c05c:	4313      	orrs	r3, r2
 800c05e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c060:	4b1e      	ldr	r3, [pc, #120]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800c062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6a1b      	ldr	r3, [r3, #32]
 800c068:	491c      	ldr	r1, [pc, #112]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800c06a:	4313      	orrs	r3, r2
 800c06c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800c06e:	4b1b      	ldr	r3, [pc, #108]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800c070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c072:	4a1a      	ldr	r2, [pc, #104]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800c074:	f023 0310 	bic.w	r3, r3, #16
 800c078:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c07a:	4b18      	ldr	r3, [pc, #96]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800c07c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c07e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c082:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	69d2      	ldr	r2, [r2, #28]
 800c08a:	00d2      	lsls	r2, r2, #3
 800c08c:	4913      	ldr	r1, [pc, #76]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800c08e:	4313      	orrs	r3, r2
 800c090:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800c092:	4b12      	ldr	r3, [pc, #72]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800c094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c096:	4a11      	ldr	r2, [pc, #68]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800c098:	f043 0310 	orr.w	r3, r3, #16
 800c09c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800c09e:	4b0f      	ldr	r3, [pc, #60]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a0e      	ldr	r2, [pc, #56]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800c0a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0a8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c0aa:	f7f7 f977 	bl	800339c <HAL_GetTick>
 800c0ae:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c0b0:	e008      	b.n	800c0c4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c0b2:	f7f7 f973 	bl	800339c <HAL_GetTick>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	1ad3      	subs	r3, r2, r3
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	d901      	bls.n	800c0c4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	e006      	b.n	800c0d2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c0c4:	4b05      	ldr	r3, [pc, #20]	; (800c0dc <RCCEx_PLL3_Config+0x128>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d0f0      	beq.n	800c0b2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	46020c00 	.word	0x46020c00
 800c0e0:	80800000 	.word	0x80800000

0800c0e4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d071      	beq.n	800c1da <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d106      	bne.n	800c110 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f7f6 feca 	bl	8002ea4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2202      	movs	r2, #2
 800c114:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c118:	4b32      	ldr	r3, [pc, #200]	; (800c1e4 <HAL_RTC_Init+0x100>)
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	f003 0310 	and.w	r3, r3, #16
 800c120:	2b10      	cmp	r3, #16
 800c122:	d051      	beq.n	800c1c8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c124:	4b2f      	ldr	r3, [pc, #188]	; (800c1e4 <HAL_RTC_Init+0x100>)
 800c126:	22ca      	movs	r2, #202	; 0xca
 800c128:	625a      	str	r2, [r3, #36]	; 0x24
 800c12a:	4b2e      	ldr	r3, [pc, #184]	; (800c1e4 <HAL_RTC_Init+0x100>)
 800c12c:	2253      	movs	r2, #83	; 0x53
 800c12e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 f9ad 	bl	800c490 <RTC_EnterInitMode>
 800c136:	4603      	mov	r3, r0
 800c138:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c13a:	7bfb      	ldrb	r3, [r7, #15]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d13f      	bne.n	800c1c0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800c140:	4b28      	ldr	r3, [pc, #160]	; (800c1e4 <HAL_RTC_Init+0x100>)
 800c142:	699b      	ldr	r3, [r3, #24]
 800c144:	4a27      	ldr	r2, [pc, #156]	; (800c1e4 <HAL_RTC_Init+0x100>)
 800c146:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800c14a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c14e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800c150:	4b24      	ldr	r3, [pc, #144]	; (800c1e4 <HAL_RTC_Init+0x100>)
 800c152:	699a      	ldr	r2, [r3, #24]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6859      	ldr	r1, [r3, #4]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	691b      	ldr	r3, [r3, #16]
 800c15c:	4319      	orrs	r1, r3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	699b      	ldr	r3, [r3, #24]
 800c162:	430b      	orrs	r3, r1
 800c164:	491f      	ldr	r1, [pc, #124]	; (800c1e4 <HAL_RTC_Init+0x100>)
 800c166:	4313      	orrs	r3, r2
 800c168:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	68da      	ldr	r2, [r3, #12]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	041b      	lsls	r3, r3, #16
 800c174:	491b      	ldr	r1, [pc, #108]	; (800c1e4 <HAL_RTC_Init+0x100>)
 800c176:	4313      	orrs	r3, r2
 800c178:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800c17a:	4b1a      	ldr	r3, [pc, #104]	; (800c1e4 <HAL_RTC_Init+0x100>)
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c18a:	430b      	orrs	r3, r1
 800c18c:	4915      	ldr	r1, [pc, #84]	; (800c1e4 <HAL_RTC_Init+0x100>)
 800c18e:	4313      	orrs	r3, r2
 800c190:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 f9b8 	bl	800c508 <RTC_ExitInitMode>
 800c198:	4603      	mov	r3, r0
 800c19a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800c19c:	7bfb      	ldrb	r3, [r7, #15]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d10e      	bne.n	800c1c0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800c1a2:	4b10      	ldr	r3, [pc, #64]	; (800c1e4 <HAL_RTC_Init+0x100>)
 800c1a4:	699b      	ldr	r3, [r3, #24]
 800c1a6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6a19      	ldr	r1, [r3, #32]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	69db      	ldr	r3, [r3, #28]
 800c1b2:	4319      	orrs	r1, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	695b      	ldr	r3, [r3, #20]
 800c1b8:	430b      	orrs	r3, r1
 800c1ba:	490a      	ldr	r1, [pc, #40]	; (800c1e4 <HAL_RTC_Init+0x100>)
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1c0:	4b08      	ldr	r3, [pc, #32]	; (800c1e4 <HAL_RTC_Init+0x100>)
 800c1c2:	22ff      	movs	r2, #255	; 0xff
 800c1c4:	625a      	str	r2, [r3, #36]	; 0x24
 800c1c6:	e001      	b.n	800c1cc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c1cc:	7bfb      	ldrb	r3, [r7, #15]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d103      	bne.n	800c1da <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800c1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}
 800c1e4:	46007800 	.word	0x46007800

0800c1e8 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c1e8:	b590      	push	{r4, r7, lr}
 800c1ea:	b087      	sub	sp, #28
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	60b9      	str	r1, [r7, #8]
 800c1f2:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d101      	bne.n	800c202 <HAL_RTC_SetTime+0x1a>
 800c1fe:	2302      	movs	r3, #2
 800c200:	e088      	b.n	800c314 <HAL_RTC_SetTime+0x12c>
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2201      	movs	r2, #1
 800c206:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2202      	movs	r2, #2
 800c20e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c212:	4b42      	ldr	r3, [pc, #264]	; (800c31c <HAL_RTC_SetTime+0x134>)
 800c214:	22ca      	movs	r2, #202	; 0xca
 800c216:	625a      	str	r2, [r3, #36]	; 0x24
 800c218:	4b40      	ldr	r3, [pc, #256]	; (800c31c <HAL_RTC_SetTime+0x134>)
 800c21a:	2253      	movs	r2, #83	; 0x53
 800c21c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c21e:	68f8      	ldr	r0, [r7, #12]
 800c220:	f000 f936 	bl	800c490 <RTC_EnterInitMode>
 800c224:	4603      	mov	r3, r0
 800c226:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c228:	7cfb      	ldrb	r3, [r7, #19]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d163      	bne.n	800c2f6 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800c22e:	4b3b      	ldr	r3, [pc, #236]	; (800c31c <HAL_RTC_SetTime+0x134>)
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c23a:	d057      	beq.n	800c2ec <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d125      	bne.n	800c28e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c242:	4b36      	ldr	r3, [pc, #216]	; (800c31c <HAL_RTC_SetTime+0x134>)
 800c244:	699b      	ldr	r3, [r3, #24]
 800c246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d102      	bne.n	800c254 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	2200      	movs	r2, #0
 800c252:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	4618      	mov	r0, r3
 800c25a:	f000 f993 	bl	800c584 <RTC_ByteToBcd2>
 800c25e:	4603      	mov	r3, r0
 800c260:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	785b      	ldrb	r3, [r3, #1]
 800c266:	4618      	mov	r0, r3
 800c268:	f000 f98c 	bl	800c584 <RTC_ByteToBcd2>
 800c26c:	4603      	mov	r3, r0
 800c26e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c270:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	789b      	ldrb	r3, [r3, #2]
 800c276:	4618      	mov	r0, r3
 800c278:	f000 f984 	bl	800c584 <RTC_ByteToBcd2>
 800c27c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c27e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	78db      	ldrb	r3, [r3, #3]
 800c286:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c288:	4313      	orrs	r3, r2
 800c28a:	617b      	str	r3, [r7, #20]
 800c28c:	e017      	b.n	800c2be <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c28e:	4b23      	ldr	r3, [pc, #140]	; (800c31c <HAL_RTC_SetTime+0x134>)
 800c290:	699b      	ldr	r3, [r3, #24]
 800c292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c296:	2b00      	cmp	r3, #0
 800c298:	d102      	bne.n	800c2a0 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	2200      	movs	r2, #0
 800c29e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	785b      	ldrb	r3, [r3, #1]
 800c2aa:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c2ac:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c2ae:	68ba      	ldr	r2, [r7, #8]
 800c2b0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c2b2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	78db      	ldrb	r3, [r3, #3]
 800c2b8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800c2be:	4a17      	ldr	r2, [pc, #92]	; (800c31c <HAL_RTC_SetTime+0x134>)
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c2c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c2ca:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800c2cc:	4b13      	ldr	r3, [pc, #76]	; (800c31c <HAL_RTC_SetTime+0x134>)
 800c2ce:	699b      	ldr	r3, [r3, #24]
 800c2d0:	4a12      	ldr	r2, [pc, #72]	; (800c31c <HAL_RTC_SetTime+0x134>)
 800c2d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c2d6:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800c2d8:	4b10      	ldr	r3, [pc, #64]	; (800c31c <HAL_RTC_SetTime+0x134>)
 800c2da:	699a      	ldr	r2, [r3, #24]
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	68d9      	ldr	r1, [r3, #12]
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	691b      	ldr	r3, [r3, #16]
 800c2e4:	430b      	orrs	r3, r1
 800c2e6:	490d      	ldr	r1, [pc, #52]	; (800c31c <HAL_RTC_SetTime+0x134>)
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f000 f90b 	bl	800c508 <RTC_ExitInitMode>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c2f6:	4b09      	ldr	r3, [pc, #36]	; (800c31c <HAL_RTC_SetTime+0x134>)
 800c2f8:	22ff      	movs	r2, #255	; 0xff
 800c2fa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c2fc:	7cfb      	ldrb	r3, [r7, #19]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d103      	bne.n	800c30a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2201      	movs	r2, #1
 800c306:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2200      	movs	r2, #0
 800c30e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800c312:	7cfb      	ldrb	r3, [r7, #19]
}
 800c314:	4618      	mov	r0, r3
 800c316:	371c      	adds	r7, #28
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd90      	pop	{r4, r7, pc}
 800c31c:	46007800 	.word	0x46007800

0800c320 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c320:	b590      	push	{r4, r7, lr}
 800c322:	b087      	sub	sp, #28
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c332:	2b01      	cmp	r3, #1
 800c334:	d101      	bne.n	800c33a <HAL_RTC_SetDate+0x1a>
 800c336:	2302      	movs	r3, #2
 800c338:	e071      	b.n	800c41e <HAL_RTC_SetDate+0xfe>
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2201      	movs	r2, #1
 800c33e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2202      	movs	r2, #2
 800c346:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d10e      	bne.n	800c36e <HAL_RTC_SetDate+0x4e>
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	785b      	ldrb	r3, [r3, #1]
 800c354:	f003 0310 	and.w	r3, r3, #16
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d008      	beq.n	800c36e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	785b      	ldrb	r3, [r3, #1]
 800c360:	f023 0310 	bic.w	r3, r3, #16
 800c364:	b2db      	uxtb	r3, r3
 800c366:	330a      	adds	r3, #10
 800c368:	b2da      	uxtb	r2, r3
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d11c      	bne.n	800c3ae <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	78db      	ldrb	r3, [r3, #3]
 800c378:	4618      	mov	r0, r3
 800c37a:	f000 f903 	bl	800c584 <RTC_ByteToBcd2>
 800c37e:	4603      	mov	r3, r0
 800c380:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	785b      	ldrb	r3, [r3, #1]
 800c386:	4618      	mov	r0, r3
 800c388:	f000 f8fc 	bl	800c584 <RTC_ByteToBcd2>
 800c38c:	4603      	mov	r3, r0
 800c38e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c390:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	789b      	ldrb	r3, [r3, #2]
 800c396:	4618      	mov	r0, r3
 800c398:	f000 f8f4 	bl	800c584 <RTC_ByteToBcd2>
 800c39c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c39e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	617b      	str	r3, [r7, #20]
 800c3ac:	e00e      	b.n	800c3cc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	78db      	ldrb	r3, [r3, #3]
 800c3b2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	785b      	ldrb	r3, [r3, #1]
 800c3b8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c3ba:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800c3bc:	68ba      	ldr	r2, [r7, #8]
 800c3be:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c3c0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c3cc:	4b16      	ldr	r3, [pc, #88]	; (800c428 <HAL_RTC_SetDate+0x108>)
 800c3ce:	22ca      	movs	r2, #202	; 0xca
 800c3d0:	625a      	str	r2, [r3, #36]	; 0x24
 800c3d2:	4b15      	ldr	r3, [pc, #84]	; (800c428 <HAL_RTC_SetDate+0x108>)
 800c3d4:	2253      	movs	r2, #83	; 0x53
 800c3d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f000 f859 	bl	800c490 <RTC_EnterInitMode>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c3e2:	7cfb      	ldrb	r3, [r7, #19]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d10b      	bne.n	800c400 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800c3e8:	4a0f      	ldr	r2, [pc, #60]	; (800c428 <HAL_RTC_SetDate+0x108>)
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c3f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c3f4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f000 f886 	bl	800c508 <RTC_ExitInitMode>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c400:	4b09      	ldr	r3, [pc, #36]	; (800c428 <HAL_RTC_SetDate+0x108>)
 800c402:	22ff      	movs	r2, #255	; 0xff
 800c404:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c406:	7cfb      	ldrb	r3, [r7, #19]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d103      	bne.n	800c414 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2200      	movs	r2, #0
 800c418:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800c41c:	7cfb      	ldrb	r3, [r7, #19]
}
 800c41e:	4618      	mov	r0, r3
 800c420:	371c      	adds	r7, #28
 800c422:	46bd      	mov	sp, r7
 800c424:	bd90      	pop	{r4, r7, pc}
 800c426:	bf00      	nop
 800c428:	46007800 	.word	0x46007800

0800c42c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800c434:	4b15      	ldr	r3, [pc, #84]	; (800c48c <HAL_RTC_WaitForSynchro+0x60>)
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	4a14      	ldr	r2, [pc, #80]	; (800c48c <HAL_RTC_WaitForSynchro+0x60>)
 800c43a:	f023 0320 	bic.w	r3, r3, #32
 800c43e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800c440:	f7f6 ffac 	bl	800339c <HAL_GetTick>
 800c444:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c446:	e013      	b.n	800c470 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c448:	f7f6 ffa8 	bl	800339c <HAL_GetTick>
 800c44c:	4602      	mov	r2, r0
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c456:	d90b      	bls.n	800c470 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c458:	4b0c      	ldr	r3, [pc, #48]	; (800c48c <HAL_RTC_WaitForSynchro+0x60>)
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	f003 0320 	and.w	r3, r3, #32
 800c460:	2b00      	cmp	r3, #0
 800c462:	d10c      	bne.n	800c47e <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2203      	movs	r2, #3
 800c468:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 800c46c:	2303      	movs	r3, #3
 800c46e:	e008      	b.n	800c482 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c470:	4b06      	ldr	r3, [pc, #24]	; (800c48c <HAL_RTC_WaitForSynchro+0x60>)
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	f003 0320 	and.w	r3, r3, #32
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d0e5      	beq.n	800c448 <HAL_RTC_WaitForSynchro+0x1c>
 800c47c:	e000      	b.n	800c480 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800c47e:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	46007800 	.word	0x46007800

0800c490 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c498:	2300      	movs	r3, #0
 800c49a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c49c:	4b19      	ldr	r3, [pc, #100]	; (800c504 <RTC_EnterInitMode+0x74>)
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d128      	bne.n	800c4fa <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c4a8:	4b16      	ldr	r3, [pc, #88]	; (800c504 <RTC_EnterInitMode+0x74>)
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	4a15      	ldr	r2, [pc, #84]	; (800c504 <RTC_EnterInitMode+0x74>)
 800c4ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4b2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800c4b4:	f7f6 ff72 	bl	800339c <HAL_GetTick>
 800c4b8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c4ba:	e013      	b.n	800c4e4 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c4bc:	f7f6 ff6e 	bl	800339c <HAL_GetTick>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	1ad3      	subs	r3, r2, r3
 800c4c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4ca:	d90b      	bls.n	800c4e4 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c4cc:	4b0d      	ldr	r3, [pc, #52]	; (800c504 <RTC_EnterInitMode+0x74>)
 800c4ce:	68db      	ldr	r3, [r3, #12]
 800c4d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d10f      	bne.n	800c4f8 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2203      	movs	r2, #3
 800c4e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c4e4:	4b07      	ldr	r3, [pc, #28]	; (800c504 <RTC_EnterInitMode+0x74>)
 800c4e6:	68db      	ldr	r3, [r3, #12]
 800c4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d104      	bne.n	800c4fa <RTC_EnterInitMode+0x6a>
 800c4f0:	7bfb      	ldrb	r3, [r7, #15]
 800c4f2:	2b03      	cmp	r3, #3
 800c4f4:	d1e2      	bne.n	800c4bc <RTC_EnterInitMode+0x2c>
 800c4f6:	e000      	b.n	800c4fa <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800c4f8:	bf00      	nop
        }
      }
    }
  }

  return status;
 800c4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3710      	adds	r7, #16
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	46007800 	.word	0x46007800

0800c508 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c510:	2300      	movs	r3, #0
 800c512:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c514:	4b1a      	ldr	r3, [pc, #104]	; (800c580 <RTC_ExitInitMode+0x78>)
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	4a19      	ldr	r2, [pc, #100]	; (800c580 <RTC_ExitInitMode+0x78>)
 800c51a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c51e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c520:	4b17      	ldr	r3, [pc, #92]	; (800c580 <RTC_ExitInitMode+0x78>)
 800c522:	699b      	ldr	r3, [r3, #24]
 800c524:	f003 0320 	and.w	r3, r3, #32
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d10c      	bne.n	800c546 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7ff ff7d 	bl	800c42c <HAL_RTC_WaitForSynchro>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d01e      	beq.n	800c576 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2203      	movs	r2, #3
 800c53c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800c540:	2303      	movs	r3, #3
 800c542:	73fb      	strb	r3, [r7, #15]
 800c544:	e017      	b.n	800c576 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c546:	4b0e      	ldr	r3, [pc, #56]	; (800c580 <RTC_ExitInitMode+0x78>)
 800c548:	699b      	ldr	r3, [r3, #24]
 800c54a:	4a0d      	ldr	r2, [pc, #52]	; (800c580 <RTC_ExitInitMode+0x78>)
 800c54c:	f023 0320 	bic.w	r3, r3, #32
 800c550:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f7ff ff6a 	bl	800c42c <HAL_RTC_WaitForSynchro>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d005      	beq.n	800c56a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2203      	movs	r2, #3
 800c562:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800c566:	2303      	movs	r3, #3
 800c568:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c56a:	4b05      	ldr	r3, [pc, #20]	; (800c580 <RTC_ExitInitMode+0x78>)
 800c56c:	699b      	ldr	r3, [r3, #24]
 800c56e:	4a04      	ldr	r2, [pc, #16]	; (800c580 <RTC_ExitInitMode+0x78>)
 800c570:	f043 0320 	orr.w	r3, r3, #32
 800c574:	6193      	str	r3, [r2, #24]
  }
  return status;
 800c576:	7bfb      	ldrb	r3, [r7, #15]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	46007800 	.word	0x46007800

0800c584 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	4603      	mov	r3, r0
 800c58c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c58e:	2300      	movs	r3, #0
 800c590:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800c592:	79fb      	ldrb	r3, [r7, #7]
 800c594:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800c596:	e005      	b.n	800c5a4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	3301      	adds	r3, #1
 800c59c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800c59e:	7afb      	ldrb	r3, [r7, #11]
 800c5a0:	3b0a      	subs	r3, #10
 800c5a2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800c5a4:	7afb      	ldrb	r3, [r7, #11]
 800c5a6:	2b09      	cmp	r3, #9
 800c5a8:	d8f6      	bhi.n	800c598 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	011b      	lsls	r3, r3, #4
 800c5b0:	b2da      	uxtb	r2, r3
 800c5b2:	7afb      	ldrb	r3, [r7, #11]
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	b2db      	uxtb	r3, r3
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3714      	adds	r7, #20
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	4910      	ldr	r1, [pc, #64]	; (800c618 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	689a      	ldr	r2, [r3, #8]
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	431a      	orrs	r2, r3
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	699b      	ldr	r3, [r3, #24]
 800c5ea:	490c      	ldr	r1, [pc, #48]	; (800c61c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800c5f0:	4b0a      	ldr	r3, [pc, #40]	; (800c61c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c5f2:	6a1b      	ldr	r3, [r3, #32]
 800c5f4:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	6919      	ldr	r1, [r3, #16]
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	695b      	ldr	r3, [r3, #20]
 800c600:	041b      	lsls	r3, r3, #16
 800c602:	430b      	orrs	r3, r1
 800c604:	4905      	ldr	r1, [pc, #20]	; (800c61c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c606:	4313      	orrs	r3, r2
 800c608:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800c60a:	2300      	movs	r3, #0
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr
 800c618:	46007800 	.word	0x46007800
 800c61c:	46007c00 	.word	0x46007c00

0800c620 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d101      	bne.n	800c632 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	e0fb      	b.n	800c82a <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a7f      	ldr	r2, [pc, #508]	; (800c834 <HAL_SPI_Init+0x214>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d004      	beq.n	800c646 <HAL_SPI_Init+0x26>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a7d      	ldr	r2, [pc, #500]	; (800c838 <HAL_SPI_Init+0x218>)
 800c642:	4293      	cmp	r3, r2
 800c644:	e000      	b.n	800c648 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800c646:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4a78      	ldr	r2, [pc, #480]	; (800c834 <HAL_SPI_Init+0x214>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d004      	beq.n	800c662 <HAL_SPI_Init+0x42>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a76      	ldr	r2, [pc, #472]	; (800c838 <HAL_SPI_Init+0x218>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d105      	bne.n	800c66e <HAL_SPI_Init+0x4e>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	68db      	ldr	r3, [r3, #12]
 800c666:	2b0f      	cmp	r3, #15
 800c668:	d901      	bls.n	800c66e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800c66a:	2301      	movs	r3, #1
 800c66c:	e0dd      	b.n	800c82a <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 f8ec 	bl	800c84c <SPI_GetPacketSize>
 800c674:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a6e      	ldr	r2, [pc, #440]	; (800c834 <HAL_SPI_Init+0x214>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d004      	beq.n	800c68a <HAL_SPI_Init+0x6a>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a6c      	ldr	r2, [pc, #432]	; (800c838 <HAL_SPI_Init+0x218>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d102      	bne.n	800c690 <HAL_SPI_Init+0x70>
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2b08      	cmp	r3, #8
 800c68e:	d816      	bhi.n	800c6be <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c694:	4a69      	ldr	r2, [pc, #420]	; (800c83c <HAL_SPI_Init+0x21c>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d00e      	beq.n	800c6b8 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4a68      	ldr	r2, [pc, #416]	; (800c840 <HAL_SPI_Init+0x220>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d009      	beq.n	800c6b8 <HAL_SPI_Init+0x98>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4a66      	ldr	r2, [pc, #408]	; (800c844 <HAL_SPI_Init+0x224>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d004      	beq.n	800c6b8 <HAL_SPI_Init+0x98>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a65      	ldr	r2, [pc, #404]	; (800c848 <HAL_SPI_Init+0x228>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d104      	bne.n	800c6c2 <HAL_SPI_Init+0xa2>
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2b10      	cmp	r3, #16
 800c6bc:	d901      	bls.n	800c6c2 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e0b3      	b.n	800c82a <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d106      	bne.n	800c6dc <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f7f6 fc30 	bl	8002f3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2202      	movs	r2, #2
 800c6e0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f022 0201 	bic.w	r2, r2, #1
 800c6f2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c6fe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	699b      	ldr	r3, [r3, #24]
 800c704:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c708:	d119      	bne.n	800c73e <HAL_SPI_Init+0x11e>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c712:	d103      	bne.n	800c71c <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d008      	beq.n	800c72e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c720:	2b00      	cmp	r3, #0
 800c722:	d10c      	bne.n	800c73e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c72c:	d107      	bne.n	800c73e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c73c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00f      	beq.n	800c76a <HAL_SPI_Init+0x14a>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	2b06      	cmp	r3, #6
 800c750:	d90b      	bls.n	800c76a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	430a      	orrs	r2, r1
 800c766:	601a      	str	r2, [r3, #0]
 800c768:	e007      	b.n	800c77a <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c778:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	69da      	ldr	r2, [r3, #28]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c782:	431a      	orrs	r2, r3
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	431a      	orrs	r2, r3
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c78c:	ea42 0103 	orr.w	r1, r2, r3
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	68da      	ldr	r2, [r3, #12]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	430a      	orrs	r2, r1
 800c79a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a4:	431a      	orrs	r2, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7aa:	431a      	orrs	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	699b      	ldr	r3, [r3, #24]
 800c7b0:	431a      	orrs	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	691b      	ldr	r3, [r3, #16]
 800c7b6:	431a      	orrs	r2, r3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	695b      	ldr	r3, [r3, #20]
 800c7bc:	431a      	orrs	r2, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6a1b      	ldr	r3, [r3, #32]
 800c7c2:	431a      	orrs	r2, r3
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	431a      	orrs	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7ce:	431a      	orrs	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	431a      	orrs	r2, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7da:	431a      	orrs	r2, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7e0:	431a      	orrs	r2, r3
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7e6:	ea42 0103 	orr.w	r1, r2, r3
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	430a      	orrs	r2, r1
 800c7f4:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d00a      	beq.n	800c818 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	430a      	orrs	r2, r1
 800c816:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800c828:	2300      	movs	r3, #0
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	46002000 	.word	0x46002000
 800c838:	56002000 	.word	0x56002000
 800c83c:	40013000 	.word	0x40013000
 800c840:	50013000 	.word	0x50013000
 800c844:	40003800 	.word	0x40003800
 800c848:	50003800 	.word	0x50003800

0800c84c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c858:	095b      	lsrs	r3, r3, #5
 800c85a:	3301      	adds	r3, #1
 800c85c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	3301      	adds	r3, #1
 800c864:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	3307      	adds	r3, #7
 800c86a:	08db      	lsrs	r3, r3, #3
 800c86c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	68fa      	ldr	r2, [r7, #12]
 800c872:	fb02 f303 	mul.w	r3, r2, r3
}
 800c876:	4618      	mov	r0, r3
 800c878:	3714      	adds	r7, #20
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr

0800c882 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800c882:	b480      	push	{r7}
 800c884:	b083      	sub	sp, #12
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
 800c88a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c892:	b2db      	uxtb	r3, r3
 800c894:	2b01      	cmp	r3, #1
 800c896:	d12e      	bne.n	800c8f6 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d101      	bne.n	800c8a6 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800c8a2:	2302      	movs	r3, #2
 800c8a4:	e028      	b.n	800c8f8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2202      	movs	r2, #2
 800c8b2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f022 0201 	bic.w	r2, r2, #1
 800c8c4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800c8d2:	ea42 0103 	orr.w	r1, r2, r3
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	689a      	ldr	r2, [r3, #8]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	430a      	orrs	r2, r1
 800c8e0:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	e000      	b.n	800c8f8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800c8f6:	2301      	movs	r3, #1
  }
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d101      	bne.n	800c916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c912:	2301      	movs	r3, #1
 800c914:	e049      	b.n	800c9aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d106      	bne.n	800c930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2200      	movs	r2, #0
 800c926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 f841 	bl	800c9b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2202      	movs	r2, #2
 800c934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	3304      	adds	r3, #4
 800c940:	4619      	mov	r1, r3
 800c942:	4610      	mov	r0, r2
 800c944:	f000 fa58 	bl	800cdf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2201      	movs	r2, #1
 800c964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2201      	movs	r2, #1
 800c96c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2201      	movs	r2, #1
 800c97c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2201      	movs	r2, #1
 800c984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2201      	movs	r2, #1
 800c98c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2201      	movs	r2, #1
 800c994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2201      	movs	r2, #1
 800c99c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c9a8:	2300      	movs	r3, #0
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c9b2:	b480      	push	{r7}
 800c9b4:	b083      	sub	sp, #12
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c9ba:	bf00      	nop
 800c9bc:	370c      	adds	r7, #12
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr
	...

0800c9c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b085      	sub	sp, #20
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d001      	beq.n	800c9e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e072      	b.n	800cac6 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2202      	movs	r2, #2
 800c9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	68da      	ldr	r2, [r3, #12]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f042 0201 	orr.w	r2, r2, #1
 800c9f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a35      	ldr	r2, [pc, #212]	; (800cad4 <HAL_TIM_Base_Start_IT+0x10c>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d040      	beq.n	800ca84 <HAL_TIM_Base_Start_IT+0xbc>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a34      	ldr	r2, [pc, #208]	; (800cad8 <HAL_TIM_Base_Start_IT+0x110>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d03b      	beq.n	800ca84 <HAL_TIM_Base_Start_IT+0xbc>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca14:	d036      	beq.n	800ca84 <HAL_TIM_Base_Start_IT+0xbc>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ca1e:	d031      	beq.n	800ca84 <HAL_TIM_Base_Start_IT+0xbc>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a2d      	ldr	r2, [pc, #180]	; (800cadc <HAL_TIM_Base_Start_IT+0x114>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d02c      	beq.n	800ca84 <HAL_TIM_Base_Start_IT+0xbc>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a2c      	ldr	r2, [pc, #176]	; (800cae0 <HAL_TIM_Base_Start_IT+0x118>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d027      	beq.n	800ca84 <HAL_TIM_Base_Start_IT+0xbc>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a2a      	ldr	r2, [pc, #168]	; (800cae4 <HAL_TIM_Base_Start_IT+0x11c>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d022      	beq.n	800ca84 <HAL_TIM_Base_Start_IT+0xbc>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4a29      	ldr	r2, [pc, #164]	; (800cae8 <HAL_TIM_Base_Start_IT+0x120>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d01d      	beq.n	800ca84 <HAL_TIM_Base_Start_IT+0xbc>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a27      	ldr	r2, [pc, #156]	; (800caec <HAL_TIM_Base_Start_IT+0x124>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d018      	beq.n	800ca84 <HAL_TIM_Base_Start_IT+0xbc>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4a26      	ldr	r2, [pc, #152]	; (800caf0 <HAL_TIM_Base_Start_IT+0x128>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d013      	beq.n	800ca84 <HAL_TIM_Base_Start_IT+0xbc>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4a24      	ldr	r2, [pc, #144]	; (800caf4 <HAL_TIM_Base_Start_IT+0x12c>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d00e      	beq.n	800ca84 <HAL_TIM_Base_Start_IT+0xbc>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a23      	ldr	r2, [pc, #140]	; (800caf8 <HAL_TIM_Base_Start_IT+0x130>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d009      	beq.n	800ca84 <HAL_TIM_Base_Start_IT+0xbc>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a21      	ldr	r2, [pc, #132]	; (800cafc <HAL_TIM_Base_Start_IT+0x134>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d004      	beq.n	800ca84 <HAL_TIM_Base_Start_IT+0xbc>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4a20      	ldr	r2, [pc, #128]	; (800cb00 <HAL_TIM_Base_Start_IT+0x138>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d115      	bne.n	800cab0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	689a      	ldr	r2, [r3, #8]
 800ca8a:	4b1e      	ldr	r3, [pc, #120]	; (800cb04 <HAL_TIM_Base_Start_IT+0x13c>)
 800ca8c:	4013      	ands	r3, r2
 800ca8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	2b06      	cmp	r3, #6
 800ca94:	d015      	beq.n	800cac2 <HAL_TIM_Base_Start_IT+0xfa>
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca9c:	d011      	beq.n	800cac2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f042 0201 	orr.w	r2, r2, #1
 800caac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800caae:	e008      	b.n	800cac2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f042 0201 	orr.w	r2, r2, #1
 800cabe:	601a      	str	r2, [r3, #0]
 800cac0:	e000      	b.n	800cac4 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cac2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3714      	adds	r7, #20
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop
 800cad4:	40012c00 	.word	0x40012c00
 800cad8:	50012c00 	.word	0x50012c00
 800cadc:	40000400 	.word	0x40000400
 800cae0:	50000400 	.word	0x50000400
 800cae4:	40000800 	.word	0x40000800
 800cae8:	50000800 	.word	0x50000800
 800caec:	40000c00 	.word	0x40000c00
 800caf0:	50000c00 	.word	0x50000c00
 800caf4:	40013400 	.word	0x40013400
 800caf8:	50013400 	.word	0x50013400
 800cafc:	40014000 	.word	0x40014000
 800cb00:	50014000 	.word	0x50014000
 800cb04:	00010007 	.word	0x00010007

0800cb08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	691b      	ldr	r3, [r3, #16]
 800cb1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	f003 0302 	and.w	r3, r3, #2
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d020      	beq.n	800cb6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f003 0302 	and.w	r3, r3, #2
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d01b      	beq.n	800cb6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f06f 0202 	mvn.w	r2, #2
 800cb3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2201      	movs	r2, #1
 800cb42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	699b      	ldr	r3, [r3, #24]
 800cb4a:	f003 0303 	and.w	r3, r3, #3
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d003      	beq.n	800cb5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 f931 	bl	800cdba <HAL_TIM_IC_CaptureCallback>
 800cb58:	e005      	b.n	800cb66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 f923 	bl	800cda6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 f934 	bl	800cdce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	f003 0304 	and.w	r3, r3, #4
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d020      	beq.n	800cbb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f003 0304 	and.w	r3, r3, #4
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d01b      	beq.n	800cbb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f06f 0204 	mvn.w	r2, #4
 800cb88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2202      	movs	r2, #2
 800cb8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	699b      	ldr	r3, [r3, #24]
 800cb96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d003      	beq.n	800cba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 f90b 	bl	800cdba <HAL_TIM_IC_CaptureCallback>
 800cba4:	e005      	b.n	800cbb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 f8fd 	bl	800cda6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 f90e 	bl	800cdce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	f003 0308 	and.w	r3, r3, #8
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d020      	beq.n	800cc04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	f003 0308 	and.w	r3, r3, #8
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d01b      	beq.n	800cc04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f06f 0208 	mvn.w	r2, #8
 800cbd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2204      	movs	r2, #4
 800cbda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	69db      	ldr	r3, [r3, #28]
 800cbe2:	f003 0303 	and.w	r3, r3, #3
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d003      	beq.n	800cbf2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 f8e5 	bl	800cdba <HAL_TIM_IC_CaptureCallback>
 800cbf0:	e005      	b.n	800cbfe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 f8d7 	bl	800cda6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 f8e8 	bl	800cdce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2200      	movs	r2, #0
 800cc02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	f003 0310 	and.w	r3, r3, #16
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d020      	beq.n	800cc50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f003 0310 	and.w	r3, r3, #16
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d01b      	beq.n	800cc50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f06f 0210 	mvn.w	r2, #16
 800cc20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2208      	movs	r2, #8
 800cc26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	69db      	ldr	r3, [r3, #28]
 800cc2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d003      	beq.n	800cc3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 f8bf 	bl	800cdba <HAL_TIM_IC_CaptureCallback>
 800cc3c:	e005      	b.n	800cc4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 f8b1 	bl	800cda6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 f8c2 	bl	800cdce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	f003 0301 	and.w	r3, r3, #1
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d00c      	beq.n	800cc74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f003 0301 	and.w	r3, r3, #1
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d007      	beq.n	800cc74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f06f 0201 	mvn.w	r2, #1
 800cc6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f7f5 f91a 	bl	8001ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d104      	bne.n	800cc88 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d00c      	beq.n	800cca2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d007      	beq.n	800cca2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800cc9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f000 f9af 	bl	800d000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d00c      	beq.n	800ccc6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d007      	beq.n	800ccc6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ccbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 f9a7 	bl	800d014 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d00c      	beq.n	800ccea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d007      	beq.n	800ccea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 f87c 	bl	800cde2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	f003 0320 	and.w	r3, r3, #32
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00c      	beq.n	800cd0e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f003 0320 	and.w	r3, r3, #32
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d007      	beq.n	800cd0e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f06f 0220 	mvn.w	r2, #32
 800cd06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 f96f 	bl	800cfec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00c      	beq.n	800cd32 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d007      	beq.n	800cd32 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800cd2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f000 f97b 	bl	800d028 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00c      	beq.n	800cd56 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d007      	beq.n	800cd56 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800cd4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 f973 	bl	800d03c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d00c      	beq.n	800cd7a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d007      	beq.n	800cd7a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800cd72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 f96b 	bl	800d050 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d00c      	beq.n	800cd9e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d007      	beq.n	800cd9e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800cd96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f000 f963 	bl	800d064 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cd9e:	bf00      	nop
 800cda0:	3710      	adds	r7, #16
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cda6:	b480      	push	{r7}
 800cda8:	b083      	sub	sp, #12
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cdae:	bf00      	nop
 800cdb0:	370c      	adds	r7, #12
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr

0800cdba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cdba:	b480      	push	{r7}
 800cdbc:	b083      	sub	sp, #12
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cdc2:	bf00      	nop
 800cdc4:	370c      	adds	r7, #12
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdcc:	4770      	bx	lr

0800cdce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cdce:	b480      	push	{r7}
 800cdd0:	b083      	sub	sp, #12
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cdd6:	bf00      	nop
 800cdd8:	370c      	adds	r7, #12
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr

0800cde2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cde2:	b480      	push	{r7}
 800cde4:	b083      	sub	sp, #12
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cdea:	bf00      	nop
 800cdec:	370c      	adds	r7, #12
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr
	...

0800cdf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b085      	sub	sp, #20
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4a68      	ldr	r2, [pc, #416]	; (800cfac <TIM_Base_SetConfig+0x1b4>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d02b      	beq.n	800ce68 <TIM_Base_SetConfig+0x70>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4a67      	ldr	r2, [pc, #412]	; (800cfb0 <TIM_Base_SetConfig+0x1b8>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d027      	beq.n	800ce68 <TIM_Base_SetConfig+0x70>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce1e:	d023      	beq.n	800ce68 <TIM_Base_SetConfig+0x70>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce26:	d01f      	beq.n	800ce68 <TIM_Base_SetConfig+0x70>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	4a62      	ldr	r2, [pc, #392]	; (800cfb4 <TIM_Base_SetConfig+0x1bc>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d01b      	beq.n	800ce68 <TIM_Base_SetConfig+0x70>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	4a61      	ldr	r2, [pc, #388]	; (800cfb8 <TIM_Base_SetConfig+0x1c0>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d017      	beq.n	800ce68 <TIM_Base_SetConfig+0x70>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	4a60      	ldr	r2, [pc, #384]	; (800cfbc <TIM_Base_SetConfig+0x1c4>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d013      	beq.n	800ce68 <TIM_Base_SetConfig+0x70>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	4a5f      	ldr	r2, [pc, #380]	; (800cfc0 <TIM_Base_SetConfig+0x1c8>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d00f      	beq.n	800ce68 <TIM_Base_SetConfig+0x70>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	4a5e      	ldr	r2, [pc, #376]	; (800cfc4 <TIM_Base_SetConfig+0x1cc>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d00b      	beq.n	800ce68 <TIM_Base_SetConfig+0x70>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	4a5d      	ldr	r2, [pc, #372]	; (800cfc8 <TIM_Base_SetConfig+0x1d0>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d007      	beq.n	800ce68 <TIM_Base_SetConfig+0x70>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	4a5c      	ldr	r2, [pc, #368]	; (800cfcc <TIM_Base_SetConfig+0x1d4>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d003      	beq.n	800ce68 <TIM_Base_SetConfig+0x70>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	4a5b      	ldr	r2, [pc, #364]	; (800cfd0 <TIM_Base_SetConfig+0x1d8>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d108      	bne.n	800ce7a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	4313      	orrs	r3, r2
 800ce78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	4a4b      	ldr	r2, [pc, #300]	; (800cfac <TIM_Base_SetConfig+0x1b4>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d043      	beq.n	800cf0a <TIM_Base_SetConfig+0x112>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	4a4a      	ldr	r2, [pc, #296]	; (800cfb0 <TIM_Base_SetConfig+0x1b8>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d03f      	beq.n	800cf0a <TIM_Base_SetConfig+0x112>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce90:	d03b      	beq.n	800cf0a <TIM_Base_SetConfig+0x112>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce98:	d037      	beq.n	800cf0a <TIM_Base_SetConfig+0x112>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4a45      	ldr	r2, [pc, #276]	; (800cfb4 <TIM_Base_SetConfig+0x1bc>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d033      	beq.n	800cf0a <TIM_Base_SetConfig+0x112>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	4a44      	ldr	r2, [pc, #272]	; (800cfb8 <TIM_Base_SetConfig+0x1c0>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d02f      	beq.n	800cf0a <TIM_Base_SetConfig+0x112>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	4a43      	ldr	r2, [pc, #268]	; (800cfbc <TIM_Base_SetConfig+0x1c4>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d02b      	beq.n	800cf0a <TIM_Base_SetConfig+0x112>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	4a42      	ldr	r2, [pc, #264]	; (800cfc0 <TIM_Base_SetConfig+0x1c8>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d027      	beq.n	800cf0a <TIM_Base_SetConfig+0x112>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	4a41      	ldr	r2, [pc, #260]	; (800cfc4 <TIM_Base_SetConfig+0x1cc>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d023      	beq.n	800cf0a <TIM_Base_SetConfig+0x112>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	4a40      	ldr	r2, [pc, #256]	; (800cfc8 <TIM_Base_SetConfig+0x1d0>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d01f      	beq.n	800cf0a <TIM_Base_SetConfig+0x112>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	4a3f      	ldr	r2, [pc, #252]	; (800cfcc <TIM_Base_SetConfig+0x1d4>)
 800cece:	4293      	cmp	r3, r2
 800ced0:	d01b      	beq.n	800cf0a <TIM_Base_SetConfig+0x112>
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	4a3e      	ldr	r2, [pc, #248]	; (800cfd0 <TIM_Base_SetConfig+0x1d8>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d017      	beq.n	800cf0a <TIM_Base_SetConfig+0x112>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	4a3d      	ldr	r2, [pc, #244]	; (800cfd4 <TIM_Base_SetConfig+0x1dc>)
 800cede:	4293      	cmp	r3, r2
 800cee0:	d013      	beq.n	800cf0a <TIM_Base_SetConfig+0x112>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	4a3c      	ldr	r2, [pc, #240]	; (800cfd8 <TIM_Base_SetConfig+0x1e0>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d00f      	beq.n	800cf0a <TIM_Base_SetConfig+0x112>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	4a3b      	ldr	r2, [pc, #236]	; (800cfdc <TIM_Base_SetConfig+0x1e4>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d00b      	beq.n	800cf0a <TIM_Base_SetConfig+0x112>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	4a3a      	ldr	r2, [pc, #232]	; (800cfe0 <TIM_Base_SetConfig+0x1e8>)
 800cef6:	4293      	cmp	r3, r2
 800cef8:	d007      	beq.n	800cf0a <TIM_Base_SetConfig+0x112>
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	4a39      	ldr	r2, [pc, #228]	; (800cfe4 <TIM_Base_SetConfig+0x1ec>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d003      	beq.n	800cf0a <TIM_Base_SetConfig+0x112>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	4a38      	ldr	r2, [pc, #224]	; (800cfe8 <TIM_Base_SetConfig+0x1f0>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d108      	bne.n	800cf1c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	68db      	ldr	r3, [r3, #12]
 800cf16:	68fa      	ldr	r2, [r7, #12]
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	695b      	ldr	r3, [r3, #20]
 800cf26:	4313      	orrs	r3, r2
 800cf28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	68fa      	ldr	r2, [r7, #12]
 800cf2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	689a      	ldr	r2, [r3, #8]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	4a1a      	ldr	r2, [pc, #104]	; (800cfac <TIM_Base_SetConfig+0x1b4>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d023      	beq.n	800cf90 <TIM_Base_SetConfig+0x198>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	4a19      	ldr	r2, [pc, #100]	; (800cfb0 <TIM_Base_SetConfig+0x1b8>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d01f      	beq.n	800cf90 <TIM_Base_SetConfig+0x198>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	4a1e      	ldr	r2, [pc, #120]	; (800cfcc <TIM_Base_SetConfig+0x1d4>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d01b      	beq.n	800cf90 <TIM_Base_SetConfig+0x198>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	4a1d      	ldr	r2, [pc, #116]	; (800cfd0 <TIM_Base_SetConfig+0x1d8>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d017      	beq.n	800cf90 <TIM_Base_SetConfig+0x198>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	4a1c      	ldr	r2, [pc, #112]	; (800cfd4 <TIM_Base_SetConfig+0x1dc>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d013      	beq.n	800cf90 <TIM_Base_SetConfig+0x198>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	4a1b      	ldr	r2, [pc, #108]	; (800cfd8 <TIM_Base_SetConfig+0x1e0>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d00f      	beq.n	800cf90 <TIM_Base_SetConfig+0x198>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	4a1a      	ldr	r2, [pc, #104]	; (800cfdc <TIM_Base_SetConfig+0x1e4>)
 800cf74:	4293      	cmp	r3, r2
 800cf76:	d00b      	beq.n	800cf90 <TIM_Base_SetConfig+0x198>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	4a19      	ldr	r2, [pc, #100]	; (800cfe0 <TIM_Base_SetConfig+0x1e8>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d007      	beq.n	800cf90 <TIM_Base_SetConfig+0x198>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	4a18      	ldr	r2, [pc, #96]	; (800cfe4 <TIM_Base_SetConfig+0x1ec>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d003      	beq.n	800cf90 <TIM_Base_SetConfig+0x198>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	4a17      	ldr	r2, [pc, #92]	; (800cfe8 <TIM_Base_SetConfig+0x1f0>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d103      	bne.n	800cf98 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	691a      	ldr	r2, [r3, #16]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	615a      	str	r2, [r3, #20]
}
 800cf9e:	bf00      	nop
 800cfa0:	3714      	adds	r7, #20
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr
 800cfaa:	bf00      	nop
 800cfac:	40012c00 	.word	0x40012c00
 800cfb0:	50012c00 	.word	0x50012c00
 800cfb4:	40000400 	.word	0x40000400
 800cfb8:	50000400 	.word	0x50000400
 800cfbc:	40000800 	.word	0x40000800
 800cfc0:	50000800 	.word	0x50000800
 800cfc4:	40000c00 	.word	0x40000c00
 800cfc8:	50000c00 	.word	0x50000c00
 800cfcc:	40013400 	.word	0x40013400
 800cfd0:	50013400 	.word	0x50013400
 800cfd4:	40014000 	.word	0x40014000
 800cfd8:	50014000 	.word	0x50014000
 800cfdc:	40014400 	.word	0x40014400
 800cfe0:	50014400 	.word	0x50014400
 800cfe4:	40014800 	.word	0x40014800
 800cfe8:	50014800 	.word	0x50014800

0800cfec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cff4:	bf00      	nop
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr

0800d000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d008:	bf00      	nop
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d01c:	bf00      	nop
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d030:	bf00      	nop
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d044:	bf00      	nop
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr

0800d050 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d058:	bf00      	nop
 800d05a:	370c      	adds	r7, #12
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr

0800d064 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d064:	b480      	push	{r7}
 800d066:	b083      	sub	sp, #12
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d06c:	bf00      	nop
 800d06e:	370c      	adds	r7, #12
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr

0800d078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d101      	bne.n	800d08a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d086:	2301      	movs	r3, #1
 800d088:	e042      	b.n	800d110 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d090:	2b00      	cmp	r3, #0
 800d092:	d106      	bne.n	800d0a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f7f5 fb5d 	bl	800275c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2224      	movs	r2, #36	; 0x24
 800d0a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f022 0201 	bic.w	r2, r2, #1
 800d0b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d002      	beq.n	800d0c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 f9d6 	bl	800d474 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 f825 	bl	800d118 <UART_SetConfig>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d101      	bne.n	800d0d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	e01b      	b.n	800d110 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	685a      	ldr	r2, [r3, #4]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d0e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	689a      	ldr	r2, [r3, #8]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d0f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f042 0201 	orr.w	r2, r2, #1
 800d106:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f000 fa55 	bl	800d5b8 <UART_CheckIdleState>
 800d10e:	4603      	mov	r3, r0
}
 800d110:	4618      	mov	r0, r3
 800d112:	3708      	adds	r7, #8
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d11c:	b094      	sub	sp, #80	; 0x50
 800d11e:	af00      	add	r7, sp, #0
 800d120:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d122:	2300      	movs	r3, #0
 800d124:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	4b83      	ldr	r3, [pc, #524]	; (800d33c <UART_SetConfig+0x224>)
 800d12e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d132:	689a      	ldr	r2, [r3, #8]
 800d134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d136:	691b      	ldr	r3, [r3, #16]
 800d138:	431a      	orrs	r2, r3
 800d13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d13c:	695b      	ldr	r3, [r3, #20]
 800d13e:	431a      	orrs	r2, r3
 800d140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d142:	69db      	ldr	r3, [r3, #28]
 800d144:	4313      	orrs	r3, r2
 800d146:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	497c      	ldr	r1, [pc, #496]	; (800d340 <UART_SetConfig+0x228>)
 800d150:	4019      	ands	r1, r3
 800d152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d158:	430b      	orrs	r3, r1
 800d15a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d168:	68d9      	ldr	r1, [r3, #12]
 800d16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	ea40 0301 	orr.w	r3, r0, r1
 800d172:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d176:	699b      	ldr	r3, [r3, #24]
 800d178:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	4b6f      	ldr	r3, [pc, #444]	; (800d33c <UART_SetConfig+0x224>)
 800d180:	429a      	cmp	r2, r3
 800d182:	d009      	beq.n	800d198 <UART_SetConfig+0x80>
 800d184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	4b6e      	ldr	r3, [pc, #440]	; (800d344 <UART_SetConfig+0x22c>)
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d004      	beq.n	800d198 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d190:	6a1a      	ldr	r2, [r3, #32]
 800d192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d194:	4313      	orrs	r3, r2
 800d196:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	689b      	ldr	r3, [r3, #8]
 800d19e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800d1a2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800d1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1ac:	430b      	orrs	r3, r1
 800d1ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b6:	f023 000f 	bic.w	r0, r3, #15
 800d1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	ea40 0301 	orr.w	r3, r0, r1
 800d1c6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	4b5e      	ldr	r3, [pc, #376]	; (800d348 <UART_SetConfig+0x230>)
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d102      	bne.n	800d1d8 <UART_SetConfig+0xc0>
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1d6:	e032      	b.n	800d23e <UART_SetConfig+0x126>
 800d1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	4b5b      	ldr	r3, [pc, #364]	; (800d34c <UART_SetConfig+0x234>)
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d102      	bne.n	800d1e8 <UART_SetConfig+0xd0>
 800d1e2:	2302      	movs	r3, #2
 800d1e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1e6:	e02a      	b.n	800d23e <UART_SetConfig+0x126>
 800d1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	4b58      	ldr	r3, [pc, #352]	; (800d350 <UART_SetConfig+0x238>)
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d102      	bne.n	800d1f8 <UART_SetConfig+0xe0>
 800d1f2:	2304      	movs	r3, #4
 800d1f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1f6:	e022      	b.n	800d23e <UART_SetConfig+0x126>
 800d1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	4b55      	ldr	r3, [pc, #340]	; (800d354 <UART_SetConfig+0x23c>)
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d102      	bne.n	800d208 <UART_SetConfig+0xf0>
 800d202:	2308      	movs	r3, #8
 800d204:	64bb      	str	r3, [r7, #72]	; 0x48
 800d206:	e01a      	b.n	800d23e <UART_SetConfig+0x126>
 800d208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	4b52      	ldr	r3, [pc, #328]	; (800d358 <UART_SetConfig+0x240>)
 800d20e:	429a      	cmp	r2, r3
 800d210:	d102      	bne.n	800d218 <UART_SetConfig+0x100>
 800d212:	2310      	movs	r3, #16
 800d214:	64bb      	str	r3, [r7, #72]	; 0x48
 800d216:	e012      	b.n	800d23e <UART_SetConfig+0x126>
 800d218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21a:	681a      	ldr	r2, [r3, #0]
 800d21c:	4b4f      	ldr	r3, [pc, #316]	; (800d35c <UART_SetConfig+0x244>)
 800d21e:	429a      	cmp	r2, r3
 800d220:	d103      	bne.n	800d22a <UART_SetConfig+0x112>
 800d222:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800d226:	64bb      	str	r3, [r7, #72]	; 0x48
 800d228:	e009      	b.n	800d23e <UART_SetConfig+0x126>
 800d22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	4b43      	ldr	r3, [pc, #268]	; (800d33c <UART_SetConfig+0x224>)
 800d230:	429a      	cmp	r2, r3
 800d232:	d102      	bne.n	800d23a <UART_SetConfig+0x122>
 800d234:	2320      	movs	r3, #32
 800d236:	64bb      	str	r3, [r7, #72]	; 0x48
 800d238:	e001      	b.n	800d23e <UART_SetConfig+0x126>
 800d23a:	2300      	movs	r3, #0
 800d23c:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	4b3e      	ldr	r3, [pc, #248]	; (800d33c <UART_SetConfig+0x224>)
 800d244:	429a      	cmp	r2, r3
 800d246:	d005      	beq.n	800d254 <UART_SetConfig+0x13c>
 800d248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24a:	681a      	ldr	r2, [r3, #0]
 800d24c:	4b3d      	ldr	r3, [pc, #244]	; (800d344 <UART_SetConfig+0x22c>)
 800d24e:	429a      	cmp	r2, r3
 800d250:	f040 8088 	bne.w	800d364 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d256:	2200      	movs	r2, #0
 800d258:	623b      	str	r3, [r7, #32]
 800d25a:	627a      	str	r2, [r7, #36]	; 0x24
 800d25c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d260:	f7fd fa78 	bl	800a754 <HAL_RCCEx_GetPeriphCLKFreq>
 800d264:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f000 80eb 	beq.w	800d444 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d272:	4a3b      	ldr	r2, [pc, #236]	; (800d360 <UART_SetConfig+0x248>)
 800d274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d278:	461a      	mov	r2, r3
 800d27a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d27c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d280:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d284:	685a      	ldr	r2, [r3, #4]
 800d286:	4613      	mov	r3, r2
 800d288:	005b      	lsls	r3, r3, #1
 800d28a:	4413      	add	r3, r2
 800d28c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d28e:	429a      	cmp	r2, r3
 800d290:	d305      	bcc.n	800d29e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d903      	bls.n	800d2a6 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d2a4:	e048      	b.n	800d338 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	61bb      	str	r3, [r7, #24]
 800d2ac:	61fa      	str	r2, [r7, #28]
 800d2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b2:	4a2b      	ldr	r2, [pc, #172]	; (800d360 <UART_SetConfig+0x248>)
 800d2b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	613b      	str	r3, [r7, #16]
 800d2be:	617a      	str	r2, [r7, #20]
 800d2c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d2c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d2c8:	f7f2 fff0 	bl	80002ac <__aeabi_uldivmod>
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	4610      	mov	r0, r2
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	f04f 0200 	mov.w	r2, #0
 800d2d8:	f04f 0300 	mov.w	r3, #0
 800d2dc:	020b      	lsls	r3, r1, #8
 800d2de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d2e2:	0202      	lsls	r2, r0, #8
 800d2e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2e6:	6849      	ldr	r1, [r1, #4]
 800d2e8:	0849      	lsrs	r1, r1, #1
 800d2ea:	2000      	movs	r0, #0
 800d2ec:	460c      	mov	r4, r1
 800d2ee:	4605      	mov	r5, r0
 800d2f0:	eb12 0804 	adds.w	r8, r2, r4
 800d2f4:	eb43 0905 	adc.w	r9, r3, r5
 800d2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	60bb      	str	r3, [r7, #8]
 800d300:	60fa      	str	r2, [r7, #12]
 800d302:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d306:	4640      	mov	r0, r8
 800d308:	4649      	mov	r1, r9
 800d30a:	f7f2 ffcf 	bl	80002ac <__aeabi_uldivmod>
 800d30e:	4602      	mov	r2, r0
 800d310:	460b      	mov	r3, r1
 800d312:	4613      	mov	r3, r2
 800d314:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d318:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d31c:	d308      	bcc.n	800d330 <UART_SetConfig+0x218>
 800d31e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d324:	d204      	bcs.n	800d330 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800d326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d32c:	60da      	str	r2, [r3, #12]
 800d32e:	e003      	b.n	800d338 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800d330:	2301      	movs	r3, #1
 800d332:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800d336:	e085      	b.n	800d444 <UART_SetConfig+0x32c>
 800d338:	e084      	b.n	800d444 <UART_SetConfig+0x32c>
 800d33a:	bf00      	nop
 800d33c:	46002400 	.word	0x46002400
 800d340:	cfff69f3 	.word	0xcfff69f3
 800d344:	56002400 	.word	0x56002400
 800d348:	40013800 	.word	0x40013800
 800d34c:	40004400 	.word	0x40004400
 800d350:	40004800 	.word	0x40004800
 800d354:	40004c00 	.word	0x40004c00
 800d358:	40005000 	.word	0x40005000
 800d35c:	40006400 	.word	0x40006400
 800d360:	0800dc34 	.word	0x0800dc34
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d366:	69db      	ldr	r3, [r3, #28]
 800d368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d36c:	d13c      	bne.n	800d3e8 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d36e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d370:	2200      	movs	r2, #0
 800d372:	603b      	str	r3, [r7, #0]
 800d374:	607a      	str	r2, [r7, #4]
 800d376:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d37a:	f7fd f9eb 	bl	800a754 <HAL_RCCEx_GetPeriphCLKFreq>
 800d37e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d382:	2b00      	cmp	r3, #0
 800d384:	d05e      	beq.n	800d444 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d38a:	4a39      	ldr	r2, [pc, #228]	; (800d470 <UART_SetConfig+0x358>)
 800d38c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d390:	461a      	mov	r2, r3
 800d392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d394:	fbb3 f3f2 	udiv	r3, r3, r2
 800d398:	005a      	lsls	r2, r3, #1
 800d39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	085b      	lsrs	r3, r3, #1
 800d3a0:	441a      	add	r2, r3
 800d3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ae:	2b0f      	cmp	r3, #15
 800d3b0:	d916      	bls.n	800d3e0 <UART_SetConfig+0x2c8>
 800d3b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3b8:	d212      	bcs.n	800d3e0 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d3ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	f023 030f 	bic.w	r3, r3, #15
 800d3c2:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3c6:	085b      	lsrs	r3, r3, #1
 800d3c8:	b29b      	uxth	r3, r3
 800d3ca:	f003 0307 	and.w	r3, r3, #7
 800d3ce:	b29a      	uxth	r2, r3
 800d3d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d3d2:	4313      	orrs	r3, r2
 800d3d4:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800d3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d3dc:	60da      	str	r2, [r3, #12]
 800d3de:	e031      	b.n	800d444 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d3e6:	e02d      	b.n	800d444 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d3e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	469a      	mov	sl, r3
 800d3ee:	4693      	mov	fp, r2
 800d3f0:	4650      	mov	r0, sl
 800d3f2:	4659      	mov	r1, fp
 800d3f4:	f7fd f9ae 	bl	800a754 <HAL_RCCEx_GetPeriphCLKFreq>
 800d3f8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800d3fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d021      	beq.n	800d444 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d404:	4a1a      	ldr	r2, [pc, #104]	; (800d470 <UART_SetConfig+0x358>)
 800d406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d40a:	461a      	mov	r2, r3
 800d40c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d40e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	085b      	lsrs	r3, r3, #1
 800d418:	441a      	add	r2, r3
 800d41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d422:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d426:	2b0f      	cmp	r3, #15
 800d428:	d909      	bls.n	800d43e <UART_SetConfig+0x326>
 800d42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d42c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d430:	d205      	bcs.n	800d43e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d434:	b29a      	uxth	r2, r3
 800d436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	60da      	str	r2, [r3, #12]
 800d43c:	e002      	b.n	800d444 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d43e:	2301      	movs	r3, #1
 800d440:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d446:	2201      	movs	r2, #1
 800d448:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44e:	2201      	movs	r2, #1
 800d450:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d456:	2200      	movs	r2, #0
 800d458:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45c:	2200      	movs	r2, #0
 800d45e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d460:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d464:	4618      	mov	r0, r3
 800d466:	3750      	adds	r7, #80	; 0x50
 800d468:	46bd      	mov	sp, r7
 800d46a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d46e:	bf00      	nop
 800d470:	0800dc34 	.word	0x0800dc34

0800d474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d480:	f003 0308 	and.w	r3, r3, #8
 800d484:	2b00      	cmp	r3, #0
 800d486:	d00a      	beq.n	800d49e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	430a      	orrs	r2, r1
 800d49c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a2:	f003 0301 	and.w	r3, r3, #1
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00a      	beq.n	800d4c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	430a      	orrs	r2, r1
 800d4be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4c4:	f003 0302 	and.w	r3, r3, #2
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d00a      	beq.n	800d4e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	430a      	orrs	r2, r1
 800d4e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4e6:	f003 0304 	and.w	r3, r3, #4
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d00a      	beq.n	800d504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	430a      	orrs	r2, r1
 800d502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d508:	f003 0310 	and.w	r3, r3, #16
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00a      	beq.n	800d526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	430a      	orrs	r2, r1
 800d524:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d52a:	f003 0320 	and.w	r3, r3, #32
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d00a      	beq.n	800d548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	689b      	ldr	r3, [r3, #8]
 800d538:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	430a      	orrs	r2, r1
 800d546:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d54c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d550:	2b00      	cmp	r3, #0
 800d552:	d01a      	beq.n	800d58a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	430a      	orrs	r2, r1
 800d568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d56e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d572:	d10a      	bne.n	800d58a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	430a      	orrs	r2, r1
 800d588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d592:	2b00      	cmp	r3, #0
 800d594:	d00a      	beq.n	800d5ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	430a      	orrs	r2, r1
 800d5aa:	605a      	str	r2, [r3, #4]
  }
}
 800d5ac:	bf00      	nop
 800d5ae:	370c      	adds	r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b098      	sub	sp, #96	; 0x60
 800d5bc:	af02      	add	r7, sp, #8
 800d5be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d5c8:	f7f5 fee8 	bl	800339c <HAL_GetTick>
 800d5cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f003 0308 	and.w	r3, r3, #8
 800d5d8:	2b08      	cmp	r3, #8
 800d5da:	d12f      	bne.n	800d63c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d5e0:	9300      	str	r3, [sp, #0]
 800d5e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 f88e 	bl	800d70c <UART_WaitOnFlagUntilTimeout>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d022      	beq.n	800d63c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5fe:	e853 3f00 	ldrex	r3, [r3]
 800d602:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d60a:	653b      	str	r3, [r7, #80]	; 0x50
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	461a      	mov	r2, r3
 800d612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d614:	647b      	str	r3, [r7, #68]	; 0x44
 800d616:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d618:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d61a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d61c:	e841 2300 	strex	r3, r2, [r1]
 800d620:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d624:	2b00      	cmp	r3, #0
 800d626:	d1e6      	bne.n	800d5f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2220      	movs	r2, #32
 800d62c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d638:	2303      	movs	r3, #3
 800d63a:	e063      	b.n	800d704 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f003 0304 	and.w	r3, r3, #4
 800d646:	2b04      	cmp	r3, #4
 800d648:	d149      	bne.n	800d6de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d64a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d64e:	9300      	str	r3, [sp, #0]
 800d650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d652:	2200      	movs	r2, #0
 800d654:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f000 f857 	bl	800d70c <UART_WaitOnFlagUntilTimeout>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	d03c      	beq.n	800d6de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66c:	e853 3f00 	ldrex	r3, [r3]
 800d670:	623b      	str	r3, [r7, #32]
   return(result);
 800d672:	6a3b      	ldr	r3, [r7, #32]
 800d674:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d678:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	461a      	mov	r2, r3
 800d680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d682:	633b      	str	r3, [r7, #48]	; 0x30
 800d684:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d68a:	e841 2300 	strex	r3, r2, [r1]
 800d68e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d692:	2b00      	cmp	r3, #0
 800d694:	d1e6      	bne.n	800d664 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	3308      	adds	r3, #8
 800d69c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	e853 3f00 	ldrex	r3, [r3]
 800d6a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f023 0301 	bic.w	r3, r3, #1
 800d6ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	3308      	adds	r3, #8
 800d6b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6b6:	61fa      	str	r2, [r7, #28]
 800d6b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ba:	69b9      	ldr	r1, [r7, #24]
 800d6bc:	69fa      	ldr	r2, [r7, #28]
 800d6be:	e841 2300 	strex	r3, r2, [r1]
 800d6c2:	617b      	str	r3, [r7, #20]
   return(result);
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d1e5      	bne.n	800d696 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2220      	movs	r2, #32
 800d6ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6da:	2303      	movs	r3, #3
 800d6dc:	e012      	b.n	800d704 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2220      	movs	r2, #32
 800d6e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2220      	movs	r2, #32
 800d6ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d702:	2300      	movs	r3, #0
}
 800d704:	4618      	mov	r0, r3
 800d706:	3758      	adds	r7, #88	; 0x58
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	603b      	str	r3, [r7, #0]
 800d718:	4613      	mov	r3, r2
 800d71a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d71c:	e049      	b.n	800d7b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d724:	d045      	beq.n	800d7b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d726:	f7f5 fe39 	bl	800339c <HAL_GetTick>
 800d72a:	4602      	mov	r2, r0
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	1ad3      	subs	r3, r2, r3
 800d730:	69ba      	ldr	r2, [r7, #24]
 800d732:	429a      	cmp	r2, r3
 800d734:	d302      	bcc.n	800d73c <UART_WaitOnFlagUntilTimeout+0x30>
 800d736:	69bb      	ldr	r3, [r7, #24]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d101      	bne.n	800d740 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d73c:	2303      	movs	r3, #3
 800d73e:	e048      	b.n	800d7d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f003 0304 	and.w	r3, r3, #4
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d031      	beq.n	800d7b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	69db      	ldr	r3, [r3, #28]
 800d754:	f003 0308 	and.w	r3, r3, #8
 800d758:	2b08      	cmp	r3, #8
 800d75a:	d110      	bne.n	800d77e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2208      	movs	r2, #8
 800d762:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f000 f838 	bl	800d7da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2208      	movs	r2, #8
 800d76e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2200      	movs	r2, #0
 800d776:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800d77a:	2301      	movs	r3, #1
 800d77c:	e029      	b.n	800d7d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	69db      	ldr	r3, [r3, #28]
 800d784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d78c:	d111      	bne.n	800d7b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d796:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	f000 f81e 	bl	800d7da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2220      	movs	r2, #32
 800d7a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d7ae:	2303      	movs	r3, #3
 800d7b0:	e00f      	b.n	800d7d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	69da      	ldr	r2, [r3, #28]
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	4013      	ands	r3, r2
 800d7bc:	68ba      	ldr	r2, [r7, #8]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	bf0c      	ite	eq
 800d7c2:	2301      	moveq	r3, #1
 800d7c4:	2300      	movne	r3, #0
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	79fb      	ldrb	r3, [r7, #7]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d0a6      	beq.n	800d71e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d7d0:	2300      	movs	r3, #0
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3710      	adds	r7, #16
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}

0800d7da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d7da:	b480      	push	{r7}
 800d7dc:	b095      	sub	sp, #84	; 0x54
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7ea:	e853 3f00 	ldrex	r3, [r3]
 800d7ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d7f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d800:	643b      	str	r3, [r7, #64]	; 0x40
 800d802:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d804:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d808:	e841 2300 	strex	r3, r2, [r1]
 800d80c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d810:	2b00      	cmp	r3, #0
 800d812:	d1e6      	bne.n	800d7e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	3308      	adds	r3, #8
 800d81a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81c:	6a3b      	ldr	r3, [r7, #32]
 800d81e:	e853 3f00 	ldrex	r3, [r3]
 800d822:	61fb      	str	r3, [r7, #28]
   return(result);
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d82a:	f023 0301 	bic.w	r3, r3, #1
 800d82e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	3308      	adds	r3, #8
 800d836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d838:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d83a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d83c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d83e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d840:	e841 2300 	strex	r3, r2, [r1]
 800d844:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d1e3      	bne.n	800d814 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d850:	2b01      	cmp	r3, #1
 800d852:	d118      	bne.n	800d886 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	e853 3f00 	ldrex	r3, [r3]
 800d860:	60bb      	str	r3, [r7, #8]
   return(result);
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	f023 0310 	bic.w	r3, r3, #16
 800d868:	647b      	str	r3, [r7, #68]	; 0x44
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	461a      	mov	r2, r3
 800d870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d872:	61bb      	str	r3, [r7, #24]
 800d874:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d876:	6979      	ldr	r1, [r7, #20]
 800d878:	69ba      	ldr	r2, [r7, #24]
 800d87a:	e841 2300 	strex	r3, r2, [r1]
 800d87e:	613b      	str	r3, [r7, #16]
   return(result);
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d1e6      	bne.n	800d854 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2220      	movs	r2, #32
 800d88a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2200      	movs	r2, #0
 800d892:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2200      	movs	r2, #0
 800d898:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d89a:	bf00      	nop
 800d89c:	3754      	adds	r7, #84	; 0x54
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr

0800d8a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d8a6:	b480      	push	{r7}
 800d8a8:	b085      	sub	sp, #20
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	d101      	bne.n	800d8bc <HAL_UARTEx_DisableFifoMode+0x16>
 800d8b8:	2302      	movs	r3, #2
 800d8ba:	e027      	b.n	800d90c <HAL_UARTEx_DisableFifoMode+0x66>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2224      	movs	r2, #36	; 0x24
 800d8c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f022 0201 	bic.w	r2, r2, #1
 800d8e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d8ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2220      	movs	r2, #32
 800d8fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2200      	movs	r2, #0
 800d906:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d90a:	2300      	movs	r3, #0
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3714      	adds	r7, #20
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr

0800d918 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d101      	bne.n	800d930 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d92c:	2302      	movs	r3, #2
 800d92e:	e02d      	b.n	800d98c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2201      	movs	r2, #1
 800d934:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2224      	movs	r2, #36	; 0x24
 800d93c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f022 0201 	bic.w	r2, r2, #1
 800d956:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	689b      	ldr	r3, [r3, #8]
 800d95e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	683a      	ldr	r2, [r7, #0]
 800d968:	430a      	orrs	r2, r1
 800d96a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 f84f 	bl	800da10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	68fa      	ldr	r2, [r7, #12]
 800d978:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2220      	movs	r2, #32
 800d97e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2200      	movs	r2, #0
 800d986:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d98a:	2300      	movs	r3, #0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3710      	adds	r7, #16
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d101      	bne.n	800d9ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d9a8:	2302      	movs	r3, #2
 800d9aa:	e02d      	b.n	800da08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2224      	movs	r2, #36	; 0x24
 800d9b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	681a      	ldr	r2, [r3, #0]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f022 0201 	bic.w	r2, r2, #1
 800d9d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	683a      	ldr	r2, [r7, #0]
 800d9e4:	430a      	orrs	r2, r1
 800d9e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 f811 	bl	800da10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	68fa      	ldr	r2, [r7, #12]
 800d9f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2220      	movs	r2, #32
 800d9fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800da06:	2300      	movs	r3, #0
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3710      	adds	r7, #16
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800da10:	b480      	push	{r7}
 800da12:	b085      	sub	sp, #20
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d108      	bne.n	800da32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2201      	movs	r2, #1
 800da24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800da30:	e031      	b.n	800da96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800da32:	2308      	movs	r3, #8
 800da34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800da36:	2308      	movs	r3, #8
 800da38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	689b      	ldr	r3, [r3, #8]
 800da40:	0e5b      	lsrs	r3, r3, #25
 800da42:	b2db      	uxtb	r3, r3
 800da44:	f003 0307 	and.w	r3, r3, #7
 800da48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	0f5b      	lsrs	r3, r3, #29
 800da52:	b2db      	uxtb	r3, r3
 800da54:	f003 0307 	and.w	r3, r3, #7
 800da58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da5a:	7bbb      	ldrb	r3, [r7, #14]
 800da5c:	7b3a      	ldrb	r2, [r7, #12]
 800da5e:	4911      	ldr	r1, [pc, #68]	; (800daa4 <UARTEx_SetNbDataToProcess+0x94>)
 800da60:	5c8a      	ldrb	r2, [r1, r2]
 800da62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800da66:	7b3a      	ldrb	r2, [r7, #12]
 800da68:	490f      	ldr	r1, [pc, #60]	; (800daa8 <UARTEx_SetNbDataToProcess+0x98>)
 800da6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800da70:	b29a      	uxth	r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da78:	7bfb      	ldrb	r3, [r7, #15]
 800da7a:	7b7a      	ldrb	r2, [r7, #13]
 800da7c:	4909      	ldr	r1, [pc, #36]	; (800daa4 <UARTEx_SetNbDataToProcess+0x94>)
 800da7e:	5c8a      	ldrb	r2, [r1, r2]
 800da80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800da84:	7b7a      	ldrb	r2, [r7, #13]
 800da86:	4908      	ldr	r1, [pc, #32]	; (800daa8 <UARTEx_SetNbDataToProcess+0x98>)
 800da88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da8a:	fb93 f3f2 	sdiv	r3, r3, r2
 800da8e:	b29a      	uxth	r2, r3
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800da96:	bf00      	nop
 800da98:	3714      	adds	r7, #20
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop
 800daa4:	0800dc4c 	.word	0x0800dc4c
 800daa8:	0800dc54 	.word	0x0800dc54

0800daac <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800daac:	b480      	push	{r7}
 800daae:	b083      	sub	sp, #12
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f043 0202 	orr.w	r2, r3, #2
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	685a      	ldr	r2, [r3, #4]
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	021b      	lsls	r3, r3, #8
 800dacc:	431a      	orrs	r2, r3
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f023 0202 	bic.w	r2, r3, #2
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	601a      	str	r2, [r3, #0]
}
 800dade:	bf00      	nop
 800dae0:	370c      	adds	r7, #12
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr

0800daea <memset>:
 800daea:	4402      	add	r2, r0
 800daec:	4603      	mov	r3, r0
 800daee:	4293      	cmp	r3, r2
 800daf0:	d100      	bne.n	800daf4 <memset+0xa>
 800daf2:	4770      	bx	lr
 800daf4:	f803 1b01 	strb.w	r1, [r3], #1
 800daf8:	e7f9      	b.n	800daee <memset+0x4>
	...

0800dafc <__libc_init_array>:
 800dafc:	b570      	push	{r4, r5, r6, lr}
 800dafe:	4d0d      	ldr	r5, [pc, #52]	; (800db34 <__libc_init_array+0x38>)
 800db00:	2600      	movs	r6, #0
 800db02:	4c0d      	ldr	r4, [pc, #52]	; (800db38 <__libc_init_array+0x3c>)
 800db04:	1b64      	subs	r4, r4, r5
 800db06:	10a4      	asrs	r4, r4, #2
 800db08:	42a6      	cmp	r6, r4
 800db0a:	d109      	bne.n	800db20 <__libc_init_array+0x24>
 800db0c:	4d0b      	ldr	r5, [pc, #44]	; (800db3c <__libc_init_array+0x40>)
 800db0e:	2600      	movs	r6, #0
 800db10:	4c0b      	ldr	r4, [pc, #44]	; (800db40 <__libc_init_array+0x44>)
 800db12:	f000 f817 	bl	800db44 <_init>
 800db16:	1b64      	subs	r4, r4, r5
 800db18:	10a4      	asrs	r4, r4, #2
 800db1a:	42a6      	cmp	r6, r4
 800db1c:	d105      	bne.n	800db2a <__libc_init_array+0x2e>
 800db1e:	bd70      	pop	{r4, r5, r6, pc}
 800db20:	f855 3b04 	ldr.w	r3, [r5], #4
 800db24:	3601      	adds	r6, #1
 800db26:	4798      	blx	r3
 800db28:	e7ee      	b.n	800db08 <__libc_init_array+0xc>
 800db2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800db2e:	3601      	adds	r6, #1
 800db30:	4798      	blx	r3
 800db32:	e7f2      	b.n	800db1a <__libc_init_array+0x1e>
 800db34:	0800dc64 	.word	0x0800dc64
 800db38:	0800dc64 	.word	0x0800dc64
 800db3c:	0800dc64 	.word	0x0800dc64
 800db40:	0800dc68 	.word	0x0800dc68

0800db44 <_init>:
 800db44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db46:	bf00      	nop
 800db48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db4a:	bc08      	pop	{r3}
 800db4c:	469e      	mov	lr, r3
 800db4e:	4770      	bx	lr

0800db50 <_fini>:
 800db50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db52:	bf00      	nop
 800db54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db56:	bc08      	pop	{r3}
 800db58:	469e      	mov	lr, r3
 800db5a:	4770      	bx	lr
