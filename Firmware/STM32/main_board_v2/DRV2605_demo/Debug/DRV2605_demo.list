
DRV2605_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8f4  0800026c  0800026c  0000126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800db60  0800db60  0000eb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dc60  0800dc60  0000ec60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dc68  0800dc68  0000ec68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dc6c  0800dc6c  0000ec6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000d09  20000000  0800dc70  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000840  20000d0c  0800e979  0000fd0c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000154c  0800e979  0001054c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000fd09  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003109e  00000000  00000000  0000fd3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000052e7  00000000  00000000  00040ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002878  00000000  00000000  000460c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001f87  00000000  00000000  00048940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044f23  00000000  00000000  0004a8c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003608b  00000000  00000000  0008f7ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a21f6  00000000  00000000  000c5875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00267a6b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b0a4  00000000  00000000  00267ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008d  00000000  00000000  00272b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800026c <__do_global_dtors_aux>:
 800026c:	b510      	push	{r4, lr}
 800026e:	4c05      	ldr	r4, [pc, #20]	@ (8000284 <__do_global_dtors_aux+0x18>)
 8000270:	7823      	ldrb	r3, [r4, #0]
 8000272:	b933      	cbnz	r3, 8000282 <__do_global_dtors_aux+0x16>
 8000274:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <__do_global_dtors_aux+0x1c>)
 8000276:	b113      	cbz	r3, 800027e <__do_global_dtors_aux+0x12>
 8000278:	4804      	ldr	r0, [pc, #16]	@ (800028c <__do_global_dtors_aux+0x20>)
 800027a:	f3af 8000 	nop.w
 800027e:	2301      	movs	r3, #1
 8000280:	7023      	strb	r3, [r4, #0]
 8000282:	bd10      	pop	{r4, pc}
 8000284:	20000d0c 	.word	0x20000d0c
 8000288:	00000000 	.word	0x00000000
 800028c:	0800db48 	.word	0x0800db48

08000290 <frame_dummy>:
 8000290:	b508      	push	{r3, lr}
 8000292:	4b03      	ldr	r3, [pc, #12]	@ (80002a0 <frame_dummy+0x10>)
 8000294:	b11b      	cbz	r3, 800029e <frame_dummy+0xe>
 8000296:	4903      	ldr	r1, [pc, #12]	@ (80002a4 <frame_dummy+0x14>)
 8000298:	4803      	ldr	r0, [pc, #12]	@ (80002a8 <frame_dummy+0x18>)
 800029a:	f3af 8000 	nop.w
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	00000000 	.word	0x00000000
 80002a4:	20000d10 	.word	0x20000d10
 80002a8:	0800db48 	.word	0x0800db48

080002ac <__aeabi_uldivmod>:
 80002ac:	b953      	cbnz	r3, 80002c4 <__aeabi_uldivmod+0x18>
 80002ae:	b94a      	cbnz	r2, 80002c4 <__aeabi_uldivmod+0x18>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	bf08      	it	eq
 80002b4:	2800      	cmpeq	r0, #0
 80002b6:	bf1c      	itt	ne
 80002b8:	f04f 31ff 	movne.w	r1, #4294967295
 80002bc:	f04f 30ff 	movne.w	r0, #4294967295
 80002c0:	f000 b97e 	b.w	80005c0 <__aeabi_idiv0>
 80002c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002cc:	f000 f806 	bl	80002dc <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4770      	bx	lr

080002dc <__udivmoddi4>:
 80002dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002e2:	460c      	mov	r4, r1
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d14d      	bne.n	8000384 <__udivmoddi4+0xa8>
 80002e8:	428a      	cmp	r2, r1
 80002ea:	460f      	mov	r7, r1
 80002ec:	4684      	mov	ip, r0
 80002ee:	4696      	mov	lr, r2
 80002f0:	fab2 f382 	clz	r3, r2
 80002f4:	d960      	bls.n	80003b8 <__udivmoddi4+0xdc>
 80002f6:	b14b      	cbz	r3, 800030c <__udivmoddi4+0x30>
 80002f8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002fc:	f1c3 0220 	rsb	r2, r3, #32
 8000300:	409f      	lsls	r7, r3
 8000302:	fa00 fc03 	lsl.w	ip, r0, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000310:	fa1f f48e 	uxth.w	r4, lr
 8000314:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000318:	fbb7 f1f6 	udiv	r1, r7, r6
 800031c:	fb06 7711 	mls	r7, r6, r1, r7
 8000320:	fb01 f004 	mul.w	r0, r1, r4
 8000324:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000328:	4290      	cmp	r0, r2
 800032a:	d908      	bls.n	800033e <__udivmoddi4+0x62>
 800032c:	eb1e 0202 	adds.w	r2, lr, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x60>
 8000336:	4290      	cmp	r0, r2
 8000338:	f200 812d 	bhi.w	8000596 <__udivmoddi4+0x2ba>
 800033c:	4639      	mov	r1, r7
 800033e:	1a12      	subs	r2, r2, r0
 8000340:	fa1f fc8c 	uxth.w	ip, ip
 8000344:	fbb2 f0f6 	udiv	r0, r2, r6
 8000348:	fb06 2210 	mls	r2, r6, r0, r2
 800034c:	fb00 f404 	mul.w	r4, r0, r4
 8000350:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000354:	4564      	cmp	r4, ip
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x8e>
 8000358:	eb1e 0c0c 	adds.w	ip, lr, ip
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x8c>
 8000362:	4564      	cmp	r4, ip
 8000364:	f200 811a 	bhi.w	800059c <__udivmoddi4+0x2c0>
 8000368:	4610      	mov	r0, r2
 800036a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800036e:	ebac 0c04 	sub.w	ip, ip, r4
 8000372:	2100      	movs	r1, #0
 8000374:	b125      	cbz	r5, 8000380 <__udivmoddi4+0xa4>
 8000376:	fa2c f303 	lsr.w	r3, ip, r3
 800037a:	2200      	movs	r2, #0
 800037c:	e9c5 3200 	strd	r3, r2, [r5]
 8000380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d905      	bls.n	8000394 <__udivmoddi4+0xb8>
 8000388:	b10d      	cbz	r5, 800038e <__udivmoddi4+0xb2>
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	2100      	movs	r1, #0
 8000390:	4608      	mov	r0, r1
 8000392:	e7f5      	b.n	8000380 <__udivmoddi4+0xa4>
 8000394:	fab3 f183 	clz	r1, r3
 8000398:	2900      	cmp	r1, #0
 800039a:	d14d      	bne.n	8000438 <__udivmoddi4+0x15c>
 800039c:	42a3      	cmp	r3, r4
 800039e:	f0c0 80f2 	bcc.w	8000586 <__udivmoddi4+0x2aa>
 80003a2:	4290      	cmp	r0, r2
 80003a4:	f080 80ef 	bcs.w	8000586 <__udivmoddi4+0x2aa>
 80003a8:	4606      	mov	r6, r0
 80003aa:	4623      	mov	r3, r4
 80003ac:	4608      	mov	r0, r1
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e6      	beq.n	8000380 <__udivmoddi4+0xa4>
 80003b2:	e9c5 6300 	strd	r6, r3, [r5]
 80003b6:	e7e3      	b.n	8000380 <__udivmoddi4+0xa4>
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	f040 80a2 	bne.w	8000502 <__udivmoddi4+0x226>
 80003be:	1a8a      	subs	r2, r1, r2
 80003c0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003c4:	fa1f f68e 	uxth.w	r6, lr
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ce:	fb07 2014 	mls	r0, r7, r4, r2
 80003d2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb06 f004 	mul.w	r0, r6, r4
 80003de:	4290      	cmp	r0, r2
 80003e0:	d90f      	bls.n	8000402 <__udivmoddi4+0x126>
 80003e2:	eb1e 0202 	adds.w	r2, lr, r2
 80003e6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	f04f 0901 	movcs.w	r9, #1
 80003f0:	f04f 0900 	movcc.w	r9, #0
 80003f4:	4290      	cmp	r0, r2
 80003f6:	d903      	bls.n	8000400 <__udivmoddi4+0x124>
 80003f8:	f1b9 0f00 	cmp.w	r9, #0
 80003fc:	f000 80c8 	beq.w	8000590 <__udivmoddi4+0x2b4>
 8000400:	4644      	mov	r4, r8
 8000402:	1a12      	subs	r2, r2, r0
 8000404:	fa1f fc8c 	uxth.w	ip, ip
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	fb00 f606 	mul.w	r6, r0, r6
 8000414:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000418:	4566      	cmp	r6, ip
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x152>
 800041c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x150>
 8000426:	4566      	cmp	r6, ip
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c6>
 800042c:	4610      	mov	r0, r2
 800042e:	ebac 0c06 	sub.w	ip, ip, r6
 8000432:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000436:	e79d      	b.n	8000374 <__udivmoddi4+0x98>
 8000438:	f1c1 0620 	rsb	r6, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	fa20 fc06 	lsr.w	ip, r0, r6
 800044a:	40f4      	lsrs	r4, r6
 800044c:	408a      	lsls	r2, r1
 800044e:	431f      	orrs	r7, r3
 8000450:	ea4e 030c 	orr.w	r3, lr, ip
 8000454:	fa00 fe01 	lsl.w	lr, r0, r1
 8000458:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800045c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000460:	fa1f fc87 	uxth.w	ip, r7
 8000464:	fbb4 f0f8 	udiv	r0, r4, r8
 8000468:	fb08 4410 	mls	r4, r8, r0, r4
 800046c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000470:	fb00 f90c 	mul.w	r9, r0, ip
 8000474:	45a1      	cmp	r9, r4
 8000476:	d90e      	bls.n	8000496 <__udivmoddi4+0x1ba>
 8000478:	193c      	adds	r4, r7, r4
 800047a:	f100 3aff 	add.w	sl, r0, #4294967295
 800047e:	bf2c      	ite	cs
 8000480:	f04f 0b01 	movcs.w	fp, #1
 8000484:	f04f 0b00 	movcc.w	fp, #0
 8000488:	45a1      	cmp	r9, r4
 800048a:	d903      	bls.n	8000494 <__udivmoddi4+0x1b8>
 800048c:	f1bb 0f00 	cmp.w	fp, #0
 8000490:	f000 8093 	beq.w	80005ba <__udivmoddi4+0x2de>
 8000494:	4650      	mov	r0, sl
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f8 	udiv	r3, r4, r8
 80004a2:	fb08 4413 	mls	r4, r8, r3, r4
 80004a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004aa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d906      	bls.n	80004c0 <__udivmoddi4+0x1e4>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x1e2>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d87a      	bhi.n	80005b4 <__udivmoddi4+0x2d8>
 80004be:	4643      	mov	r3, r8
 80004c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c4:	eba4 040c 	sub.w	r4, r4, ip
 80004c8:	fba0 9802 	umull	r9, r8, r0, r2
 80004cc:	4544      	cmp	r4, r8
 80004ce:	46cc      	mov	ip, r9
 80004d0:	4643      	mov	r3, r8
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x1fe>
 80004d4:	d106      	bne.n	80004e4 <__udivmoddi4+0x208>
 80004d6:	45ce      	cmp	lr, r9
 80004d8:	d204      	bcs.n	80004e4 <__udivmoddi4+0x208>
 80004da:	3801      	subs	r0, #1
 80004dc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e0:	eb68 0307 	sbc.w	r3, r8, r7
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x222>
 80004e6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ea:	eb64 0403 	sbc.w	r4, r4, r3
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	40cc      	lsrs	r4, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e73e      	b.n	8000380 <__udivmoddi4+0xa4>
 8000502:	fa02 fe03 	lsl.w	lr, r2, r3
 8000506:	f1c3 0120 	rsb	r1, r3, #32
 800050a:	fa04 f203 	lsl.w	r2, r4, r3
 800050e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000512:	40cc      	lsrs	r4, r1
 8000514:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000518:	fa20 f101 	lsr.w	r1, r0, r1
 800051c:	fa1f f68e 	uxth.w	r6, lr
 8000520:	fbb4 f0f7 	udiv	r0, r4, r7
 8000524:	430a      	orrs	r2, r1
 8000526:	fb07 4410 	mls	r4, r7, r0, r4
 800052a:	0c11      	lsrs	r1, r2, #16
 800052c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000530:	fb00 f406 	mul.w	r4, r0, r6
 8000534:	428c      	cmp	r4, r1
 8000536:	d90e      	bls.n	8000556 <__udivmoddi4+0x27a>
 8000538:	eb1e 0101 	adds.w	r1, lr, r1
 800053c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0901 	movcs.w	r9, #1
 8000546:	f04f 0900 	movcc.w	r9, #0
 800054a:	428c      	cmp	r4, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x278>
 800054e:	f1b9 0f00 	cmp.w	r9, #0
 8000552:	d02c      	beq.n	80005ae <__udivmoddi4+0x2d2>
 8000554:	4640      	mov	r0, r8
 8000556:	1b09      	subs	r1, r1, r4
 8000558:	b292      	uxth	r2, r2
 800055a:	fbb1 f4f7 	udiv	r4, r1, r7
 800055e:	fb07 1114 	mls	r1, r7, r4, r1
 8000562:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000566:	fb04 f106 	mul.w	r1, r4, r6
 800056a:	4291      	cmp	r1, r2
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x2a2>
 800056e:	eb1e 0202 	adds.w	r2, lr, r2
 8000572:	f104 38ff 	add.w	r8, r4, #4294967295
 8000576:	d201      	bcs.n	800057c <__udivmoddi4+0x2a0>
 8000578:	4291      	cmp	r1, r2
 800057a:	d815      	bhi.n	80005a8 <__udivmoddi4+0x2cc>
 800057c:	4644      	mov	r4, r8
 800057e:	1a52      	subs	r2, r2, r1
 8000580:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000584:	e721      	b.n	80003ca <__udivmoddi4+0xee>
 8000586:	1a86      	subs	r6, r0, r2
 8000588:	eb64 0303 	sbc.w	r3, r4, r3
 800058c:	2001      	movs	r0, #1
 800058e:	e70e      	b.n	80003ae <__udivmoddi4+0xd2>
 8000590:	3c02      	subs	r4, #2
 8000592:	4472      	add	r2, lr
 8000594:	e735      	b.n	8000402 <__udivmoddi4+0x126>
 8000596:	3902      	subs	r1, #2
 8000598:	4472      	add	r2, lr
 800059a:	e6d0      	b.n	800033e <__udivmoddi4+0x62>
 800059c:	44f4      	add	ip, lr
 800059e:	3802      	subs	r0, #2
 80005a0:	e6e3      	b.n	800036a <__udivmoddi4+0x8e>
 80005a2:	44f4      	add	ip, lr
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x152>
 80005a8:	3c02      	subs	r4, #2
 80005aa:	4472      	add	r2, lr
 80005ac:	e7e7      	b.n	800057e <__udivmoddi4+0x2a2>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4471      	add	r1, lr
 80005b2:	e7d0      	b.n	8000556 <__udivmoddi4+0x27a>
 80005b4:	3b02      	subs	r3, #2
 80005b6:	443c      	add	r4, r7
 80005b8:	e782      	b.n	80004c0 <__udivmoddi4+0x1e4>
 80005ba:	3802      	subs	r0, #2
 80005bc:	443c      	add	r4, r7
 80005be:	e76a      	b.n	8000496 <__udivmoddi4+0x1ba>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <DRV2605_Init>:

#ifndef min
#define min(a,b) ((a)<(b)?(a):(b))
#endif

DRV2605_StatusTypeDef DRV2605_Init(DRV2605_HandleTypeDef *dev, I2C_HandleTypeDef *i2cHandle, GPIO_TypeDef *EN_Port, uint16_t EN_Pin){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	807b      	strh	r3, [r7, #2]

	DRV2605_StatusTypeDef status = DRV2605_OK;
 80005d2:	2300      	movs	r3, #0
 80005d4:	75fb      	strb	r3, [r7, #23]
	uint8_t regData;

	/* Assign I2C handle */
	dev->i2cHandle = i2cHandle;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	68ba      	ldr	r2, [r7, #8]
 80005da:	601a      	str	r2, [r3, #0]

	/* Assign EN pin */
	dev->EN_Port = EN_Port;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	605a      	str	r2, [r3, #4]
	dev->EN_Pin = EN_Pin;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	887a      	ldrh	r2, [r7, #2]
 80005e6:	811a      	strh	r2, [r3, #8]

	/* Set default values */
	dev->sequencePointer = 1;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	2201      	movs	r2, #1
 80005ec:	759a      	strb	r2, [r3, #22]

	/* Take the device out of standby */
	status = DRV2605_Enable(dev);
 80005ee:	68f8      	ldr	r0, [r7, #12]
 80005f0:	f000 f866 	bl	80006c0 <DRV2605_Enable>
 80005f4:	4603      	mov	r3, r0
 80005f6:	75fb      	strb	r3, [r7, #23]
	if (status != DRV2605_OK){
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <DRV2605_Init+0x3e>
		return status;
 80005fe:	7dfb      	ldrb	r3, [r7, #23]
 8000600:	e05a      	b.n	80006b8 <DRV2605_Init+0xf4>
	}

	/* Update the device struct */
	dev->enabled = true;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	2201      	movs	r2, #1
 8000606:	729a      	strb	r2, [r3, #10]

	/* Read the device ID */
	status = DRV2605_ReadRegister(dev, DRV2605_REG_STATUS, &regData);
 8000608:	f107 0316 	add.w	r3, r7, #22
 800060c:	461a      	mov	r2, r3
 800060e:	2100      	movs	r1, #0
 8000610:	68f8      	ldr	r0, [r7, #12]
 8000612:	f000 f981 	bl	8000918 <DRV2605_ReadRegister>
 8000616:	4603      	mov	r3, r0
 8000618:	75fb      	strb	r3, [r7, #23]
	if (status != DRV2605_OK){
 800061a:	7dfb      	ldrb	r3, [r7, #23]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <DRV2605_Init+0x60>
		return status;
 8000620:	7dfb      	ldrb	r3, [r7, #23]
 8000622:	e049      	b.n	80006b8 <DRV2605_Init+0xf4>
	}

	/* Check device ID for wrong model */
	if (((regData & DRV2605_BITS_DEVICE_ID) == (DRV2604_ID << 5)) || ((regData & DRV2605_BITS_DEVICE_ID) == (DRV2604L_ID << 5))){
 8000624:	7dbb      	ldrb	r3, [r7, #22]
 8000626:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800062a:	2b80      	cmp	r3, #128	@ 0x80
 800062c:	d004      	beq.n	8000638 <DRV2605_Init+0x74>
 800062e:	7dbb      	ldrb	r3, [r7, #22]
 8000630:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000634:	2bc0      	cmp	r3, #192	@ 0xc0
 8000636:	d103      	bne.n	8000640 <DRV2605_Init+0x7c>
		status = DRV2605_ERROR_UNSUPPORTED_MODEL;
 8000638:	2305      	movs	r3, #5
 800063a:	75fb      	strb	r3, [r7, #23]
		return status;
 800063c:	7dfb      	ldrb	r3, [r7, #23]
 800063e:	e03b      	b.n	80006b8 <DRV2605_Init+0xf4>
	}

	/* Check device ID is valid */
	else if (((regData & DRV2605_BITS_DEVICE_ID) == (DRV2605_ID << 5)) != ((regData & DRV2605_BITS_DEVICE_ID) == (DRV2605L_ID << 5))){
 8000640:	7dbb      	ldrb	r3, [r7, #22]
 8000642:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000646:	2b60      	cmp	r3, #96	@ 0x60
 8000648:	bf0c      	ite	eq
 800064a:	2301      	moveq	r3, #1
 800064c:	2300      	movne	r3, #0
 800064e:	b2da      	uxtb	r2, r3
 8000650:	7dbb      	ldrb	r3, [r7, #22]
 8000652:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000656:	2be0      	cmp	r3, #224	@ 0xe0
 8000658:	bf0c      	ite	eq
 800065a:	2301      	moveq	r3, #1
 800065c:	2300      	movne	r3, #0
 800065e:	b2db      	uxtb	r3, r3
 8000660:	4053      	eors	r3, r2
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d003      	beq.n	8000670 <DRV2605_Init+0xac>
		status = DRV2605_ERROR_WRONG_ID;
 8000668:	2304      	movs	r3, #4
 800066a:	75fb      	strb	r3, [r7, #23]
		return status;
 800066c:	7dfb      	ldrb	r3, [r7, #23]
 800066e:	e023      	b.n	80006b8 <DRV2605_Init+0xf4>
	}

	/* Reset the device */
	status = DRV2605_Reset(dev);
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f000 f836 	bl	80006e2 <DRV2605_Reset>
 8000676:	4603      	mov	r3, r0
 8000678:	75fb      	strb	r3, [r7, #23]
	if (status != DRV2605_OK){
 800067a:	7dfb      	ldrb	r3, [r7, #23]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <DRV2605_Init+0xc0>
		return status;
 8000680:	7dfb      	ldrb	r3, [r7, #23]
 8000682:	e019      	b.n	80006b8 <DRV2605_Init+0xf4>
	}

	/* Update the device struct */
	dev->standby = true;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2201      	movs	r2, #1
 8000688:	72da      	strb	r2, [r3, #11]

	/* Set the device mode */
	status = DRV2605_SetMode(dev, DRV2605_DEFAULT_MODE);
 800068a:	2100      	movs	r1, #0
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	f000 f83e 	bl	800070e <DRV2605_SetMode>
 8000692:	4603      	mov	r3, r0
 8000694:	75fb      	strb	r3, [r7, #23]
	if (status != DRV2605_OK){
 8000696:	7dfb      	ldrb	r3, [r7, #23]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <DRV2605_Init+0xdc>
		return status;
 800069c:	7dfb      	ldrb	r3, [r7, #23]
 800069e:	e00b      	b.n	80006b8 <DRV2605_Init+0xf4>
	}

	/* Set the device library */
	status = DRV2605_SetLibrary(dev, DRV2605_DEFAULT_LIBRARY);
 80006a0:	2101      	movs	r1, #1
 80006a2:	68f8      	ldr	r0, [r7, #12]
 80006a4:	f000 f86a 	bl	800077c <DRV2605_SetLibrary>
 80006a8:	4603      	mov	r3, r0
 80006aa:	75fb      	strb	r3, [r7, #23]
	if (status != DRV2605_OK){
 80006ac:	7dfb      	ldrb	r3, [r7, #23]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <DRV2605_Init+0xf2>
		return status;
 80006b2:	7dfb      	ldrb	r3, [r7, #23]
 80006b4:	e000      	b.n	80006b8 <DRV2605_Init+0xf4>
	}

	return status;
 80006b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <DRV2605_Enable>:

DRV2605_StatusTypeDef DRV2605_Enable(DRV2605_HandleTypeDef *dev){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(dev->EN_Port, dev->EN_Pin, SET);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6858      	ldr	r0, [r3, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	891b      	ldrh	r3, [r3, #8]
 80006d0:	2201      	movs	r2, #1
 80006d2:	4619      	mov	r1, r3
 80006d4:	f004 fcf6 	bl	80050c4 <HAL_GPIO_WritePin>

	return DRV2605_OK;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <DRV2605_Reset>:
	HAL_GPIO_WritePin(dev->EN_Port, dev->EN_Pin, RESET);

	return DRV2605_OK;
}

DRV2605_StatusTypeDef DRV2605_Reset(DRV2605_HandleTypeDef *dev){
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b084      	sub	sp, #16
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]

	DRV2605_StatusTypeDef status = DRV2605_OK;
 80006ea:	2300      	movs	r3, #0
 80006ec:	73fb      	strb	r3, [r7, #15]
	uint8_t regData = DRV2605_BIT_RESET;
 80006ee:	2380      	movs	r3, #128	@ 0x80
 80006f0:	73bb      	strb	r3, [r7, #14]

	/* Write the "DRV2605_REG_MODE" register */
	status = DRV2605_WriteRegister(dev, DRV2605_REG_MODE, &regData);
 80006f2:	f107 030e 	add.w	r3, r7, #14
 80006f6:	461a      	mov	r2, r3
 80006f8:	2101      	movs	r1, #1
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 f927 	bl	800094e <DRV2605_WriteRegister>
 8000700:	4603      	mov	r3, r0
 8000702:	73fb      	strb	r3, [r7, #15]

	return status;
 8000704:	7bfb      	ldrb	r3, [r7, #15]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <DRV2605_SetMode>:
	/* Update the device struct */
	dev->standby = false;
	return status;
}

DRV2605_StatusTypeDef DRV2605_SetMode(DRV2605_HandleTypeDef *dev, DRV2605_Mode mode){
 800070e:	b580      	push	{r7, lr}
 8000710:	b084      	sub	sp, #16
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
 8000716:	460b      	mov	r3, r1
 8000718:	70fb      	strb	r3, [r7, #3]

	DRV2605_StatusTypeDef status = DRV2605_OK;
 800071a:	2300      	movs	r3, #0
 800071c:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "DRV2605_REG_MODE" register */
	status = DRV2605_ReadRegister(dev, DRV2605_REG_MODE, &regData);
 800071e:	f107 030e 	add.w	r3, r7, #14
 8000722:	461a      	mov	r2, r3
 8000724:	2101      	movs	r1, #1
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f8f6 	bl	8000918 <DRV2605_ReadRegister>
 800072c:	4603      	mov	r3, r0
 800072e:	73fb      	strb	r3, [r7, #15]
	if (status != DRV2605_OK){
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <DRV2605_SetMode+0x2c>
		return status;
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	e01c      	b.n	8000774 <DRV2605_SetMode+0x66>
	}

	/* Set the "MODE" bits */
	regData = (regData & ~DRV2605_BITS_MODE) | mode;
 800073a:	7bbb      	ldrb	r3, [r7, #14]
 800073c:	b25b      	sxtb	r3, r3
 800073e:	f023 0307 	bic.w	r3, r3, #7
 8000742:	b25a      	sxtb	r2, r3
 8000744:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000748:	4313      	orrs	r3, r2
 800074a:	b25b      	sxtb	r3, r3
 800074c:	b2db      	uxtb	r3, r3
 800074e:	73bb      	strb	r3, [r7, #14]

	/* Write the "DRV2605_REG_MODE" register */
	status = DRV2605_WriteRegister(dev, DRV2605_REG_MODE, &regData);
 8000750:	f107 030e 	add.w	r3, r7, #14
 8000754:	461a      	mov	r2, r3
 8000756:	2101      	movs	r1, #1
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 f8f8 	bl	800094e <DRV2605_WriteRegister>
 800075e:	4603      	mov	r3, r0
 8000760:	73fb      	strb	r3, [r7, #15]
	if (status != DRV2605_OK){
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <DRV2605_SetMode+0x5e>
		return status;
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	e003      	b.n	8000774 <DRV2605_SetMode+0x66>
	}

	/* Update the device struct */
	dev->mode = mode;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	78fa      	ldrb	r2, [r7, #3]
 8000770:	731a      	strb	r2, [r3, #12]
	return status;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <DRV2605_SetLibrary>:

DRV2605_StatusTypeDef DRV2605_SetLibrary(DRV2605_HandleTypeDef *dev, DRV2605_Library library){
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]

	DRV2605_StatusTypeDef status = DRV2605_OK;
 8000788:	2300      	movs	r3, #0
 800078a:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "DRV2605_REG_LIBRARY_SELECT" register */
	status = DRV2605_ReadRegister(dev, DRV2605_REG_LIBRARY_SELECT, &regData);
 800078c:	f107 030e 	add.w	r3, r7, #14
 8000790:	461a      	mov	r2, r3
 8000792:	2103      	movs	r1, #3
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f8bf 	bl	8000918 <DRV2605_ReadRegister>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
	if (status != DRV2605_OK){
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <DRV2605_SetLibrary+0x2c>
		return status;
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	e01c      	b.n	80007e2 <DRV2605_SetLibrary+0x66>
	}

	/* Set the "LIBRARY_SEL" bits */
	regData = (regData & ~DRV2605_BITS_LIBRARY_SEL) | library;
 80007a8:	7bbb      	ldrb	r3, [r7, #14]
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	f023 0307 	bic.w	r3, r3, #7
 80007b0:	b25a      	sxtb	r2, r3
 80007b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	b25b      	sxtb	r3, r3
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	73bb      	strb	r3, [r7, #14]

	/* Write the "DRV2605_REG_LIBRARY_SELECT" register */
	status = DRV2605_WriteRegister(dev, DRV2605_REG_LIBRARY_SELECT, &regData);
 80007be:	f107 030e 	add.w	r3, r7, #14
 80007c2:	461a      	mov	r2, r3
 80007c4:	2103      	movs	r1, #3
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f000 f8c1 	bl	800094e <DRV2605_WriteRegister>
 80007cc:	4603      	mov	r3, r0
 80007ce:	73fb      	strb	r3, [r7, #15]
	if (status != DRV2605_OK){
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <DRV2605_SetLibrary+0x5e>
		return status;
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	e003      	b.n	80007e2 <DRV2605_SetLibrary+0x66>
	}

	/* Update the device struct */
	dev->library = library;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	78fa      	ldrb	r2, [r7, #3]
 80007de:	735a      	strb	r2, [r3, #13]
	return status;
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <DRV2605_SequenceAddDelay>:
	status = DRV2605_SequenceWrite(dev);

	return status;
}

DRV2605_StatusTypeDef DRV2605_SequenceAddDelay(DRV2605_HandleTypeDef *dev, uint8_t delay){
 80007ea:	b480      	push	{r7}
 80007ec:	b085      	sub	sp, #20
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
 80007f2:	460b      	mov	r3, r1
 80007f4:	70fb      	strb	r3, [r7, #3]

	DRV2605_StatusTypeDef status = DRV2605_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]

	/* Check the sequence isn't too long */
	if (dev->sequencePointer >= DRV2605_MAX_SEQUENCE_LENGTH){
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7d9b      	ldrb	r3, [r3, #22]
 80007fe:	2b07      	cmp	r3, #7
 8000800:	d903      	bls.n	800080a <DRV2605_SequenceAddDelay+0x20>
		status = DRV2605_ERROR_SEQUENCE_TOO_LONG;
 8000802:	2305      	movs	r3, #5
 8000804:	73fb      	strb	r3, [r7, #15]
		return status;
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	e01b      	b.n	8000842 <DRV2605_SequenceAddDelay+0x58>
	}

	/* Update the device struct */
	dev->sequence[dev->sequencePointer] = delay | 0x80;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	7d9b      	ldrb	r3, [r3, #22]
 800080e:	4619      	mov	r1, r3
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000816:	b2da      	uxtb	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	440b      	add	r3, r1
 800081c:	739a      	strb	r2, [r3, #14]
	dev->sequencePointer++;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	7d9b      	ldrb	r3, [r3, #22]
 8000822:	3301      	adds	r3, #1
 8000824:	b2da      	uxtb	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	759a      	strb	r2, [r3, #22]

	/* Add the stop sequence command to the end of the sequence */
	if (dev->sequencePointer < DRV2605_MAX_SEQUENCE_LENGTH){
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	7d9b      	ldrb	r3, [r3, #22]
 800082e:	2b07      	cmp	r3, #7
 8000830:	d806      	bhi.n	8000840 <DRV2605_SequenceAddDelay+0x56>
		dev->sequence[dev->sequencePointer] = 0;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	7d9b      	ldrb	r3, [r3, #22]
 8000836:	461a      	mov	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4413      	add	r3, r2
 800083c:	2200      	movs	r2, #0
 800083e:	739a      	strb	r2, [r3, #14]
	}

	return status;
 8000840:	7bfb      	ldrb	r3, [r7, #15]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <DRV2605_SequenceAddWaveform>:

DRV2605_StatusTypeDef DRV2605_SequenceAddWaveform(DRV2605_HandleTypeDef *dev, uint8_t effect){
 800084e:	b480      	push	{r7}
 8000850:	b085      	sub	sp, #20
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	460b      	mov	r3, r1
 8000858:	70fb      	strb	r3, [r7, #3]

	DRV2605_StatusTypeDef status = DRV2605_OK;
 800085a:	2300      	movs	r3, #0
 800085c:	73fb      	strb	r3, [r7, #15]

	/* Check the sequence isn't too long */
	if (dev->sequencePointer >= DRV2605_MAX_SEQUENCE_LENGTH){
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	7d9b      	ldrb	r3, [r3, #22]
 8000862:	2b07      	cmp	r3, #7
 8000864:	d903      	bls.n	800086e <DRV2605_SequenceAddWaveform+0x20>
		status = DRV2605_ERROR_SEQUENCE_TOO_LONG;
 8000866:	2305      	movs	r3, #5
 8000868:	73fb      	strb	r3, [r7, #15]
		return status;
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	e01b      	b.n	80008a6 <DRV2605_SequenceAddWaveform+0x58>
	}

	/* Update the device struct */
	dev->sequence[dev->sequencePointer] = effect & 0x7F;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	7d9b      	ldrb	r3, [r3, #22]
 8000872:	4619      	mov	r1, r3
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800087a:	b2da      	uxtb	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	440b      	add	r3, r1
 8000880:	739a      	strb	r2, [r3, #14]
	dev->sequencePointer++;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	7d9b      	ldrb	r3, [r3, #22]
 8000886:	3301      	adds	r3, #1
 8000888:	b2da      	uxtb	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	759a      	strb	r2, [r3, #22]

	/* Add the stop sequence command to the end of the sequence */
	if (dev->sequencePointer < DRV2605_MAX_SEQUENCE_LENGTH){
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	7d9b      	ldrb	r3, [r3, #22]
 8000892:	2b07      	cmp	r3, #7
 8000894:	d806      	bhi.n	80008a4 <DRV2605_SequenceAddWaveform+0x56>
		dev->sequence[dev->sequencePointer] = 0;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	7d9b      	ldrb	r3, [r3, #22]
 800089a:	461a      	mov	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4413      	add	r3, r2
 80008a0:	2200      	movs	r2, #0
 80008a2:	739a      	strb	r2, [r3, #14]
	}

	return status;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <DRV2605_SequenceWrite>:

DRV2605_StatusTypeDef DRV2605_SequenceWrite(DRV2605_HandleTypeDef *dev){
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b084      	sub	sp, #16
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]

	DRV2605_StatusTypeDef status = DRV2605_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	73fb      	strb	r3, [r7, #15]

	/* Write sequence to device */
	for (uint8_t i = 0; i < min((dev->sequencePointer + 1), DRV2605_MAX_SEQUENCE_LENGTH); i++){
 80008be:	2300      	movs	r3, #0
 80008c0:	73bb      	strb	r3, [r7, #14]
 80008c2:	e015      	b.n	80008f0 <DRV2605_SequenceWrite+0x3e>
		status = DRV2605_WriteRegister(dev, DRV2605_REG_WAVEFORM_SEQUENCER_FIRST + i, &dev->sequence[i]);
 80008c4:	7bbb      	ldrb	r3, [r7, #14]
 80008c6:	3304      	adds	r3, #4
 80008c8:	b2d9      	uxtb	r1, r3
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	3308      	adds	r3, #8
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	3306      	adds	r3, #6
 80008d4:	461a      	mov	r2, r3
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f000 f839 	bl	800094e <DRV2605_WriteRegister>
 80008dc:	4603      	mov	r3, r0
 80008de:	73fb      	strb	r3, [r7, #15]
		if (status != DRV2605_OK){
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <DRV2605_SequenceWrite+0x38>
			return status;
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	e012      	b.n	8000910 <DRV2605_SequenceWrite+0x5e>
	for (uint8_t i = 0; i < min((dev->sequencePointer + 1), DRV2605_MAX_SEQUENCE_LENGTH); i++){
 80008ea:	7bbb      	ldrb	r3, [r7, #14]
 80008ec:	3301      	adds	r3, #1
 80008ee:	73bb      	strb	r3, [r7, #14]
 80008f0:	7bba      	ldrb	r2, [r7, #14]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	7d9b      	ldrb	r3, [r3, #22]
 80008f6:	2b06      	cmp	r3, #6
 80008f8:	d803      	bhi.n	8000902 <DRV2605_SequenceWrite+0x50>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	7d9b      	ldrb	r3, [r3, #22]
 80008fe:	3301      	adds	r3, #1
 8000900:	e000      	b.n	8000904 <DRV2605_SequenceWrite+0x52>
 8000902:	2308      	movs	r3, #8
 8000904:	4293      	cmp	r3, r2
 8000906:	dcdd      	bgt.n	80008c4 <DRV2605_SequenceWrite+0x12>
		}
	}

	/* Update the device struct */
	dev->sequencePointer = 0;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	759a      	strb	r2, [r3, #22]

	return status;
 800090e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <DRV2605_ReadRegister>:
	/* TODO: Implement function */

	return status;
}

DRV2605_StatusTypeDef DRV2605_ReadRegister(DRV2605_HandleTypeDef *dev, uint8_t reg, uint8_t *data){
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af04      	add	r7, sp, #16
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	460b      	mov	r3, r1
 8000922:	607a      	str	r2, [r7, #4]
 8000924:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, DRV2605_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	6818      	ldr	r0, [r3, #0]
 800092a:	7afb      	ldrb	r3, [r7, #11]
 800092c:	b29a      	uxth	r2, r3
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	9302      	str	r3, [sp, #8]
 8000934:	2301      	movs	r3, #1
 8000936:	9301      	str	r3, [sp, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2301      	movs	r3, #1
 800093e:	21b4      	movs	r1, #180	@ 0xb4
 8000940:	f004 fdf4 	bl	800552c <HAL_I2C_Mem_Read>
 8000944:	4603      	mov	r3, r0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <DRV2605_WriteRegister>:

DRV2605_StatusTypeDef DRV2605_WriteRegister(DRV2605_HandleTypeDef *dev, uint8_t reg, uint8_t *data){
 800094e:	b580      	push	{r7, lr}
 8000950:	b088      	sub	sp, #32
 8000952:	af04      	add	r7, sp, #16
 8000954:	60f8      	str	r0, [r7, #12]
 8000956:	460b      	mov	r3, r1
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write(dev->i2cHandle, DRV2605_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	6818      	ldr	r0, [r3, #0]
 8000960:	7afb      	ldrb	r3, [r7, #11]
 8000962:	b29a      	uxth	r2, r3
 8000964:	f04f 33ff 	mov.w	r3, #4294967295
 8000968:	9302      	str	r3, [sp, #8]
 800096a:	2301      	movs	r3, #1
 800096c:	9301      	str	r3, [sp, #4]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	21b4      	movs	r1, #180	@ 0xb4
 8000976:	f004 fcc5 	bl	8005304 <HAL_I2C_Mem_Write>
 800097a:	4603      	mov	r3, r0
}
 800097c:	4618      	mov	r0, r3
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000988:	f002 fcc6 	bl	8003318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098c:	f000 f862 	bl	8000a54 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000990:	f000 f8ca 	bl	8000b28 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000994:	f001 f80c 	bl	80019b0 <MX_GPIO_Init>
  MX_DCACHE1_Init();
 8000998:	f000 f944 	bl	8000c24 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 800099c:	f000 f958 	bl	8000c50 <MX_DCACHE2_Init>
  MX_ICACHE_Init();
 80009a0:	f000 fc4a 	bl	8001238 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80009a4:	f000 fc7a 	bl	800129c <MX_LPUART1_UART_Init>
  MX_OCTOSPI1_Init();
 80009a8:	f000 fde0 	bl	800156c <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 80009ac:	f000 f918 	bl	8000be0 <MX_CRC_Init>
  MX_DMA2D_Init();
 80009b0:	f000 f964 	bl	8000c7c <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80009b4:	f000 f9a0 	bl	8000cf8 <MX_DSIHOST_DSI_Init>
  MX_GFXMMU_Init();
 80009b8:	f000 fa9a 	bl	8000ef0 <MX_GFXMMU_Init>
  MX_GPU2D_Init();
 80009bc:	f000 fae8 	bl	8000f90 <MX_GPU2D_Init>
  MX_LTDC_Init();
 80009c0:	f000 fd50 	bl	8001464 <MX_LTDC_Init>
  MX_RTC_Init();
 80009c4:	f000 ff04 	bl	80017d0 <MX_RTC_Init>
  MX_OCTOSPI2_Init();
 80009c8:	f000 fe6a 	bl	80016a0 <MX_OCTOSPI2_Init>
  MX_ADF1_Init();
 80009cc:	f000 f8ba 	bl	8000b44 <MX_ADF1_Init>
  MX_I2C1_Init();
 80009d0:	f000 faf2 	bl	8000fb8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80009d4:	f000 fb30 	bl	8001038 <MX_I2C2_Init>
  MX_I2C4_Init();
 80009d8:	f000 fbae 	bl	8001138 <MX_I2C4_Init>
  MX_I2C6_Init();
 80009dc:	f000 fbec 	bl	80011b8 <MX_I2C6_Init>
  MX_USART1_UART_Init();
 80009e0:	f000 fca8 	bl	8001334 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80009e4:	f000 fcf2 	bl	80013cc <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80009e8:	f000 ff74 	bl	80018d4 <MX_SPI1_Init>
  MX_I2C3_Init();
 80009ec:	f000 fb64 	bl	80010b8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  DRV2605_Init(&hdrv, &hi2c4, LRA_EN_GPIO_Port, LRA_EN_Pin);
 80009f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009f4:	4a14      	ldr	r2, [pc, #80]	@ (8000a48 <main+0xc4>)
 80009f6:	4915      	ldr	r1, [pc, #84]	@ (8000a4c <main+0xc8>)
 80009f8:	4815      	ldr	r0, [pc, #84]	@ (8000a50 <main+0xcc>)
 80009fa:	f7ff fde3 	bl	80005c4 <DRV2605_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  DRV2605_SequenceAddWaveform(&hdrv, 1);	/* Strong Click - 100% */
 80009fe:	2101      	movs	r1, #1
 8000a00:	4813      	ldr	r0, [pc, #76]	@ (8000a50 <main+0xcc>)
 8000a02:	f7ff ff24 	bl	800084e <DRV2605_SequenceAddWaveform>
  DRV2605_SequenceAddDelay(&hdrv, 50);		/* Wait for 500ms */
 8000a06:	2132      	movs	r1, #50	@ 0x32
 8000a08:	4811      	ldr	r0, [pc, #68]	@ (8000a50 <main+0xcc>)
 8000a0a:	f7ff feee 	bl	80007ea <DRV2605_SequenceAddDelay>
  DRV2605_SequenceAddWaveform(&hdrv, 1);	/* Strong Click - 100% */
 8000a0e:	2101      	movs	r1, #1
 8000a10:	480f      	ldr	r0, [pc, #60]	@ (8000a50 <main+0xcc>)
 8000a12:	f7ff ff1c 	bl	800084e <DRV2605_SequenceAddWaveform>
  DRV2605_SequenceAddDelay(&hdrv, 100);		/* Wait for 1000ms */
 8000a16:	2164      	movs	r1, #100	@ 0x64
 8000a18:	480d      	ldr	r0, [pc, #52]	@ (8000a50 <main+0xcc>)
 8000a1a:	f7ff fee6 	bl	80007ea <DRV2605_SequenceAddDelay>
  DRV2605_SequenceAddWaveform(&hdrv, 108);	/* Transition Ramp Up Medium Smooth 1 – 0 to 50% */
 8000a1e:	216c      	movs	r1, #108	@ 0x6c
 8000a20:	480b      	ldr	r0, [pc, #44]	@ (8000a50 <main+0xcc>)
 8000a22:	f7ff ff14 	bl	800084e <DRV2605_SequenceAddWaveform>
  DRV2605_SequenceAddWaveform(&hdrv, 96);	/* Transition Ramp Down Medium Smooth 1 – 50 to 0% */
 8000a26:	2160      	movs	r1, #96	@ 0x60
 8000a28:	4809      	ldr	r0, [pc, #36]	@ (8000a50 <main+0xcc>)
 8000a2a:	f7ff ff10 	bl	800084e <DRV2605_SequenceAddWaveform>
  DRV2605_SequenceAddDelay(&hdrv, 100);		/* Wait for 1000ms */
 8000a2e:	2164      	movs	r1, #100	@ 0x64
 8000a30:	4807      	ldr	r0, [pc, #28]	@ (8000a50 <main+0xcc>)
 8000a32:	f7ff feda 	bl	80007ea <DRV2605_SequenceAddDelay>
  DRV2605_SequenceAddWaveform(&hdrv, 123);	/* Smooth Hum 5 (No kick or brake pulse) – 10% */
 8000a36:	217b      	movs	r1, #123	@ 0x7b
 8000a38:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <main+0xcc>)
 8000a3a:	f7ff ff08 	bl	800084e <DRV2605_SequenceAddWaveform>

  DRV2605_SequenceWrite(&hdrv);
 8000a3e:	4804      	ldr	r0, [pc, #16]	@ (8000a50 <main+0xcc>)
 8000a40:	f7ff ff37 	bl	80008b2 <DRV2605_SequenceWrite>

  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <main+0xc0>
 8000a48:	42020c00 	.word	0x42020c00
 8000a4c:	20001038 	.word	0x20001038
 8000a50:	200014bc 	.word	0x200014bc

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b09e      	sub	sp, #120	@ 0x78
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0318 	add.w	r3, r7, #24
 8000a5e:	2260      	movs	r2, #96	@ 0x60
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f00d f843 	bl	800daee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
 8000a76:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a78:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000a7c:	f006 ff2a 	bl	80078d4 <HAL_PWREx_ControlVoltageScaling>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000a86:	f001 fa1d 	bl	8001ec4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a8a:	f006 ff13 	bl	80078b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a8e:	4b25      	ldr	r3, [pc, #148]	@ (8000b24 <SystemClock_Config+0xd0>)
 8000a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000a94:	4a23      	ldr	r2, [pc, #140]	@ (8000b24 <SystemClock_Config+0xd0>)
 8000a96:	f023 0318 	bic.w	r3, r3, #24
 8000a9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000a9e:	2305      	movs	r3, #5
 8000aa0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000aa6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000aa8:	2381      	movs	r3, #129	@ 0x81
 8000aaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aac:	2302      	movs	r3, #2
 8000aae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000abc:	230a      	movs	r3, #10
 8000abe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000acc:	230c      	movs	r3, #12
 8000ace:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad4:	f107 0318 	add.w	r3, r7, #24
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f006 ffe7 	bl	8007aac <HAL_RCC_OscConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae4:	f001 f9ee 	bl	8001ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae8:	231f      	movs	r3, #31
 8000aea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aec:	2303      	movs	r3, #3
 8000aee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	2104      	movs	r1, #4
 8000b04:	4618      	mov	r0, r3
 8000b06:	f007 fead 	bl	8008864 <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b10:	f001 f9d8 	bl	8001ec4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000b14:	f008 fa28 	bl	8008f68 <HAL_RCC_EnableCSS>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8000b18:	f00b f9a4 	bl	800be64 <HAL_RCCEx_EnableLSECSS>
}
 8000b1c:	bf00      	nop
 8000b1e:	3778      	adds	r7, #120	@ 0x78
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	46020c00 	.word	0x46020c00

08000b28 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000b2c:	f006 ffae 	bl	8007a8c <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000b30:	2002      	movs	r0, #2
 8000b32:	f006 ff5b 	bl	80079ec <HAL_PWREx_ConfigSupply>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000b3c:	f001 f9c2 	bl	8001ec4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 8000b48:	4b22      	ldr	r3, [pc, #136]	@ (8000bd4 <MX_ADF1_Init+0x90>)
 8000b4a:	4a23      	ldr	r2, [pc, #140]	@ (8000bd8 <MX_ADF1_Init+0x94>)
 8000b4c:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	@ (8000bd4 <MX_ADF1_Init+0x90>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 8000b54:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd4 <MX_ADF1_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd4 <MX_ADF1_Init+0x90>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <MX_ADF1_Init+0x90>)
 8000b64:	2210      	movs	r2, #16
 8000b66:	629a      	str	r2, [r3, #40]	@ 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <MX_ADF1_Init+0x90>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <MX_ADF1_Init+0x90>)
 8000b70:	2204      	movs	r2, #4
 8000b72:	631a      	str	r2, [r3, #48]	@ 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8000b74:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <MX_ADF1_Init+0x90>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 8000b7a:	4816      	ldr	r0, [pc, #88]	@ (8000bd4 <MX_ADF1_Init+0x90>)
 8000b7c:	f005 fd3a 	bl	80065f4 <HAL_MDF_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_ADF1_Init+0x46>
  {
    Error_Handler();
 8000b86:	f001 f99d 	bl	8001ec4 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <MX_ADF1_Init+0x98>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <MX_ADF1_Init+0x98>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_ADF1_Init+0x98>)
 8000b98:	2240      	movs	r2, #64	@ 0x40
 8000b9a:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_ADF1_Init+0x98>)
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <MX_ADF1_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_ADF1_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <MX_ADF1_Init+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_ADF1_Init+0x98>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <MX_ADF1_Init+0x98>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	665a      	str	r2, [r3, #100]	@ 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 8000bc4:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <MX_ADF1_Init+0x98>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	669a      	str	r2, [r3, #104]	@ 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 8000bca:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <MX_ADF1_Init+0x98>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000d28 	.word	0x20000d28
 8000bd8:	46024080 	.word	0x46024080
 8000bdc:	20000d6c 	.word	0x20000d6c

08000be0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000be6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c20 <MX_CRC_Init+0x40>)
 8000be8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000c0a:	f002 fcd7 	bl	80035bc <HAL_CRC_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c14:	f001 f956 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000de8 	.word	0x20000de8
 8000c20:	40023000 	.word	0x40023000

08000c24 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8000c28:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <MX_DCACHE1_Init+0x24>)
 8000c2a:	4a08      	ldr	r2, [pc, #32]	@ (8000c4c <MX_DCACHE1_Init+0x28>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_DCACHE1_Init+0x24>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000c34:	4804      	ldr	r0, [pc, #16]	@ (8000c48 <MX_DCACHE1_Init+0x24>)
 8000c36:	f002 fdb3 	bl	80037a0 <HAL_DCACHE_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 8000c40:	f001 f940 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000e0c 	.word	0x20000e0c
 8000c4c:	40031400 	.word	0x40031400

08000c50 <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 8000c54:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <MX_DCACHE2_Init+0x24>)
 8000c56:	4a08      	ldr	r2, [pc, #32]	@ (8000c78 <MX_DCACHE2_Init+0x28>)
 8000c58:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <MX_DCACHE2_Init+0x24>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	@ (8000c74 <MX_DCACHE2_Init+0x24>)
 8000c62:	f002 fd9d 	bl	80037a0 <HAL_DCACHE_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_DCACHE2_Init+0x20>
  {
    Error_Handler();
 8000c6c:	f001 f92a 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000e38 	.word	0x20000e38
 8000c78:	40031800 	.word	0x40031800

08000c7c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000c82:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf4 <MX_DMA2D_Init+0x78>)
 8000c84:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 608;
 8000c92:	4b17      	ldr	r3, [pc, #92]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000c94:	f44f 7218 	mov.w	r2, #608	@ 0x260
 8000c98:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ca6:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000cac:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000cca:	4809      	ldr	r0, [pc, #36]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000ccc:	f002 fe8f 	bl	80039ee <HAL_DMA2D_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 8000cd6:	f001 f8f5 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4804      	ldr	r0, [pc, #16]	@ (8000cf0 <MX_DMA2D_Init+0x74>)
 8000cde:	f002 fff7 	bl	8003cd0 <HAL_DMA2D_ConfigLayer>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 8000ce8:	f001 f8ec 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000e64 	.word	0x20000e64
 8000cf4:	4002b000 	.word	0x4002b000

08000cf8 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b0ae      	sub	sp, #184	@ 0xb8
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000cfe:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]
 8000d0e:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000d10:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000d14:	2224      	movs	r2, #36	@ 0x24
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f00c fee8 	bl	800daee <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000d1e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
 8000d2e:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000d30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d34:	2234      	movs	r2, #52	@ 0x34
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f00c fed8 	bl	800daee <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	222c      	movs	r2, #44	@ 0x2c
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f00c fed2 	bl	800daee <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000d4a:	4b67      	ldr	r3, [pc, #412]	@ (8000ee8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000d4c:	4a67      	ldr	r2, [pc, #412]	@ (8000eec <MX_DSIHOST_DSI_Init+0x1f4>)
 8000d4e:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000d50:	4b65      	ldr	r3, [pc, #404]	@ (8000ee8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000d56:	4b64      	ldr	r3, [pc, #400]	@ (8000ee8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000d58:	2204      	movs	r2, #4
 8000d5a:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000d5c:	4b62      	ldr	r3, [pc, #392]	@ (8000ee8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 8000d62:	4b61      	ldr	r3, [pc, #388]	@ (8000ee8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000d64:	2208      	movs	r2, #8
 8000d66:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 8000d68:	4b5f      	ldr	r3, [pc, #380]	@ (8000ee8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 8000d6e:	237d      	movs	r3, #125	@ 0x7d
 8000d70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 8000d74:	2304      	movs	r3, #4
 8000d76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 8000d80:	2301      	movs	r3, #1
 8000d82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000d92:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000d96:	4619      	mov	r1, r3
 8000d98:	4853      	ldr	r0, [pc, #332]	@ (8000ee8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000d9a:	f003 f941 	bl	8004020 <HAL_DSI_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 8000da4:	f001 f88e 	bl	8001ec4 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.LowPowerReadTimeout = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  HostTimeouts.BTATimeout = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000ddc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000de0:	4619      	mov	r1, r3
 8000de2:	4841      	ldr	r0, [pc, #260]	@ (8000ee8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000de4:	f003 fdcc 	bl	8004980 <HAL_DSI_ConfigHostTimeouts>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_DSIHOST_DSI_Init+0xfa>
  {
    Error_Handler();
 8000dee:	f001 f869 	bl	8001ec4 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 10;
 8000df2:	230a      	movs	r3, #10
 8000df4:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.ClockLaneLP2HSTime = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneHS2LPTime = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneLP2HSTime = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.DataLaneMaxReadTime = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	677b      	str	r3, [r7, #116]	@ 0x74
  PhyTimings.StopWaitTime = 10;
 8000e06:	230a      	movs	r3, #10
 8000e08:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000e0a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4835      	ldr	r0, [pc, #212]	@ (8000ee8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000e12:	f003 fd1f 	bl	8004854 <HAL_DSI_ConfigPhyTimer>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000e1c:	f001 f852 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000e20:	2104      	movs	r1, #4
 8000e22:	4831      	ldr	r0, [pc, #196]	@ (8000ee8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000e24:	f003 fcee 	bl	8004804 <HAL_DSI_ConfigFlowControl>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000e2e:	f001 f849 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000e32:	2100      	movs	r1, #0
 8000e34:	482c      	ldr	r0, [pc, #176]	@ (8000ee8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000e36:	f003 f9c7 	bl	80041c8 <HAL_DSI_ConfigErrorMonitor>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 8000e40:	f001 f840 	bl	8001ec4 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	65fb      	str	r3, [r7, #92]	@ 0x5c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000e78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	481a      	ldr	r0, [pc, #104]	@ (8000ee8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000e80:	f003 fc62 	bl	8004748 <HAL_DSI_ConfigCommand>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_DSIHOST_DSI_Init+0x196>
  {
    Error_Handler();
 8000e8a:	f001 f81b 	bl	8001ec4 <Error_Handler>
  }
  CmdCfg.ColorCoding = DSI_RGB888;
 8000e8e:	2305      	movs	r3, #5
 8000e90:	60bb      	str	r3, [r7, #8]
  CmdCfg.CommandSize = 416;
 8000e92:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8000e96:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000e98:	2310      	movs	r3, #16
 8000e9a:	613b      	str	r3, [r7, #16]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000eac:	2380      	movs	r3, #128	@ 0x80
 8000eae:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000eb0:	2340      	movs	r3, #64	@ 0x40
 8000eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480a      	ldr	r0, [pc, #40]	@ (8000ee8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000ebe:	f003 fb6c 	bl	800459a <HAL_DSI_ConfigAdaptedCommandMode>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 8000ec8:	f000 fffc 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4806      	ldr	r0, [pc, #24]	@ (8000ee8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000ed0:	f003 fb38 	bl	8004544 <HAL_DSI_SetGenericVCID>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 8000eda:	f000 fff3 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	37b8      	adds	r7, #184	@ 0xb8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000ec4 	.word	0x20000ec4
 8000eec:	40016c00 	.word	0x40016c00

08000ef0 <MX_GFXMMU_Init>:
  * @brief GFXMMU Initialization Function
  * @param None
  * @retval None
  */
static void MX_GFXMMU_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END GFXMMU_Init 0 */

  /* USER CODE BEGIN GFXMMU_Init 1 */

  /* USER CODE END GFXMMU_Init 1 */
  hgfxmmu.Instance = GFXMMU;
 8000ef4:	4b23      	ldr	r3, [pc, #140]	@ (8000f84 <MX_GFXMMU_Init+0x94>)
 8000ef6:	4a24      	ldr	r2, [pc, #144]	@ (8000f88 <MX_GFXMMU_Init+0x98>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hgfxmmu.Init.BlocksPerLine = GFXMMU_256BLOCKS;
 8000efa:	4b22      	ldr	r3, [pc, #136]	@ (8000f84 <MX_GFXMMU_Init+0x94>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  hgfxmmu.Init.DefaultValue = 0;
 8000f00:	4b20      	ldr	r3, [pc, #128]	@ (8000f84 <MX_GFXMMU_Init+0x94>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hgfxmmu.Init.Buffers.Buf0Address = 0;
 8000f06:	4b1f      	ldr	r3, [pc, #124]	@ (8000f84 <MX_GFXMMU_Init+0x94>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  hgfxmmu.Init.Buffers.Buf1Address = 0;
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f84 <MX_GFXMMU_Init+0x94>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  hgfxmmu.Init.Buffers.Buf2Address = 0;
 8000f12:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <MX_GFXMMU_Init+0x94>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  hgfxmmu.Init.Buffers.Buf3Address = 0;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	@ (8000f84 <MX_GFXMMU_Init+0x94>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  hgfxmmu.Init.CachePrefetch.Activation = ENABLE;
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <MX_GFXMMU_Init+0x94>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	771a      	strb	r2, [r3, #28]
  hgfxmmu.Init.CachePrefetch.CacheLock = GFXMMU_CACHE_LOCK_ENABLE;
 8000f24:	4b17      	ldr	r3, [pc, #92]	@ (8000f84 <MX_GFXMMU_Init+0x94>)
 8000f26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f2a:	621a      	str	r2, [r3, #32]
  hgfxmmu.Init.CachePrefetch.CacheLockBuffer = GFXMMU_CACHE_LOCK_BUFFER0;
 8000f2c:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <MX_GFXMMU_Init+0x94>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	@ 0x24
  hgfxmmu.Init.CachePrefetch.CacheForce = GFXMMU_CACHE_FORCE_ENABLE;
 8000f32:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <MX_GFXMMU_Init+0x94>)
 8000f34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f38:	629a      	str	r2, [r3, #40]	@ 0x28
  hgfxmmu.Init.CachePrefetch.OutterBufferability = GFXMMU_OUTTER_BUFFERABILITY_ENABLE;
 8000f3a:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <MX_GFXMMU_Init+0x94>)
 8000f3c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hgfxmmu.Init.CachePrefetch.OutterCachability = GFXMMU_OUTTER_CACHABILITY_ENABLE;
 8000f42:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <MX_GFXMMU_Init+0x94>)
 8000f44:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f48:	631a      	str	r2, [r3, #48]	@ 0x30
  hgfxmmu.Init.CachePrefetch.Prefetch = GFXMMU_PREFETCH_ENABLE;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <MX_GFXMMU_Init+0x94>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	635a      	str	r2, [r3, #52]	@ 0x34
  hgfxmmu.Init.Interrupts.Activation = ENABLE;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <MX_GFXMMU_Init+0x94>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_GFXMMU_Init(&hgfxmmu) != HAL_OK)
 8000f58:	480a      	ldr	r0, [pc, #40]	@ (8000f84 <MX_GFXMMU_Init+0x94>)
 8000f5a:	f003 fdd7 	bl	8004b0c <HAL_GFXMMU_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_GFXMMU_Init+0x78>
  {
    Error_Handler();
 8000f64:	f000 ffae 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_GFXMMU_ConfigLut(&hgfxmmu, GFXMMU_LUT_FIRST, GFXMMU_LUT_SIZE, (uint32_t)gfxmmu_lut_config) != HAL_OK)
 8000f68:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <MX_GFXMMU_Init+0x9c>)
 8000f6a:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4804      	ldr	r0, [pc, #16]	@ (8000f84 <MX_GFXMMU_Init+0x94>)
 8000f72:	f003 fe4b 	bl	8004c0c <HAL_GFXMMU_ConfigLut>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_GFXMMU_Init+0x90>
  {
    Error_Handler();
 8000f7c:	f000 ffa2 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN GFXMMU_Init 2 */

  /* USER CODE END GFXMMU_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000ee8 	.word	0x20000ee8
 8000f88:	4002c000 	.word	0x4002c000
 8000f8c:	20000000 	.word	0x20000000

08000f90 <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <MX_GPU2D_Init+0x20>)
 8000f96:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <MX_GPU2D_Init+0x24>)
 8000f98:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <MX_GPU2D_Init+0x20>)
 8000f9c:	f004 f8aa 	bl	80050f4 <HAL_GPU2D_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 8000fa6:	f000 ff8d 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000f30 	.word	0x20000f30
 8000fb4:	4002f000 	.word	0x4002f000

08000fb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <MX_I2C1_Init+0x74>)
 8000fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001030 <MX_I2C1_Init+0x78>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <MX_I2C1_Init+0x74>)
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001034 <MX_I2C1_Init+0x7c>)
 8000fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fc8:	4b18      	ldr	r3, [pc, #96]	@ (800102c <MX_I2C1_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fce:	4b17      	ldr	r3, [pc, #92]	@ (800102c <MX_I2C1_Init+0x74>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd4:	4b15      	ldr	r3, [pc, #84]	@ (800102c <MX_I2C1_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fda:	4b14      	ldr	r3, [pc, #80]	@ (800102c <MX_I2C1_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <MX_I2C1_Init+0x74>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	@ (800102c <MX_I2C1_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <MX_I2C1_Init+0x74>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff2:	480e      	ldr	r0, [pc, #56]	@ (800102c <MX_I2C1_Init+0x74>)
 8000ff4:	f004 f8ea 	bl	80051cc <HAL_I2C_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ffe:	f000 ff61 	bl	8001ec4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001002:	2100      	movs	r1, #0
 8001004:	4809      	ldr	r0, [pc, #36]	@ (800102c <MX_I2C1_Init+0x74>)
 8001006:	f004 fe63 	bl	8005cd0 <HAL_I2CEx_ConfigAnalogFilter>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001010:	f000 ff58 	bl	8001ec4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001014:	2100      	movs	r1, #0
 8001016:	4805      	ldr	r0, [pc, #20]	@ (800102c <MX_I2C1_Init+0x74>)
 8001018:	f004 fea5 	bl	8005d66 <HAL_I2CEx_ConfigDigitalFilter>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001022:	f000 ff4f 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000f3c 	.word	0x20000f3c
 8001030:	40005400 	.word	0x40005400
 8001034:	30909dec 	.word	0x30909dec

08001038 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800103c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <MX_I2C2_Init+0x74>)
 800103e:	4a1c      	ldr	r2, [pc, #112]	@ (80010b0 <MX_I2C2_Init+0x78>)
 8001040:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8001042:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <MX_I2C2_Init+0x74>)
 8001044:	4a1b      	ldr	r2, [pc, #108]	@ (80010b4 <MX_I2C2_Init+0x7c>)
 8001046:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001048:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <MX_I2C2_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800104e:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <MX_I2C2_Init+0x74>)
 8001050:	2201      	movs	r2, #1
 8001052:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <MX_I2C2_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <MX_I2C2_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_I2C2_Init+0x74>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_I2C2_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_I2C2_Init+0x74>)
 800106e:	2200      	movs	r2, #0
 8001070:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001072:	480e      	ldr	r0, [pc, #56]	@ (80010ac <MX_I2C2_Init+0x74>)
 8001074:	f004 f8aa 	bl	80051cc <HAL_I2C_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800107e:	f000 ff21 	bl	8001ec4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001082:	2100      	movs	r1, #0
 8001084:	4809      	ldr	r0, [pc, #36]	@ (80010ac <MX_I2C2_Init+0x74>)
 8001086:	f004 fe23 	bl	8005cd0 <HAL_I2CEx_ConfigAnalogFilter>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001090:	f000 ff18 	bl	8001ec4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001094:	2100      	movs	r1, #0
 8001096:	4805      	ldr	r0, [pc, #20]	@ (80010ac <MX_I2C2_Init+0x74>)
 8001098:	f004 fe65 	bl	8005d66 <HAL_I2CEx_ConfigDigitalFilter>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80010a2:	f000 ff0f 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000f90 	.word	0x20000f90
 80010b0:	40005800 	.word	0x40005800
 80010b4:	30909dec 	.word	0x30909dec

080010b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <MX_I2C3_Init+0x74>)
 80010be:	4a1c      	ldr	r2, [pc, #112]	@ (8001130 <MX_I2C3_Init+0x78>)
 80010c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 80010c2:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <MX_I2C3_Init+0x74>)
 80010c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001134 <MX_I2C3_Init+0x7c>)
 80010c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80010c8:	4b18      	ldr	r3, [pc, #96]	@ (800112c <MX_I2C3_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <MX_I2C3_Init+0x74>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d4:	4b15      	ldr	r3, [pc, #84]	@ (800112c <MX_I2C3_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80010da:	4b14      	ldr	r3, [pc, #80]	@ (800112c <MX_I2C3_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <MX_I2C3_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_I2C3_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <MX_I2C3_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010f2:	480e      	ldr	r0, [pc, #56]	@ (800112c <MX_I2C3_Init+0x74>)
 80010f4:	f004 f86a 	bl	80051cc <HAL_I2C_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80010fe:	f000 fee1 	bl	8001ec4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001102:	2100      	movs	r1, #0
 8001104:	4809      	ldr	r0, [pc, #36]	@ (800112c <MX_I2C3_Init+0x74>)
 8001106:	f004 fde3 	bl	8005cd0 <HAL_I2CEx_ConfigAnalogFilter>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001110:	f000 fed8 	bl	8001ec4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001114:	2100      	movs	r1, #0
 8001116:	4805      	ldr	r0, [pc, #20]	@ (800112c <MX_I2C3_Init+0x74>)
 8001118:	f004 fe25 	bl	8005d66 <HAL_I2CEx_ConfigDigitalFilter>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001122:	f000 fecf 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000fe4 	.word	0x20000fe4
 8001130:	46002800 	.word	0x46002800
 8001134:	30909dec 	.word	0x30909dec

08001138 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <MX_I2C4_Init+0x74>)
 800113e:	4a1c      	ldr	r2, [pc, #112]	@ (80011b0 <MX_I2C4_Init+0x78>)
 8001140:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30909DEC;
 8001142:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <MX_I2C4_Init+0x74>)
 8001144:	4a1b      	ldr	r2, [pc, #108]	@ (80011b4 <MX_I2C4_Init+0x7c>)
 8001146:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001148:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <MX_I2C4_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114e:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <MX_I2C4_Init+0x74>)
 8001150:	2201      	movs	r2, #1
 8001152:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001154:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <MX_I2C4_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <MX_I2C4_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <MX_I2C4_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <MX_I2C4_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <MX_I2C4_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001172:	480e      	ldr	r0, [pc, #56]	@ (80011ac <MX_I2C4_Init+0x74>)
 8001174:	f004 f82a 	bl	80051cc <HAL_I2C_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800117e:	f000 fea1 	bl	8001ec4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001182:	2100      	movs	r1, #0
 8001184:	4809      	ldr	r0, [pc, #36]	@ (80011ac <MX_I2C4_Init+0x74>)
 8001186:	f004 fda3 	bl	8005cd0 <HAL_I2CEx_ConfigAnalogFilter>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001190:	f000 fe98 	bl	8001ec4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001194:	2100      	movs	r1, #0
 8001196:	4805      	ldr	r0, [pc, #20]	@ (80011ac <MX_I2C4_Init+0x74>)
 8001198:	f004 fde5 	bl	8005d66 <HAL_I2CEx_ConfigDigitalFilter>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80011a2:	f000 fe8f 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20001038 	.word	0x20001038
 80011b0:	40008400 	.word	0x40008400
 80011b4:	30909dec 	.word	0x30909dec

080011b8 <MX_I2C6_Init>:
  * @brief I2C6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C6_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C6_Init 0 */

  /* USER CODE BEGIN I2C6_Init 1 */

  /* USER CODE END I2C6_Init 1 */
  hi2c6.Instance = I2C6;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <MX_I2C6_Init+0x74>)
 80011be:	4a1c      	ldr	r2, [pc, #112]	@ (8001230 <MX_I2C6_Init+0x78>)
 80011c0:	601a      	str	r2, [r3, #0]
  hi2c6.Init.Timing = 0x30909DEC;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <MX_I2C6_Init+0x74>)
 80011c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001234 <MX_I2C6_Init+0x7c>)
 80011c6:	605a      	str	r2, [r3, #4]
  hi2c6.Init.OwnAddress1 = 0;
 80011c8:	4b18      	ldr	r3, [pc, #96]	@ (800122c <MX_I2C6_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hi2c6.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ce:	4b17      	ldr	r3, [pc, #92]	@ (800122c <MX_I2C6_Init+0x74>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	60da      	str	r2, [r3, #12]
  hi2c6.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d4:	4b15      	ldr	r3, [pc, #84]	@ (800122c <MX_I2C6_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hi2c6.Init.OwnAddress2 = 0;
 80011da:	4b14      	ldr	r3, [pc, #80]	@ (800122c <MX_I2C6_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  hi2c6.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <MX_I2C6_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  hi2c6.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e6:	4b11      	ldr	r3, [pc, #68]	@ (800122c <MX_I2C6_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
  hi2c6.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <MX_I2C6_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c6) != HAL_OK)
 80011f2:	480e      	ldr	r0, [pc, #56]	@ (800122c <MX_I2C6_Init+0x74>)
 80011f4:	f003 ffea 	bl	80051cc <HAL_I2C_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_I2C6_Init+0x4a>
  {
    Error_Handler();
 80011fe:	f000 fe61 	bl	8001ec4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c6, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001202:	2100      	movs	r1, #0
 8001204:	4809      	ldr	r0, [pc, #36]	@ (800122c <MX_I2C6_Init+0x74>)
 8001206:	f004 fd63 	bl	8005cd0 <HAL_I2CEx_ConfigAnalogFilter>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_I2C6_Init+0x5c>
  {
    Error_Handler();
 8001210:	f000 fe58 	bl	8001ec4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c6, 0) != HAL_OK)
 8001214:	2100      	movs	r1, #0
 8001216:	4805      	ldr	r0, [pc, #20]	@ (800122c <MX_I2C6_Init+0x74>)
 8001218:	f004 fda5 	bl	8005d66 <HAL_I2CEx_ConfigDigitalFilter>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_I2C6_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 fe4f 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C6_Init 2 */

  /* USER CODE END I2C6_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2000108c 	.word	0x2000108c
 8001230:	40009c00 	.word	0x40009c00
 8001234:	30909dec 	.word	0x30909dec

08001238 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 800124c:	f004 fde8 	bl	8005e20 <HAL_ICACHE_Disable>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001256:	f000 fe35 	bl	8001ec4 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 800125a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800125e:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8001260:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8001264:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 8001266:	2301      	movs	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4619      	mov	r1, r3
 8001276:	2000      	movs	r0, #0
 8001278:	f004 fe02 	bl	8005e80 <HAL_ICACHE_EnableRemapRegion>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 8001282:	f000 fe1f 	bl	8001ec4 <Error_Handler>
  }

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001286:	f004 fdbb 	bl	8005e00 <HAL_ICACHE_Enable>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ICACHE_Init+0x5c>
  {
    Error_Handler();
 8001290:	f000 fe18 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80012a0:	4b21      	ldr	r3, [pc, #132]	@ (8001328 <MX_LPUART1_UART_Init+0x8c>)
 80012a2:	4a22      	ldr	r2, [pc, #136]	@ (800132c <MX_LPUART1_UART_Init+0x90>)
 80012a4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80012a6:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <MX_LPUART1_UART_Init+0x8c>)
 80012a8:	4a21      	ldr	r2, [pc, #132]	@ (8001330 <MX_LPUART1_UART_Init+0x94>)
 80012aa:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001328 <MX_LPUART1_UART_Init+0x8c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <MX_LPUART1_UART_Init+0x8c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <MX_LPUART1_UART_Init+0x8c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012be:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <MX_LPUART1_UART_Init+0x8c>)
 80012c0:	220c      	movs	r2, #12
 80012c2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80012c4:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <MX_LPUART1_UART_Init+0x8c>)
 80012c6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80012ca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012cc:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <MX_LPUART1_UART_Init+0x8c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d2:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <MX_LPUART1_UART_Init+0x8c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80012d8:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <MX_LPUART1_UART_Init+0x8c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012de:	4812      	ldr	r0, [pc, #72]	@ (8001328 <MX_LPUART1_UART_Init+0x8c>)
 80012e0:	f00b fecc 	bl	800d07c <HAL_UART_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80012ea:	f000 fdeb 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ee:	2100      	movs	r1, #0
 80012f0:	480d      	ldr	r0, [pc, #52]	@ (8001328 <MX_LPUART1_UART_Init+0x8c>)
 80012f2:	f00c fb13 	bl	800d91c <HAL_UARTEx_SetTxFifoThreshold>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80012fc:	f000 fde2 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001300:	2100      	movs	r1, #0
 8001302:	4809      	ldr	r0, [pc, #36]	@ (8001328 <MX_LPUART1_UART_Init+0x8c>)
 8001304:	f00c fb48 	bl	800d998 <HAL_UARTEx_SetRxFifoThreshold>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800130e:	f000 fdd9 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <MX_LPUART1_UART_Init+0x8c>)
 8001314:	f00c fac9 	bl	800d8aa <HAL_UARTEx_DisableFifoMode>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800131e:	f000 fdd1 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200010e0 	.word	0x200010e0
 800132c:	46002400 	.word	0x46002400
 8001330:	00033324 	.word	0x00033324

08001334 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001338:	4b22      	ldr	r3, [pc, #136]	@ (80013c4 <MX_USART1_UART_Init+0x90>)
 800133a:	4a23      	ldr	r2, [pc, #140]	@ (80013c8 <MX_USART1_UART_Init+0x94>)
 800133c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800133e:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <MX_USART1_UART_Init+0x90>)
 8001340:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001344:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001346:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <MX_USART1_UART_Init+0x90>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800134c:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <MX_USART1_UART_Init+0x90>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001352:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <MX_USART1_UART_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001358:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <MX_USART1_UART_Init+0x90>)
 800135a:	220c      	movs	r2, #12
 800135c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135e:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <MX_USART1_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001364:	4b17      	ldr	r3, [pc, #92]	@ (80013c4 <MX_USART1_UART_Init+0x90>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800136a:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <MX_USART1_UART_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001370:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <MX_USART1_UART_Init+0x90>)
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001376:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <MX_USART1_UART_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800137c:	4811      	ldr	r0, [pc, #68]	@ (80013c4 <MX_USART1_UART_Init+0x90>)
 800137e:	f00b fe7d 	bl	800d07c <HAL_UART_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001388:	f000 fd9c 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800138c:	2100      	movs	r1, #0
 800138e:	480d      	ldr	r0, [pc, #52]	@ (80013c4 <MX_USART1_UART_Init+0x90>)
 8001390:	f00c fac4 	bl	800d91c <HAL_UARTEx_SetTxFifoThreshold>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800139a:	f000 fd93 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800139e:	2100      	movs	r1, #0
 80013a0:	4808      	ldr	r0, [pc, #32]	@ (80013c4 <MX_USART1_UART_Init+0x90>)
 80013a2:	f00c faf9 	bl	800d998 <HAL_UARTEx_SetRxFifoThreshold>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013ac:	f000 fd8a 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013b0:	4804      	ldr	r0, [pc, #16]	@ (80013c4 <MX_USART1_UART_Init+0x90>)
 80013b2:	f00c fa7a 	bl	800d8aa <HAL_UARTEx_DisableFifoMode>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013bc:	f000 fd82 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20001174 	.word	0x20001174
 80013c8:	40013800 	.word	0x40013800

080013cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013d0:	4b22      	ldr	r3, [pc, #136]	@ (800145c <MX_USART6_UART_Init+0x90>)
 80013d2:	4a23      	ldr	r2, [pc, #140]	@ (8001460 <MX_USART6_UART_Init+0x94>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013d6:	4b21      	ldr	r3, [pc, #132]	@ (800145c <MX_USART6_UART_Init+0x90>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b1f      	ldr	r3, [pc, #124]	@ (800145c <MX_USART6_UART_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <MX_USART6_UART_Init+0x90>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <MX_USART6_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <MX_USART6_UART_Init+0x90>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b19      	ldr	r3, [pc, #100]	@ (800145c <MX_USART6_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b17      	ldr	r3, [pc, #92]	@ (800145c <MX_USART6_UART_Init+0x90>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001402:	4b16      	ldr	r3, [pc, #88]	@ (800145c <MX_USART6_UART_Init+0x90>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001408:	4b14      	ldr	r3, [pc, #80]	@ (800145c <MX_USART6_UART_Init+0x90>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800140e:	4b13      	ldr	r3, [pc, #76]	@ (800145c <MX_USART6_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001414:	4811      	ldr	r0, [pc, #68]	@ (800145c <MX_USART6_UART_Init+0x90>)
 8001416:	f00b fe31 	bl	800d07c <HAL_UART_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001420:	f000 fd50 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001424:	2100      	movs	r1, #0
 8001426:	480d      	ldr	r0, [pc, #52]	@ (800145c <MX_USART6_UART_Init+0x90>)
 8001428:	f00c fa78 	bl	800d91c <HAL_UARTEx_SetTxFifoThreshold>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001432:	f000 fd47 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001436:	2100      	movs	r1, #0
 8001438:	4808      	ldr	r0, [pc, #32]	@ (800145c <MX_USART6_UART_Init+0x90>)
 800143a:	f00c faad 	bl	800d998 <HAL_UARTEx_SetRxFifoThreshold>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001444:	f000 fd3e 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001448:	4804      	ldr	r0, [pc, #16]	@ (800145c <MX_USART6_UART_Init+0x90>)
 800144a:	f00c fa2e 	bl	800d8aa <HAL_UARTEx_DisableFifoMode>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001454:	f000 fd36 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20001208 	.word	0x20001208
 8001460:	40006400 	.word	0x40006400

08001464 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08e      	sub	sp, #56	@ 0x38
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2234      	movs	r2, #52	@ 0x34
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f00c fb3c 	bl	800daee <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001476:	4b3b      	ldr	r3, [pc, #236]	@ (8001564 <MX_LTDC_Init+0x100>)
 8001478:	4a3b      	ldr	r2, [pc, #236]	@ (8001568 <MX_LTDC_Init+0x104>)
 800147a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 800147c:	4b39      	ldr	r3, [pc, #228]	@ (8001564 <MX_LTDC_Init+0x100>)
 800147e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001482:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8001484:	4b37      	ldr	r3, [pc, #220]	@ (8001564 <MX_LTDC_Init+0x100>)
 8001486:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800148a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800148c:	4b35      	ldr	r3, [pc, #212]	@ (8001564 <MX_LTDC_Init+0x100>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001492:	4b34      	ldr	r3, [pc, #208]	@ (8001564 <MX_LTDC_Init+0x100>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001498:	4b32      	ldr	r3, [pc, #200]	@ (8001564 <MX_LTDC_Init+0x100>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 800149e:	4b31      	ldr	r3, [pc, #196]	@ (8001564 <MX_LTDC_Init+0x100>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 0;
 80014a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001564 <MX_LTDC_Init+0x100>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 0;
 80014aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001564 <MX_LTDC_Init+0x100>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 416;
 80014b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001564 <MX_LTDC_Init+0x100>)
 80014b2:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 416;
 80014b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001564 <MX_LTDC_Init+0x100>)
 80014ba:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80014be:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 416;
 80014c0:	4b28      	ldr	r3, [pc, #160]	@ (8001564 <MX_LTDC_Init+0x100>)
 80014c2:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80014c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 416;
 80014c8:	4b26      	ldr	r3, [pc, #152]	@ (8001564 <MX_LTDC_Init+0x100>)
 80014ca:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80014ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80014d0:	4b24      	ldr	r3, [pc, #144]	@ (8001564 <MX_LTDC_Init+0x100>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80014d8:	4b22      	ldr	r3, [pc, #136]	@ (8001564 <MX_LTDC_Init+0x100>)
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80014e0:	4b20      	ldr	r3, [pc, #128]	@ (8001564 <MX_LTDC_Init+0x100>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80014e8:	481e      	ldr	r0, [pc, #120]	@ (8001564 <MX_LTDC_Init+0x100>)
 80014ea:	f004 fd1b 	bl	8005f24 <HAL_LTDC_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 80014f4:	f000 fce6 	bl	8001ec4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 416;
 80014fc:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8001500:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 416;
 8001506:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 800150a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001510:	23ff      	movs	r3, #255	@ 0xff
 8001512:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001518:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800151c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800151e:	2305      	movs	r3, #5
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = GFXMMU_VIRTUAL_BUFFER0_BASE;
 8001522:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 416;
 8001528:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 800152c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 416;
 800152e:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8001532:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2200      	movs	r2, #0
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	@ (8001564 <MX_LTDC_Init+0x100>)
 800154e:	f004 fe7b 	bl	8006248 <HAL_LTDC_ConfigLayer>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8001558:	f000 fcb4 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3738      	adds	r7, #56	@ 0x38
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	2000129c 	.word	0x2000129c
 8001568:	40016800 	.word	0x40016800

0800156c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	@ 0x30
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001572:	f107 0318 	add.w	r3, r7, #24
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]
 8001582:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001592:	463b      	mov	r3, r7
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800159a:	4b3d      	ldr	r3, [pc, #244]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 800159c:	4a3d      	ldr	r2, [pc, #244]	@ (8001694 <MX_OCTOSPI1_Init+0x128>)
 800159e:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80015a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80015a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 80015ac:	4b38      	ldr	r3, [pc, #224]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 80015ae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80015b2:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 80015b4:	4b36      	ldr	r3, [pc, #216]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 80015b6:	221a      	movs	r2, #26
 80015b8:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80015ba:	4b35      	ldr	r3, [pc, #212]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 80015bc:	2201      	movs	r2, #1
 80015be:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80015c0:	4b33      	ldr	r3, [pc, #204]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80015c6:	4b32      	ldr	r3, [pc, #200]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_64_BYTES;
 80015cc:	4b30      	ldr	r3, [pc, #192]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 80015ce:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015d2:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 16;
 80015d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 80015d6:	2210      	movs	r2, #16
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80015da:	4b2d      	ldr	r3, [pc, #180]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 80015dc:	2200      	movs	r2, #0
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80015e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80015e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80015ec:	4b28      	ldr	r3, [pc, #160]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 80015ee:	2208      	movs	r2, #8
 80015f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 16;
 80015f2:	4b27      	ldr	r3, [pc, #156]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 80015f4:	2210      	movs	r2, #16
 80015f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 80015f8:	4b25      	ldr	r3, [pc, #148]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80015fe:	4824      	ldr	r0, [pc, #144]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 8001600:	f005 f9a4 	bl	800694c <HAL_OSPI_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_OCTOSPI1_Init+0xa2>
  {
    Error_Handler();
 800160a:	f000 fc5b 	bl	8001ec4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800160e:	2301      	movs	r3, #1
 8001610:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 8001612:	2301      	movs	r3, #1
 8001614:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 1;
 8001616:	2301      	movs	r3, #1
 8001618:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 800161a:	4b1f      	ldr	r3, [pc, #124]	@ (8001698 <MX_OCTOSPI1_Init+0x12c>)
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 800161e:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <MX_OCTOSPI1_Init+0x130>)
 8001620:	62bb      	str	r3, [r7, #40]	@ 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 8001622:	2301      	movs	r3, #1
 8001624:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001626:	f107 0318 	add.w	r3, r7, #24
 800162a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800162e:	4619      	mov	r1, r3
 8001630:	4817      	ldr	r0, [pc, #92]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 8001632:	f005 fb0b 	bl	8006c4c <HAL_OSPIM_Config>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_OCTOSPI1_Init+0xd4>
  {
    Error_Handler();
 800163c:	f000 fc42 	bl	8001ec4 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001648:	2302      	movs	r3, #2
 800164a:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi1, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001658:	4619      	mov	r1, r3
 800165a:	480d      	ldr	r0, [pc, #52]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 800165c:	f005 fa32 	bl	8006ac4 <HAL_OSPI_HyperbusCfg>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_OCTOSPI1_Init+0xfe>
  {
    Error_Handler();
 8001666:	f000 fc2d 	bl	8001ec4 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001672:	463b      	mov	r3, r7
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	@ (8001690 <MX_OCTOSPI1_Init+0x124>)
 8001678:	f006 f8d4 	bl	8007824 <HAL_OSPI_DLYB_SetConfig>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_OCTOSPI1_Init+0x11a>
  {
    Error_Handler();
 8001682:	f000 fc1f 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3730      	adds	r7, #48	@ 0x30
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20001344 	.word	0x20001344
 8001694:	420d1400 	.word	0x420d1400
 8001698:	00010002 	.word	0x00010002
 800169c:	01000002 	.word	0x01000002

080016a0 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	@ 0x30
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80016a6:	f107 0318 	add.w	r3, r7, #24
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]
 80016b6:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 80016b8:	f107 0308 	add.w	r3, r7, #8
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80016c6:	463b      	mov	r3, r7
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 80016ce:	4b3c      	ldr	r3, [pc, #240]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 80016d0:	4a3c      	ldr	r2, [pc, #240]	@ (80017c4 <MX_OCTOSPI2_Init+0x124>)
 80016d2:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 80016d4:	4b3a      	ldr	r3, [pc, #232]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80016da:	4b39      	ldr	r3, [pc, #228]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 80016e0:	4b37      	ldr	r3, [pc, #220]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 80016e2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016e6:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 80016e8:	4b35      	ldr	r3, [pc, #212]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 80016ea:	2220      	movs	r2, #32
 80016ec:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 80016ee:	4b34      	ldr	r3, [pc, #208]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80016f4:	4b32      	ldr	r3, [pc, #200]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80016fa:	4b31      	ldr	r3, [pc, #196]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001700:	4b2f      	ldr	r3, [pc, #188]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 8001702:	2200      	movs	r2, #0
 8001704:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 8001706:	4b2e      	ldr	r3, [pc, #184]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 8001708:	2201      	movs	r2, #1
 800170a:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800170c:	4b2c      	ldr	r3, [pc, #176]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 800170e:	2200      	movs	r2, #0
 8001710:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001712:	4b2b      	ldr	r3, [pc, #172]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 8001714:	2200      	movs	r2, #0
 8001716:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8001718:	4b29      	ldr	r3, [pc, #164]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 800171a:	2200      	movs	r2, #0
 800171c:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800171e:	4b28      	ldr	r3, [pc, #160]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 8001720:	2208      	movs	r2, #8
 8001722:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 8001724:	4b26      	ldr	r3, [pc, #152]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 8001726:	2200      	movs	r2, #0
 8001728:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 0;
 800172a:	4b25      	ldr	r3, [pc, #148]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 800172c:	2200      	movs	r2, #0
 800172e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8001730:	4823      	ldr	r0, [pc, #140]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 8001732:	f005 f90b 	bl	800694c <HAL_OSPI_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_OCTOSPI2_Init+0xa0>
  {
    Error_Handler();
 800173c:	f000 fbc2 	bl	8001ec4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001740:	2301      	movs	r3, #1
 8001742:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 8001744:	2301      	movs	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 2;
 8001748:	2302      	movs	r3, #2
 800174a:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 800174c:	4b1e      	ldr	r3, [pc, #120]	@ (80017c8 <MX_OCTOSPI2_Init+0x128>)
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001750:	4b1e      	ldr	r3, [pc, #120]	@ (80017cc <MX_OCTOSPI2_Init+0x12c>)
 8001752:	62bb      	str	r3, [r7, #40]	@ 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 8001754:	2301      	movs	r3, #1
 8001756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001758:	f107 0318 	add.w	r3, r7, #24
 800175c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001760:	4619      	mov	r1, r3
 8001762:	4817      	ldr	r0, [pc, #92]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 8001764:	f005 fa72 	bl	8006c4c <HAL_OSPIM_Config>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_OCTOSPI2_Init+0xd2>
  {
    Error_Handler();
 800176e:	f000 fba9 	bl	8001ec4 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 800177a:	2302      	movs	r3, #2
 800177c:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800178a:	4619      	mov	r1, r3
 800178c:	480c      	ldr	r0, [pc, #48]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 800178e:	f005 f999 	bl	8006ac4 <HAL_OSPI_HyperbusCfg>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_OCTOSPI2_Init+0xfc>
  {
    Error_Handler();
 8001798:	f000 fb94 	bl	8001ec4 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 80017a4:	463b      	mov	r3, r7
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <MX_OCTOSPI2_Init+0x120>)
 80017aa:	f006 f83b 	bl	8007824 <HAL_OSPI_DLYB_SetConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_OCTOSPI2_Init+0x118>
  {
    Error_Handler();
 80017b4:	f000 fb86 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	3730      	adds	r7, #48	@ 0x30
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	200013a0 	.word	0x200013a0
 80017c4:	420d2400 	.word	0x420d2400
 80017c8:	00010002 	.word	0x00010002
 80017cc:	01000002 	.word	0x01000002

080017d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08e      	sub	sp, #56	@ 0x38
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]
 80017e6:	615a      	str	r2, [r3, #20]
 80017e8:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017fe:	4b33      	ldr	r3, [pc, #204]	@ (80018cc <MX_RTC_Init+0xfc>)
 8001800:	4a33      	ldr	r2, [pc, #204]	@ (80018d0 <MX_RTC_Init+0x100>)
 8001802:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001804:	4b31      	ldr	r3, [pc, #196]	@ (80018cc <MX_RTC_Init+0xfc>)
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800180a:	4b30      	ldr	r3, [pc, #192]	@ (80018cc <MX_RTC_Init+0xfc>)
 800180c:	227f      	movs	r2, #127	@ 0x7f
 800180e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001810:	4b2e      	ldr	r3, [pc, #184]	@ (80018cc <MX_RTC_Init+0xfc>)
 8001812:	22ff      	movs	r2, #255	@ 0xff
 8001814:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001816:	4b2d      	ldr	r3, [pc, #180]	@ (80018cc <MX_RTC_Init+0xfc>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800181c:	4b2b      	ldr	r3, [pc, #172]	@ (80018cc <MX_RTC_Init+0xfc>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001822:	4b2a      	ldr	r3, [pc, #168]	@ (80018cc <MX_RTC_Init+0xfc>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001828:	4b28      	ldr	r3, [pc, #160]	@ (80018cc <MX_RTC_Init+0xfc>)
 800182a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800182e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001830:	4b26      	ldr	r3, [pc, #152]	@ (80018cc <MX_RTC_Init+0xfc>)
 8001832:	2200      	movs	r2, #0
 8001834:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001836:	4b25      	ldr	r3, [pc, #148]	@ (80018cc <MX_RTC_Init+0xfc>)
 8001838:	2200      	movs	r2, #0
 800183a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800183c:	4823      	ldr	r0, [pc, #140]	@ (80018cc <MX_RTC_Init+0xfc>)
 800183e:	f00a fc53 	bl	800c0e8 <HAL_RTC_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001848:	f000 fb3c 	bl	8001ec4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001850:	2300      	movs	r3, #0
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001858:	2300      	movs	r3, #0
 800185a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	4619      	mov	r1, r3
 8001862:	481a      	ldr	r0, [pc, #104]	@ (80018cc <MX_RTC_Init+0xfc>)
 8001864:	f00a feb0 	bl	800c5c8 <HAL_RTCEx_PrivilegeModeSet>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800186e:	f000 fb29 	bl	8001ec4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001872:	2300      	movs	r3, #0
 8001874:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8001876:	2300      	movs	r3, #0
 8001878:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 800187a:	2300      	movs	r3, #0
 800187c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	2201      	movs	r2, #1
 800188c:	4619      	mov	r1, r3
 800188e:	480f      	ldr	r0, [pc, #60]	@ (80018cc <MX_RTC_Init+0xfc>)
 8001890:	f00a fcac 	bl	800c1ec <HAL_RTC_SetTime>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800189a:	f000 fb13 	bl	8001ec4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800189e:	2301      	movs	r3, #1
 80018a0:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80018a2:	2301      	movs	r3, #1
 80018a4:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2201      	movs	r2, #1
 80018b2:	4619      	mov	r1, r3
 80018b4:	4805      	ldr	r0, [pc, #20]	@ (80018cc <MX_RTC_Init+0xfc>)
 80018b6:	f00a fd35 	bl	800c324 <HAL_RTC_SetDate>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 80018c0:	f000 fb00 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	3738      	adds	r7, #56	@ 0x38
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200013fc 	.word	0x200013fc
 80018d0:	46007800 	.word	0x46007800

080018d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018e4:	4b30      	ldr	r3, [pc, #192]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 80018e6:	4a31      	ldr	r2, [pc, #196]	@ (80019ac <MX_SPI1_Init+0xd8>)
 80018e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ea:	4b2f      	ldr	r3, [pc, #188]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 80018ec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80018f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018f2:	4b2d      	ldr	r3, [pc, #180]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80018f8:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 80018fa:	2203      	movs	r2, #3
 80018fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018fe:	4b2a      	ldr	r3, [pc, #168]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001904:	4b28      	ldr	r3, [pc, #160]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 8001906:	2200      	movs	r2, #0
 8001908:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800190a:	4b27      	ldr	r3, [pc, #156]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 800190c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001910:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001912:	4b25      	ldr	r3, [pc, #148]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 8001914:	2200      	movs	r2, #0
 8001916:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001918:	4b23      	ldr	r3, [pc, #140]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 800191a:	2200      	movs	r2, #0
 800191c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800191e:	4b22      	ldr	r3, [pc, #136]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 8001920:	2200      	movs	r2, #0
 8001922:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001924:	4b20      	ldr	r3, [pc, #128]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 8001926:	2200      	movs	r2, #0
 8001928:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800192a:	4b1f      	ldr	r3, [pc, #124]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 800192c:	2207      	movs	r2, #7
 800192e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001930:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 8001932:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001936:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001938:	4b1b      	ldr	r3, [pc, #108]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 800193a:	2200      	movs	r2, #0
 800193c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800193e:	4b1a      	ldr	r3, [pc, #104]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 8001940:	2200      	movs	r2, #0
 8001942:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001944:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 8001946:	2200      	movs	r2, #0
 8001948:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800194a:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 800194c:	2200      	movs	r2, #0
 800194e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001950:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 8001952:	2200      	movs	r2, #0
 8001954:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001956:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 8001958:	2200      	movs	r2, #0
 800195a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800195c:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 800195e:	2200      	movs	r2, #0
 8001960:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 8001964:	2200      	movs	r2, #0
 8001966:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001968:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 800196a:	2200      	movs	r2, #0
 800196c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800196e:	480e      	ldr	r0, [pc, #56]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 8001970:	f00a fe58 	bl	800c624 <HAL_SPI_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 800197a:	f000 faa3 	bl	8001ec4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001982:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001986:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	@ (80019a8 <MX_SPI1_Init+0xd4>)
 8001992:	f00a ff78 	bl	800c886 <HAL_SPIEx_SetConfigAutonomousMode>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 800199c:	f000 fa92 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2000142c 	.word	0x2000142c
 80019ac:	40013000 	.word	0x40013000

080019b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b090      	sub	sp, #64	@ 0x40
 80019b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	4bbf      	ldr	r3, [pc, #764]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 80019c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019cc:	4abd      	ldr	r2, [pc, #756]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 80019ce:	f043 0302 	orr.w	r3, r3, #2
 80019d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019d6:	4bbb      	ldr	r3, [pc, #748]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 80019d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019e4:	4bb7      	ldr	r3, [pc, #732]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 80019e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019ea:	4ab6      	ldr	r2, [pc, #728]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 80019ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019f4:	4bb3      	ldr	r3, [pc, #716]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 80019f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a02:	4bb0      	ldr	r3, [pc, #704]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a08:	4aae      	ldr	r2, [pc, #696]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001a0a:	f043 0308 	orr.w	r3, r3, #8
 8001a0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a12:	4bac      	ldr	r3, [pc, #688]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	623b      	str	r3, [r7, #32]
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a20:	4ba8      	ldr	r3, [pc, #672]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a26:	4aa7      	ldr	r2, [pc, #668]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a30:	4ba4      	ldr	r3, [pc, #656]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	4ba1      	ldr	r3, [pc, #644]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a44:	4a9f      	ldr	r2, [pc, #636]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a4e:	4b9d      	ldr	r3, [pc, #628]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a5c:	4b99      	ldr	r3, [pc, #612]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a62:	4a98      	ldr	r2, [pc, #608]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001a64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a68:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a6c:	4b95      	ldr	r3, [pc, #596]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a7a:	4b92      	ldr	r3, [pc, #584]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a80:	4a90      	ldr	r2, [pc, #576]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a8a:	4b8e      	ldr	r3, [pc, #568]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a98:	4b8a      	ldr	r3, [pc, #552]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a9e:	4a89      	ldr	r2, [pc, #548]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001aa8:	4b86      	ldr	r3, [pc, #536]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ab6:	4b83      	ldr	r3, [pc, #524]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001abc:	4a81      	ldr	r2, [pc, #516]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001abe:	f043 0320 	orr.w	r3, r3, #32
 8001ac2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ac6:	4b7f      	ldr	r3, [pc, #508]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ad4:	4b7b      	ldr	r3, [pc, #492]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ada:	4a7a      	ldr	r2, [pc, #488]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001adc:	f043 0310 	orr.w	r3, r3, #16
 8001ae0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ae4:	4b77      	ldr	r3, [pc, #476]	@ (8001cc4 <MX_GPIO_Init+0x314>)
 8001ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001af8:	4873      	ldr	r0, [pc, #460]	@ (8001cc8 <MX_GPIO_Init+0x318>)
 8001afa:	f003 fae3 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SDMMC_EN_Pin|LRA_EN_Pin, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001b04:	4871      	ldr	r0, [pc, #452]	@ (8001ccc <MX_GPIO_Init+0x31c>)
 8001b06:	f003 fadd 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO3_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f248 0120 	movw	r1, #32800	@ 0x8020
 8001b10:	486f      	ldr	r0, [pc, #444]	@ (8001cd0 <MX_GPIO_Init+0x320>)
 8001b12:	f003 fad7 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GNSS_RST_Pin|TP_RST_Pin|GNSS_WAKEUP_Pin, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	21c8      	movs	r1, #200	@ 0xc8
 8001b1a:	486e      	ldr	r0, [pc, #440]	@ (8001cd4 <MX_GPIO_Init+0x324>)
 8001b1c:	f003 fad2 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_RST_GPIO_Port, FLASH_RST_Pin, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b26:	486c      	ldr	r0, [pc, #432]	@ (8001cd8 <MX_GPIO_Init+0x328>)
 8001b28:	f003 facc 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2180      	movs	r1, #128	@ 0x80
 8001b30:	486a      	ldr	r0, [pc, #424]	@ (8001cdc <MX_GPIO_Init+0x32c>)
 8001b32:	f003 fac7 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b3c:	4868      	ldr	r0, [pc, #416]	@ (8001ce0 <MX_GPIO_Init+0x330>)
 8001b3e:	f003 fac1 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPLAY_SWIRE_IN_Pin DISPLAY_SWIRE_OUT_Pin */
  GPIO_InitStruct.Pin = DISPLAY_SWIRE_IN_Pin|DISPLAY_SWIRE_OUT_Pin;
 8001b42:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b54:	4619      	mov	r1, r3
 8001b56:	485c      	ldr	r0, [pc, #368]	@ (8001cc8 <MX_GPIO_Init+0x318>)
 8001b58:	f003 f8dc 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : AVDDEN_Pin */
  GPIO_InitStruct.Pin = AVDDEN_Pin;
 8001b5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b66:	2302      	movs	r3, #2
 8001b68:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(AVDDEN_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b72:	4619      	mov	r1, r3
 8001b74:	4854      	ldr	r0, [pc, #336]	@ (8001cc8 <MX_GPIO_Init+0x318>)
 8001b76:	f003 f8cd 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_EN_Pin */
  GPIO_InitStruct.Pin = SDMMC_EN_Pin;
 8001b7a:	2310      	movs	r3, #16
 8001b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(SDMMC_EN_GPIO_Port, &GPIO_InitStruct);
 8001b8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b8e:	4619      	mov	r1, r3
 8001b90:	484e      	ldr	r0, [pc, #312]	@ (8001ccc <MX_GPIO_Init+0x31c>)
 8001b92:	f003 f8bf 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_CD_Pin PWR_INT_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|PWR_INT_Pin;
 8001b96:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4848      	ldr	r0, [pc, #288]	@ (8001ccc <MX_GPIO_Init+0x31c>)
 8001bac:	f003 f8b2 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC8 PC11 PC12
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
 8001bb0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001bc2:	230c      	movs	r3, #12
 8001bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4845      	ldr	r0, [pc, #276]	@ (8001ce4 <MX_GPIO_Init+0x334>)
 8001bce:	f003 f8a1 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|PWR_ENCHG_Pin;
 8001bd2:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001be8:	4619      	mov	r1, r3
 8001bea:	4839      	ldr	r0, [pc, #228]	@ (8001cd0 <MX_GPIO_Init+0x320>)
 8001bec:	f003 f892 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c00:	230c      	movs	r3, #12
 8001c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4830      	ldr	r0, [pc, #192]	@ (8001ccc <MX_GPIO_Init+0x31c>)
 8001c0c:	f003 f882 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001c10:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c26:	4619      	mov	r1, r3
 8001c28:	482f      	ldr	r0, [pc, #188]	@ (8001ce8 <MX_GPIO_Init+0x338>)
 8001c2a:	f003 f873 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT2_Pin */
  GPIO_InitStruct.Pin = BT_INT2_Pin;
 8001c2e:	2380      	movs	r3, #128	@ 0x80
 8001c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c32:	2300      	movs	r3, #0
 8001c34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c36:	2302      	movs	r3, #2
 8001c38:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BT_INT2_GPIO_Port, &GPIO_InitStruct);
 8001c3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4828      	ldr	r0, [pc, #160]	@ (8001ce4 <MX_GPIO_Init+0x334>)
 8001c42:	f003 f867 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c54:	2302      	movs	r3, #2
 8001c56:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001c58:	2308      	movs	r3, #8
 8001c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c60:	4619      	mov	r1, r3
 8001c62:	481b      	ldr	r0, [pc, #108]	@ (8001cd0 <MX_GPIO_Init+0x320>)
 8001c64:	f003 f856 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_Pin GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO1_Pin;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c70:	2302      	movs	r3, #2
 8001c72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4814      	ldr	r0, [pc, #80]	@ (8001ccc <MX_GPIO_Init+0x31c>)
 8001c7c:	f003 f84a 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT1_Pin */
  GPIO_InitStruct.Pin = BT_INT1_Pin;
 8001c80:	2340      	movs	r3, #64	@ 0x40
 8001c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c84:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <MX_GPIO_Init+0x33c>)
 8001c86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BT_INT1_GPIO_Port, &GPIO_InitStruct);
 8001c8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c90:	4619      	mov	r1, r3
 8001c92:	4814      	ldr	r0, [pc, #80]	@ (8001ce4 <MX_GPIO_Init+0x334>)
 8001c94:	f003 f83e 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin|TP_RST_Pin;
 8001c98:	2388      	movs	r3, #136	@ 0x88
 8001c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001ca8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cac:	4619      	mov	r1, r3
 8001cae:	4809      	ldr	r0, [pc, #36]	@ (8001cd4 <MX_GPIO_Init+0x324>)
 8001cb0:	f003 f830 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_PPS_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin;
 8001cb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cba:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <MX_GPIO_Init+0x33c>)
 8001cbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cc2:	e015      	b.n	8001cf0 <MX_GPIO_Init+0x340>
 8001cc4:	46020c00 	.word	0x46020c00
 8001cc8:	42021800 	.word	0x42021800
 8001ccc:	42020c00 	.word	0x42020c00
 8001cd0:	42020400 	.word	0x42020400
 8001cd4:	42022400 	.word	0x42022400
 8001cd8:	42022000 	.word	0x42022000
 8001cdc:	42021400 	.word	0x42021400
 8001ce0:	42021000 	.word	0x42021000
 8001ce4:	42020800 	.word	0x42020800
 8001ce8:	42020000 	.word	0x42020000
 8001cec:	10110000 	.word	0x10110000
  HAL_GPIO_Init(GNSS_PPS_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4860      	ldr	r0, [pc, #384]	@ (8001e78 <MX_GPIO_Init+0x4c8>)
 8001cf8:	f003 f80c 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_WAKEUP_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin;
 8001cfc:	2340      	movs	r3, #64	@ 0x40
 8001cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GNSS_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d10:	4619      	mov	r1, r3
 8001d12:	485a      	ldr	r0, [pc, #360]	@ (8001e7c <MX_GPIO_Init+0x4cc>)
 8001d14:	f002 fffe 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 8001d18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d1e:	4b58      	ldr	r3, [pc, #352]	@ (8001e80 <MX_GPIO_Init+0x4d0>)
 8001d20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d22:	2301      	movs	r3, #1
 8001d24:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8001d26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4853      	ldr	r0, [pc, #332]	@ (8001e7c <MX_GPIO_Init+0x4cc>)
 8001d2e:	f002 fff1 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RST_Pin */
  GPIO_InitStruct.Pin = FLASH_RST_Pin;
 8001d32:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(FLASH_RST_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d48:	4619      	mov	r1, r3
 8001d4a:	484e      	ldr	r0, [pc, #312]	@ (8001e84 <MX_GPIO_Init+0x4d4>)
 8001d4c:	f002 ffe2 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_INT_Pin */
  GPIO_InitStruct.Pin = FLASH_INT_Pin;
 8001d50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d56:	4b4a      	ldr	r3, [pc, #296]	@ (8001e80 <MX_GPIO_Init+0x4d0>)
 8001d58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(FLASH_INT_GPIO_Port, &GPIO_InitStruct);
 8001d5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d62:	4619      	mov	r1, r3
 8001d64:	4847      	ldr	r0, [pc, #284]	@ (8001e84 <MX_GPIO_Init+0x4d4>)
 8001d66:	f002 ffd5 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RSTO_Pin */
  GPIO_InitStruct.Pin = FLASH_RSTO_Pin;
 8001d6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d70:	2300      	movs	r3, #0
 8001d72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d74:	2301      	movs	r3, #1
 8001d76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(FLASH_RSTO_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4841      	ldr	r0, [pc, #260]	@ (8001e84 <MX_GPIO_Init+0x4d4>)
 8001d80:	f002 ffc8 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin;
 8001d84:	2380      	movs	r3, #128	@ 0x80
 8001d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DISPLAY_RST_GPIO_Port, &GPIO_InitStruct);
 8001d94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d98:	4619      	mov	r1, r3
 8001d9a:	483b      	ldr	r0, [pc, #236]	@ (8001e88 <MX_GPIO_Init+0x4d8>)
 8001d9c:	f002 ffba 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALS_INT_Pin */
  GPIO_InitStruct.Pin = ALS_INT_Pin;
 8001da0:	2340      	movs	r3, #64	@ 0x40
 8001da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da4:	2300      	movs	r3, #0
 8001da6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da8:	2301      	movs	r3, #1
 8001daa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ALS_INT_GPIO_Port, &GPIO_InitStruct);
 8001dac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001db0:	4619      	mov	r1, r3
 8001db2:	4835      	ldr	r0, [pc, #212]	@ (8001e88 <MX_GPIO_Init+0x4d8>)
 8001db4:	f002 ffae 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 8001db8:	2380      	movs	r3, #128	@ 0x80
 8001dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dbc:	4b30      	ldr	r3, [pc, #192]	@ (8001e80 <MX_GPIO_Init+0x4d0>)
 8001dbe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8001dc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4830      	ldr	r0, [pc, #192]	@ (8001e8c <MX_GPIO_Init+0x4dc>)
 8001dcc:	f002 ffa2 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8001dd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001de6:	4619      	mov	r1, r3
 8001de8:	4828      	ldr	r0, [pc, #160]	@ (8001e8c <MX_GPIO_Init+0x4dc>)
 8001dea:	f002 ff93 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : HR_INT_Pin */
  GPIO_InitStruct.Pin = HR_INT_Pin;
 8001dee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001df4:	4b22      	ldr	r3, [pc, #136]	@ (8001e80 <MX_GPIO_Init+0x4d0>)
 8001df6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(HR_INT_GPIO_Port, &GPIO_InitStruct);
 8001dfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e00:	4619      	mov	r1, r3
 8001e02:	4823      	ldr	r0, [pc, #140]	@ (8001e90 <MX_GPIO_Init+0x4e0>)
 8001e04:	f002 ff86 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LRA_EN_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin;
 8001e08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e12:	2302      	movs	r3, #2
 8001e14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LRA_EN_GPIO_Port, &GPIO_InitStruct);
 8001e1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e1e:	4619      	mov	r1, r3
 8001e20:	481b      	ldr	r0, [pc, #108]	@ (8001e90 <MX_GPIO_Init+0x4e0>)
 8001e22:	f002 ff77 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_INT_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin;
 8001e26:	2310      	movs	r3, #16
 8001e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e2a:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <MX_GPIO_Init+0x4d0>)
 8001e2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MAG_INT_GPIO_Port, &GPIO_InitStruct);
 8001e32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e36:	4619      	mov	r1, r3
 8001e38:	4816      	ldr	r0, [pc, #88]	@ (8001e94 <MX_GPIO_Init+0x4e4>)
 8001e3a:	f002 ff6b 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 8001e3e:	2304      	movs	r3, #4
 8001e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e42:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <MX_GPIO_Init+0x4e8>)
 8001e44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 8001e4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4812      	ldr	r0, [pc, #72]	@ (8001e9c <MX_GPIO_Init+0x4ec>)
 8001e52:	f002 ff5f 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin;
 8001e56:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(IMU_INT2_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4807      	ldr	r0, [pc, #28]	@ (8001e88 <MX_GPIO_Init+0x4d8>)
 8001e6c:	f002 ff52 	bl	8004d14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e70:	bf00      	nop
 8001e72:	3740      	adds	r7, #64	@ 0x40
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	42020000 	.word	0x42020000
 8001e7c:	42022400 	.word	0x42022400
 8001e80:	10210000 	.word	0x10210000
 8001e84:	42022000 	.word	0x42022000
 8001e88:	42021400 	.word	0x42021400
 8001e8c:	42021000 	.word	0x42021000
 8001e90:	42020c00 	.word	0x42020c00
 8001e94:	42020800 	.word	0x42020800
 8001e98:	10110000 	.word	0x10110000
 8001e9c:	42020400 	.word	0x42020400

08001ea0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a04      	ldr	r2, [pc, #16]	@ (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001eb2:	f001 fa5f 	bl	8003374 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40001000 	.word	0x40001000

08001ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec8:	b672      	cpsid	i
}
 8001eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <Error_Handler+0x8>

08001ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <HAL_MspInit+0x30>)
 8001ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001edc:	4a08      	ldr	r2, [pc, #32]	@ (8001f00 <HAL_MspInit+0x30>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001ee6:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <HAL_MspInit+0x30>)
 8001ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	46020c00 	.word	0x46020c00

08001f04 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b0c2      	sub	sp, #264	@ 0x108
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f12:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	22e0      	movs	r2, #224	@ 0xe0
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f00b fdde 	bl	800daee <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8001f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a2b      	ldr	r2, [pc, #172]	@ (8001fec <HAL_MDF_MspInit+0xe8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d14e      	bne.n	8001fe2 <HAL_MDF_MspInit+0xde>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001f44:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f56:	f107 0310 	add.w	r3, r7, #16
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f007 f8b6 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_MDF_MspInit+0x66>
    {
      Error_Handler();
 8001f66:	f7ff ffad 	bl	8001ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 8001f6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ff0 <HAL_MDF_MspInit+0xec>)
 8001f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f70:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff0 <HAL_MDF_MspInit+0xec>)
 8001f72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff0 <HAL_MDF_MspInit+0xec>)
 8001f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f88:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <HAL_MDF_MspInit+0xec>)
 8001f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f8e:	4a18      	ldr	r2, [pc, #96]	@ (8001ff0 <HAL_MDF_MspInit+0xec>)
 8001f90:	f043 0310 	orr.w	r3, r3, #16
 8001f94:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f98:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <HAL_MDF_MspInit+0xec>)
 8001f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f9e:	f003 0210 	and.w	r2, r3, #16
 8001fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001fa6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001fb0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fb4:	681b      	ldr	r3, [r3, #0]
    /**ADF1 GPIO Configuration
    PE9     ------> ADF1_CCK0
    PE10     ------> ADF1_SDI0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fb6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fd6:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4805      	ldr	r0, [pc, #20]	@ (8001ff4 <HAL_MDF_MspInit+0xf0>)
 8001fde:	f002 fe99 	bl	8004d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 8001fe2:	bf00      	nop
 8001fe4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	46024080 	.word	0x46024080
 8001ff0:	46020c00 	.word	0x46020c00
 8001ff4:	42021000 	.word	0x42021000

08001ff8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0b      	ldr	r2, [pc, #44]	@ (8002034 <HAL_CRC_MspInit+0x3c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d10e      	bne.n	8002028 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800200a:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <HAL_CRC_MspInit+0x40>)
 800200c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002010:	4a09      	ldr	r2, [pc, #36]	@ (8002038 <HAL_CRC_MspInit+0x40>)
 8002012:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002016:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800201a:	4b07      	ldr	r3, [pc, #28]	@ (8002038 <HAL_CRC_MspInit+0x40>)
 800201c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002020:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	40023000 	.word	0x40023000
 8002038:	46020c00 	.word	0x46020c00

0800203c <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a16      	ldr	r2, [pc, #88]	@ (80020a4 <HAL_DCACHE_MspInit+0x68>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d10f      	bne.n	800206e <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 800204e:	4b16      	ldr	r3, [pc, #88]	@ (80020a8 <HAL_DCACHE_MspInit+0x6c>)
 8002050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002054:	4a14      	ldr	r2, [pc, #80]	@ (80020a8 <HAL_DCACHE_MspInit+0x6c>)
 8002056:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800205a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800205e:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <HAL_DCACHE_MspInit+0x6c>)
 8002060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002064:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 800206c:	e013      	b.n	8002096 <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a0e      	ldr	r2, [pc, #56]	@ (80020ac <HAL_DCACHE_MspInit+0x70>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d10e      	bne.n	8002096 <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <HAL_DCACHE_MspInit+0x6c>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800207e:	4a0a      	ldr	r2, [pc, #40]	@ (80020a8 <HAL_DCACHE_MspInit+0x6c>)
 8002080:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002084:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002088:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <HAL_DCACHE_MspInit+0x6c>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40031400 	.word	0x40031400
 80020a8:	46020c00 	.word	0x46020c00
 80020ac:	40031800 	.word	0x40031800

080020b0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0e      	ldr	r2, [pc, #56]	@ (80020f8 <HAL_DMA2D_MspInit+0x48>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d116      	bne.n	80020f0 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80020c2:	4b0e      	ldr	r3, [pc, #56]	@ (80020fc <HAL_DMA2D_MspInit+0x4c>)
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c8:	4a0c      	ldr	r2, [pc, #48]	@ (80020fc <HAL_DMA2D_MspInit+0x4c>)
 80020ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020ce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80020d2:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <HAL_DMA2D_MspInit+0x4c>)
 80020d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2100      	movs	r1, #0
 80020e4:	2076      	movs	r0, #118	@ 0x76
 80020e6:	f001 fa41 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80020ea:	2076      	movs	r0, #118	@ 0x76
 80020ec:	f001 fa58 	bl	80035a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	4002b000 	.word	0x4002b000
 80020fc:	46020c00 	.word	0x46020c00

08002100 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b0c2      	sub	sp, #264	@ 0x108
 8002104:	af00      	add	r7, sp, #0
 8002106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800210a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800210e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002120:	f107 0310 	add.w	r3, r7, #16
 8002124:	22e0      	movs	r2, #224	@ 0xe0
 8002126:	2100      	movs	r1, #0
 8002128:	4618      	mov	r0, r3
 800212a:	f00b fce0 	bl	800daee <memset>
  if(hdsi->Instance==DSI)
 800212e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002132:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a30      	ldr	r2, [pc, #192]	@ (80021fc <HAL_DSI_MspInit+0xfc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d157      	bne.n	80021f0 <HAL_DSI_MspInit+0xf0>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	f04f 0304 	mov.w	r3, #4
 8002148:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 800214c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002150:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	4618      	mov	r0, r3
 800215a:	f006 ffb7 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_DSI_MspInit+0x68>
    {
      Error_Handler();
 8002164:	f7ff feae 	bl	8001ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8002168:	4b25      	ldr	r3, [pc, #148]	@ (8002200 <HAL_DSI_MspInit+0x100>)
 800216a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800216e:	4a24      	ldr	r2, [pc, #144]	@ (8002200 <HAL_DSI_MspInit+0x100>)
 8002170:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002174:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002178:	4b21      	ldr	r3, [pc, #132]	@ (8002200 <HAL_DSI_MspInit+0x100>)
 800217a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800217e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002186:	4b1e      	ldr	r3, [pc, #120]	@ (8002200 <HAL_DSI_MspInit+0x100>)
 8002188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800218c:	4a1c      	ldr	r2, [pc, #112]	@ (8002200 <HAL_DSI_MspInit+0x100>)
 800218e:	f043 0320 	orr.w	r3, r3, #32
 8002192:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002196:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <HAL_DSI_MspInit+0x100>)
 8002198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800219c:	f003 0220 	and.w	r2, r3, #32
 80021a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80021a4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80021ae:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021b2:	681b      	ldr	r3, [r3, #0]
    DSI_CKN     ------> DSIHOST_CKN
    DSI_D1N     ------> DSIHOST_D1N
    DSI_D1P     ------> DSIHOST_D1P
    PF10     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 80021ce:	230b      	movs	r3, #11
 80021d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021d4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80021d8:	4619      	mov	r1, r3
 80021da:	480a      	ldr	r0, [pc, #40]	@ (8002204 <HAL_DSI_MspInit+0x104>)
 80021dc:	f002 fd9a 	bl	8004d14 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2100      	movs	r1, #0
 80021e4:	2089      	movs	r0, #137	@ 0x89
 80021e6:	f001 f9c1 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80021ea:	2089      	movs	r0, #137	@ 0x89
 80021ec:	f001 f9d8 	bl	80035a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80021f0:	bf00      	nop
 80021f2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40016c00 	.word	0x40016c00
 8002200:	46020c00 	.word	0x46020c00
 8002204:	42021400 	.word	0x42021400

08002208 <HAL_GFXMMU_MspInit>:
* This function configures the hardware resources used in this example
* @param hgfxmmu: GFXMMU handle pointer
* @retval None
*/
void HAL_GFXMMU_MspInit(GFXMMU_HandleTypeDef* hgfxmmu)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if(hgfxmmu->Instance==GFXMMU)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0e      	ldr	r2, [pc, #56]	@ (8002250 <HAL_GFXMMU_MspInit+0x48>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d116      	bne.n	8002248 <HAL_GFXMMU_MspInit+0x40>
  {
  /* USER CODE BEGIN GFXMMU_MspInit 0 */

  /* USER CODE END GFXMMU_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GFXMMU_CLK_ENABLE();
 800221a:	4b0e      	ldr	r3, [pc, #56]	@ (8002254 <HAL_GFXMMU_MspInit+0x4c>)
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002220:	4a0c      	ldr	r2, [pc, #48]	@ (8002254 <HAL_GFXMMU_MspInit+0x4c>)
 8002222:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002226:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800222a:	4b0a      	ldr	r3, [pc, #40]	@ (8002254 <HAL_GFXMMU_MspInit+0x4c>)
 800222c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002230:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
    /* GFXMMU interrupt Init */
    HAL_NVIC_SetPriority(GFXMMU_IRQn, 0, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2100      	movs	r1, #0
 800223c:	2086      	movs	r0, #134	@ 0x86
 800223e:	f001 f995 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GFXMMU_IRQn);
 8002242:	2086      	movs	r0, #134	@ 0x86
 8002244:	f001 f9ac 	bl	80035a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GFXMMU_MspInit 1 */

  /* USER CODE END GFXMMU_MspInit 1 */
  }

}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	4002c000 	.word	0x4002c000
 8002254:	46020c00 	.word	0x46020c00

08002258 <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a1a      	ldr	r2, [pc, #104]	@ (80022d0 <HAL_GPU2D_MspInit+0x78>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d12d      	bne.n	80022c6 <HAL_GPU2D_MspInit+0x6e>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 800226a:	4b1a      	ldr	r3, [pc, #104]	@ (80022d4 <HAL_GPU2D_MspInit+0x7c>)
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002270:	4a18      	ldr	r2, [pc, #96]	@ (80022d4 <HAL_GPU2D_MspInit+0x7c>)
 8002272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002276:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800227a:	4b16      	ldr	r3, [pc, #88]	@ (80022d4 <HAL_GPU2D_MspInit+0x7c>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002280:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8002288:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <HAL_GPU2D_MspInit+0x7c>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228e:	4a11      	ldr	r2, [pc, #68]	@ (80022d4 <HAL_GPU2D_MspInit+0x7c>)
 8002290:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002298:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <HAL_GPU2D_MspInit+0x7c>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	2084      	movs	r0, #132	@ 0x84
 80022ac:	f001 f95e 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 80022b0:	2084      	movs	r0, #132	@ 0x84
 80022b2:	f001 f975 	bl	80035a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 0, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2100      	movs	r1, #0
 80022ba:	2085      	movs	r0, #133	@ 0x85
 80022bc:	f001 f956 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 80022c0:	2085      	movs	r0, #133	@ 0x85
 80022c2:	f001 f96d 	bl	80035a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */

  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	4002f000 	.word	0x4002f000
 80022d4:	46020c00 	.word	0x46020c00

080022d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b0cc      	sub	sp, #304	@ 0x130
 80022dc:	af00      	add	r7, sp, #0
 80022de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80022e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80022e6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80022fc:	22e0      	movs	r2, #224	@ 0xe0
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f00b fbf4 	bl	800daee <memset>
  if(hi2c->Instance==I2C1)
 8002306:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800230a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4aba      	ldr	r2, [pc, #744]	@ (80025fc <HAL_I2C_MspInit+0x324>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d14f      	bne.n	80023b8 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002318:	f04f 0240 	mov.w	r2, #64	@ 0x40
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002324:	2300      	movs	r3, #0
 8002326:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800232a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800232e:	4618      	mov	r0, r3
 8002330:	f006 fecc 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 800233a:	f7ff fdc3 	bl	8001ec4 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800233e:	4bb0      	ldr	r3, [pc, #704]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 8002340:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002344:	4aae      	ldr	r2, [pc, #696]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 8002346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800234a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800234e:	4bac      	ldr	r3, [pc, #688]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 8002350:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002358:	637b      	str	r3, [r7, #52]	@ 0x34
 800235a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800235c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002360:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002364:	2312      	movs	r3, #18
 8002366:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002376:	2304      	movs	r3, #4
 8002378:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800237c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002380:	4619      	mov	r1, r3
 8002382:	48a0      	ldr	r0, [pc, #640]	@ (8002604 <HAL_I2C_MspInit+0x32c>)
 8002384:	f002 fcc6 	bl	8004d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002388:	4b9d      	ldr	r3, [pc, #628]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 800238a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800238e:	4a9c      	ldr	r2, [pc, #624]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 8002390:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002394:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002398:	4b99      	ldr	r3, [pc, #612]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 800239a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800239e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80023a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80023a6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80023b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80023b4:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C6_MspInit 1 */

  /* USER CODE END I2C6_MspInit 1 */
  }

}
 80023b6:	e1c0      	b.n	800273a <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C2)
 80023b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80023bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a90      	ldr	r2, [pc, #576]	@ (8002608 <HAL_I2C_MspInit+0x330>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d157      	bne.n	800247a <HAL_I2C_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80023ca:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023dc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80023e0:	4618      	mov	r0, r3
 80023e2:	f006 fe73 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 80023ec:	f7ff fd6a 	bl	8001ec4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f0:	4b83      	ldr	r3, [pc, #524]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 80023f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023f6:	4a82      	ldr	r2, [pc, #520]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002400:	4b7f      	ldr	r3, [pc, #508]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 8002402:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002406:	f003 0202 	and.w	r2, r3, #2
 800240a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800240e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002418:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800241c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800241e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002422:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002426:	2312      	movs	r3, #18
 8002428:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002438:	2304      	movs	r3, #4
 800243a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243e:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002442:	4619      	mov	r1, r3
 8002444:	4871      	ldr	r0, [pc, #452]	@ (800260c <HAL_I2C_MspInit+0x334>)
 8002446:	f002 fc65 	bl	8004d14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800244a:	4b6d      	ldr	r3, [pc, #436]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 800244c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002450:	4a6b      	ldr	r2, [pc, #428]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 8002452:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002456:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800245a:	4b69      	ldr	r3, [pc, #420]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 800245c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002460:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002464:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	e15f      	b.n	800273a <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C3)
 800247a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800247e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a62      	ldr	r2, [pc, #392]	@ (8002610 <HAL_I2C_MspInit+0x338>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d156      	bne.n	800253a <HAL_I2C_MspInit+0x262>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800248c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8002498:	2300      	movs	r3, #0
 800249a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800249e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80024a2:	4618      	mov	r0, r3
 80024a4:	f006 fe12 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_I2C_MspInit+0x1da>
      Error_Handler();
 80024ae:	f7ff fd09 	bl	8001ec4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b2:	4b53      	ldr	r3, [pc, #332]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 80024b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024b8:	4a51      	ldr	r2, [pc, #324]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024c2:	4b4f      	ldr	r3, [pc, #316]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 80024c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024c8:	f003 0204 	and.w	r2, r3, #4
 80024cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80024d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80024da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024de:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80024e0:	2303      	movs	r3, #3
 80024e2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024e6:	2312      	movs	r3, #18
 80024e8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024f8:	2304      	movs	r3, #4
 80024fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fe:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002502:	4619      	mov	r1, r3
 8002504:	4843      	ldr	r0, [pc, #268]	@ (8002614 <HAL_I2C_MspInit+0x33c>)
 8002506:	f002 fc05 	bl	8004d14 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800250a:	4b3d      	ldr	r3, [pc, #244]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 800250c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002510:	4a3b      	ldr	r2, [pc, #236]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 8002512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002516:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800251a:	4b39      	ldr	r3, [pc, #228]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 800251c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002520:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002524:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002528:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002532:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	e0ff      	b.n	800273a <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C4)
 800253a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800253e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a34      	ldr	r2, [pc, #208]	@ (8002618 <HAL_I2C_MspInit+0x340>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d169      	bne.n	8002620 <HAL_I2C_MspInit+0x348>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800254c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800255e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002562:	4618      	mov	r0, r3
 8002564:	f006 fdb2 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_I2C_MspInit+0x29a>
      Error_Handler();
 800256e:	f7ff fca9 	bl	8001ec4 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002572:	4b23      	ldr	r3, [pc, #140]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 8002574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002578:	4a21      	ldr	r2, [pc, #132]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 800257a:	f043 0308 	orr.w	r3, r3, #8
 800257e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002582:	4b1f      	ldr	r3, [pc, #124]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 8002584:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002588:	f003 0208 	and.w	r2, r3, #8
 800258c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002590:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800259a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800259e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80025a0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80025a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a8:	2312      	movs	r3, #18
 80025aa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80025ba:	2304      	movs	r3, #4
 80025bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80025c4:	4619      	mov	r1, r3
 80025c6:	4815      	ldr	r0, [pc, #84]	@ (800261c <HAL_I2C_MspInit+0x344>)
 80025c8:	f002 fba4 	bl	8004d14 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80025cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 80025ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80025d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 80025d4:	f043 0302 	orr.w	r3, r3, #2
 80025d8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80025dc:	4b08      	ldr	r3, [pc, #32]	@ (8002600 <HAL_I2C_MspInit+0x328>)
 80025de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80025e2:	f003 0202 	and.w	r2, r3, #2
 80025e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80025ea:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80025f4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80025f8:	681b      	ldr	r3, [r3, #0]
}
 80025fa:	e09e      	b.n	800273a <HAL_I2C_MspInit+0x462>
 80025fc:	40005400 	.word	0x40005400
 8002600:	46020c00 	.word	0x46020c00
 8002604:	42021800 	.word	0x42021800
 8002608:	40005800 	.word	0x40005800
 800260c:	42020400 	.word	0x42020400
 8002610:	46002800 	.word	0x46002800
 8002614:	42020800 	.word	0x42020800
 8002618:	40008400 	.word	0x40008400
 800261c:	42020c00 	.word	0x42020c00
  else if(hi2c->Instance==I2C6)
 8002620:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002624:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a45      	ldr	r2, [pc, #276]	@ (8002744 <HAL_I2C_MspInit+0x46c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	f040 8083 	bne.w	800273a <HAL_I2C_MspInit+0x462>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C6;
 8002634:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c6ClockSelection = RCC_I2C6CLKSOURCE_PCLK1;
 8002640:	2300      	movs	r3, #0
 8002642:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002646:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800264a:	4618      	mov	r0, r3
 800264c:	f006 fd3e 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_I2C_MspInit+0x382>
      Error_Handler();
 8002656:	f7ff fc35 	bl	8001ec4 <Error_Handler>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800265a:	4b3b      	ldr	r3, [pc, #236]	@ (8002748 <HAL_I2C_MspInit+0x470>)
 800265c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002660:	4a39      	ldr	r2, [pc, #228]	@ (8002748 <HAL_I2C_MspInit+0x470>)
 8002662:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002666:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800266a:	4b37      	ldr	r3, [pc, #220]	@ (8002748 <HAL_I2C_MspInit+0x470>)
 800266c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002670:	f403 7200 	and.w	r2, r3, #512	@ 0x200
 8002674:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002678:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002682:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002686:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002688:	4b2f      	ldr	r3, [pc, #188]	@ (8002748 <HAL_I2C_MspInit+0x470>)
 800268a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800268e:	4a2e      	ldr	r2, [pc, #184]	@ (8002748 <HAL_I2C_MspInit+0x470>)
 8002690:	f043 0320 	orr.w	r3, r3, #32
 8002694:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002698:	4b2b      	ldr	r3, [pc, #172]	@ (8002748 <HAL_I2C_MspInit+0x470>)
 800269a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800269e:	f003 0220 	and.w	r2, r3, #32
 80026a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80026a6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80026b0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80026b4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026be:	2312      	movs	r3, #18
 80026c0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 80026d0:	2302      	movs	r3, #2
 80026d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80026d6:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80026da:	4619      	mov	r1, r3
 80026dc:	481b      	ldr	r0, [pc, #108]	@ (800274c <HAL_I2C_MspInit+0x474>)
 80026de:	f002 fb19 	bl	8004d14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e8:	2312      	movs	r3, #18
 80026ea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 80026fa:	2302      	movs	r3, #2
 80026fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002700:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002704:	4619      	mov	r1, r3
 8002706:	4812      	ldr	r0, [pc, #72]	@ (8002750 <HAL_I2C_MspInit+0x478>)
 8002708:	f002 fb04 	bl	8004d14 <HAL_GPIO_Init>
    __HAL_RCC_I2C6_CLK_ENABLE();
 800270c:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <HAL_I2C_MspInit+0x470>)
 800270e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002712:	4a0d      	ldr	r2, [pc, #52]	@ (8002748 <HAL_I2C_MspInit+0x470>)
 8002714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002718:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 800271c:	4b0a      	ldr	r3, [pc, #40]	@ (8002748 <HAL_I2C_MspInit+0x470>)
 800271e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002722:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002726:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800272a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002734:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002738:	681b      	ldr	r3, [r3, #0]
}
 800273a:	bf00      	nop
 800273c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40009c00 	.word	0x40009c00
 8002748:	46020c00 	.word	0x46020c00
 800274c:	42022400 	.word	0x42022400
 8002750:	42021400 	.word	0x42021400

08002754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b0c8      	sub	sp, #288	@ 0x120
 8002758:	af00      	add	r7, sp, #0
 800275a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800275e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002762:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002774:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002778:	22e0      	movs	r2, #224	@ 0xe0
 800277a:	2100      	movs	r1, #0
 800277c:	4618      	mov	r0, r3
 800277e:	f00b f9b6 	bl	800daee <memset>
  if(huart->Instance==LPUART1)
 8002782:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002786:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4aa1      	ldr	r2, [pc, #644]	@ (8002a14 <HAL_UART_MspInit+0x2c0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d17b      	bne.n	800288c <HAL_UART_MspInit+0x138>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002794:	f04f 0220 	mov.w	r2, #32
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027aa:	4618      	mov	r0, r3
 80027ac:	f006 fc8e 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80027b6:	f7ff fb85 	bl	8001ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80027ba:	4b97      	ldr	r3, [pc, #604]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 80027bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80027c0:	4a95      	ldr	r2, [pc, #596]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 80027c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027c6:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80027ca:	4b93      	ldr	r3, [pc, #588]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 80027cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80027d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 80027da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027de:	4a8e      	ldr	r2, [pc, #568]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 80027e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027e8:	4b8b      	ldr	r3, [pc, #556]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 80027ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027ee:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80027f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027f6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002800:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002804:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002806:	4b84      	ldr	r3, [pc, #528]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 8002808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800280c:	4a82      	ldr	r2, [pc, #520]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 800280e:	f043 0302 	orr.w	r3, r3, #2
 8002812:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002816:	4b80      	ldr	r3, [pc, #512]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 8002818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800281c:	f003 0202 	and.w	r2, r3, #2
 8002820:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002824:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800282e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002832:	681b      	ldr	r3, [r3, #0]
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    PG5     ------> LPUART1_CTS
    PB1     ------> LPUART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_5;
 8002834:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8002838:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800284e:	2308      	movs	r3, #8
 8002850:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002854:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002858:	4619      	mov	r1, r3
 800285a:	4870      	ldr	r0, [pc, #448]	@ (8002a1c <HAL_UART_MspInit+0x2c8>)
 800285c:	f002 fa5a 	bl	8004d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002860:	2302      	movs	r3, #2
 8002862:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	2302      	movs	r3, #2
 8002868:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002872:	2300      	movs	r3, #0
 8002874:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002878:	2308      	movs	r3, #8
 800287a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002882:	4619      	mov	r1, r3
 8002884:	4866      	ldr	r0, [pc, #408]	@ (8002a20 <HAL_UART_MspInit+0x2cc>)
 8002886:	f002 fa45 	bl	8004d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800288a:	e0bd      	b.n	8002a08 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART1)
 800288c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002890:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a62      	ldr	r2, [pc, #392]	@ (8002a24 <HAL_UART_MspInit+0x2d0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d155      	bne.n	800294a <HAL_UART_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800289e:	f04f 0201 	mov.w	r2, #1
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80028aa:	2300      	movs	r3, #0
 80028ac:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028b2:	4618      	mov	r0, r3
 80028b4:	f006 fc0a 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 80028be:	f7ff fb01 	bl	8001ec4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80028c2:	4b55      	ldr	r3, [pc, #340]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 80028c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028c8:	4a53      	ldr	r2, [pc, #332]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 80028ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028ce:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80028d2:	4b51      	ldr	r3, [pc, #324]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 80028d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028d8:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80028dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80028ee:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f0:	4b49      	ldr	r3, [pc, #292]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 80028f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028f6:	4a48      	ldr	r2, [pc, #288]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 80028f8:	f043 0302 	orr.w	r3, r3, #2
 80028fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002900:	4b45      	ldr	r3, [pc, #276]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 8002902:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002906:	f003 0202 	and.w	r2, r3, #2
 800290a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800290e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002918:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800291c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800291e:	23c0      	movs	r3, #192	@ 0xc0
 8002920:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002930:	2300      	movs	r3, #0
 8002932:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002936:	2307      	movs	r3, #7
 8002938:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002940:	4619      	mov	r1, r3
 8002942:	4837      	ldr	r0, [pc, #220]	@ (8002a20 <HAL_UART_MspInit+0x2cc>)
 8002944:	f002 f9e6 	bl	8004d14 <HAL_GPIO_Init>
}
 8002948:	e05e      	b.n	8002a08 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART6)
 800294a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800294e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a34      	ldr	r2, [pc, #208]	@ (8002a28 <HAL_UART_MspInit+0x2d4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d155      	bne.n	8002a08 <HAL_UART_MspInit+0x2b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800295c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8002968:	2300      	movs	r3, #0
 800296a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800296e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002972:	4618      	mov	r0, r3
 8002974:	f006 fbaa 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 800297e:	f7ff faa1 	bl	8001ec4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002982:	4b25      	ldr	r3, [pc, #148]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 8002984:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002988:	4a23      	ldr	r2, [pc, #140]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 800298a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800298e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002992:	4b21      	ldr	r3, [pc, #132]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 8002994:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002998:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 800299c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029aa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80029ae:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b0:	4b19      	ldr	r3, [pc, #100]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 80029b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029b6:	4a18      	ldr	r2, [pc, #96]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029c0:	4b15      	ldr	r3, [pc, #84]	@ (8002a18 <HAL_UART_MspInit+0x2c4>)
 80029c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029c6:	f003 0204 	and.w	r2, r3, #4
 80029ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029d8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029dc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80029de:	230c      	movs	r3, #12
 80029e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80029f6:	2307      	movs	r3, #7
 80029f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029fc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002a00:	4619      	mov	r1, r3
 8002a02:	480a      	ldr	r0, [pc, #40]	@ (8002a2c <HAL_UART_MspInit+0x2d8>)
 8002a04:	f002 f986 	bl	8004d14 <HAL_GPIO_Init>
}
 8002a08:	bf00      	nop
 8002a0a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	46002400 	.word	0x46002400
 8002a18:	46020c00 	.word	0x46020c00
 8002a1c:	42021800 	.word	0x42021800
 8002a20:	42020400 	.word	0x42020400
 8002a24:	40013800 	.word	0x40013800
 8002a28:	40006400 	.word	0x40006400
 8002a2c:	42020800 	.word	0x42020800

08002a30 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b0bc      	sub	sp, #240	@ 0xf0
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a38:	f107 0310 	add.w	r3, r7, #16
 8002a3c:	22e0      	movs	r2, #224	@ 0xe0
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f00b f854 	bl	800daee <memset>
  if(hltdc->Instance==LTDC)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a22      	ldr	r2, [pc, #136]	@ (8002ad4 <HAL_LTDC_MspInit+0xa4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d13d      	bne.n	8002acc <HAL_LTDC_MspInit+0x9c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0302 	mov.w	r3, #2
 8002a58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 8002a5c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002a60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8002a64:	2303      	movs	r3, #3
 8002a66:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLL2.PLL2M = 1;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLL2.PLL2N = 20;
 8002a6c:	2314      	movs	r3, #20
 8002a6e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2P = 2;
 8002a70:	2302      	movs	r3, #2
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLL2.PLL2Q = 2;
 8002a74:	2302      	movs	r3, #2
 8002a76:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLL2.PLL2R = 2;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8002a7c:	230c      	movs	r3, #12
 8002a7e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8002a84:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002a88:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a8a:	f107 0310 	add.w	r3, r7, #16
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f006 fb1c 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8002a9a:	f7ff fa13 	bl	8001ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad8 <HAL_LTDC_MspInit+0xa8>)
 8002aa0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8002ad8 <HAL_LTDC_MspInit+0xa8>)
 8002aa6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002aaa:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002aae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <HAL_LTDC_MspInit+0xa8>)
 8002ab0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ab4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002abc:	2200      	movs	r2, #0
 8002abe:	2100      	movs	r1, #0
 8002ac0:	2087      	movs	r0, #135	@ 0x87
 8002ac2:	f000 fd53 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002ac6:	2087      	movs	r0, #135	@ 0x87
 8002ac8:	f000 fd6a 	bl	80035a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002acc:	bf00      	nop
 8002ace:	37f0      	adds	r7, #240	@ 0xf0
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40016800 	.word	0x40016800
 8002ad8:	46020c00 	.word	0x46020c00

08002adc <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b0ca      	sub	sp, #296	@ 0x128
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002ae6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002aea:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aec:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002afc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b00:	22e0      	movs	r2, #224	@ 0xe0
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f00a fff2 	bl	800daee <memset>
  if(hospi->Instance==OCTOSPI1)
 8002b0a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002b0e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a93      	ldr	r2, [pc, #588]	@ (8002d64 <HAL_OSPI_MspInit+0x288>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	f040 8133 	bne.w	8002d84 <HAL_OSPI_MspInit+0x2a8>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002b1e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b34:	4618      	mov	r0, r3
 8002b36:	f006 fac9 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8002b40:	f7ff f9c0 	bl	8001ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8002b44:	4b88      	ldr	r3, [pc, #544]	@ (8002d68 <HAL_OSPI_MspInit+0x28c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	4a87      	ldr	r2, [pc, #540]	@ (8002d68 <HAL_OSPI_MspInit+0x28c>)
 8002b4c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8002b4e:	4b86      	ldr	r3, [pc, #536]	@ (8002d68 <HAL_OSPI_MspInit+0x28c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d10e      	bne.n	8002b74 <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8002b56:	4b85      	ldr	r3, [pc, #532]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b5c:	4a83      	ldr	r2, [pc, #524]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002b5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b66:	4b81      	ldr	r3, [pc, #516]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002b74:	4b7d      	ldr	r3, [pc, #500]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7a:	4a7c      	ldr	r2, [pc, #496]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002b7c:	f043 0310 	orr.w	r3, r3, #16
 8002b80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b84:	4b79      	ldr	r3, [pc, #484]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8a:	f003 0210 	and.w	r2, r3, #16
 8002b8e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002b92:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002b9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ba0:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ba2:	4b72      	ldr	r3, [pc, #456]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ba8:	4a70      	ldr	r2, [pc, #448]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002bb2:	4b6e      	ldr	r3, [pc, #440]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bb8:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002bbc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002bc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002bca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002bce:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bd0:	4b66      	ldr	r3, [pc, #408]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bd6:	4a65      	ldr	r2, [pc, #404]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bdc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002be0:	4b62      	ldr	r3, [pc, #392]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002be6:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8002bea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002bfc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002bfe:	4b5b      	ldr	r3, [pc, #364]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c04:	4a59      	ldr	r2, [pc, #356]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c0e:	4b57      	ldr	r3, [pc, #348]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c14:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8002c18:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002c1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002c26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c2a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2c:	4b4f      	ldr	r3, [pc, #316]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c32:	4a4e      	ldr	r2, [pc, #312]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002c34:	f043 0302 	orr.w	r3, r3, #2
 8002c38:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c3c:	4b4b      	ldr	r3, [pc, #300]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c42:	f003 0202 	and.w	r2, r3, #2
 8002c46:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002c4a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002c54:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c58:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c5a:	4b44      	ldr	r3, [pc, #272]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c60:	4a42      	ldr	r2, [pc, #264]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002c62:	f043 0310 	orr.w	r3, r3, #16
 8002c66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c6a:	4b40      	ldr	r3, [pc, #256]	@ (8002d6c <HAL_OSPI_MspInit+0x290>)
 8002c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c70:	f003 0210 	and.w	r2, r3, #16
 8002c74:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002c78:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002c82:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c86:	681b      	ldr	r3, [r3, #0]
    PH9     ------> OCTOSPIM_P2_IO4
    PH12     ------> OCTOSPIM_P2_IO7
    PB10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9
 8002c88:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002c8c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c90:	2302      	movs	r3, #2
 8002c92:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8002ca2:	2305      	movs	r3, #5
 8002ca4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ca8:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002cac:	4619      	mov	r1, r3
 8002cae:	4830      	ldr	r0, [pc, #192]	@ (8002d70 <HAL_OSPI_MspInit+0x294>)
 8002cb0:	f002 f830 	bl	8004d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002cb4:	2340      	movs	r3, #64	@ 0x40
 8002cb6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cd2:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4826      	ldr	r0, [pc, #152]	@ (8002d74 <HAL_OSPI_MspInit+0x298>)
 8002cda:	f002 f81b 	bl	8004d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002cde:	230e      	movs	r3, #14
 8002ce0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPI2;
 8002cf6:	2306      	movs	r3, #6
 8002cf8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002cfc:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002d00:	4619      	mov	r1, r3
 8002d02:	481d      	ldr	r0, [pc, #116]	@ (8002d78 <HAL_OSPI_MspInit+0x29c>)
 8002d04:	f002 f806 	bl	8004d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 8002d08:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d0c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2302      	movs	r3, #2
 8002d12:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002d22:	230a      	movs	r3, #10
 8002d24:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d28:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4813      	ldr	r0, [pc, #76]	@ (8002d7c <HAL_OSPI_MspInit+0x2a0>)
 8002d30:	f001 fff0 	bl	8004d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d38:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002d4e:	230a      	movs	r3, #10
 8002d50:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d54:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4809      	ldr	r0, [pc, #36]	@ (8002d80 <HAL_OSPI_MspInit+0x2a4>)
 8002d5c:	f001 ffda 	bl	8004d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8002d60:	e08f      	b.n	8002e82 <HAL_OSPI_MspInit+0x3a6>
 8002d62:	bf00      	nop
 8002d64:	420d1400 	.word	0x420d1400
 8002d68:	200014d4 	.word	0x200014d4
 8002d6c:	46020c00 	.word	0x46020c00
 8002d70:	42021c00 	.word	0x42021c00
 8002d74:	42021800 	.word	0x42021800
 8002d78:	42022000 	.word	0x42022000
 8002d7c:	42020400 	.word	0x42020400
 8002d80:	42021000 	.word	0x42021000
  else if(hospi->Instance==OCTOSPI2)
 8002d84:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002d88:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a3e      	ldr	r2, [pc, #248]	@ (8002e8c <HAL_OSPI_MspInit+0x3b0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d175      	bne.n	8002e82 <HAL_OSPI_MspInit+0x3a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002d96:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002da8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002dac:	4618      	mov	r0, r3
 8002dae:	f006 f98d 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_OSPI_MspInit+0x2e0>
      Error_Handler();
 8002db8:	f7ff f884 	bl	8001ec4 <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8002dbc:	4b34      	ldr	r3, [pc, #208]	@ (8002e90 <HAL_OSPI_MspInit+0x3b4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	4a33      	ldr	r2, [pc, #204]	@ (8002e90 <HAL_OSPI_MspInit+0x3b4>)
 8002dc4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8002dc6:	4b32      	ldr	r3, [pc, #200]	@ (8002e90 <HAL_OSPI_MspInit+0x3b4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d116      	bne.n	8002dfc <HAL_OSPI_MspInit+0x320>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8002dce:	4b31      	ldr	r3, [pc, #196]	@ (8002e94 <HAL_OSPI_MspInit+0x3b8>)
 8002dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dd4:	4a2f      	ldr	r2, [pc, #188]	@ (8002e94 <HAL_OSPI_MspInit+0x3b8>)
 8002dd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002dda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002dde:	4b2d      	ldr	r3, [pc, #180]	@ (8002e94 <HAL_OSPI_MspInit+0x3b8>)
 8002de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002de4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002de8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002dec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002df6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002dfa:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8002dfc:	4b25      	ldr	r3, [pc, #148]	@ (8002e94 <HAL_OSPI_MspInit+0x3b8>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e02:	4a24      	ldr	r2, [pc, #144]	@ (8002e94 <HAL_OSPI_MspInit+0x3b8>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e0c:	4b21      	ldr	r3, [pc, #132]	@ (8002e94 <HAL_OSPI_MspInit+0x3b8>)
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e12:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8002e16:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002e1a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002e24:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e28:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <HAL_OSPI_MspInit+0x3b8>)
 8002e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e30:	4a18      	ldr	r2, [pc, #96]	@ (8002e94 <HAL_OSPI_MspInit+0x3b8>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002e3a:	4b16      	ldr	r3, [pc, #88]	@ (8002e94 <HAL_OSPI_MspInit+0x3b8>)
 8002e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e40:	f003 0201 	and.w	r2, r3, #1
 8002e44:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002e48:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002e52:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e56:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI2;
 8002e70:	230a      	movs	r3, #10
 8002e72:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e76:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4806      	ldr	r0, [pc, #24]	@ (8002e98 <HAL_OSPI_MspInit+0x3bc>)
 8002e7e:	f001 ff49 	bl	8004d14 <HAL_GPIO_Init>
}
 8002e82:	bf00      	nop
 8002e84:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	420d2400 	.word	0x420d2400
 8002e90:	200014d4 	.word	0x200014d4
 8002e94:	46020c00 	.word	0x46020c00
 8002e98:	42020000 	.word	0x42020000

08002e9c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b0bc      	sub	sp, #240	@ 0xf0
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ea4:	f107 0310 	add.w	r3, r7, #16
 8002ea8:	22e0      	movs	r2, #224	@ 0xe0
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f00a fe1e 	bl	800daee <memset>
  if(hrtc->Instance==RTC)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f2c <HAL_RTC_MspInit+0x90>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d132      	bne.n	8002f22 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ebc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002ec8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ed0:	f107 0310 	add.w	r3, r7, #16
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f006 f8f9 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002ee0:	f7fe fff0 	bl	8001ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ee4:	4b12      	ldr	r3, [pc, #72]	@ (8002f30 <HAL_RTC_MspInit+0x94>)
 8002ee6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002eea:	4a11      	ldr	r2, [pc, #68]	@ (8002f30 <HAL_RTC_MspInit+0x94>)
 8002eec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ef0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f30 <HAL_RTC_MspInit+0x94>)
 8002ef6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002efa:	4a0d      	ldr	r2, [pc, #52]	@ (8002f30 <HAL_RTC_MspInit+0x94>)
 8002efc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f00:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002f04:	4b0a      	ldr	r3, [pc, #40]	@ (8002f30 <HAL_RTC_MspInit+0x94>)
 8002f06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002f12:	4b07      	ldr	r3, [pc, #28]	@ (8002f30 <HAL_RTC_MspInit+0x94>)
 8002f14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f18:	4a05      	ldr	r2, [pc, #20]	@ (8002f30 <HAL_RTC_MspInit+0x94>)
 8002f1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f1e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f22:	bf00      	nop
 8002f24:	37f0      	adds	r7, #240	@ 0xf0
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	46007800 	.word	0x46007800
 8002f30:	46020c00 	.word	0x46020c00

08002f34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b0c4      	sub	sp, #272	@ 0x110
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f42:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f44:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f54:	f107 0318 	add.w	r3, r7, #24
 8002f58:	22e0      	movs	r2, #224	@ 0xe0
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f00a fdc6 	bl	800daee <memset>
  if(hspi->Instance==SPI1)
 8002f62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a41      	ldr	r2, [pc, #260]	@ (8003074 <HAL_SPI_MspInit+0x140>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d17a      	bne.n	800306a <HAL_SPI_MspInit+0x136>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002f74:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8002f80:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002f84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f88:	f107 0318 	add.w	r3, r7, #24
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f006 f89d 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8002f98:	f7fe ff94 	bl	8001ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f9c:	4b36      	ldr	r3, [pc, #216]	@ (8003078 <HAL_SPI_MspInit+0x144>)
 8002f9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fa2:	4a35      	ldr	r2, [pc, #212]	@ (8003078 <HAL_SPI_MspInit+0x144>)
 8002fa4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fa8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002fac:	4b32      	ldr	r3, [pc, #200]	@ (8003078 <HAL_SPI_MspInit+0x144>)
 8002fae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fba:	4b2f      	ldr	r3, [pc, #188]	@ (8003078 <HAL_SPI_MspInit+0x144>)
 8002fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8003078 <HAL_SPI_MspInit+0x144>)
 8002fc2:	f043 0302 	orr.w	r3, r3, #2
 8002fc6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002fca:	4b2b      	ldr	r3, [pc, #172]	@ (8003078 <HAL_SPI_MspInit+0x144>)
 8002fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fd0:	f003 0202 	and.w	r2, r3, #2
 8002fd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002fd8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002fe2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002fe6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe8:	4b23      	ldr	r3, [pc, #140]	@ (8003078 <HAL_SPI_MspInit+0x144>)
 8002fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fee:	4a22      	ldr	r2, [pc, #136]	@ (8003078 <HAL_SPI_MspInit+0x144>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8003078 <HAL_SPI_MspInit+0x144>)
 8002ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ffe:	f003 0201 	and.w	r2, r3, #1
 8003002:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003006:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003010:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003014:	681b      	ldr	r3, [r3, #0]
    PB0     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003016:	2301      	movs	r3, #1
 8003018:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301c:	2302      	movs	r3, #2
 800301e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003028:	2300      	movs	r3, #0
 800302a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800302e:	2305      	movs	r3, #5
 8003030:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003034:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8003038:	4619      	mov	r1, r3
 800303a:	4810      	ldr	r0, [pc, #64]	@ (800307c <HAL_SPI_MspInit+0x148>)
 800303c:	f001 fe6a 	bl	8004d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 8003040:	23e0      	movs	r3, #224	@ 0xe0
 8003042:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003046:	2302      	movs	r3, #2
 8003048:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003052:	2300      	movs	r3, #0
 8003054:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003058:	2305      	movs	r3, #5
 800305a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8003062:	4619      	mov	r1, r3
 8003064:	4806      	ldr	r0, [pc, #24]	@ (8003080 <HAL_SPI_MspInit+0x14c>)
 8003066:	f001 fe55 	bl	8004d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800306a:	bf00      	nop
 800306c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40013000 	.word	0x40013000
 8003078:	46020c00 	.word	0x46020c00
 800307c:	42020400 	.word	0x42020400
 8003080:	42020000 	.word	0x42020000

08003084 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08e      	sub	sp, #56	@ 0x38
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800308c:	2300      	movs	r3, #0
 800308e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003094:	4b2e      	ldr	r3, [pc, #184]	@ (8003150 <HAL_InitTick+0xcc>)
 8003096:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800309a:	4a2d      	ldr	r2, [pc, #180]	@ (8003150 <HAL_InitTick+0xcc>)
 800309c:	f043 0310 	orr.w	r3, r3, #16
 80030a0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80030a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003150 <HAL_InitTick+0xcc>)
 80030a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030aa:	f003 0310 	and.w	r3, r3, #16
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030b2:	f107 0210 	add.w	r2, r7, #16
 80030b6:	f107 0314 	add.w	r3, r7, #20
 80030ba:	4611      	mov	r1, r2
 80030bc:	4618      	mov	r0, r3
 80030be:	f005 ff1b 	bl	8008ef8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80030c2:	f005 fedd 	bl	8008e80 <HAL_RCC_GetPCLK1Freq>
 80030c6:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ca:	4a22      	ldr	r2, [pc, #136]	@ (8003154 <HAL_InitTick+0xd0>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	0c9b      	lsrs	r3, r3, #18
 80030d2:	3b01      	subs	r3, #1
 80030d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80030d6:	4b20      	ldr	r3, [pc, #128]	@ (8003158 <HAL_InitTick+0xd4>)
 80030d8:	4a20      	ldr	r2, [pc, #128]	@ (800315c <HAL_InitTick+0xd8>)
 80030da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80030dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003158 <HAL_InitTick+0xd4>)
 80030de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80030e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80030e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003158 <HAL_InitTick+0xd4>)
 80030e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80030ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003158 <HAL_InitTick+0xd4>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f0:	4b19      	ldr	r3, [pc, #100]	@ (8003158 <HAL_InitTick+0xd4>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80030f6:	4818      	ldr	r0, [pc, #96]	@ (8003158 <HAL_InitTick+0xd4>)
 80030f8:	f009 fc06 	bl	800c908 <HAL_TIM_Base_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8003102:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003106:	2b00      	cmp	r3, #0
 8003108:	d118      	bne.n	800313c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800310a:	4813      	ldr	r0, [pc, #76]	@ (8003158 <HAL_InitTick+0xd4>)
 800310c:	f009 fc5e 	bl	800c9cc <HAL_TIM_Base_Start_IT>
 8003110:	4603      	mov	r3, r0
 8003112:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8003116:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10e      	bne.n	800313c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b0f      	cmp	r3, #15
 8003122:	d808      	bhi.n	8003136 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8003124:	2200      	movs	r2, #0
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	2031      	movs	r0, #49	@ 0x31
 800312a:	f000 fa1f 	bl	800356c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800312e:	4a0c      	ldr	r2, [pc, #48]	@ (8003160 <HAL_InitTick+0xdc>)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	e002      	b.n	800313c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800313c:	2031      	movs	r0, #49	@ 0x31
 800313e:	f000 fa2f 	bl	80035a0 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8003142:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8003146:	4618      	mov	r0, r3
 8003148:	3738      	adds	r7, #56	@ 0x38
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	46020c00 	.word	0x46020c00
 8003154:	431bde83 	.word	0x431bde83
 8003158:	200014d8 	.word	0x200014d8
 800315c:	40001000 	.word	0x40001000
 8003160:	20000d04 	.word	0x20000d04

08003164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003168:	f005 ff0e 	bl	8008f88 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800316c:	bf00      	nop
 800316e:	e7fd      	b.n	800316c <NMI_Handler+0x8>

08003170 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003174:	bf00      	nop
 8003176:	e7fd      	b.n	8003174 <HardFault_Handler+0x4>

08003178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800317c:	bf00      	nop
 800317e:	e7fd      	b.n	800317c <MemManage_Handler+0x4>

08003180 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003184:	bf00      	nop
 8003186:	e7fd      	b.n	8003184 <BusFault_Handler+0x4>

08003188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800318c:	bf00      	nop
 800318e:	e7fd      	b.n	800318c <UsageFault_Handler+0x4>

08003190 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800319e:	b480      	push	{r7}
 80031a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031be:	bf00      	nop
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031cc:	4802      	ldr	r0, [pc, #8]	@ (80031d8 <TIM6_IRQHandler+0x10>)
 80031ce:	f009 fc9d 	bl	800cb0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80031d2:	bf00      	nop
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	200014d8 	.word	0x200014d8

080031dc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80031e0:	4802      	ldr	r0, [pc, #8]	@ (80031ec <DMA2D_IRQHandler+0x10>)
 80031e2:	f000 fc65 	bl	8003ab0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000e64 	.word	0x20000e64

080031f0 <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 80031f4:	4802      	ldr	r0, [pc, #8]	@ (8003200 <GPU2D_IRQHandler+0x10>)
 80031f6:	f001 ffa7 	bl	8005148 <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000f30 	.word	0x20000f30

08003204 <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 8003208:	4802      	ldr	r0, [pc, #8]	@ (8003214 <GPU2D_ER_IRQHandler+0x10>)
 800320a:	f001 ffc3 	bl	8005194 <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000f30 	.word	0x20000f30

08003218 <GFXMMU_IRQHandler>:

/**
  * @brief This function handles GFXMMU global interrupt.
  */
void GFXMMU_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GFXMMU_IRQn 0 */

  /* USER CODE END GFXMMU_IRQn 0 */
  HAL_GFXMMU_IRQHandler(&hgfxmmu);
 800321c:	4802      	ldr	r0, [pc, #8]	@ (8003228 <GFXMMU_IRQHandler+0x10>)
 800321e:	f001 fd49 	bl	8004cb4 <HAL_GFXMMU_IRQHandler>
  /* USER CODE BEGIN GFXMMU_IRQn 1 */

  /* USER CODE END GFXMMU_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000ee8 	.word	0x20000ee8

0800322c <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003230:	4802      	ldr	r0, [pc, #8]	@ (800323c <LTDC_IRQHandler+0x10>)
 8003232:	f002 ff47 	bl	80060c4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	2000129c 	.word	0x2000129c

08003240 <DSI_IRQHandler>:

/**
  * @brief This function handles DSIHOST global interrupt.
  */
void DSI_IRQHandler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8003244:	4802      	ldr	r0, [pc, #8]	@ (8003250 <DSI_IRQHandler+0x10>)
 8003246:	f001 f88b 	bl	8004360 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20000ec4 	.word	0x20000ec4

08003254 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003258:	4b18      	ldr	r3, [pc, #96]	@ (80032bc <SystemInit+0x68>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325e:	4a17      	ldr	r2, [pc, #92]	@ (80032bc <SystemInit+0x68>)
 8003260:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003264:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8003268:	4b15      	ldr	r3, [pc, #84]	@ (80032c0 <SystemInit+0x6c>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800326e:	4b14      	ldr	r3, [pc, #80]	@ (80032c0 <SystemInit+0x6c>)
 8003270:	2200      	movs	r2, #0
 8003272:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003274:	4b12      	ldr	r3, [pc, #72]	@ (80032c0 <SystemInit+0x6c>)
 8003276:	2200      	movs	r2, #0
 8003278:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800327a:	4b11      	ldr	r3, [pc, #68]	@ (80032c0 <SystemInit+0x6c>)
 800327c:	2200      	movs	r2, #0
 800327e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8003280:	4b0f      	ldr	r3, [pc, #60]	@ (80032c0 <SystemInit+0x6c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a0e      	ldr	r2, [pc, #56]	@ (80032c0 <SystemInit+0x6c>)
 8003286:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800328a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800328e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8003290:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <SystemInit+0x6c>)
 8003292:	2200      	movs	r2, #0
 8003294:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003296:	4b0a      	ldr	r3, [pc, #40]	@ (80032c0 <SystemInit+0x6c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a09      	ldr	r2, [pc, #36]	@ (80032c0 <SystemInit+0x6c>)
 800329c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80032a2:	4b07      	ldr	r3, [pc, #28]	@ (80032c0 <SystemInit+0x6c>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032a8:	4b04      	ldr	r3, [pc, #16]	@ (80032bc <SystemInit+0x68>)
 80032aa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80032ae:	609a      	str	r2, [r3, #8]
  #endif
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	e000ed00 	.word	0xe000ed00
 80032c0:	46020c00 	.word	0x46020c00

080032c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80032c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032fc <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80032c8:	f7ff ffc4 	bl	8003254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80032cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80032ce:	e003      	b.n	80032d8 <LoopCopyDataInit>

080032d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80032d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003300 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80032d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80032d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80032d6:	3104      	adds	r1, #4

080032d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80032d8:	480a      	ldr	r0, [pc, #40]	@ (8003304 <LoopForever+0xa>)
	ldr	r3, =_edata
 80032da:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <LoopForever+0xe>)
	adds	r2, r0, r1
 80032dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80032de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80032e0:	d3f6      	bcc.n	80032d0 <CopyDataInit>
	ldr	r2, =_sbss
 80032e2:	4a0a      	ldr	r2, [pc, #40]	@ (800330c <LoopForever+0x12>)
	b	LoopFillZerobss
 80032e4:	e002      	b.n	80032ec <LoopFillZerobss>

080032e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80032e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80032e8:	f842 3b04 	str.w	r3, [r2], #4

080032ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80032ec:	4b08      	ldr	r3, [pc, #32]	@ (8003310 <LoopForever+0x16>)
	cmp	r2, r3
 80032ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80032f0:	d3f9      	bcc.n	80032e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032f2:	f00a fc05 	bl	800db00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032f6:	f7fd fb45 	bl	8000984 <main>

080032fa <LoopForever>:

LoopForever:
    b LoopForever
 80032fa:	e7fe      	b.n	80032fa <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80032fc:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8003300:	0800dc70 	.word	0x0800dc70
	ldr	r0, =_sdata
 8003304:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003308:	20000d09 	.word	0x20000d09
	ldr	r2, =_sbss
 800330c:	20000d0c 	.word	0x20000d0c
	ldr	r3, = _ebss
 8003310:	2000154c 	.word	0x2000154c

08003314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003314:	e7fe      	b.n	8003314 <ADC1_2_IRQHandler>
	...

08003318 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800331c:	4b11      	ldr	r3, [pc, #68]	@ (8003364 <HAL_Init+0x4c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a10      	ldr	r2, [pc, #64]	@ (8003364 <HAL_Init+0x4c>)
 8003322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003326:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003328:	2003      	movs	r0, #3
 800332a:	f000 f914 	bl	8003556 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800332e:	f005 fc8b 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 8003332:	4602      	mov	r2, r0
 8003334:	4b0c      	ldr	r3, [pc, #48]	@ (8003368 <HAL_Init+0x50>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	490b      	ldr	r1, [pc, #44]	@ (800336c <HAL_Init+0x54>)
 800333e:	5ccb      	ldrb	r3, [r1, r3]
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
 8003344:	4a0a      	ldr	r2, [pc, #40]	@ (8003370 <HAL_Init+0x58>)
 8003346:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003348:	200f      	movs	r0, #15
 800334a:	f7ff fe9b 	bl	8003084 <HAL_InitTick>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e002      	b.n	800335e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003358:	f7fe fdba 	bl	8001ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40022000 	.word	0x40022000
 8003368:	46020c00 	.word	0x46020c00
 800336c:	0800db60 	.word	0x0800db60
 8003370:	20000d00 	.word	0x20000d00

08003374 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003378:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <HAL_IncTick+0x20>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <HAL_IncTick+0x24>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4413      	add	r3, r2
 8003384:	4a04      	ldr	r2, [pc, #16]	@ (8003398 <HAL_IncTick+0x24>)
 8003386:	6013      	str	r3, [r2, #0]
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000d08 	.word	0x20000d08
 8003398:	20001524 	.word	0x20001524

0800339c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return uwTick;
 80033a0:	4b03      	ldr	r3, [pc, #12]	@ (80033b0 <HAL_GetTick+0x14>)
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20001524 	.word	0x20001524

080033b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033bc:	f7ff ffee 	bl	800339c <HAL_GetTick>
 80033c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d005      	beq.n	80033da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ce:	4b0a      	ldr	r3, [pc, #40]	@ (80033f8 <HAL_Delay+0x44>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4413      	add	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033da:	bf00      	nop
 80033dc:	f7ff ffde 	bl	800339c <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d8f7      	bhi.n	80033dc <HAL_Delay+0x28>
  {
  }
}
 80033ec:	bf00      	nop
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000d08 	.word	0x20000d08

080033fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800340c:	4b0c      	ldr	r3, [pc, #48]	@ (8003440 <__NVIC_SetPriorityGrouping+0x44>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003418:	4013      	ands	r3, r2
 800341a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003424:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800342c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800342e:	4a04      	ldr	r2, [pc, #16]	@ (8003440 <__NVIC_SetPriorityGrouping+0x44>)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	60d3      	str	r3, [r2, #12]
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003448:	4b04      	ldr	r3, [pc, #16]	@ (800345c <__NVIC_GetPriorityGrouping+0x18>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	0a1b      	lsrs	r3, r3, #8
 800344e:	f003 0307 	and.w	r3, r3, #7
}
 8003452:	4618      	mov	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800346a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800346e:	2b00      	cmp	r3, #0
 8003470:	db0b      	blt.n	800348a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	f003 021f 	and.w	r2, r3, #31
 8003478:	4907      	ldr	r1, [pc, #28]	@ (8003498 <__NVIC_EnableIRQ+0x38>)
 800347a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	2001      	movs	r0, #1
 8003482:	fa00 f202 	lsl.w	r2, r0, r2
 8003486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	e000e100 	.word	0xe000e100

0800349c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	6039      	str	r1, [r7, #0]
 80034a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	db0a      	blt.n	80034c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	490c      	ldr	r1, [pc, #48]	@ (80034e8 <__NVIC_SetPriority+0x4c>)
 80034b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ba:	0112      	lsls	r2, r2, #4
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	440b      	add	r3, r1
 80034c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034c4:	e00a      	b.n	80034dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	4908      	ldr	r1, [pc, #32]	@ (80034ec <__NVIC_SetPriority+0x50>)
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	3b04      	subs	r3, #4
 80034d4:	0112      	lsls	r2, r2, #4
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	440b      	add	r3, r1
 80034da:	761a      	strb	r2, [r3, #24]
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000e100 	.word	0xe000e100
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b089      	sub	sp, #36	@ 0x24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f1c3 0307 	rsb	r3, r3, #7
 800350a:	2b04      	cmp	r3, #4
 800350c:	bf28      	it	cs
 800350e:	2304      	movcs	r3, #4
 8003510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3304      	adds	r3, #4
 8003516:	2b06      	cmp	r3, #6
 8003518:	d902      	bls.n	8003520 <NVIC_EncodePriority+0x30>
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3b03      	subs	r3, #3
 800351e:	e000      	b.n	8003522 <NVIC_EncodePriority+0x32>
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003524:	f04f 32ff 	mov.w	r2, #4294967295
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43da      	mvns	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	401a      	ands	r2, r3
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003538:	f04f 31ff 	mov.w	r1, #4294967295
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	fa01 f303 	lsl.w	r3, r1, r3
 8003542:	43d9      	mvns	r1, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	4313      	orrs	r3, r2
         );
}
 800354a:	4618      	mov	r0, r3
 800354c:	3724      	adds	r7, #36	@ 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff ff4c 	bl	80033fc <__NVIC_SetPriorityGrouping>
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800357a:	f7ff ff63 	bl	8003444 <__NVIC_GetPriorityGrouping>
 800357e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	6978      	ldr	r0, [r7, #20]
 8003586:	f7ff ffb3 	bl	80034f0 <NVIC_EncodePriority>
 800358a:	4602      	mov	r2, r0
 800358c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003590:	4611      	mov	r1, r2
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff ff82 	bl	800349c <__NVIC_SetPriority>
}
 8003598:	bf00      	nop
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff ff56 	bl	8003460 <__NVIC_EnableIRQ>
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e054      	b.n	8003678 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7f5b      	ldrb	r3, [r3, #29]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fe fd0a 	bl	8001ff8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	791b      	ldrb	r3, [r3, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10c      	bne.n	800360c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a22      	ldr	r2, [pc, #136]	@ (8003680 <HAL_CRC_Init+0xc4>)
 80035f8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0218 	bic.w	r2, r2, #24
 8003608:	609a      	str	r2, [r3, #8]
 800360a:	e00c      	b.n	8003626 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6899      	ldr	r1, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	461a      	mov	r2, r3
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f834 	bl	8003684 <HAL_CRCEx_Polynomial_Set>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e028      	b.n	8003678 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	795b      	ldrb	r3, [r3, #5]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d105      	bne.n	800363a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f04f 32ff 	mov.w	r2, #4294967295
 8003636:	611a      	str	r2, [r3, #16]
 8003638:	e004      	b.n	8003644 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6912      	ldr	r2, [r2, #16]
 8003642:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699a      	ldr	r2, [r3, #24]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	04c11db7 	.word	0x04c11db7

08003684 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003694:	231f      	movs	r3, #31
 8003696:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d102      	bne.n	80036a8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	75fb      	strb	r3, [r7, #23]
 80036a6:	e063      	b.n	8003770 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80036a8:	bf00      	nop
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1e5a      	subs	r2, r3, #1
 80036ae:	613a      	str	r2, [r7, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d009      	beq.n	80036c8 <HAL_CRCEx_Polynomial_Set+0x44>
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b18      	cmp	r3, #24
 80036cc:	d846      	bhi.n	800375c <HAL_CRCEx_Polynomial_Set+0xd8>
 80036ce:	a201      	add	r2, pc, #4	@ (adr r2, 80036d4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80036d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d4:	08003763 	.word	0x08003763
 80036d8:	0800375d 	.word	0x0800375d
 80036dc:	0800375d 	.word	0x0800375d
 80036e0:	0800375d 	.word	0x0800375d
 80036e4:	0800375d 	.word	0x0800375d
 80036e8:	0800375d 	.word	0x0800375d
 80036ec:	0800375d 	.word	0x0800375d
 80036f0:	0800375d 	.word	0x0800375d
 80036f4:	08003751 	.word	0x08003751
 80036f8:	0800375d 	.word	0x0800375d
 80036fc:	0800375d 	.word	0x0800375d
 8003700:	0800375d 	.word	0x0800375d
 8003704:	0800375d 	.word	0x0800375d
 8003708:	0800375d 	.word	0x0800375d
 800370c:	0800375d 	.word	0x0800375d
 8003710:	0800375d 	.word	0x0800375d
 8003714:	08003745 	.word	0x08003745
 8003718:	0800375d 	.word	0x0800375d
 800371c:	0800375d 	.word	0x0800375d
 8003720:	0800375d 	.word	0x0800375d
 8003724:	0800375d 	.word	0x0800375d
 8003728:	0800375d 	.word	0x0800375d
 800372c:	0800375d 	.word	0x0800375d
 8003730:	0800375d 	.word	0x0800375d
 8003734:	08003739 	.word	0x08003739
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b06      	cmp	r3, #6
 800373c:	d913      	bls.n	8003766 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003742:	e010      	b.n	8003766 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	2b07      	cmp	r3, #7
 8003748:	d90f      	bls.n	800376a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800374e:	e00c      	b.n	800376a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b0f      	cmp	r3, #15
 8003754:	d90b      	bls.n	800376e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800375a:	e008      	b.n	800376e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	75fb      	strb	r3, [r7, #23]
        break;
 8003760:	e006      	b.n	8003770 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003762:	bf00      	nop
 8003764:	e004      	b.n	8003770 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003766:	bf00      	nop
 8003768:	e002      	b.n	8003770 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800376a:	bf00      	nop
 800376c:	e000      	b.n	8003770 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800376e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10d      	bne.n	8003792 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f023 0118 	bic.w	r1, r3, #24
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	430a      	orrs	r2, r1
 8003790:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003792:	7dfb      	ldrb	r3, [r7, #23]
}
 8003794:	4618      	mov	r0, r3
 8003796:	371c      	adds	r7, #28
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e037      	b.n	8003822 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d119      	bne.n	80037f2 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a1a      	ldr	r2, [pc, #104]	@ (800382c <HAL_DCACHE_Init+0x8c>)
 80037c2:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003830 <HAL_DCACHE_Init+0x90>)
 80037c8:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a19      	ldr	r2, [pc, #100]	@ (8003834 <HAL_DCACHE_Init+0x94>)
 80037ce:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a19      	ldr	r2, [pc, #100]	@ (8003838 <HAL_DCACHE_Init+0x98>)
 80037d4:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a18      	ldr	r2, [pc, #96]	@ (800383c <HAL_DCACHE_Init+0x9c>)
 80037da:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d102      	bne.n	80037ea <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a16      	ldr	r2, [pc, #88]	@ (8003840 <HAL_DCACHE_Init+0xa0>)
 80037e8:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f814 	bl	8003844 <HAL_DCACHE_Enable>
 800381c:	4603      	mov	r3, r0
 800381e:	73fb      	strb	r3, [r7, #15]

  return status;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	080038e3 	.word	0x080038e3
 8003830:	08003893 	.word	0x08003893
 8003834:	080038a7 	.word	0x080038a7
 8003838:	080038cf 	.word	0x080038cf
 800383c:	080038bb 	.word	0x080038bb
 8003840:	0800203d 	.word	0x0800203d

08003844 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e015      	b.n	8003886 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0309 	and.w	r3, r3, #9
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8003868:	2302      	movs	r3, #2
 800386a:	73fb      	strb	r3, [r7, #15]
 800386c:	e00a      	b.n	8003884 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
  }

  return status;
 8003884:	7bfb      	ldrb	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80038fe:	f7ff fd4d 	bl	800339c <HAL_GetTick>
 8003902:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e06b      	b.n	80039e6 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d008      	beq.n	800392c <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e05c      	b.n	80039e6 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0204 	orr.w	r2, r2, #4
 800393a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2205      	movs	r2, #5
 8003940:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003944:	e020      	b.n	8003988 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003946:	f7ff fd29 	bl	800339c <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b05      	cmp	r3, #5
 8003952:	d919      	bls.n	8003988 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003958:	f043 0210 	orr.w	r2, r3, #16
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2203      	movs	r2, #3
 8003964:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800396c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003978:	2201      	movs	r2, #1
 800397a:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e02e      	b.n	80039e6 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0d7      	beq.n	8003946 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0202 	orr.w	r2, r2, #2
 80039a4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2204      	movs	r2, #4
 80039aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80039b6:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d0:	2201      	movs	r2, #1
 80039d2:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2200      	movs	r2, #0
 80039da:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e053      	b.n	8003aa8 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d106      	bne.n	8003a1a <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7fe fb4b 	bl	80020b0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003a2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6851      	ldr	r1, [r2, #4]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	69d2      	ldr	r2, [r2, #28]
 8003a38:	4311      	orrs	r1, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	430b      	orrs	r3, r1
 8003a40:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a48:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6891      	ldr	r1, [r2, #8]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6992      	ldr	r2, [r2, #24]
 8003a58:	4311      	orrs	r1, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	0c1b      	lsrs	r3, r3, #16
 8003a6a:	041b      	lsls	r3, r3, #16
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	68d1      	ldr	r1, [r2, #12]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	430b      	orrs	r3, r1
 8003a76:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	051a      	lsls	r2, r3, #20
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	055b      	lsls	r3, r3, #21
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d026      	beq.n	8003b20 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d021      	beq.n	8003b20 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003aea:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af0:	f043 0201 	orr.w	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2201      	movs	r2, #1
 8003afe:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2204      	movs	r2, #4
 8003b04:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d026      	beq.n	8003b78 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d021      	beq.n	8003b78 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b42:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b50:	f043 0202 	orr.w	r2, r3, #2
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d026      	beq.n	8003bd0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d021      	beq.n	8003bd0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b9a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2208      	movs	r2, #8
 8003ba2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba8:	f043 0204 	orr.w	r2, r3, #4
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d013      	beq.n	8003c02 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00e      	beq.n	8003c02 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bf2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2204      	movs	r2, #4
 8003bfa:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f853 	bl	8003ca8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d024      	beq.n	8003c56 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01f      	beq.n	8003c56 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003c24:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferCpltCallback != NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01f      	beq.n	8003ca0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d01a      	beq.n	8003ca0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c78:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2210      	movs	r2, #16
 8003c80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f80e 	bl	8003cbc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003ca0:	bf00      	nop
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_DMA2D_ConfigLayer+0x20>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e084      	b.n	8003dfa <HAL_DMA2D_ConfigLayer+0x12a>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	4613      	mov	r3, r2
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	3328      	adds	r3, #40	@ 0x28
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4413      	add	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	041b      	lsls	r3, r3, #16
 8003d1c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003d24:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003d30:	4b35      	ldr	r3, [pc, #212]	@ (8003e08 <HAL_DMA2D_ConfigLayer+0x138>)
 8003d32:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b0a      	cmp	r3, #10
 8003d3a:	d003      	beq.n	8003d44 <HAL_DMA2D_ConfigLayer+0x74>
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b09      	cmp	r3, #9
 8003d42:	d107      	bne.n	8003d54 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	e005      	b.n	8003d60 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	061b      	lsls	r3, r3, #24
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d120      	bne.n	8003da8 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	ea02 0103 	and.w	r1, r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b0a      	cmp	r3, #10
 8003d8e:	d003      	beq.n	8003d98 <HAL_DMA2D_ConfigLayer+0xc8>
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b09      	cmp	r3, #9
 8003d96:	d127      	bne.n	8003de8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003da4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003da6:	e01f      	b.n	8003de8 <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	ea02 0103 	and.w	r1, r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b0a      	cmp	r3, #10
 8003dd0:	d003      	beq.n	8003dda <HAL_DMA2D_ConfigLayer+0x10a>
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b09      	cmp	r3, #9
 8003dd8:	d106      	bne.n	8003de8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003de6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	ff33000f 	.word	0xff33000f

08003e0c <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8003e24:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	@ 0xc04
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	00da      	lsls	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	220e      	movs	r2, #14
 8003e46:	f8c3 2c34 	str.w	r2, [r3, #3124]	@ 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	@ 0xc70
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 021f 	bic.w	r2, r2, #31
 8003e5a:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6912      	ldr	r2, [r2, #16]
 8003e66:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	220e      	movs	r2, #14
 8003e70:	f8c3 2ca0 	str.w	r2, [r3, #3232]	@ 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	@ 0xd08
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 021f 	bic.w	r2, r2, #31
 8003e84:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6912      	ldr	r2, [r2, #16]
 8003e90:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	220e      	movs	r2, #14
 8003e9a:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	@ 0xc5c
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003eae:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	@ 0xcf4
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003ec2:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d007      	beq.n	8003ede <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d003      	beq.n	8003ede <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8003eda:	2b05      	cmp	r3, #5
 8003edc:	d10a      	bne.n	8003ef4 <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 8003ef2:	e02c      	b.n	8003f4e <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00b      	beq.n	8003f14 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d007      	beq.n	8003f14 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d003      	beq.n	8003f14 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8003f10:	2b06      	cmp	r3, #6
 8003f12:	d10a      	bne.n	8003f2a <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2210      	movs	r2, #16
 8003f1a:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2210      	movs	r2, #16
 8003f24:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 8003f28:	e011      	b.n	8003f4e <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b07      	cmp	r3, #7
 8003f30:	d003      	beq.n	8003f3a <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d109      	bne.n	8003f4e <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	@ 0xc60
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 020f 	bic.w	r2, r2, #15
 8003f5e:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	@ 0xcf8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 020f 	bic.w	r2, r2, #15
 8003f72:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6952      	ldr	r2, [r2, #20]
 8003f7e:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6952      	ldr	r2, [r2, #20]
 8003f8a:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8003fb4:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	075a      	lsls	r2, r3, #29
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8d3 2434 	ldr.w	r2, [r3, #1076]	@ 0x434
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003fe0:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	031a      	lsls	r2, r3, #12
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	021a      	lsls	r2, r3, #8
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0c3      	b.n	80041bc <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	7e5b      	ldrb	r3, [r3, #25]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d102      	bne.n	8004044 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7fe f85e 	bl	8002100 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2203      	movs	r2, #3
 8004048:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800405a:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 800405e:	2002      	movs	r0, #2
 8004060:	f7ff f9a8 	bl	80033b4 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4b54      	ldr	r3, [pc, #336]	@ (80041c4 <HAL_DSI_Init+0x1a4>)
 8004072:	400b      	ands	r3, r1
 8004074:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800408c:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004094:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff feb3 	bl	8003e0c <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 80040a6:	6839      	ldr	r1, [r7, #0]
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff ff76 	bl	8003f9a <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80040d6:	2001      	movs	r0, #1
 80040d8:	f7ff f96c 	bl	80033b4 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80040dc:	f7ff f95e 	bl	800339c <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80040e4:	f7ff f95a 	bl	800339c <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	@ 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e062      	b.n	80041bc <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80040fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0ee      	beq.n	80040e4 <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0206 	orr.w	r2, r2, #6
 8004116:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0203 	bic.w	r2, r2, #3
 800412a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0201 	orr.w	r2, r2, #1
 8004144:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0203 	bic.w	r2, r2, #3
 8004158:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004180:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6899      	ldr	r1, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2200      	movs	r2, #0
 800419a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	e0000003 	.word	0xe0000003

080041c8 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	7e1b      	ldrb	r3, [r3, #24]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_DSI_ConfigErrorMonitor+0x16>
 80041da:	2302      	movs	r3, #2
 80041dc:	e0ba      	b.n	8004354 <HAL_DSI_ConfigErrorMonitor+0x18c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00b      	beq.n	8004220 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8004218:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800421c:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 800423a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d009      	beq.n	800425c <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0201 	orr.w	r2, r2, #1
 8004258:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0202 	orr.w	r2, r2, #2
 8004276:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	2b00      	cmp	r3, #0
 8004282:	d009      	beq.n	8004298 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 020c 	orr.w	r2, r2, #12
 8004294:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0210 	orr.w	r2, r2, #16
 80042b2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0220 	orr.w	r2, r2, #32
 80042d0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042ee:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d009      	beq.n	8004310 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800430c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004316:	2b00      	cmp	r3, #0
 8004318:	d009      	beq.n	800432e <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 800432a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004334:	2b00      	cmp	r3, #0
 8004336:	d009      	beq.n	800434c <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8004348:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00f      	beq.n	8004398 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2201      	movs	r2, #1
 800438e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f8b8 	bl	8004508 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00f      	beq.n	80043c8 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2202      	movs	r2, #2
 80043be:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f8aa 	bl	800451c <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8097 	beq.w	8004500 <HAL_DSI_IRQHandler+0x1a0>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80043da:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4013      	ands	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80043f2:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	4013      	ands	r3, r2
 8004400:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	f043 0201 	orr.w	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f043 0202 	orr.w	r2, r3, #2
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f043 0204 	orr.w	r2, r3, #4
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	f043 0208 	orr.w	r2, r3, #8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f043 0210 	orr.w	r2, r3, #16
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f043 0220 	orr.w	r2, r3, #32
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0320 	and.w	r3, r3, #32
 800448a:	2b00      	cmp	r3, #0
 800448c:	d005      	beq.n	800449a <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PBU_MASK) != 0U)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_DSI_IRQHandler+0x192>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PBU;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	61da      	str	r2, [r3, #28]
    }
    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_DSI_IRQHandler+0x1a0>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f818 	bl	8004530 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	7e1b      	ldrb	r3, [r3, #24]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_DSI_SetGenericVCID+0x16>
 8004556:	2302      	movs	r3, #2
 8004558:	e019      	b.n	800458e <HAL_DSI_SetGenericVCID+0x4a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 1203 	bic.w	r2, r2, #196611	@ 0x30003
 800456e:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6b19      	ldr	r1, [r3, #48]	@ 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	7e1b      	ldrb	r3, [r3, #24]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e0c5      	b.n	800473c <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0201 	orr.w	r2, r2, #1
 80045c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0203 	bic.w	r2, r2, #3
 80045fc:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68d9      	ldr	r1, [r3, #12]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695a      	ldr	r2, [r3, #20]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0207 	bic.w	r2, r2, #7
 800461e:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6959      	ldr	r1, [r3, #20]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	69da      	ldr	r2, [r3, #28]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	431a      	orrs	r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 020f 	bic.w	r2, r2, #15
 800464c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6919      	ldr	r1, [r3, #16]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 020e 	bic.w	r2, r2, #14
 8004670:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	005a      	lsls	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80046be:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d8:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0201 	bic.w	r2, r2, #1
 80046f8:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0202 	orr.w	r2, r2, #2
 8004730:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	7e1b      	ldrb	r3, [r3, #24]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_DSI_ConfigCommand+0x16>
 800475a:	2302      	movs	r3, #2
 800475c:	e049      	b.n	80047f2 <HAL_DSI_ConfigCommand+0xaa>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b24      	ldr	r3, [pc, #144]	@ (8004800 <HAL_DSI_ConfigCommand+0xb8>)
 8004770:	400b      	ands	r3, r1
 8004772:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004782:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004788:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800478e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004794:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800479a:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80047a0:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80047a6:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80047ac:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80047b2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80047b8:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80047be:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0202 	bic.w	r2, r2, #2
 80047d6:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	fef080ff 	.word	0xfef080ff

08004804 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	7e1b      	ldrb	r3, [r3, #24]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_DSI_ConfigFlowControl+0x16>
 8004816:	2302      	movs	r3, #2
 8004818:	e016      	b.n	8004848 <HAL_DSI_ConfigFlowControl+0x44>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800482e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	7e1b      	ldrb	r3, [r3, #24]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_DSI_ConfigPhyTimer+0x16>
 8004866:	2302      	movs	r3, #2
 8004868:	e084      	b.n	8004974 <HAL_DSI_ConfigPhyTimer+0x120>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	441a      	add	r2, r3
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695a      	ldr	r2, [r3, #20]
 8004886:	4613      	mov	r3, r2
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	4413      	add	r3, r2
 800488c:	18ca      	adds	r2, r1, r3
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	441a      	add	r2, r3
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4293      	cmp	r3, r2
 80048ac:	bf38      	it	cc
 80048ae:	4613      	movcc	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80048c2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	041a      	lsls	r2, r3, #16
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80048f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	041b      	lsls	r3, r3, #16
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004922:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004926:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	691a      	ldr	r2, [r3, #16]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004950:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	021a      	lsls	r2, r3, #8
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	7e1b      	ldrb	r3, [r3, #24]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_DSI_ConfigHostTimeouts+0x16>
 8004992:	2302      	movs	r3, #2
 8004994:	e0b4      	b.n	8004b00 <HAL_DSI_ConfigHostTimeouts+0x180>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80049aa:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6899      	ldr	r1, [r3, #8]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	021a      	lsls	r2, r3, #8
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	b292      	uxth	r2, r2
 80049cc:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	041a      	lsls	r2, r3, #16
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	0c1b      	lsrs	r3, r3, #16
 80049ee:	041b      	lsls	r3, r3, #16
 80049f0:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	0c1b      	lsrs	r3, r3, #16
 8004a10:	041b      	lsls	r3, r3, #16
 8004a12:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	0c1b      	lsrs	r3, r3, #16
 8004a34:	041b      	lsls	r3, r3, #16
 8004a36:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	0c1b      	lsrs	r3, r3, #16
 8004a5e:	041b      	lsls	r3, r3, #16
 8004a60:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	695a      	ldr	r2, [r3, #20]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004a8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	0c1b      	lsrs	r3, r3, #16
 8004ab2:	041b      	lsls	r3, r3, #16
 8004ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	0c1b      	lsrs	r3, r3, #16
 8004adc:	041b      	lsls	r3, r3, #16
 8004ade:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6a1a      	ldr	r2, [r3, #32]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_GFXMMU_Init>:
  *         GFXMMU_InitTypeDef structure and initialize the associated handle.
  * @param  hgfxmmu GFXMMU handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GFXMMU_Init(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	73fb      	strb	r3, [r7, #15]

  /* Check GFXMMU handle */
  if (hgfxmmu == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <HAL_GFXMMU_Init+0x18>
  {
    status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	73fb      	strb	r3, [r7, #15]
 8004b22:	e06e      	b.n	8004c02 <HAL_GFXMMU_Init+0xf6>
      hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
    }
    hgfxmmu->MspInitCallback(hgfxmmu);
#else
    /* Call GFXMMU MSP init function */
    HAL_GFXMMU_MspInit(hgfxmmu);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7fd fb6f 	bl	8002208 <HAL_GFXMMU_MspInit>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */

    /* Configure GFXMMU_CR register */
    hgfxmmu->Instance->CR = 0U;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
    hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlocksPerLine);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6819      	ldr	r1, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]
#if defined(GFXMMU_CR_CE)
    if (hgfxmmu->Init.CachePrefetch.Activation == ENABLE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	7f1b      	ldrb	r3, [r3, #28]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d12c      	bne.n	8004ba6 <HAL_GFXMMU_Init+0x9a>
    {
      assert_param(IS_GFXMMU_CACHE_LOCK(hgfxmmu->Init.CachePrefetch.CacheLock));
      assert_param(IS_GFXMMU_PREFETCH(hgfxmmu->Init.CachePrefetch.Prefetch));
      assert_param(IS_GFXMMU_OUTTER_BUFFERABILITY(hgfxmmu->Init.CachePrefetch.OutterBufferability));
      assert_param(IS_GFXMMU_OUTTER_CACHABILITY(hgfxmmu->Init.CachePrefetch.OutterCachability));
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a19      	ldr	r1, [r3, #32]
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 8004b5a:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 8004b60:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterCachability);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 8004b66:	430b      	orrs	r3, r1
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b72:	601a      	str	r2, [r3, #0]
      if (hgfxmmu->Init.CachePrefetch.CacheLock == GFXMMU_CACHE_LOCK_ENABLE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b7c:	d10b      	bne.n	8004b96 <HAL_GFXMMU_Init+0x8a>
      {
        assert_param(IS_GFXMMU_CACHE_LOCK_BUFFER(hgfxmmu->Init.CachePrefetch.CacheLockBuffer));
        assert_param(IS_GFXMMU_CACHE_FORCE(hgfxmmu->Init.CachePrefetch.CacheForce));
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6819      	ldr	r1, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                  hgfxmmu->Init.CachePrefetch.CacheForce);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	601a      	str	r2, [r3, #0]
      }

      /* Force invalidate cache if cache is enabled */
      hgfxmmu->Instance->CCR |= GFXMMU_CACHE_FORCE_INVALIDATE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0202 	orr.w	r2, r2, #2
 8004ba4:	60da      	str	r2, [r3, #12]
      assert_param(IS_GFXMMU_ADDRESSCACHE_LOCK_BUFFER(hgfxmmu->Init.AddressCache.AddressCacheLockBuffer));
      hgfxmmu->Instance->CR |= GFXMMU_CR_ACE |
                               hgfxmmu->Init.AddressCache.AddressCacheLockBuffer;
    }
#endif /* GFXMMU_CR_ACE */
    if (hgfxmmu->Init.Interrupts.Activation == ENABLE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d108      	bne.n	8004bc2 <HAL_GFXMMU_Init+0xb6>
    {
      assert_param(IS_GFXMMU_INTERRUPTS(hgfxmmu->Init.Interrupts.UsedInterrupts));
      hgfxmmu->Instance->CR |= hgfxmmu->Init.Interrupts.UsedInterrupts;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6819      	ldr	r1, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	601a      	str	r2, [r3, #0]
    }

    /* Configure default value on GFXMMU_DVR register */
    hgfxmmu->Instance->DVR = hgfxmmu->Init.DefaultValue;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6892      	ldr	r2, [r2, #8]
 8004bca:	611a      	str	r2, [r3, #16]

    /* Configure physical buffer addresses on GFXMMU_BxCR registers */
    hgfxmmu->Instance->B0CR = hgfxmmu->Init.Buffers.Buf0Address;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	68d2      	ldr	r2, [r2, #12]
 8004bd4:	621a      	str	r2, [r3, #32]
    hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6912      	ldr	r2, [r2, #16]
 8004bde:	625a      	str	r2, [r3, #36]	@ 0x24
    hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6952      	ldr	r2, [r2, #20]
 8004be8:	629a      	str	r2, [r3, #40]	@ 0x28
    hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6992      	ldr	r2, [r2, #24]
 8004bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Reset GFXMMU error code */
    hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set GFXMMU to ready state */
    hgfxmmu->State = HAL_GFXMMU_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }
  /* Return function status */
  return status;
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_GFXMMU_ConfigLut>:
  */
HAL_StatusTypeDef HAL_GFXMMU_ConfigLut(GFXMMU_HandleTypeDef *hgfxmmu,
                                       uint32_t FirstLine,
                                       uint32_t LinesNumber,
                                       uint32_t Address)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b08b      	sub	sp, #44	@ 0x2c
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
  assert_param(IS_GFXMMU_LUT_LINE(FirstLine));
  assert_param(IS_GFXMMU_LUT_LINES_NUMBER(LinesNumber));

  /* Check GFXMMU state and coherent parameters */
  if ((hgfxmmu->State != HAL_GFXMMU_STATE_READY) || ((FirstLine + LinesNumber) > 1024U))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d105      	bne.n	8004c36 <HAL_GFXMMU_ConfigLut+0x2a>
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c34:	d903      	bls.n	8004c3e <HAL_GFXMMU_ConfigLut+0x32>
  {
    status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004c3c:	e032      	b.n	8004ca4 <HAL_GFXMMU_ConfigLut+0x98>
    uint32_t current_line;
    uint32_t lutxl_address;
    uint32_t lutxh_address;

    /* Initialize local variables */
    current_address = Address;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	623b      	str	r3, [r7, #32]
    current_line    = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
    lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
    lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * FirstLine) + 1U]);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	3301      	adds	r3, #1
 8004c62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]

    /* Copy LUT from flash to look up RAM */
    while (current_line < LinesNumber)
 8004c6c:	e016      	b.n	8004c9c <HAL_GFXMMU_ConfigLut+0x90>
    {
      *((uint32_t *)lutxl_address) = *((uint32_t *)current_address);
 8004c6e:	6a3a      	ldr	r2, [r7, #32]
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	623b      	str	r3, [r7, #32]
      *((uint32_t *)lutxh_address) = *((uint32_t *)current_address);
 8004c7c:	6a3a      	ldr	r2, [r7, #32]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	6812      	ldr	r2, [r2, #0]
 8004c82:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	3304      	adds	r3, #4
 8004c88:	623b      	str	r3, [r7, #32]
      lutxl_address += 8U;
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	61bb      	str	r3, [r7, #24]
      lutxh_address += 8U;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	3308      	adds	r3, #8
 8004c94:	617b      	str	r3, [r7, #20]
      current_line++;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	61fb      	str	r3, [r7, #28]
    while (current_line < LinesNumber)
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d3e4      	bcc.n	8004c6e <HAL_GFXMMU_ConfigLut+0x62>
    }
  }
  /* Return function status */
  return status;
 8004ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	372c      	adds	r7, #44	@ 0x2c
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_GFXMMU_IRQHandler>:
  * @brief  This function handles the GFXMMU interrupts.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
void HAL_GFXMMU_IRQHandler(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t flags, interrupts, error;

  /* Read current flags and interrupts and determine which error occurs */
  flags = hgfxmmu->Instance->SR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	617b      	str	r3, [r7, #20]
  interrupts = (hgfxmmu->Instance->CR & GFXMMU_CR_ITS_MASK);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 031f 	and.w	r3, r3, #31
 8004cce:	613b      	str	r3, [r7, #16]
  error = (flags & interrupts);
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]

  if (error != 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00c      	beq.n	8004cf8 <HAL_GFXMMU_IRQHandler+0x44>
  {
    /* Clear flags on GFXMMU_FCR register */
    hgfxmmu->Instance->FCR = error;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	609a      	str	r2, [r3, #8]

    /* Update GFXMMU error code */
    hgfxmmu->ErrorCode |= error;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Call GFXMMU error callback */
#if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
    hgfxmmu->ErrorCallback(hgfxmmu);
#else
    HAL_GFXMMU_ErrorCallback(hgfxmmu);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f804 	bl	8004d00 <HAL_GFXMMU_ErrorCallback>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
  }
}
 8004cf8:	bf00      	nop
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_GFXMMU_ErrorCallback>:
  * @brief  Error callback.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
__weak void HAL_GFXMMU_ErrorCallback(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(hgfxmmu);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_GFXMMU_ErrorCallback could be implemented in the user file.
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b089      	sub	sp, #36	@ 0x24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004d26:	e1ba      	b.n	800509e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	fa01 f303 	lsl.w	r3, r1, r3
 8004d34:	4013      	ands	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 81aa 	beq.w	8005098 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a55      	ldr	r2, [pc, #340]	@ (8004e9c <HAL_GPIO_Init+0x188>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d15d      	bne.n	8004e08 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004d52:	2201      	movs	r2, #1
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f003 0201 	and.w	r2, r3, #1
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004d7c:	4a48      	ldr	r2, [pc, #288]	@ (8004ea0 <HAL_GPIO_Init+0x18c>)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d84:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004d86:	4a46      	ldr	r2, [pc, #280]	@ (8004ea0 <HAL_GPIO_Init+0x18c>)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	08da      	lsrs	r2, r3, #3
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	3208      	adds	r2, #8
 8004d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d9e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	220f      	movs	r2, #15
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43db      	mvns	r3, r3
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	4013      	ands	r3, r2
 8004db4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	220b      	movs	r2, #11
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	08da      	lsrs	r2, r3, #3
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	3208      	adds	r2, #8
 8004dd2:	69f9      	ldr	r1, [r7, #28]
 8004dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	2203      	movs	r2, #3
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	43db      	mvns	r3, r3
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	4013      	ands	r3, r2
 8004dee:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	2202      	movs	r2, #2
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	69fa      	ldr	r2, [r7, #28]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	e067      	b.n	8004ed8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d003      	beq.n	8004e18 <HAL_GPIO_Init+0x104>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b12      	cmp	r3, #18
 8004e16:	d145      	bne.n	8004ea4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	08da      	lsrs	r2, r3, #3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3208      	adds	r2, #8
 8004e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e24:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	220f      	movs	r2, #15
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	43db      	mvns	r3, r3
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f003 020f 	and.w	r2, r3, #15
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	69fa      	ldr	r2, [r7, #28]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	08da      	lsrs	r2, r3, #3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3208      	adds	r2, #8
 8004e5e:	69f9      	ldr	r1, [r7, #28]
 8004e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	2203      	movs	r2, #3
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	43db      	mvns	r3, r3
 8004e76:	69fa      	ldr	r2, [r7, #28]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 0203 	and.w	r2, r3, #3
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	69fa      	ldr	r2, [r7, #28]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	69fa      	ldr	r2, [r7, #28]
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e01e      	b.n	8004ed8 <HAL_GPIO_Init+0x1c4>
 8004e9a:	bf00      	nop
 8004e9c:	46020000 	.word	0x46020000
 8004ea0:	0800dbb8 	.word	0x0800dbb8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	2203      	movs	r2, #3
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 0203 	and.w	r2, r3, #3
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	69fa      	ldr	r2, [r7, #28]
 8004ed6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d00b      	beq.n	8004ef8 <HAL_GPIO_Init+0x1e4>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d007      	beq.n	8004ef8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004eec:	2b11      	cmp	r3, #17
 8004eee:	d003      	beq.n	8004ef8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b12      	cmp	r3, #18
 8004ef6:	d130      	bne.n	8004f5a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	2203      	movs	r2, #3
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	69fa      	ldr	r2, [r7, #28]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	69fa      	ldr	r2, [r7, #28]
 8004f26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004f2e:	2201      	movs	r2, #1
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	43db      	mvns	r3, r3
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	091b      	lsrs	r3, r3, #4
 8004f44:	f003 0201 	and.w	r2, r3, #1
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d017      	beq.n	8004f92 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	43db      	mvns	r3, r3
 8004f74:	69fa      	ldr	r2, [r7, #28]
 8004f76:	4013      	ands	r3, r2
 8004f78:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	69fa      	ldr	r2, [r7, #28]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	69fa      	ldr	r2, [r7, #28]
 8004f90:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d07c      	beq.n	8005098 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004f9e:	4a47      	ldr	r2, [pc, #284]	@ (80050bc <HAL_GPIO_Init+0x3a8>)
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	089b      	lsrs	r3, r3, #2
 8004fa4:	3318      	adds	r3, #24
 8004fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004faa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	220f      	movs	r2, #15
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	0a9a      	lsrs	r2, r3, #10
 8004fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80050c0 <HAL_GPIO_Init+0x3ac>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	f002 0203 	and.w	r2, r2, #3
 8004fd0:	00d2      	lsls	r2, r2, #3
 8004fd2:	4093      	lsls	r3, r2
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004fda:	4938      	ldr	r1, [pc, #224]	@ (80050bc <HAL_GPIO_Init+0x3a8>)
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	089b      	lsrs	r3, r3, #2
 8004fe0:	3318      	adds	r3, #24
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004fe8:	4b34      	ldr	r3, [pc, #208]	@ (80050bc <HAL_GPIO_Init+0x3a8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4313      	orrs	r3, r2
 800500a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800500c:	4a2b      	ldr	r2, [pc, #172]	@ (80050bc <HAL_GPIO_Init+0x3a8>)
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005012:	4b2a      	ldr	r3, [pc, #168]	@ (80050bc <HAL_GPIO_Init+0x3a8>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	43db      	mvns	r3, r3
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	4013      	ands	r3, r2
 8005020:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8005036:	4a21      	ldr	r2, [pc, #132]	@ (80050bc <HAL_GPIO_Init+0x3a8>)
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800503c:	4b1f      	ldr	r3, [pc, #124]	@ (80050bc <HAL_GPIO_Init+0x3a8>)
 800503e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005042:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	43db      	mvns	r3, r3
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	4013      	ands	r3, r2
 800504c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800505a:	69fa      	ldr	r2, [r7, #28]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8005062:	4a16      	ldr	r2, [pc, #88]	@ (80050bc <HAL_GPIO_Init+0x3a8>)
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800506a:	4b14      	ldr	r3, [pc, #80]	@ (80050bc <HAL_GPIO_Init+0x3a8>)
 800506c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005070:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	43db      	mvns	r3, r3
 8005076:	69fa      	ldr	r2, [r7, #28]
 8005078:	4013      	ands	r3, r2
 800507a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005090:	4a0a      	ldr	r2, [pc, #40]	@ (80050bc <HAL_GPIO_Init+0x3a8>)
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	3301      	adds	r3, #1
 800509c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f47f ae3d 	bne.w	8004d28 <HAL_GPIO_Init+0x14>
  }
}
 80050ae:	bf00      	nop
 80050b0:	bf00      	nop
 80050b2:	3724      	adds	r7, #36	@ 0x24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	46022000 	.word	0x46022000
 80050c0:	002f7f7f 	.word	0x002f7f7f

080050c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	807b      	strh	r3, [r7, #2]
 80050d0:	4613      	mov	r3, r2
 80050d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050d4:	787b      	ldrb	r3, [r7, #1]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050da:	887a      	ldrh	r2, [r7, #2]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80050e0:	e002      	b.n	80050e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80050e2:	887a      	ldrh	r2, [r7, #2]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e01c      	b.n	8005140 <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	795b      	ldrb	r3, [r3, #5]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d105      	bne.n	800511a <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fd f8a2 	bl	8002258 <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	791b      	ldrb	r3, [r3, #4]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_GPU2D_Init+0x32>
 8005122:	2302      	movs	r3, #2
 8005124:	e00c      	b.n	8005140 <HAL_GPU2D_Init+0x4c>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	33f8      	adds	r3, #248	@ 0xf8
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d013      	beq.n	800518c <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	33f8      	adds	r3, #248	@ 0xf8
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f023 0201 	bic.w	r2, r3, #1
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 8005184:	68f9      	ldr	r1, [r7, #12]
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f80f 	bl	80051aa <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 800518c:	bf00      	nop
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f80f 	bl	80051c0 <HAL_GPU2D_ErrorCallback>
}
 80051a2:	bf00      	nop
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_GPU2D_CommandListCpltCallback>:
  *                the configuration information for the GPU2D.
  * @param  CmdListID Command list ID that got completed.
  * @retval None
  */
__weak void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	6039      	str	r1, [r7, #0]
  UNUSED(CmdListID);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_GPU2D_CommandListCpltCallback can be implemented in the user file.
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 80051c8:	bf00      	nop
 80051ca:	e7fd      	b.n	80051c8 <HAL_GPU2D_ErrorCallback+0x8>

080051cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e08d      	b.n	80052fa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7fd f870 	bl	80022d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2224      	movs	r2, #36	@ 0x24
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0201 	bic.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800521c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800522c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d107      	bne.n	8005246 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005242:	609a      	str	r2, [r3, #8]
 8005244:	e006      	b.n	8005254 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005252:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d108      	bne.n	800526e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800526a:	605a      	str	r2, [r3, #4]
 800526c:	e007      	b.n	800527e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800527c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6812      	ldr	r2, [r2, #0]
 8005288:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800528c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005290:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691a      	ldr	r2, [r3, #16]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69d9      	ldr	r1, [r3, #28]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a1a      	ldr	r2, [r3, #32]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0201 	orr.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b088      	sub	sp, #32
 8005308:	af02      	add	r7, sp, #8
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	4608      	mov	r0, r1
 800530e:	4611      	mov	r1, r2
 8005310:	461a      	mov	r2, r3
 8005312:	4603      	mov	r3, r0
 8005314:	817b      	strh	r3, [r7, #10]
 8005316:	460b      	mov	r3, r1
 8005318:	813b      	strh	r3, [r7, #8]
 800531a:	4613      	mov	r3, r2
 800531c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b20      	cmp	r3, #32
 8005328:	f040 80f9 	bne.w	800551e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <HAL_I2C_Mem_Write+0x34>
 8005332:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005334:	2b00      	cmp	r3, #0
 8005336:	d105      	bne.n	8005344 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800533e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e0ed      	b.n	8005520 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_I2C_Mem_Write+0x4e>
 800534e:	2302      	movs	r3, #2
 8005350:	e0e6      	b.n	8005520 <HAL_I2C_Mem_Write+0x21c>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800535a:	f7fe f81f 	bl	800339c <HAL_GetTick>
 800535e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	2319      	movs	r3, #25
 8005366:	2201      	movs	r2, #1
 8005368:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 fac3 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e0d1      	b.n	8005520 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2221      	movs	r2, #33	@ 0x21
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2240      	movs	r2, #64	@ 0x40
 8005388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a3a      	ldr	r2, [r7, #32]
 8005396:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800539c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053a4:	88f8      	ldrh	r0, [r7, #6]
 80053a6:	893a      	ldrh	r2, [r7, #8]
 80053a8:	8979      	ldrh	r1, [r7, #10]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	4603      	mov	r3, r0
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 f9d3 	bl	8005760 <I2C_RequestMemoryWrite>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0a9      	b.n	8005520 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2bff      	cmp	r3, #255	@ 0xff
 80053d4:	d90e      	bls.n	80053f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	22ff      	movs	r2, #255	@ 0xff
 80053da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	8979      	ldrh	r1, [r7, #10]
 80053e4:	2300      	movs	r3, #0
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 fc3d 	bl	8005c6c <I2C_TransferConfig>
 80053f2:	e00f      	b.n	8005414 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005402:	b2da      	uxtb	r2, r3
 8005404:	8979      	ldrh	r1, [r7, #10]
 8005406:	2300      	movs	r3, #0
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 fc2c 	bl	8005c6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 fabc 	bl	8005996 <I2C_WaitOnTXISFlagUntilTimeout>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e07b      	b.n	8005520 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542c:	781a      	ldrb	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005442:	b29b      	uxth	r3, r3
 8005444:	3b01      	subs	r3, #1
 8005446:	b29a      	uxth	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d034      	beq.n	80054cc <HAL_I2C_Mem_Write+0x1c8>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005466:	2b00      	cmp	r3, #0
 8005468:	d130      	bne.n	80054cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005470:	2200      	movs	r2, #0
 8005472:	2180      	movs	r1, #128	@ 0x80
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 fa3f 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e04d      	b.n	8005520 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005488:	b29b      	uxth	r3, r3
 800548a:	2bff      	cmp	r3, #255	@ 0xff
 800548c:	d90e      	bls.n	80054ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	22ff      	movs	r2, #255	@ 0xff
 8005492:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005498:	b2da      	uxtb	r2, r3
 800549a:	8979      	ldrh	r1, [r7, #10]
 800549c:	2300      	movs	r3, #0
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fbe1 	bl	8005c6c <I2C_TransferConfig>
 80054aa:	e00f      	b.n	80054cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	8979      	ldrh	r1, [r7, #10]
 80054be:	2300      	movs	r3, #0
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 fbd0 	bl	8005c6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d19e      	bne.n	8005414 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 faa2 	bl	8005a24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e01a      	b.n	8005520 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2220      	movs	r2, #32
 80054f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6859      	ldr	r1, [r3, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005528 <HAL_I2C_Mem_Write+0x224>)
 80054fe:	400b      	ands	r3, r1
 8005500:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	e000      	b.n	8005520 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800551e:	2302      	movs	r3, #2
  }
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	fe00e800 	.word	0xfe00e800

0800552c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b088      	sub	sp, #32
 8005530:	af02      	add	r7, sp, #8
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	4608      	mov	r0, r1
 8005536:	4611      	mov	r1, r2
 8005538:	461a      	mov	r2, r3
 800553a:	4603      	mov	r3, r0
 800553c:	817b      	strh	r3, [r7, #10]
 800553e:	460b      	mov	r3, r1
 8005540:	813b      	strh	r3, [r7, #8]
 8005542:	4613      	mov	r3, r2
 8005544:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b20      	cmp	r3, #32
 8005550:	f040 80fd 	bne.w	800574e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_I2C_Mem_Read+0x34>
 800555a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800555c:	2b00      	cmp	r3, #0
 800555e:	d105      	bne.n	800556c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005566:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0f1      	b.n	8005750 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_I2C_Mem_Read+0x4e>
 8005576:	2302      	movs	r3, #2
 8005578:	e0ea      	b.n	8005750 <HAL_I2C_Mem_Read+0x224>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005582:	f7fd ff0b 	bl	800339c <HAL_GetTick>
 8005586:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	2319      	movs	r3, #25
 800558e:	2201      	movs	r2, #1
 8005590:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f9af 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0d5      	b.n	8005750 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2222      	movs	r2, #34	@ 0x22
 80055a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2240      	movs	r2, #64	@ 0x40
 80055b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a3a      	ldr	r2, [r7, #32]
 80055be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80055c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055cc:	88f8      	ldrh	r0, [r7, #6]
 80055ce:	893a      	ldrh	r2, [r7, #8]
 80055d0:	8979      	ldrh	r1, [r7, #10]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	9301      	str	r3, [sp, #4]
 80055d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	4603      	mov	r3, r0
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 f913 	bl	8005808 <I2C_RequestMemoryRead>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d005      	beq.n	80055f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0ad      	b.n	8005750 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2bff      	cmp	r3, #255	@ 0xff
 80055fc:	d90e      	bls.n	800561c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	22ff      	movs	r2, #255	@ 0xff
 8005602:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005608:	b2da      	uxtb	r2, r3
 800560a:	8979      	ldrh	r1, [r7, #10]
 800560c:	4b52      	ldr	r3, [pc, #328]	@ (8005758 <HAL_I2C_Mem_Read+0x22c>)
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 fb29 	bl	8005c6c <I2C_TransferConfig>
 800561a:	e00f      	b.n	800563c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005620:	b29a      	uxth	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800562a:	b2da      	uxtb	r2, r3
 800562c:	8979      	ldrh	r1, [r7, #10]
 800562e:	4b4a      	ldr	r3, [pc, #296]	@ (8005758 <HAL_I2C_Mem_Read+0x22c>)
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 fb18 	bl	8005c6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005642:	2200      	movs	r2, #0
 8005644:	2104      	movs	r1, #4
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f956 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e07c      	b.n	8005750 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d034      	beq.n	80056fc <HAL_I2C_Mem_Read+0x1d0>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005696:	2b00      	cmp	r3, #0
 8005698:	d130      	bne.n	80056fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a0:	2200      	movs	r2, #0
 80056a2:	2180      	movs	r1, #128	@ 0x80
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 f927 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e04d      	b.n	8005750 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	2bff      	cmp	r3, #255	@ 0xff
 80056bc:	d90e      	bls.n	80056dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	22ff      	movs	r2, #255	@ 0xff
 80056c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	8979      	ldrh	r1, [r7, #10]
 80056cc:	2300      	movs	r3, #0
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 fac9 	bl	8005c6c <I2C_TransferConfig>
 80056da:	e00f      	b.n	80056fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	8979      	ldrh	r1, [r7, #10]
 80056ee:	2300      	movs	r3, #0
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 fab8 	bl	8005c6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d19a      	bne.n	800563c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f98a 	bl	8005a24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e01a      	b.n	8005750 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2220      	movs	r2, #32
 8005720:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6859      	ldr	r1, [r3, #4]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4b0b      	ldr	r3, [pc, #44]	@ (800575c <HAL_I2C_Mem_Read+0x230>)
 800572e:	400b      	ands	r3, r1
 8005730:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	e000      	b.n	8005750 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800574e:	2302      	movs	r3, #2
  }
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	80002400 	.word	0x80002400
 800575c:	fe00e800 	.word	0xfe00e800

08005760 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af02      	add	r7, sp, #8
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	4608      	mov	r0, r1
 800576a:	4611      	mov	r1, r2
 800576c:	461a      	mov	r2, r3
 800576e:	4603      	mov	r3, r0
 8005770:	817b      	strh	r3, [r7, #10]
 8005772:	460b      	mov	r3, r1
 8005774:	813b      	strh	r3, [r7, #8]
 8005776:	4613      	mov	r3, r2
 8005778:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800577a:	88fb      	ldrh	r3, [r7, #6]
 800577c:	b2da      	uxtb	r2, r3
 800577e:	8979      	ldrh	r1, [r7, #10]
 8005780:	4b20      	ldr	r3, [pc, #128]	@ (8005804 <I2C_RequestMemoryWrite+0xa4>)
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 fa6f 	bl	8005c6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	69b9      	ldr	r1, [r7, #24]
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 f8ff 	bl	8005996 <I2C_WaitOnTXISFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e02c      	b.n	80057fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057a2:	88fb      	ldrh	r3, [r7, #6]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d105      	bne.n	80057b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057a8:	893b      	ldrh	r3, [r7, #8]
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80057b2:	e015      	b.n	80057e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057b4:	893b      	ldrh	r3, [r7, #8]
 80057b6:	0a1b      	lsrs	r3, r3, #8
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	69b9      	ldr	r1, [r7, #24]
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 f8e5 	bl	8005996 <I2C_WaitOnTXISFlagUntilTimeout>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e012      	b.n	80057fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057d6:	893b      	ldrh	r3, [r7, #8]
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	2200      	movs	r2, #0
 80057e8:	2180      	movs	r1, #128	@ 0x80
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 f884 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	80002000 	.word	0x80002000

08005808 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	4608      	mov	r0, r1
 8005812:	4611      	mov	r1, r2
 8005814:	461a      	mov	r2, r3
 8005816:	4603      	mov	r3, r0
 8005818:	817b      	strh	r3, [r7, #10]
 800581a:	460b      	mov	r3, r1
 800581c:	813b      	strh	r3, [r7, #8]
 800581e:	4613      	mov	r3, r2
 8005820:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005822:	88fb      	ldrh	r3, [r7, #6]
 8005824:	b2da      	uxtb	r2, r3
 8005826:	8979      	ldrh	r1, [r7, #10]
 8005828:	4b20      	ldr	r3, [pc, #128]	@ (80058ac <I2C_RequestMemoryRead+0xa4>)
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	2300      	movs	r3, #0
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 fa1c 	bl	8005c6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	69b9      	ldr	r1, [r7, #24]
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 f8ac 	bl	8005996 <I2C_WaitOnTXISFlagUntilTimeout>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e02c      	b.n	80058a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d105      	bne.n	800585a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800584e:	893b      	ldrh	r3, [r7, #8]
 8005850:	b2da      	uxtb	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	629a      	str	r2, [r3, #40]	@ 0x28
 8005858:	e015      	b.n	8005886 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800585a:	893b      	ldrh	r3, [r7, #8]
 800585c:	0a1b      	lsrs	r3, r3, #8
 800585e:	b29b      	uxth	r3, r3
 8005860:	b2da      	uxtb	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	69b9      	ldr	r1, [r7, #24]
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 f892 	bl	8005996 <I2C_WaitOnTXISFlagUntilTimeout>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e012      	b.n	80058a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800587c:	893b      	ldrh	r3, [r7, #8]
 800587e:	b2da      	uxtb	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	2200      	movs	r2, #0
 800588e:	2140      	movs	r1, #64	@ 0x40
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 f831 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	80002000 	.word	0x80002000

080058b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d103      	bne.n	80058ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2200      	movs	r2, #0
 80058cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d007      	beq.n	80058ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699a      	ldr	r2, [r3, #24]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0201 	orr.w	r2, r2, #1
 80058ea:	619a      	str	r2, [r3, #24]
  }
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005908:	e031      	b.n	800596e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d02d      	beq.n	800596e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005912:	f7fd fd43 	bl	800339c <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d302      	bcc.n	8005928 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d122      	bne.n	800596e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	4013      	ands	r3, r2
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	429a      	cmp	r2, r3
 8005936:	bf0c      	ite	eq
 8005938:	2301      	moveq	r3, #1
 800593a:	2300      	movne	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	461a      	mov	r2, r3
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	429a      	cmp	r2, r3
 8005944:	d113      	bne.n	800596e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594a:	f043 0220 	orr.w	r2, r3, #32
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e00f      	b.n	800598e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699a      	ldr	r2, [r3, #24]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4013      	ands	r3, r2
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	429a      	cmp	r2, r3
 800597c:	bf0c      	ite	eq
 800597e:	2301      	moveq	r3, #1
 8005980:	2300      	movne	r3, #0
 8005982:	b2db      	uxtb	r3, r3
 8005984:	461a      	mov	r2, r3
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	429a      	cmp	r2, r3
 800598a:	d0be      	beq.n	800590a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059a2:	e033      	b.n	8005a0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f87f 	bl	8005aac <I2C_IsErrorOccurred>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e031      	b.n	8005a1c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059be:	d025      	beq.n	8005a0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c0:	f7fd fcec 	bl	800339c <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d302      	bcc.n	80059d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d11a      	bne.n	8005a0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d013      	beq.n	8005a0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e8:	f043 0220 	orr.w	r2, r3, #32
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e007      	b.n	8005a1c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d1c4      	bne.n	80059a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a30:	e02f      	b.n	8005a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	68b9      	ldr	r1, [r7, #8]
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 f838 	bl	8005aac <I2C_IsErrorOccurred>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e02d      	b.n	8005aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a46:	f7fd fca9 	bl	800339c <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d302      	bcc.n	8005a5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d11a      	bne.n	8005a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	d013      	beq.n	8005a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a6e:	f043 0220 	orr.w	r2, r3, #32
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e007      	b.n	8005aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	f003 0320 	and.w	r3, r3, #32
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	d1c8      	bne.n	8005a32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08a      	sub	sp, #40	@ 0x28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d068      	beq.n	8005baa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2210      	movs	r2, #16
 8005ade:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ae0:	e049      	b.n	8005b76 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae8:	d045      	beq.n	8005b76 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005aea:	f7fd fc57 	bl	800339c <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d302      	bcc.n	8005b00 <I2C_IsErrorOccurred+0x54>
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d13a      	bne.n	8005b76 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b12:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b22:	d121      	bne.n	8005b68 <I2C_IsErrorOccurred+0xbc>
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b2a:	d01d      	beq.n	8005b68 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005b2c:	7cfb      	ldrb	r3, [r7, #19]
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	d01a      	beq.n	8005b68 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b40:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005b42:	f7fd fc2b 	bl	800339c <HAL_GetTick>
 8005b46:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b48:	e00e      	b.n	8005b68 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b4a:	f7fd fc27 	bl	800339c <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b19      	cmp	r3, #25
 8005b56:	d907      	bls.n	8005b68 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	f043 0320 	orr.w	r3, r3, #32
 8005b5e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005b66:	e006      	b.n	8005b76 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	d1e9      	bne.n	8005b4a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	f003 0320 	and.w	r3, r3, #32
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d003      	beq.n	8005b8c <I2C_IsErrorOccurred+0xe0>
 8005b84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0aa      	beq.n	8005ae2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d103      	bne.n	8005b9c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	f043 0304 	orr.w	r3, r3, #4
 8005ba2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00b      	beq.n	8005bd4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00b      	beq.n	8005bf6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	f043 0308 	orr.w	r3, r3, #8
 8005be4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005bee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00b      	beq.n	8005c18 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	f043 0302 	orr.w	r3, r3, #2
 8005c06:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005c18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d01c      	beq.n	8005c5a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f7ff fe45 	bl	80058b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6859      	ldr	r1, [r3, #4]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	4b0d      	ldr	r3, [pc, #52]	@ (8005c68 <I2C_IsErrorOccurred+0x1bc>)
 8005c32:	400b      	ands	r3, r1
 8005c34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3728      	adds	r7, #40	@ 0x28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	fe00e800 	.word	0xfe00e800

08005c6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	607b      	str	r3, [r7, #4]
 8005c76:	460b      	mov	r3, r1
 8005c78:	817b      	strh	r3, [r7, #10]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c7e:	897b      	ldrh	r3, [r7, #10]
 8005c80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c84:	7a7b      	ldrb	r3, [r7, #9]
 8005c86:	041b      	lsls	r3, r3, #16
 8005c88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c9a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	0d5b      	lsrs	r3, r3, #21
 8005ca6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005caa:	4b08      	ldr	r3, [pc, #32]	@ (8005ccc <I2C_TransferConfig+0x60>)
 8005cac:	430b      	orrs	r3, r1
 8005cae:	43db      	mvns	r3, r3
 8005cb0:	ea02 0103 	and.w	r1, r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005cbe:	bf00      	nop
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	03ff63ff 	.word	0x03ff63ff

08005cd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b20      	cmp	r3, #32
 8005ce4:	d138      	bne.n	8005d58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e032      	b.n	8005d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2224      	movs	r2, #36	@ 0x24
 8005d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0201 	bic.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6819      	ldr	r1, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0201 	orr.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	e000      	b.n	8005d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d58:	2302      	movs	r3, #2
  }
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b20      	cmp	r3, #32
 8005d7a:	d139      	bne.n	8005df0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e033      	b.n	8005df2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2224      	movs	r2, #36	@ 0x24
 8005d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0201 	bic.w	r2, r2, #1
 8005da8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005db8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	021b      	lsls	r3, r3, #8
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005dec:	2300      	movs	r3, #0
 8005dee:	e000      	b.n	8005df2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005df0:	2302      	movs	r3, #2
  }
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005e04:	4b05      	ldr	r3, [pc, #20]	@ (8005e1c <HAL_ICACHE_Enable+0x1c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a04      	ldr	r2, [pc, #16]	@ (8005e1c <HAL_ICACHE_Enable+0x1c>)
 8005e0a:	f043 0301 	orr.w	r3, r3, #1
 8005e0e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	40030400 	.word	0x40030400

08005e20 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8005e2a:	4b14      	ldr	r3, [pc, #80]	@ (8005e7c <HAL_ICACHE_Disable+0x5c>)
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005e30:	4b12      	ldr	r3, [pc, #72]	@ (8005e7c <HAL_ICACHE_Disable+0x5c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a11      	ldr	r2, [pc, #68]	@ (8005e7c <HAL_ICACHE_Disable+0x5c>)
 8005e36:	f023 0301 	bic.w	r3, r3, #1
 8005e3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e3c:	f7fd faae 	bl	800339c <HAL_GetTick>
 8005e40:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005e42:	e00f      	b.n	8005e64 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8005e44:	f7fd faaa 	bl	800339c <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d908      	bls.n	8005e64 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005e52:	4b0a      	ldr	r3, [pc, #40]	@ (8005e7c <HAL_ICACHE_Disable+0x5c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	71fb      	strb	r3, [r7, #7]
        break;
 8005e62:	e005      	b.n	8005e70 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005e64:	4b05      	ldr	r3, [pc, #20]	@ (8005e7c <HAL_ICACHE_Disable+0x5c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1e9      	bne.n	8005e44 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8005e70:	79fb      	ldrb	r3, [r7, #7]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40030400 	.word	0x40030400

08005e80 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005e8e:	4b22      	ldr	r3, [pc, #136]	@ (8005f18 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	75fb      	strb	r3, [r7, #23]
 8005e9e:	e034      	b.n	8005f0a <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	009a      	lsls	r2, r3, #2
 8005ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8005f1c <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8005ea6:	4413      	add	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	75fb      	strb	r3, [r7, #23]
 8005eba:	e026      	b.n	8005f0a <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8005ec8:	4013      	ands	r3, r2
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	425b      	negs	r3, r3
 8005eda:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8005edc:	401a      	ands	r2, r3
 8005ede:	4b10      	ldr	r3, [pc, #64]	@ (8005f20 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	025a      	lsls	r2, r3, #9
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	40030400 	.word	0x40030400
 8005f1c:	40030420 	.word	0x40030420
 8005f20:	07ff0000 	.word	0x07ff0000

08005f24 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e0bf      	b.n	80060b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fc fd70 	bl	8002a30 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005f66:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6999      	ldr	r1, [r3, #24]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f7c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6899      	ldr	r1, [r3, #8]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	4b4a      	ldr	r3, [pc, #296]	@ (80060c0 <HAL_LTDC_Init+0x19c>)
 8005f98:	400b      	ands	r3, r1
 8005f9a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	041b      	lsls	r3, r3, #16
 8005fa2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6899      	ldr	r1, [r3, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68d9      	ldr	r1, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	4b3e      	ldr	r3, [pc, #248]	@ (80060c0 <HAL_LTDC_Init+0x19c>)
 8005fc6:	400b      	ands	r3, r1
 8005fc8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	041b      	lsls	r3, r3, #16
 8005fd0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68d9      	ldr	r1, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1a      	ldr	r2, [r3, #32]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6919      	ldr	r1, [r3, #16]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4b33      	ldr	r3, [pc, #204]	@ (80060c0 <HAL_LTDC_Init+0x19c>)
 8005ff4:	400b      	ands	r3, r1
 8005ff6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffc:	041b      	lsls	r3, r3, #16
 8005ffe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6919      	ldr	r1, [r3, #16]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6959      	ldr	r1, [r3, #20]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	4b27      	ldr	r3, [pc, #156]	@ (80060c0 <HAL_LTDC_Init+0x19c>)
 8006022:	400b      	ands	r3, r1
 8006024:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602a:	041b      	lsls	r3, r3, #16
 800602c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6959      	ldr	r1, [r3, #20]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800604a:	021b      	lsls	r3, r3, #8
 800604c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006054:	041b      	lsls	r3, r3, #16
 8006056:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006066:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0206 	orr.w	r2, r2, #6
 8006092:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699a      	ldr	r2, [r3, #24]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0201 	orr.w	r2, r2, #1
 80060a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	f000f800 	.word	0xf000f800

080060c4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060da:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f003 0304 	and.w	r3, r3, #4
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d023      	beq.n	800612e <HAL_LTDC_IRQHandler+0x6a>
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01e      	beq.n	800612e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0204 	bic.w	r2, r2, #4
 80060fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2204      	movs	r2, #4
 8006106:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800610e:	f043 0201 	orr.w	r2, r3, #1
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2204      	movs	r2, #4
 800611c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f86f 	bl	800620c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d023      	beq.n	8006180 <HAL_LTDC_IRQHandler+0xbc>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d01e      	beq.n	8006180 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0202 	bic.w	r2, r2, #2
 8006150:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2202      	movs	r2, #2
 8006158:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006160:	f043 0202 	orr.w	r2, r3, #2
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2204      	movs	r2, #4
 800616e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f846 	bl	800620c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d01b      	beq.n	80061c2 <HAL_LTDC_IRQHandler+0xfe>
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	d016      	beq.n	80061c2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0201 	bic.w	r2, r2, #1
 80061a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2201      	movs	r2, #1
 80061aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f82f 	bl	8006220 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f003 0308 	and.w	r3, r3, #8
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01b      	beq.n	8006204 <HAL_LTDC_IRQHandler+0x140>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d016      	beq.n	8006204 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0208 	bic.w	r2, r2, #8
 80061e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2208      	movs	r2, #8
 80061ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f818 	bl	8006234 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006204:	bf00      	nop
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006248:	b5b0      	push	{r4, r5, r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800625a:	2b01      	cmp	r3, #1
 800625c:	d101      	bne.n	8006262 <HAL_LTDC_ConfigLayer+0x1a>
 800625e:	2302      	movs	r3, #2
 8006260:	e02c      	b.n	80062bc <HAL_LTDC_ConfigLayer+0x74>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2202      	movs	r2, #2
 800626e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2134      	movs	r1, #52	@ 0x34
 8006278:	fb01 f303 	mul.w	r3, r1, r3
 800627c:	4413      	add	r3, r2
 800627e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	4614      	mov	r4, r2
 8006286:	461d      	mov	r5, r3
 8006288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800628a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800628c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800628e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	68b9      	ldr	r1, [r7, #8]
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 f811 	bl	80062c4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2201      	movs	r2, #1
 80062a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bdb0      	pop	{r4, r5, r7, pc}

080062c4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b089      	sub	sp, #36	@ 0x24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	0c1b      	lsrs	r3, r3, #16
 80062dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062e0:	4413      	add	r3, r2
 80062e2:	041b      	lsls	r3, r3, #16
 80062e4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	01db      	lsls	r3, r3, #7
 80062f0:	4413      	add	r3, r2
 80062f2:	3384      	adds	r3, #132	@ 0x84
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	6812      	ldr	r2, [r2, #0]
 80062fa:	4611      	mov	r1, r2
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	01d2      	lsls	r2, r2, #7
 8006300:	440a      	add	r2, r1
 8006302:	3284      	adds	r2, #132	@ 0x84
 8006304:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8006308:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	0c1b      	lsrs	r3, r3, #16
 8006316:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800631a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800631c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4619      	mov	r1, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	01db      	lsls	r3, r3, #7
 8006328:	440b      	add	r3, r1
 800632a:	3384      	adds	r3, #132	@ 0x84
 800632c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006332:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006342:	4413      	add	r3, r2
 8006344:	041b      	lsls	r3, r3, #16
 8006346:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	461a      	mov	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	01db      	lsls	r3, r3, #7
 8006352:	4413      	add	r3, r2
 8006354:	3384      	adds	r3, #132	@ 0x84
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	4611      	mov	r1, r2
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	01d2      	lsls	r2, r2, #7
 8006362:	440a      	add	r2, r1
 8006364:	3284      	adds	r2, #132	@ 0x84
 8006366:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 800636a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800637a:	4413      	add	r3, r2
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4619      	mov	r1, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	01db      	lsls	r3, r3, #7
 8006388:	440b      	add	r3, r1
 800638a:	3384      	adds	r3, #132	@ 0x84
 800638c:	4619      	mov	r1, r3
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	4313      	orrs	r3, r2
 8006392:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	461a      	mov	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	01db      	lsls	r3, r3, #7
 800639e:	4413      	add	r3, r2
 80063a0:	3384      	adds	r3, #132	@ 0x84
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	6812      	ldr	r2, [r2, #0]
 80063a8:	4611      	mov	r1, r2
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	01d2      	lsls	r2, r2, #7
 80063ae:	440a      	add	r2, r1
 80063b0:	3284      	adds	r2, #132	@ 0x84
 80063b2:	f023 0307 	bic.w	r3, r3, #7
 80063b6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	461a      	mov	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	01db      	lsls	r3, r3, #7
 80063c2:	4413      	add	r3, r2
 80063c4:	3384      	adds	r3, #132	@ 0x84
 80063c6:	461a      	mov	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80063d4:	021b      	lsls	r3, r3, #8
 80063d6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80063de:	041b      	lsls	r3, r3, #16
 80063e0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	061b      	lsls	r3, r3, #24
 80063e8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	01db      	lsls	r3, r3, #7
 80063f4:	4413      	add	r3, r2
 80063f6:	3384      	adds	r3, #132	@ 0x84
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	01db      	lsls	r3, r3, #7
 8006404:	4413      	add	r3, r2
 8006406:	3384      	adds	r3, #132	@ 0x84
 8006408:	461a      	mov	r2, r3
 800640a:	2300      	movs	r3, #0
 800640c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006414:	461a      	mov	r2, r3
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	431a      	orrs	r2, r3
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	431a      	orrs	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4619      	mov	r1, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	01db      	lsls	r3, r3, #7
 8006428:	440b      	add	r3, r1
 800642a:	3384      	adds	r3, #132	@ 0x84
 800642c:	4619      	mov	r1, r3
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	01db      	lsls	r3, r3, #7
 800643e:	4413      	add	r3, r2
 8006440:	3384      	adds	r3, #132	@ 0x84
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	6812      	ldr	r2, [r2, #0]
 8006448:	4611      	mov	r1, r2
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	01d2      	lsls	r2, r2, #7
 800644e:	440a      	add	r2, r1
 8006450:	3284      	adds	r2, #132	@ 0x84
 8006452:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006456:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	461a      	mov	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	01db      	lsls	r3, r3, #7
 8006462:	4413      	add	r3, r2
 8006464:	3384      	adds	r3, #132	@ 0x84
 8006466:	461a      	mov	r2, r3
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	01db      	lsls	r3, r3, #7
 8006478:	4413      	add	r3, r2
 800647a:	3384      	adds	r3, #132	@ 0x84
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	6812      	ldr	r2, [r2, #0]
 8006482:	4611      	mov	r1, r2
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	01d2      	lsls	r2, r2, #7
 8006488:	440a      	add	r2, r1
 800648a:	3284      	adds	r2, #132	@ 0x84
 800648c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006490:	f023 0307 	bic.w	r3, r3, #7
 8006494:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	69da      	ldr	r2, [r3, #28]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	68f9      	ldr	r1, [r7, #12]
 80064a0:	6809      	ldr	r1, [r1, #0]
 80064a2:	4608      	mov	r0, r1
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	01c9      	lsls	r1, r1, #7
 80064a8:	4401      	add	r1, r0
 80064aa:	3184      	adds	r1, #132	@ 0x84
 80064ac:	4313      	orrs	r3, r2
 80064ae:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	461a      	mov	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	01db      	lsls	r3, r3, #7
 80064ba:	4413      	add	r3, r2
 80064bc:	3384      	adds	r3, #132	@ 0x84
 80064be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	01db      	lsls	r3, r3, #7
 80064ca:	4413      	add	r3, r2
 80064cc:	3384      	adds	r3, #132	@ 0x84
 80064ce:	461a      	mov	r2, r3
 80064d0:	2300      	movs	r3, #0
 80064d2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	01db      	lsls	r3, r3, #7
 80064de:	4413      	add	r3, r2
 80064e0:	3384      	adds	r3, #132	@ 0x84
 80064e2:	461a      	mov	r2, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d102      	bne.n	80064f8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80064f2:	2304      	movs	r3, #4
 80064f4:	61fb      	str	r3, [r7, #28]
 80064f6:	e01b      	b.n	8006530 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d102      	bne.n	8006506 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006500:	2303      	movs	r3, #3
 8006502:	61fb      	str	r3, [r7, #28]
 8006504:	e014      	b.n	8006530 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b04      	cmp	r3, #4
 800650c:	d00b      	beq.n	8006526 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006512:	2b02      	cmp	r3, #2
 8006514:	d007      	beq.n	8006526 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800651a:	2b03      	cmp	r3, #3
 800651c:	d003      	beq.n	8006526 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006522:	2b07      	cmp	r3, #7
 8006524:	d102      	bne.n	800652c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006526:	2302      	movs	r3, #2
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	e001      	b.n	8006530 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800652c:	2301      	movs	r3, #1
 800652e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	461a      	mov	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	01db      	lsls	r3, r3, #7
 800653a:	4413      	add	r3, r2
 800653c:	3384      	adds	r3, #132	@ 0x84
 800653e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	6812      	ldr	r2, [r2, #0]
 8006544:	4611      	mov	r1, r2
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	01d2      	lsls	r2, r2, #7
 800654a:	440a      	add	r2, r1
 800654c:	3284      	adds	r2, #132	@ 0x84
 800654e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006552:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006558:	69fa      	ldr	r2, [r7, #28]
 800655a:	fb02 f303 	mul.w	r3, r2, r3
 800655e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	6859      	ldr	r1, [r3, #4]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	1acb      	subs	r3, r1, r3
 800656a:	69f9      	ldr	r1, [r7, #28]
 800656c:	fb01 f303 	mul.w	r3, r1, r3
 8006570:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006572:	68f9      	ldr	r1, [r7, #12]
 8006574:	6809      	ldr	r1, [r1, #0]
 8006576:	4608      	mov	r0, r1
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	01c9      	lsls	r1, r1, #7
 800657c:	4401      	add	r1, r0
 800657e:	3184      	adds	r1, #132	@ 0x84
 8006580:	4313      	orrs	r3, r2
 8006582:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	461a      	mov	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	01db      	lsls	r3, r3, #7
 800658e:	4413      	add	r3, r2
 8006590:	3384      	adds	r3, #132	@ 0x84
 8006592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	6812      	ldr	r2, [r2, #0]
 8006598:	4611      	mov	r1, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	01d2      	lsls	r2, r2, #7
 800659e:	440a      	add	r2, r1
 80065a0:	3284      	adds	r2, #132	@ 0x84
 80065a2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80065a6:	f023 0307 	bic.w	r3, r3, #7
 80065aa:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	461a      	mov	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	01db      	lsls	r3, r3, #7
 80065b6:	4413      	add	r3, r2
 80065b8:	3384      	adds	r3, #132	@ 0x84
 80065ba:	461a      	mov	r2, r3
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	01db      	lsls	r3, r3, #7
 80065cc:	4413      	add	r3, r2
 80065ce:	3384      	adds	r3, #132	@ 0x84
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	6812      	ldr	r2, [r2, #0]
 80065d6:	4611      	mov	r1, r2
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	01d2      	lsls	r2, r2, #7
 80065dc:	440a      	add	r2, r1
 80065de:	3284      	adds	r2, #132	@ 0x84
 80065e0:	f043 0301 	orr.w	r3, r3, #1
 80065e4:	6013      	str	r3, [r2, #0]
}
 80065e6:	bf00      	nop
 80065e8:	3724      	adds	r7, #36	@ 0x24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
	...

080065f4 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d102      	bne.n	800660c <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	73fb      	strb	r3, [r7, #15]
 800660a:	e141      	b.n	8006890 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	f000 f947 	bl	80068a4 <MDF_GetHandleNumberFromInstance>
 8006616:	4603      	mov	r3, r0
 8006618:	4a86      	ldr	r2, [pc, #536]	@ (8006834 <HAL_MDF_Init+0x240>)
 800661a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	73fb      	strb	r3, [r7, #15]
 8006626:	e133      	b.n	8006890 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7fb fc6b 	bl	8001f04 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 800662e:	4b82      	ldr	r3, [pc, #520]	@ (8006838 <HAL_MDF_Init+0x244>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d11d      	bne.n	8006672 <HAL_MDF_Init+0x7e>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a80      	ldr	r2, [pc, #512]	@ (800683c <HAL_MDF_Init+0x248>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d023      	beq.n	8006688 <HAL_MDF_Init+0x94>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a7e      	ldr	r2, [pc, #504]	@ (8006840 <HAL_MDF_Init+0x24c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d01e      	beq.n	8006688 <HAL_MDF_Init+0x94>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a7d      	ldr	r2, [pc, #500]	@ (8006844 <HAL_MDF_Init+0x250>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d019      	beq.n	8006688 <HAL_MDF_Init+0x94>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a7b      	ldr	r2, [pc, #492]	@ (8006848 <HAL_MDF_Init+0x254>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d014      	beq.n	8006688 <HAL_MDF_Init+0x94>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a7a      	ldr	r2, [pc, #488]	@ (800684c <HAL_MDF_Init+0x258>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00f      	beq.n	8006688 <HAL_MDF_Init+0x94>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a78      	ldr	r2, [pc, #480]	@ (8006850 <HAL_MDF_Init+0x25c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00a      	beq.n	8006688 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8006672:	4b78      	ldr	r3, [pc, #480]	@ (8006854 <HAL_MDF_Init+0x260>)
 8006674:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8006676:	2b00      	cmp	r3, #0
 8006678:	f040 8090 	bne.w	800679c <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a75      	ldr	r2, [pc, #468]	@ (8006858 <HAL_MDF_Init+0x264>)
 8006682:	4293      	cmp	r3, r2
 8006684:	f040 808a 	bne.w	800679c <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a72      	ldr	r2, [pc, #456]	@ (8006858 <HAL_MDF_Init+0x264>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d101      	bne.n	8006696 <HAL_MDF_Init+0xa2>
 8006692:	4b72      	ldr	r3, [pc, #456]	@ (800685c <HAL_MDF_Init+0x268>)
 8006694:	e000      	b.n	8006698 <HAL_MDF_Init+0xa4>
 8006696:	4b72      	ldr	r3, [pc, #456]	@ (8006860 <HAL_MDF_Init+0x26c>)
 8006698:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	da02      	bge.n	80066a8 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	73fb      	strb	r3, [r7, #15]
 80066a6:	e079      	b.n	800679c <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a63      	ldr	r2, [pc, #396]	@ (800683c <HAL_MDF_Init+0x248>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d018      	beq.n	80066e4 <HAL_MDF_Init+0xf0>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a62      	ldr	r2, [pc, #392]	@ (8006840 <HAL_MDF_Init+0x24c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d013      	beq.n	80066e4 <HAL_MDF_Init+0xf0>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a60      	ldr	r2, [pc, #384]	@ (8006844 <HAL_MDF_Init+0x250>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00e      	beq.n	80066e4 <HAL_MDF_Init+0xf0>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a5f      	ldr	r2, [pc, #380]	@ (8006848 <HAL_MDF_Init+0x254>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d009      	beq.n	80066e4 <HAL_MDF_Init+0xf0>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a5d      	ldr	r2, [pc, #372]	@ (800684c <HAL_MDF_Init+0x258>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d004      	beq.n	80066e4 <HAL_MDF_Init+0xf0>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a5c      	ldr	r2, [pc, #368]	@ (8006850 <HAL_MDF_Init+0x25c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d10d      	bne.n	8006700 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	011b      	lsls	r3, r3, #4
 80066fa:	431a      	orrs	r2, r3
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2200      	movs	r2, #0
 8006704:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	3b01      	subs	r3, #1
 8006710:	061b      	lsls	r3, r3, #24
 8006712:	431a      	orrs	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	7b1b      	ldrb	r3, [r3, #12]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d137      	bne.n	8006790 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	3b01      	subs	r3, #1
 800672a:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006730:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8006738:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 800673a:	431a      	orrs	r2, r3
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	7e1b      	ldrb	r3, [r3, #24]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d123      	bne.n	8006790 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a3b      	ldr	r2, [pc, #236]	@ (800683c <HAL_MDF_Init+0x248>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d012      	beq.n	8006778 <HAL_MDF_Init+0x184>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a3a      	ldr	r2, [pc, #232]	@ (8006840 <HAL_MDF_Init+0x24c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d00d      	beq.n	8006778 <HAL_MDF_Init+0x184>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a38      	ldr	r2, [pc, #224]	@ (8006844 <HAL_MDF_Init+0x250>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d008      	beq.n	8006778 <HAL_MDF_Init+0x184>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a37      	ldr	r2, [pc, #220]	@ (8006848 <HAL_MDF_Init+0x254>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d003      	beq.n	8006778 <HAL_MDF_Init+0x184>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a35      	ldr	r2, [pc, #212]	@ (800684c <HAL_MDF_Init+0x258>)
 8006776:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006784:	430b      	orrs	r3, r1
 8006786:	4313      	orrs	r3, r2
 8006788:	f043 0210 	orr.w	r2, r3, #16
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f043 0201 	orr.w	r2, r3, #1
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d128      	bne.n	80067f4 <HAL_MDF_Init+0x200>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d123      	bne.n	80067f4 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	da02      	bge.n	80067bc <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	73fb      	strb	r3, [r7, #15]
 80067ba:	e01b      	b.n	80067f4 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6819      	ldr	r1, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ce:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80067d4:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067da:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0201 	orr.w	r2, r2, #1
 80067f2:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d14a      	bne.n	8006890 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 021f 	bic.w	r2, r2, #31
 8006808:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6859      	ldr	r1, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a0d      	ldr	r2, [pc, #52]	@ (8006858 <HAL_MDF_Init+0x264>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d11e      	bne.n	8006864 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8006826:	4b0b      	ldr	r3, [pc, #44]	@ (8006854 <HAL_MDF_Init+0x260>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3301      	adds	r3, #1
 800682c:	4a09      	ldr	r2, [pc, #36]	@ (8006854 <HAL_MDF_Init+0x260>)
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	e01d      	b.n	800686e <HAL_MDF_Init+0x27a>
 8006832:	bf00      	nop
 8006834:	20001530 	.word	0x20001530
 8006838:	20001528 	.word	0x20001528
 800683c:	40025080 	.word	0x40025080
 8006840:	40025100 	.word	0x40025100
 8006844:	40025180 	.word	0x40025180
 8006848:	40025200 	.word	0x40025200
 800684c:	40025280 	.word	0x40025280
 8006850:	40025300 	.word	0x40025300
 8006854:	2000152c 	.word	0x2000152c
 8006858:	46024080 	.word	0x46024080
 800685c:	46024000 	.word	0x46024000
 8006860:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8006864:	4b0d      	ldr	r3, [pc, #52]	@ (800689c <HAL_MDF_Init+0x2a8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3301      	adds	r3, #1
 800686a:	4a0c      	ldr	r2, [pc, #48]	@ (800689c <HAL_MDF_Init+0x2a8>)
 800686c:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4618      	mov	r0, r3
 8006874:	f000 f816 	bl	80068a4 <MDF_GetHandleNumberFromInstance>
 8006878:	4602      	mov	r2, r0
 800687a:	4909      	ldr	r1, [pc, #36]	@ (80068a0 <HAL_MDF_Init+0x2ac>)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	641a      	str	r2, [r3, #64]	@ 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8006890:	7bfb      	ldrb	r3, [r7, #15]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20001528 	.word	0x20001528
 80068a0:	20001530 	.word	0x20001530

080068a4 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a19      	ldr	r2, [pc, #100]	@ (8006914 <MDF_GetHandleNumberFromInstance+0x70>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d102      	bne.n	80068ba <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	e024      	b.n	8006904 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a16      	ldr	r2, [pc, #88]	@ (8006918 <MDF_GetHandleNumberFromInstance+0x74>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d102      	bne.n	80068c8 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 80068c2:	2301      	movs	r3, #1
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	e01d      	b.n	8006904 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a14      	ldr	r2, [pc, #80]	@ (800691c <MDF_GetHandleNumberFromInstance+0x78>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d102      	bne.n	80068d6 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 80068d0:	2302      	movs	r3, #2
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	e016      	b.n	8006904 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a11      	ldr	r2, [pc, #68]	@ (8006920 <MDF_GetHandleNumberFromInstance+0x7c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d102      	bne.n	80068e4 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 80068de:	2303      	movs	r3, #3
 80068e0:	60fb      	str	r3, [r7, #12]
 80068e2:	e00f      	b.n	8006904 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a0f      	ldr	r2, [pc, #60]	@ (8006924 <MDF_GetHandleNumberFromInstance+0x80>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d102      	bne.n	80068f2 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 80068ec:	2304      	movs	r3, #4
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	e008      	b.n	8006904 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a0c      	ldr	r2, [pc, #48]	@ (8006928 <MDF_GetHandleNumberFromInstance+0x84>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d102      	bne.n	8006900 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 80068fa:	2305      	movs	r3, #5
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	e001      	b.n	8006904 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8006900:	2306      	movs	r3, #6
 8006902:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8006904:	68fb      	ldr	r3, [r7, #12]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40025080 	.word	0x40025080
 8006918:	40025100 	.word	0x40025100
 800691c:	40025180 	.word	0x40025180
 8006920:	40025200 	.word	0x40025200
 8006924:	40025280 	.word	0x40025280
 8006928:	40025300 	.word	0x40025300

0800692c <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f043 0201 	orr.w	r2, r3, #1
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	601a      	str	r2, [r3, #0]
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af02      	add	r7, sp, #8
 8006952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006958:	f7fc fd20 	bl	800339c <HAL_GetTick>
 800695c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	73fb      	strb	r3, [r7, #15]
 8006968:	e0a5      	b.n	8006ab6 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006974:	2b00      	cmp	r3, #0
 8006976:	f040 809e 	bne.w	8006ab6 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7fc f8ae 	bl	8002adc <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006980:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f951 	bl	8006c2c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	4b4b      	ldr	r3, [pc, #300]	@ (8006ac0 <HAL_OSPI_Init+0x174>)
 8006992:	4013      	ands	r3, r2
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	68d1      	ldr	r1, [r2, #12]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6912      	ldr	r2, [r2, #16]
 800699c:	3a01      	subs	r2, #1
 800699e:	0412      	lsls	r2, r2, #16
 80069a0:	4311      	orrs	r1, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6952      	ldr	r2, [r2, #20]
 80069a6:	3a01      	subs	r2, #1
 80069a8:	0212      	lsls	r2, r2, #8
 80069aa:	4311      	orrs	r1, r2
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069b0:	4311      	orrs	r1, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	69d2      	ldr	r2, [r2, #28]
 80069b6:	4311      	orrs	r1, r2
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6812      	ldr	r2, [r2, #0]
 80069bc:	430b      	orrs	r3, r1
 80069be:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1a      	ldr	r2, [r3, #32]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069da:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80069f0:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	021a      	lsls	r2, r3, #8
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2200      	movs	r2, #0
 8006a16:	2120      	movs	r1, #32
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fe09 	bl	8007630 <OSPI_WaitFlagStateUntilTimeout>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d146      	bne.n	8006ab6 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a36:	1e5a      	subs	r2, r3, #1
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689a      	ldr	r2, [r3, #8]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006a5e:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f042 0201 	orr.w	r2, r2, #1
 8006a84:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d107      	bne.n	8006a9e <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0202 	orr.w	r2, r2, #2
 8006a9c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006aa6:	d103      	bne.n	8006ab0 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	651a      	str	r2, [r3, #80]	@ 0x50
 8006aae:	e002      	b.n	8006ab6 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	f8e0c0f4 	.word	0xf8e0c0f4

08006ac4 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08a      	sub	sp, #40	@ 0x28
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8006ad0:	f7fc fc64 	bl	800339c <HAL_GetTick>
 8006ad4:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ada:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d002      	beq.n	8006ae8 <HAL_OSPI_HyperbusCfg+0x24>
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d122      	bne.n	8006b2e <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2200      	movs	r2, #0
 8006af0:	2120      	movs	r1, #32
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 fd9c 	bl	8007630 <OSPI_WaitFlagStateUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8006afc:	7ffb      	ldrb	r3, [r7, #31]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d11a      	bne.n	8006b38 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	041a      	lsls	r2, r3, #16
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	021b      	lsls	r3, r3, #8
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	ea42 0103 	orr.w	r1, r2, r3
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006b2c:	e004      	b.n	8006b38 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2210      	movs	r2, #16
 8006b36:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 8006b38:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3720      	adds	r7, #32
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b088      	sub	sp, #32
 8006b46:	af02      	add	r7, sp, #8
 8006b48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8006b4e:	f7fc fc25 	bl	800339c <HAL_GetTick>
 8006b52:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b58:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f003 0308 	and.w	r3, r3, #8
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d104      	bne.n	8006b6e <HAL_OSPI_Abort+0x2c>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f003 0304 	and.w	r3, r3, #4
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d052      	beq.n	8006c14 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d014      	beq.n	8006ba6 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 0204 	bic.w	r2, r2, #4
 8006b8a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fc feb0 	bl	80038f6 <HAL_DMA_Abort>
 8006b96:	4603      	mov	r3, r0
 8006b98:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2204      	movs	r2, #4
 8006ba4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	f003 0320 	and.w	r3, r3, #32
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d02b      	beq.n	8006c0c <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0202 	orr.w	r2, r2, #2
 8006bc2:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	2102      	movs	r1, #2
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fd2d 	bl	8007630 <OSPI_WaitFlagStateUntilTimeout>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d11f      	bne.n	8006c20 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2202      	movs	r2, #2
 8006be6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2120      	movs	r1, #32
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fd1b 	bl	8007630 <OSPI_WaitFlagStateUntilTimeout>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006bfe:	7dfb      	ldrb	r3, [r7, #23]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10d      	bne.n	8006c20 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006c0a:	e009      	b.n	8006c20 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006c12:	e005      	b.n	8006c20 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2210      	movs	r2, #16
 8006c1c:	655a      	str	r2, [r3, #84]	@ 0x54
 8006c1e:	e000      	b.n	8006c22 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006c20:	bf00      	nop
  }

  /* Return function status */
  return status;
 8006c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3718      	adds	r7, #24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
	...

08006c4c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b094      	sub	sp, #80	@ 0x50
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a9d      	ldr	r2, [pc, #628]	@ (8006ee0 <HAL_OSPIM_Config+0x294>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d105      	bne.n	8006c7a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8006c78:	e004      	b.n	8006c84 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006c84:	2300      	movs	r3, #0
 8006c86:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006c8a:	e01d      	b.n	8006cc8 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8006c8c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006c90:	3301      	adds	r3, #1
 8006c92:	b2d8      	uxtb	r0, r3
 8006c94:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8006c98:	f107 0114 	add.w	r1, r7, #20
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	4413      	add	r3, r2
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	440b      	add	r3, r1
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	f000 fd02 	bl	80076b0 <OSPIM_GetConfig>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2208      	movs	r2, #8
 8006cbc:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006cbe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006cc8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d9dd      	bls.n	8006c8c <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8006cd0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 849e 	bne.w	8007616 <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8006cda:	4b81      	ldr	r3, [pc, #516]	@ (8006ee0 <HAL_OSPIM_Config+0x294>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00b      	beq.n	8006cfe <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006ce6:	4b7e      	ldr	r3, [pc, #504]	@ (8006ee0 <HAL_OSPIM_Config+0x294>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a7d      	ldr	r2, [pc, #500]	@ (8006ee0 <HAL_OSPIM_Config+0x294>)
 8006cec:	f023 0301 	bic.w	r3, r3, #1
 8006cf0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8006cf2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006cf6:	f043 0301 	orr.w	r3, r3, #1
 8006cfa:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8006cfe:	4b79      	ldr	r3, [pc, #484]	@ (8006ee4 <HAL_OSPIM_Config+0x298>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00b      	beq.n	8006d22 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006d0a:	4b76      	ldr	r3, [pc, #472]	@ (8006ee4 <HAL_OSPIM_Config+0x298>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a75      	ldr	r2, [pc, #468]	@ (8006ee4 <HAL_OSPIM_Config+0x298>)
 8006d10:	f023 0301 	bic.w	r3, r3, #1
 8006d14:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8006d16:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006d1a:	f043 0302 	orr.w	r3, r3, #2
 8006d1e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006d22:	4971      	ldr	r1, [pc, #452]	@ (8006ee8 <HAL_OSPIM_Config+0x29c>)
 8006d24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d26:	4613      	mov	r3, r2
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	4413      	add	r3, r2
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	3350      	adds	r3, #80	@ 0x50
 8006d30:	443b      	add	r3, r7
 8006d32:	3b34      	subs	r3, #52	@ 0x34
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	440b      	add	r3, r1
 8006d3c:	6859      	ldr	r1, [r3, #4]
 8006d3e:	486a      	ldr	r0, [pc, #424]	@ (8006ee8 <HAL_OSPIM_Config+0x29c>)
 8006d40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d42:	4613      	mov	r3, r2
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	4413      	add	r3, r2
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	3350      	adds	r3, #80	@ 0x50
 8006d4c:	443b      	add	r3, r7
 8006d4e:	3b34      	subs	r3, #52	@ 0x34
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4403      	add	r3, r0
 8006d5c:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006d5e:	4b62      	ldr	r3, [pc, #392]	@ (8006ee8 <HAL_OSPIM_Config+0x29c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 80c0 	beq.w	8006eec <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006d6c:	4b5e      	ldr	r3, [pc, #376]	@ (8006ee8 <HAL_OSPIM_Config+0x29c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a5d      	ldr	r2, [pc, #372]	@ (8006ee8 <HAL_OSPIM_Config+0x29c>)
 8006d72:	f023 0301 	bic.w	r3, r3, #1
 8006d76:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8006d78:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	f040 8162 	bne.w	8007046 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8006d82:	4959      	ldr	r1, [pc, #356]	@ (8006ee8 <HAL_OSPIM_Config+0x29c>)
 8006d84:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006d88:	4613      	mov	r3, r2
 8006d8a:	005b      	lsls	r3, r3, #1
 8006d8c:	4413      	add	r3, r2
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	3350      	adds	r3, #80	@ 0x50
 8006d92:	443b      	add	r3, r7
 8006d94:	3b3c      	subs	r3, #60	@ 0x3c
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	440b      	add	r3, r1
 8006d9e:	6859      	ldr	r1, [r3, #4]
 8006da0:	4851      	ldr	r0, [pc, #324]	@ (8006ee8 <HAL_OSPIM_Config+0x29c>)
 8006da2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006da6:	4613      	mov	r3, r2
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	4413      	add	r3, r2
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	3350      	adds	r3, #80	@ 0x50
 8006db0:	443b      	add	r3, r7
 8006db2:	3b3c      	subs	r3, #60	@ 0x3c
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3b01      	subs	r3, #1
 8006db8:	f041 0202 	orr.w	r2, r1, #2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4403      	add	r3, r0
 8006dc0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006dc2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	4413      	add	r3, r2
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	3350      	adds	r3, #80	@ 0x50
 8006dd0:	443b      	add	r3, r7
 8006dd2:	3b38      	subs	r3, #56	@ 0x38
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d01f      	beq.n	8006e1a <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8006dda:	4943      	ldr	r1, [pc, #268]	@ (8006ee8 <HAL_OSPIM_Config+0x29c>)
 8006ddc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006de0:	4613      	mov	r3, r2
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	4413      	add	r3, r2
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	3350      	adds	r3, #80	@ 0x50
 8006dea:	443b      	add	r3, r7
 8006dec:	3b38      	subs	r3, #56	@ 0x38
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	6859      	ldr	r1, [r3, #4]
 8006df8:	483b      	ldr	r0, [pc, #236]	@ (8006ee8 <HAL_OSPIM_Config+0x29c>)
 8006dfa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006dfe:	4613      	mov	r3, r2
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	4413      	add	r3, r2
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	3350      	adds	r3, #80	@ 0x50
 8006e08:	443b      	add	r3, r7
 8006e0a:	3b38      	subs	r3, #56	@ 0x38
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	f041 0220 	orr.w	r2, r1, #32
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4403      	add	r3, r0
 8006e18:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006e1a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006e1e:	4613      	mov	r3, r2
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	4413      	add	r3, r2
 8006e24:	00db      	lsls	r3, r3, #3
 8006e26:	3350      	adds	r3, #80	@ 0x50
 8006e28:	443b      	add	r3, r7
 8006e2a:	3b30      	subs	r3, #48	@ 0x30
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d023      	beq.n	8006e7a <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006e32:	492d      	ldr	r1, [pc, #180]	@ (8006ee8 <HAL_OSPIM_Config+0x29c>)
 8006e34:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006e38:	4613      	mov	r3, r2
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	4413      	add	r3, r2
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	3350      	adds	r3, #80	@ 0x50
 8006e42:	443b      	add	r3, r7
 8006e44:	3b30      	subs	r3, #48	@ 0x30
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	440b      	add	r3, r1
 8006e52:	6859      	ldr	r1, [r3, #4]
 8006e54:	4824      	ldr	r0, [pc, #144]	@ (8006ee8 <HAL_OSPIM_Config+0x29c>)
 8006e56:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	4413      	add	r3, r2
 8006e60:	00db      	lsls	r3, r3, #3
 8006e62:	3350      	adds	r3, #80	@ 0x50
 8006e64:	443b      	add	r3, r7
 8006e66:	3b30      	subs	r3, #48	@ 0x30
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4403      	add	r3, r0
 8006e78:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006e7a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006e7e:	4613      	mov	r3, r2
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	4413      	add	r3, r2
 8006e84:	00db      	lsls	r3, r3, #3
 8006e86:	3350      	adds	r3, #80	@ 0x50
 8006e88:	443b      	add	r3, r7
 8006e8a:	3b2c      	subs	r3, #44	@ 0x2c
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 80d9 	beq.w	8007046 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006e94:	4914      	ldr	r1, [pc, #80]	@ (8006ee8 <HAL_OSPIM_Config+0x29c>)
 8006e96:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	4413      	add	r3, r2
 8006ea0:	00db      	lsls	r3, r3, #3
 8006ea2:	3350      	adds	r3, #80	@ 0x50
 8006ea4:	443b      	add	r3, r7
 8006ea6:	3b2c      	subs	r3, #44	@ 0x2c
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	440b      	add	r3, r1
 8006eb4:	6859      	ldr	r1, [r3, #4]
 8006eb6:	480c      	ldr	r0, [pc, #48]	@ (8006ee8 <HAL_OSPIM_Config+0x29c>)
 8006eb8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	4413      	add	r3, r2
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	3350      	adds	r3, #80	@ 0x50
 8006ec6:	443b      	add	r3, r7
 8006ec8:	3b2c      	subs	r3, #44	@ 0x2c
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4403      	add	r3, r0
 8006eda:	605a      	str	r2, [r3, #4]
 8006edc:	e0b3      	b.n	8007046 <HAL_OSPIM_Config+0x3fa>
 8006ede:	bf00      	nop
 8006ee0:	420d1400 	.word	0x420d1400
 8006ee4:	420d2400 	.word	0x420d2400
 8006ee8:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8006eec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006eee:	4613      	mov	r3, r2
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	4413      	add	r3, r2
 8006ef4:	00db      	lsls	r3, r3, #3
 8006ef6:	3350      	adds	r3, #80	@ 0x50
 8006ef8:	443b      	add	r3, r7
 8006efa:	3b3c      	subs	r3, #60	@ 0x3c
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f000 80a1 	beq.w	8007046 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006f04:	4993      	ldr	r1, [pc, #588]	@ (8007154 <HAL_OSPIM_Config+0x508>)
 8006f06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f08:	4613      	mov	r3, r2
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	4413      	add	r3, r2
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	3350      	adds	r3, #80	@ 0x50
 8006f12:	443b      	add	r3, r7
 8006f14:	3b3c      	subs	r3, #60	@ 0x3c
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	440b      	add	r3, r1
 8006f1e:	6859      	ldr	r1, [r3, #4]
 8006f20:	488c      	ldr	r0, [pc, #560]	@ (8007154 <HAL_OSPIM_Config+0x508>)
 8006f22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f24:	4613      	mov	r3, r2
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	4413      	add	r3, r2
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	3350      	adds	r3, #80	@ 0x50
 8006f2e:	443b      	add	r3, r7
 8006f30:	3b3c      	subs	r3, #60	@ 0x3c
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	f021 0201 	bic.w	r2, r1, #1
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4403      	add	r3, r0
 8006f3e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006f40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f42:	4613      	mov	r3, r2
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	4413      	add	r3, r2
 8006f48:	00db      	lsls	r3, r3, #3
 8006f4a:	3350      	adds	r3, #80	@ 0x50
 8006f4c:	443b      	add	r3, r7
 8006f4e:	3b38      	subs	r3, #56	@ 0x38
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d01d      	beq.n	8006f92 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006f56:	497f      	ldr	r1, [pc, #508]	@ (8007154 <HAL_OSPIM_Config+0x508>)
 8006f58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	4413      	add	r3, r2
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	3350      	adds	r3, #80	@ 0x50
 8006f64:	443b      	add	r3, r7
 8006f66:	3b38      	subs	r3, #56	@ 0x38
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	440b      	add	r3, r1
 8006f70:	6859      	ldr	r1, [r3, #4]
 8006f72:	4878      	ldr	r0, [pc, #480]	@ (8007154 <HAL_OSPIM_Config+0x508>)
 8006f74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f76:	4613      	mov	r3, r2
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	4413      	add	r3, r2
 8006f7c:	00db      	lsls	r3, r3, #3
 8006f7e:	3350      	adds	r3, #80	@ 0x50
 8006f80:	443b      	add	r3, r7
 8006f82:	3b38      	subs	r3, #56	@ 0x38
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	f021 0210 	bic.w	r2, r1, #16
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4403      	add	r3, r0
 8006f90:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006f92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f94:	4613      	mov	r3, r2
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	4413      	add	r3, r2
 8006f9a:	00db      	lsls	r3, r3, #3
 8006f9c:	3350      	adds	r3, #80	@ 0x50
 8006f9e:	443b      	add	r3, r7
 8006fa0:	3b30      	subs	r3, #48	@ 0x30
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d021      	beq.n	8006fec <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006fa8:	496a      	ldr	r1, [pc, #424]	@ (8007154 <HAL_OSPIM_Config+0x508>)
 8006faa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fac:	4613      	mov	r3, r2
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	4413      	add	r3, r2
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	3350      	adds	r3, #80	@ 0x50
 8006fb6:	443b      	add	r3, r7
 8006fb8:	3b30      	subs	r3, #48	@ 0x30
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	440b      	add	r3, r1
 8006fc6:	6859      	ldr	r1, [r3, #4]
 8006fc8:	4862      	ldr	r0, [pc, #392]	@ (8007154 <HAL_OSPIM_Config+0x508>)
 8006fca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fcc:	4613      	mov	r3, r2
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	4413      	add	r3, r2
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	3350      	adds	r3, #80	@ 0x50
 8006fd6:	443b      	add	r3, r7
 8006fd8:	3b30      	subs	r3, #48	@ 0x30
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4403      	add	r3, r0
 8006fea:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006fec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fee:	4613      	mov	r3, r2
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	4413      	add	r3, r2
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	3350      	adds	r3, #80	@ 0x50
 8006ff8:	443b      	add	r3, r7
 8006ffa:	3b2c      	subs	r3, #44	@ 0x2c
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d021      	beq.n	8007046 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8007002:	4954      	ldr	r1, [pc, #336]	@ (8007154 <HAL_OSPIM_Config+0x508>)
 8007004:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007006:	4613      	mov	r3, r2
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	4413      	add	r3, r2
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	3350      	adds	r3, #80	@ 0x50
 8007010:	443b      	add	r3, r7
 8007012:	3b2c      	subs	r3, #44	@ 0x2c
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3b01      	subs	r3, #1
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	440b      	add	r3, r1
 8007020:	6859      	ldr	r1, [r3, #4]
 8007022:	484c      	ldr	r0, [pc, #304]	@ (8007154 <HAL_OSPIM_Config+0x508>)
 8007024:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007026:	4613      	mov	r3, r2
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	4413      	add	r3, r2
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	3350      	adds	r3, #80	@ 0x50
 8007030:	443b      	add	r3, r7
 8007032:	3b2c      	subs	r3, #44	@ 0x2c
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3b01      	subs	r3, #1
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4403      	add	r3, r0
 8007044:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	6819      	ldr	r1, [r3, #0]
 800704a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800704e:	4613      	mov	r3, r2
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	4413      	add	r3, r2
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	3350      	adds	r3, #80	@ 0x50
 8007058:	443b      	add	r3, r7
 800705a:	3b3c      	subs	r3, #60	@ 0x3c
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4299      	cmp	r1, r3
 8007060:	d038      	beq.n	80070d4 <HAL_OSPIM_Config+0x488>
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	6859      	ldr	r1, [r3, #4]
 8007066:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800706a:	4613      	mov	r3, r2
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	4413      	add	r3, r2
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	3350      	adds	r3, #80	@ 0x50
 8007074:	443b      	add	r3, r7
 8007076:	3b38      	subs	r3, #56	@ 0x38
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4299      	cmp	r1, r3
 800707c:	d02a      	beq.n	80070d4 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	6899      	ldr	r1, [r3, #8]
 8007082:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007086:	4613      	mov	r3, r2
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	4413      	add	r3, r2
 800708c:	00db      	lsls	r3, r3, #3
 800708e:	3350      	adds	r3, #80	@ 0x50
 8007090:	443b      	add	r3, r7
 8007092:	3b34      	subs	r3, #52	@ 0x34
 8007094:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8007096:	4299      	cmp	r1, r3
 8007098:	d01c      	beq.n	80070d4 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	68d9      	ldr	r1, [r3, #12]
 800709e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80070a2:	4613      	mov	r3, r2
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	4413      	add	r3, r2
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	3350      	adds	r3, #80	@ 0x50
 80070ac:	443b      	add	r3, r7
 80070ae:	3b30      	subs	r3, #48	@ 0x30
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4299      	cmp	r1, r3
 80070b4:	d00e      	beq.n	80070d4 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	6919      	ldr	r1, [r3, #16]
 80070ba:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80070be:	4613      	mov	r3, r2
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	4413      	add	r3, r2
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	3350      	adds	r3, #80	@ 0x50
 80070c8:	443b      	add	r3, r7
 80070ca:	3b2c      	subs	r3, #44	@ 0x2c
 80070cc:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80070ce:	4299      	cmp	r1, r3
 80070d0:	f040 810e 	bne.w	80072f0 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	6819      	ldr	r1, [r3, #0]
 80070d8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80070dc:	4613      	mov	r3, r2
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	4413      	add	r3, r2
 80070e2:	00db      	lsls	r3, r3, #3
 80070e4:	3350      	adds	r3, #80	@ 0x50
 80070e6:	443b      	add	r3, r7
 80070e8:	3b3c      	subs	r3, #60	@ 0x3c
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4299      	cmp	r1, r3
 80070ee:	d133      	bne.n	8007158 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	6859      	ldr	r1, [r3, #4]
 80070f4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80070f8:	4613      	mov	r3, r2
 80070fa:	005b      	lsls	r3, r3, #1
 80070fc:	4413      	add	r3, r2
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	3350      	adds	r3, #80	@ 0x50
 8007102:	443b      	add	r3, r7
 8007104:	3b38      	subs	r3, #56	@ 0x38
 8007106:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8007108:	4299      	cmp	r1, r3
 800710a:	d125      	bne.n	8007158 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	68d9      	ldr	r1, [r3, #12]
 8007110:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007114:	4613      	mov	r3, r2
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	4413      	add	r3, r2
 800711a:	00db      	lsls	r3, r3, #3
 800711c:	3350      	adds	r3, #80	@ 0x50
 800711e:	443b      	add	r3, r7
 8007120:	3b30      	subs	r3, #48	@ 0x30
 8007122:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007124:	4299      	cmp	r1, r3
 8007126:	d117      	bne.n	8007158 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	6919      	ldr	r1, [r3, #16]
 800712c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007130:	4613      	mov	r3, r2
 8007132:	005b      	lsls	r3, r3, #1
 8007134:	4413      	add	r3, r2
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	3350      	adds	r3, #80	@ 0x50
 800713a:	443b      	add	r3, r7
 800713c:	3b2c      	subs	r3, #44	@ 0x2c
 800713e:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8007140:	4299      	cmp	r1, r3
 8007142:	d109      	bne.n	8007158 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007144:	4b03      	ldr	r3, [pc, #12]	@ (8007154 <HAL_OSPIM_Config+0x508>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a02      	ldr	r2, [pc, #8]	@ (8007154 <HAL_OSPIM_Config+0x508>)
 800714a:	f043 0301 	orr.w	r3, r3, #1
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	e0ce      	b.n	80072f0 <HAL_OSPIM_Config+0x6a4>
 8007152:	bf00      	nop
 8007154:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8007158:	49a4      	ldr	r1, [pc, #656]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 800715a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800715e:	4613      	mov	r3, r2
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	4413      	add	r3, r2
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	3350      	adds	r3, #80	@ 0x50
 8007168:	443b      	add	r3, r7
 800716a:	3b3c      	subs	r3, #60	@ 0x3c
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3b01      	subs	r3, #1
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	440b      	add	r3, r1
 8007174:	6859      	ldr	r1, [r3, #4]
 8007176:	489d      	ldr	r0, [pc, #628]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 8007178:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800717c:	4613      	mov	r3, r2
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	4413      	add	r3, r2
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	3350      	adds	r3, #80	@ 0x50
 8007186:	443b      	add	r3, r7
 8007188:	3b3c      	subs	r3, #60	@ 0x3c
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3b01      	subs	r3, #1
 800718e:	f021 0201 	bic.w	r2, r1, #1
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4403      	add	r3, r0
 8007196:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007198:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800719c:	4613      	mov	r3, r2
 800719e:	005b      	lsls	r3, r3, #1
 80071a0:	4413      	add	r3, r2
 80071a2:	00db      	lsls	r3, r3, #3
 80071a4:	3350      	adds	r3, #80	@ 0x50
 80071a6:	443b      	add	r3, r7
 80071a8:	3b38      	subs	r3, #56	@ 0x38
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d01f      	beq.n	80071f0 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80071b0:	498e      	ldr	r1, [pc, #568]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 80071b2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80071b6:	4613      	mov	r3, r2
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	4413      	add	r3, r2
 80071bc:	00db      	lsls	r3, r3, #3
 80071be:	3350      	adds	r3, #80	@ 0x50
 80071c0:	443b      	add	r3, r7
 80071c2:	3b38      	subs	r3, #56	@ 0x38
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3b01      	subs	r3, #1
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	440b      	add	r3, r1
 80071cc:	6859      	ldr	r1, [r3, #4]
 80071ce:	4887      	ldr	r0, [pc, #540]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 80071d0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80071d4:	4613      	mov	r3, r2
 80071d6:	005b      	lsls	r3, r3, #1
 80071d8:	4413      	add	r3, r2
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	3350      	adds	r3, #80	@ 0x50
 80071de:	443b      	add	r3, r7
 80071e0:	3b38      	subs	r3, #56	@ 0x38
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	f021 0210 	bic.w	r2, r1, #16
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4403      	add	r3, r0
 80071ee:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80071f0:	497e      	ldr	r1, [pc, #504]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 80071f2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80071f6:	4613      	mov	r3, r2
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	4413      	add	r3, r2
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	3350      	adds	r3, #80	@ 0x50
 8007200:	443b      	add	r3, r7
 8007202:	3b34      	subs	r3, #52	@ 0x34
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3b01      	subs	r3, #1
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	440b      	add	r3, r1
 800720c:	6859      	ldr	r1, [r3, #4]
 800720e:	4877      	ldr	r0, [pc, #476]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 8007210:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007214:	4613      	mov	r3, r2
 8007216:	005b      	lsls	r3, r3, #1
 8007218:	4413      	add	r3, r2
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	3350      	adds	r3, #80	@ 0x50
 800721e:	443b      	add	r3, r7
 8007220:	3b34      	subs	r3, #52	@ 0x34
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3b01      	subs	r3, #1
 8007226:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4403      	add	r3, r0
 800722e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007230:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007234:	4613      	mov	r3, r2
 8007236:	005b      	lsls	r3, r3, #1
 8007238:	4413      	add	r3, r2
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	3350      	adds	r3, #80	@ 0x50
 800723e:	443b      	add	r3, r7
 8007240:	3b30      	subs	r3, #48	@ 0x30
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d023      	beq.n	8007290 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007248:	4968      	ldr	r1, [pc, #416]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 800724a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800724e:	4613      	mov	r3, r2
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	4413      	add	r3, r2
 8007254:	00db      	lsls	r3, r3, #3
 8007256:	3350      	adds	r3, #80	@ 0x50
 8007258:	443b      	add	r3, r7
 800725a:	3b30      	subs	r3, #48	@ 0x30
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3b01      	subs	r3, #1
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	440b      	add	r3, r1
 8007268:	6859      	ldr	r1, [r3, #4]
 800726a:	4860      	ldr	r0, [pc, #384]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 800726c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007270:	4613      	mov	r3, r2
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	4413      	add	r3, r2
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	3350      	adds	r3, #80	@ 0x50
 800727a:	443b      	add	r3, r7
 800727c:	3b30      	subs	r3, #48	@ 0x30
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3b01      	subs	r3, #1
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4403      	add	r3, r0
 800728e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007290:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007294:	4613      	mov	r3, r2
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	4413      	add	r3, r2
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	3350      	adds	r3, #80	@ 0x50
 800729e:	443b      	add	r3, r7
 80072a0:	3b2c      	subs	r3, #44	@ 0x2c
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d023      	beq.n	80072f0 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80072a8:	4950      	ldr	r1, [pc, #320]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 80072aa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80072ae:	4613      	mov	r3, r2
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	4413      	add	r3, r2
 80072b4:	00db      	lsls	r3, r3, #3
 80072b6:	3350      	adds	r3, #80	@ 0x50
 80072b8:	443b      	add	r3, r7
 80072ba:	3b2c      	subs	r3, #44	@ 0x2c
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3b01      	subs	r3, #1
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	440b      	add	r3, r1
 80072c8:	6859      	ldr	r1, [r3, #4]
 80072ca:	4848      	ldr	r0, [pc, #288]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 80072cc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80072d0:	4613      	mov	r3, r2
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	4413      	add	r3, r2
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	3350      	adds	r3, #80	@ 0x50
 80072da:	443b      	add	r3, r7
 80072dc:	3b2c      	subs	r3, #44	@ 0x2c
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4403      	add	r3, r0
 80072ee:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80072f0:	4a3e      	ldr	r2, [pc, #248]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007304:	025b      	lsls	r3, r3, #9
 8007306:	431a      	orrs	r2, r3
 8007308:	4938      	ldr	r1, [pc, #224]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	3b01      	subs	r3, #1
 8007310:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	440b      	add	r3, r1
 8007318:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d018      	beq.n	8007354 <HAL_OSPIM_Config+0x708>
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800732a:	d813      	bhi.n	8007354 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	1e5a      	subs	r2, r3, #1
 8007332:	4b2e      	ldr	r3, [pc, #184]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	0c1b      	lsrs	r3, r3, #16
 8007338:	b2db      	uxtb	r3, r3
 800733a:	429a      	cmp	r2, r3
 800733c:	d90a      	bls.n	8007354 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800733e:	4b2b      	ldr	r3, [pc, #172]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	3b01      	subs	r3, #1
 800734c:	041b      	lsls	r3, r3, #16
 800734e:	4927      	ldr	r1, [pc, #156]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 8007350:	4313      	orrs	r3, r2
 8007352:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007354:	4b25      	ldr	r3, [pc, #148]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 809a 	beq.w	8007496 <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8007362:	4a22      	ldr	r2, [pc, #136]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3b01      	subs	r3, #1
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	f023 0203 	bic.w	r2, r3, #3
 8007374:	491d      	ldr	r1, [pc, #116]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3b01      	subs	r3, #1
 800737c:	f042 0201 	orr.w	r2, r2, #1
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	440b      	add	r3, r1
 8007384:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d011      	beq.n	80073b2 <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800738e:	4a17      	ldr	r2, [pc, #92]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	3b01      	subs	r3, #1
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80073a0:	4912      	ldr	r1, [pc, #72]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	f042 0210 	orr.w	r2, r2, #16
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	440b      	add	r3, r1
 80073b0:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d018      	beq.n	80073f0 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80073be:	4a0b      	ldr	r2, [pc, #44]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	3b01      	subs	r3, #1
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80073d4:	4905      	ldr	r1, [pc, #20]	@ (80073ec <HAL_OSPIM_Config+0x7a0>)
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	3b01      	subs	r3, #1
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	440b      	add	r3, r1
 80073e8:	605a      	str	r2, [r3, #4]
 80073ea:	e01b      	b.n	8007424 <HAL_OSPIM_Config+0x7d8>
 80073ec:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d015      	beq.n	8007424 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80073f8:	4a8a      	ldr	r2, [pc, #552]	@ (8007624 <HAL_OSPIM_Config+0x9d8>)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	3b01      	subs	r3, #1
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800740e:	4985      	ldr	r1, [pc, #532]	@ (8007624 <HAL_OSPIM_Config+0x9d8>)
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	3b01      	subs	r3, #1
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	440b      	add	r3, r1
 8007422:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d016      	beq.n	800745e <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007430:	4a7c      	ldr	r2, [pc, #496]	@ (8007624 <HAL_OSPIM_Config+0x9d8>)
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	3b01      	subs	r3, #1
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007446:	4977      	ldr	r1, [pc, #476]	@ (8007624 <HAL_OSPIM_Config+0x9d8>)
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	3b01      	subs	r3, #1
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	440b      	add	r3, r1
 800745a:	605a      	str	r2, [r3, #4]
 800745c:	e0c3      	b.n	80075e6 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	f000 80bf 	beq.w	80075e6 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007468:	4a6e      	ldr	r2, [pc, #440]	@ (8007624 <HAL_OSPIM_Config+0x9d8>)
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	3b01      	subs	r3, #1
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800747e:	4969      	ldr	r1, [pc, #420]	@ (8007624 <HAL_OSPIM_Config+0x9d8>)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	3b01      	subs	r3, #1
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	440b      	add	r3, r1
 8007492:	605a      	str	r2, [r3, #4]
 8007494:	e0a7      	b.n	80075e6 <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8007496:	4a63      	ldr	r2, [pc, #396]	@ (8007624 <HAL_OSPIM_Config+0x9d8>)
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3b01      	subs	r3, #1
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f023 0203 	bic.w	r2, r3, #3
 80074a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	431a      	orrs	r2, r3
 80074ae:	495d      	ldr	r1, [pc, #372]	@ (8007624 <HAL_OSPIM_Config+0x9d8>)
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3b01      	subs	r3, #1
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	440b      	add	r3, r1
 80074be:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d014      	beq.n	80074f2 <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80074c8:	4a56      	ldr	r2, [pc, #344]	@ (8007624 <HAL_OSPIM_Config+0x9d8>)
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80074da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074dc:	015b      	lsls	r3, r3, #5
 80074de:	431a      	orrs	r2, r3
 80074e0:	4950      	ldr	r1, [pc, #320]	@ (8007624 <HAL_OSPIM_Config+0x9d8>)
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	f042 0210 	orr.w	r2, r2, #16
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	440b      	add	r3, r1
 80074f0:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d019      	beq.n	8007532 <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80074fe:	4a49      	ldr	r2, [pc, #292]	@ (8007624 <HAL_OSPIM_Config+0x9d8>)
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	3b01      	subs	r3, #1
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007514:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007516:	049b      	lsls	r3, r3, #18
 8007518:	431a      	orrs	r2, r3
 800751a:	4942      	ldr	r1, [pc, #264]	@ (8007624 <HAL_OSPIM_Config+0x9d8>)
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	3b01      	subs	r3, #1
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	440b      	add	r3, r1
 800752e:	605a      	str	r2, [r3, #4]
 8007530:	e01c      	b.n	800756c <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d018      	beq.n	800756c <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800753a:	4a3a      	ldr	r2, [pc, #232]	@ (8007624 <HAL_OSPIM_Config+0x9d8>)
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	3b01      	subs	r3, #1
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007550:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007552:	069b      	lsls	r3, r3, #26
 8007554:	431a      	orrs	r2, r3
 8007556:	4933      	ldr	r1, [pc, #204]	@ (8007624 <HAL_OSPIM_Config+0x9d8>)
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	3b01      	subs	r3, #1
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	440b      	add	r3, r1
 800756a:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d019      	beq.n	80075ac <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007578:	4a2a      	ldr	r2, [pc, #168]	@ (8007624 <HAL_OSPIM_Config+0x9d8>)
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	3b01      	subs	r3, #1
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800758e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007590:	049b      	lsls	r3, r3, #18
 8007592:	431a      	orrs	r2, r3
 8007594:	4923      	ldr	r1, [pc, #140]	@ (8007624 <HAL_OSPIM_Config+0x9d8>)
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	3b01      	subs	r3, #1
 800759c:	f003 0301 	and.w	r3, r3, #1
 80075a0:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	440b      	add	r3, r1
 80075a8:	605a      	str	r2, [r3, #4]
 80075aa:	e01c      	b.n	80075e6 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d018      	beq.n	80075e6 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80075b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007624 <HAL_OSPIM_Config+0x9d8>)
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80075ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075cc:	069b      	lsls	r3, r3, #26
 80075ce:	431a      	orrs	r2, r3
 80075d0:	4914      	ldr	r1, [pc, #80]	@ (8007624 <HAL_OSPIM_Config+0x9d8>)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	440b      	add	r3, r1
 80075e4:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80075e6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d005      	beq.n	80075fe <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80075f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007628 <HAL_OSPIM_Config+0x9dc>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a0c      	ldr	r2, [pc, #48]	@ (8007628 <HAL_OSPIM_Config+0x9dc>)
 80075f8:	f043 0301 	orr.w	r3, r3, #1
 80075fc:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80075fe:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d005      	beq.n	8007616 <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800760a:	4b08      	ldr	r3, [pc, #32]	@ (800762c <HAL_OSPIM_Config+0x9e0>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a07      	ldr	r2, [pc, #28]	@ (800762c <HAL_OSPIM_Config+0x9e0>)
 8007610:	f043 0301 	orr.w	r3, r3, #1
 8007614:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007616:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800761a:	4618      	mov	r0, r3
 800761c:	3750      	adds	r7, #80	@ 0x50
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	420c4000 	.word	0x420c4000
 8007628:	420d1400 	.word	0x420d1400
 800762c:	420d2400 	.word	0x420d2400

08007630 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	603b      	str	r3, [r7, #0]
 800763c:	4613      	mov	r3, r2
 800763e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007640:	e022      	b.n	8007688 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007648:	d01e      	beq.n	8007688 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800764a:	f7fb fea7 	bl	800339c <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	429a      	cmp	r2, r3
 8007658:	d302      	bcc.n	8007660 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d113      	bne.n	8007688 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6a1a      	ldr	r2, [r3, #32]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	401a      	ands	r2, r3
 800766a:	79fb      	ldrb	r3, [r7, #7]
 800766c:	429a      	cmp	r2, r3
 800766e:	d00b      	beq.n	8007688 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007676:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800767c:	f043 0201 	orr.w	r2, r3, #1
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e00e      	b.n	80076a6 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6a1a      	ldr	r2, [r3, #32]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	4013      	ands	r3, r2
 8007692:	2b00      	cmp	r3, #0
 8007694:	bf14      	ite	ne
 8007696:	2301      	movne	r3, #1
 8007698:	2300      	moveq	r3, #0
 800769a:	b2db      	uxtb	r3, r3
 800769c:	461a      	mov	r2, r3
 800769e:	79fb      	ldrb	r3, [r7, #7]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d1ce      	bne.n	8007642 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	4603      	mov	r3, r0
 80076b8:	6039      	str	r1, [r7, #0]
 80076ba:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80076c4:	79fb      	ldrb	r3, [r7, #7]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d005      	beq.n	80076d6 <OSPIM_GetConfig+0x26>
 80076ca:	79fb      	ldrb	r3, [r7, #7]
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d802      	bhi.n	80076d6 <OSPIM_GetConfig+0x26>
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d102      	bne.n	80076dc <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	75fb      	strb	r3, [r7, #23]
 80076da:	e098      	b.n	800780e <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2200      	movs	r2, #0
 80076e6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2200      	movs	r2, #0
 80076ec:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2200      	movs	r2, #0
 80076f2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	2200      	movs	r2, #0
 80076f8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80076fa:	79fb      	ldrb	r3, [r7, #7]
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d10b      	bne.n	8007718 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007700:	4b46      	ldr	r3, [pc, #280]	@ (800781c <OSPIM_GetConfig+0x16c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b00      	cmp	r3, #0
 800770a:	d102      	bne.n	8007712 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800770c:	4b44      	ldr	r3, [pc, #272]	@ (8007820 <OSPIM_GetConfig+0x170>)
 800770e:	613b      	str	r3, [r7, #16]
 8007710:	e002      	b.n	8007718 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8007712:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007716:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	e074      	b.n	8007808 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800771e:	4a3f      	ldr	r2, [pc, #252]	@ (800781c <OSPIM_GetConfig+0x16c>)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00a      	beq.n	800774a <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	4053      	eors	r3, r2
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d103      	bne.n	800774a <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	f003 0310 	and.w	r3, r3, #16
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00a      	beq.n	800776a <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	4053      	eors	r3, r2
 800775a:	f003 0320 	and.w	r3, r3, #32
 800775e:	2b00      	cmp	r3, #0
 8007760:	d103      	bne.n	800776a <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00a      	beq.n	800778a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	4053      	eors	r3, r2
 800777a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800777e:	2b00      	cmp	r3, #0
 8007780:	d103      	bne.n	800778a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d018      	beq.n	80077c6 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	4053      	eors	r3, r2
 800779a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d111      	bne.n	80077c6 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d106      	bne.n	80077ba <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3301      	adds	r3, #1
 80077b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	60da      	str	r2, [r3, #12]
 80077b8:	e005      	b.n	80077c6 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3301      	adds	r3, #1
 80077be:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d018      	beq.n	8007802 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	4053      	eors	r3, r2
 80077d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d111      	bne.n	8007802 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d106      	bne.n	80077f6 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3301      	adds	r3, #1
 80077ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	611a      	str	r2, [r3, #16]
 80077f4:	e005      	b.n	8007802 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3301      	adds	r3, #1
 80077fa:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3301      	adds	r3, #1
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d987      	bls.n	800771e <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800780e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007810:	4618      	mov	r0, r3
 8007812:	371c      	adds	r7, #28
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	420c4000 	.word	0x420c4000
 8007820:	04040222 	.word	0x04040222

08007824 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	689a      	ldr	r2, [r3, #8]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f042 0202 	orr.w	r2, r2, #2
 8007840:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2208      	movs	r2, #8
 8007846:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a15      	ldr	r2, [pc, #84]	@ (80078a4 <HAL_OSPI_DLYB_SetConfig+0x80>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d109      	bne.n	8007866 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8007852:	4815      	ldr	r0, [pc, #84]	@ (80078a8 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007854:	f7ff f86a 	bl	800692c <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	4813      	ldr	r0, [pc, #76]	@ (80078a8 <HAL_OSPI_DLYB_SetConfig+0x84>)
 800785c:	f006 f928 	bl	800dab0 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	73fb      	strb	r3, [r7, #15]
 8007864:	e00d      	b.n	8007882 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a10      	ldr	r2, [pc, #64]	@ (80078ac <HAL_OSPI_DLYB_SetConfig+0x88>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d108      	bne.n	8007882 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8007870:	480f      	ldr	r0, [pc, #60]	@ (80078b0 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8007872:	f7ff f85b 	bl	800692c <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	480d      	ldr	r0, [pc, #52]	@ (80078b0 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800787a:	f006 f919 	bl	800dab0 <LL_DLYB_SetDelay>
    status = HAL_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff f95d 	bl	8006b42 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689a      	ldr	r2, [r3, #8]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 0202 	bic.w	r2, r2, #2
 8007896:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	420d1400 	.word	0x420d1400
 80078a8:	420cf000 	.word	0x420cf000
 80078ac:	420d2400 	.word	0x420d2400
 80078b0:	420cf400 	.word	0x420cf400

080078b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80078b4:	b480      	push	{r7}
 80078b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80078b8:	4b05      	ldr	r3, [pc, #20]	@ (80078d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80078ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078bc:	4a04      	ldr	r2, [pc, #16]	@ (80078d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80078be:	f043 0301 	orr.w	r3, r3, #1
 80078c2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80078c4:	bf00      	nop
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	46020800 	.word	0x46020800

080078d4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80078dc:	4b39      	ldr	r3, [pc, #228]	@ (80079c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80078de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80078e4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d10b      	bne.n	8007906 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078f4:	d905      	bls.n	8007902 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80078f6:	4b33      	ldr	r3, [pc, #204]	@ (80079c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	4a32      	ldr	r2, [pc, #200]	@ (80079c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80078fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007900:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	e057      	b.n	80079b6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800790c:	d90a      	bls.n	8007924 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800790e:	4b2d      	ldr	r3, [pc, #180]	@ (80079c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4313      	orrs	r3, r2
 800791a:	4a2a      	ldr	r2, [pc, #168]	@ (80079c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800791c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007920:	60d3      	str	r3, [r2, #12]
 8007922:	e007      	b.n	8007934 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8007924:	4b27      	ldr	r3, [pc, #156]	@ (80079c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800792c:	4925      	ldr	r1, [pc, #148]	@ (80079c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4313      	orrs	r3, r2
 8007932:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007934:	4b24      	ldr	r3, [pc, #144]	@ (80079c8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a24      	ldr	r2, [pc, #144]	@ (80079cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800793a:	fba2 2303 	umull	r2, r3, r2, r3
 800793e:	099b      	lsrs	r3, r3, #6
 8007940:	2232      	movs	r2, #50	@ 0x32
 8007942:	fb02 f303 	mul.w	r3, r2, r3
 8007946:	4a21      	ldr	r2, [pc, #132]	@ (80079cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007948:	fba2 2303 	umull	r2, r3, r2, r3
 800794c:	099b      	lsrs	r3, r3, #6
 800794e:	3301      	adds	r3, #1
 8007950:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007952:	e002      	b.n	800795a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	3b01      	subs	r3, #1
 8007958:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800795a:	4b1a      	ldr	r3, [pc, #104]	@ (80079c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d102      	bne.n	800796c <HAL_PWREx_ControlVoltageScaling+0x98>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1f3      	bne.n	8007954 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d01b      	beq.n	80079aa <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007972:	4b15      	ldr	r3, [pc, #84]	@ (80079c8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a15      	ldr	r2, [pc, #84]	@ (80079cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007978:	fba2 2303 	umull	r2, r3, r2, r3
 800797c:	099b      	lsrs	r3, r3, #6
 800797e:	2232      	movs	r2, #50	@ 0x32
 8007980:	fb02 f303 	mul.w	r3, r2, r3
 8007984:	4a11      	ldr	r2, [pc, #68]	@ (80079cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007986:	fba2 2303 	umull	r2, r3, r2, r3
 800798a:	099b      	lsrs	r3, r3, #6
 800798c:	3301      	adds	r3, #1
 800798e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007990:	e002      	b.n	8007998 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	3b01      	subs	r3, #1
 8007996:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007998:	4b0a      	ldr	r3, [pc, #40]	@ (80079c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800799a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800799c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d102      	bne.n	80079aa <HAL_PWREx_ControlVoltageScaling+0xd6>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1f3      	bne.n	8007992 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d101      	bne.n	80079b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e000      	b.n	80079b6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	46020800 	.word	0x46020800
 80079c8:	20000d00 	.word	0x20000d00
 80079cc:	10624dd3 	.word	0x10624dd3

080079d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80079d4:	4b04      	ldr	r3, [pc, #16]	@ (80079e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80079d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80079dc:	4618      	mov	r0, r3
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	46020800 	.word	0x46020800

080079ec <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80079f4:	4b22      	ldr	r3, [pc, #136]	@ (8007a80 <HAL_PWREx_ConfigSupply+0x94>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a22      	ldr	r2, [pc, #136]	@ (8007a84 <HAL_PWREx_ConfigSupply+0x98>)
 80079fa:	fba2 2303 	umull	r2, r3, r2, r3
 80079fe:	099b      	lsrs	r3, r3, #6
 8007a00:	2232      	movs	r2, #50	@ 0x32
 8007a02:	fb02 f303 	mul.w	r3, r2, r3
 8007a06:	4a1f      	ldr	r2, [pc, #124]	@ (8007a84 <HAL_PWREx_ConfigSupply+0x98>)
 8007a08:	fba2 2303 	umull	r2, r3, r2, r3
 8007a0c:	099b      	lsrs	r3, r3, #6
 8007a0e:	3301      	adds	r3, #1
 8007a10:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d113      	bne.n	8007a40 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007a18:	4b1b      	ldr	r3, [pc, #108]	@ (8007a88 <HAL_PWREx_ConfigSupply+0x9c>)
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	4a1a      	ldr	r2, [pc, #104]	@ (8007a88 <HAL_PWREx_ConfigSupply+0x9c>)
 8007a1e:	f023 0302 	bic.w	r3, r3, #2
 8007a22:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007a24:	e002      	b.n	8007a2c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007a2c:	4b16      	ldr	r3, [pc, #88]	@ (8007a88 <HAL_PWREx_ConfigSupply+0x9c>)
 8007a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d116      	bne.n	8007a66 <HAL_PWREx_ConfigSupply+0x7a>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1f3      	bne.n	8007a26 <HAL_PWREx_ConfigSupply+0x3a>
 8007a3e:	e012      	b.n	8007a66 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007a40:	4b11      	ldr	r3, [pc, #68]	@ (8007a88 <HAL_PWREx_ConfigSupply+0x9c>)
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	4a10      	ldr	r2, [pc, #64]	@ (8007a88 <HAL_PWREx_ConfigSupply+0x9c>)
 8007a46:	f043 0302 	orr.w	r3, r3, #2
 8007a4a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007a4c:	e002      	b.n	8007a54 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007a54:	4b0c      	ldr	r3, [pc, #48]	@ (8007a88 <HAL_PWREx_ConfigSupply+0x9c>)
 8007a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a58:	f003 0302 	and.w	r3, r3, #2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d102      	bne.n	8007a66 <HAL_PWREx_ConfigSupply+0x7a>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1f3      	bne.n	8007a4e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d101      	bne.n	8007a70 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e000      	b.n	8007a72 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	20000d00 	.word	0x20000d00
 8007a84:	10624dd3 	.word	0x10624dd3
 8007a88:	46020800 	.word	0x46020800

08007a8c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8007a90:	4b05      	ldr	r3, [pc, #20]	@ (8007aa8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	4a04      	ldr	r2, [pc, #16]	@ (8007aa8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007a96:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a9a:	6113      	str	r3, [r2, #16]
}
 8007a9c:	bf00      	nop
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	46020800 	.word	0x46020800

08007aac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08e      	sub	sp, #56	@ 0x38
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d102      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f000 bec8 	b.w	8008856 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ac6:	4b99      	ldr	r3, [pc, #612]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	f003 030c 	and.w	r3, r3, #12
 8007ace:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ad0:	4b96      	ldr	r3, [pc, #600]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad4:	f003 0303 	and.w	r3, r3, #3
 8007ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0310 	and.w	r3, r3, #16
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 816c 	beq.w	8007dc0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d007      	beq.n	8007afe <HAL_RCC_OscConfig+0x52>
 8007aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af0:	2b0c      	cmp	r3, #12
 8007af2:	f040 80de 	bne.w	8007cb2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	f040 80da 	bne.w	8007cb2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d102      	bne.n	8007b0c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	f000 bea5 	b.w	8008856 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b10:	4b86      	ldr	r3, [pc, #536]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d004      	beq.n	8007b26 <HAL_RCC_OscConfig+0x7a>
 8007b1c:	4b83      	ldr	r3, [pc, #524]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007b24:	e005      	b.n	8007b32 <HAL_RCC_OscConfig+0x86>
 8007b26:	4b81      	ldr	r3, [pc, #516]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b2c:	041b      	lsls	r3, r3, #16
 8007b2e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d255      	bcs.n	8007be2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10a      	bne.n	8007b52 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b40:	4618      	mov	r0, r3
 8007b42:	f001 fa3d 	bl	8008fc0 <RCC_SetFlashLatencyFromMSIRange>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f000 be82 	b.w	8008856 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007b52:	4b76      	ldr	r3, [pc, #472]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	4a75      	ldr	r2, [pc, #468]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007b58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007b5c:	6093      	str	r3, [r2, #8]
 8007b5e:	4b73      	ldr	r3, [pc, #460]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6a:	4970      	ldr	r1, [pc, #448]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b74:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007b78:	d309      	bcc.n	8007b8e <HAL_RCC_OscConfig+0xe2>
 8007b7a:	4b6c      	ldr	r3, [pc, #432]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	f023 021f 	bic.w	r2, r3, #31
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	4969      	ldr	r1, [pc, #420]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	60cb      	str	r3, [r1, #12]
 8007b8c:	e07e      	b.n	8007c8c <HAL_RCC_OscConfig+0x1e0>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	da0a      	bge.n	8007bac <HAL_RCC_OscConfig+0x100>
 8007b96:	4b65      	ldr	r3, [pc, #404]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	015b      	lsls	r3, r3, #5
 8007ba4:	4961      	ldr	r1, [pc, #388]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	60cb      	str	r3, [r1, #12]
 8007baa:	e06f      	b.n	8007c8c <HAL_RCC_OscConfig+0x1e0>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bb4:	d30a      	bcc.n	8007bcc <HAL_RCC_OscConfig+0x120>
 8007bb6:	4b5d      	ldr	r3, [pc, #372]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	029b      	lsls	r3, r3, #10
 8007bc4:	4959      	ldr	r1, [pc, #356]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	60cb      	str	r3, [r1, #12]
 8007bca:	e05f      	b.n	8007c8c <HAL_RCC_OscConfig+0x1e0>
 8007bcc:	4b57      	ldr	r3, [pc, #348]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	03db      	lsls	r3, r3, #15
 8007bda:	4954      	ldr	r1, [pc, #336]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	60cb      	str	r3, [r1, #12]
 8007be0:	e054      	b.n	8007c8c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007be2:	4b52      	ldr	r3, [pc, #328]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	4a51      	ldr	r2, [pc, #324]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007be8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007bec:	6093      	str	r3, [r2, #8]
 8007bee:	4b4f      	ldr	r3, [pc, #316]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfa:	494c      	ldr	r1, [pc, #304]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c04:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007c08:	d309      	bcc.n	8007c1e <HAL_RCC_OscConfig+0x172>
 8007c0a:	4b48      	ldr	r3, [pc, #288]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f023 021f 	bic.w	r2, r3, #31
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	4945      	ldr	r1, [pc, #276]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	60cb      	str	r3, [r1, #12]
 8007c1c:	e028      	b.n	8007c70 <HAL_RCC_OscConfig+0x1c4>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	da0a      	bge.n	8007c3c <HAL_RCC_OscConfig+0x190>
 8007c26:	4b41      	ldr	r3, [pc, #260]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	015b      	lsls	r3, r3, #5
 8007c34:	493d      	ldr	r1, [pc, #244]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60cb      	str	r3, [r1, #12]
 8007c3a:	e019      	b.n	8007c70 <HAL_RCC_OscConfig+0x1c4>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c44:	d30a      	bcc.n	8007c5c <HAL_RCC_OscConfig+0x1b0>
 8007c46:	4b39      	ldr	r3, [pc, #228]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	029b      	lsls	r3, r3, #10
 8007c54:	4935      	ldr	r1, [pc, #212]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60cb      	str	r3, [r1, #12]
 8007c5a:	e009      	b.n	8007c70 <HAL_RCC_OscConfig+0x1c4>
 8007c5c:	4b33      	ldr	r3, [pc, #204]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	03db      	lsls	r3, r3, #15
 8007c6a:	4930      	ldr	r1, [pc, #192]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10a      	bne.n	8007c8c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f001 f9a0 	bl	8008fc0 <RCC_SetFlashLatencyFromMSIRange>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d002      	beq.n	8007c8c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	f000 bde5 	b.w	8008856 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8007c8c:	f001 f8de 	bl	8008e4c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007c90:	4b27      	ldr	r3, [pc, #156]	@ (8007d30 <HAL_RCC_OscConfig+0x284>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fb f9f5 	bl	8003084 <HAL_InitTick>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8007ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 808a 	beq.w	8007dbe <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8007caa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cae:	f000 bdd2 	b.w	8008856 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d066      	beq.n	8007d88 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8007cba:	4b1c      	ldr	r3, [pc, #112]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007cc0:	f043 0301 	orr.w	r3, r3, #1
 8007cc4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007cc6:	f7fb fb69 	bl	800339c <HAL_GetTick>
 8007cca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007ccc:	e009      	b.n	8007ce2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007cce:	f7fb fb65 	bl	800339c <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d902      	bls.n	8007ce2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	f000 bdba 	b.w	8008856 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007ce2:	4b12      	ldr	r3, [pc, #72]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0304 	and.w	r3, r3, #4
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d0ef      	beq.n	8007cce <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007cee:	4b0f      	ldr	r3, [pc, #60]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007cf4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007cf8:	6093      	str	r3, [r2, #8]
 8007cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d06:	4909      	ldr	r1, [pc, #36]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d10:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007d14:	d30e      	bcc.n	8007d34 <HAL_RCC_OscConfig+0x288>
 8007d16:	4b05      	ldr	r3, [pc, #20]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	f023 021f 	bic.w	r2, r3, #31
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	4902      	ldr	r1, [pc, #8]	@ (8007d2c <HAL_RCC_OscConfig+0x280>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	60cb      	str	r3, [r1, #12]
 8007d28:	e04a      	b.n	8007dc0 <HAL_RCC_OscConfig+0x314>
 8007d2a:	bf00      	nop
 8007d2c:	46020c00 	.word	0x46020c00
 8007d30:	20000d04 	.word	0x20000d04
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	da0a      	bge.n	8007d52 <HAL_RCC_OscConfig+0x2a6>
 8007d3c:	4b98      	ldr	r3, [pc, #608]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a1b      	ldr	r3, [r3, #32]
 8007d48:	015b      	lsls	r3, r3, #5
 8007d4a:	4995      	ldr	r1, [pc, #596]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	60cb      	str	r3, [r1, #12]
 8007d50:	e036      	b.n	8007dc0 <HAL_RCC_OscConfig+0x314>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d5a:	d30a      	bcc.n	8007d72 <HAL_RCC_OscConfig+0x2c6>
 8007d5c:	4b90      	ldr	r3, [pc, #576]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	029b      	lsls	r3, r3, #10
 8007d6a:	498d      	ldr	r1, [pc, #564]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	60cb      	str	r3, [r1, #12]
 8007d70:	e026      	b.n	8007dc0 <HAL_RCC_OscConfig+0x314>
 8007d72:	4b8b      	ldr	r3, [pc, #556]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	03db      	lsls	r3, r3, #15
 8007d80:	4987      	ldr	r1, [pc, #540]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	60cb      	str	r3, [r1, #12]
 8007d86:	e01b      	b.n	8007dc0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8007d88:	4b85      	ldr	r3, [pc, #532]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a84      	ldr	r2, [pc, #528]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007d8e:	f023 0301 	bic.w	r3, r3, #1
 8007d92:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007d94:	f7fb fb02 	bl	800339c <HAL_GetTick>
 8007d98:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007d9a:	e009      	b.n	8007db0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d9c:	f7fb fafe 	bl	800339c <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d902      	bls.n	8007db0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	f000 bd53 	b.w	8008856 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007db0:	4b7b      	ldr	r3, [pc, #492]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1ef      	bne.n	8007d9c <HAL_RCC_OscConfig+0x2f0>
 8007dbc:	e000      	b.n	8007dc0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007dbe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 808b 	beq.w	8007ee4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd0:	2b08      	cmp	r3, #8
 8007dd2:	d005      	beq.n	8007de0 <HAL_RCC_OscConfig+0x334>
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd6:	2b0c      	cmp	r3, #12
 8007dd8:	d109      	bne.n	8007dee <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d106      	bne.n	8007dee <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d17d      	bne.n	8007ee4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	f000 bd34 	b.w	8008856 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007df6:	d106      	bne.n	8007e06 <HAL_RCC_OscConfig+0x35a>
 8007df8:	4b69      	ldr	r3, [pc, #420]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a68      	ldr	r2, [pc, #416]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e02:	6013      	str	r3, [r2, #0]
 8007e04:	e041      	b.n	8007e8a <HAL_RCC_OscConfig+0x3de>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e0e:	d112      	bne.n	8007e36 <HAL_RCC_OscConfig+0x38a>
 8007e10:	4b63      	ldr	r3, [pc, #396]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a62      	ldr	r2, [pc, #392]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007e16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e1a:	6013      	str	r3, [r2, #0]
 8007e1c:	4b60      	ldr	r3, [pc, #384]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a5f      	ldr	r2, [pc, #380]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007e22:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	4b5d      	ldr	r3, [pc, #372]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a5c      	ldr	r2, [pc, #368]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007e2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e32:	6013      	str	r3, [r2, #0]
 8007e34:	e029      	b.n	8007e8a <HAL_RCC_OscConfig+0x3de>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8007e3e:	d112      	bne.n	8007e66 <HAL_RCC_OscConfig+0x3ba>
 8007e40:	4b57      	ldr	r3, [pc, #348]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a56      	ldr	r2, [pc, #344]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007e46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	4b54      	ldr	r3, [pc, #336]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a53      	ldr	r2, [pc, #332]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007e52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	4b51      	ldr	r3, [pc, #324]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a50      	ldr	r2, [pc, #320]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007e5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e62:	6013      	str	r3, [r2, #0]
 8007e64:	e011      	b.n	8007e8a <HAL_RCC_OscConfig+0x3de>
 8007e66:	4b4e      	ldr	r3, [pc, #312]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a4d      	ldr	r2, [pc, #308]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007e6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	4b4b      	ldr	r3, [pc, #300]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a4a      	ldr	r2, [pc, #296]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007e78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e7c:	6013      	str	r3, [r2, #0]
 8007e7e:	4b48      	ldr	r3, [pc, #288]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a47      	ldr	r2, [pc, #284]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007e84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007e88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d014      	beq.n	8007ebc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8007e92:	f7fb fa83 	bl	800339c <HAL_GetTick>
 8007e96:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e98:	e009      	b.n	8007eae <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e9a:	f7fb fa7f 	bl	800339c <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b64      	cmp	r3, #100	@ 0x64
 8007ea6:	d902      	bls.n	8007eae <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	f000 bcd4 	b.w	8008856 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007eae:	4b3c      	ldr	r3, [pc, #240]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0ef      	beq.n	8007e9a <HAL_RCC_OscConfig+0x3ee>
 8007eba:	e013      	b.n	8007ee4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8007ebc:	f7fb fa6e 	bl	800339c <HAL_GetTick>
 8007ec0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ec2:	e009      	b.n	8007ed8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ec4:	f7fb fa6a 	bl	800339c <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b64      	cmp	r3, #100	@ 0x64
 8007ed0:	d902      	bls.n	8007ed8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	f000 bcbf 	b.w	8008856 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ed8:	4b31      	ldr	r3, [pc, #196]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1ef      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0302 	and.w	r3, r3, #2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d05f      	beq.n	8007fb0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef2:	2b04      	cmp	r3, #4
 8007ef4:	d005      	beq.n	8007f02 <HAL_RCC_OscConfig+0x456>
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef8:	2b0c      	cmp	r3, #12
 8007efa:	d114      	bne.n	8007f26 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d111      	bne.n	8007f26 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d102      	bne.n	8007f10 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	f000 bca3 	b.w	8008856 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007f10:	4b23      	ldr	r3, [pc, #140]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	041b      	lsls	r3, r3, #16
 8007f1e:	4920      	ldr	r1, [pc, #128]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007f20:	4313      	orrs	r3, r2
 8007f22:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007f24:	e044      	b.n	8007fb0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d024      	beq.n	8007f78 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8007f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a1b      	ldr	r2, [pc, #108]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f38:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007f3a:	f7fb fa2f 	bl	800339c <HAL_GetTick>
 8007f3e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f40:	e009      	b.n	8007f56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f42:	f7fb fa2b 	bl	800339c <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d902      	bls.n	8007f56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	f000 bc80 	b.w	8008856 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f56:	4b12      	ldr	r3, [pc, #72]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0ef      	beq.n	8007f42 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007f62:	4b0f      	ldr	r3, [pc, #60]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	041b      	lsls	r3, r3, #16
 8007f70:	490b      	ldr	r1, [pc, #44]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	610b      	str	r3, [r1, #16]
 8007f76:	e01b      	b.n	8007fb0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8007f78:	4b09      	ldr	r3, [pc, #36]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a08      	ldr	r2, [pc, #32]	@ (8007fa0 <HAL_RCC_OscConfig+0x4f4>)
 8007f7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f82:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007f84:	f7fb fa0a 	bl	800339c <HAL_GetTick>
 8007f88:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f8a:	e00b      	b.n	8007fa4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f8c:	f7fb fa06 	bl	800339c <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d904      	bls.n	8007fa4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	f000 bc5b 	b.w	8008856 <HAL_RCC_OscConfig+0xdaa>
 8007fa0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007fa4:	4baf      	ldr	r3, [pc, #700]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1ed      	bne.n	8007f8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0308 	and.w	r3, r3, #8
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 80c8 	beq.w	800814e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fc4:	4ba7      	ldr	r3, [pc, #668]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8007fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fca:	f003 0304 	and.w	r3, r3, #4
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d111      	bne.n	8007ff6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fd2:	4ba4      	ldr	r3, [pc, #656]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8007fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fd8:	4aa2      	ldr	r2, [pc, #648]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8007fda:	f043 0304 	orr.w	r3, r3, #4
 8007fde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007fe2:	4ba0      	ldr	r3, [pc, #640]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8007fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fe8:	f003 0304 	and.w	r3, r3, #4
 8007fec:	617b      	str	r3, [r7, #20]
 8007fee:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007ff6:	4b9c      	ldr	r3, [pc, #624]	@ (8008268 <HAL_RCC_OscConfig+0x7bc>)
 8007ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ffa:	f003 0301 	and.w	r3, r3, #1
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d119      	bne.n	8008036 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008002:	4b99      	ldr	r3, [pc, #612]	@ (8008268 <HAL_RCC_OscConfig+0x7bc>)
 8008004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008006:	4a98      	ldr	r2, [pc, #608]	@ (8008268 <HAL_RCC_OscConfig+0x7bc>)
 8008008:	f043 0301 	orr.w	r3, r3, #1
 800800c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800800e:	f7fb f9c5 	bl	800339c <HAL_GetTick>
 8008012:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008014:	e009      	b.n	800802a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008016:	f7fb f9c1 	bl	800339c <HAL_GetTick>
 800801a:	4602      	mov	r2, r0
 800801c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	2b02      	cmp	r3, #2
 8008022:	d902      	bls.n	800802a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	f000 bc16 	b.w	8008856 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800802a:	4b8f      	ldr	r3, [pc, #572]	@ (8008268 <HAL_RCC_OscConfig+0x7bc>)
 800802c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	2b00      	cmp	r3, #0
 8008034:	d0ef      	beq.n	8008016 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d05f      	beq.n	80080fe <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800803e:	4b89      	ldr	r3, [pc, #548]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8008040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008044:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	699a      	ldr	r2, [r3, #24]
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008050:	429a      	cmp	r2, r3
 8008052:	d037      	beq.n	80080c4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d006      	beq.n	800806c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800805e:	6a3b      	ldr	r3, [r7, #32]
 8008060:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8008064:	2b00      	cmp	r3, #0
 8008066:	d101      	bne.n	800806c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e3f4      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d01b      	beq.n	80080ae <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8008076:	4b7b      	ldr	r3, [pc, #492]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8008078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800807c:	4a79      	ldr	r2, [pc, #484]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 800807e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8008082:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8008086:	f7fb f989 	bl	800339c <HAL_GetTick>
 800808a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800808c:	e008      	b.n	80080a0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800808e:	f7fb f985 	bl	800339c <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	2b05      	cmp	r3, #5
 800809a:	d901      	bls.n	80080a0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e3da      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80080a0:	4b70      	ldr	r3, [pc, #448]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 80080a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1ef      	bne.n	800808e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80080ae:	4b6d      	ldr	r3, [pc, #436]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 80080b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080b4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	4969      	ldr	r1, [pc, #420]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80080c4:	4b67      	ldr	r3, [pc, #412]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 80080c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080ca:	4a66      	ldr	r2, [pc, #408]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 80080cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80080d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80080d4:	f7fb f962 	bl	800339c <HAL_GetTick>
 80080d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80080da:	e008      	b.n	80080ee <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080dc:	f7fb f95e 	bl	800339c <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	2b05      	cmp	r3, #5
 80080e8:	d901      	bls.n	80080ee <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e3b3      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80080ee:	4b5d      	ldr	r3, [pc, #372]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 80080f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d0ef      	beq.n	80080dc <HAL_RCC_OscConfig+0x630>
 80080fc:	e01b      	b.n	8008136 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80080fe:	4b59      	ldr	r3, [pc, #356]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8008100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008104:	4a57      	ldr	r2, [pc, #348]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8008106:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800810a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800810e:	f7fb f945 	bl	800339c <HAL_GetTick>
 8008112:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008114:	e008      	b.n	8008128 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008116:	f7fb f941 	bl	800339c <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b05      	cmp	r3, #5
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e396      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008128:	4b4e      	ldr	r3, [pc, #312]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 800812a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800812e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1ef      	bne.n	8008116 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008136:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800813a:	2b01      	cmp	r3, #1
 800813c:	d107      	bne.n	800814e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800813e:	4b49      	ldr	r3, [pc, #292]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8008140:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008144:	4a47      	ldr	r2, [pc, #284]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8008146:	f023 0304 	bic.w	r3, r3, #4
 800814a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0304 	and.w	r3, r3, #4
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 8111 	beq.w	800837e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800815c:	2300      	movs	r3, #0
 800815e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008162:	4b40      	ldr	r3, [pc, #256]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8008164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008168:	f003 0304 	and.w	r3, r3, #4
 800816c:	2b00      	cmp	r3, #0
 800816e:	d111      	bne.n	8008194 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008170:	4b3c      	ldr	r3, [pc, #240]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8008172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008176:	4a3b      	ldr	r2, [pc, #236]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8008178:	f043 0304 	orr.w	r3, r3, #4
 800817c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008180:	4b38      	ldr	r3, [pc, #224]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8008182:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008186:	f003 0304 	and.w	r3, r3, #4
 800818a:	613b      	str	r3, [r7, #16]
 800818c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800818e:	2301      	movs	r3, #1
 8008190:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008194:	4b34      	ldr	r3, [pc, #208]	@ (8008268 <HAL_RCC_OscConfig+0x7bc>)
 8008196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008198:	f003 0301 	and.w	r3, r3, #1
 800819c:	2b00      	cmp	r3, #0
 800819e:	d118      	bne.n	80081d2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80081a0:	4b31      	ldr	r3, [pc, #196]	@ (8008268 <HAL_RCC_OscConfig+0x7bc>)
 80081a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a4:	4a30      	ldr	r2, [pc, #192]	@ (8008268 <HAL_RCC_OscConfig+0x7bc>)
 80081a6:	f043 0301 	orr.w	r3, r3, #1
 80081aa:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081ac:	f7fb f8f6 	bl	800339c <HAL_GetTick>
 80081b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80081b2:	e008      	b.n	80081c6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081b4:	f7fb f8f2 	bl	800339c <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d901      	bls.n	80081c6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e347      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80081c6:	4b28      	ldr	r3, [pc, #160]	@ (8008268 <HAL_RCC_OscConfig+0x7bc>)
 80081c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0f0      	beq.n	80081b4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d01f      	beq.n	800821e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f003 0304 	and.w	r3, r3, #4
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d010      	beq.n	800820c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80081ea:	4b1e      	ldr	r3, [pc, #120]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 80081ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081f0:	4a1c      	ldr	r2, [pc, #112]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 80081f2:	f043 0304 	orr.w	r3, r3, #4
 80081f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80081fa:	4b1a      	ldr	r3, [pc, #104]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 80081fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008200:	4a18      	ldr	r2, [pc, #96]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8008202:	f043 0301 	orr.w	r3, r3, #1
 8008206:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800820a:	e018      	b.n	800823e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800820c:	4b15      	ldr	r3, [pc, #84]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 800820e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008212:	4a14      	ldr	r2, [pc, #80]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8008214:	f043 0301 	orr.w	r3, r3, #1
 8008218:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800821c:	e00f      	b.n	800823e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800821e:	4b11      	ldr	r3, [pc, #68]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8008220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008224:	4a0f      	ldr	r2, [pc, #60]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8008226:	f023 0301 	bic.w	r3, r3, #1
 800822a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800822e:	4b0d      	ldr	r3, [pc, #52]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8008230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008234:	4a0b      	ldr	r2, [pc, #44]	@ (8008264 <HAL_RCC_OscConfig+0x7b8>)
 8008236:	f023 0304 	bic.w	r3, r3, #4
 800823a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d057      	beq.n	80082f6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8008246:	f7fb f8a9 	bl	800339c <HAL_GetTick>
 800824a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800824c:	e00e      	b.n	800826c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800824e:	f7fb f8a5 	bl	800339c <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800825c:	4293      	cmp	r3, r2
 800825e:	d905      	bls.n	800826c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e2f8      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
 8008264:	46020c00 	.word	0x46020c00
 8008268:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800826c:	4b9c      	ldr	r3, [pc, #624]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 800826e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008272:	f003 0302 	and.w	r3, r3, #2
 8008276:	2b00      	cmp	r3, #0
 8008278:	d0e9      	beq.n	800824e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008282:	2b00      	cmp	r3, #0
 8008284:	d01b      	beq.n	80082be <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008286:	4b96      	ldr	r3, [pc, #600]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 8008288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800828c:	4a94      	ldr	r2, [pc, #592]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 800828e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008292:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008296:	e00a      	b.n	80082ae <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008298:	f7fb f880 	bl	800339c <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d901      	bls.n	80082ae <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e2d3      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80082ae:	4b8c      	ldr	r3, [pc, #560]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 80082b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d0ed      	beq.n	8008298 <HAL_RCC_OscConfig+0x7ec>
 80082bc:	e053      	b.n	8008366 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80082be:	4b88      	ldr	r3, [pc, #544]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 80082c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082c4:	4a86      	ldr	r2, [pc, #536]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 80082c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80082ce:	e00a      	b.n	80082e6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082d0:	f7fb f864 	bl	800339c <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082de:	4293      	cmp	r3, r2
 80082e0:	d901      	bls.n	80082e6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e2b7      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80082e6:	4b7e      	ldr	r3, [pc, #504]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 80082e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1ed      	bne.n	80082d0 <HAL_RCC_OscConfig+0x824>
 80082f4:	e037      	b.n	8008366 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80082f6:	f7fb f851 	bl	800339c <HAL_GetTick>
 80082fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80082fc:	e00a      	b.n	8008314 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082fe:	f7fb f84d 	bl	800339c <HAL_GetTick>
 8008302:	4602      	mov	r2, r0
 8008304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800830c:	4293      	cmp	r3, r2
 800830e:	d901      	bls.n	8008314 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e2a0      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008314:	4b72      	ldr	r3, [pc, #456]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 8008316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1ed      	bne.n	80082fe <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8008322:	4b6f      	ldr	r3, [pc, #444]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 8008324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800832c:	2b00      	cmp	r3, #0
 800832e:	d01a      	beq.n	8008366 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008330:	4b6b      	ldr	r3, [pc, #428]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 8008332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008336:	4a6a      	ldr	r2, [pc, #424]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 8008338:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800833c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008340:	e00a      	b.n	8008358 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008342:	f7fb f82b 	bl	800339c <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008350:	4293      	cmp	r3, r2
 8008352:	d901      	bls.n	8008358 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8008354:	2303      	movs	r3, #3
 8008356:	e27e      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008358:	4b61      	ldr	r3, [pc, #388]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 800835a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800835e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1ed      	bne.n	8008342 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008366:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800836a:	2b01      	cmp	r3, #1
 800836c:	d107      	bne.n	800837e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800836e:	4b5c      	ldr	r3, [pc, #368]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 8008370:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008374:	4a5a      	ldr	r2, [pc, #360]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 8008376:	f023 0304 	bic.w	r3, r3, #4
 800837a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 0320 	and.w	r3, r3, #32
 8008386:	2b00      	cmp	r3, #0
 8008388:	d036      	beq.n	80083f8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838e:	2b00      	cmp	r3, #0
 8008390:	d019      	beq.n	80083c6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8008392:	4b53      	ldr	r3, [pc, #332]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a52      	ldr	r2, [pc, #328]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 8008398:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800839c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800839e:	f7fa fffd 	bl	800339c <HAL_GetTick>
 80083a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80083a4:	e008      	b.n	80083b8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083a6:	f7fa fff9 	bl	800339c <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d901      	bls.n	80083b8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e24e      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80083b8:	4b49      	ldr	r3, [pc, #292]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0f0      	beq.n	80083a6 <HAL_RCC_OscConfig+0x8fa>
 80083c4:	e018      	b.n	80083f8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80083c6:	4b46      	ldr	r3, [pc, #280]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a45      	ldr	r2, [pc, #276]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 80083cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083d0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80083d2:	f7fa ffe3 	bl	800339c <HAL_GetTick>
 80083d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80083d8:	e008      	b.n	80083ec <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083da:	f7fa ffdf 	bl	800339c <HAL_GetTick>
 80083de:	4602      	mov	r2, r0
 80083e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d901      	bls.n	80083ec <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80083e8:	2303      	movs	r3, #3
 80083ea:	e234      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80083ec:	4b3c      	ldr	r3, [pc, #240]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1f0      	bne.n	80083da <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008400:	2b00      	cmp	r3, #0
 8008402:	d036      	beq.n	8008472 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008408:	2b00      	cmp	r3, #0
 800840a:	d019      	beq.n	8008440 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800840c:	4b34      	ldr	r3, [pc, #208]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a33      	ldr	r2, [pc, #204]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 8008412:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008416:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008418:	f7fa ffc0 	bl	800339c <HAL_GetTick>
 800841c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800841e:	e008      	b.n	8008432 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008420:	f7fa ffbc 	bl	800339c <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	2b02      	cmp	r3, #2
 800842c:	d901      	bls.n	8008432 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e211      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008432:	4b2b      	ldr	r3, [pc, #172]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d0f0      	beq.n	8008420 <HAL_RCC_OscConfig+0x974>
 800843e:	e018      	b.n	8008472 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8008440:	4b27      	ldr	r3, [pc, #156]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a26      	ldr	r2, [pc, #152]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 8008446:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800844a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800844c:	f7fa ffa6 	bl	800339c <HAL_GetTick>
 8008450:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008452:	e008      	b.n	8008466 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008454:	f7fa ffa2 	bl	800339c <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	2b02      	cmp	r3, #2
 8008460:	d901      	bls.n	8008466 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8008462:	2303      	movs	r3, #3
 8008464:	e1f7      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008466:	4b1e      	ldr	r3, [pc, #120]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1f0      	bne.n	8008454 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800847a:	2b00      	cmp	r3, #0
 800847c:	d07f      	beq.n	800857e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008482:	2b00      	cmp	r3, #0
 8008484:	d062      	beq.n	800854c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8008486:	4b16      	ldr	r3, [pc, #88]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	4a15      	ldr	r2, [pc, #84]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 800848c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008490:	6093      	str	r3, [r2, #8]
 8008492:	4b13      	ldr	r3, [pc, #76]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800849e:	4910      	ldr	r1, [pc, #64]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 80084a0:	4313      	orrs	r3, r2
 80084a2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80084ac:	d309      	bcc.n	80084c2 <HAL_RCC_OscConfig+0xa16>
 80084ae:	4b0c      	ldr	r3, [pc, #48]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	f023 021f 	bic.w	r2, r3, #31
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	4909      	ldr	r1, [pc, #36]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	60cb      	str	r3, [r1, #12]
 80084c0:	e02a      	b.n	8008518 <HAL_RCC_OscConfig+0xa6c>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	da0c      	bge.n	80084e4 <HAL_RCC_OscConfig+0xa38>
 80084ca:	4b05      	ldr	r3, [pc, #20]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	015b      	lsls	r3, r3, #5
 80084d8:	4901      	ldr	r1, [pc, #4]	@ (80084e0 <HAL_RCC_OscConfig+0xa34>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	60cb      	str	r3, [r1, #12]
 80084de:	e01b      	b.n	8008518 <HAL_RCC_OscConfig+0xa6c>
 80084e0:	46020c00 	.word	0x46020c00
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084ec:	d30a      	bcc.n	8008504 <HAL_RCC_OscConfig+0xa58>
 80084ee:	4ba1      	ldr	r3, [pc, #644]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	029b      	lsls	r3, r3, #10
 80084fc:	499d      	ldr	r1, [pc, #628]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	60cb      	str	r3, [r1, #12]
 8008502:	e009      	b.n	8008518 <HAL_RCC_OscConfig+0xa6c>
 8008504:	4b9b      	ldr	r3, [pc, #620]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	03db      	lsls	r3, r3, #15
 8008512:	4998      	ldr	r1, [pc, #608]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 8008514:	4313      	orrs	r3, r2
 8008516:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8008518:	4b96      	ldr	r3, [pc, #600]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a95      	ldr	r2, [pc, #596]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 800851e:	f043 0310 	orr.w	r3, r3, #16
 8008522:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008524:	f7fa ff3a 	bl	800339c <HAL_GetTick>
 8008528:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800852a:	e008      	b.n	800853e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800852c:	f7fa ff36 	bl	800339c <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	2b02      	cmp	r3, #2
 8008538:	d901      	bls.n	800853e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e18b      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800853e:	4b8d      	ldr	r3, [pc, #564]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0320 	and.w	r3, r3, #32
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0f0      	beq.n	800852c <HAL_RCC_OscConfig+0xa80>
 800854a:	e018      	b.n	800857e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800854c:	4b89      	ldr	r3, [pc, #548]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a88      	ldr	r2, [pc, #544]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 8008552:	f023 0310 	bic.w	r3, r3, #16
 8008556:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008558:	f7fa ff20 	bl	800339c <HAL_GetTick>
 800855c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800855e:	e008      	b.n	8008572 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008560:	f7fa ff1c 	bl	800339c <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	2b02      	cmp	r3, #2
 800856c:	d901      	bls.n	8008572 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e171      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008572:	4b80      	ldr	r3, [pc, #512]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0320 	and.w	r3, r3, #32
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1f0      	bne.n	8008560 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008582:	2b00      	cmp	r3, #0
 8008584:	f000 8166 	beq.w	8008854 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008588:	2300      	movs	r3, #0
 800858a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800858e:	4b79      	ldr	r3, [pc, #484]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	f003 030c 	and.w	r3, r3, #12
 8008596:	2b0c      	cmp	r3, #12
 8008598:	f000 80f2 	beq.w	8008780 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	f040 80c5 	bne.w	8008730 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80085a6:	4b73      	ldr	r3, [pc, #460]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a72      	ldr	r2, [pc, #456]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80085ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085b0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80085b2:	f7fa fef3 	bl	800339c <HAL_GetTick>
 80085b6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80085b8:	e008      	b.n	80085cc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085ba:	f7fa feef 	bl	800339c <HAL_GetTick>
 80085be:	4602      	mov	r2, r0
 80085c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c2:	1ad3      	subs	r3, r2, r3
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d901      	bls.n	80085cc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e144      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80085cc:	4b69      	ldr	r3, [pc, #420]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1f0      	bne.n	80085ba <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085d8:	4b66      	ldr	r3, [pc, #408]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80085da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085de:	f003 0304 	and.w	r3, r3, #4
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d111      	bne.n	800860a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80085e6:	4b63      	ldr	r3, [pc, #396]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80085e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085ec:	4a61      	ldr	r2, [pc, #388]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80085ee:	f043 0304 	orr.w	r3, r3, #4
 80085f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80085f6:	4b5f      	ldr	r3, [pc, #380]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80085f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085fc:	f003 0304 	and.w	r3, r3, #4
 8008600:	60fb      	str	r3, [r7, #12]
 8008602:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8008604:	2301      	movs	r3, #1
 8008606:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800860a:	4b5b      	ldr	r3, [pc, #364]	@ (8008778 <HAL_RCC_OscConfig+0xccc>)
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008612:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008616:	d102      	bne.n	800861e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8008618:	2301      	movs	r3, #1
 800861a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800861e:	4b56      	ldr	r3, [pc, #344]	@ (8008778 <HAL_RCC_OscConfig+0xccc>)
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	4a55      	ldr	r2, [pc, #340]	@ (8008778 <HAL_RCC_OscConfig+0xccc>)
 8008624:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008628:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800862a:	4b52      	ldr	r3, [pc, #328]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 800862c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008632:	f023 0303 	bic.w	r3, r3, #3
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800863e:	3a01      	subs	r2, #1
 8008640:	0212      	lsls	r2, r2, #8
 8008642:	4311      	orrs	r1, r2
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008648:	430a      	orrs	r2, r1
 800864a:	494a      	ldr	r1, [pc, #296]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 800864c:	4313      	orrs	r3, r2
 800864e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008650:	4b48      	ldr	r3, [pc, #288]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 8008652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008654:	4b49      	ldr	r3, [pc, #292]	@ (800877c <HAL_RCC_OscConfig+0xcd0>)
 8008656:	4013      	ands	r3, r2
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800865c:	3a01      	subs	r2, #1
 800865e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008666:	3a01      	subs	r2, #1
 8008668:	0252      	lsls	r2, r2, #9
 800866a:	b292      	uxth	r2, r2
 800866c:	4311      	orrs	r1, r2
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008672:	3a01      	subs	r2, #1
 8008674:	0412      	lsls	r2, r2, #16
 8008676:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800867a:	4311      	orrs	r1, r2
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008680:	3a01      	subs	r2, #1
 8008682:	0612      	lsls	r2, r2, #24
 8008684:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008688:	430a      	orrs	r2, r1
 800868a:	493a      	ldr	r1, [pc, #232]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 800868c:	4313      	orrs	r3, r2
 800868e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008690:	4b38      	ldr	r3, [pc, #224]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 8008692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008694:	4a37      	ldr	r2, [pc, #220]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 8008696:	f023 0310 	bic.w	r3, r3, #16
 800869a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086a0:	4a34      	ldr	r2, [pc, #208]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80086a2:	00db      	lsls	r3, r3, #3
 80086a4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80086a6:	4b33      	ldr	r3, [pc, #204]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80086a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086aa:	4a32      	ldr	r2, [pc, #200]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80086ac:	f043 0310 	orr.w	r3, r3, #16
 80086b0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80086b2:	4b30      	ldr	r3, [pc, #192]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80086b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b6:	f023 020c 	bic.w	r2, r3, #12
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086be:	492d      	ldr	r1, [pc, #180]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80086c0:	4313      	orrs	r3, r2
 80086c2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80086c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d105      	bne.n	80086d8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80086cc:	4b2a      	ldr	r3, [pc, #168]	@ (8008778 <HAL_RCC_OscConfig+0xccc>)
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	4a29      	ldr	r2, [pc, #164]	@ (8008778 <HAL_RCC_OscConfig+0xccc>)
 80086d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80086d6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80086d8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d107      	bne.n	80086f0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80086e0:	4b24      	ldr	r3, [pc, #144]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80086e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086e6:	4a23      	ldr	r2, [pc, #140]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80086e8:	f023 0304 	bic.w	r3, r3, #4
 80086ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80086f0:	4b20      	ldr	r3, [pc, #128]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80086f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f4:	4a1f      	ldr	r2, [pc, #124]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80086f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80086fa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80086fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a1c      	ldr	r2, [pc, #112]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 8008702:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008706:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008708:	f7fa fe48 	bl	800339c <HAL_GetTick>
 800870c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800870e:	e008      	b.n	8008722 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008710:	f7fa fe44 	bl	800339c <HAL_GetTick>
 8008714:	4602      	mov	r2, r0
 8008716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	2b02      	cmp	r3, #2
 800871c:	d901      	bls.n	8008722 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e099      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008722:	4b14      	ldr	r3, [pc, #80]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0f0      	beq.n	8008710 <HAL_RCC_OscConfig+0xc64>
 800872e:	e091      	b.n	8008854 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008730:	4b10      	ldr	r3, [pc, #64]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a0f      	ldr	r2, [pc, #60]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 8008736:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800873a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800873c:	f7fa fe2e 	bl	800339c <HAL_GetTick>
 8008740:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008742:	e008      	b.n	8008756 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008744:	f7fa fe2a 	bl	800339c <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b02      	cmp	r3, #2
 8008750:	d901      	bls.n	8008756 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e07f      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008756:	4b07      	ldr	r3, [pc, #28]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1f0      	bne.n	8008744 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8008762:	4b04      	ldr	r3, [pc, #16]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 8008764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008766:	4a03      	ldr	r2, [pc, #12]	@ (8008774 <HAL_RCC_OscConfig+0xcc8>)
 8008768:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800876c:	f023 0303 	bic.w	r3, r3, #3
 8008770:	6293      	str	r3, [r2, #40]	@ 0x28
 8008772:	e06f      	b.n	8008854 <HAL_RCC_OscConfig+0xda8>
 8008774:	46020c00 	.word	0x46020c00
 8008778:	46020800 	.word	0x46020800
 800877c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008780:	4b37      	ldr	r3, [pc, #220]	@ (8008860 <HAL_RCC_OscConfig+0xdb4>)
 8008782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008784:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008786:	4b36      	ldr	r3, [pc, #216]	@ (8008860 <HAL_RCC_OscConfig+0xdb4>)
 8008788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800878a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008790:	2b01      	cmp	r3, #1
 8008792:	d039      	beq.n	8008808 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	f003 0203 	and.w	r2, r3, #3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800879e:	429a      	cmp	r2, r3
 80087a0:	d132      	bne.n	8008808 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	0a1b      	lsrs	r3, r3, #8
 80087a6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ae:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d129      	bne.n	8008808 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80087be:	429a      	cmp	r2, r3
 80087c0:	d122      	bne.n	8008808 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087cc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d11a      	bne.n	8008808 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	0a5b      	lsrs	r3, r3, #9
 80087d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d111      	bne.n	8008808 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	0c1b      	lsrs	r3, r3, #16
 80087e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087f0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d108      	bne.n	8008808 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	0e1b      	lsrs	r3, r3, #24
 80087fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008802:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008804:	429a      	cmp	r2, r3
 8008806:	d001      	beq.n	800880c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e024      	b.n	8008856 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800880c:	4b14      	ldr	r3, [pc, #80]	@ (8008860 <HAL_RCC_OscConfig+0xdb4>)
 800880e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008810:	08db      	lsrs	r3, r3, #3
 8008812:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800881a:	429a      	cmp	r2, r3
 800881c:	d01a      	beq.n	8008854 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800881e:	4b10      	ldr	r3, [pc, #64]	@ (8008860 <HAL_RCC_OscConfig+0xdb4>)
 8008820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008822:	4a0f      	ldr	r2, [pc, #60]	@ (8008860 <HAL_RCC_OscConfig+0xdb4>)
 8008824:	f023 0310 	bic.w	r3, r3, #16
 8008828:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800882a:	f7fa fdb7 	bl	800339c <HAL_GetTick>
 800882e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8008830:	bf00      	nop
 8008832:	f7fa fdb3 	bl	800339c <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883a:	4293      	cmp	r3, r2
 800883c:	d0f9      	beq.n	8008832 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008842:	4a07      	ldr	r2, [pc, #28]	@ (8008860 <HAL_RCC_OscConfig+0xdb4>)
 8008844:	00db      	lsls	r3, r3, #3
 8008846:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008848:	4b05      	ldr	r3, [pc, #20]	@ (8008860 <HAL_RCC_OscConfig+0xdb4>)
 800884a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800884c:	4a04      	ldr	r2, [pc, #16]	@ (8008860 <HAL_RCC_OscConfig+0xdb4>)
 800884e:	f043 0310 	orr.w	r3, r3, #16
 8008852:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3738      	adds	r7, #56	@ 0x38
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	46020c00 	.word	0x46020c00

08008864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b086      	sub	sp, #24
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e1d9      	b.n	8008c2c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008878:	4b9b      	ldr	r3, [pc, #620]	@ (8008ae8 <HAL_RCC_ClockConfig+0x284>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 030f 	and.w	r3, r3, #15
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	429a      	cmp	r2, r3
 8008884:	d910      	bls.n	80088a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008886:	4b98      	ldr	r3, [pc, #608]	@ (8008ae8 <HAL_RCC_ClockConfig+0x284>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f023 020f 	bic.w	r2, r3, #15
 800888e:	4996      	ldr	r1, [pc, #600]	@ (8008ae8 <HAL_RCC_ClockConfig+0x284>)
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	4313      	orrs	r3, r2
 8008894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008896:	4b94      	ldr	r3, [pc, #592]	@ (8008ae8 <HAL_RCC_ClockConfig+0x284>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 030f 	and.w	r3, r3, #15
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d001      	beq.n	80088a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e1c1      	b.n	8008c2c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0310 	and.w	r3, r3, #16
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d010      	beq.n	80088d6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	695a      	ldr	r2, [r3, #20]
 80088b8:	4b8c      	ldr	r3, [pc, #560]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 80088ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d908      	bls.n	80088d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80088c4:	4b89      	ldr	r3, [pc, #548]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 80088c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	4986      	ldr	r1, [pc, #536]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 80088d2:	4313      	orrs	r3, r2
 80088d4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 0308 	and.w	r3, r3, #8
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d012      	beq.n	8008908 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691a      	ldr	r2, [r3, #16]
 80088e6:	4b81      	ldr	r3, [pc, #516]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	091b      	lsrs	r3, r3, #4
 80088ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d909      	bls.n	8008908 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80088f4:	4b7d      	ldr	r3, [pc, #500]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 80088f6:	6a1b      	ldr	r3, [r3, #32]
 80088f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	011b      	lsls	r3, r3, #4
 8008902:	497a      	ldr	r1, [pc, #488]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 8008904:	4313      	orrs	r3, r2
 8008906:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	d010      	beq.n	8008936 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68da      	ldr	r2, [r3, #12]
 8008918:	4b74      	ldr	r3, [pc, #464]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 800891a:	6a1b      	ldr	r3, [r3, #32]
 800891c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008920:	429a      	cmp	r2, r3
 8008922:	d908      	bls.n	8008936 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008924:	4b71      	ldr	r3, [pc, #452]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 8008926:	6a1b      	ldr	r3, [r3, #32]
 8008928:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	496e      	ldr	r1, [pc, #440]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 8008932:	4313      	orrs	r3, r2
 8008934:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 0302 	and.w	r3, r3, #2
 800893e:	2b00      	cmp	r3, #0
 8008940:	d010      	beq.n	8008964 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	689a      	ldr	r2, [r3, #8]
 8008946:	4b69      	ldr	r3, [pc, #420]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	f003 030f 	and.w	r3, r3, #15
 800894e:	429a      	cmp	r2, r3
 8008950:	d908      	bls.n	8008964 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8008952:	4b66      	ldr	r3, [pc, #408]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	f023 020f 	bic.w	r2, r3, #15
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	4963      	ldr	r1, [pc, #396]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 8008960:	4313      	orrs	r3, r2
 8008962:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 80d2 	beq.w	8008b16 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8008972:	2300      	movs	r3, #0
 8008974:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	2b03      	cmp	r3, #3
 800897c:	d143      	bne.n	8008a06 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800897e:	4b5b      	ldr	r3, [pc, #364]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 8008980:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008984:	f003 0304 	and.w	r3, r3, #4
 8008988:	2b00      	cmp	r3, #0
 800898a:	d110      	bne.n	80089ae <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800898c:	4b57      	ldr	r3, [pc, #348]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 800898e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008992:	4a56      	ldr	r2, [pc, #344]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 8008994:	f043 0304 	orr.w	r3, r3, #4
 8008998:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800899c:	4b53      	ldr	r3, [pc, #332]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 800899e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089a2:	f003 0304 	and.w	r3, r3, #4
 80089a6:	60bb      	str	r3, [r7, #8]
 80089a8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80089aa:	2301      	movs	r3, #1
 80089ac:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80089ae:	f7fa fcf5 	bl	800339c <HAL_GetTick>
 80089b2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80089b4:	4b4e      	ldr	r3, [pc, #312]	@ (8008af0 <HAL_RCC_ClockConfig+0x28c>)
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00f      	beq.n	80089e0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80089c0:	e008      	b.n	80089d4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80089c2:	f7fa fceb 	bl	800339c <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d901      	bls.n	80089d4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e12b      	b.n	8008c2c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80089d4:	4b46      	ldr	r3, [pc, #280]	@ (8008af0 <HAL_RCC_ClockConfig+0x28c>)
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0f0      	beq.n	80089c2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80089e0:	7dfb      	ldrb	r3, [r7, #23]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d107      	bne.n	80089f6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80089e6:	4b41      	ldr	r3, [pc, #260]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 80089e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089ec:	4a3f      	ldr	r2, [pc, #252]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 80089ee:	f023 0304 	bic.w	r3, r3, #4
 80089f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80089f6:	4b3d      	ldr	r3, [pc, #244]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d121      	bne.n	8008a46 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e112      	b.n	8008c2c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d107      	bne.n	8008a1e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008a0e:	4b37      	ldr	r3, [pc, #220]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d115      	bne.n	8008a46 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e106      	b.n	8008c2c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d107      	bne.n	8008a36 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008a26:	4b31      	ldr	r3, [pc, #196]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0304 	and.w	r3, r3, #4
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d109      	bne.n	8008a46 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e0fa      	b.n	8008c2c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a36:	4b2d      	ldr	r3, [pc, #180]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e0f2      	b.n	8008c2c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8008a46:	4b29      	ldr	r3, [pc, #164]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 8008a48:	69db      	ldr	r3, [r3, #28]
 8008a4a:	f023 0203 	bic.w	r2, r3, #3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	4926      	ldr	r1, [pc, #152]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8008a58:	f7fa fca0 	bl	800339c <HAL_GetTick>
 8008a5c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	2b03      	cmp	r3, #3
 8008a64:	d112      	bne.n	8008a8c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a66:	e00a      	b.n	8008a7e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a68:	f7fa fc98 	bl	800339c <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d901      	bls.n	8008a7e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e0d6      	b.n	8008c2c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	f003 030c 	and.w	r3, r3, #12
 8008a86:	2b0c      	cmp	r3, #12
 8008a88:	d1ee      	bne.n	8008a68 <HAL_RCC_ClockConfig+0x204>
 8008a8a:	e044      	b.n	8008b16 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d112      	bne.n	8008aba <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a94:	e00a      	b.n	8008aac <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a96:	f7fa fc81 	bl	800339c <HAL_GetTick>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d901      	bls.n	8008aac <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e0bf      	b.n	8008c2c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008aac:	4b0f      	ldr	r3, [pc, #60]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	f003 030c 	and.w	r3, r3, #12
 8008ab4:	2b08      	cmp	r3, #8
 8008ab6:	d1ee      	bne.n	8008a96 <HAL_RCC_ClockConfig+0x232>
 8008ab8:	e02d      	b.n	8008b16 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d123      	bne.n	8008b0a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008ac2:	e00a      	b.n	8008ada <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ac4:	f7fa fc6a 	bl	800339c <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d901      	bls.n	8008ada <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e0a8      	b.n	8008c2c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008ada:	4b04      	ldr	r3, [pc, #16]	@ (8008aec <HAL_RCC_ClockConfig+0x288>)
 8008adc:	69db      	ldr	r3, [r3, #28]
 8008ade:	f003 030c 	and.w	r3, r3, #12
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1ee      	bne.n	8008ac4 <HAL_RCC_ClockConfig+0x260>
 8008ae6:	e016      	b.n	8008b16 <HAL_RCC_ClockConfig+0x2b2>
 8008ae8:	40022000 	.word	0x40022000
 8008aec:	46020c00 	.word	0x46020c00
 8008af0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008af4:	f7fa fc52 	bl	800339c <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d901      	bls.n	8008b0a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e090      	b.n	8008c2c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b0a:	4b4a      	ldr	r3, [pc, #296]	@ (8008c34 <HAL_RCC_ClockConfig+0x3d0>)
 8008b0c:	69db      	ldr	r3, [r3, #28]
 8008b0e:	f003 030c 	and.w	r3, r3, #12
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	d1ee      	bne.n	8008af4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0302 	and.w	r3, r3, #2
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d010      	beq.n	8008b44 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	689a      	ldr	r2, [r3, #8]
 8008b26:	4b43      	ldr	r3, [pc, #268]	@ (8008c34 <HAL_RCC_ClockConfig+0x3d0>)
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	f003 030f 	and.w	r3, r3, #15
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d208      	bcs.n	8008b44 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8008b32:	4b40      	ldr	r3, [pc, #256]	@ (8008c34 <HAL_RCC_ClockConfig+0x3d0>)
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	f023 020f 	bic.w	r2, r3, #15
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	493d      	ldr	r1, [pc, #244]	@ (8008c34 <HAL_RCC_ClockConfig+0x3d0>)
 8008b40:	4313      	orrs	r3, r2
 8008b42:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b44:	4b3c      	ldr	r3, [pc, #240]	@ (8008c38 <HAL_RCC_ClockConfig+0x3d4>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 030f 	and.w	r3, r3, #15
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d210      	bcs.n	8008b74 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b52:	4b39      	ldr	r3, [pc, #228]	@ (8008c38 <HAL_RCC_ClockConfig+0x3d4>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f023 020f 	bic.w	r2, r3, #15
 8008b5a:	4937      	ldr	r1, [pc, #220]	@ (8008c38 <HAL_RCC_ClockConfig+0x3d4>)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b62:	4b35      	ldr	r3, [pc, #212]	@ (8008c38 <HAL_RCC_ClockConfig+0x3d4>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 030f 	and.w	r3, r3, #15
 8008b6a:	683a      	ldr	r2, [r7, #0]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d001      	beq.n	8008b74 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e05b      	b.n	8008c2c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 0304 	and.w	r3, r3, #4
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d010      	beq.n	8008ba2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	68da      	ldr	r2, [r3, #12]
 8008b84:	4b2b      	ldr	r3, [pc, #172]	@ (8008c34 <HAL_RCC_ClockConfig+0x3d0>)
 8008b86:	6a1b      	ldr	r3, [r3, #32]
 8008b88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d208      	bcs.n	8008ba2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008b90:	4b28      	ldr	r3, [pc, #160]	@ (8008c34 <HAL_RCC_ClockConfig+0x3d0>)
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	4925      	ldr	r1, [pc, #148]	@ (8008c34 <HAL_RCC_ClockConfig+0x3d0>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0308 	and.w	r3, r3, #8
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d012      	beq.n	8008bd4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	691a      	ldr	r2, [r3, #16]
 8008bb2:	4b20      	ldr	r3, [pc, #128]	@ (8008c34 <HAL_RCC_ClockConfig+0x3d0>)
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	091b      	lsrs	r3, r3, #4
 8008bb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d209      	bcs.n	8008bd4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8008bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8008c34 <HAL_RCC_ClockConfig+0x3d0>)
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
 8008bc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	011b      	lsls	r3, r3, #4
 8008bce:	4919      	ldr	r1, [pc, #100]	@ (8008c34 <HAL_RCC_ClockConfig+0x3d0>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0310 	and.w	r3, r3, #16
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d010      	beq.n	8008c02 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	695a      	ldr	r2, [r3, #20]
 8008be4:	4b13      	ldr	r3, [pc, #76]	@ (8008c34 <HAL_RCC_ClockConfig+0x3d0>)
 8008be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d208      	bcs.n	8008c02 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8008bf0:	4b10      	ldr	r3, [pc, #64]	@ (8008c34 <HAL_RCC_ClockConfig+0x3d0>)
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	695b      	ldr	r3, [r3, #20]
 8008bfc:	490d      	ldr	r1, [pc, #52]	@ (8008c34 <HAL_RCC_ClockConfig+0x3d0>)
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008c02:	f000 f821 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 8008c06:	4602      	mov	r2, r0
 8008c08:	4b0a      	ldr	r3, [pc, #40]	@ (8008c34 <HAL_RCC_ClockConfig+0x3d0>)
 8008c0a:	6a1b      	ldr	r3, [r3, #32]
 8008c0c:	f003 030f 	and.w	r3, r3, #15
 8008c10:	490a      	ldr	r1, [pc, #40]	@ (8008c3c <HAL_RCC_ClockConfig+0x3d8>)
 8008c12:	5ccb      	ldrb	r3, [r1, r3]
 8008c14:	fa22 f303 	lsr.w	r3, r2, r3
 8008c18:	4a09      	ldr	r2, [pc, #36]	@ (8008c40 <HAL_RCC_ClockConfig+0x3dc>)
 8008c1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008c1c:	4b09      	ldr	r3, [pc, #36]	@ (8008c44 <HAL_RCC_ClockConfig+0x3e0>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fa fa2f 	bl	8003084 <HAL_InitTick>
 8008c26:	4603      	mov	r3, r0
 8008c28:	73fb      	strb	r3, [r7, #15]

  return status;
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	46020c00 	.word	0x46020c00
 8008c38:	40022000 	.word	0x40022000
 8008c3c:	0800db60 	.word	0x0800db60
 8008c40:	20000d00 	.word	0x20000d00
 8008c44:	20000d04 	.word	0x20000d04

08008c48 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b08b      	sub	sp, #44	@ 0x2c
 8008c4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c56:	4b78      	ldr	r3, [pc, #480]	@ (8008e38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008c58:	69db      	ldr	r3, [r3, #28]
 8008c5a:	f003 030c 	and.w	r3, r3, #12
 8008c5e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c60:	4b75      	ldr	r3, [pc, #468]	@ (8008e38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c64:	f003 0303 	and.w	r3, r3, #3
 8008c68:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d005      	beq.n	8008c7c <HAL_RCC_GetSysClockFreq+0x34>
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	2b0c      	cmp	r3, #12
 8008c74:	d121      	bne.n	8008cba <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d11e      	bne.n	8008cba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8008c7c:	4b6e      	ldr	r3, [pc, #440]	@ (8008e38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d107      	bne.n	8008c98 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8008c88:	4b6b      	ldr	r3, [pc, #428]	@ (8008e38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008c8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008c8e:	0b1b      	lsrs	r3, r3, #12
 8008c90:	f003 030f 	and.w	r3, r3, #15
 8008c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c96:	e005      	b.n	8008ca4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8008c98:	4b67      	ldr	r3, [pc, #412]	@ (8008e38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	0f1b      	lsrs	r3, r3, #28
 8008c9e:	f003 030f 	and.w	r3, r3, #15
 8008ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008ca4:	4a65      	ldr	r2, [pc, #404]	@ (8008e3c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cac:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d110      	bne.n	8008cd6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008cb8:	e00d      	b.n	8008cd6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008cba:	4b5f      	ldr	r3, [pc, #380]	@ (8008e38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	f003 030c 	and.w	r3, r3, #12
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	d102      	bne.n	8008ccc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008cc6:	4b5e      	ldr	r3, [pc, #376]	@ (8008e40 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008cc8:	623b      	str	r3, [r7, #32]
 8008cca:	e004      	b.n	8008cd6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	2b08      	cmp	r3, #8
 8008cd0:	d101      	bne.n	8008cd6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008cd2:	4b5b      	ldr	r3, [pc, #364]	@ (8008e40 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008cd4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	2b0c      	cmp	r3, #12
 8008cda:	f040 80a5 	bne.w	8008e28 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008cde:	4b56      	ldr	r3, [pc, #344]	@ (8008e38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce2:	f003 0303 	and.w	r3, r3, #3
 8008ce6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008ce8:	4b53      	ldr	r3, [pc, #332]	@ (8008e38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cec:	0a1b      	lsrs	r3, r3, #8
 8008cee:	f003 030f 	and.w	r3, r3, #15
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008cf6:	4b50      	ldr	r3, [pc, #320]	@ (8008e38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cfa:	091b      	lsrs	r3, r3, #4
 8008cfc:	f003 0301 	and.w	r3, r3, #1
 8008d00:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008d02:	4b4d      	ldr	r3, [pc, #308]	@ (8008e38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d06:	08db      	lsrs	r3, r3, #3
 8008d08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	fb02 f303 	mul.w	r3, r2, r3
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d003      	beq.n	8008d2c <HAL_RCC_GetSysClockFreq+0xe4>
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d022      	beq.n	8008d70 <HAL_RCC_GetSysClockFreq+0x128>
 8008d2a:	e043      	b.n	8008db4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	ee07 3a90 	vmov	s15, r3
 8008d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d36:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8008e44 <HAL_RCC_GetSysClockFreq+0x1fc>
 8008d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d3e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d46:	ee07 3a90 	vmov	s15, r3
 8008d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008d4e:	ed97 6a01 	vldr	s12, [r7, #4]
 8008d52:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8008e48 <HAL_RCC_GetSysClockFreq+0x200>
 8008d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d6e:	e046      	b.n	8008dfe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	ee07 3a90 	vmov	s15, r3
 8008d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d7a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8008e44 <HAL_RCC_GetSysClockFreq+0x1fc>
 8008d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d82:	4b2d      	ldr	r3, [pc, #180]	@ (8008e38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d8a:	ee07 3a90 	vmov	s15, r3
 8008d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008d92:	ed97 6a01 	vldr	s12, [r7, #4]
 8008d96:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8008e48 <HAL_RCC_GetSysClockFreq+0x200>
 8008d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008db2:	e024      	b.n	8008dfe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db6:	ee07 3a90 	vmov	s15, r3
 8008dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	ee07 3a90 	vmov	s15, r3
 8008dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8008e38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dd4:	ee07 3a90 	vmov	s15, r3
 8008dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008ddc:	ed97 6a01 	vldr	s12, [r7, #4]
 8008de0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8008e48 <HAL_RCC_GetSysClockFreq+0x200>
 8008de4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008de8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008dec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008df0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008df8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dfc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8008dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8008e38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e02:	0e1b      	lsrs	r3, r3, #24
 8008e04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e08:	3301      	adds	r3, #1
 8008e0a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e16:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e22:	ee17 3a90 	vmov	r3, s15
 8008e26:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8008e28:	6a3b      	ldr	r3, [r7, #32]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	372c      	adds	r7, #44	@ 0x2c
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	46020c00 	.word	0x46020c00
 8008e3c:	0800db78 	.word	0x0800db78
 8008e40:	00f42400 	.word	0x00f42400
 8008e44:	4b742400 	.word	0x4b742400
 8008e48:	46000000 	.word	0x46000000

08008e4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008e50:	f7ff fefa 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 8008e54:	4602      	mov	r2, r0
 8008e56:	4b07      	ldr	r3, [pc, #28]	@ (8008e74 <HAL_RCC_GetHCLKFreq+0x28>)
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	f003 030f 	and.w	r3, r3, #15
 8008e5e:	4906      	ldr	r1, [pc, #24]	@ (8008e78 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008e60:	5ccb      	ldrb	r3, [r1, r3]
 8008e62:	fa22 f303 	lsr.w	r3, r2, r3
 8008e66:	4a05      	ldr	r2, [pc, #20]	@ (8008e7c <HAL_RCC_GetHCLKFreq+0x30>)
 8008e68:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8008e6a:	4b04      	ldr	r3, [pc, #16]	@ (8008e7c <HAL_RCC_GetHCLKFreq+0x30>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	46020c00 	.word	0x46020c00
 8008e78:	0800db60 	.word	0x0800db60
 8008e7c:	20000d00 	.word	0x20000d00

08008e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8008e84:	f7ff ffe2 	bl	8008e4c <HAL_RCC_GetHCLKFreq>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	4b05      	ldr	r3, [pc, #20]	@ (8008ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e8c:	6a1b      	ldr	r3, [r3, #32]
 8008e8e:	091b      	lsrs	r3, r3, #4
 8008e90:	f003 0307 	and.w	r3, r3, #7
 8008e94:	4903      	ldr	r1, [pc, #12]	@ (8008ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e96:	5ccb      	ldrb	r3, [r1, r3]
 8008e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	46020c00 	.word	0x46020c00
 8008ea4:	0800db70 	.word	0x0800db70

08008ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8008eac:	f7ff ffce 	bl	8008e4c <HAL_RCC_GetHCLKFreq>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	4b05      	ldr	r3, [pc, #20]	@ (8008ec8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	0a1b      	lsrs	r3, r3, #8
 8008eb8:	f003 0307 	and.w	r3, r3, #7
 8008ebc:	4903      	ldr	r1, [pc, #12]	@ (8008ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ebe:	5ccb      	ldrb	r3, [r1, r3]
 8008ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	46020c00 	.word	0x46020c00
 8008ecc:	0800db70 	.word	0x0800db70

08008ed0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8008ed4:	f7ff ffba 	bl	8008e4c <HAL_RCC_GetHCLKFreq>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	4b05      	ldr	r3, [pc, #20]	@ (8008ef0 <HAL_RCC_GetPCLK3Freq+0x20>)
 8008edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ede:	091b      	lsrs	r3, r3, #4
 8008ee0:	f003 0307 	and.w	r3, r3, #7
 8008ee4:	4903      	ldr	r1, [pc, #12]	@ (8008ef4 <HAL_RCC_GetPCLK3Freq+0x24>)
 8008ee6:	5ccb      	ldrb	r3, [r1, r3]
 8008ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	46020c00 	.word	0x46020c00
 8008ef4:	0800db70 	.word	0x0800db70

08008ef8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	221f      	movs	r2, #31
 8008f06:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8008f08:	4b15      	ldr	r3, [pc, #84]	@ (8008f60 <HAL_RCC_GetClockConfig+0x68>)
 8008f0a:	69db      	ldr	r3, [r3, #28]
 8008f0c:	f003 0203 	and.w	r2, r3, #3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8008f14:	4b12      	ldr	r3, [pc, #72]	@ (8008f60 <HAL_RCC_GetClockConfig+0x68>)
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	f003 020f 	and.w	r2, r3, #15
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8008f20:	4b0f      	ldr	r3, [pc, #60]	@ (8008f60 <HAL_RCC_GetClockConfig+0x68>)
 8008f22:	6a1b      	ldr	r3, [r3, #32]
 8008f24:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8008f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f60 <HAL_RCC_GetClockConfig+0x68>)
 8008f2e:	6a1b      	ldr	r3, [r3, #32]
 8008f30:	091b      	lsrs	r3, r3, #4
 8008f32:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8008f3a:	4b09      	ldr	r3, [pc, #36]	@ (8008f60 <HAL_RCC_GetClockConfig+0x68>)
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f3e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008f46:	4b07      	ldr	r3, [pc, #28]	@ (8008f64 <HAL_RCC_GetClockConfig+0x6c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 020f 	and.w	r2, r3, #15
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	601a      	str	r2, [r3, #0]
}
 8008f52:	bf00      	nop
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	46020c00 	.word	0x46020c00
 8008f64:	40022000 	.word	0x40022000

08008f68 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8008f6c:	4b05      	ldr	r3, [pc, #20]	@ (8008f84 <HAL_RCC_EnableCSS+0x1c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a04      	ldr	r2, [pc, #16]	@ (8008f84 <HAL_RCC_EnableCSS+0x1c>)
 8008f72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f76:	6013      	str	r3, [r2, #0]
}
 8008f78:	bf00      	nop
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	46020c00 	.word	0x46020c00

08008f88 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008f8c:	4b07      	ldr	r3, [pc, #28]	@ (8008fac <HAL_RCC_NMI_IRQHandler+0x24>)
 8008f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f98:	d105      	bne.n	8008fa6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008f9a:	f000 f809 	bl	8008fb0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008f9e:	4b03      	ldr	r3, [pc, #12]	@ (8008fac <HAL_RCC_NMI_IRQHandler+0x24>)
 8008fa0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008fa4:	659a      	str	r2, [r3, #88]	@ 0x58
  }
}
 8008fa6:	bf00      	nop
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	46020c00 	.word	0x46020c00

08008fb0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8008fb4:	bf00      	nop
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
	...

08008fc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80090c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008fce:	f003 0304 	and.w	r3, r3, #4
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d003      	beq.n	8008fde <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008fd6:	f7fe fcfb 	bl	80079d0 <HAL_PWREx_GetVoltageRange>
 8008fda:	6178      	str	r0, [r7, #20]
 8008fdc:	e019      	b.n	8009012 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008fde:	4b39      	ldr	r3, [pc, #228]	@ (80090c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008fe4:	4a37      	ldr	r2, [pc, #220]	@ (80090c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008fe6:	f043 0304 	orr.w	r3, r3, #4
 8008fea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008fee:	4b35      	ldr	r3, [pc, #212]	@ (80090c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ff4:	f003 0304 	and.w	r3, r3, #4
 8008ff8:	60fb      	str	r3, [r7, #12]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008ffc:	f7fe fce8 	bl	80079d0 <HAL_PWREx_GetVoltageRange>
 8009000:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009002:	4b30      	ldr	r3, [pc, #192]	@ (80090c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009004:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009008:	4a2e      	ldr	r2, [pc, #184]	@ (80090c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800900a:	f023 0304 	bic.w	r3, r3, #4
 800900e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009018:	d003      	beq.n	8009022 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009020:	d109      	bne.n	8009036 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009028:	d202      	bcs.n	8009030 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800902a:	2301      	movs	r3, #1
 800902c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800902e:	e033      	b.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8009030:	2300      	movs	r3, #0
 8009032:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009034:	e030      	b.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800903c:	d208      	bcs.n	8009050 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009044:	d102      	bne.n	800904c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8009046:	2303      	movs	r3, #3
 8009048:	613b      	str	r3, [r7, #16]
 800904a:	e025      	b.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	e035      	b.n	80090bc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009056:	d90f      	bls.n	8009078 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d109      	bne.n	8009072 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009064:	d902      	bls.n	800906c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8009066:	2300      	movs	r3, #0
 8009068:	613b      	str	r3, [r7, #16]
 800906a:	e015      	b.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800906c:	2301      	movs	r3, #1
 800906e:	613b      	str	r3, [r7, #16]
 8009070:	e012      	b.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8009072:	2300      	movs	r3, #0
 8009074:	613b      	str	r3, [r7, #16]
 8009076:	e00f      	b.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800907e:	d109      	bne.n	8009094 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009086:	d102      	bne.n	800908e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8009088:	2301      	movs	r3, #1
 800908a:	613b      	str	r3, [r7, #16]
 800908c:	e004      	b.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800908e:	2302      	movs	r3, #2
 8009090:	613b      	str	r3, [r7, #16]
 8009092:	e001      	b.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8009094:	2301      	movs	r3, #1
 8009096:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009098:	4b0b      	ldr	r3, [pc, #44]	@ (80090c8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f023 020f 	bic.w	r2, r3, #15
 80090a0:	4909      	ldr	r1, [pc, #36]	@ (80090c8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80090a8:	4b07      	ldr	r3, [pc, #28]	@ (80090c8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 030f 	and.w	r3, r3, #15
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d001      	beq.n	80090ba <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e000      	b.n	80090bc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	46020c00 	.word	0x46020c00
 80090c8:	40022000 	.word	0x40022000

080090cc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80090cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090d0:	b0c8      	sub	sp, #288	@ 0x120
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80090d8:	2300      	movs	r3, #0
 80090da:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80090de:	2300      	movs	r3, #0
 80090e0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80090e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	f002 0401 	and.w	r4, r2, #1
 80090f0:	2500      	movs	r5, #0
 80090f2:	ea54 0305 	orrs.w	r3, r4, r5
 80090f6:	d00b      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80090f8:	4bd5      	ldr	r3, [pc, #852]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80090fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80090fe:	f023 0103 	bic.w	r1, r3, #3
 8009102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009108:	4ad1      	ldr	r2, [pc, #836]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800910a:	430b      	orrs	r3, r1
 800910c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009110:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009118:	f002 0802 	and.w	r8, r2, #2
 800911c:	f04f 0900 	mov.w	r9, #0
 8009120:	ea58 0309 	orrs.w	r3, r8, r9
 8009124:	d00b      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8009126:	4bca      	ldr	r3, [pc, #808]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800912c:	f023 010c 	bic.w	r1, r3, #12
 8009130:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009136:	4ac6      	ldr	r2, [pc, #792]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009138:	430b      	orrs	r3, r1
 800913a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800913e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009146:	f002 0a04 	and.w	sl, r2, #4
 800914a:	f04f 0b00 	mov.w	fp, #0
 800914e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009152:	d00b      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8009154:	4bbe      	ldr	r3, [pc, #760]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800915a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800915e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009164:	4aba      	ldr	r2, [pc, #744]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009166:	430b      	orrs	r3, r1
 8009168:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800916c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	f002 0308 	and.w	r3, r2, #8
 8009178:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800917c:	2300      	movs	r3, #0
 800917e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009182:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009186:	460b      	mov	r3, r1
 8009188:	4313      	orrs	r3, r2
 800918a:	d00b      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800918c:	4bb0      	ldr	r3, [pc, #704]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800918e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009192:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009196:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800919a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800919c:	4aac      	ldr	r2, [pc, #688]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800919e:	430b      	orrs	r3, r1
 80091a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80091a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ac:	f002 0310 	and.w	r3, r2, #16
 80091b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80091b4:	2300      	movs	r3, #0
 80091b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80091ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80091be:	460b      	mov	r3, r1
 80091c0:	4313      	orrs	r3, r2
 80091c2:	d00b      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80091c4:	4ba2      	ldr	r3, [pc, #648]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80091c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80091ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091d4:	4a9e      	ldr	r2, [pc, #632]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80091d6:	430b      	orrs	r3, r1
 80091d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80091dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80091e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80091ec:	2300      	movs	r3, #0
 80091ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80091f2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4313      	orrs	r3, r2
 80091fa:	d00b      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80091fc:	4b94      	ldr	r3, [pc, #592]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80091fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009202:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009206:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800920a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800920c:	4a90      	ldr	r2, [pc, #576]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800920e:	430b      	orrs	r3, r1
 8009210:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009214:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921c:	f002 0320 	and.w	r3, r2, #32
 8009220:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009224:	2300      	movs	r3, #0
 8009226:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800922a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800922e:	460b      	mov	r3, r1
 8009230:	4313      	orrs	r3, r2
 8009232:	d00b      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8009234:	4b86      	ldr	r3, [pc, #536]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800923a:	f023 0107 	bic.w	r1, r3, #7
 800923e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009242:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009244:	4a82      	ldr	r2, [pc, #520]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009246:	430b      	orrs	r3, r1
 8009248:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800924c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800925c:	2300      	movs	r3, #0
 800925e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009262:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009266:	460b      	mov	r3, r1
 8009268:	4313      	orrs	r3, r2
 800926a:	d00b      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800926c:	4b78      	ldr	r3, [pc, #480]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800926e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009272:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8009276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800927a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800927c:	4a74      	ldr	r2, [pc, #464]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800927e:	430b      	orrs	r3, r1
 8009280:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009290:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009294:	2300      	movs	r3, #0
 8009296:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800929a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800929e:	460b      	mov	r3, r1
 80092a0:	4313      	orrs	r3, r2
 80092a2:	d00b      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80092a4:	4b6a      	ldr	r3, [pc, #424]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80092a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80092aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80092ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092b4:	4a66      	ldr	r2, [pc, #408]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80092b6:	430b      	orrs	r3, r1
 80092b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80092bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80092c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80092cc:	2300      	movs	r3, #0
 80092ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80092d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80092d6:	460b      	mov	r3, r1
 80092d8:	4313      	orrs	r3, r2
 80092da:	d00b      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80092dc:	4b5c      	ldr	r3, [pc, #368]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80092de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80092e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092ec:	4a58      	ldr	r2, [pc, #352]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80092ee:	430b      	orrs	r3, r1
 80092f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80092f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009300:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009304:	2300      	movs	r3, #0
 8009306:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800930a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800930e:	460b      	mov	r3, r1
 8009310:	4313      	orrs	r3, r2
 8009312:	d00b      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8009314:	4b4e      	ldr	r3, [pc, #312]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800931a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800931e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009322:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009324:	4a4a      	ldr	r2, [pc, #296]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009326:	430b      	orrs	r3, r1
 8009328:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800932c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009334:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009338:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800933c:	2300      	movs	r3, #0
 800933e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009342:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009346:	460b      	mov	r3, r1
 8009348:	4313      	orrs	r3, r2
 800934a:	d00b      	beq.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800934c:	4b40      	ldr	r3, [pc, #256]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800934e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009352:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8009356:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800935a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800935c:	4a3c      	ldr	r2, [pc, #240]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800935e:	430b      	orrs	r3, r1
 8009360:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8009364:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009370:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009374:	2300      	movs	r3, #0
 8009376:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800937a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800937e:	460b      	mov	r3, r1
 8009380:	4313      	orrs	r3, r2
 8009382:	d00c      	beq.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8009384:	4b32      	ldr	r3, [pc, #200]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009386:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800938a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800938e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009396:	4a2e      	ldr	r2, [pc, #184]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009398:	430b      	orrs	r3, r1
 800939a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800939e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a6:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80093aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80093ae:	2300      	movs	r3, #0
 80093b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80093b4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80093b8:	460b      	mov	r3, r1
 80093ba:	4313      	orrs	r3, r2
 80093bc:	d00c      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80093be:	4b24      	ldr	r3, [pc, #144]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80093c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80093c4:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80093c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093d0:	4a1f      	ldr	r2, [pc, #124]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80093d2:	430b      	orrs	r3, r1
 80093d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80093d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80093e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80093e8:	2300      	movs	r3, #0
 80093ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80093ee:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80093f2:	460b      	mov	r3, r1
 80093f4:	4313      	orrs	r3, r2
 80093f6:	d00c      	beq.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80093f8:	4b15      	ldr	r3, [pc, #84]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80093fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093fe:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8009402:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800940a:	4a11      	ldr	r2, [pc, #68]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800940c:	430b      	orrs	r3, r1
 800940e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8009412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800941e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009422:	2300      	movs	r3, #0
 8009424:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009428:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800942c:	460b      	mov	r3, r1
 800942e:	4313      	orrs	r3, r2
 8009430:	d010      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8009432:	4b07      	ldr	r3, [pc, #28]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009434:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009438:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800943c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009440:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009444:	4a02      	ldr	r2, [pc, #8]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009446:	430b      	orrs	r3, r1
 8009448:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800944c:	e002      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800944e:	bf00      	nop
 8009450:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009460:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009464:	2300      	movs	r3, #0
 8009466:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800946a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800946e:	460b      	mov	r3, r1
 8009470:	4313      	orrs	r3, r2
 8009472:	d04c      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009478:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800947c:	2b80      	cmp	r3, #128	@ 0x80
 800947e:	d02d      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009480:	2b80      	cmp	r3, #128	@ 0x80
 8009482:	d827      	bhi.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009484:	2b60      	cmp	r3, #96	@ 0x60
 8009486:	d02b      	beq.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009488:	2b60      	cmp	r3, #96	@ 0x60
 800948a:	d823      	bhi.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800948c:	2b40      	cmp	r3, #64	@ 0x40
 800948e:	d006      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8009490:	2b40      	cmp	r3, #64	@ 0x40
 8009492:	d81f      	bhi.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009494:	2b00      	cmp	r3, #0
 8009496:	d009      	beq.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009498:	2b20      	cmp	r3, #32
 800949a:	d011      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800949c:	e01a      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800949e:	4bc0      	ldr	r3, [pc, #768]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80094a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a2:	4abf      	ldr	r2, [pc, #764]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80094a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094a8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80094aa:	e01a      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80094ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094b0:	3308      	adds	r3, #8
 80094b2:	4618      	mov	r0, r3
 80094b4:	f002 fce8 	bl	800be88 <RCCEx_PLL2_Config>
 80094b8:	4603      	mov	r3, r0
 80094ba:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80094be:	e010      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80094c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094c4:	332c      	adds	r3, #44	@ 0x2c
 80094c6:	4618      	mov	r0, r3
 80094c8:	f002 fd76 	bl	800bfb8 <RCCEx_PLL3_Config>
 80094cc:	4603      	mov	r3, r0
 80094ce:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80094d2:	e006      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80094da:	e002      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80094dc:	bf00      	nop
 80094de:	e000      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80094e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094e2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10d      	bne.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80094ea:	4bad      	ldr	r3, [pc, #692]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80094ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80094f0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80094f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80094fc:	4aa8      	ldr	r2, [pc, #672]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80094fe:	430b      	orrs	r3, r1
 8009500:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009504:	e003      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009506:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800950a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800950e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009516:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800951a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800951e:	2300      	movs	r3, #0
 8009520:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009524:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009528:	460b      	mov	r3, r1
 800952a:	4313      	orrs	r3, r2
 800952c:	d053      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800952e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009532:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800953a:	d033      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800953c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009540:	d82c      	bhi.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009542:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009546:	d02f      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8009548:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800954c:	d826      	bhi.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800954e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009552:	d008      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8009554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009558:	d820      	bhi.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00a      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800955e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009562:	d011      	beq.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009564:	e01a      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009566:	4b8e      	ldr	r3, [pc, #568]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800956a:	4a8d      	ldr	r2, [pc, #564]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800956c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009570:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009572:	e01a      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009578:	3308      	adds	r3, #8
 800957a:	4618      	mov	r0, r3
 800957c:	f002 fc84 	bl	800be88 <RCCEx_PLL2_Config>
 8009580:	4603      	mov	r3, r0
 8009582:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009586:	e010      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009588:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800958c:	332c      	adds	r3, #44	@ 0x2c
 800958e:	4618      	mov	r0, r3
 8009590:	f002 fd12 	bl	800bfb8 <RCCEx_PLL3_Config>
 8009594:	4603      	mov	r3, r0
 8009596:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800959a:	e006      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80095a2:	e002      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80095a4:	bf00      	nop
 80095a6:	e000      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80095a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095aa:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10d      	bne.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80095b2:	4b7b      	ldr	r3, [pc, #492]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80095b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80095b8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80095bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80095c4:	4a76      	ldr	r2, [pc, #472]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80095c6:	430b      	orrs	r3, r1
 80095c8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80095cc:	e003      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ce:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80095d2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80095d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095de:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80095e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80095e6:	2300      	movs	r3, #0
 80095e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80095ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80095f0:	460b      	mov	r3, r1
 80095f2:	4313      	orrs	r3, r2
 80095f4:	d046      	beq.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80095f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80095fe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009602:	d028      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009604:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009608:	d821      	bhi.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800960a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800960e:	d022      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009610:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009614:	d81b      	bhi.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009616:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800961a:	d01c      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800961c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009620:	d815      	bhi.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009626:	d008      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8009628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800962c:	d80f      	bhi.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800962e:	2b00      	cmp	r3, #0
 8009630:	d011      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009636:	d00e      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009638:	e009      	b.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800963a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800963e:	3308      	adds	r3, #8
 8009640:	4618      	mov	r0, r3
 8009642:	f002 fc21 	bl	800be88 <RCCEx_PLL2_Config>
 8009646:	4603      	mov	r3, r0
 8009648:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800964c:	e004      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009654:	e000      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8009656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009658:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10d      	bne.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009660:	4b4f      	ldr	r3, [pc, #316]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009662:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009666:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800966a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800966e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009672:	4a4b      	ldr	r2, [pc, #300]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009674:	430b      	orrs	r3, r1
 8009676:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800967a:	e003      	b.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800967c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009680:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009684:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009690:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009694:	2300      	movs	r3, #0
 8009696:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800969a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800969e:	460b      	mov	r3, r1
 80096a0:	4313      	orrs	r3, r2
 80096a2:	d03f      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80096a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80096ac:	2b04      	cmp	r3, #4
 80096ae:	d81e      	bhi.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x622>
 80096b0:	a201      	add	r2, pc, #4	@ (adr r2, 80096b8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80096b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b6:	bf00      	nop
 80096b8:	080096f7 	.word	0x080096f7
 80096bc:	080096cd 	.word	0x080096cd
 80096c0:	080096db 	.word	0x080096db
 80096c4:	080096f7 	.word	0x080096f7
 80096c8:	080096f7 	.word	0x080096f7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80096cc:	4b34      	ldr	r3, [pc, #208]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80096ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d0:	4a33      	ldr	r2, [pc, #204]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80096d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096d6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80096d8:	e00e      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80096da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096de:	332c      	adds	r3, #44	@ 0x2c
 80096e0:	4618      	mov	r0, r3
 80096e2:	f002 fc69 	bl	800bfb8 <RCCEx_PLL3_Config>
 80096e6:	4603      	mov	r3, r0
 80096e8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80096ec:	e004      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80096f4:	e000      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 80096f6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80096f8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10d      	bne.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8009700:	4b27      	ldr	r3, [pc, #156]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009702:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009706:	f023 0107 	bic.w	r1, r3, #7
 800970a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800970e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009712:	4a23      	ldr	r2, [pc, #140]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009714:	430b      	orrs	r3, r1
 8009716:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800971a:	e003      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800971c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009720:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8009724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009730:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009732:	2300      	movs	r3, #0
 8009734:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009736:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800973a:	460b      	mov	r3, r1
 800973c:	4313      	orrs	r3, r2
 800973e:	d04c      	beq.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8009740:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009744:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009748:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800974c:	d02a      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800974e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009752:	d821      	bhi.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009754:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009758:	d026      	beq.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800975a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800975e:	d81b      	bhi.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009760:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009764:	d00e      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009766:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800976a:	d815      	bhi.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800976c:	2b00      	cmp	r3, #0
 800976e:	d01d      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8009770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009774:	d110      	bne.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009776:	4b0a      	ldr	r3, [pc, #40]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800977a:	4a09      	ldr	r2, [pc, #36]	@ (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800977c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009780:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009782:	e014      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009788:	332c      	adds	r3, #44	@ 0x2c
 800978a:	4618      	mov	r0, r3
 800978c:	f002 fc14 	bl	800bfb8 <RCCEx_PLL3_Config>
 8009790:	4603      	mov	r3, r0
 8009792:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009796:	e00a      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800979e:	e006      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80097a0:	46020c00 	.word	0x46020c00
        break;
 80097a4:	bf00      	nop
 80097a6:	e002      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 80097a8:	bf00      	nop
 80097aa:	e000      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 80097ac:	bf00      	nop
    }
    if (ret == HAL_OK)
 80097ae:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10d      	bne.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80097b6:	4baf      	ldr	r3, [pc, #700]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80097b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80097c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80097c8:	4aaa      	ldr	r2, [pc, #680]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80097ca:	430b      	orrs	r3, r1
 80097cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80097d0:	e003      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80097d6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80097e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80097e8:	2300      	movs	r3, #0
 80097ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80097ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80097f0:	460b      	mov	r3, r1
 80097f2:	4313      	orrs	r3, r2
 80097f4:	f000 80b5 	beq.w	8009962 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 80097f8:	2300      	movs	r3, #0
 80097fa:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097fe:	4b9d      	ldr	r3, [pc, #628]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009800:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009804:	f003 0304 	and.w	r3, r3, #4
 8009808:	2b00      	cmp	r3, #0
 800980a:	d113      	bne.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800980c:	4b99      	ldr	r3, [pc, #612]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800980e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009812:	4a98      	ldr	r2, [pc, #608]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009814:	f043 0304 	orr.w	r3, r3, #4
 8009818:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800981c:	4b95      	ldr	r3, [pc, #596]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800981e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009822:	f003 0304 	and.w	r3, r3, #4
 8009826:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800982a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800982e:	2301      	movs	r3, #1
 8009830:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009834:	4b90      	ldr	r3, [pc, #576]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009838:	4a8f      	ldr	r2, [pc, #572]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800983a:	f043 0301 	orr.w	r3, r3, #1
 800983e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009840:	f7f9 fdac 	bl	800339c <HAL_GetTick>
 8009844:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009848:	e00b      	b.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800984a:	f7f9 fda7 	bl	800339c <HAL_GetTick>
 800984e:	4602      	mov	r2, r0
 8009850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	2b02      	cmp	r3, #2
 8009858:	d903      	bls.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800985a:	2303      	movs	r3, #3
 800985c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009860:	e005      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009862:	4b85      	ldr	r3, [pc, #532]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009866:	f003 0301 	and.w	r3, r3, #1
 800986a:	2b00      	cmp	r3, #0
 800986c:	d0ed      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800986e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009872:	2b00      	cmp	r3, #0
 8009874:	d165      	bne.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009876:	4b7f      	ldr	r3, [pc, #508]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800987c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009880:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009884:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009888:	2b00      	cmp	r3, #0
 800988a:	d023      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800988c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009890:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8009894:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009898:	4293      	cmp	r3, r2
 800989a:	d01b      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800989c:	4b75      	ldr	r3, [pc, #468]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800989e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80098aa:	4b72      	ldr	r3, [pc, #456]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80098ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098b0:	4a70      	ldr	r2, [pc, #448]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80098b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80098ba:	4b6e      	ldr	r3, [pc, #440]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80098bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098c0:	4a6c      	ldr	r2, [pc, #432]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80098c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80098ca:	4a6a      	ldr	r2, [pc, #424]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80098cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80098d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80098d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80098d8:	f003 0301 	and.w	r3, r3, #1
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d019      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098e0:	f7f9 fd5c 	bl	800339c <HAL_GetTick>
 80098e4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80098e8:	e00d      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098ea:	f7f9 fd57 	bl	800339c <HAL_GetTick>
 80098ee:	4602      	mov	r2, r0
 80098f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f4:	1ad2      	subs	r2, r2, r3
 80098f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d903      	bls.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 80098fe:	2303      	movs	r3, #3
 8009900:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 8009904:	e006      	b.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009906:	4b5b      	ldr	r3, [pc, #364]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800990c:	f003 0302 	and.w	r3, r3, #2
 8009910:	2b00      	cmp	r3, #0
 8009912:	d0ea      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 8009914:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10d      	bne.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800991c:	4b55      	ldr	r3, [pc, #340]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800991e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009922:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009926:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800992a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800992e:	4a51      	ldr	r2, [pc, #324]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009930:	430b      	orrs	r3, r1
 8009932:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009936:	e008      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009938:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800993c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 8009940:	e003      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009942:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009946:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800994a:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800994e:	2b01      	cmp	r3, #1
 8009950:	d107      	bne.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009952:	4b48      	ldr	r3, [pc, #288]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009954:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009958:	4a46      	ldr	r2, [pc, #280]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800995a:	f023 0304 	bic.w	r3, r3, #4
 800995e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8009962:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800996e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009970:	2300      	movs	r3, #0
 8009972:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009974:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009978:	460b      	mov	r3, r1
 800997a:	4313      	orrs	r3, r2
 800997c:	d042      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800997e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009982:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009986:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800998a:	d022      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800998c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009990:	d81b      	bhi.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8009992:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009996:	d011      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8009998:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800999c:	d815      	bhi.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d019      	beq.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80099a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80099a6:	d110      	bne.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80099a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099ac:	3308      	adds	r3, #8
 80099ae:	4618      	mov	r0, r3
 80099b0:	f002 fa6a 	bl	800be88 <RCCEx_PLL2_Config>
 80099b4:	4603      	mov	r3, r0
 80099b6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80099ba:	e00d      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099bc:	4b2d      	ldr	r3, [pc, #180]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80099be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c0:	4a2c      	ldr	r2, [pc, #176]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80099c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099c6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80099c8:	e006      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80099d0:	e002      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 80099d2:	bf00      	nop
 80099d4:	e000      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 80099d6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80099d8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10d      	bne.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80099e0:	4b24      	ldr	r3, [pc, #144]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80099e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80099e6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80099ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80099f2:	4a20      	ldr	r2, [pc, #128]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80099f4:	430b      	orrs	r3, r1
 80099f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80099fa:	e003      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099fc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009a00:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009a10:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a12:	2300      	movs	r3, #0
 8009a14:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a16:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	d031      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8009a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a2c:	d00b      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8009a2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a32:	d804      	bhi.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d008      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8009a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a3c:	d007      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009a44:	e004      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8009a46:	bf00      	nop
 8009a48:	e002      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8009a4a:	bf00      	nop
 8009a4c:	e000      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8009a4e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009a50:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d111      	bne.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009a58:	4b06      	ldr	r3, [pc, #24]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009a5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009a5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009a6a:	4a02      	ldr	r2, [pc, #8]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009a6c:	430b      	orrs	r3, r1
 8009a6e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009a72:	e007      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8009a74:	46020c00 	.word	0x46020c00
 8009a78:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a7c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009a80:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8009a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009a90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a92:	2300      	movs	r3, #0
 8009a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a96:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	d00c      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8009aa0:	4bb2      	ldr	r3, [pc, #712]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009aa2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009aa6:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8009aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009ab2:	4aae      	ldr	r2, [pc, #696]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ab4:	430b      	orrs	r3, r1
 8009ab6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8009aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009ac6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ac8:	2300      	movs	r3, #0
 8009aca:	657b      	str	r3, [r7, #84]	@ 0x54
 8009acc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	d019      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8009ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ada:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009ade:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ae2:	d105      	bne.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ae4:	4ba1      	ldr	r3, [pc, #644]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae8:	4aa0      	ldr	r2, [pc, #640]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009aea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009aee:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8009af0:	4b9e      	ldr	r3, [pc, #632]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009af2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009af6:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009afe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009b02:	4a9a      	ldr	r2, [pc, #616]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009b04:	430b      	orrs	r3, r1
 8009b06:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009b16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b18:	2300      	movs	r3, #0
 8009b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b1c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009b20:	460b      	mov	r3, r1
 8009b22:	4313      	orrs	r3, r2
 8009b24:	d00c      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8009b26:	4b91      	ldr	r3, [pc, #580]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b2c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b34:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009b38:	4a8c      	ldr	r2, [pc, #560]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009b3a:	430b      	orrs	r3, r1
 8009b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009b4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b4e:	2300      	movs	r3, #0
 8009b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b52:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009b56:	460b      	mov	r3, r1
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	d00c      	beq.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8009b5c:	4b83      	ldr	r3, [pc, #524]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b62:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b6a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009b6e:	4a7f      	ldr	r2, [pc, #508]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009b70:	430b      	orrs	r3, r1
 8009b72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009b82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b84:	2300      	movs	r3, #0
 8009b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b88:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	d00c      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8009b92:	4b76      	ldr	r3, [pc, #472]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009b94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b98:	f023 0118 	bic.w	r1, r3, #24
 8009b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ba0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8009ba4:	4a71      	ldr	r2, [pc, #452]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ba6:	430b      	orrs	r3, r1
 8009ba8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8009bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bba:	2300      	movs	r3, #0
 8009bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bbe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	d032      	beq.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8009bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bcc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009bd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bd4:	d105      	bne.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bd6:	4b65      	ldr	r3, [pc, #404]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bda:	4a64      	ldr	r2, [pc, #400]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009be0:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8009be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009be6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009bea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009bee:	d108      	bne.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bf4:	3308      	adds	r3, #8
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f002 f946 	bl	800be88 <RCCEx_PLL2_Config>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 8009c02:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10d      	bne.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8009c0a:	4b58      	ldr	r3, [pc, #352]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009c0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009c10:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c18:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009c1c:	4a53      	ldr	r2, [pc, #332]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009c1e:	430b      	orrs	r3, r1
 8009c20:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009c24:	e003      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c26:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009c2a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8009c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c36:	2100      	movs	r1, #0
 8009c38:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009c3a:	f003 0301 	and.w	r3, r3, #1
 8009c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c40:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009c44:	460b      	mov	r3, r1
 8009c46:	4313      	orrs	r3, r2
 8009c48:	d04a      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8009c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c4e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009c52:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009c56:	d01e      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8009c58:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009c5c:	d825      	bhi.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8009c5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c62:	d00e      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 8009c64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c68:	d81f      	bhi.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d021      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8009c6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c72:	d11a      	bne.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c74:	4b3d      	ldr	r3, [pc, #244]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c78:	4a3c      	ldr	r2, [pc, #240]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009c7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c7e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009c80:	e018      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c86:	3308      	adds	r3, #8
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f002 f8fd 	bl	800be88 <RCCEx_PLL2_Config>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009c94:	e00e      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c9a:	332c      	adds	r3, #44	@ 0x2c
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f002 f98b 	bl	800bfb8 <RCCEx_PLL3_Config>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009ca8:	e004      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009cb0:	e000      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 8009cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cb4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d10d      	bne.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8009cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009cbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009cc2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009cce:	4927      	ldr	r1, [pc, #156]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8009cd6:	e003      	b.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cd8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009cdc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8009ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8009cec:	623b      	str	r3, [r7, #32]
 8009cee:	2300      	movs	r3, #0
 8009cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cf2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	d03d      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8009cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d08:	d00e      	beq.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8009d0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d0e:	d815      	bhi.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d017      	beq.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d18:	d110      	bne.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d1a:	4b14      	ldr	r3, [pc, #80]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d1e:	4a13      	ldr	r2, [pc, #76]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d24:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009d26:	e00e      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d2c:	3308      	adds	r3, #8
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f002 f8aa 	bl	800be88 <RCCEx_PLL2_Config>
 8009d34:	4603      	mov	r3, r0
 8009d36:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009d3a:	e004      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009d42:	e000      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009d44:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009d46:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d110      	bne.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8009d4e:	4b07      	ldr	r3, [pc, #28]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d54:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d60:	4902      	ldr	r1, [pc, #8]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d62:	4313      	orrs	r3, r2
 8009d64:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8009d68:	e006      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8009d6a:	bf00      	nop
 8009d6c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d70:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009d74:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8009d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009d84:	61bb      	str	r3, [r7, #24]
 8009d86:	2300      	movs	r3, #0
 8009d88:	61fb      	str	r3, [r7, #28]
 8009d8a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009d8e:	460b      	mov	r3, r1
 8009d90:	4313      	orrs	r3, r2
 8009d92:	d00c      	beq.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8009d94:	4b68      	ldr	r3, [pc, #416]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009d96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d9a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8009d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009da2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009da6:	4964      	ldr	r1, [pc, #400]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009da8:	4313      	orrs	r3, r2
 8009daa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db6:	2100      	movs	r1, #0
 8009db8:	6139      	str	r1, [r7, #16]
 8009dba:	f003 0302 	and.w	r3, r3, #2
 8009dbe:	617b      	str	r3, [r7, #20]
 8009dc0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	d036      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 8009dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00c      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8009dd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009dda:	d113      	bne.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009de0:	3308      	adds	r3, #8
 8009de2:	4618      	mov	r0, r3
 8009de4:	f002 f850 	bl	800be88 <RCCEx_PLL2_Config>
 8009de8:	4603      	mov	r3, r0
 8009dea:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8009dee:	e00d      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009df4:	332c      	adds	r3, #44	@ 0x2c
 8009df6:	4618      	mov	r0, r3
 8009df8:	f002 f8de 	bl	800bfb8 <RCCEx_PLL3_Config>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8009e02:	e003      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e0c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10d      	bne.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 8009e14:	4b48      	ldr	r3, [pc, #288]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009e16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009e1a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8009e26:	4944      	ldr	r1, [pc, #272]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8009e2e:	e003      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e30:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009e34:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8009e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e40:	2100      	movs	r1, #0
 8009e42:	60b9      	str	r1, [r7, #8]
 8009e44:	f003 0304 	and.w	r3, r3, #4
 8009e48:	60fb      	str	r3, [r7, #12]
 8009e4a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4313      	orrs	r3, r2
 8009e52:	d024      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 8009e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d108      	bne.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e64:	332c      	adds	r3, #44	@ 0x2c
 8009e66:	4618      	mov	r0, r3
 8009e68:	f002 f8a6 	bl	800bfb8 <RCCEx_PLL3_Config>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 8009e72:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d10d      	bne.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 8009e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009e7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009e80:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8009e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009e8c:	492a      	ldr	r1, [pc, #168]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8009e94:	e003      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e96:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009e9a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8009e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	6039      	str	r1, [r7, #0]
 8009eaa:	f003 0308 	and.w	r3, r3, #8
 8009eae:	607b      	str	r3, [r7, #4]
 8009eb0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	d036      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8009eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ebe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009ec2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009ec6:	d00d      	beq.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8009ec8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009ecc:	d811      	bhi.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8009ece:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ed2:	d012      	beq.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8009ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ed8:	d80b      	bhi.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00d      	beq.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8009ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ee2:	d106      	bne.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ee4:	4b14      	ldr	r3, [pc, #80]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee8:	4a13      	ldr	r2, [pc, #76]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009eee:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8009ef0:	e004      	b.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009ef8:	e000      	b.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 8009efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009efc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d10d      	bne.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8009f04:	4b0c      	ldr	r3, [pc, #48]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009f06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009f0a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f12:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009f16:	4908      	ldr	r1, [pc, #32]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8009f1e:	e003      	b.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f20:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009f24:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8009f28:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009f32:	46bd      	mov	sp, r7
 8009f34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f38:	46020c00 	.word	0x46020c00

08009f3c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b089      	sub	sp, #36	@ 0x24
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8009f44:	4ba6      	ldr	r3, [pc, #664]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f4c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009f4e:	4ba4      	ldr	r3, [pc, #656]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f52:	f003 0303 	and.w	r3, r3, #3
 8009f56:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009f58:	4ba1      	ldr	r3, [pc, #644]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f5c:	0a1b      	lsrs	r3, r3, #8
 8009f5e:	f003 030f 	and.w	r3, r3, #15
 8009f62:	3301      	adds	r3, #1
 8009f64:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009f66:	4b9e      	ldr	r3, [pc, #632]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f6a:	091b      	lsrs	r3, r3, #4
 8009f6c:	f003 0301 	and.w	r3, r3, #1
 8009f70:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009f72:	4b9b      	ldr	r3, [pc, #620]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f76:	08db      	lsrs	r3, r3, #3
 8009f78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	fb02 f303 	mul.w	r3, r2, r3
 8009f82:	ee07 3a90 	vmov	s15, r3
 8009f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f8a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	2b03      	cmp	r3, #3
 8009f92:	d062      	beq.n	800a05a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	f200 8081 	bhi.w	800a09e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d024      	beq.n	8009fec <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d17a      	bne.n	800a09e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	ee07 3a90 	vmov	s15, r3
 8009fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fb2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fba:	4b89      	ldr	r3, [pc, #548]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fc2:	ee07 3a90 	vmov	s15, r3
 8009fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8009fce:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fe6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fea:	e08f      	b.n	800a10c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009fec:	4b7c      	ldr	r3, [pc, #496]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d005      	beq.n	800a004 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8009ff8:	4b79      	ldr	r3, [pc, #484]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	0f1b      	lsrs	r3, r3, #28
 8009ffe:	f003 030f 	and.w	r3, r3, #15
 800a002:	e006      	b.n	800a012 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800a004:	4b76      	ldr	r3, [pc, #472]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a006:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a00a:	041b      	lsls	r3, r3, #16
 800a00c:	0f1b      	lsrs	r3, r3, #28
 800a00e:	f003 030f 	and.w	r3, r3, #15
 800a012:	4a76      	ldr	r2, [pc, #472]	@ (800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a018:	ee07 3a90 	vmov	s15, r3
 800a01c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	ee07 3a90 	vmov	s15, r3
 800a026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a02a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	ee07 3a90 	vmov	s15, r3
 800a034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a038:	ed97 6a02 	vldr	s12, [r7, #8]
 800a03c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a040:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a048:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a04c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a050:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a054:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a058:	e058      	b.n	800a10c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	ee07 3a90 	vmov	s15, r3
 800a060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a064:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a06c:	4b5c      	ldr	r3, [pc, #368]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a06e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a074:	ee07 3a90 	vmov	s15, r3
 800a078:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a07c:	ed97 6a02 	vldr	s12, [r7, #8]
 800a080:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a084:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a088:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a08c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a090:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a094:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a098:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a09c:	e036      	b.n	800a10c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a09e:	4b50      	ldr	r3, [pc, #320]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d005      	beq.n	800a0b6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800a0aa:	4b4d      	ldr	r3, [pc, #308]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	0f1b      	lsrs	r3, r3, #28
 800a0b0:	f003 030f 	and.w	r3, r3, #15
 800a0b4:	e006      	b.n	800a0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800a0b6:	4b4a      	ldr	r3, [pc, #296]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a0b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a0bc:	041b      	lsls	r3, r3, #16
 800a0be:	0f1b      	lsrs	r3, r3, #28
 800a0c0:	f003 030f 	and.w	r3, r3, #15
 800a0c4:	4a49      	ldr	r2, [pc, #292]	@ (800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a0c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0ca:	ee07 3a90 	vmov	s15, r3
 800a0ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	ee07 3a90 	vmov	s15, r3
 800a0d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	ee07 3a90 	vmov	s15, r3
 800a0e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0ee:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a0f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a102:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a106:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a10a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a10c:	4b34      	ldr	r3, [pc, #208]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a10e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a114:	2b00      	cmp	r3, #0
 800a116:	d017      	beq.n	800a148 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a118:	4b31      	ldr	r3, [pc, #196]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a11a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a11c:	0a5b      	lsrs	r3, r3, #9
 800a11e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a122:	ee07 3a90 	vmov	s15, r3
 800a126:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800a12a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a12e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a132:	edd7 6a07 	vldr	s13, [r7, #28]
 800a136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a13a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a13e:	ee17 2a90 	vmov	r2, s15
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	601a      	str	r2, [r3, #0]
 800a146:	e002      	b.n	800a14e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a14e:	4b24      	ldr	r3, [pc, #144]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a156:	2b00      	cmp	r3, #0
 800a158:	d017      	beq.n	800a18a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a15a:	4b21      	ldr	r3, [pc, #132]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a15c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a15e:	0c1b      	lsrs	r3, r3, #16
 800a160:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a164:	ee07 3a90 	vmov	s15, r3
 800a168:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a16c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a170:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a174:	edd7 6a07 	vldr	s13, [r7, #28]
 800a178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a17c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a180:	ee17 2a90 	vmov	r2, s15
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	605a      	str	r2, [r3, #4]
 800a188:	e002      	b.n	800a190 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a190:	4b13      	ldr	r3, [pc, #76]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a194:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d017      	beq.n	800a1cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a19c:	4b10      	ldr	r3, [pc, #64]	@ (800a1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a19e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1a0:	0e1b      	lsrs	r3, r3, #24
 800a1a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1a6:	ee07 3a90 	vmov	s15, r3
 800a1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800a1ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1b2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a1b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1c2:	ee17 2a90 	vmov	r2, s15
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a1ca:	e002      	b.n	800a1d2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	609a      	str	r2, [r3, #8]
}
 800a1d2:	bf00      	nop
 800a1d4:	3724      	adds	r7, #36	@ 0x24
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	46020c00 	.word	0x46020c00
 800a1e4:	4b742400 	.word	0x4b742400
 800a1e8:	46000000 	.word	0x46000000
 800a1ec:	0800db78 	.word	0x0800db78

0800a1f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b089      	sub	sp, #36	@ 0x24
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a1f8:	4ba6      	ldr	r3, [pc, #664]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a1fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a200:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a202:	4ba4      	ldr	r3, [pc, #656]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a206:	f003 0303 	and.w	r3, r3, #3
 800a20a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800a20c:	4ba1      	ldr	r3, [pc, #644]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a210:	0a1b      	lsrs	r3, r3, #8
 800a212:	f003 030f 	and.w	r3, r3, #15
 800a216:	3301      	adds	r3, #1
 800a218:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800a21a:	4b9e      	ldr	r3, [pc, #632]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a21e:	091b      	lsrs	r3, r3, #4
 800a220:	f003 0301 	and.w	r3, r3, #1
 800a224:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a226:	4b9b      	ldr	r3, [pc, #620]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a22a:	08db      	lsrs	r3, r3, #3
 800a22c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	fb02 f303 	mul.w	r3, r2, r3
 800a236:	ee07 3a90 	vmov	s15, r3
 800a23a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a23e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	2b03      	cmp	r3, #3
 800a246:	d062      	beq.n	800a30e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	2b03      	cmp	r3, #3
 800a24c:	f200 8081 	bhi.w	800a352 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d024      	beq.n	800a2a0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d17a      	bne.n	800a352 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	ee07 3a90 	vmov	s15, r3
 800a262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a266:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a498 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a26a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a26e:	4b89      	ldr	r3, [pc, #548]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a276:	ee07 3a90 	vmov	s15, r3
 800a27a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a27e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a282:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a286:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a28a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a28e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a292:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a29a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a29e:	e08f      	b.n	800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800a2a0:	4b7c      	ldr	r3, [pc, #496]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d005      	beq.n	800a2b8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800a2ac:	4b79      	ldr	r3, [pc, #484]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	0f1b      	lsrs	r3, r3, #28
 800a2b2:	f003 030f 	and.w	r3, r3, #15
 800a2b6:	e006      	b.n	800a2c6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800a2b8:	4b76      	ldr	r3, [pc, #472]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a2ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a2be:	041b      	lsls	r3, r3, #16
 800a2c0:	0f1b      	lsrs	r3, r3, #28
 800a2c2:	f003 030f 	and.w	r3, r3, #15
 800a2c6:	4a76      	ldr	r2, [pc, #472]	@ (800a4a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800a2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2cc:	ee07 3a90 	vmov	s15, r3
 800a2d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	ee07 3a90 	vmov	s15, r3
 800a2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	ee07 3a90 	vmov	s15, r3
 800a2e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ec:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2f0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a2f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a300:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800a304:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a308:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a30c:	e058      	b.n	800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	ee07 3a90 	vmov	s15, r3
 800a314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a318:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a498 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a31c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a320:	4b5c      	ldr	r3, [pc, #368]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a328:	ee07 3a90 	vmov	s15, r3
 800a32c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a330:	ed97 6a02 	vldr	s12, [r7, #8]
 800a334:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a338:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a33c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a340:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a344:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a34c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a350:	e036      	b.n	800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800a352:	4b50      	ldr	r3, [pc, #320]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d005      	beq.n	800a36a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800a35e:	4b4d      	ldr	r3, [pc, #308]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	0f1b      	lsrs	r3, r3, #28
 800a364:	f003 030f 	and.w	r3, r3, #15
 800a368:	e006      	b.n	800a378 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800a36a:	4b4a      	ldr	r3, [pc, #296]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a36c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a370:	041b      	lsls	r3, r3, #16
 800a372:	0f1b      	lsrs	r3, r3, #28
 800a374:	f003 030f 	and.w	r3, r3, #15
 800a378:	4a49      	ldr	r2, [pc, #292]	@ (800a4a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800a37a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a37e:	ee07 3a90 	vmov	s15, r3
 800a382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	ee07 3a90 	vmov	s15, r3
 800a38c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	ee07 3a90 	vmov	s15, r3
 800a39a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a39e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a3a2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a3a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800a3b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3be:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800a3c0:	4b34      	ldr	r3, [pc, #208]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a3c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d017      	beq.n	800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a3cc:	4b31      	ldr	r3, [pc, #196]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a3ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3d0:	0a5b      	lsrs	r3, r3, #9
 800a3d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3d6:	ee07 3a90 	vmov	s15, r3
 800a3da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800a3de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3e2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a3e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3f2:	ee17 2a90 	vmov	r2, s15
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	601a      	str	r2, [r3, #0]
 800a3fa:	e002      	b.n	800a402 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800a402:	4b24      	ldr	r3, [pc, #144]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d017      	beq.n	800a43e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a40e:	4b21      	ldr	r3, [pc, #132]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a412:	0c1b      	lsrs	r3, r3, #16
 800a414:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a418:	ee07 3a90 	vmov	s15, r3
 800a41c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800a420:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a424:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a428:	edd7 6a07 	vldr	s13, [r7, #28]
 800a42c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a434:	ee17 2a90 	vmov	r2, s15
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	605a      	str	r2, [r3, #4]
 800a43c:	e002      	b.n	800a444 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800a444:	4b13      	ldr	r3, [pc, #76]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a448:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d017      	beq.n	800a480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a450:	4b10      	ldr	r3, [pc, #64]	@ (800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a454:	0e1b      	lsrs	r3, r3, #24
 800a456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a45a:	ee07 3a90 	vmov	s15, r3
 800a45e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800a462:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a466:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a46a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a46e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a476:	ee17 2a90 	vmov	r2, s15
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a47e:	e002      	b.n	800a486 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	609a      	str	r2, [r3, #8]
}
 800a486:	bf00      	nop
 800a488:	3724      	adds	r7, #36	@ 0x24
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	46020c00 	.word	0x46020c00
 800a498:	4b742400 	.word	0x4b742400
 800a49c:	46000000 	.word	0x46000000
 800a4a0:	0800db78 	.word	0x0800db78

0800a4a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b089      	sub	sp, #36	@ 0x24
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800a4ac:	4ba6      	ldr	r3, [pc, #664]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a4ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4b4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800a4b6:	4ba4      	ldr	r3, [pc, #656]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a4b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4ba:	f003 0303 	and.w	r3, r3, #3
 800a4be:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800a4c0:	4ba1      	ldr	r3, [pc, #644]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a4c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4c4:	0a1b      	lsrs	r3, r3, #8
 800a4c6:	f003 030f 	and.w	r3, r3, #15
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800a4ce:	4b9e      	ldr	r3, [pc, #632]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a4d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4d2:	091b      	lsrs	r3, r3, #4
 800a4d4:	f003 0301 	and.w	r3, r3, #1
 800a4d8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800a4da:	4b9b      	ldr	r3, [pc, #620]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a4dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4de:	08db      	lsrs	r3, r3, #3
 800a4e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	fb02 f303 	mul.w	r3, r2, r3
 800a4ea:	ee07 3a90 	vmov	s15, r3
 800a4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	2b03      	cmp	r3, #3
 800a4fa:	d062      	beq.n	800a5c2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	2b03      	cmp	r3, #3
 800a500:	f200 8081 	bhi.w	800a606 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	2b01      	cmp	r3, #1
 800a508:	d024      	beq.n	800a554 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d17a      	bne.n	800a606 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	ee07 3a90 	vmov	s15, r3
 800a516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a51a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a74c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a51e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a522:	4b89      	ldr	r3, [pc, #548]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a52a:	ee07 3a90 	vmov	s15, r3
 800a52e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a532:	ed97 6a02 	vldr	s12, [r7, #8]
 800a536:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a53a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a53e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a546:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a54a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a54e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800a552:	e08f      	b.n	800a674 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a554:	4b7c      	ldr	r3, [pc, #496]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d005      	beq.n	800a56c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800a560:	4b79      	ldr	r3, [pc, #484]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	0f1b      	lsrs	r3, r3, #28
 800a566:	f003 030f 	and.w	r3, r3, #15
 800a56a:	e006      	b.n	800a57a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800a56c:	4b76      	ldr	r3, [pc, #472]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a56e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a572:	041b      	lsls	r3, r3, #16
 800a574:	0f1b      	lsrs	r3, r3, #28
 800a576:	f003 030f 	and.w	r3, r3, #15
 800a57a:	4a76      	ldr	r2, [pc, #472]	@ (800a754 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a57c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a580:	ee07 3a90 	vmov	s15, r3
 800a584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	ee07 3a90 	vmov	s15, r3
 800a58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	ee07 3a90 	vmov	s15, r3
 800a59c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5a0:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5a4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a5a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a5b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5c0:	e058      	b.n	800a674 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	ee07 3a90 	vmov	s15, r3
 800a5c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5cc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a74c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a5d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5d4:	4b5c      	ldr	r3, [pc, #368]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a5d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5dc:	ee07 3a90 	vmov	s15, r3
 800a5e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a5e4:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5e8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a5ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a5f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a5f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a5fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a600:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a604:	e036      	b.n	800a674 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a606:	4b50      	ldr	r3, [pc, #320]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d005      	beq.n	800a61e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800a612:	4b4d      	ldr	r3, [pc, #308]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	0f1b      	lsrs	r3, r3, #28
 800a618:	f003 030f 	and.w	r3, r3, #15
 800a61c:	e006      	b.n	800a62c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800a61e:	4b4a      	ldr	r3, [pc, #296]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a620:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a624:	041b      	lsls	r3, r3, #16
 800a626:	0f1b      	lsrs	r3, r3, #28
 800a628:	f003 030f 	and.w	r3, r3, #15
 800a62c:	4a49      	ldr	r2, [pc, #292]	@ (800a754 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a62e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a632:	ee07 3a90 	vmov	s15, r3
 800a636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	ee07 3a90 	vmov	s15, r3
 800a640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	ee07 3a90 	vmov	s15, r3
 800a64e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a652:	ed97 6a02 	vldr	s12, [r7, #8]
 800a656:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a750 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a65a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a65e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a666:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a66a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a66e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a672:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800a674:	4b34      	ldr	r3, [pc, #208]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d017      	beq.n	800a6b0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a680:	4b31      	ldr	r3, [pc, #196]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a684:	0a5b      	lsrs	r3, r3, #9
 800a686:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a68a:	ee07 3a90 	vmov	s15, r3
 800a68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800a692:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a696:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a69a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a69e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6a6:	ee17 2a90 	vmov	r2, s15
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	601a      	str	r2, [r3, #0]
 800a6ae:	e002      	b.n	800a6b6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800a6b6:	4b24      	ldr	r3, [pc, #144]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a6b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d017      	beq.n	800a6f2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a6c2:	4b21      	ldr	r3, [pc, #132]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a6c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6c6:	0c1b      	lsrs	r3, r3, #16
 800a6c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6cc:	ee07 3a90 	vmov	s15, r3
 800a6d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800a6d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6d8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a6dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6e8:	ee17 2a90 	vmov	r2, s15
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	605a      	str	r2, [r3, #4]
 800a6f0:	e002      	b.n	800a6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800a6f8:	4b13      	ldr	r3, [pc, #76]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a6fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a700:	2b00      	cmp	r3, #0
 800a702:	d017      	beq.n	800a734 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a704:	4b10      	ldr	r3, [pc, #64]	@ (800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a708:	0e1b      	lsrs	r3, r3, #24
 800a70a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a70e:	ee07 3a90 	vmov	s15, r3
 800a712:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800a716:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a71a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a71e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a72a:	ee17 2a90 	vmov	r2, s15
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a732:	e002      	b.n	800a73a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	609a      	str	r2, [r3, #8]
}
 800a73a:	bf00      	nop
 800a73c:	3724      	adds	r7, #36	@ 0x24
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	46020c00 	.word	0x46020c00
 800a74c:	4b742400 	.word	0x4b742400
 800a750:	46000000 	.word	0x46000000
 800a754:	0800db78 	.word	0x0800db78

0800a758 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b08e      	sub	sp, #56	@ 0x38
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a762:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a766:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800a76a:	430b      	orrs	r3, r1
 800a76c:	d145      	bne.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a76e:	4ba7      	ldr	r3, [pc, #668]	@ (800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a774:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a778:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800a77a:	4ba4      	ldr	r3, [pc, #656]	@ (800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a77c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a780:	f003 0302 	and.w	r3, r3, #2
 800a784:	2b02      	cmp	r3, #2
 800a786:	d108      	bne.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800a788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a78e:	d104      	bne.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800a790:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a794:	637b      	str	r3, [r7, #52]	@ 0x34
 800a796:	f001 bb5a 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800a79a:	4b9c      	ldr	r3, [pc, #624]	@ (800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a79c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a7a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7a8:	d114      	bne.n	800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7b0:	d110      	bne.n	800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a7b2:	4b96      	ldr	r3, [pc, #600]	@ (800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a7b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a7b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7c0:	d103      	bne.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800a7c2:	23fa      	movs	r3, #250	@ 0xfa
 800a7c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a7c6:	f001 bb42 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800a7ca:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a7ce:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a7d0:	f001 bb3d 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800a7d4:	4b8d      	ldr	r3, [pc, #564]	@ (800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7e0:	d107      	bne.n	800a7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a7e8:	d103      	bne.n	800a7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800a7ea:	4b89      	ldr	r3, [pc, #548]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a7ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7ee:	f001 bb2e 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7f6:	f001 bb2a 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a7fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7fe:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a802:	430b      	orrs	r3, r1
 800a804:	d151      	bne.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a806:	4b81      	ldr	r3, [pc, #516]	@ (800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a808:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a80c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a810:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a814:	2b80      	cmp	r3, #128	@ 0x80
 800a816:	d035      	beq.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800a818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81a:	2b80      	cmp	r3, #128	@ 0x80
 800a81c:	d841      	bhi.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a820:	2b60      	cmp	r3, #96	@ 0x60
 800a822:	d02a      	beq.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800a824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a826:	2b60      	cmp	r3, #96	@ 0x60
 800a828:	d83b      	bhi.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82c:	2b40      	cmp	r3, #64	@ 0x40
 800a82e:	d009      	beq.n	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a832:	2b40      	cmp	r3, #64	@ 0x40
 800a834:	d835      	bhi.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00c      	beq.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800a83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83e:	2b20      	cmp	r3, #32
 800a840:	d012      	beq.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a842:	e02e      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a848:	4618      	mov	r0, r3
 800a84a:	f7ff fb77 	bl	8009f3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a850:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a852:	f001 bafc 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a856:	f107 0318 	add.w	r3, r7, #24
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7ff fcc8 	bl	800a1f0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a864:	f001 baf3 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a868:	f107 030c 	add.w	r3, r7, #12
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7ff fe19 	bl	800a4a4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a876:	f001 baea 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a87a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a87e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a880:	f001 bae5 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a884:	4b61      	ldr	r3, [pc, #388]	@ (800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a88c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a890:	d103      	bne.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800a892:	4b60      	ldr	r3, [pc, #384]	@ (800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a894:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a896:	f001 bada 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a89a:	2300      	movs	r3, #0
 800a89c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a89e:	f001 bad6 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a8a6:	f001 bad2 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800a8aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8ae:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a8b2:	430b      	orrs	r3, r1
 800a8b4:	d158      	bne.n	800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a8b6:	4b55      	ldr	r3, [pc, #340]	@ (800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a8b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a8bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a8c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8c8:	d03b      	beq.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800a8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8d0:	d846      	bhi.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8d8:	d02e      	beq.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800a8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8e0:	d83e      	bhi.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8e8:	d00b      	beq.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8f0:	d836      	bhi.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00d      	beq.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800a8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8fe:	d012      	beq.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800a900:	e02e      	b.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a906:	4618      	mov	r0, r3
 800a908:	f7ff fb18 	bl	8009f3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a90e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a910:	f001 ba9d 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a914:	f107 0318 	add.w	r3, r7, #24
 800a918:	4618      	mov	r0, r3
 800a91a:	f7ff fc69 	bl	800a1f0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a922:	f001 ba94 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a926:	f107 030c 	add.w	r3, r7, #12
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7ff fdba 	bl	800a4a4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a934:	f001 ba8b 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a938:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a93c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a93e:	f001 ba86 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a942:	4b32      	ldr	r3, [pc, #200]	@ (800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a94a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a94e:	d103      	bne.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800a950:	4b30      	ldr	r3, [pc, #192]	@ (800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a952:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a954:	f001 ba7b 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a958:	2300      	movs	r3, #0
 800a95a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a95c:	f001 ba77 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800a960:	2300      	movs	r3, #0
 800a962:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a964:	f001 ba73 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800a968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a96c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a970:	430b      	orrs	r3, r1
 800a972:	d126      	bne.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800a974:	4b25      	ldr	r3, [pc, #148]	@ (800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a976:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a97a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a97e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800a980:	4b22      	ldr	r3, [pc, #136]	@ (800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a98c:	d106      	bne.n	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a990:	2b00      	cmp	r3, #0
 800a992:	d103      	bne.n	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800a994:	4b1f      	ldr	r3, [pc, #124]	@ (800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a996:	637b      	str	r3, [r7, #52]	@ 0x34
 800a998:	f001 ba59 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800a99c:	4b1b      	ldr	r3, [pc, #108]	@ (800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a9a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9a8:	d107      	bne.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800a9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9b0:	d103      	bne.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800a9b2:	4b19      	ldr	r3, [pc, #100]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a9b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9b6:	f001 ba4a 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9be:	f001 ba46 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800a9c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9c6:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800a9ca:	430b      	orrs	r3, r1
 800a9cc:	d16e      	bne.n	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a9ce:	4b0f      	ldr	r3, [pc, #60]	@ (800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a9d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a9d4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a9d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9dc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a9e0:	d03d      	beq.n	800aa5e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a9e8:	d85c      	bhi.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9f0:	d014      	beq.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9f8:	d854      	bhi.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d01f      	beq.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800aa00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aa06:	d012      	beq.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800aa08:	e04c      	b.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800aa0a:	bf00      	nop
 800aa0c:	46020c00 	.word	0x46020c00
 800aa10:	0007a120 	.word	0x0007a120
 800aa14:	00f42400 	.word	0x00f42400
 800aa18:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7ff fa8b 	bl	8009f3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa2a:	f001 ba10 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa2e:	f107 0318 	add.w	r3, r7, #24
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7ff fbdc 	bl	800a1f0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa3c:	f001 ba07 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800aa40:	4ba7      	ldr	r3, [pc, #668]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aa48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa4c:	d103      	bne.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800aa4e:	4ba5      	ldr	r3, [pc, #660]	@ (800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aa50:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aa52:	f001 b9fc 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800aa56:	2300      	movs	r3, #0
 800aa58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa5a:	f001 b9f8 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800aa5e:	4ba0      	ldr	r3, [pc, #640]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f003 0320 	and.w	r3, r3, #32
 800aa66:	2b20      	cmp	r3, #32
 800aa68:	d118      	bne.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aa6a:	4b9d      	ldr	r3, [pc, #628]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d005      	beq.n	800aa82 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800aa76:	4b9a      	ldr	r3, [pc, #616]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	0e1b      	lsrs	r3, r3, #24
 800aa7c:	f003 030f 	and.w	r3, r3, #15
 800aa80:	e006      	b.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800aa82:	4b97      	ldr	r3, [pc, #604]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aa84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aa88:	041b      	lsls	r3, r3, #16
 800aa8a:	0e1b      	lsrs	r3, r3, #24
 800aa8c:	f003 030f 	and.w	r3, r3, #15
 800aa90:	4a95      	ldr	r2, [pc, #596]	@ (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa96:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aa98:	f001 b9d9 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aaa0:	f001 b9d5 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aaa8:	f001 b9d1 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800aaac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aab0:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800aab4:	430b      	orrs	r3, r1
 800aab6:	d17f      	bne.n	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800aab8:	4b89      	ldr	r3, [pc, #548]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aaba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aabe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aac2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800aac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d165      	bne.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800aaca:	4b85      	ldr	r3, [pc, #532]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aacc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aad0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800aad4:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800aad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800aadc:	d034      	beq.n	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800aade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800aae4:	d853      	bhi.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800aae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aaec:	d00b      	beq.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800aaee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aaf4:	d84b      	bhi.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d016      	beq.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800aafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ab02:	d009      	beq.n	800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800ab04:	e043      	b.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7ff fa16 	bl	8009f3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab12:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ab14:	f001 b99b 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab18:	f107 0318 	add.w	r3, r7, #24
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7ff fb67 	bl	800a1f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ab26:	f001 b992 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800ab2a:	4b6d      	ldr	r3, [pc, #436]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab36:	d103      	bne.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800ab38:	4b6a      	ldr	r3, [pc, #424]	@ (800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ab3a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800ab3c:	f001 b987 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800ab40:	2300      	movs	r3, #0
 800ab42:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ab44:	f001 b983 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ab48:	4b65      	ldr	r3, [pc, #404]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 0320 	and.w	r3, r3, #32
 800ab50:	2b20      	cmp	r3, #32
 800ab52:	d118      	bne.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ab54:	4b62      	ldr	r3, [pc, #392]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d005      	beq.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800ab60:	4b5f      	ldr	r3, [pc, #380]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	0e1b      	lsrs	r3, r3, #24
 800ab66:	f003 030f 	and.w	r3, r3, #15
 800ab6a:	e006      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800ab6c:	4b5c      	ldr	r3, [pc, #368]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ab6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ab72:	041b      	lsls	r3, r3, #16
 800ab74:	0e1b      	lsrs	r3, r3, #24
 800ab76:	f003 030f 	and.w	r3, r3, #15
 800ab7a:	4a5b      	ldr	r2, [pc, #364]	@ (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ab7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab80:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800ab82:	f001 b964 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800ab86:	2300      	movs	r3, #0
 800ab88:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ab8a:	f001 b960 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ab92:	f001 b95c 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800ab96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab9c:	d108      	bne.n	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7ff f9ca 	bl	8009f3c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800aba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800abac:	f001 b94f 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800abb0:	2300      	movs	r3, #0
 800abb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800abb4:	f001 b94b 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800abb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abbc:	1e51      	subs	r1, r2, #1
 800abbe:	430b      	orrs	r3, r1
 800abc0:	d136      	bne.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800abc2:	4b47      	ldr	r3, [pc, #284]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800abc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800abc8:	f003 0303 	and.w	r3, r3, #3
 800abcc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800abce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d104      	bne.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800abd4:	f7fe f968 	bl	8008ea8 <HAL_RCC_GetPCLK2Freq>
 800abd8:	6378      	str	r0, [r7, #52]	@ 0x34
 800abda:	f001 b938 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800abde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d104      	bne.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800abe4:	f7fe f830 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800abe8:	6378      	str	r0, [r7, #52]	@ 0x34
 800abea:	f001 b930 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800abee:	4b3c      	ldr	r3, [pc, #240]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800abf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abfa:	d106      	bne.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800abfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d103      	bne.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800ac02:	4b3a      	ldr	r3, [pc, #232]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ac04:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac06:	f001 b922 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800ac0a:	4b35      	ldr	r3, [pc, #212]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ac0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac10:	f003 0302 	and.w	r3, r3, #2
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d107      	bne.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800ac18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1a:	2b03      	cmp	r3, #3
 800ac1c:	d104      	bne.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800ac1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac22:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac24:	f001 b913 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac2c:	f001 b90f 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800ac30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac34:	1e91      	subs	r1, r2, #2
 800ac36:	430b      	orrs	r3, r1
 800ac38:	d136      	bne.n	800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800ac3a:	4b29      	ldr	r3, [pc, #164]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ac3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac40:	f003 030c 	and.w	r3, r3, #12
 800ac44:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800ac46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d104      	bne.n	800ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ac4c:	f7fe f918 	bl	8008e80 <HAL_RCC_GetPCLK1Freq>
 800ac50:	6378      	str	r0, [r7, #52]	@ 0x34
 800ac52:	f001 b8fc 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800ac56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac58:	2b04      	cmp	r3, #4
 800ac5a:	d104      	bne.n	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ac5c:	f7fd fff4 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800ac60:	6378      	str	r0, [r7, #52]	@ 0x34
 800ac62:	f001 b8f4 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800ac66:	4b1e      	ldr	r3, [pc, #120]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac72:	d106      	bne.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ac74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac76:	2b08      	cmp	r3, #8
 800ac78:	d103      	bne.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800ac7a:	4b1c      	ldr	r3, [pc, #112]	@ (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ac7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac7e:	f001 b8e6 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800ac82:	4b17      	ldr	r3, [pc, #92]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ac84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac88:	f003 0302 	and.w	r3, r3, #2
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	d107      	bne.n	800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800ac90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac92:	2b0c      	cmp	r3, #12
 800ac94:	d104      	bne.n	800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800ac96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac9c:	f001 b8d7 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800aca0:	2300      	movs	r3, #0
 800aca2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aca4:	f001 b8d3 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800aca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acac:	1f11      	subs	r1, r2, #4
 800acae:	430b      	orrs	r3, r1
 800acb0:	d13f      	bne.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800acb2:	4b0b      	ldr	r3, [pc, #44]	@ (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800acb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800acb8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800acbc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800acbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d104      	bne.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800acc4:	f7fe f8dc 	bl	8008e80 <HAL_RCC_GetPCLK1Freq>
 800acc8:	6378      	str	r0, [r7, #52]	@ 0x34
 800acca:	f001 b8c0 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800acce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd0:	2b10      	cmp	r3, #16
 800acd2:	d10d      	bne.n	800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800acd4:	f7fd ffb8 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800acd8:	6378      	str	r0, [r7, #52]	@ 0x34
 800acda:	f001 b8b8 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800acde:	bf00      	nop
 800ace0:	46020c00 	.word	0x46020c00
 800ace4:	02dc6c00 	.word	0x02dc6c00
 800ace8:	0800db78 	.word	0x0800db78
 800acec:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800acf0:	4ba8      	ldr	r3, [pc, #672]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800acf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acfc:	d106      	bne.n	800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800acfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad00:	2b20      	cmp	r3, #32
 800ad02:	d103      	bne.n	800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800ad04:	4ba4      	ldr	r3, [pc, #656]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ad06:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad08:	f001 b8a1 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800ad0c:	4ba1      	ldr	r3, [pc, #644]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ad0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad12:	f003 0302 	and.w	r3, r3, #2
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	d107      	bne.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ad1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad1c:	2b30      	cmp	r3, #48	@ 0x30
 800ad1e:	d104      	bne.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800ad20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad24:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad26:	f001 b892 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad2e:	f001 b88e 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800ad32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad36:	f1a2 0108 	sub.w	r1, r2, #8
 800ad3a:	430b      	orrs	r3, r1
 800ad3c:	d136      	bne.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800ad3e:	4b95      	ldr	r3, [pc, #596]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ad40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad44:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ad48:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d104      	bne.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ad50:	f7fe f896 	bl	8008e80 <HAL_RCC_GetPCLK1Freq>
 800ad54:	6378      	str	r0, [r7, #52]	@ 0x34
 800ad56:	f001 b87a 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad5c:	2b40      	cmp	r3, #64	@ 0x40
 800ad5e:	d104      	bne.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ad60:	f7fd ff72 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800ad64:	6378      	str	r0, [r7, #52]	@ 0x34
 800ad66:	f001 b872 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800ad6a:	4b8a      	ldr	r3, [pc, #552]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad76:	d106      	bne.n	800ad86 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800ad78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad7a:	2b80      	cmp	r3, #128	@ 0x80
 800ad7c:	d103      	bne.n	800ad86 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800ad7e:	4b86      	ldr	r3, [pc, #536]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ad80:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad82:	f001 b864 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800ad86:	4b83      	ldr	r3, [pc, #524]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ad88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad8c:	f003 0302 	and.w	r3, r3, #2
 800ad90:	2b02      	cmp	r3, #2
 800ad92:	d107      	bne.n	800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ad94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad96:	2bc0      	cmp	r3, #192	@ 0xc0
 800ad98:	d104      	bne.n	800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800ad9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ada0:	f001 b855 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800ada4:	2300      	movs	r3, #0
 800ada6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ada8:	f001 b851 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800adac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adb0:	f1a2 0110 	sub.w	r1, r2, #16
 800adb4:	430b      	orrs	r3, r1
 800adb6:	d139      	bne.n	800ae2c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800adb8:	4b76      	ldr	r3, [pc, #472]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800adba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800adbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800adc2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800adc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d104      	bne.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800adca:	f7fe f859 	bl	8008e80 <HAL_RCC_GetPCLK1Freq>
 800adce:	6378      	str	r0, [r7, #52]	@ 0x34
 800add0:	f001 b83d 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800add4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adda:	d104      	bne.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800addc:	f7fd ff34 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800ade0:	6378      	str	r0, [r7, #52]	@ 0x34
 800ade2:	f001 b834 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800ade6:	4b6b      	ldr	r3, [pc, #428]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800adee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800adf2:	d107      	bne.n	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800adf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adfa:	d103      	bne.n	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800adfc:	4b66      	ldr	r3, [pc, #408]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800adfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae00:	f001 b825 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800ae04:	4b63      	ldr	r3, [pc, #396]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ae06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae0a:	f003 0302 	and.w	r3, r3, #2
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d108      	bne.n	800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800ae12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae18:	d104      	bne.n	800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800ae1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae20:	f001 b815 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800ae24:	2300      	movs	r3, #0
 800ae26:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae28:	f001 b811 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800ae2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae30:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800ae34:	430b      	orrs	r3, r1
 800ae36:	d139      	bne.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800ae38:	4b56      	ldr	r3, [pc, #344]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ae3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ae3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ae42:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800ae44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d104      	bne.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ae4a:	f7fe f819 	bl	8008e80 <HAL_RCC_GetPCLK1Freq>
 800ae4e:	6378      	str	r0, [r7, #52]	@ 0x34
 800ae50:	f000 bffd 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800ae54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae5a:	d104      	bne.n	800ae66 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ae5c:	f7fd fef4 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800ae60:	6378      	str	r0, [r7, #52]	@ 0x34
 800ae62:	f000 bff4 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800ae66:	4b4b      	ldr	r3, [pc, #300]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae72:	d107      	bne.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800ae74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae7a:	d103      	bne.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800ae7c:	4b46      	ldr	r3, [pc, #280]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ae7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae80:	f000 bfe5 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800ae84:	4b43      	ldr	r3, [pc, #268]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ae86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae8a:	f003 0302 	and.w	r3, r3, #2
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d108      	bne.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800ae92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae98:	d104      	bne.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800ae9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800aea0:	f000 bfd5 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800aea4:	2300      	movs	r3, #0
 800aea6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aea8:	f000 bfd1 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800aeac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeb0:	f1a2 0120 	sub.w	r1, r2, #32
 800aeb4:	430b      	orrs	r3, r1
 800aeb6:	d158      	bne.n	800af6a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800aeb8:	4b36      	ldr	r3, [pc, #216]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aeba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aebe:	f003 0307 	and.w	r3, r3, #7
 800aec2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800aec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d104      	bne.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800aeca:	f7fe f801 	bl	8008ed0 <HAL_RCC_GetPCLK3Freq>
 800aece:	6378      	str	r0, [r7, #52]	@ 0x34
 800aed0:	f000 bfbd 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800aed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d104      	bne.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aeda:	f7fd feb5 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800aede:	6378      	str	r0, [r7, #52]	@ 0x34
 800aee0:	f000 bfb5 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800aee4:	4b2b      	ldr	r3, [pc, #172]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aeec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aef0:	d106      	bne.n	800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800aef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d103      	bne.n	800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800aef8:	4b27      	ldr	r3, [pc, #156]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800aefa:	637b      	str	r3, [r7, #52]	@ 0x34
 800aefc:	f000 bfa7 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800af00:	4b24      	ldr	r3, [pc, #144]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800af02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af06:	f003 0302 	and.w	r3, r3, #2
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	d107      	bne.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800af0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af10:	2b03      	cmp	r3, #3
 800af12:	d104      	bne.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800af14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af18:	637b      	str	r3, [r7, #52]	@ 0x34
 800af1a:	f000 bf98 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800af1e:	4b1d      	ldr	r3, [pc, #116]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 0320 	and.w	r3, r3, #32
 800af26:	2b20      	cmp	r3, #32
 800af28:	d11b      	bne.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800af2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af2c:	2b04      	cmp	r3, #4
 800af2e:	d118      	bne.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800af30:	4b18      	ldr	r3, [pc, #96]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d005      	beq.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800af3c:	4b15      	ldr	r3, [pc, #84]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	0e1b      	lsrs	r3, r3, #24
 800af42:	f003 030f 	and.w	r3, r3, #15
 800af46:	e006      	b.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800af48:	4b12      	ldr	r3, [pc, #72]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800af4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800af4e:	041b      	lsls	r3, r3, #16
 800af50:	0e1b      	lsrs	r3, r3, #24
 800af52:	f003 030f 	and.w	r3, r3, #15
 800af56:	4a11      	ldr	r2, [pc, #68]	@ (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800af58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af5e:	f000 bf76 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800af62:	2300      	movs	r3, #0
 800af64:	637b      	str	r3, [r7, #52]	@ 0x34
 800af66:	f000 bf72 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800af6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af6e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800af72:	430b      	orrs	r3, r1
 800af74:	d172      	bne.n	800b05c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800af76:	4b07      	ldr	r3, [pc, #28]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800af78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800af7c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800af80:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800af82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af88:	d10a      	bne.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800af8a:	f7fd fe5d 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800af8e:	6378      	str	r0, [r7, #52]	@ 0x34
 800af90:	f000 bf5d 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800af94:	46020c00 	.word	0x46020c00
 800af98:	00f42400 	.word	0x00f42400
 800af9c:	0800db78 	.word	0x0800db78
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800afa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afa6:	d108      	bne.n	800afba <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afa8:	f107 0318 	add.w	r3, r7, #24
 800afac:	4618      	mov	r0, r3
 800afae:	f7ff f91f 	bl	800a1f0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800afb2:	6a3b      	ldr	r3, [r7, #32]
 800afb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800afb6:	f000 bf4a 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800afba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d104      	bne.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800afc0:	f7fd ff44 	bl	8008e4c <HAL_RCC_GetHCLKFreq>
 800afc4:	6378      	str	r0, [r7, #52]	@ 0x34
 800afc6:	f000 bf42 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800afca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afcc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800afd0:	d122      	bne.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800afd2:	4bb0      	ldr	r3, [pc, #704]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 0320 	and.w	r3, r3, #32
 800afda:	2b20      	cmp	r3, #32
 800afdc:	d118      	bne.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800afde:	4bad      	ldr	r3, [pc, #692]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d005      	beq.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800afea:	4baa      	ldr	r3, [pc, #680]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	0e1b      	lsrs	r3, r3, #24
 800aff0:	f003 030f 	and.w	r3, r3, #15
 800aff4:	e006      	b.n	800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800aff6:	4ba7      	ldr	r3, [pc, #668]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aff8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800affc:	041b      	lsls	r3, r3, #16
 800affe:	0e1b      	lsrs	r3, r3, #24
 800b000:	f003 030f 	and.w	r3, r3, #15
 800b004:	4aa4      	ldr	r2, [pc, #656]	@ (800b298 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b00a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b00c:	f000 bf1f 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b010:	2300      	movs	r3, #0
 800b012:	637b      	str	r3, [r7, #52]	@ 0x34
 800b014:	f000 bf1b 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800b018:	4b9e      	ldr	r3, [pc, #632]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b020:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b024:	d107      	bne.n	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b028:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b02c:	d103      	bne.n	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800b02e:	4b9b      	ldr	r3, [pc, #620]	@ (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b030:	637b      	str	r3, [r7, #52]	@ 0x34
 800b032:	f000 bf0c 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800b036:	4b97      	ldr	r3, [pc, #604]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b03e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b042:	d107      	bne.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800b044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b046:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b04a:	d103      	bne.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800b04c:	4b93      	ldr	r3, [pc, #588]	@ (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b04e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b050:	f000 befd 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800b054:	2300      	movs	r3, #0
 800b056:	637b      	str	r3, [r7, #52]	@ 0x34
 800b058:	f000 bef9 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800b05c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b060:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b064:	430b      	orrs	r3, r1
 800b066:	d158      	bne.n	800b11a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800b068:	4b8a      	ldr	r3, [pc, #552]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b06a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b06e:	f003 0307 	and.w	r3, r3, #7
 800b072:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b076:	2b04      	cmp	r3, #4
 800b078:	d84b      	bhi.n	800b112 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800b07a:	a201      	add	r2, pc, #4	@ (adr r2, 800b080 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800b07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b080:	0800b0b9 	.word	0x0800b0b9
 800b084:	0800b095 	.word	0x0800b095
 800b088:	0800b0a7 	.word	0x0800b0a7
 800b08c:	0800b0c3 	.word	0x0800b0c3
 800b090:	0800b0cd 	.word	0x0800b0cd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b094:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b098:	4618      	mov	r0, r3
 800b09a:	f7fe ff4f 	bl	8009f3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0a2:	f000 bed4 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0a6:	f107 030c 	add.w	r3, r7, #12
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7ff f9fa 	bl	800a4a4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0b4:	f000 becb 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b0b8:	f7fd fec8 	bl	8008e4c <HAL_RCC_GetHCLKFreq>
 800b0bc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b0be:	f000 bec6 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b0c2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b0c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0c8:	f000 bec1 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b0cc:	4b71      	ldr	r3, [pc, #452]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f003 0320 	and.w	r3, r3, #32
 800b0d4:	2b20      	cmp	r3, #32
 800b0d6:	d118      	bne.n	800b10a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b0d8:	4b6e      	ldr	r3, [pc, #440]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d005      	beq.n	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800b0e4:	4b6b      	ldr	r3, [pc, #428]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	0e1b      	lsrs	r3, r3, #24
 800b0ea:	f003 030f 	and.w	r3, r3, #15
 800b0ee:	e006      	b.n	800b0fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800b0f0:	4b68      	ldr	r3, [pc, #416]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b0f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b0f6:	041b      	lsls	r3, r3, #16
 800b0f8:	0e1b      	lsrs	r3, r3, #24
 800b0fa:	f003 030f 	and.w	r3, r3, #15
 800b0fe:	4a66      	ldr	r2, [pc, #408]	@ (800b298 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b104:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b106:	f000 bea2 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b10a:	2300      	movs	r3, #0
 800b10c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b10e:	f000 be9e 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b112:	2300      	movs	r3, #0
 800b114:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b116:	f000 be9a 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800b11a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b11e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800b122:	430b      	orrs	r3, r1
 800b124:	d167      	bne.n	800b1f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800b126:	4b5b      	ldr	r3, [pc, #364]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b128:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b12c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b130:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b134:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b138:	d036      	beq.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800b13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b140:	d855      	bhi.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b144:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b148:	d029      	beq.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800b14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b150:	d84d      	bhi.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b154:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b158:	d013      	beq.n	800b182 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800b15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b160:	d845      	bhi.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b164:	2b00      	cmp	r3, #0
 800b166:	d015      	beq.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800b168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b16e:	d13e      	bne.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b170:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b174:	4618      	mov	r0, r3
 800b176:	f7fe fee1 	bl	8009f3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b17e:	f000 be66 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b182:	f107 030c 	add.w	r3, r7, #12
 800b186:	4618      	mov	r0, r3
 800b188:	f7ff f98c 	bl	800a4a4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b190:	f000 be5d 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b194:	f7fd fe5a 	bl	8008e4c <HAL_RCC_GetHCLKFreq>
 800b198:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b19a:	f000 be58 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b19e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b1a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1a4:	f000 be53 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b1a8:	4b3a      	ldr	r3, [pc, #232]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 0320 	and.w	r3, r3, #32
 800b1b0:	2b20      	cmp	r3, #32
 800b1b2:	d118      	bne.n	800b1e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b1b4:	4b37      	ldr	r3, [pc, #220]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d005      	beq.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800b1c0:	4b34      	ldr	r3, [pc, #208]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	0e1b      	lsrs	r3, r3, #24
 800b1c6:	f003 030f 	and.w	r3, r3, #15
 800b1ca:	e006      	b.n	800b1da <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b1cc:	4b31      	ldr	r3, [pc, #196]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b1ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b1d2:	041b      	lsls	r3, r3, #16
 800b1d4:	0e1b      	lsrs	r3, r3, #24
 800b1d6:	f003 030f 	and.w	r3, r3, #15
 800b1da:	4a2f      	ldr	r2, [pc, #188]	@ (800b298 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b1e2:	f000 be34 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1ea:	f000 be30 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1f2:	f000 be2c 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800b1f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1fa:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800b1fe:	430b      	orrs	r3, r1
 800b200:	d152      	bne.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b202:	4b24      	ldr	r3, [pc, #144]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b208:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b20c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800b20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b210:	2b00      	cmp	r3, #0
 800b212:	d104      	bne.n	800b21e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b214:	f7fd fe34 	bl	8008e80 <HAL_RCC_GetPCLK1Freq>
 800b218:	6378      	str	r0, [r7, #52]	@ 0x34
 800b21a:	f000 be18 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800b21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b224:	d104      	bne.n	800b230 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b226:	f7fd fd0f 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800b22a:	6378      	str	r0, [r7, #52]	@ 0x34
 800b22c:	f000 be0f 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800b230:	4b18      	ldr	r3, [pc, #96]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b23c:	d107      	bne.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800b23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b244:	d103      	bne.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800b246:	4b15      	ldr	r3, [pc, #84]	@ (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b248:	637b      	str	r3, [r7, #52]	@ 0x34
 800b24a:	f000 be00 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800b24e:	4b11      	ldr	r3, [pc, #68]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f003 0320 	and.w	r3, r3, #32
 800b256:	2b20      	cmp	r3, #32
 800b258:	d122      	bne.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800b25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b260:	d11e      	bne.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b262:	4b0c      	ldr	r3, [pc, #48]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b264:	689b      	ldr	r3, [r3, #8]
 800b266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d005      	beq.n	800b27a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800b26e:	4b09      	ldr	r3, [pc, #36]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	0e1b      	lsrs	r3, r3, #24
 800b274:	f003 030f 	and.w	r3, r3, #15
 800b278:	e006      	b.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800b27a:	4b06      	ldr	r3, [pc, #24]	@ (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b27c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b280:	041b      	lsls	r3, r3, #16
 800b282:	0e1b      	lsrs	r3, r3, #24
 800b284:	f003 030f 	and.w	r3, r3, #15
 800b288:	4a03      	ldr	r2, [pc, #12]	@ (800b298 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b28a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b28e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b290:	f000 bddd 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b294:	46020c00 	.word	0x46020c00
 800b298:	0800db78 	.word	0x0800db78
 800b29c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2a4:	f000 bdd3 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800b2a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2ac:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800b2b0:	430b      	orrs	r3, r1
 800b2b2:	d14c      	bne.n	800b34e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800b2b4:	4ba8      	ldr	r3, [pc, #672]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b2b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b2ba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b2be:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800b2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d104      	bne.n	800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b2c6:	f7fd fddb 	bl	8008e80 <HAL_RCC_GetPCLK1Freq>
 800b2ca:	6378      	str	r0, [r7, #52]	@ 0x34
 800b2cc:	f000 bdbf 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800b2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2d6:	d104      	bne.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b2d8:	f7fd fcb6 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800b2dc:	6378      	str	r0, [r7, #52]	@ 0x34
 800b2de:	f000 bdb6 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800b2e2:	4b9d      	ldr	r3, [pc, #628]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2ee:	d107      	bne.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800b2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2f6:	d103      	bne.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800b2f8:	4b98      	ldr	r3, [pc, #608]	@ (800b55c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b2fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2fc:	f000 bda7 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800b300:	4b95      	ldr	r3, [pc, #596]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f003 0320 	and.w	r3, r3, #32
 800b308:	2b20      	cmp	r3, #32
 800b30a:	d11c      	bne.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800b30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b30e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b312:	d118      	bne.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b314:	4b90      	ldr	r3, [pc, #576]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d005      	beq.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800b320:	4b8d      	ldr	r3, [pc, #564]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	0e1b      	lsrs	r3, r3, #24
 800b326:	f003 030f 	and.w	r3, r3, #15
 800b32a:	e006      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800b32c:	4b8a      	ldr	r3, [pc, #552]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b32e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b332:	041b      	lsls	r3, r3, #16
 800b334:	0e1b      	lsrs	r3, r3, #24
 800b336:	f003 030f 	and.w	r3, r3, #15
 800b33a:	4a89      	ldr	r2, [pc, #548]	@ (800b560 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b33c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b340:	637b      	str	r3, [r7, #52]	@ 0x34
 800b342:	f000 bd84 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800b346:	2300      	movs	r3, #0
 800b348:	637b      	str	r3, [r7, #52]	@ 0x34
 800b34a:	f000 bd80 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800b34e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b352:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b356:	430b      	orrs	r3, r1
 800b358:	d158      	bne.n	800b40c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b35a:	4b7f      	ldr	r3, [pc, #508]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b35c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b360:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b364:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b368:	2bc0      	cmp	r3, #192	@ 0xc0
 800b36a:	d028      	beq.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800b36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b370:	d848      	bhi.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800b372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b374:	2b80      	cmp	r3, #128	@ 0x80
 800b376:	d00e      	beq.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800b378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37a:	2b80      	cmp	r3, #128	@ 0x80
 800b37c:	d842      	bhi.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800b37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b380:	2b00      	cmp	r3, #0
 800b382:	d003      	beq.n	800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800b384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b386:	2b40      	cmp	r3, #64	@ 0x40
 800b388:	d014      	beq.n	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800b38a:	e03b      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800b38c:	f7fd fda0 	bl	8008ed0 <HAL_RCC_GetPCLK3Freq>
 800b390:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b392:	f000 bd5c 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b396:	4b70      	ldr	r3, [pc, #448]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b39e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3a2:	d103      	bne.n	800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800b3a4:	4b6d      	ldr	r3, [pc, #436]	@ (800b55c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b3a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b3a8:	f000 bd51 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b3b0:	f000 bd4d 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800b3b4:	f7fd fc48 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800b3b8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b3ba:	f000 bd48 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b3be:	4b66      	ldr	r3, [pc, #408]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 0320 	and.w	r3, r3, #32
 800b3c6:	2b20      	cmp	r3, #32
 800b3c8:	d118      	bne.n	800b3fc <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b3ca:	4b63      	ldr	r3, [pc, #396]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d005      	beq.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800b3d6:	4b60      	ldr	r3, [pc, #384]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	0e1b      	lsrs	r3, r3, #24
 800b3dc:	f003 030f 	and.w	r3, r3, #15
 800b3e0:	e006      	b.n	800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800b3e2:	4b5d      	ldr	r3, [pc, #372]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b3e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b3e8:	041b      	lsls	r3, r3, #16
 800b3ea:	0e1b      	lsrs	r3, r3, #24
 800b3ec:	f003 030f 	and.w	r3, r3, #15
 800b3f0:	4a5b      	ldr	r2, [pc, #364]	@ (800b560 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b3f8:	f000 bd29 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b400:	f000 bd25 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800b404:	2300      	movs	r3, #0
 800b406:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b408:	f000 bd21 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800b40c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b410:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800b414:	430b      	orrs	r3, r1
 800b416:	d14c      	bne.n	800b4b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b418:	4b4f      	ldr	r3, [pc, #316]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b41a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b41e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b422:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800b424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b426:	2b00      	cmp	r3, #0
 800b428:	d104      	bne.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b42a:	f7fd fd29 	bl	8008e80 <HAL_RCC_GetPCLK1Freq>
 800b42e:	6378      	str	r0, [r7, #52]	@ 0x34
 800b430:	f000 bd0d 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800b434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b436:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b43a:	d104      	bne.n	800b446 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b43c:	f7fd fc04 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800b440:	6378      	str	r0, [r7, #52]	@ 0x34
 800b442:	f000 bd04 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800b446:	4b44      	ldr	r3, [pc, #272]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b44e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b452:	d107      	bne.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800b454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b456:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b45a:	d103      	bne.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800b45c:	4b3f      	ldr	r3, [pc, #252]	@ (800b55c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b45e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b460:	f000 bcf5 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800b464:	4b3c      	ldr	r3, [pc, #240]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f003 0320 	and.w	r3, r3, #32
 800b46c:	2b20      	cmp	r3, #32
 800b46e:	d11c      	bne.n	800b4aa <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800b470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b472:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b476:	d118      	bne.n	800b4aa <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b478:	4b37      	ldr	r3, [pc, #220]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b480:	2b00      	cmp	r3, #0
 800b482:	d005      	beq.n	800b490 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800b484:	4b34      	ldr	r3, [pc, #208]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	0e1b      	lsrs	r3, r3, #24
 800b48a:	f003 030f 	and.w	r3, r3, #15
 800b48e:	e006      	b.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800b490:	4b31      	ldr	r3, [pc, #196]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b492:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b496:	041b      	lsls	r3, r3, #16
 800b498:	0e1b      	lsrs	r3, r3, #24
 800b49a:	f003 030f 	and.w	r3, r3, #15
 800b49e:	4a30      	ldr	r2, [pc, #192]	@ (800b560 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b4a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4a6:	f000 bcd2 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4ae:	f000 bcce 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800b4b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4b6:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800b4ba:	430b      	orrs	r3, r1
 800b4bc:	d152      	bne.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800b4be:	4b26      	ldr	r3, [pc, #152]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b4c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b4c4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800b4c8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d104      	bne.n	800b4da <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b4d0:	f7fd fcd6 	bl	8008e80 <HAL_RCC_GetPCLK1Freq>
 800b4d4:	6378      	str	r0, [r7, #52]	@ 0x34
 800b4d6:	f000 bcba 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800b4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b4e0:	d104      	bne.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b4e2:	f7fd fbb1 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800b4e6:	6378      	str	r0, [r7, #52]	@ 0x34
 800b4e8:	f000 bcb1 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800b4ec:	4b1a      	ldr	r3, [pc, #104]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4f8:	d107      	bne.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800b4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b500:	d103      	bne.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800b502:	4b16      	ldr	r3, [pc, #88]	@ (800b55c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b504:	637b      	str	r3, [r7, #52]	@ 0x34
 800b506:	f000 bca2 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800b50a:	4b13      	ldr	r3, [pc, #76]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 0320 	and.w	r3, r3, #32
 800b512:	2b20      	cmp	r3, #32
 800b514:	d11c      	bne.n	800b550 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800b516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b518:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b51c:	d118      	bne.n	800b550 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b51e:	4b0e      	ldr	r3, [pc, #56]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b526:	2b00      	cmp	r3, #0
 800b528:	d005      	beq.n	800b536 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800b52a:	4b0b      	ldr	r3, [pc, #44]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	0e1b      	lsrs	r3, r3, #24
 800b530:	f003 030f 	and.w	r3, r3, #15
 800b534:	e006      	b.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800b536:	4b08      	ldr	r3, [pc, #32]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b538:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b53c:	041b      	lsls	r3, r3, #16
 800b53e:	0e1b      	lsrs	r3, r3, #24
 800b540:	f003 030f 	and.w	r3, r3, #15
 800b544:	4a06      	ldr	r2, [pc, #24]	@ (800b560 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b54a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b54c:	f000 bc7f 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800b550:	2300      	movs	r3, #0
 800b552:	637b      	str	r3, [r7, #52]	@ 0x34
 800b554:	f000 bc7b 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b558:	46020c00 	.word	0x46020c00
 800b55c:	00f42400 	.word	0x00f42400
 800b560:	0800db78 	.word	0x0800db78
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800b564:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b568:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800b56c:	430b      	orrs	r3, r1
 800b56e:	d14c      	bne.n	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800b570:	4ba6      	ldr	r3, [pc, #664]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b572:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b576:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800b57a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800b57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d104      	bne.n	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b582:	f7fd fc7d 	bl	8008e80 <HAL_RCC_GetPCLK1Freq>
 800b586:	6378      	str	r0, [r7, #52]	@ 0x34
 800b588:	f000 bc61 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800b58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b58e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b592:	d104      	bne.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b594:	f7fd fb58 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800b598:	6378      	str	r0, [r7, #52]	@ 0x34
 800b59a:	f000 bc58 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800b59e:	4b9b      	ldr	r3, [pc, #620]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b5a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5aa:	d107      	bne.n	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800b5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b5b2:	d103      	bne.n	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800b5b4:	4b96      	ldr	r3, [pc, #600]	@ (800b810 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b5b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5b8:	f000 bc49 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800b5bc:	4b93      	ldr	r3, [pc, #588]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f003 0320 	and.w	r3, r3, #32
 800b5c4:	2b20      	cmp	r3, #32
 800b5c6:	d11c      	bne.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800b5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b5ce:	d118      	bne.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b5d0:	4b8e      	ldr	r3, [pc, #568]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d005      	beq.n	800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800b5dc:	4b8b      	ldr	r3, [pc, #556]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	0e1b      	lsrs	r3, r3, #24
 800b5e2:	f003 030f 	and.w	r3, r3, #15
 800b5e6:	e006      	b.n	800b5f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800b5e8:	4b88      	ldr	r3, [pc, #544]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b5ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b5ee:	041b      	lsls	r3, r3, #16
 800b5f0:	0e1b      	lsrs	r3, r3, #24
 800b5f2:	f003 030f 	and.w	r3, r3, #15
 800b5f6:	4a87      	ldr	r2, [pc, #540]	@ (800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b5f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5fe:	f000 bc26 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800b602:	2300      	movs	r3, #0
 800b604:	637b      	str	r3, [r7, #52]	@ 0x34
 800b606:	f000 bc22 	b.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800b60a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b60e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b612:	430b      	orrs	r3, r1
 800b614:	d164      	bne.n	800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800b616:	4b7d      	ldr	r3, [pc, #500]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b61c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b620:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800b622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b624:	2b00      	cmp	r3, #0
 800b626:	d120      	bne.n	800b66a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b628:	4b78      	ldr	r3, [pc, #480]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f003 0320 	and.w	r3, r3, #32
 800b630:	2b20      	cmp	r3, #32
 800b632:	d117      	bne.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b634:	4b75      	ldr	r3, [pc, #468]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d005      	beq.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800b640:	4b72      	ldr	r3, [pc, #456]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	0e1b      	lsrs	r3, r3, #24
 800b646:	f003 030f 	and.w	r3, r3, #15
 800b64a:	e006      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800b64c:	4b6f      	ldr	r3, [pc, #444]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b64e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b652:	041b      	lsls	r3, r3, #16
 800b654:	0e1b      	lsrs	r3, r3, #24
 800b656:	f003 030f 	and.w	r3, r3, #15
 800b65a:	4a6e      	ldr	r2, [pc, #440]	@ (800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b65c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b660:	637b      	str	r3, [r7, #52]	@ 0x34
 800b662:	e3f4      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b664:	2300      	movs	r3, #0
 800b666:	637b      	str	r3, [r7, #52]	@ 0x34
 800b668:	e3f1      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800b66a:	4b68      	ldr	r3, [pc, #416]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b66c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b678:	d112      	bne.n	800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800b67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b67c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b680:	d10e      	bne.n	800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b682:	4b62      	ldr	r3, [pc, #392]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b68c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b690:	d102      	bne.n	800b698 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800b692:	23fa      	movs	r3, #250	@ 0xfa
 800b694:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b696:	e3da      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b698:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b69c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b69e:	e3d6      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800b6a0:	4b5a      	ldr	r3, [pc, #360]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b6a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6ac:	d106      	bne.n	800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6b4:	d102      	bne.n	800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800b6b6:	4b56      	ldr	r3, [pc, #344]	@ (800b810 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b6b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6ba:	e3c8      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800b6bc:	4b53      	ldr	r3, [pc, #332]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b6be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6c2:	f003 0302 	and.w	r3, r3, #2
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	d107      	bne.n	800b6da <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800b6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b6d0:	d103      	bne.n	800b6da <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800b6d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b6d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6d8:	e3b9      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6de:	e3b6      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800b6e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6e4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b6e8:	430b      	orrs	r3, r1
 800b6ea:	d164      	bne.n	800b7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b6ec:	4b47      	ldr	r3, [pc, #284]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b6ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b6f2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b6f6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800b6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d120      	bne.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b6fe:	4b43      	ldr	r3, [pc, #268]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f003 0320 	and.w	r3, r3, #32
 800b706:	2b20      	cmp	r3, #32
 800b708:	d117      	bne.n	800b73a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b70a:	4b40      	ldr	r3, [pc, #256]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b712:	2b00      	cmp	r3, #0
 800b714:	d005      	beq.n	800b722 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800b716:	4b3d      	ldr	r3, [pc, #244]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	0e1b      	lsrs	r3, r3, #24
 800b71c:	f003 030f 	and.w	r3, r3, #15
 800b720:	e006      	b.n	800b730 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800b722:	4b3a      	ldr	r3, [pc, #232]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b724:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b728:	041b      	lsls	r3, r3, #16
 800b72a:	0e1b      	lsrs	r3, r3, #24
 800b72c:	f003 030f 	and.w	r3, r3, #15
 800b730:	4a38      	ldr	r2, [pc, #224]	@ (800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b736:	637b      	str	r3, [r7, #52]	@ 0x34
 800b738:	e389      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b73a:	2300      	movs	r3, #0
 800b73c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b73e:	e386      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800b740:	4b32      	ldr	r3, [pc, #200]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b746:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b74a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b74e:	d112      	bne.n	800b776 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800b750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b756:	d10e      	bne.n	800b776 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b758:	4b2c      	ldr	r3, [pc, #176]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b75a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b75e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b762:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b766:	d102      	bne.n	800b76e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800b768:	23fa      	movs	r3, #250	@ 0xfa
 800b76a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b76c:	e36f      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b76e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b772:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b774:	e36b      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800b776:	4b25      	ldr	r3, [pc, #148]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b77e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b782:	d106      	bne.n	800b792 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800b784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b786:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b78a:	d102      	bne.n	800b792 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800b78c:	4b20      	ldr	r3, [pc, #128]	@ (800b810 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b78e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b790:	e35d      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800b792:	4b1e      	ldr	r3, [pc, #120]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b794:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b798:	f003 0302 	and.w	r3, r3, #2
 800b79c:	2b02      	cmp	r3, #2
 800b79e:	d107      	bne.n	800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b7a6:	d103      	bne.n	800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800b7a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b7ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7ae:	e34e      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7b4:	e34b      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800b7b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7ba:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b7be:	430b      	orrs	r3, r1
 800b7c0:	d14e      	bne.n	800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b7c2:	4b12      	ldr	r3, [pc, #72]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b7c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7c8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800b7cc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800b7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d103      	bne.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b7d4:	f7fd fb54 	bl	8008e80 <HAL_RCC_GetPCLK1Freq>
 800b7d8:	6378      	str	r0, [r7, #52]	@ 0x34
 800b7da:	e338      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800b7dc:	4b0b      	ldr	r3, [pc, #44]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b7de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b7e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7ea:	d119      	bne.n	800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800b7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b7f2:	d115      	bne.n	800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b7f4:	4b05      	ldr	r3, [pc, #20]	@ (800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b7f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b7fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b7fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b802:	d109      	bne.n	800b818 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800b804:	23fa      	movs	r3, #250	@ 0xfa
 800b806:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b808:	e321      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b80a:	bf00      	nop
 800b80c:	46020c00 	.word	0x46020c00
 800b810:	00f42400 	.word	0x00f42400
 800b814:	0800db78 	.word	0x0800db78
      }
      else
      {
        frequency = LSI_VALUE;
 800b818:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b81c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b81e:	e316      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800b820:	4ba8      	ldr	r3, [pc, #672]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b82c:	d106      	bne.n	800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800b82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b830:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b834:	d102      	bne.n	800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800b836:	4ba4      	ldr	r3, [pc, #656]	@ (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b838:	637b      	str	r3, [r7, #52]	@ 0x34
 800b83a:	e308      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800b83c:	4ba1      	ldr	r3, [pc, #644]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b83e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b842:	f003 0302 	and.w	r3, r3, #2
 800b846:	2b02      	cmp	r3, #2
 800b848:	d107      	bne.n	800b85a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800b84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b84c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b850:	d103      	bne.n	800b85a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800b852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b856:	637b      	str	r3, [r7, #52]	@ 0x34
 800b858:	e2f9      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800b85a:	2300      	movs	r3, #0
 800b85c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b85e:	e2f6      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800b860:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b864:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800b868:	430b      	orrs	r3, r1
 800b86a:	d12d      	bne.n	800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800b86c:	4b95      	ldr	r3, [pc, #596]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b86e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b872:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800b876:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800b878:	4b92      	ldr	r3, [pc, #584]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b880:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b884:	d105      	bne.n	800b892 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800b886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d102      	bne.n	800b892 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800b88c:	4b8e      	ldr	r3, [pc, #568]	@ (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b88e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b890:	e2dd      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800b892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b894:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b898:	d107      	bne.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b89a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7fe fb4c 	bl	8009f3c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8a8:	e2d1      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b8b0:	d107      	bne.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8b2:	f107 0318 	add.w	r3, r7, #24
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fe fc9a 	bl	800a1f0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8c0:	e2c5      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8c6:	e2c2      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800b8c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8cc:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800b8d0:	430b      	orrs	r3, r1
 800b8d2:	d156      	bne.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b8d4:	4b7b      	ldr	r3, [pc, #492]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b8d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b8da:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b8de:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b8e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b8e6:	d028      	beq.n	800b93a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b8ee:	d845      	bhi.n	800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800b8f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b8f6:	d013      	beq.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800b8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b8fe:	d83d      	bhi.n	800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800b900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b902:	2b00      	cmp	r3, #0
 800b904:	d004      	beq.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800b906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b908:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b90c:	d004      	beq.n	800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800b90e:	e035      	b.n	800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800b910:	f7fd faca 	bl	8008ea8 <HAL_RCC_GetPCLK2Freq>
 800b914:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b916:	e29a      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b918:	f7fd f996 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800b91c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b91e:	e296      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b920:	4b68      	ldr	r3, [pc, #416]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b92c:	d102      	bne.n	800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800b92e:	4b66      	ldr	r3, [pc, #408]	@ (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b930:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b932:	e28c      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b934:	2300      	movs	r3, #0
 800b936:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b938:	e289      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b93a:	4b62      	ldr	r3, [pc, #392]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f003 0320 	and.w	r3, r3, #32
 800b942:	2b20      	cmp	r3, #32
 800b944:	d117      	bne.n	800b976 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b946:	4b5f      	ldr	r3, [pc, #380]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d005      	beq.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800b952:	4b5c      	ldr	r3, [pc, #368]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	0e1b      	lsrs	r3, r3, #24
 800b958:	f003 030f 	and.w	r3, r3, #15
 800b95c:	e006      	b.n	800b96c <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800b95e:	4b59      	ldr	r3, [pc, #356]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b960:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b964:	041b      	lsls	r3, r3, #16
 800b966:	0e1b      	lsrs	r3, r3, #24
 800b968:	f003 030f 	and.w	r3, r3, #15
 800b96c:	4a57      	ldr	r2, [pc, #348]	@ (800bacc <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800b96e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b972:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b974:	e26b      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b976:	2300      	movs	r3, #0
 800b978:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b97a:	e268      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b97c:	2300      	movs	r3, #0
 800b97e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b980:	e265      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800b982:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b986:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800b98a:	430b      	orrs	r3, r1
 800b98c:	d156      	bne.n	800ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b98e:	4b4d      	ldr	r3, [pc, #308]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b994:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b998:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b99c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b9a0:	d028      	beq.n	800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b9a8:	d845      	bhi.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9b0:	d013      	beq.n	800b9da <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9b8:	d83d      	bhi.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d004      	beq.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800b9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9c6:	d004      	beq.n	800b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800b9c8:	e035      	b.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800b9ca:	f7fd fa59 	bl	8008e80 <HAL_RCC_GetPCLK1Freq>
 800b9ce:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b9d0:	e23d      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b9d2:	f7fd f939 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800b9d6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b9d8:	e239      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b9da:	4b3a      	ldr	r3, [pc, #232]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b9e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9e6:	d102      	bne.n	800b9ee <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800b9e8:	4b37      	ldr	r3, [pc, #220]	@ (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b9ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b9ec:	e22f      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b9f2:	e22c      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b9f4:	4b33      	ldr	r3, [pc, #204]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f003 0320 	and.w	r3, r3, #32
 800b9fc:	2b20      	cmp	r3, #32
 800b9fe:	d117      	bne.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ba00:	4b30      	ldr	r3, [pc, #192]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d005      	beq.n	800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800ba0c:	4b2d      	ldr	r3, [pc, #180]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	0e1b      	lsrs	r3, r3, #24
 800ba12:	f003 030f 	and.w	r3, r3, #15
 800ba16:	e006      	b.n	800ba26 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800ba18:	4b2a      	ldr	r3, [pc, #168]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ba1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ba1e:	041b      	lsls	r3, r3, #16
 800ba20:	0e1b      	lsrs	r3, r3, #24
 800ba22:	f003 030f 	and.w	r3, r3, #15
 800ba26:	4a29      	ldr	r2, [pc, #164]	@ (800bacc <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800ba28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba2c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ba2e:	e20e      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ba30:	2300      	movs	r3, #0
 800ba32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba34:	e20b      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ba36:	2300      	movs	r3, #0
 800ba38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba3a:	e208      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800ba3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba40:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800ba44:	430b      	orrs	r3, r1
 800ba46:	d17c      	bne.n	800bb42 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800ba48:	4b1e      	ldr	r3, [pc, #120]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ba4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ba4e:	f003 0318 	and.w	r3, r3, #24
 800ba52:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800ba54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba56:	2b18      	cmp	r3, #24
 800ba58:	d870      	bhi.n	800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800ba5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba60 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800ba5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba60:	0800bad1 	.word	0x0800bad1
 800ba64:	0800bb3d 	.word	0x0800bb3d
 800ba68:	0800bb3d 	.word	0x0800bb3d
 800ba6c:	0800bb3d 	.word	0x0800bb3d
 800ba70:	0800bb3d 	.word	0x0800bb3d
 800ba74:	0800bb3d 	.word	0x0800bb3d
 800ba78:	0800bb3d 	.word	0x0800bb3d
 800ba7c:	0800bb3d 	.word	0x0800bb3d
 800ba80:	0800bad9 	.word	0x0800bad9
 800ba84:	0800bb3d 	.word	0x0800bb3d
 800ba88:	0800bb3d 	.word	0x0800bb3d
 800ba8c:	0800bb3d 	.word	0x0800bb3d
 800ba90:	0800bb3d 	.word	0x0800bb3d
 800ba94:	0800bb3d 	.word	0x0800bb3d
 800ba98:	0800bb3d 	.word	0x0800bb3d
 800ba9c:	0800bb3d 	.word	0x0800bb3d
 800baa0:	0800bae1 	.word	0x0800bae1
 800baa4:	0800bb3d 	.word	0x0800bb3d
 800baa8:	0800bb3d 	.word	0x0800bb3d
 800baac:	0800bb3d 	.word	0x0800bb3d
 800bab0:	0800bb3d 	.word	0x0800bb3d
 800bab4:	0800bb3d 	.word	0x0800bb3d
 800bab8:	0800bb3d 	.word	0x0800bb3d
 800babc:	0800bb3d 	.word	0x0800bb3d
 800bac0:	0800bafb 	.word	0x0800bafb
 800bac4:	46020c00 	.word	0x46020c00
 800bac8:	00f42400 	.word	0x00f42400
 800bacc:	0800db78 	.word	0x0800db78
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800bad0:	f7fd f9fe 	bl	8008ed0 <HAL_RCC_GetPCLK3Freq>
 800bad4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bad6:	e1ba      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800bad8:	f7fd f8b6 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800badc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bade:	e1b6      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bae0:	4b9f      	ldr	r3, [pc, #636]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800baec:	d102      	bne.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800baee:	4b9d      	ldr	r3, [pc, #628]	@ (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800baf0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800baf2:	e1ac      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800baf4:	2300      	movs	r3, #0
 800baf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800baf8:	e1a9      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bafa:	4b99      	ldr	r3, [pc, #612]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f003 0320 	and.w	r3, r3, #32
 800bb02:	2b20      	cmp	r3, #32
 800bb04:	d117      	bne.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bb06:	4b96      	ldr	r3, [pc, #600]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d005      	beq.n	800bb1e <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800bb12:	4b93      	ldr	r3, [pc, #588]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	0e1b      	lsrs	r3, r3, #24
 800bb18:	f003 030f 	and.w	r3, r3, #15
 800bb1c:	e006      	b.n	800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800bb1e:	4b90      	ldr	r3, [pc, #576]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bb20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bb24:	041b      	lsls	r3, r3, #16
 800bb26:	0e1b      	lsrs	r3, r3, #24
 800bb28:	f003 030f 	and.w	r3, r3, #15
 800bb2c:	4a8e      	ldr	r2, [pc, #568]	@ (800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800bb2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb32:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bb34:	e18b      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bb36:	2300      	movs	r3, #0
 800bb38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb3a:	e188      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb40:	e185      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800bb42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb46:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800bb4a:	430b      	orrs	r3, r1
 800bb4c:	d155      	bne.n	800bbfa <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800bb4e:	4b84      	ldr	r3, [pc, #528]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bb50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bb54:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800bb58:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800bb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bb60:	d013      	beq.n	800bb8a <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800bb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bb68:	d844      	bhi.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800bb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb70:	d013      	beq.n	800bb9a <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800bb72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb78:	d83c      	bhi.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800bb7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d014      	beq.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800bb80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb86:	d014      	beq.n	800bbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800bb88:	e034      	b.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb8a:	f107 0318 	add.w	r3, r7, #24
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7fe fb2e 	bl	800a1f0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb98:	e159      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fe f9cc 	bl	8009f3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800bba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bba8:	e151      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800bbaa:	f7fd f84d 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800bbae:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bbb0:	e14d      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bbb2:	4b6b      	ldr	r3, [pc, #428]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f003 0320 	and.w	r3, r3, #32
 800bbba:	2b20      	cmp	r3, #32
 800bbbc:	d117      	bne.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bbbe:	4b68      	ldr	r3, [pc, #416]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d005      	beq.n	800bbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800bbca:	4b65      	ldr	r3, [pc, #404]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	0e1b      	lsrs	r3, r3, #24
 800bbd0:	f003 030f 	and.w	r3, r3, #15
 800bbd4:	e006      	b.n	800bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800bbd6:	4b62      	ldr	r3, [pc, #392]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bbd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bbdc:	041b      	lsls	r3, r3, #16
 800bbde:	0e1b      	lsrs	r3, r3, #24
 800bbe0:	f003 030f 	and.w	r3, r3, #15
 800bbe4:	4a60      	ldr	r2, [pc, #384]	@ (800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800bbe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bbec:	e12f      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bbf2:	e12c      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bbf8:	e129      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800bbfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbfe:	1e59      	subs	r1, r3, #1
 800bc00:	ea52 0301 	orrs.w	r3, r2, r1
 800bc04:	d13c      	bne.n	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800bc06:	4b56      	ldr	r3, [pc, #344]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bc08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc0c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800bc10:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800bc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc14:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bc18:	d027      	beq.n	800bc6a <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800bc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc1c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bc20:	d82b      	bhi.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800bc22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bc28:	d017      	beq.n	800bc5a <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bc30:	d823      	bhi.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800bc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d004      	beq.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800bc38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc3e:	d004      	beq.n	800bc4a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800bc40:	e01b      	b.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800bc42:	f7fd f801 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 800bc46:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bc48:	e101      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fe f974 	bl	8009f3c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bc58:	e0f9      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc5a:	f107 0318 	add.w	r3, r7, #24
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7fe fac6 	bl	800a1f0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bc68:	e0f1      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc6a:	f107 030c 	add.w	r3, r7, #12
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fe fc18 	bl	800a4a4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bc78:	e0e9      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bc7e:	e0e6      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800bc80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc84:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800bc88:	430b      	orrs	r3, r1
 800bc8a:	d131      	bne.n	800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800bc8c:	4b34      	ldr	r3, [pc, #208]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bc8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bc92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc96:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800bc98:	4b31      	ldr	r3, [pc, #196]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bc9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bc9e:	f003 0302 	and.w	r3, r3, #2
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d106      	bne.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800bca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d103      	bne.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800bcac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bcb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcb2:	e0cc      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800bcb4:	4b2a      	ldr	r3, [pc, #168]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bcb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bcba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bcbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bcc2:	d112      	bne.n	800bcea <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800bcc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bcca:	d10e      	bne.n	800bcea <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bccc:	4b24      	ldr	r3, [pc, #144]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bcce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bcd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bcd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bcda:	d102      	bne.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800bcdc:	23fa      	movs	r3, #250	@ 0xfa
 800bcde:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bce0:	e0b5      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800bce2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bce6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bce8:	e0b1      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800bcea:	2300      	movs	r3, #0
 800bcec:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcee:	e0ae      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800bcf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcf4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800bcf8:	430b      	orrs	r3, r1
 800bcfa:	d13b      	bne.n	800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800bcfc:	4b18      	ldr	r3, [pc, #96]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bcfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bd02:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800bd06:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800bd08:	4b15      	ldr	r3, [pc, #84]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd14:	d105      	bne.n	800bd22 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800bd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d102      	bne.n	800bd22 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800bd1c:	4b13      	ldr	r3, [pc, #76]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800bd1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd20:	e095      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800bd22:	4b0f      	ldr	r3, [pc, #60]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd2e:	d106      	bne.n	800bd3e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800bd30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd36:	d102      	bne.n	800bd3e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800bd38:	4b0d      	ldr	r3, [pc, #52]	@ (800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800bd3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd3c:	e087      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800bd3e:	4b08      	ldr	r3, [pc, #32]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd4a:	d106      	bne.n	800bd5a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd52:	d102      	bne.n	800bd5a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800bd54:	4b03      	ldr	r3, [pc, #12]	@ (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800bd56:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd58:	e079      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd5e:	e076      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bd60:	46020c00 	.word	0x46020c00
 800bd64:	00f42400 	.word	0x00f42400
 800bd68:	0800db78 	.word	0x0800db78
 800bd6c:	02dc6c00 	.word	0x02dc6c00
 800bd70:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800bd74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd78:	1e99      	subs	r1, r3, #2
 800bd7a:	ea52 0301 	orrs.w	r3, r2, r1
 800bd7e:	d120      	bne.n	800bdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800bd80:	4b35      	ldr	r3, [pc, #212]	@ (800be58 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800bd82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bd86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bd8a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800bd8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d004      	beq.n	800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800bd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bd98:	d008      	beq.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800bd9a:	e00f      	b.n	800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd9c:	f107 030c 	add.w	r3, r7, #12
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7fe fb7f 	bl	800a4a4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bdaa:	e050      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdac:	f107 0318 	add.w	r3, r7, #24
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7fe fa1d 	bl	800a1f0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800bdb6:	6a3b      	ldr	r3, [r7, #32]
 800bdb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bdba:	e048      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bdc0:	e045      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800bdc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdc6:	f1a3 0108 	sub.w	r1, r3, #8
 800bdca:	ea52 0301 	orrs.w	r3, r2, r1
 800bdce:	d13c      	bne.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800bdd0:	4b21      	ldr	r3, [pc, #132]	@ (800be58 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800bdd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bdd6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bdda:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800bddc:	4b1e      	ldr	r3, [pc, #120]	@ (800be58 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bde4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bde8:	d105      	bne.n	800bdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800bdea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d102      	bne.n	800bdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800bdf0:	4b1a      	ldr	r3, [pc, #104]	@ (800be5c <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800bdf2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdf4:	e02b      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800bdf6:	4b18      	ldr	r3, [pc, #96]	@ (800be58 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be02:	d106      	bne.n	800be12 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800be04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be0a:	d102      	bne.n	800be12 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800be0c:	4b14      	ldr	r3, [pc, #80]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800be0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800be10:	e01d      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800be12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be18:	d107      	bne.n	800be2a <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fe f88c 	bl	8009f3c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800be24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be26:	637b      	str	r3, [r7, #52]	@ 0x34
 800be28:	e011      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800be2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be2c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800be30:	d108      	bne.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be36:	4618      	mov	r0, r3
 800be38:	f7fe f880 	bl	8009f3c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800be3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be3e:	085b      	lsrs	r3, r3, #1
 800be40:	637b      	str	r3, [r7, #52]	@ 0x34
 800be42:	e004      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800be44:	2300      	movs	r3, #0
 800be46:	637b      	str	r3, [r7, #52]	@ 0x34
 800be48:	e001      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800be4a:	2300      	movs	r3, #0
 800be4c:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800be4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800be50:	4618      	mov	r0, r3
 800be52:	3738      	adds	r7, #56	@ 0x38
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	46020c00 	.word	0x46020c00
 800be5c:	00f42400 	.word	0x00f42400
 800be60:	007a1200 	.word	0x007a1200

0800be64 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800be64:	b480      	push	{r7}
 800be66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800be68:	4b06      	ldr	r3, [pc, #24]	@ (800be84 <HAL_RCCEx_EnableLSECSS+0x20>)
 800be6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be6e:	4a05      	ldr	r2, [pc, #20]	@ (800be84 <HAL_RCCEx_EnableLSECSS+0x20>)
 800be70:	f043 0320 	orr.w	r3, r3, #32
 800be74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 800be78:	bf00      	nop
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr
 800be82:	bf00      	nop
 800be84:	46020c00 	.word	0x46020c00

0800be88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800be90:	4b47      	ldr	r3, [pc, #284]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4a46      	ldr	r2, [pc, #280]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800be96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800be9a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800be9c:	f7f7 fa7e 	bl	800339c <HAL_GetTick>
 800bea0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bea2:	e008      	b.n	800beb6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bea4:	f7f7 fa7a 	bl	800339c <HAL_GetTick>
 800bea8:	4602      	mov	r2, r0
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	1ad3      	subs	r3, r2, r3
 800beae:	2b02      	cmp	r3, #2
 800beb0:	d901      	bls.n	800beb6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800beb2:	2303      	movs	r3, #3
 800beb4:	e077      	b.n	800bfa6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800beb6:	4b3e      	ldr	r3, [pc, #248]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d1f0      	bne.n	800bea4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800bec2:	4b3b      	ldr	r3, [pc, #236]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800bec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bec6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800beca:	f023 0303 	bic.w	r3, r3, #3
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	6811      	ldr	r1, [r2, #0]
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	6852      	ldr	r2, [r2, #4]
 800bed6:	3a01      	subs	r2, #1
 800bed8:	0212      	lsls	r2, r2, #8
 800beda:	430a      	orrs	r2, r1
 800bedc:	4934      	ldr	r1, [pc, #208]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800bede:	4313      	orrs	r3, r2
 800bee0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800bee2:	4b33      	ldr	r3, [pc, #204]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800bee4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bee6:	4b33      	ldr	r3, [pc, #204]	@ (800bfb4 <RCCEx_PLL2_Config+0x12c>)
 800bee8:	4013      	ands	r3, r2
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	6892      	ldr	r2, [r2, #8]
 800beee:	3a01      	subs	r2, #1
 800bef0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	68d2      	ldr	r2, [r2, #12]
 800bef8:	3a01      	subs	r2, #1
 800befa:	0252      	lsls	r2, r2, #9
 800befc:	b292      	uxth	r2, r2
 800befe:	4311      	orrs	r1, r2
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	6912      	ldr	r2, [r2, #16]
 800bf04:	3a01      	subs	r2, #1
 800bf06:	0412      	lsls	r2, r2, #16
 800bf08:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800bf0c:	4311      	orrs	r1, r2
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	6952      	ldr	r2, [r2, #20]
 800bf12:	3a01      	subs	r2, #1
 800bf14:	0612      	lsls	r2, r2, #24
 800bf16:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800bf1a:	430a      	orrs	r2, r1
 800bf1c:	4924      	ldr	r1, [pc, #144]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800bf22:	4b23      	ldr	r3, [pc, #140]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800bf24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf26:	f023 020c 	bic.w	r2, r3, #12
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	699b      	ldr	r3, [r3, #24]
 800bf2e:	4920      	ldr	r1, [pc, #128]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800bf30:	4313      	orrs	r3, r2
 800bf32:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800bf34:	4b1e      	ldr	r3, [pc, #120]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800bf36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6a1b      	ldr	r3, [r3, #32]
 800bf3c:	491c      	ldr	r1, [pc, #112]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800bf42:	4b1b      	ldr	r3, [pc, #108]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800bf44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf46:	4a1a      	ldr	r2, [pc, #104]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800bf48:	f023 0310 	bic.w	r3, r3, #16
 800bf4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bf4e:	4b18      	ldr	r3, [pc, #96]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800bf50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bf56:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	69d2      	ldr	r2, [r2, #28]
 800bf5e:	00d2      	lsls	r2, r2, #3
 800bf60:	4913      	ldr	r1, [pc, #76]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800bf62:	4313      	orrs	r3, r2
 800bf64:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800bf66:	4b12      	ldr	r3, [pc, #72]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800bf68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf6a:	4a11      	ldr	r2, [pc, #68]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800bf6c:	f043 0310 	orr.w	r3, r3, #16
 800bf70:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800bf72:	4b0f      	ldr	r3, [pc, #60]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a0e      	ldr	r2, [pc, #56]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800bf78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bf7c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bf7e:	f7f7 fa0d 	bl	800339c <HAL_GetTick>
 800bf82:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf84:	e008      	b.n	800bf98 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bf86:	f7f7 fa09 	bl	800339c <HAL_GetTick>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	1ad3      	subs	r3, r2, r3
 800bf90:	2b02      	cmp	r3, #2
 800bf92:	d901      	bls.n	800bf98 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800bf94:	2303      	movs	r3, #3
 800bf96:	e006      	b.n	800bfa6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf98:	4b05      	ldr	r3, [pc, #20]	@ (800bfb0 <RCCEx_PLL2_Config+0x128>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d0f0      	beq.n	800bf86 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800bfa4:	2300      	movs	r3, #0

}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	46020c00 	.word	0x46020c00
 800bfb4:	80800000 	.word	0x80800000

0800bfb8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800bfc0:	4b47      	ldr	r3, [pc, #284]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4a46      	ldr	r2, [pc, #280]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800bfc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bfca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bfcc:	f7f7 f9e6 	bl	800339c <HAL_GetTick>
 800bfd0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bfd2:	e008      	b.n	800bfe6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bfd4:	f7f7 f9e2 	bl	800339c <HAL_GetTick>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	1ad3      	subs	r3, r2, r3
 800bfde:	2b02      	cmp	r3, #2
 800bfe0:	d901      	bls.n	800bfe6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800bfe2:	2303      	movs	r3, #3
 800bfe4:	e077      	b.n	800c0d6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bfe6:	4b3e      	ldr	r3, [pc, #248]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1f0      	bne.n	800bfd4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800bff2:	4b3b      	ldr	r3, [pc, #236]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800bff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bff6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800bffa:	f023 0303 	bic.w	r3, r3, #3
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	6811      	ldr	r1, [r2, #0]
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	6852      	ldr	r2, [r2, #4]
 800c006:	3a01      	subs	r2, #1
 800c008:	0212      	lsls	r2, r2, #8
 800c00a:	430a      	orrs	r2, r1
 800c00c:	4934      	ldr	r1, [pc, #208]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800c00e:	4313      	orrs	r3, r2
 800c010:	630b      	str	r3, [r1, #48]	@ 0x30
 800c012:	4b33      	ldr	r3, [pc, #204]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800c014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c016:	4b33      	ldr	r3, [pc, #204]	@ (800c0e4 <RCCEx_PLL3_Config+0x12c>)
 800c018:	4013      	ands	r3, r2
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	6892      	ldr	r2, [r2, #8]
 800c01e:	3a01      	subs	r2, #1
 800c020:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	68d2      	ldr	r2, [r2, #12]
 800c028:	3a01      	subs	r2, #1
 800c02a:	0252      	lsls	r2, r2, #9
 800c02c:	b292      	uxth	r2, r2
 800c02e:	4311      	orrs	r1, r2
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	6912      	ldr	r2, [r2, #16]
 800c034:	3a01      	subs	r2, #1
 800c036:	0412      	lsls	r2, r2, #16
 800c038:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c03c:	4311      	orrs	r1, r2
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	6952      	ldr	r2, [r2, #20]
 800c042:	3a01      	subs	r2, #1
 800c044:	0612      	lsls	r2, r2, #24
 800c046:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c04a:	430a      	orrs	r2, r1
 800c04c:	4924      	ldr	r1, [pc, #144]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800c04e:	4313      	orrs	r3, r2
 800c050:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800c052:	4b23      	ldr	r3, [pc, #140]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800c054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c056:	f023 020c 	bic.w	r2, r3, #12
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	699b      	ldr	r3, [r3, #24]
 800c05e:	4920      	ldr	r1, [pc, #128]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800c060:	4313      	orrs	r3, r2
 800c062:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c064:	4b1e      	ldr	r3, [pc, #120]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800c066:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6a1b      	ldr	r3, [r3, #32]
 800c06c:	491c      	ldr	r1, [pc, #112]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800c06e:	4313      	orrs	r3, r2
 800c070:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800c072:	4b1b      	ldr	r3, [pc, #108]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800c074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c076:	4a1a      	ldr	r2, [pc, #104]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800c078:	f023 0310 	bic.w	r3, r3, #16
 800c07c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c07e:	4b18      	ldr	r3, [pc, #96]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800c080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c082:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c086:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	69d2      	ldr	r2, [r2, #28]
 800c08e:	00d2      	lsls	r2, r2, #3
 800c090:	4913      	ldr	r1, [pc, #76]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800c092:	4313      	orrs	r3, r2
 800c094:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800c096:	4b12      	ldr	r3, [pc, #72]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800c098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c09a:	4a11      	ldr	r2, [pc, #68]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800c09c:	f043 0310 	orr.w	r3, r3, #16
 800c0a0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800c0a2:	4b0f      	ldr	r3, [pc, #60]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a0e      	ldr	r2, [pc, #56]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800c0a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c0ac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c0ae:	f7f7 f975 	bl	800339c <HAL_GetTick>
 800c0b2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c0b4:	e008      	b.n	800c0c8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c0b6:	f7f7 f971 	bl	800339c <HAL_GetTick>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	2b02      	cmp	r3, #2
 800c0c2:	d901      	bls.n	800c0c8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c0c4:	2303      	movs	r3, #3
 800c0c6:	e006      	b.n	800c0d6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c0c8:	4b05      	ldr	r3, [pc, #20]	@ (800c0e0 <RCCEx_PLL3_Config+0x128>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d0f0      	beq.n	800c0b6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	46020c00 	.word	0x46020c00
 800c0e4:	80800000 	.word	0x80800000

0800c0e8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d071      	beq.n	800c1de <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c100:	b2db      	uxtb	r3, r3
 800c102:	2b00      	cmp	r3, #0
 800c104:	d106      	bne.n	800c114 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7f6 fec4 	bl	8002e9c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2202      	movs	r2, #2
 800c118:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c11c:	4b32      	ldr	r3, [pc, #200]	@ (800c1e8 <HAL_RTC_Init+0x100>)
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	f003 0310 	and.w	r3, r3, #16
 800c124:	2b10      	cmp	r3, #16
 800c126:	d051      	beq.n	800c1cc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c128:	4b2f      	ldr	r3, [pc, #188]	@ (800c1e8 <HAL_RTC_Init+0x100>)
 800c12a:	22ca      	movs	r2, #202	@ 0xca
 800c12c:	625a      	str	r2, [r3, #36]	@ 0x24
 800c12e:	4b2e      	ldr	r3, [pc, #184]	@ (800c1e8 <HAL_RTC_Init+0x100>)
 800c130:	2253      	movs	r2, #83	@ 0x53
 800c132:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 f9ad 	bl	800c494 <RTC_EnterInitMode>
 800c13a:	4603      	mov	r3, r0
 800c13c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c13e:	7bfb      	ldrb	r3, [r7, #15]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d13f      	bne.n	800c1c4 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800c144:	4b28      	ldr	r3, [pc, #160]	@ (800c1e8 <HAL_RTC_Init+0x100>)
 800c146:	699b      	ldr	r3, [r3, #24]
 800c148:	4a27      	ldr	r2, [pc, #156]	@ (800c1e8 <HAL_RTC_Init+0x100>)
 800c14a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800c14e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c152:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800c154:	4b24      	ldr	r3, [pc, #144]	@ (800c1e8 <HAL_RTC_Init+0x100>)
 800c156:	699a      	ldr	r2, [r3, #24]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6859      	ldr	r1, [r3, #4]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	691b      	ldr	r3, [r3, #16]
 800c160:	4319      	orrs	r1, r3
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	699b      	ldr	r3, [r3, #24]
 800c166:	430b      	orrs	r3, r1
 800c168:	491f      	ldr	r1, [pc, #124]	@ (800c1e8 <HAL_RTC_Init+0x100>)
 800c16a:	4313      	orrs	r3, r2
 800c16c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	68da      	ldr	r2, [r3, #12]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	041b      	lsls	r3, r3, #16
 800c178:	491b      	ldr	r1, [pc, #108]	@ (800c1e8 <HAL_RTC_Init+0x100>)
 800c17a:	4313      	orrs	r3, r2
 800c17c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800c17e:	4b1a      	ldr	r3, [pc, #104]	@ (800c1e8 <HAL_RTC_Init+0x100>)
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c18e:	430b      	orrs	r3, r1
 800c190:	4915      	ldr	r1, [pc, #84]	@ (800c1e8 <HAL_RTC_Init+0x100>)
 800c192:	4313      	orrs	r3, r2
 800c194:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 f9b8 	bl	800c50c <RTC_ExitInitMode>
 800c19c:	4603      	mov	r3, r0
 800c19e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800c1a0:	7bfb      	ldrb	r3, [r7, #15]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d10e      	bne.n	800c1c4 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800c1a6:	4b10      	ldr	r3, [pc, #64]	@ (800c1e8 <HAL_RTC_Init+0x100>)
 800c1a8:	699b      	ldr	r3, [r3, #24]
 800c1aa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6a19      	ldr	r1, [r3, #32]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	69db      	ldr	r3, [r3, #28]
 800c1b6:	4319      	orrs	r1, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	695b      	ldr	r3, [r3, #20]
 800c1bc:	430b      	orrs	r3, r1
 800c1be:	490a      	ldr	r1, [pc, #40]	@ (800c1e8 <HAL_RTC_Init+0x100>)
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1c4:	4b08      	ldr	r3, [pc, #32]	@ (800c1e8 <HAL_RTC_Init+0x100>)
 800c1c6:	22ff      	movs	r2, #255	@ 0xff
 800c1c8:	625a      	str	r2, [r3, #36]	@ 0x24
 800c1ca:	e001      	b.n	800c1d0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d103      	bne.n	800c1de <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2201      	movs	r2, #1
 800c1da:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800c1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3710      	adds	r7, #16
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	46007800 	.word	0x46007800

0800c1ec <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c1ec:	b590      	push	{r4, r7, lr}
 800c1ee:	b087      	sub	sp, #28
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d101      	bne.n	800c206 <HAL_RTC_SetTime+0x1a>
 800c202:	2302      	movs	r3, #2
 800c204:	e088      	b.n	800c318 <HAL_RTC_SetTime+0x12c>
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2201      	movs	r2, #1
 800c20a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2202      	movs	r2, #2
 800c212:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c216:	4b42      	ldr	r3, [pc, #264]	@ (800c320 <HAL_RTC_SetTime+0x134>)
 800c218:	22ca      	movs	r2, #202	@ 0xca
 800c21a:	625a      	str	r2, [r3, #36]	@ 0x24
 800c21c:	4b40      	ldr	r3, [pc, #256]	@ (800c320 <HAL_RTC_SetTime+0x134>)
 800c21e:	2253      	movs	r2, #83	@ 0x53
 800c220:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f000 f936 	bl	800c494 <RTC_EnterInitMode>
 800c228:	4603      	mov	r3, r0
 800c22a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c22c:	7cfb      	ldrb	r3, [r7, #19]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d163      	bne.n	800c2fa <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800c232:	4b3b      	ldr	r3, [pc, #236]	@ (800c320 <HAL_RTC_SetTime+0x134>)
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c23a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c23e:	d057      	beq.n	800c2f0 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d125      	bne.n	800c292 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c246:	4b36      	ldr	r3, [pc, #216]	@ (800c320 <HAL_RTC_SetTime+0x134>)
 800c248:	699b      	ldr	r3, [r3, #24]
 800c24a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d102      	bne.n	800c258 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	2200      	movs	r2, #0
 800c256:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	4618      	mov	r0, r3
 800c25e:	f000 f993 	bl	800c588 <RTC_ByteToBcd2>
 800c262:	4603      	mov	r3, r0
 800c264:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	785b      	ldrb	r3, [r3, #1]
 800c26a:	4618      	mov	r0, r3
 800c26c:	f000 f98c 	bl	800c588 <RTC_ByteToBcd2>
 800c270:	4603      	mov	r3, r0
 800c272:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c274:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	789b      	ldrb	r3, [r3, #2]
 800c27a:	4618      	mov	r0, r3
 800c27c:	f000 f984 	bl	800c588 <RTC_ByteToBcd2>
 800c280:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c282:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	78db      	ldrb	r3, [r3, #3]
 800c28a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c28c:	4313      	orrs	r3, r2
 800c28e:	617b      	str	r3, [r7, #20]
 800c290:	e017      	b.n	800c2c2 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c292:	4b23      	ldr	r3, [pc, #140]	@ (800c320 <HAL_RTC_SetTime+0x134>)
 800c294:	699b      	ldr	r3, [r3, #24]
 800c296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d102      	bne.n	800c2a4 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	785b      	ldrb	r3, [r3, #1]
 800c2ae:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c2b0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c2b6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	78db      	ldrb	r3, [r3, #3]
 800c2bc:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800c2c2:	4a17      	ldr	r2, [pc, #92]	@ (800c320 <HAL_RTC_SetTime+0x134>)
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800c2ca:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800c2ce:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800c2d0:	4b13      	ldr	r3, [pc, #76]	@ (800c320 <HAL_RTC_SetTime+0x134>)
 800c2d2:	699b      	ldr	r3, [r3, #24]
 800c2d4:	4a12      	ldr	r2, [pc, #72]	@ (800c320 <HAL_RTC_SetTime+0x134>)
 800c2d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c2da:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800c2dc:	4b10      	ldr	r3, [pc, #64]	@ (800c320 <HAL_RTC_SetTime+0x134>)
 800c2de:	699a      	ldr	r2, [r3, #24]
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	68d9      	ldr	r1, [r3, #12]
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	691b      	ldr	r3, [r3, #16]
 800c2e8:	430b      	orrs	r3, r1
 800c2ea:	490d      	ldr	r1, [pc, #52]	@ (800c320 <HAL_RTC_SetTime+0x134>)
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c2f0:	68f8      	ldr	r0, [r7, #12]
 800c2f2:	f000 f90b 	bl	800c50c <RTC_ExitInitMode>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c2fa:	4b09      	ldr	r3, [pc, #36]	@ (800c320 <HAL_RTC_SetTime+0x134>)
 800c2fc:	22ff      	movs	r2, #255	@ 0xff
 800c2fe:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800c300:	7cfb      	ldrb	r3, [r7, #19]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d103      	bne.n	800c30e <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2201      	movs	r2, #1
 800c30a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2200      	movs	r2, #0
 800c312:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800c316:	7cfb      	ldrb	r3, [r7, #19]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	371c      	adds	r7, #28
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd90      	pop	{r4, r7, pc}
 800c320:	46007800 	.word	0x46007800

0800c324 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c324:	b590      	push	{r4, r7, lr}
 800c326:	b087      	sub	sp, #28
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c336:	2b01      	cmp	r3, #1
 800c338:	d101      	bne.n	800c33e <HAL_RTC_SetDate+0x1a>
 800c33a:	2302      	movs	r3, #2
 800c33c:	e071      	b.n	800c422 <HAL_RTC_SetDate+0xfe>
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2201      	movs	r2, #1
 800c342:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2202      	movs	r2, #2
 800c34a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d10e      	bne.n	800c372 <HAL_RTC_SetDate+0x4e>
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	785b      	ldrb	r3, [r3, #1]
 800c358:	f003 0310 	and.w	r3, r3, #16
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d008      	beq.n	800c372 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	785b      	ldrb	r3, [r3, #1]
 800c364:	f023 0310 	bic.w	r3, r3, #16
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	330a      	adds	r3, #10
 800c36c:	b2da      	uxtb	r2, r3
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d11c      	bne.n	800c3b2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	78db      	ldrb	r3, [r3, #3]
 800c37c:	4618      	mov	r0, r3
 800c37e:	f000 f903 	bl	800c588 <RTC_ByteToBcd2>
 800c382:	4603      	mov	r3, r0
 800c384:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	785b      	ldrb	r3, [r3, #1]
 800c38a:	4618      	mov	r0, r3
 800c38c:	f000 f8fc 	bl	800c588 <RTC_ByteToBcd2>
 800c390:	4603      	mov	r3, r0
 800c392:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c394:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	789b      	ldrb	r3, [r3, #2]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f000 f8f4 	bl	800c588 <RTC_ByteToBcd2>
 800c3a0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c3a2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	617b      	str	r3, [r7, #20]
 800c3b0:	e00e      	b.n	800c3d0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	78db      	ldrb	r3, [r3, #3]
 800c3b6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	785b      	ldrb	r3, [r3, #1]
 800c3bc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c3be:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800c3c0:	68ba      	ldr	r2, [r7, #8]
 800c3c2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c3c4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c3d0:	4b16      	ldr	r3, [pc, #88]	@ (800c42c <HAL_RTC_SetDate+0x108>)
 800c3d2:	22ca      	movs	r2, #202	@ 0xca
 800c3d4:	625a      	str	r2, [r3, #36]	@ 0x24
 800c3d6:	4b15      	ldr	r3, [pc, #84]	@ (800c42c <HAL_RTC_SetDate+0x108>)
 800c3d8:	2253      	movs	r2, #83	@ 0x53
 800c3da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	f000 f859 	bl	800c494 <RTC_EnterInitMode>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c3e6:	7cfb      	ldrb	r3, [r7, #19]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10b      	bne.n	800c404 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800c3ec:	4a0f      	ldr	r2, [pc, #60]	@ (800c42c <HAL_RTC_SetDate+0x108>)
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c3f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c3f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f000 f886 	bl	800c50c <RTC_ExitInitMode>
 800c400:	4603      	mov	r3, r0
 800c402:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c404:	4b09      	ldr	r3, [pc, #36]	@ (800c42c <HAL_RTC_SetDate+0x108>)
 800c406:	22ff      	movs	r2, #255	@ 0xff
 800c408:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800c40a:	7cfb      	ldrb	r3, [r7, #19]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d103      	bne.n	800c418 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2201      	movs	r2, #1
 800c414:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2200      	movs	r2, #0
 800c41c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800c420:	7cfb      	ldrb	r3, [r7, #19]
}
 800c422:	4618      	mov	r0, r3
 800c424:	371c      	adds	r7, #28
 800c426:	46bd      	mov	sp, r7
 800c428:	bd90      	pop	{r4, r7, pc}
 800c42a:	bf00      	nop
 800c42c:	46007800 	.word	0x46007800

0800c430 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800c438:	4b15      	ldr	r3, [pc, #84]	@ (800c490 <HAL_RTC_WaitForSynchro+0x60>)
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	4a14      	ldr	r2, [pc, #80]	@ (800c490 <HAL_RTC_WaitForSynchro+0x60>)
 800c43e:	f023 0320 	bic.w	r3, r3, #32
 800c442:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800c444:	f7f6 ffaa 	bl	800339c <HAL_GetTick>
 800c448:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c44a:	e013      	b.n	800c474 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c44c:	f7f6 ffa6 	bl	800339c <HAL_GetTick>
 800c450:	4602      	mov	r2, r0
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	1ad3      	subs	r3, r2, r3
 800c456:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c45a:	d90b      	bls.n	800c474 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c45c:	4b0c      	ldr	r3, [pc, #48]	@ (800c490 <HAL_RTC_WaitForSynchro+0x60>)
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	f003 0320 	and.w	r3, r3, #32
 800c464:	2b00      	cmp	r3, #0
 800c466:	d10c      	bne.n	800c482 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2203      	movs	r2, #3
 800c46c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800c470:	2303      	movs	r3, #3
 800c472:	e008      	b.n	800c486 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c474:	4b06      	ldr	r3, [pc, #24]	@ (800c490 <HAL_RTC_WaitForSynchro+0x60>)
 800c476:	68db      	ldr	r3, [r3, #12]
 800c478:	f003 0320 	and.w	r3, r3, #32
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d0e5      	beq.n	800c44c <HAL_RTC_WaitForSynchro+0x1c>
 800c480:	e000      	b.n	800c484 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800c482:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	46007800 	.word	0x46007800

0800c494 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c49c:	2300      	movs	r3, #0
 800c49e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c4a0:	4b19      	ldr	r3, [pc, #100]	@ (800c508 <RTC_EnterInitMode+0x74>)
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d128      	bne.n	800c4fe <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c4ac:	4b16      	ldr	r3, [pc, #88]	@ (800c508 <RTC_EnterInitMode+0x74>)
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	4a15      	ldr	r2, [pc, #84]	@ (800c508 <RTC_EnterInitMode+0x74>)
 800c4b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4b6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800c4b8:	f7f6 ff70 	bl	800339c <HAL_GetTick>
 800c4bc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c4be:	e013      	b.n	800c4e8 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c4c0:	f7f6 ff6c 	bl	800339c <HAL_GetTick>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c4ce:	d90b      	bls.n	800c4e8 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c4d0:	4b0d      	ldr	r3, [pc, #52]	@ (800c508 <RTC_EnterInitMode+0x74>)
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10f      	bne.n	800c4fc <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800c4dc:	2303      	movs	r3, #3
 800c4de:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2203      	movs	r2, #3
 800c4e4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c4e8:	4b07      	ldr	r3, [pc, #28]	@ (800c508 <RTC_EnterInitMode+0x74>)
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d104      	bne.n	800c4fe <RTC_EnterInitMode+0x6a>
 800c4f4:	7bfb      	ldrb	r3, [r7, #15]
 800c4f6:	2b03      	cmp	r3, #3
 800c4f8:	d1e2      	bne.n	800c4c0 <RTC_EnterInitMode+0x2c>
 800c4fa:	e000      	b.n	800c4fe <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800c4fc:	bf00      	nop
        }
      }
    }
  }

  return status;
 800c4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	46007800 	.word	0x46007800

0800c50c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c514:	2300      	movs	r3, #0
 800c516:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c518:	4b1a      	ldr	r3, [pc, #104]	@ (800c584 <RTC_ExitInitMode+0x78>)
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	4a19      	ldr	r2, [pc, #100]	@ (800c584 <RTC_ExitInitMode+0x78>)
 800c51e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c522:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c524:	4b17      	ldr	r3, [pc, #92]	@ (800c584 <RTC_ExitInitMode+0x78>)
 800c526:	699b      	ldr	r3, [r3, #24]
 800c528:	f003 0320 	and.w	r3, r3, #32
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d10c      	bne.n	800c54a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f7ff ff7d 	bl	800c430 <HAL_RTC_WaitForSynchro>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d01e      	beq.n	800c57a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2203      	movs	r2, #3
 800c540:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800c544:	2303      	movs	r3, #3
 800c546:	73fb      	strb	r3, [r7, #15]
 800c548:	e017      	b.n	800c57a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c54a:	4b0e      	ldr	r3, [pc, #56]	@ (800c584 <RTC_ExitInitMode+0x78>)
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	4a0d      	ldr	r2, [pc, #52]	@ (800c584 <RTC_ExitInitMode+0x78>)
 800c550:	f023 0320 	bic.w	r3, r3, #32
 800c554:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f7ff ff6a 	bl	800c430 <HAL_RTC_WaitForSynchro>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d005      	beq.n	800c56e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2203      	movs	r2, #3
 800c566:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800c56a:	2303      	movs	r3, #3
 800c56c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c56e:	4b05      	ldr	r3, [pc, #20]	@ (800c584 <RTC_ExitInitMode+0x78>)
 800c570:	699b      	ldr	r3, [r3, #24]
 800c572:	4a04      	ldr	r2, [pc, #16]	@ (800c584 <RTC_ExitInitMode+0x78>)
 800c574:	f043 0320 	orr.w	r3, r3, #32
 800c578:	6193      	str	r3, [r2, #24]
  }
  return status;
 800c57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	46007800 	.word	0x46007800

0800c588 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	4603      	mov	r3, r0
 800c590:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c592:	2300      	movs	r3, #0
 800c594:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800c596:	79fb      	ldrb	r3, [r7, #7]
 800c598:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800c59a:	e005      	b.n	800c5a8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	3301      	adds	r3, #1
 800c5a0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800c5a2:	7afb      	ldrb	r3, [r7, #11]
 800c5a4:	3b0a      	subs	r3, #10
 800c5a6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800c5a8:	7afb      	ldrb	r3, [r7, #11]
 800c5aa:	2b09      	cmp	r3, #9
 800c5ac:	d8f6      	bhi.n	800c59c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	011b      	lsls	r3, r3, #4
 800c5b4:	b2da      	uxtb	r2, r3
 800c5b6:	7afb      	ldrb	r3, [r7, #11]
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	b2db      	uxtb	r3, r3
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3714      	adds	r7, #20
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b083      	sub	sp, #12
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	4910      	ldr	r1, [pc, #64]	@ (800c61c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	689a      	ldr	r2, [r3, #8]
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	431a      	orrs	r2, r3
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	699b      	ldr	r3, [r3, #24]
 800c5ee:	490c      	ldr	r1, [pc, #48]	@ (800c620 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800c5f4:	4b0a      	ldr	r3, [pc, #40]	@ (800c620 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c5f6:	6a1b      	ldr	r3, [r3, #32]
 800c5f8:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	6919      	ldr	r1, [r3, #16]
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	695b      	ldr	r3, [r3, #20]
 800c604:	041b      	lsls	r3, r3, #16
 800c606:	430b      	orrs	r3, r1
 800c608:	4905      	ldr	r1, [pc, #20]	@ (800c620 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c60a:	4313      	orrs	r3, r2
 800c60c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800c60e:	2300      	movs	r3, #0
}
 800c610:	4618      	mov	r0, r3
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr
 800c61c:	46007800 	.word	0x46007800
 800c620:	46007c00 	.word	0x46007c00

0800c624 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d101      	bne.n	800c636 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c632:	2301      	movs	r3, #1
 800c634:	e0fb      	b.n	800c82e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a7f      	ldr	r2, [pc, #508]	@ (800c838 <HAL_SPI_Init+0x214>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d004      	beq.n	800c64a <HAL_SPI_Init+0x26>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a7d      	ldr	r2, [pc, #500]	@ (800c83c <HAL_SPI_Init+0x218>)
 800c646:	4293      	cmp	r3, r2
 800c648:	e000      	b.n	800c64c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800c64a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4a78      	ldr	r2, [pc, #480]	@ (800c838 <HAL_SPI_Init+0x214>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d004      	beq.n	800c666 <HAL_SPI_Init+0x42>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a76      	ldr	r2, [pc, #472]	@ (800c83c <HAL_SPI_Init+0x218>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d105      	bne.n	800c672 <HAL_SPI_Init+0x4e>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	68db      	ldr	r3, [r3, #12]
 800c66a:	2b0f      	cmp	r3, #15
 800c66c:	d901      	bls.n	800c672 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800c66e:	2301      	movs	r3, #1
 800c670:	e0dd      	b.n	800c82e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 f8ec 	bl	800c850 <SPI_GetPacketSize>
 800c678:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4a6e      	ldr	r2, [pc, #440]	@ (800c838 <HAL_SPI_Init+0x214>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d004      	beq.n	800c68e <HAL_SPI_Init+0x6a>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a6c      	ldr	r2, [pc, #432]	@ (800c83c <HAL_SPI_Init+0x218>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d102      	bne.n	800c694 <HAL_SPI_Init+0x70>
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2b08      	cmp	r3, #8
 800c692:	d816      	bhi.n	800c6c2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c698:	4a69      	ldr	r2, [pc, #420]	@ (800c840 <HAL_SPI_Init+0x21c>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d00e      	beq.n	800c6bc <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a68      	ldr	r2, [pc, #416]	@ (800c844 <HAL_SPI_Init+0x220>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d009      	beq.n	800c6bc <HAL_SPI_Init+0x98>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a66      	ldr	r2, [pc, #408]	@ (800c848 <HAL_SPI_Init+0x224>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d004      	beq.n	800c6bc <HAL_SPI_Init+0x98>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4a65      	ldr	r2, [pc, #404]	@ (800c84c <HAL_SPI_Init+0x228>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d104      	bne.n	800c6c6 <HAL_SPI_Init+0xa2>
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2b10      	cmp	r3, #16
 800c6c0:	d901      	bls.n	800c6c6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	e0b3      	b.n	800c82e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d106      	bne.n	800c6e0 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f7f6 fc2a 	bl	8002f34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2202      	movs	r2, #2
 800c6e4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f022 0201 	bic.w	r2, r2, #1
 800c6f6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c702:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	699b      	ldr	r3, [r3, #24]
 800c708:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c70c:	d119      	bne.n	800c742 <HAL_SPI_Init+0x11e>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c716:	d103      	bne.n	800c720 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d008      	beq.n	800c732 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c724:	2b00      	cmp	r3, #0
 800c726:	d10c      	bne.n	800c742 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c72c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c730:	d107      	bne.n	800c742 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	681a      	ldr	r2, [r3, #0]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c740:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00f      	beq.n	800c76e <HAL_SPI_Init+0x14a>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	2b06      	cmp	r3, #6
 800c754:	d90b      	bls.n	800c76e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	430a      	orrs	r2, r1
 800c76a:	601a      	str	r2, [r3, #0]
 800c76c:	e007      	b.n	800c77e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c77c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	69da      	ldr	r2, [r3, #28]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c786:	431a      	orrs	r2, r3
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	431a      	orrs	r2, r3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c790:	ea42 0103 	orr.w	r1, r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	68da      	ldr	r2, [r3, #12]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	430a      	orrs	r2, r1
 800c79e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7a8:	431a      	orrs	r2, r3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7ae:	431a      	orrs	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	699b      	ldr	r3, [r3, #24]
 800c7b4:	431a      	orrs	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	431a      	orrs	r2, r3
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	695b      	ldr	r3, [r3, #20]
 800c7c0:	431a      	orrs	r2, r3
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6a1b      	ldr	r3, [r3, #32]
 800c7c6:	431a      	orrs	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	431a      	orrs	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7d2:	431a      	orrs	r2, r3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	431a      	orrs	r2, r3
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7de:	431a      	orrs	r2, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7e4:	431a      	orrs	r2, r3
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7ea:	ea42 0103 	orr.w	r1, r2, r3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	430a      	orrs	r2, r1
 800c7f8:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00a      	beq.n	800c81c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	430a      	orrs	r2, r1
 800c81a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800c82c:	2300      	movs	r3, #0
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3710      	adds	r7, #16
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	46002000 	.word	0x46002000
 800c83c:	56002000 	.word	0x56002000
 800c840:	40013000 	.word	0x40013000
 800c844:	50013000 	.word	0x50013000
 800c848:	40003800 	.word	0x40003800
 800c84c:	50003800 	.word	0x50003800

0800c850 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c850:	b480      	push	{r7}
 800c852:	b085      	sub	sp, #20
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c85c:	095b      	lsrs	r3, r3, #5
 800c85e:	3301      	adds	r3, #1
 800c860:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	3301      	adds	r3, #1
 800c868:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	3307      	adds	r3, #7
 800c86e:	08db      	lsrs	r3, r3, #3
 800c870:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	68fa      	ldr	r2, [r7, #12]
 800c876:	fb02 f303 	mul.w	r3, r2, r3
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3714      	adds	r7, #20
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr

0800c886 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800c886:	b480      	push	{r7}
 800c888:	b083      	sub	sp, #12
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
 800c88e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c896:	b2db      	uxtb	r3, r3
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d12e      	bne.n	800c8fa <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	d101      	bne.n	800c8aa <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800c8a6:	2302      	movs	r3, #2
 800c8a8:	e028      	b.n	800c8fc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2202      	movs	r2, #2
 800c8b6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	681a      	ldr	r2, [r3, #0]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f022 0201 	bic.w	r2, r2, #1
 800c8c8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800c8d6:	ea42 0103 	orr.w	r1, r2, r3
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	689a      	ldr	r2, [r3, #8]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	430a      	orrs	r2, r1
 800c8e4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	e000      	b.n	800c8fc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800c8fa:	2301      	movs	r3, #1
  }
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	370c      	adds	r7, #12
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d101      	bne.n	800c91a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c916:	2301      	movs	r3, #1
 800c918:	e049      	b.n	800c9ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c920:	b2db      	uxtb	r3, r3
 800c922:	2b00      	cmp	r3, #0
 800c924:	d106      	bne.n	800c934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f000 f841 	bl	800c9b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2202      	movs	r2, #2
 800c938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	3304      	adds	r3, #4
 800c944:	4619      	mov	r1, r3
 800c946:	4610      	mov	r0, r2
 800c948:	f000 fa58 	bl	800cdfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2201      	movs	r2, #1
 800c950:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2201      	movs	r2, #1
 800c958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2201      	movs	r2, #1
 800c960:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2201      	movs	r2, #1
 800c968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2201      	movs	r2, #1
 800c970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2201      	movs	r2, #1
 800c978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2201      	movs	r2, #1
 800c980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2201      	movs	r2, #1
 800c988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2201      	movs	r2, #1
 800c990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2201      	movs	r2, #1
 800c998:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c9ac:	2300      	movs	r3, #0
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3708      	adds	r7, #8
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}

0800c9b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c9b6:	b480      	push	{r7}
 800c9b8:	b083      	sub	sp, #12
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c9be:	bf00      	nop
 800c9c0:	370c      	adds	r7, #12
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr
	...

0800c9cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b085      	sub	sp, #20
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d001      	beq.n	800c9e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e072      	b.n	800caca <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2202      	movs	r2, #2
 800c9e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	68da      	ldr	r2, [r3, #12]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f042 0201 	orr.w	r2, r2, #1
 800c9fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a35      	ldr	r2, [pc, #212]	@ (800cad8 <HAL_TIM_Base_Start_IT+0x10c>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d040      	beq.n	800ca88 <HAL_TIM_Base_Start_IT+0xbc>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a34      	ldr	r2, [pc, #208]	@ (800cadc <HAL_TIM_Base_Start_IT+0x110>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d03b      	beq.n	800ca88 <HAL_TIM_Base_Start_IT+0xbc>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca18:	d036      	beq.n	800ca88 <HAL_TIM_Base_Start_IT+0xbc>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ca22:	d031      	beq.n	800ca88 <HAL_TIM_Base_Start_IT+0xbc>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a2d      	ldr	r2, [pc, #180]	@ (800cae0 <HAL_TIM_Base_Start_IT+0x114>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d02c      	beq.n	800ca88 <HAL_TIM_Base_Start_IT+0xbc>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a2c      	ldr	r2, [pc, #176]	@ (800cae4 <HAL_TIM_Base_Start_IT+0x118>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d027      	beq.n	800ca88 <HAL_TIM_Base_Start_IT+0xbc>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a2a      	ldr	r2, [pc, #168]	@ (800cae8 <HAL_TIM_Base_Start_IT+0x11c>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d022      	beq.n	800ca88 <HAL_TIM_Base_Start_IT+0xbc>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a29      	ldr	r2, [pc, #164]	@ (800caec <HAL_TIM_Base_Start_IT+0x120>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d01d      	beq.n	800ca88 <HAL_TIM_Base_Start_IT+0xbc>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a27      	ldr	r2, [pc, #156]	@ (800caf0 <HAL_TIM_Base_Start_IT+0x124>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d018      	beq.n	800ca88 <HAL_TIM_Base_Start_IT+0xbc>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a26      	ldr	r2, [pc, #152]	@ (800caf4 <HAL_TIM_Base_Start_IT+0x128>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d013      	beq.n	800ca88 <HAL_TIM_Base_Start_IT+0xbc>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a24      	ldr	r2, [pc, #144]	@ (800caf8 <HAL_TIM_Base_Start_IT+0x12c>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d00e      	beq.n	800ca88 <HAL_TIM_Base_Start_IT+0xbc>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a23      	ldr	r2, [pc, #140]	@ (800cafc <HAL_TIM_Base_Start_IT+0x130>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d009      	beq.n	800ca88 <HAL_TIM_Base_Start_IT+0xbc>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a21      	ldr	r2, [pc, #132]	@ (800cb00 <HAL_TIM_Base_Start_IT+0x134>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d004      	beq.n	800ca88 <HAL_TIM_Base_Start_IT+0xbc>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4a20      	ldr	r2, [pc, #128]	@ (800cb04 <HAL_TIM_Base_Start_IT+0x138>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d115      	bne.n	800cab4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	689a      	ldr	r2, [r3, #8]
 800ca8e:	4b1e      	ldr	r3, [pc, #120]	@ (800cb08 <HAL_TIM_Base_Start_IT+0x13c>)
 800ca90:	4013      	ands	r3, r2
 800ca92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2b06      	cmp	r3, #6
 800ca98:	d015      	beq.n	800cac6 <HAL_TIM_Base_Start_IT+0xfa>
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800caa0:	d011      	beq.n	800cac6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f042 0201 	orr.w	r2, r2, #1
 800cab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cab2:	e008      	b.n	800cac6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f042 0201 	orr.w	r2, r2, #1
 800cac2:	601a      	str	r2, [r3, #0]
 800cac4:	e000      	b.n	800cac8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cac6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3714      	adds	r7, #20
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr
 800cad6:	bf00      	nop
 800cad8:	40012c00 	.word	0x40012c00
 800cadc:	50012c00 	.word	0x50012c00
 800cae0:	40000400 	.word	0x40000400
 800cae4:	50000400 	.word	0x50000400
 800cae8:	40000800 	.word	0x40000800
 800caec:	50000800 	.word	0x50000800
 800caf0:	40000c00 	.word	0x40000c00
 800caf4:	50000c00 	.word	0x50000c00
 800caf8:	40013400 	.word	0x40013400
 800cafc:	50013400 	.word	0x50013400
 800cb00:	40014000 	.word	0x40014000
 800cb04:	50014000 	.word	0x50014000
 800cb08:	00010007 	.word	0x00010007

0800cb0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	68db      	ldr	r3, [r3, #12]
 800cb1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	691b      	ldr	r3, [r3, #16]
 800cb22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	f003 0302 	and.w	r3, r3, #2
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d020      	beq.n	800cb70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f003 0302 	and.w	r3, r3, #2
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d01b      	beq.n	800cb70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f06f 0202 	mvn.w	r2, #2
 800cb40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2201      	movs	r2, #1
 800cb46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	699b      	ldr	r3, [r3, #24]
 800cb4e:	f003 0303 	and.w	r3, r3, #3
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d003      	beq.n	800cb5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 f931 	bl	800cdbe <HAL_TIM_IC_CaptureCallback>
 800cb5c:	e005      	b.n	800cb6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 f923 	bl	800cdaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 f934 	bl	800cdd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	f003 0304 	and.w	r3, r3, #4
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d020      	beq.n	800cbbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f003 0304 	and.w	r3, r3, #4
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d01b      	beq.n	800cbbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f06f 0204 	mvn.w	r2, #4
 800cb8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2202      	movs	r2, #2
 800cb92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	699b      	ldr	r3, [r3, #24]
 800cb9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d003      	beq.n	800cbaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 f90b 	bl	800cdbe <HAL_TIM_IC_CaptureCallback>
 800cba8:	e005      	b.n	800cbb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 f8fd 	bl	800cdaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 f90e 	bl	800cdd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	f003 0308 	and.w	r3, r3, #8
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d020      	beq.n	800cc08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f003 0308 	and.w	r3, r3, #8
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d01b      	beq.n	800cc08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f06f 0208 	mvn.w	r2, #8
 800cbd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2204      	movs	r2, #4
 800cbde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	69db      	ldr	r3, [r3, #28]
 800cbe6:	f003 0303 	and.w	r3, r3, #3
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d003      	beq.n	800cbf6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 f8e5 	bl	800cdbe <HAL_TIM_IC_CaptureCallback>
 800cbf4:	e005      	b.n	800cc02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 f8d7 	bl	800cdaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 f8e8 	bl	800cdd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	f003 0310 	and.w	r3, r3, #16
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d020      	beq.n	800cc54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	f003 0310 	and.w	r3, r3, #16
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d01b      	beq.n	800cc54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f06f 0210 	mvn.w	r2, #16
 800cc24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2208      	movs	r2, #8
 800cc2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	69db      	ldr	r3, [r3, #28]
 800cc32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d003      	beq.n	800cc42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 f8bf 	bl	800cdbe <HAL_TIM_IC_CaptureCallback>
 800cc40:	e005      	b.n	800cc4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 f8b1 	bl	800cdaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 f8c2 	bl	800cdd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2200      	movs	r2, #0
 800cc52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	f003 0301 	and.w	r3, r3, #1
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00c      	beq.n	800cc78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f003 0301 	and.w	r3, r3, #1
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d007      	beq.n	800cc78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f06f 0201 	mvn.w	r2, #1
 800cc70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f7f5 f914 	bl	8001ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d104      	bne.n	800cc8c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d00c      	beq.n	800cca6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d007      	beq.n	800cca6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800cc9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 f9af 	bl	800d004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d00c      	beq.n	800ccca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d007      	beq.n	800ccca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ccc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 f9a7 	bl	800d018 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d00c      	beq.n	800ccee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d007      	beq.n	800ccee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f000 f87c 	bl	800cde6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	f003 0320 	and.w	r3, r3, #32
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d00c      	beq.n	800cd12 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f003 0320 	and.w	r3, r3, #32
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d007      	beq.n	800cd12 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f06f 0220 	mvn.w	r2, #32
 800cd0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 f96f 	bl	800cff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00c      	beq.n	800cd36 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d007      	beq.n	800cd36 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800cd2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 f97b 	bl	800d02c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d00c      	beq.n	800cd5a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d007      	beq.n	800cd5a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800cd52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 f973 	bl	800d040 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d00c      	beq.n	800cd7e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d007      	beq.n	800cd7e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800cd76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 f96b 	bl	800d054 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d00c      	beq.n	800cda2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d007      	beq.n	800cda2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800cd9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 f963 	bl	800d068 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cda2:	bf00      	nop
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cdaa:	b480      	push	{r7}
 800cdac:	b083      	sub	sp, #12
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cdb2:	bf00      	nop
 800cdb4:	370c      	adds	r7, #12
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr

0800cdbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cdbe:	b480      	push	{r7}
 800cdc0:	b083      	sub	sp, #12
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cdc6:	bf00      	nop
 800cdc8:	370c      	adds	r7, #12
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr

0800cdd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cdd2:	b480      	push	{r7}
 800cdd4:	b083      	sub	sp, #12
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cdda:	bf00      	nop
 800cddc:	370c      	adds	r7, #12
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr

0800cde6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cde6:	b480      	push	{r7}
 800cde8:	b083      	sub	sp, #12
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cdee:	bf00      	nop
 800cdf0:	370c      	adds	r7, #12
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
	...

0800cdfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	4a68      	ldr	r2, [pc, #416]	@ (800cfb0 <TIM_Base_SetConfig+0x1b4>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d02b      	beq.n	800ce6c <TIM_Base_SetConfig+0x70>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	4a67      	ldr	r2, [pc, #412]	@ (800cfb4 <TIM_Base_SetConfig+0x1b8>)
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d027      	beq.n	800ce6c <TIM_Base_SetConfig+0x70>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce22:	d023      	beq.n	800ce6c <TIM_Base_SetConfig+0x70>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ce2a:	d01f      	beq.n	800ce6c <TIM_Base_SetConfig+0x70>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	4a62      	ldr	r2, [pc, #392]	@ (800cfb8 <TIM_Base_SetConfig+0x1bc>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d01b      	beq.n	800ce6c <TIM_Base_SetConfig+0x70>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	4a61      	ldr	r2, [pc, #388]	@ (800cfbc <TIM_Base_SetConfig+0x1c0>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d017      	beq.n	800ce6c <TIM_Base_SetConfig+0x70>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	4a60      	ldr	r2, [pc, #384]	@ (800cfc0 <TIM_Base_SetConfig+0x1c4>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d013      	beq.n	800ce6c <TIM_Base_SetConfig+0x70>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	4a5f      	ldr	r2, [pc, #380]	@ (800cfc4 <TIM_Base_SetConfig+0x1c8>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d00f      	beq.n	800ce6c <TIM_Base_SetConfig+0x70>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4a5e      	ldr	r2, [pc, #376]	@ (800cfc8 <TIM_Base_SetConfig+0x1cc>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d00b      	beq.n	800ce6c <TIM_Base_SetConfig+0x70>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	4a5d      	ldr	r2, [pc, #372]	@ (800cfcc <TIM_Base_SetConfig+0x1d0>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d007      	beq.n	800ce6c <TIM_Base_SetConfig+0x70>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	4a5c      	ldr	r2, [pc, #368]	@ (800cfd0 <TIM_Base_SetConfig+0x1d4>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d003      	beq.n	800ce6c <TIM_Base_SetConfig+0x70>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	4a5b      	ldr	r2, [pc, #364]	@ (800cfd4 <TIM_Base_SetConfig+0x1d8>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d108      	bne.n	800ce7e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	4a4b      	ldr	r2, [pc, #300]	@ (800cfb0 <TIM_Base_SetConfig+0x1b4>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d043      	beq.n	800cf0e <TIM_Base_SetConfig+0x112>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	4a4a      	ldr	r2, [pc, #296]	@ (800cfb4 <TIM_Base_SetConfig+0x1b8>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d03f      	beq.n	800cf0e <TIM_Base_SetConfig+0x112>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce94:	d03b      	beq.n	800cf0e <TIM_Base_SetConfig+0x112>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ce9c:	d037      	beq.n	800cf0e <TIM_Base_SetConfig+0x112>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	4a45      	ldr	r2, [pc, #276]	@ (800cfb8 <TIM_Base_SetConfig+0x1bc>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d033      	beq.n	800cf0e <TIM_Base_SetConfig+0x112>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	4a44      	ldr	r2, [pc, #272]	@ (800cfbc <TIM_Base_SetConfig+0x1c0>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d02f      	beq.n	800cf0e <TIM_Base_SetConfig+0x112>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	4a43      	ldr	r2, [pc, #268]	@ (800cfc0 <TIM_Base_SetConfig+0x1c4>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d02b      	beq.n	800cf0e <TIM_Base_SetConfig+0x112>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	4a42      	ldr	r2, [pc, #264]	@ (800cfc4 <TIM_Base_SetConfig+0x1c8>)
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d027      	beq.n	800cf0e <TIM_Base_SetConfig+0x112>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	4a41      	ldr	r2, [pc, #260]	@ (800cfc8 <TIM_Base_SetConfig+0x1cc>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d023      	beq.n	800cf0e <TIM_Base_SetConfig+0x112>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	4a40      	ldr	r2, [pc, #256]	@ (800cfcc <TIM_Base_SetConfig+0x1d0>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d01f      	beq.n	800cf0e <TIM_Base_SetConfig+0x112>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4a3f      	ldr	r2, [pc, #252]	@ (800cfd0 <TIM_Base_SetConfig+0x1d4>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d01b      	beq.n	800cf0e <TIM_Base_SetConfig+0x112>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	4a3e      	ldr	r2, [pc, #248]	@ (800cfd4 <TIM_Base_SetConfig+0x1d8>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d017      	beq.n	800cf0e <TIM_Base_SetConfig+0x112>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	4a3d      	ldr	r2, [pc, #244]	@ (800cfd8 <TIM_Base_SetConfig+0x1dc>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d013      	beq.n	800cf0e <TIM_Base_SetConfig+0x112>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	4a3c      	ldr	r2, [pc, #240]	@ (800cfdc <TIM_Base_SetConfig+0x1e0>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d00f      	beq.n	800cf0e <TIM_Base_SetConfig+0x112>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	4a3b      	ldr	r2, [pc, #236]	@ (800cfe0 <TIM_Base_SetConfig+0x1e4>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d00b      	beq.n	800cf0e <TIM_Base_SetConfig+0x112>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	4a3a      	ldr	r2, [pc, #232]	@ (800cfe4 <TIM_Base_SetConfig+0x1e8>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d007      	beq.n	800cf0e <TIM_Base_SetConfig+0x112>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4a39      	ldr	r2, [pc, #228]	@ (800cfe8 <TIM_Base_SetConfig+0x1ec>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d003      	beq.n	800cf0e <TIM_Base_SetConfig+0x112>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4a38      	ldr	r2, [pc, #224]	@ (800cfec <TIM_Base_SetConfig+0x1f0>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d108      	bne.n	800cf20 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cf14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	68fa      	ldr	r2, [r7, #12]
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	695b      	ldr	r3, [r3, #20]
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	689a      	ldr	r2, [r3, #8]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	4a1a      	ldr	r2, [pc, #104]	@ (800cfb0 <TIM_Base_SetConfig+0x1b4>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d023      	beq.n	800cf94 <TIM_Base_SetConfig+0x198>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	4a19      	ldr	r2, [pc, #100]	@ (800cfb4 <TIM_Base_SetConfig+0x1b8>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d01f      	beq.n	800cf94 <TIM_Base_SetConfig+0x198>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	4a1e      	ldr	r2, [pc, #120]	@ (800cfd0 <TIM_Base_SetConfig+0x1d4>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d01b      	beq.n	800cf94 <TIM_Base_SetConfig+0x198>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	4a1d      	ldr	r2, [pc, #116]	@ (800cfd4 <TIM_Base_SetConfig+0x1d8>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d017      	beq.n	800cf94 <TIM_Base_SetConfig+0x198>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	4a1c      	ldr	r2, [pc, #112]	@ (800cfd8 <TIM_Base_SetConfig+0x1dc>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d013      	beq.n	800cf94 <TIM_Base_SetConfig+0x198>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	4a1b      	ldr	r2, [pc, #108]	@ (800cfdc <TIM_Base_SetConfig+0x1e0>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d00f      	beq.n	800cf94 <TIM_Base_SetConfig+0x198>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	4a1a      	ldr	r2, [pc, #104]	@ (800cfe0 <TIM_Base_SetConfig+0x1e4>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d00b      	beq.n	800cf94 <TIM_Base_SetConfig+0x198>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	4a19      	ldr	r2, [pc, #100]	@ (800cfe4 <TIM_Base_SetConfig+0x1e8>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d007      	beq.n	800cf94 <TIM_Base_SetConfig+0x198>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	4a18      	ldr	r2, [pc, #96]	@ (800cfe8 <TIM_Base_SetConfig+0x1ec>)
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	d003      	beq.n	800cf94 <TIM_Base_SetConfig+0x198>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	4a17      	ldr	r2, [pc, #92]	@ (800cfec <TIM_Base_SetConfig+0x1f0>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d103      	bne.n	800cf9c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	691a      	ldr	r2, [r3, #16]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	615a      	str	r2, [r3, #20]
}
 800cfa2:	bf00      	nop
 800cfa4:	3714      	adds	r7, #20
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr
 800cfae:	bf00      	nop
 800cfb0:	40012c00 	.word	0x40012c00
 800cfb4:	50012c00 	.word	0x50012c00
 800cfb8:	40000400 	.word	0x40000400
 800cfbc:	50000400 	.word	0x50000400
 800cfc0:	40000800 	.word	0x40000800
 800cfc4:	50000800 	.word	0x50000800
 800cfc8:	40000c00 	.word	0x40000c00
 800cfcc:	50000c00 	.word	0x50000c00
 800cfd0:	40013400 	.word	0x40013400
 800cfd4:	50013400 	.word	0x50013400
 800cfd8:	40014000 	.word	0x40014000
 800cfdc:	50014000 	.word	0x50014000
 800cfe0:	40014400 	.word	0x40014400
 800cfe4:	50014400 	.word	0x50014400
 800cfe8:	40014800 	.word	0x40014800
 800cfec:	50014800 	.word	0x50014800

0800cff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cff8:	bf00      	nop
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d00c:	bf00      	nop
 800d00e:	370c      	adds	r7, #12
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr

0800d018 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d020:	bf00      	nop
 800d022:	370c      	adds	r7, #12
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr

0800d02c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d034:	bf00      	nop
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d048:	bf00      	nop
 800d04a:	370c      	adds	r7, #12
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d05c:	bf00      	nop
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d070:	bf00      	nop
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d101      	bne.n	800d08e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d08a:	2301      	movs	r3, #1
 800d08c:	e042      	b.n	800d114 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d094:	2b00      	cmp	r3, #0
 800d096:	d106      	bne.n	800d0a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f7f5 fb57 	bl	8002754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2224      	movs	r2, #36	@ 0x24
 800d0aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f022 0201 	bic.w	r2, r2, #1
 800d0bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d002      	beq.n	800d0cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f000 f9d6 	bl	800d478 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 f825 	bl	800d11c <UART_SetConfig>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d101      	bne.n	800d0dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	e01b      	b.n	800d114 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	685a      	ldr	r2, [r3, #4]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d0ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	689a      	ldr	r2, [r3, #8]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d0fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f042 0201 	orr.w	r2, r2, #1
 800d10a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 fa55 	bl	800d5bc <UART_CheckIdleState>
 800d112:	4603      	mov	r3, r0
}
 800d114:	4618      	mov	r0, r3
 800d116:	3708      	adds	r7, #8
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d11c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d120:	b094      	sub	sp, #80	@ 0x50
 800d122:	af00      	add	r7, sp, #0
 800d124:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d126:	2300      	movs	r3, #0
 800d128:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	4b83      	ldr	r3, [pc, #524]	@ (800d340 <UART_SetConfig+0x224>)
 800d132:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d136:	689a      	ldr	r2, [r3, #8]
 800d138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d13a:	691b      	ldr	r3, [r3, #16]
 800d13c:	431a      	orrs	r2, r3
 800d13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d140:	695b      	ldr	r3, [r3, #20]
 800d142:	431a      	orrs	r2, r3
 800d144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d146:	69db      	ldr	r3, [r3, #28]
 800d148:	4313      	orrs	r3, r2
 800d14a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	497c      	ldr	r1, [pc, #496]	@ (800d344 <UART_SetConfig+0x228>)
 800d154:	4019      	ands	r1, r3
 800d156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d15c:	430b      	orrs	r3, r1
 800d15e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d16c:	68d9      	ldr	r1, [r3, #12]
 800d16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	ea40 0301 	orr.w	r3, r0, r1
 800d176:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d17a:	699b      	ldr	r3, [r3, #24]
 800d17c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	4b6f      	ldr	r3, [pc, #444]	@ (800d340 <UART_SetConfig+0x224>)
 800d184:	429a      	cmp	r2, r3
 800d186:	d009      	beq.n	800d19c <UART_SetConfig+0x80>
 800d188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d18a:	681a      	ldr	r2, [r3, #0]
 800d18c:	4b6e      	ldr	r3, [pc, #440]	@ (800d348 <UART_SetConfig+0x22c>)
 800d18e:	429a      	cmp	r2, r3
 800d190:	d004      	beq.n	800d19c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d194:	6a1a      	ldr	r2, [r3, #32]
 800d196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d198:	4313      	orrs	r3, r2
 800d19a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d1a6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ac:	681a      	ldr	r2, [r3, #0]
 800d1ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1b0:	430b      	orrs	r3, r1
 800d1b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1ba:	f023 000f 	bic.w	r0, r3, #15
 800d1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d1c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	ea40 0301 	orr.w	r3, r0, r1
 800d1ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ce:	681a      	ldr	r2, [r3, #0]
 800d1d0:	4b5e      	ldr	r3, [pc, #376]	@ (800d34c <UART_SetConfig+0x230>)
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d102      	bne.n	800d1dc <UART_SetConfig+0xc0>
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1da:	e032      	b.n	800d242 <UART_SetConfig+0x126>
 800d1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	4b5b      	ldr	r3, [pc, #364]	@ (800d350 <UART_SetConfig+0x234>)
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d102      	bne.n	800d1ec <UART_SetConfig+0xd0>
 800d1e6:	2302      	movs	r3, #2
 800d1e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1ea:	e02a      	b.n	800d242 <UART_SetConfig+0x126>
 800d1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	4b58      	ldr	r3, [pc, #352]	@ (800d354 <UART_SetConfig+0x238>)
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d102      	bne.n	800d1fc <UART_SetConfig+0xe0>
 800d1f6:	2304      	movs	r3, #4
 800d1f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1fa:	e022      	b.n	800d242 <UART_SetConfig+0x126>
 800d1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1fe:	681a      	ldr	r2, [r3, #0]
 800d200:	4b55      	ldr	r3, [pc, #340]	@ (800d358 <UART_SetConfig+0x23c>)
 800d202:	429a      	cmp	r2, r3
 800d204:	d102      	bne.n	800d20c <UART_SetConfig+0xf0>
 800d206:	2308      	movs	r3, #8
 800d208:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d20a:	e01a      	b.n	800d242 <UART_SetConfig+0x126>
 800d20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	4b52      	ldr	r3, [pc, #328]	@ (800d35c <UART_SetConfig+0x240>)
 800d212:	429a      	cmp	r2, r3
 800d214:	d102      	bne.n	800d21c <UART_SetConfig+0x100>
 800d216:	2310      	movs	r3, #16
 800d218:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d21a:	e012      	b.n	800d242 <UART_SetConfig+0x126>
 800d21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	4b4f      	ldr	r3, [pc, #316]	@ (800d360 <UART_SetConfig+0x244>)
 800d222:	429a      	cmp	r2, r3
 800d224:	d103      	bne.n	800d22e <UART_SetConfig+0x112>
 800d226:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800d22a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d22c:	e009      	b.n	800d242 <UART_SetConfig+0x126>
 800d22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	4b43      	ldr	r3, [pc, #268]	@ (800d340 <UART_SetConfig+0x224>)
 800d234:	429a      	cmp	r2, r3
 800d236:	d102      	bne.n	800d23e <UART_SetConfig+0x122>
 800d238:	2320      	movs	r3, #32
 800d23a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d23c:	e001      	b.n	800d242 <UART_SetConfig+0x126>
 800d23e:	2300      	movs	r3, #0
 800d240:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	4b3e      	ldr	r3, [pc, #248]	@ (800d340 <UART_SetConfig+0x224>)
 800d248:	429a      	cmp	r2, r3
 800d24a:	d005      	beq.n	800d258 <UART_SetConfig+0x13c>
 800d24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	4b3d      	ldr	r3, [pc, #244]	@ (800d348 <UART_SetConfig+0x22c>)
 800d252:	429a      	cmp	r2, r3
 800d254:	f040 8088 	bne.w	800d368 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d258:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d25a:	2200      	movs	r2, #0
 800d25c:	623b      	str	r3, [r7, #32]
 800d25e:	627a      	str	r2, [r7, #36]	@ 0x24
 800d260:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d264:	f7fd fa78 	bl	800a758 <HAL_RCCEx_GetPeriphCLKFreq>
 800d268:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d26a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	f000 80eb 	beq.w	800d448 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d276:	4a3b      	ldr	r2, [pc, #236]	@ (800d364 <UART_SetConfig+0x248>)
 800d278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d27c:	461a      	mov	r2, r3
 800d27e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d280:	fbb3 f3f2 	udiv	r3, r3, r2
 800d284:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d288:	685a      	ldr	r2, [r3, #4]
 800d28a:	4613      	mov	r3, r2
 800d28c:	005b      	lsls	r3, r3, #1
 800d28e:	4413      	add	r3, r2
 800d290:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d292:	429a      	cmp	r2, r3
 800d294:	d305      	bcc.n	800d2a2 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d29c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d903      	bls.n	800d2aa <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d2a8:	e048      	b.n	800d33c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	61bb      	str	r3, [r7, #24]
 800d2b0:	61fa      	str	r2, [r7, #28]
 800d2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2b6:	4a2b      	ldr	r2, [pc, #172]	@ (800d364 <UART_SetConfig+0x248>)
 800d2b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	2200      	movs	r2, #0
 800d2c0:	613b      	str	r3, [r7, #16]
 800d2c2:	617a      	str	r2, [r7, #20]
 800d2c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d2c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d2cc:	f7f2 ffee 	bl	80002ac <__aeabi_uldivmod>
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	4610      	mov	r0, r2
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	f04f 0200 	mov.w	r2, #0
 800d2dc:	f04f 0300 	mov.w	r3, #0
 800d2e0:	020b      	lsls	r3, r1, #8
 800d2e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d2e6:	0202      	lsls	r2, r0, #8
 800d2e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d2ea:	6849      	ldr	r1, [r1, #4]
 800d2ec:	0849      	lsrs	r1, r1, #1
 800d2ee:	2000      	movs	r0, #0
 800d2f0:	460c      	mov	r4, r1
 800d2f2:	4605      	mov	r5, r0
 800d2f4:	eb12 0804 	adds.w	r8, r2, r4
 800d2f8:	eb43 0905 	adc.w	r9, r3, r5
 800d2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	2200      	movs	r2, #0
 800d302:	60bb      	str	r3, [r7, #8]
 800d304:	60fa      	str	r2, [r7, #12]
 800d306:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d30a:	4640      	mov	r0, r8
 800d30c:	4649      	mov	r1, r9
 800d30e:	f7f2 ffcd 	bl	80002ac <__aeabi_uldivmod>
 800d312:	4602      	mov	r2, r0
 800d314:	460b      	mov	r3, r1
 800d316:	4613      	mov	r3, r2
 800d318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d31a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d31c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d320:	d308      	bcc.n	800d334 <UART_SetConfig+0x218>
 800d322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d324:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d328:	d204      	bcs.n	800d334 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800d32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d330:	60da      	str	r2, [r3, #12]
 800d332:	e003      	b.n	800d33c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800d334:	2301      	movs	r3, #1
 800d336:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800d33a:	e085      	b.n	800d448 <UART_SetConfig+0x32c>
 800d33c:	e084      	b.n	800d448 <UART_SetConfig+0x32c>
 800d33e:	bf00      	nop
 800d340:	46002400 	.word	0x46002400
 800d344:	cfff69f3 	.word	0xcfff69f3
 800d348:	56002400 	.word	0x56002400
 800d34c:	40013800 	.word	0x40013800
 800d350:	40004400 	.word	0x40004400
 800d354:	40004800 	.word	0x40004800
 800d358:	40004c00 	.word	0x40004c00
 800d35c:	40005000 	.word	0x40005000
 800d360:	40006400 	.word	0x40006400
 800d364:	0800dc38 	.word	0x0800dc38
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d36a:	69db      	ldr	r3, [r3, #28]
 800d36c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d370:	d13c      	bne.n	800d3ec <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d374:	2200      	movs	r2, #0
 800d376:	603b      	str	r3, [r7, #0]
 800d378:	607a      	str	r2, [r7, #4]
 800d37a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d37e:	f7fd f9eb 	bl	800a758 <HAL_RCCEx_GetPeriphCLKFreq>
 800d382:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d386:	2b00      	cmp	r3, #0
 800d388:	d05e      	beq.n	800d448 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d38e:	4a39      	ldr	r2, [pc, #228]	@ (800d474 <UART_SetConfig+0x358>)
 800d390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d394:	461a      	mov	r2, r3
 800d396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d398:	fbb3 f3f2 	udiv	r3, r3, r2
 800d39c:	005a      	lsls	r2, r3, #1
 800d39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	085b      	lsrs	r3, r3, #1
 800d3a4:	441a      	add	r2, r3
 800d3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3b2:	2b0f      	cmp	r3, #15
 800d3b4:	d916      	bls.n	800d3e4 <UART_SetConfig+0x2c8>
 800d3b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3bc:	d212      	bcs.n	800d3e4 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d3be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	f023 030f 	bic.w	r3, r3, #15
 800d3c6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d3c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3ca:	085b      	lsrs	r3, r3, #1
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	f003 0307 	and.w	r3, r3, #7
 800d3d2:	b29a      	uxth	r2, r3
 800d3d4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800d3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d3e0:	60da      	str	r2, [r3, #12]
 800d3e2:	e031      	b.n	800d448 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d3ea:	e02d      	b.n	800d448 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d3ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	469a      	mov	sl, r3
 800d3f2:	4693      	mov	fp, r2
 800d3f4:	4650      	mov	r0, sl
 800d3f6:	4659      	mov	r1, fp
 800d3f8:	f7fd f9ae 	bl	800a758 <HAL_RCCEx_GetPeriphCLKFreq>
 800d3fc:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800d3fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d400:	2b00      	cmp	r3, #0
 800d402:	d021      	beq.n	800d448 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d408:	4a1a      	ldr	r2, [pc, #104]	@ (800d474 <UART_SetConfig+0x358>)
 800d40a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d40e:	461a      	mov	r2, r3
 800d410:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d412:	fbb3 f2f2 	udiv	r2, r3, r2
 800d416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d418:	685b      	ldr	r3, [r3, #4]
 800d41a:	085b      	lsrs	r3, r3, #1
 800d41c:	441a      	add	r2, r3
 800d41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	fbb2 f3f3 	udiv	r3, r2, r3
 800d426:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d42a:	2b0f      	cmp	r3, #15
 800d42c:	d909      	bls.n	800d442 <UART_SetConfig+0x326>
 800d42e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d434:	d205      	bcs.n	800d442 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d438:	b29a      	uxth	r2, r3
 800d43a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	60da      	str	r2, [r3, #12]
 800d440:	e002      	b.n	800d448 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d44a:	2201      	movs	r2, #1
 800d44c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d452:	2201      	movs	r2, #1
 800d454:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d45a:	2200      	movs	r2, #0
 800d45c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d460:	2200      	movs	r2, #0
 800d462:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d464:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3750      	adds	r7, #80	@ 0x50
 800d46c:	46bd      	mov	sp, r7
 800d46e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d472:	bf00      	nop
 800d474:	0800dc38 	.word	0x0800dc38

0800d478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d478:	b480      	push	{r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d484:	f003 0308 	and.w	r3, r3, #8
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00a      	beq.n	800d4a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	430a      	orrs	r2, r1
 800d4a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4a6:	f003 0301 	and.w	r3, r3, #1
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d00a      	beq.n	800d4c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	430a      	orrs	r2, r1
 800d4c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4c8:	f003 0302 	and.w	r3, r3, #2
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d00a      	beq.n	800d4e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	430a      	orrs	r2, r1
 800d4e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4ea:	f003 0304 	and.w	r3, r3, #4
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d00a      	beq.n	800d508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	430a      	orrs	r2, r1
 800d506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d50c:	f003 0310 	and.w	r3, r3, #16
 800d510:	2b00      	cmp	r3, #0
 800d512:	d00a      	beq.n	800d52a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	689b      	ldr	r3, [r3, #8]
 800d51a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	430a      	orrs	r2, r1
 800d528:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d52e:	f003 0320 	and.w	r3, r3, #32
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00a      	beq.n	800d54c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	689b      	ldr	r3, [r3, #8]
 800d53c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	430a      	orrs	r2, r1
 800d54a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d554:	2b00      	cmp	r3, #0
 800d556:	d01a      	beq.n	800d58e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	430a      	orrs	r2, r1
 800d56c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d572:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d576:	d10a      	bne.n	800d58e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	430a      	orrs	r2, r1
 800d58c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d596:	2b00      	cmp	r3, #0
 800d598:	d00a      	beq.n	800d5b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	430a      	orrs	r2, r1
 800d5ae:	605a      	str	r2, [r3, #4]
  }
}
 800d5b0:	bf00      	nop
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b098      	sub	sp, #96	@ 0x60
 800d5c0:	af02      	add	r7, sp, #8
 800d5c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d5cc:	f7f5 fee6 	bl	800339c <HAL_GetTick>
 800d5d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f003 0308 	and.w	r3, r3, #8
 800d5dc:	2b08      	cmp	r3, #8
 800d5de:	d12f      	bne.n	800d640 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f88e 	bl	800d710 <UART_WaitOnFlagUntilTimeout>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d022      	beq.n	800d640 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d602:	e853 3f00 	ldrex	r3, [r3]
 800d606:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d60a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d60e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	461a      	mov	r2, r3
 800d616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d618:	647b      	str	r3, [r7, #68]	@ 0x44
 800d61a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d61c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d61e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d620:	e841 2300 	strex	r3, r2, [r1]
 800d624:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d1e6      	bne.n	800d5fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2220      	movs	r2, #32
 800d630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2200      	movs	r2, #0
 800d638:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d63c:	2303      	movs	r3, #3
 800d63e:	e063      	b.n	800d708 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f003 0304 	and.w	r3, r3, #4
 800d64a:	2b04      	cmp	r3, #4
 800d64c:	d149      	bne.n	800d6e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d64e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d652:	9300      	str	r3, [sp, #0]
 800d654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d656:	2200      	movs	r2, #0
 800d658:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 f857 	bl	800d710 <UART_WaitOnFlagUntilTimeout>
 800d662:	4603      	mov	r3, r0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d03c      	beq.n	800d6e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d670:	e853 3f00 	ldrex	r3, [r3]
 800d674:	623b      	str	r3, [r7, #32]
   return(result);
 800d676:	6a3b      	ldr	r3, [r7, #32]
 800d678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d67c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	461a      	mov	r2, r3
 800d684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d686:	633b      	str	r3, [r7, #48]	@ 0x30
 800d688:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d68a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d68c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d68e:	e841 2300 	strex	r3, r2, [r1]
 800d692:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d696:	2b00      	cmp	r3, #0
 800d698:	d1e6      	bne.n	800d668 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	3308      	adds	r3, #8
 800d6a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	e853 3f00 	ldrex	r3, [r3]
 800d6a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f023 0301 	bic.w	r3, r3, #1
 800d6b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	3308      	adds	r3, #8
 800d6b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d6ba:	61fa      	str	r2, [r7, #28]
 800d6bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6be:	69b9      	ldr	r1, [r7, #24]
 800d6c0:	69fa      	ldr	r2, [r7, #28]
 800d6c2:	e841 2300 	strex	r3, r2, [r1]
 800d6c6:	617b      	str	r3, [r7, #20]
   return(result);
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1e5      	bne.n	800d69a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2220      	movs	r2, #32
 800d6d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6de:	2303      	movs	r3, #3
 800d6e0:	e012      	b.n	800d708 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2220      	movs	r2, #32
 800d6e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2220      	movs	r2, #32
 800d6ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d706:	2300      	movs	r3, #0
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3758      	adds	r7, #88	@ 0x58
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	60b9      	str	r1, [r7, #8]
 800d71a:	603b      	str	r3, [r7, #0]
 800d71c:	4613      	mov	r3, r2
 800d71e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d720:	e049      	b.n	800d7b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d728:	d045      	beq.n	800d7b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d72a:	f7f5 fe37 	bl	800339c <HAL_GetTick>
 800d72e:	4602      	mov	r2, r0
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	1ad3      	subs	r3, r2, r3
 800d734:	69ba      	ldr	r2, [r7, #24]
 800d736:	429a      	cmp	r2, r3
 800d738:	d302      	bcc.n	800d740 <UART_WaitOnFlagUntilTimeout+0x30>
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d101      	bne.n	800d744 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d740:	2303      	movs	r3, #3
 800d742:	e048      	b.n	800d7d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f003 0304 	and.w	r3, r3, #4
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d031      	beq.n	800d7b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	69db      	ldr	r3, [r3, #28]
 800d758:	f003 0308 	and.w	r3, r3, #8
 800d75c:	2b08      	cmp	r3, #8
 800d75e:	d110      	bne.n	800d782 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2208      	movs	r2, #8
 800d766:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d768:	68f8      	ldr	r0, [r7, #12]
 800d76a:	f000 f838 	bl	800d7de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2208      	movs	r2, #8
 800d772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2200      	movs	r2, #0
 800d77a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d77e:	2301      	movs	r3, #1
 800d780:	e029      	b.n	800d7d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	69db      	ldr	r3, [r3, #28]
 800d788:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d78c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d790:	d111      	bne.n	800d7b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d79a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d79c:	68f8      	ldr	r0, [r7, #12]
 800d79e:	f000 f81e 	bl	800d7de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2220      	movs	r2, #32
 800d7a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d7b2:	2303      	movs	r3, #3
 800d7b4:	e00f      	b.n	800d7d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	69da      	ldr	r2, [r3, #28]
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	4013      	ands	r3, r2
 800d7c0:	68ba      	ldr	r2, [r7, #8]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	bf0c      	ite	eq
 800d7c6:	2301      	moveq	r3, #1
 800d7c8:	2300      	movne	r3, #0
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	79fb      	ldrb	r3, [r7, #7]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d0a6      	beq.n	800d722 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d7d4:	2300      	movs	r3, #0
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3710      	adds	r7, #16
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}

0800d7de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d7de:	b480      	push	{r7}
 800d7e0:	b095      	sub	sp, #84	@ 0x54
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7ee:	e853 3f00 	ldrex	r3, [r3]
 800d7f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d7fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	461a      	mov	r2, r3
 800d802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d804:	643b      	str	r3, [r7, #64]	@ 0x40
 800d806:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d808:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d80a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d80c:	e841 2300 	strex	r3, r2, [r1]
 800d810:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d814:	2b00      	cmp	r3, #0
 800d816:	d1e6      	bne.n	800d7e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	3308      	adds	r3, #8
 800d81e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d820:	6a3b      	ldr	r3, [r7, #32]
 800d822:	e853 3f00 	ldrex	r3, [r3]
 800d826:	61fb      	str	r3, [r7, #28]
   return(result);
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d82e:	f023 0301 	bic.w	r3, r3, #1
 800d832:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	3308      	adds	r3, #8
 800d83a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d83c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d83e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d840:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d842:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d844:	e841 2300 	strex	r3, r2, [r1]
 800d848:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d1e3      	bne.n	800d818 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d854:	2b01      	cmp	r3, #1
 800d856:	d118      	bne.n	800d88a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	e853 3f00 	ldrex	r3, [r3]
 800d864:	60bb      	str	r3, [r7, #8]
   return(result);
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	f023 0310 	bic.w	r3, r3, #16
 800d86c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	461a      	mov	r2, r3
 800d874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d876:	61bb      	str	r3, [r7, #24]
 800d878:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87a:	6979      	ldr	r1, [r7, #20]
 800d87c:	69ba      	ldr	r2, [r7, #24]
 800d87e:	e841 2300 	strex	r3, r2, [r1]
 800d882:	613b      	str	r3, [r7, #16]
   return(result);
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d1e6      	bne.n	800d858 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2220      	movs	r2, #32
 800d88e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2200      	movs	r2, #0
 800d896:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d89e:	bf00      	nop
 800d8a0:	3754      	adds	r7, #84	@ 0x54
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr

0800d8aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d8aa:	b480      	push	{r7}
 800d8ac:	b085      	sub	sp, #20
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d101      	bne.n	800d8c0 <HAL_UARTEx_DisableFifoMode+0x16>
 800d8bc:	2302      	movs	r3, #2
 800d8be:	e027      	b.n	800d910 <HAL_UARTEx_DisableFifoMode+0x66>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2224      	movs	r2, #36	@ 0x24
 800d8cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f022 0201 	bic.w	r2, r2, #1
 800d8e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d8ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	68fa      	ldr	r2, [r7, #12]
 800d8fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2220      	movs	r2, #32
 800d902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2200      	movs	r2, #0
 800d90a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d90e:	2300      	movs	r3, #0
}
 800d910:	4618      	mov	r0, r3
 800d912:	3714      	adds	r7, #20
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b084      	sub	sp, #16
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d101      	bne.n	800d934 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d930:	2302      	movs	r3, #2
 800d932:	e02d      	b.n	800d990 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2201      	movs	r2, #1
 800d938:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2224      	movs	r2, #36	@ 0x24
 800d940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	681a      	ldr	r2, [r3, #0]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f022 0201 	bic.w	r2, r2, #1
 800d95a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	689b      	ldr	r3, [r3, #8]
 800d962:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	683a      	ldr	r2, [r7, #0]
 800d96c:	430a      	orrs	r2, r1
 800d96e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f000 f84f 	bl	800da14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2220      	movs	r2, #32
 800d982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2200      	movs	r2, #0
 800d98a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d98e:	2300      	movs	r3, #0
}
 800d990:	4618      	mov	r0, r3
 800d992:	3710      	adds	r7, #16
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d101      	bne.n	800d9b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d9ac:	2302      	movs	r3, #2
 800d9ae:	e02d      	b.n	800da0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2224      	movs	r2, #36	@ 0x24
 800d9bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f022 0201 	bic.w	r2, r2, #1
 800d9d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	683a      	ldr	r2, [r7, #0]
 800d9e8:	430a      	orrs	r2, r1
 800d9ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f000 f811 	bl	800da14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	68fa      	ldr	r2, [r7, #12]
 800d9f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2220      	movs	r2, #32
 800d9fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da0a:	2300      	movs	r3, #0
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3710      	adds	r7, #16
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800da14:	b480      	push	{r7}
 800da16:	b085      	sub	sp, #20
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da20:	2b00      	cmp	r3, #0
 800da22:	d108      	bne.n	800da36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2201      	movs	r2, #1
 800da28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2201      	movs	r2, #1
 800da30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800da34:	e031      	b.n	800da9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800da36:	2308      	movs	r3, #8
 800da38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800da3a:	2308      	movs	r3, #8
 800da3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	0e5b      	lsrs	r3, r3, #25
 800da46:	b2db      	uxtb	r3, r3
 800da48:	f003 0307 	and.w	r3, r3, #7
 800da4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	689b      	ldr	r3, [r3, #8]
 800da54:	0f5b      	lsrs	r3, r3, #29
 800da56:	b2db      	uxtb	r3, r3
 800da58:	f003 0307 	and.w	r3, r3, #7
 800da5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da5e:	7bbb      	ldrb	r3, [r7, #14]
 800da60:	7b3a      	ldrb	r2, [r7, #12]
 800da62:	4911      	ldr	r1, [pc, #68]	@ (800daa8 <UARTEx_SetNbDataToProcess+0x94>)
 800da64:	5c8a      	ldrb	r2, [r1, r2]
 800da66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800da6a:	7b3a      	ldrb	r2, [r7, #12]
 800da6c:	490f      	ldr	r1, [pc, #60]	@ (800daac <UARTEx_SetNbDataToProcess+0x98>)
 800da6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da70:	fb93 f3f2 	sdiv	r3, r3, r2
 800da74:	b29a      	uxth	r2, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da7c:	7bfb      	ldrb	r3, [r7, #15]
 800da7e:	7b7a      	ldrb	r2, [r7, #13]
 800da80:	4909      	ldr	r1, [pc, #36]	@ (800daa8 <UARTEx_SetNbDataToProcess+0x94>)
 800da82:	5c8a      	ldrb	r2, [r1, r2]
 800da84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800da88:	7b7a      	ldrb	r2, [r7, #13]
 800da8a:	4908      	ldr	r1, [pc, #32]	@ (800daac <UARTEx_SetNbDataToProcess+0x98>)
 800da8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da8e:	fb93 f3f2 	sdiv	r3, r3, r2
 800da92:	b29a      	uxth	r2, r3
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800da9a:	bf00      	nop
 800da9c:	3714      	adds	r7, #20
 800da9e:	46bd      	mov	sp, r7
 800daa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa4:	4770      	bx	lr
 800daa6:	bf00      	nop
 800daa8:	0800dc50 	.word	0x0800dc50
 800daac:	0800dc58 	.word	0x0800dc58

0800dab0 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b083      	sub	sp, #12
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	f043 0202 	orr.w	r2, r3, #2
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	685a      	ldr	r2, [r3, #4]
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	021b      	lsls	r3, r3, #8
 800dad0:	431a      	orrs	r2, r3
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f023 0202 	bic.w	r2, r3, #2
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	601a      	str	r2, [r3, #0]
}
 800dae2:	bf00      	nop
 800dae4:	370c      	adds	r7, #12
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr

0800daee <memset>:
 800daee:	4402      	add	r2, r0
 800daf0:	4603      	mov	r3, r0
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d100      	bne.n	800daf8 <memset+0xa>
 800daf6:	4770      	bx	lr
 800daf8:	f803 1b01 	strb.w	r1, [r3], #1
 800dafc:	e7f9      	b.n	800daf2 <memset+0x4>
	...

0800db00 <__libc_init_array>:
 800db00:	b570      	push	{r4, r5, r6, lr}
 800db02:	4d0d      	ldr	r5, [pc, #52]	@ (800db38 <__libc_init_array+0x38>)
 800db04:	2600      	movs	r6, #0
 800db06:	4c0d      	ldr	r4, [pc, #52]	@ (800db3c <__libc_init_array+0x3c>)
 800db08:	1b64      	subs	r4, r4, r5
 800db0a:	10a4      	asrs	r4, r4, #2
 800db0c:	42a6      	cmp	r6, r4
 800db0e:	d109      	bne.n	800db24 <__libc_init_array+0x24>
 800db10:	4d0b      	ldr	r5, [pc, #44]	@ (800db40 <__libc_init_array+0x40>)
 800db12:	2600      	movs	r6, #0
 800db14:	4c0b      	ldr	r4, [pc, #44]	@ (800db44 <__libc_init_array+0x44>)
 800db16:	f000 f817 	bl	800db48 <_init>
 800db1a:	1b64      	subs	r4, r4, r5
 800db1c:	10a4      	asrs	r4, r4, #2
 800db1e:	42a6      	cmp	r6, r4
 800db20:	d105      	bne.n	800db2e <__libc_init_array+0x2e>
 800db22:	bd70      	pop	{r4, r5, r6, pc}
 800db24:	f855 3b04 	ldr.w	r3, [r5], #4
 800db28:	3601      	adds	r6, #1
 800db2a:	4798      	blx	r3
 800db2c:	e7ee      	b.n	800db0c <__libc_init_array+0xc>
 800db2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800db32:	3601      	adds	r6, #1
 800db34:	4798      	blx	r3
 800db36:	e7f2      	b.n	800db1e <__libc_init_array+0x1e>
 800db38:	0800dc68 	.word	0x0800dc68
 800db3c:	0800dc68 	.word	0x0800dc68
 800db40:	0800dc68 	.word	0x0800dc68
 800db44:	0800dc6c 	.word	0x0800dc6c

0800db48 <_init>:
 800db48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db4a:	bf00      	nop
 800db4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db4e:	bc08      	pop	{r3}
 800db50:	469e      	mov	lr, r3
 800db52:	4770      	bx	lr

0800db54 <_fini>:
 800db54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db56:	bf00      	nop
 800db58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db5a:	bc08      	pop	{r3}
 800db5c:	469e      	mov	lr, r3
 800db5e:	4770      	bx	lr
