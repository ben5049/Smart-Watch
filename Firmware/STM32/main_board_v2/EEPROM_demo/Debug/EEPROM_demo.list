
EEPROM_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d718  0800026c  0800026c  0001026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800d984  0800d984  0001d984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800da84  0800da84  0001da84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800da8c  0800da8c  0001da8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800da90  0800da90  0001da90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000d09  20000000  0800da94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000082c  20000d0c  0800e79d  00020d0c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001538  0800e79d  00021538  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020d09  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020d3f  2**0
                  CONTENTS, READONLY
 11 .debug_info   00030a02  00000000  00000000  00020d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000520a  00000000  00000000  00051784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002808  00000000  00000000  00056990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001f32  00000000  00000000  00059198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00044e65  00000000  00000000  0005b0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00035b31  00000000  00000000  0009ff2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a1b74  00000000  00000000  000d5a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000aea0  00000000  00000000  002775d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008c  00000000  00000000  00282474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800026c <__do_global_dtors_aux>:
 800026c:	b510      	push	{r4, lr}
 800026e:	4c05      	ldr	r4, [pc, #20]	; (8000284 <__do_global_dtors_aux+0x18>)
 8000270:	7823      	ldrb	r3, [r4, #0]
 8000272:	b933      	cbnz	r3, 8000282 <__do_global_dtors_aux+0x16>
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <__do_global_dtors_aux+0x1c>)
 8000276:	b113      	cbz	r3, 800027e <__do_global_dtors_aux+0x12>
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <__do_global_dtors_aux+0x20>)
 800027a:	f3af 8000 	nop.w
 800027e:	2301      	movs	r3, #1
 8000280:	7023      	strb	r3, [r4, #0]
 8000282:	bd10      	pop	{r4, pc}
 8000284:	20000d0c 	.word	0x20000d0c
 8000288:	00000000 	.word	0x00000000
 800028c:	0800d96c 	.word	0x0800d96c

08000290 <frame_dummy>:
 8000290:	b508      	push	{r3, lr}
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <frame_dummy+0x10>)
 8000294:	b11b      	cbz	r3, 800029e <frame_dummy+0xe>
 8000296:	4903      	ldr	r1, [pc, #12]	; (80002a4 <frame_dummy+0x14>)
 8000298:	4803      	ldr	r0, [pc, #12]	; (80002a8 <frame_dummy+0x18>)
 800029a:	f3af 8000 	nop.w
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	00000000 	.word	0x00000000
 80002a4:	20000d10 	.word	0x20000d10
 80002a8:	0800d96c 	.word	0x0800d96c

080002ac <__aeabi_uldivmod>:
 80002ac:	b953      	cbnz	r3, 80002c4 <__aeabi_uldivmod+0x18>
 80002ae:	b94a      	cbnz	r2, 80002c4 <__aeabi_uldivmod+0x18>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	bf08      	it	eq
 80002b4:	2800      	cmpeq	r0, #0
 80002b6:	bf1c      	itt	ne
 80002b8:	f04f 31ff 	movne.w	r1, #4294967295
 80002bc:	f04f 30ff 	movne.w	r0, #4294967295
 80002c0:	f000 b982 	b.w	80005c8 <__aeabi_idiv0>
 80002c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002cc:	f000 f806 	bl	80002dc <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4770      	bx	lr

080002dc <__udivmoddi4>:
 80002dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002e2:	460d      	mov	r5, r1
 80002e4:	4604      	mov	r4, r0
 80002e6:	460f      	mov	r7, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d146      	bne.n	800037a <__udivmoddi4+0x9e>
 80002ec:	428a      	cmp	r2, r1
 80002ee:	4694      	mov	ip, r2
 80002f0:	d95e      	bls.n	80003b0 <__udivmoddi4+0xd4>
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	b143      	cbz	r3, 800030a <__udivmoddi4+0x2e>
 80002f8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002fc:	f1c3 0220 	rsb	r2, r3, #32
 8000300:	409f      	lsls	r7, r3
 8000302:	409c      	lsls	r4, r3
 8000304:	fa20 f202 	lsr.w	r2, r0, r2
 8000308:	4317      	orrs	r7, r2
 800030a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800030e:	fa1f f58c 	uxth.w	r5, ip
 8000312:	0c22      	lsrs	r2, r4, #16
 8000314:	fbb7 f1fe 	udiv	r1, r7, lr
 8000318:	fb0e 7711 	mls	r7, lr, r1, r7
 800031c:	fb01 f005 	mul.w	r0, r1, r5
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	4290      	cmp	r0, r2
 8000326:	d908      	bls.n	800033a <__udivmoddi4+0x5e>
 8000328:	eb1c 0202 	adds.w	r2, ip, r2
 800032c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x5c>
 8000332:	4290      	cmp	r0, r2
 8000334:	f200 8134 	bhi.w	80005a0 <__udivmoddi4+0x2c4>
 8000338:	4639      	mov	r1, r7
 800033a:	1a12      	subs	r2, r2, r0
 800033c:	b2a4      	uxth	r4, r4
 800033e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000342:	fb0e 2210 	mls	r2, lr, r0, r2
 8000346:	fb00 f505 	mul.w	r5, r0, r5
 800034a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034e:	42a5      	cmp	r5, r4
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x88>
 8000352:	eb1c 0404 	adds.w	r4, ip, r4
 8000356:	f100 32ff 	add.w	r2, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x86>
 800035c:	42a5      	cmp	r5, r4
 800035e:	f200 8119 	bhi.w	8000594 <__udivmoddi4+0x2b8>
 8000362:	4610      	mov	r0, r2
 8000364:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	2100      	movs	r1, #0
 800036c:	b11e      	cbz	r6, 8000376 <__udivmoddi4+0x9a>
 800036e:	40dc      	lsrs	r4, r3
 8000370:	2300      	movs	r3, #0
 8000372:	e9c6 4300 	strd	r4, r3, [r6]
 8000376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0xb4>
 800037e:	2e00      	cmp	r6, #0
 8000380:	f000 80fc 	beq.w	800057c <__udivmoddi4+0x2a0>
 8000384:	2100      	movs	r1, #0
 8000386:	e9c6 0500 	strd	r0, r5, [r6]
 800038a:	4608      	mov	r0, r1
 800038c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000390:	fab3 f183 	clz	r1, r3
 8000394:	2900      	cmp	r1, #0
 8000396:	d14c      	bne.n	8000432 <__udivmoddi4+0x156>
 8000398:	42ab      	cmp	r3, r5
 800039a:	f0c0 80f2 	bcc.w	8000582 <__udivmoddi4+0x2a6>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f240 80ef 	bls.w	8000582 <__udivmoddi4+0x2a6>
 80003a4:	4608      	mov	r0, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d0e5      	beq.n	8000376 <__udivmoddi4+0x9a>
 80003aa:	e9c6 4700 	strd	r4, r7, [r6]
 80003ae:	e7e2      	b.n	8000376 <__udivmoddi4+0x9a>
 80003b0:	b902      	cbnz	r2, 80003b4 <__udivmoddi4+0xd8>
 80003b2:	deff      	udf	#255	; 0xff
 80003b4:	fab2 f382 	clz	r3, r2
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	f040 809f 	bne.w	80004fc <__udivmoddi4+0x220>
 80003be:	1a8a      	subs	r2, r1, r2
 80003c0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c4:	fa1f f78c 	uxth.w	r7, ip
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ce:	fb0e 2015 	mls	r0, lr, r5, r2
 80003d2:	0c22      	lsrs	r2, r4, #16
 80003d4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003d8:	fb07 f005 	mul.w	r0, r7, r5
 80003dc:	4290      	cmp	r0, r2
 80003de:	d90f      	bls.n	8000400 <__udivmoddi4+0x124>
 80003e0:	eb1c 0202 	adds.w	r2, ip, r2
 80003e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003e8:	bf2c      	ite	cs
 80003ea:	f04f 0901 	movcs.w	r9, #1
 80003ee:	f04f 0900 	movcc.w	r9, #0
 80003f2:	4290      	cmp	r0, r2
 80003f4:	d903      	bls.n	80003fe <__udivmoddi4+0x122>
 80003f6:	f1b9 0f00 	cmp.w	r9, #0
 80003fa:	f000 80ce 	beq.w	800059a <__udivmoddi4+0x2be>
 80003fe:	4645      	mov	r5, r8
 8000400:	1a12      	subs	r2, r2, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb2 f0fe 	udiv	r0, r2, lr
 8000408:	fb0e 2210 	mls	r2, lr, r0, r2
 800040c:	fb00 f707 	mul.w	r7, r0, r7
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	42a7      	cmp	r7, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x14e>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x14c>
 8000422:	42a7      	cmp	r7, r4
 8000424:	f200 80b3 	bhi.w	800058e <__udivmoddi4+0x2b2>
 8000428:	4610      	mov	r0, r2
 800042a:	1be4      	subs	r4, r4, r7
 800042c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000430:	e79c      	b.n	800036c <__udivmoddi4+0x90>
 8000432:	f1c1 0420 	rsb	r4, r1, #32
 8000436:	408b      	lsls	r3, r1
 8000438:	fa05 fc01 	lsl.w	ip, r5, r1
 800043c:	fa22 f704 	lsr.w	r7, r2, r4
 8000440:	40e5      	lsrs	r5, r4
 8000442:	408a      	lsls	r2, r1
 8000444:	431f      	orrs	r7, r3
 8000446:	fa20 f304 	lsr.w	r3, r0, r4
 800044a:	4088      	lsls	r0, r1
 800044c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000450:	ea43 030c 	orr.w	r3, r3, ip
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800045c:	fbb5 fef8 	udiv	lr, r5, r8
 8000460:	fb08 551e 	mls	r5, r8, lr, r5
 8000464:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000468:	fb0e f90c 	mul.w	r9, lr, ip
 800046c:	45a9      	cmp	r9, r5
 800046e:	d90e      	bls.n	800048e <__udivmoddi4+0x1b2>
 8000470:	197d      	adds	r5, r7, r5
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	bf2c      	ite	cs
 8000478:	f04f 0b01 	movcs.w	fp, #1
 800047c:	f04f 0b00 	movcc.w	fp, #0
 8000480:	45a9      	cmp	r9, r5
 8000482:	d903      	bls.n	800048c <__udivmoddi4+0x1b0>
 8000484:	f1bb 0f00 	cmp.w	fp, #0
 8000488:	f000 808d 	beq.w	80005a6 <__udivmoddi4+0x2ca>
 800048c:	46d6      	mov	lr, sl
 800048e:	eba5 0509 	sub.w	r5, r5, r9
 8000492:	fa1f f983 	uxth.w	r9, r3
 8000496:	fbb5 f3f8 	udiv	r3, r5, r8
 800049a:	fb08 5513 	mls	r5, r8, r3, r5
 800049e:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a2:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80004a6:	45ac      	cmp	ip, r5
 80004a8:	d906      	bls.n	80004b8 <__udivmoddi4+0x1dc>
 80004aa:	197d      	adds	r5, r7, r5
 80004ac:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x1da>
 80004b2:	45ac      	cmp	ip, r5
 80004b4:	d87e      	bhi.n	80005b4 <__udivmoddi4+0x2d8>
 80004b6:	4643      	mov	r3, r8
 80004b8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004bc:	eba5 050c 	sub.w	r5, r5, ip
 80004c0:	fba3 9802 	umull	r9, r8, r3, r2
 80004c4:	4545      	cmp	r5, r8
 80004c6:	46ce      	mov	lr, r9
 80004c8:	46c4      	mov	ip, r8
 80004ca:	d302      	bcc.n	80004d2 <__udivmoddi4+0x1f6>
 80004cc:	d106      	bne.n	80004dc <__udivmoddi4+0x200>
 80004ce:	4548      	cmp	r0, r9
 80004d0:	d204      	bcs.n	80004dc <__udivmoddi4+0x200>
 80004d2:	3b01      	subs	r3, #1
 80004d4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004dc:	2e00      	cmp	r6, #0
 80004de:	d06f      	beq.n	80005c0 <__udivmoddi4+0x2e4>
 80004e0:	ebb0 020e 	subs.w	r2, r0, lr
 80004e4:	eb65 050c 	sbc.w	r5, r5, ip
 80004e8:	40ca      	lsrs	r2, r1
 80004ea:	fa05 f404 	lsl.w	r4, r5, r4
 80004ee:	40cd      	lsrs	r5, r1
 80004f0:	4618      	mov	r0, r3
 80004f2:	4314      	orrs	r4, r2
 80004f4:	2100      	movs	r1, #0
 80004f6:	e9c6 4500 	strd	r4, r5, [r6]
 80004fa:	e73c      	b.n	8000376 <__udivmoddi4+0x9a>
 80004fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000500:	f1c3 0220 	rsb	r2, r3, #32
 8000504:	4099      	lsls	r1, r3
 8000506:	409c      	lsls	r4, r3
 8000508:	40d5      	lsrs	r5, r2
 800050a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800050e:	fa20 f202 	lsr.w	r2, r0, r2
 8000512:	fa1f f78c 	uxth.w	r7, ip
 8000516:	fbb5 f0fe 	udiv	r0, r5, lr
 800051a:	430a      	orrs	r2, r1
 800051c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000520:	0c11      	lsrs	r1, r2, #16
 8000522:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000526:	fb00 f507 	mul.w	r5, r0, r7
 800052a:	428d      	cmp	r5, r1
 800052c:	d90e      	bls.n	800054c <__udivmoddi4+0x270>
 800052e:	eb1c 0101 	adds.w	r1, ip, r1
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	bf2c      	ite	cs
 8000538:	f04f 0901 	movcs.w	r9, #1
 800053c:	f04f 0900 	movcc.w	r9, #0
 8000540:	428d      	cmp	r5, r1
 8000542:	d902      	bls.n	800054a <__udivmoddi4+0x26e>
 8000544:	f1b9 0f00 	cmp.w	r9, #0
 8000548:	d031      	beq.n	80005ae <__udivmoddi4+0x2d2>
 800054a:	4640      	mov	r0, r8
 800054c:	1b49      	subs	r1, r1, r5
 800054e:	b292      	uxth	r2, r2
 8000550:	fbb1 f5fe 	udiv	r5, r1, lr
 8000554:	fb0e 1115 	mls	r1, lr, r5, r1
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	fb05 f107 	mul.w	r1, r5, r7
 8000560:	4291      	cmp	r1, r2
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x298>
 8000564:	eb1c 0202 	adds.w	r2, ip, r2
 8000568:	f105 38ff 	add.w	r8, r5, #4294967295
 800056c:	d201      	bcs.n	8000572 <__udivmoddi4+0x296>
 800056e:	4291      	cmp	r1, r2
 8000570:	d823      	bhi.n	80005ba <__udivmoddi4+0x2de>
 8000572:	4645      	mov	r5, r8
 8000574:	1a52      	subs	r2, r2, r1
 8000576:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800057a:	e726      	b.n	80003ca <__udivmoddi4+0xee>
 800057c:	4631      	mov	r1, r6
 800057e:	4630      	mov	r0, r6
 8000580:	e6f9      	b.n	8000376 <__udivmoddi4+0x9a>
 8000582:	1a84      	subs	r4, r0, r2
 8000584:	eb65 0203 	sbc.w	r2, r5, r3
 8000588:	2001      	movs	r0, #1
 800058a:	4617      	mov	r7, r2
 800058c:	e70b      	b.n	80003a6 <__udivmoddi4+0xca>
 800058e:	4464      	add	r4, ip
 8000590:	3802      	subs	r0, #2
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14e>
 8000594:	4464      	add	r4, ip
 8000596:	3802      	subs	r0, #2
 8000598:	e6e4      	b.n	8000364 <__udivmoddi4+0x88>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e72f      	b.n	8000400 <__udivmoddi4+0x124>
 80005a0:	3902      	subs	r1, #2
 80005a2:	4462      	add	r2, ip
 80005a4:	e6c9      	b.n	800033a <__udivmoddi4+0x5e>
 80005a6:	f1ae 0e02 	sub.w	lr, lr, #2
 80005aa:	443d      	add	r5, r7
 80005ac:	e76f      	b.n	800048e <__udivmoddi4+0x1b2>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	e7cb      	b.n	800054c <__udivmoddi4+0x270>
 80005b4:	3b02      	subs	r3, #2
 80005b6:	443d      	add	r5, r7
 80005b8:	e77e      	b.n	80004b8 <__udivmoddi4+0x1dc>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	e7d9      	b.n	8000574 <__udivmoddi4+0x298>
 80005c0:	4618      	mov	r0, r3
 80005c2:	4631      	mov	r1, r6
 80005c4:	e6d7      	b.n	8000376 <__udivmoddi4+0x9a>
 80005c6:	bf00      	nop

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <EEPROM_Init>:

#ifdef M24256X
#include "M24256X.h"
#endif

EEPROM_StatusTypeDef EEPROM_Init(EEPROM_HandleTypeDef *dev, I2C_HandleTypeDef *i2cHandle){
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]

	EEPROM_StatusTypeDef status = EEPROM_OK;
 80005d6:	2300      	movs	r3, #0
 80005d8:	73fb      	strb	r3, [r7, #15]

	/* Assign I2C handle */
	dev->i2cHandle = i2cHandle;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	601a      	str	r2, [r3, #0]

	return status;
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <EEPROM_ReadMemoryByte>:

EEPROM_StatusTypeDef EEPROM_ReadMemoryByte(EEPROM_HandleTypeDef *dev, uint16_t address, uint8_t *data){
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b08a      	sub	sp, #40	; 0x28
 80005f2:	af04      	add	r7, sp, #16
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	460b      	mov	r3, r1
 80005f8:	607a      	str	r2, [r7, #4]
 80005fa:	817b      	strh	r3, [r7, #10]

	EEPROM_StatusTypeDef status = EEPROM_OK;
 80005fc:	2300      	movs	r3, #0
 80005fe:	75fb      	strb	r3, [r7, #23]

#ifdef M24256X

	uint8_t attempts_remaining = M24256X_MAX_ATTEMPTS;
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	75bb      	strb	r3, [r7, #22]

	while (attempts_remaining > 0){
 8000604:	e01b      	b.n	800063e <EEPROM_ReadMemoryByte+0x50>
		status = HAL_I2C_Mem_Read(dev->i2cHandle, M24256X_MEM_DEV_ADDR, (address & 0x7FFF), I2C_MEMADD_SIZE_16BIT, data, 1, HAL_MAX_DELAY);
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6818      	ldr	r0, [r3, #0]
 800060a:	897b      	ldrh	r3, [r7, #10]
 800060c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000610:	b29a      	uxth	r2, r3
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	9302      	str	r3, [sp, #8]
 8000618:	2301      	movs	r3, #1
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2302      	movs	r3, #2
 8000622:	21a0      	movs	r1, #160	; 0xa0
 8000624:	f004 fe06 	bl	8005234 <HAL_I2C_Mem_Read>
 8000628:	4603      	mov	r3, r0
 800062a:	75fb      	strb	r3, [r7, #23]

		if (status == EEPROM_OK){
 800062c:	7dfb      	ldrb	r3, [r7, #23]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d102      	bne.n	8000638 <EEPROM_ReadMemoryByte+0x4a>
			attempts_remaining = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	75bb      	strb	r3, [r7, #22]
 8000636:	e002      	b.n	800063e <EEPROM_ReadMemoryByte+0x50>
		}
		else{
			attempts_remaining--;
 8000638:	7dbb      	ldrb	r3, [r7, #22]
 800063a:	3b01      	subs	r3, #1
 800063c:	75bb      	strb	r3, [r7, #22]
	while (attempts_remaining > 0){
 800063e:	7dbb      	ldrb	r3, [r7, #22]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1e0      	bne.n	8000606 <EEPROM_ReadMemoryByte+0x18>
		}
	}

#endif

	return status;
 8000644:	7dfb      	ldrb	r3, [r7, #23]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3718      	adds	r7, #24
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <EEPROM_WriteMemoryByte>:

EEPROM_StatusTypeDef EEPROM_WriteMemoryByte(EEPROM_HandleTypeDef *dev, uint16_t address, uint8_t *data){
 800064e:	b580      	push	{r7, lr}
 8000650:	b08a      	sub	sp, #40	; 0x28
 8000652:	af04      	add	r7, sp, #16
 8000654:	60f8      	str	r0, [r7, #12]
 8000656:	460b      	mov	r3, r1
 8000658:	607a      	str	r2, [r7, #4]
 800065a:	817b      	strh	r3, [r7, #10]

	EEPROM_StatusTypeDef status = EEPROM_OK;
 800065c:	2300      	movs	r3, #0
 800065e:	75fb      	strb	r3, [r7, #23]

#ifdef M24256X

	uint8_t attempts_remaining = M24256X_MAX_ATTEMPTS;
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	75bb      	strb	r3, [r7, #22]

	while (attempts_remaining > 0){
 8000664:	e01b      	b.n	800069e <EEPROM_WriteMemoryByte+0x50>
		status = HAL_I2C_Mem_Write(dev->i2cHandle, M24256X_MEM_DEV_ADDR, (address & 0x7FFF), I2C_MEMADD_SIZE_16BIT, data, 1, HAL_MAX_DELAY);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6818      	ldr	r0, [r3, #0]
 800066a:	897b      	ldrh	r3, [r7, #10]
 800066c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000670:	b29a      	uxth	r2, r3
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	9302      	str	r3, [sp, #8]
 8000678:	2301      	movs	r3, #1
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2302      	movs	r3, #2
 8000682:	21a0      	movs	r1, #160	; 0xa0
 8000684:	f004 fcc2 	bl	800500c <HAL_I2C_Mem_Write>
 8000688:	4603      	mov	r3, r0
 800068a:	75fb      	strb	r3, [r7, #23]

		if (status == EEPROM_OK){
 800068c:	7dfb      	ldrb	r3, [r7, #23]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d102      	bne.n	8000698 <EEPROM_WriteMemoryByte+0x4a>
			attempts_remaining = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	75bb      	strb	r3, [r7, #22]
 8000696:	e002      	b.n	800069e <EEPROM_WriteMemoryByte+0x50>
		}
		else{
			attempts_remaining--;
 8000698:	7dbb      	ldrb	r3, [r7, #22]
 800069a:	3b01      	subs	r3, #1
 800069c:	75bb      	strb	r3, [r7, #22]
	while (attempts_remaining > 0){
 800069e:	7dbb      	ldrb	r3, [r7, #22]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1e0      	bne.n	8000666 <EEPROM_WriteMemoryByte+0x18>
		}
	}

#endif

	return status;
 80006a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f002 fcb5 	bl	8003024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f855 	bl	8000768 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80006be:	f000 f8bd 	bl	800083c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f000 ffff 	bl	80016c4 <MX_GPIO_Init>
  MX_DCACHE1_Init();
 80006c6:	f000 f937 	bl	8000938 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 80006ca:	f000 f94b 	bl	8000964 <MX_DCACHE2_Init>
  MX_ICACHE_Init();
 80006ce:	f000 fc3d 	bl	8000f4c <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80006d2:	f000 fc6d 	bl	8000fb0 <MX_LPUART1_UART_Init>
  MX_OCTOSPI1_Init();
 80006d6:	f000 fdd3 	bl	8001280 <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 80006da:	f000 f90b 	bl	80008f4 <MX_CRC_Init>
  MX_DMA2D_Init();
 80006de:	f000 f957 	bl	8000990 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80006e2:	f000 f993 	bl	8000a0c <MX_DSIHOST_DSI_Init>
  MX_GFXMMU_Init();
 80006e6:	f000 fa8d 	bl	8000c04 <MX_GFXMMU_Init>
  MX_GPU2D_Init();
 80006ea:	f000 fadb 	bl	8000ca4 <MX_GPU2D_Init>
  MX_LTDC_Init();
 80006ee:	f000 fd43 	bl	8001178 <MX_LTDC_Init>
  MX_RTC_Init();
 80006f2:	f000 fef7 	bl	80014e4 <MX_RTC_Init>
  MX_OCTOSPI2_Init();
 80006f6:	f000 fe5d 	bl	80013b4 <MX_OCTOSPI2_Init>
  MX_ADF1_Init();
 80006fa:	f000 f8ad 	bl	8000858 <MX_ADF1_Init>
  MX_I2C1_Init();
 80006fe:	f000 fae5 	bl	8000ccc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000702:	f000 fb23 	bl	8000d4c <MX_I2C2_Init>
  MX_I2C4_Init();
 8000706:	f000 fba1 	bl	8000e4c <MX_I2C4_Init>
  MX_I2C6_Init();
 800070a:	f000 fbdf 	bl	8000ecc <MX_I2C6_Init>
  MX_USART1_UART_Init();
 800070e:	f000 fc9b 	bl	8001048 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000712:	f000 fce5 	bl	80010e0 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8000716:	f000 ff67 	bl	80015e8 <MX_SPI1_Init>
  MX_I2C3_Init();
 800071a:	f000 fb57 	bl	8000dcc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  EEPROM_Init(&heeprom, &hi2c4);
 800071e:	490f      	ldr	r1, [pc, #60]	; (800075c <main+0xac>)
 8000720:	480f      	ldr	r0, [pc, #60]	; (8000760 <main+0xb0>)
 8000722:	f7ff ff53 	bl	80005cc <EEPROM_Init>
  uint8_t testWrite = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	71fb      	strb	r3, [r7, #7]
  uint8_t testRead	= 0;
 800072a:	2300      	movs	r3, #0
 800072c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  EEPROM_WriteMemoryByte(&heeprom, 0x0800, &testWrite);
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	461a      	mov	r2, r3
 8000732:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000736:	480a      	ldr	r0, [pc, #40]	; (8000760 <main+0xb0>)
 8000738:	f7ff ff89 	bl	800064e <EEPROM_WriteMemoryByte>
  EEPROM_ReadMemoryByte(&heeprom, 0x0800, &testRead);
 800073c:	1dbb      	adds	r3, r7, #6
 800073e:	461a      	mov	r2, r3
 8000740:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000744:	4806      	ldr	r0, [pc, #24]	; (8000760 <main+0xb0>)
 8000746:	f7ff ff52 	bl	80005ee <EEPROM_ReadMemoryByte>
  HAL_UART_Transmit(&huart6, &testRead, 1, HAL_MAX_DELAY);
 800074a:	1db9      	adds	r1, r7, #6
 800074c:	f04f 33ff 	mov.w	r3, #4294967295
 8000750:	2201      	movs	r2, #1
 8000752:	4804      	ldr	r0, [pc, #16]	; (8000764 <main+0xb4>)
 8000754:	f00c fb66 	bl	800ce24 <HAL_UART_Transmit>
  while (1)
 8000758:	e7fe      	b.n	8000758 <main+0xa8>
 800075a:	bf00      	nop
 800075c:	20001038 	.word	0x20001038
 8000760:	200014bc 	.word	0x200014bc
 8000764:	20001208 	.word	0x20001208

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b09e      	sub	sp, #120	; 0x78
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0318 	add.w	r3, r7, #24
 8000772:	2260      	movs	r2, #96	; 0x60
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f00d f8cb 	bl	800d912 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	463b      	mov	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
 800078a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800078c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000790:	f006 ff24 	bl	80075dc <HAL_PWREx_ControlVoltageScaling>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800079a:	f001 fa1d 	bl	8001bd8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800079e:	f006 ff0d 	bl	80075bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007a2:	4b25      	ldr	r3, [pc, #148]	; (8000838 <SystemClock_Config+0xd0>)
 80007a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007a8:	4a23      	ldr	r2, [pc, #140]	; (8000838 <SystemClock_Config+0xd0>)
 80007aa:	f023 0318 	bic.w	r3, r3, #24
 80007ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80007b2:	2305      	movs	r3, #5
 80007b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007bc:	2381      	movs	r3, #129	; 0x81
 80007be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c0:	2302      	movs	r3, #2
 80007c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c4:	2303      	movs	r3, #3
 80007c6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007cc:	2301      	movs	r3, #1
 80007ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007d0:	230a      	movs	r3, #10
 80007d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007d8:	2302      	movs	r3, #2
 80007da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80007dc:	2301      	movs	r3, #1
 80007de:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80007e0:	230c      	movs	r3, #12
 80007e2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0318 	add.w	r3, r7, #24
 80007ec:	4618      	mov	r0, r3
 80007ee:	f006 ffe1 	bl	80077b4 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f8:	f001 f9ee 	bl	8001bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	231f      	movs	r3, #31
 80007fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000800:	2303      	movs	r3, #3
 8000802:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	2104      	movs	r1, #4
 8000818:	4618      	mov	r0, r3
 800081a:	f007 fea7 	bl	800856c <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000824:	f001 f9d8 	bl	8001bd8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000828:	f008 fa22 	bl	8008c70 <HAL_RCC_EnableCSS>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 800082c:	f00b f99e 	bl	800bb6c <HAL_RCCEx_EnableLSECSS>
}
 8000830:	bf00      	nop
 8000832:	3778      	adds	r7, #120	; 0x78
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	46020c00 	.word	0x46020c00

0800083c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000840:	f006 ffa8 	bl	8007794 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000844:	2002      	movs	r0, #2
 8000846:	f006 ff55 	bl	80076f4 <HAL_PWREx_ConfigSupply>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000850:	f001 f9c2 	bl	8001bd8 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 800085c:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <MX_ADF1_Init+0x90>)
 800085e:	4a23      	ldr	r2, [pc, #140]	; (80008ec <MX_ADF1_Init+0x94>)
 8000860:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <MX_ADF1_Init+0x90>)
 8000864:	2201      	movs	r2, #1
 8000866:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <MX_ADF1_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 800086e:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <MX_ADF1_Init+0x90>)
 8000870:	2201      	movs	r2, #1
 8000872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <MX_ADF1_Init+0x90>)
 8000878:	2210      	movs	r2, #16
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_ADF1_Init+0x90>)
 800087e:	2200      	movs	r2, #0
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_ADF1_Init+0x90>)
 8000884:	2204      	movs	r2, #4
 8000886:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_ADF1_Init+0x90>)
 800088a:	2201      	movs	r2, #1
 800088c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 800088e:	4816      	ldr	r0, [pc, #88]	; (80008e8 <MX_ADF1_Init+0x90>)
 8000890:	f005 fd34 	bl	80062fc <HAL_MDF_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ADF1_Init+0x46>
  {
    Error_Handler();
 800089a:	f001 f99d 	bl	8001bd8 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_ADF1_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_ADF1_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_ADF1_Init+0x98>)
 80008ac:	2240      	movs	r2, #64	; 0x40
 80008ae:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_ADF1_Init+0x98>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_ADF1_Init+0x98>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_ADF1_Init+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_ADF1_Init+0x98>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_ADF1_Init+0x98>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MX_ADF1_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <MX_ADF1_Init+0x98>)
 80008da:	2200      	movs	r2, #0
 80008dc:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 80008de:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <MX_ADF1_Init+0x98>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000d28 	.word	0x20000d28
 80008ec:	46024080 	.word	0x46024080
 80008f0:	20000d6c 	.word	0x20000d6c

080008f4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <MX_CRC_Init+0x3c>)
 80008fa:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <MX_CRC_Init+0x40>)
 80008fc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_CRC_Init+0x3c>)
 8000900:	2200      	movs	r2, #0
 8000902:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_CRC_Init+0x3c>)
 8000906:	2200      	movs	r2, #0
 8000908:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_CRC_Init+0x3c>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MX_CRC_Init+0x3c>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_CRC_Init+0x3c>)
 8000918:	2201      	movs	r2, #1
 800091a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_CRC_Init+0x3c>)
 800091e:	f002 fcd3 	bl	80032c8 <HAL_CRC_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000928:	f001 f956 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000de8 	.word	0x20000de8
 8000934:	40023000 	.word	0x40023000

08000938 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <MX_DCACHE1_Init+0x24>)
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <MX_DCACHE1_Init+0x28>)
 8000940:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_DCACHE1_Init+0x24>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_DCACHE1_Init+0x24>)
 800094a:	f002 fdaf 	bl	80034ac <HAL_DCACHE_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 8000954:	f001 f940 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000e0c 	.word	0x20000e0c
 8000960:	40031400 	.word	0x40031400

08000964 <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <MX_DCACHE2_Init+0x24>)
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <MX_DCACHE2_Init+0x28>)
 800096c:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_DCACHE2_Init+0x24>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_DCACHE2_Init+0x24>)
 8000976:	f002 fd99 	bl	80034ac <HAL_DCACHE_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_DCACHE2_Init+0x20>
  {
    Error_Handler();
 8000980:	f001 f92a 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000e38 	.word	0x20000e38
 800098c:	40031800 	.word	0x40031800

08000990 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MX_DMA2D_Init+0x74>)
 8000996:	4a1c      	ldr	r2, [pc, #112]	; (8000a08 <MX_DMA2D_Init+0x78>)
 8000998:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_DMA2D_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_DMA2D_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 608;
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <MX_DMA2D_Init+0x74>)
 80009a8:	f44f 7218 	mov.w	r2, #608	; 0x260
 80009ac:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <MX_DMA2D_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_DMA2D_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <MX_DMA2D_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_DMA2D_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_DMA2D_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009cc:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <MX_DMA2D_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_DMA2D_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <MX_DMA2D_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009de:	4809      	ldr	r0, [pc, #36]	; (8000a04 <MX_DMA2D_Init+0x74>)
 80009e0:	f002 fe8b 	bl	80036fa <HAL_DMA2D_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 80009ea:	f001 f8f5 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009ee:	2101      	movs	r1, #1
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_DMA2D_Init+0x74>)
 80009f2:	f002 fff3 	bl	80039dc <HAL_DMA2D_ConfigLayer>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 80009fc:	f001 f8ec 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000e64 	.word	0x20000e64
 8000a08:	4002b000 	.word	0x4002b000

08000a0c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b0ae      	sub	sp, #184	; 0xb8
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000a12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]
 8000a22:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000a24:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a28:	2224      	movs	r2, #36	; 0x24
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f00c ff70 	bl	800d912 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000a32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]
 8000a42:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000a44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a48:	2234      	movs	r2, #52	; 0x34
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f00c ff60 	bl	800d912 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	222c      	movs	r2, #44	; 0x2c
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f00c ff5a 	bl	800d912 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000a5e:	4b67      	ldr	r3, [pc, #412]	; (8000bfc <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a60:	4a67      	ldr	r2, [pc, #412]	; (8000c00 <MX_DSIHOST_DSI_Init+0x1f4>)
 8000a62:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000a64:	4b65      	ldr	r3, [pc, #404]	; (8000bfc <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000a6a:	4b64      	ldr	r3, [pc, #400]	; (8000bfc <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a6c:	2204      	movs	r2, #4
 8000a6e:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000a70:	4b62      	ldr	r3, [pc, #392]	; (8000bfc <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 8000a76:	4b61      	ldr	r3, [pc, #388]	; (8000bfc <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a78:	2208      	movs	r2, #8
 8000a7a:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 8000a7c:	4b5f      	ldr	r3, [pc, #380]	; (8000bfc <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 8000a82:	237d      	movs	r3, #125	; 0x7d
 8000a84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 8000a94:	2301      	movs	r3, #1
 8000a96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000aa6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4853      	ldr	r0, [pc, #332]	; (8000bfc <MX_DSIHOST_DSI_Init+0x1f0>)
 8000aae:	f003 f93d 	bl	8003d2c <HAL_DSI_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 8000ab8:	f001 f88e 	bl	8001bd8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.LowPowerReadTimeout = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.BTATimeout = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000af0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000af4:	4619      	mov	r1, r3
 8000af6:	4841      	ldr	r0, [pc, #260]	; (8000bfc <MX_DSIHOST_DSI_Init+0x1f0>)
 8000af8:	f003 fdc8 	bl	800468c <HAL_DSI_ConfigHostTimeouts>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_DSIHOST_DSI_Init+0xfa>
  {
    Error_Handler();
 8000b02:	f001 f869 	bl	8001bd8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 10;
 8000b06:	230a      	movs	r3, #10
 8000b08:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.ClockLaneLP2HSTime = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneHS2LPTime = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneLP2HSTime = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.DataLaneMaxReadTime = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.StopWaitTime = 10;
 8000b1a:	230a      	movs	r3, #10
 8000b1c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000b1e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b22:	4619      	mov	r1, r3
 8000b24:	4835      	ldr	r0, [pc, #212]	; (8000bfc <MX_DSIHOST_DSI_Init+0x1f0>)
 8000b26:	f003 fd1b 	bl	8004560 <HAL_DSI_ConfigPhyTimer>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000b30:	f001 f852 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000b34:	2104      	movs	r1, #4
 8000b36:	4831      	ldr	r0, [pc, #196]	; (8000bfc <MX_DSIHOST_DSI_Init+0x1f0>)
 8000b38:	f003 fcea 	bl	8004510 <HAL_DSI_ConfigFlowControl>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000b42:	f001 f849 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000b46:	2100      	movs	r1, #0
 8000b48:	482c      	ldr	r0, [pc, #176]	; (8000bfc <MX_DSIHOST_DSI_Init+0x1f0>)
 8000b4a:	f003 f9c3 	bl	8003ed4 <HAL_DSI_ConfigErrorMonitor>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 8000b54:	f001 f840 	bl	8001bd8 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	65fb      	str	r3, [r7, #92]	; 0x5c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000b8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b90:	4619      	mov	r1, r3
 8000b92:	481a      	ldr	r0, [pc, #104]	; (8000bfc <MX_DSIHOST_DSI_Init+0x1f0>)
 8000b94:	f003 fc5e 	bl	8004454 <HAL_DSI_ConfigCommand>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_DSIHOST_DSI_Init+0x196>
  {
    Error_Handler();
 8000b9e:	f001 f81b 	bl	8001bd8 <Error_Handler>
  }
  CmdCfg.ColorCoding = DSI_RGB888;
 8000ba2:	2305      	movs	r3, #5
 8000ba4:	60bb      	str	r3, [r7, #8]
  CmdCfg.CommandSize = 416;
 8000ba6:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8000baa:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000bac:	2310      	movs	r3, #16
 8000bae:	613b      	str	r3, [r7, #16]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000bc4:	2340      	movs	r3, #64	; 0x40
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480a      	ldr	r0, [pc, #40]	; (8000bfc <MX_DSIHOST_DSI_Init+0x1f0>)
 8000bd2:	f003 fb68 	bl	80042a6 <HAL_DSI_ConfigAdaptedCommandMode>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 8000bdc:	f000 fffc 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000be0:	2100      	movs	r1, #0
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_DSIHOST_DSI_Init+0x1f0>)
 8000be4:	f003 fb34 	bl	8004250 <HAL_DSI_SetGenericVCID>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 8000bee:	f000 fff3 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	37b8      	adds	r7, #184	; 0xb8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000ec4 	.word	0x20000ec4
 8000c00:	40016c00 	.word	0x40016c00

08000c04 <MX_GFXMMU_Init>:
  * @brief GFXMMU Initialization Function
  * @param None
  * @retval None
  */
static void MX_GFXMMU_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END GFXMMU_Init 0 */

  /* USER CODE BEGIN GFXMMU_Init 1 */

  /* USER CODE END GFXMMU_Init 1 */
  hgfxmmu.Instance = GFXMMU;
 8000c08:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <MX_GFXMMU_Init+0x94>)
 8000c0a:	4a24      	ldr	r2, [pc, #144]	; (8000c9c <MX_GFXMMU_Init+0x98>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hgfxmmu.Init.BlocksPerLine = GFXMMU_256BLOCKS;
 8000c0e:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <MX_GFXMMU_Init+0x94>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  hgfxmmu.Init.DefaultValue = 0;
 8000c14:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <MX_GFXMMU_Init+0x94>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hgfxmmu.Init.Buffers.Buf0Address = 0;
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <MX_GFXMMU_Init+0x94>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
  hgfxmmu.Init.Buffers.Buf1Address = 0;
 8000c20:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_GFXMMU_Init+0x94>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  hgfxmmu.Init.Buffers.Buf2Address = 0;
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <MX_GFXMMU_Init+0x94>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
  hgfxmmu.Init.Buffers.Buf3Address = 0;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_GFXMMU_Init+0x94>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  hgfxmmu.Init.CachePrefetch.Activation = ENABLE;
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <MX_GFXMMU_Init+0x94>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	771a      	strb	r2, [r3, #28]
  hgfxmmu.Init.CachePrefetch.CacheLock = GFXMMU_CACHE_LOCK_ENABLE;
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_GFXMMU_Init+0x94>)
 8000c3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c3e:	621a      	str	r2, [r3, #32]
  hgfxmmu.Init.CachePrefetch.CacheLockBuffer = GFXMMU_CACHE_LOCK_BUFFER0;
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <MX_GFXMMU_Init+0x94>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  hgfxmmu.Init.CachePrefetch.CacheForce = GFXMMU_CACHE_FORCE_ENABLE;
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_GFXMMU_Init+0x94>)
 8000c48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c4c:	629a      	str	r2, [r3, #40]	; 0x28
  hgfxmmu.Init.CachePrefetch.OutterBufferability = GFXMMU_OUTTER_BUFFERABILITY_ENABLE;
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <MX_GFXMMU_Init+0x94>)
 8000c50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c54:	62da      	str	r2, [r3, #44]	; 0x2c
  hgfxmmu.Init.CachePrefetch.OutterCachability = GFXMMU_OUTTER_CACHABILITY_ENABLE;
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <MX_GFXMMU_Init+0x94>)
 8000c58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c5c:	631a      	str	r2, [r3, #48]	; 0x30
  hgfxmmu.Init.CachePrefetch.Prefetch = GFXMMU_PREFETCH_ENABLE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_GFXMMU_Init+0x94>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	635a      	str	r2, [r3, #52]	; 0x34
  hgfxmmu.Init.Interrupts.Activation = ENABLE;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_GFXMMU_Init+0x94>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_GFXMMU_Init(&hgfxmmu) != HAL_OK)
 8000c6c:	480a      	ldr	r0, [pc, #40]	; (8000c98 <MX_GFXMMU_Init+0x94>)
 8000c6e:	f003 fdd3 	bl	8004818 <HAL_GFXMMU_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_GFXMMU_Init+0x78>
  {
    Error_Handler();
 8000c78:	f000 ffae 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_GFXMMU_ConfigLut(&hgfxmmu, GFXMMU_LUT_FIRST, GFXMMU_LUT_SIZE, (uint32_t)gfxmmu_lut_config) != HAL_OK)
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_GFXMMU_Init+0x9c>)
 8000c7e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8000c82:	2100      	movs	r1, #0
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <MX_GFXMMU_Init+0x94>)
 8000c86:	f003 fe47 	bl	8004918 <HAL_GFXMMU_ConfigLut>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_GFXMMU_Init+0x90>
  {
    Error_Handler();
 8000c90:	f000 ffa2 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN GFXMMU_Init 2 */

  /* USER CODE END GFXMMU_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000ee8 	.word	0x20000ee8
 8000c9c:	4002c000 	.word	0x4002c000
 8000ca0:	20000000 	.word	0x20000000

08000ca4 <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_GPU2D_Init+0x20>)
 8000caa:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <MX_GPU2D_Init+0x24>)
 8000cac:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_GPU2D_Init+0x20>)
 8000cb0:	f004 f8a6 	bl	8004e00 <HAL_GPU2D_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 8000cba:	f000 ff8d 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000f30 	.word	0x20000f30
 8000cc8:	4002f000 	.word	0x4002f000

08000ccc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000cd2:	4a1c      	ldr	r2, [pc, #112]	; (8000d44 <MX_I2C1_Init+0x78>)
 8000cd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000cd8:	4a1b      	ldr	r2, [pc, #108]	; (8000d48 <MX_I2C1_Init+0x7c>)
 8000cda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d06:	480e      	ldr	r0, [pc, #56]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000d08:	f004 f8e5 	bl	8004ed6 <HAL_I2C_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d12:	f000 ff61 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d16:	2100      	movs	r1, #0
 8000d18:	4809      	ldr	r0, [pc, #36]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000d1a:	f004 fe5d 	bl	80059d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d24:	f000 ff58 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_I2C1_Init+0x74>)
 8000d2c:	f004 fe9f 	bl	8005a6e <HAL_I2CEx_ConfigDigitalFilter>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d36:	f000 ff4f 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000f3c 	.word	0x20000f3c
 8000d44:	40005400 	.word	0x40005400
 8000d48:	30909dec 	.word	0x30909dec

08000d4c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <MX_I2C2_Init+0x74>)
 8000d52:	4a1c      	ldr	r2, [pc, #112]	; (8000dc4 <MX_I2C2_Init+0x78>)
 8000d54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_I2C2_Init+0x74>)
 8000d58:	4a1b      	ldr	r2, [pc, #108]	; (8000dc8 <MX_I2C2_Init+0x7c>)
 8000d5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_I2C2_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_I2C2_Init+0x74>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <MX_I2C2_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_I2C2_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_I2C2_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_I2C2_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_I2C2_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d86:	480e      	ldr	r0, [pc, #56]	; (8000dc0 <MX_I2C2_Init+0x74>)
 8000d88:	f004 f8a5 	bl	8004ed6 <HAL_I2C_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d92:	f000 ff21 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d96:	2100      	movs	r1, #0
 8000d98:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <MX_I2C2_Init+0x74>)
 8000d9a:	f004 fe1d 	bl	80059d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000da4:	f000 ff18 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000da8:	2100      	movs	r1, #0
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_I2C2_Init+0x74>)
 8000dac:	f004 fe5f 	bl	8005a6e <HAL_I2CEx_ConfigDigitalFilter>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000db6:	f000 ff0f 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000f90 	.word	0x20000f90
 8000dc4:	40005800 	.word	0x40005800
 8000dc8:	30909dec 	.word	0x30909dec

08000dcc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <MX_I2C3_Init+0x74>)
 8000dd2:	4a1c      	ldr	r2, [pc, #112]	; (8000e44 <MX_I2C3_Init+0x78>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MX_I2C3_Init+0x74>)
 8000dd8:	4a1b      	ldr	r2, [pc, #108]	; (8000e48 <MX_I2C3_Init+0x7c>)
 8000dda:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <MX_I2C3_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <MX_I2C3_Init+0x74>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <MX_I2C3_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_I2C3_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <MX_I2C3_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_I2C3_Init+0x74>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MX_I2C3_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e06:	480e      	ldr	r0, [pc, #56]	; (8000e40 <MX_I2C3_Init+0x74>)
 8000e08:	f004 f865 	bl	8004ed6 <HAL_I2C_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e12:	f000 fee1 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e16:	2100      	movs	r1, #0
 8000e18:	4809      	ldr	r0, [pc, #36]	; (8000e40 <MX_I2C3_Init+0x74>)
 8000e1a:	f004 fddd 	bl	80059d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e24:	f000 fed8 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_I2C3_Init+0x74>)
 8000e2c:	f004 fe1f 	bl	8005a6e <HAL_I2CEx_ConfigDigitalFilter>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e36:	f000 fecf 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000fe4 	.word	0x20000fe4
 8000e44:	46002800 	.word	0x46002800
 8000e48:	30909dec 	.word	0x30909dec

08000e4c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <MX_I2C4_Init+0x74>)
 8000e52:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <MX_I2C4_Init+0x78>)
 8000e54:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30909DEC;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <MX_I2C4_Init+0x74>)
 8000e58:	4a1b      	ldr	r2, [pc, #108]	; (8000ec8 <MX_I2C4_Init+0x7c>)
 8000e5a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <MX_I2C4_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <MX_I2C4_Init+0x74>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <MX_I2C4_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <MX_I2C4_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MX_I2C4_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_I2C4_Init+0x74>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_I2C4_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000e86:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <MX_I2C4_Init+0x74>)
 8000e88:	f004 f825 	bl	8004ed6 <HAL_I2C_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000e92:	f000 fea1 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e96:	2100      	movs	r1, #0
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <MX_I2C4_Init+0x74>)
 8000e9a:	f004 fd9d 	bl	80059d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000ea4:	f000 fe98 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_I2C4_Init+0x74>)
 8000eac:	f004 fddf 	bl	8005a6e <HAL_I2CEx_ConfigDigitalFilter>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000eb6:	f000 fe8f 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20001038 	.word	0x20001038
 8000ec4:	40008400 	.word	0x40008400
 8000ec8:	30909dec 	.word	0x30909dec

08000ecc <MX_I2C6_Init>:
  * @brief I2C6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C6_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C6_Init 0 */

  /* USER CODE BEGIN I2C6_Init 1 */

  /* USER CODE END I2C6_Init 1 */
  hi2c6.Instance = I2C6;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_I2C6_Init+0x74>)
 8000ed2:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <MX_I2C6_Init+0x78>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hi2c6.Init.Timing = 0x30909DEC;
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <MX_I2C6_Init+0x74>)
 8000ed8:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <MX_I2C6_Init+0x7c>)
 8000eda:	605a      	str	r2, [r3, #4]
  hi2c6.Init.OwnAddress1 = 0;
 8000edc:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <MX_I2C6_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hi2c6.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee2:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <MX_I2C6_Init+0x74>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	60da      	str	r2, [r3, #12]
  hi2c6.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <MX_I2C6_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  hi2c6.Init.OwnAddress2 = 0;
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_I2C6_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  hi2c6.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MX_I2C6_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  hi2c6.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_I2C6_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
  hi2c6.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_I2C6_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c6) != HAL_OK)
 8000f06:	480e      	ldr	r0, [pc, #56]	; (8000f40 <MX_I2C6_Init+0x74>)
 8000f08:	f003 ffe5 	bl	8004ed6 <HAL_I2C_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_I2C6_Init+0x4a>
  {
    Error_Handler();
 8000f12:	f000 fe61 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c6, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f16:	2100      	movs	r1, #0
 8000f18:	4809      	ldr	r0, [pc, #36]	; (8000f40 <MX_I2C6_Init+0x74>)
 8000f1a:	f004 fd5d 	bl	80059d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_I2C6_Init+0x5c>
  {
    Error_Handler();
 8000f24:	f000 fe58 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c6, 0) != HAL_OK)
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_I2C6_Init+0x74>)
 8000f2c:	f004 fd9f 	bl	8005a6e <HAL_I2CEx_ConfigDigitalFilter>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_I2C6_Init+0x6e>
  {
    Error_Handler();
 8000f36:	f000 fe4f 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C6_Init 2 */

  /* USER CODE END I2C6_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000108c 	.word	0x2000108c
 8000f44:	40009c00 	.word	0x40009c00
 8000f48:	30909dec 	.word	0x30909dec

08000f4c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8000f60:	f004 fde2 	bl	8005b28 <HAL_ICACHE_Disable>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000f6a:	f000 fe35 	bl	8001bd8 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 8000f6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f72:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8000f74:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000f78:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f004 fdfc 	bl	8005b88 <HAL_ICACHE_EnableRemapRegion>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 8000f96:	f000 fe1f 	bl	8001bd8 <Error_Handler>
  }

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000f9a:	f004 fdb5 	bl	8005b08 <HAL_ICACHE_Enable>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ICACHE_Init+0x5c>
  {
    Error_Handler();
 8000fa4:	f000 fe18 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fb6:	4a22      	ldr	r2, [pc, #136]	; (8001040 <MX_LPUART1_UART_Init+0x90>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fbc:	4a21      	ldr	r2, [pc, #132]	; (8001044 <MX_LPUART1_UART_Init+0x94>)
 8000fbe:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fd4:	220c      	movs	r2, #12
 8000fd6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fda:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000fde:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ff2:	4812      	ldr	r0, [pc, #72]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8000ff4:	f00b fec6 	bl	800cd84 <HAL_UART_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ffe:	f000 fdeb 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001002:	2100      	movs	r1, #0
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8001006:	f00c fb9b 	bl	800d740 <HAL_UARTEx_SetTxFifoThreshold>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001010:	f000 fde2 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001014:	2100      	movs	r1, #0
 8001016:	4809      	ldr	r0, [pc, #36]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8001018:	f00c fbd0 	bl	800d7bc <HAL_UARTEx_SetRxFifoThreshold>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001022:	f000 fdd9 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_LPUART1_UART_Init+0x8c>)
 8001028:	f00c fb51 	bl	800d6ce <HAL_UARTEx_DisableFifoMode>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001032:	f000 fdd1 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200010e0 	.word	0x200010e0
 8001040:	46002400 	.word	0x46002400
 8001044:	00033324 	.word	0x00033324

08001048 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800104c:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 800104e:	4a23      	ldr	r2, [pc, #140]	; (80010dc <MX_USART1_UART_Init+0x94>)
 8001050:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 8001054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001058:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001066:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 800108c:	2200      	movs	r2, #0
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001090:	4811      	ldr	r0, [pc, #68]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 8001092:	f00b fe77 	bl	800cd84 <HAL_UART_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800109c:	f000 fd9c 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a0:	2100      	movs	r1, #0
 80010a2:	480d      	ldr	r0, [pc, #52]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 80010a4:	f00c fb4c 	bl	800d740 <HAL_UARTEx_SetTxFifoThreshold>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010ae:	f000 fd93 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b2:	2100      	movs	r1, #0
 80010b4:	4808      	ldr	r0, [pc, #32]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 80010b6:	f00c fb81 	bl	800d7bc <HAL_UARTEx_SetRxFifoThreshold>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010c0:	f000 fd8a 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 80010c6:	f00c fb02 	bl	800d6ce <HAL_UARTEx_DisableFifoMode>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010d0:	f000 fd82 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20001174 	.word	0x20001174
 80010dc:	40013800 	.word	0x40013800

080010e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80010e4:	4b22      	ldr	r3, [pc, #136]	; (8001170 <MX_USART6_UART_Init+0x90>)
 80010e6:	4a23      	ldr	r2, [pc, #140]	; (8001174 <MX_USART6_UART_Init+0x94>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <MX_USART6_UART_Init+0x90>)
 80010ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <MX_USART6_UART_Init+0x90>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <MX_USART6_UART_Init+0x90>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <MX_USART6_UART_Init+0x90>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_USART6_UART_Init+0x90>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <MX_USART6_UART_Init+0x90>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_USART6_UART_Init+0x90>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <MX_USART6_UART_Init+0x90>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_USART6_UART_Init+0x90>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <MX_USART6_UART_Init+0x90>)
 8001124:	2200      	movs	r2, #0
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001128:	4811      	ldr	r0, [pc, #68]	; (8001170 <MX_USART6_UART_Init+0x90>)
 800112a:	f00b fe2b 	bl	800cd84 <HAL_UART_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001134:	f000 fd50 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001138:	2100      	movs	r1, #0
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <MX_USART6_UART_Init+0x90>)
 800113c:	f00c fb00 	bl	800d740 <HAL_UARTEx_SetTxFifoThreshold>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001146:	f000 fd47 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800114a:	2100      	movs	r1, #0
 800114c:	4808      	ldr	r0, [pc, #32]	; (8001170 <MX_USART6_UART_Init+0x90>)
 800114e:	f00c fb35 	bl	800d7bc <HAL_UARTEx_SetRxFifoThreshold>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001158:	f000 fd3e 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_USART6_UART_Init+0x90>)
 800115e:	f00c fab6 	bl	800d6ce <HAL_UARTEx_DisableFifoMode>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001168:	f000 fd36 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20001208 	.word	0x20001208
 8001174:	40006400 	.word	0x40006400

08001178 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08e      	sub	sp, #56	; 0x38
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2234      	movs	r2, #52	; 0x34
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f00c fbc4 	bl	800d912 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800118a:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <MX_LTDC_Init+0x100>)
 800118c:	4a3b      	ldr	r2, [pc, #236]	; (800127c <MX_LTDC_Init+0x104>)
 800118e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8001190:	4b39      	ldr	r3, [pc, #228]	; (8001278 <MX_LTDC_Init+0x100>)
 8001192:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001196:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8001198:	4b37      	ldr	r3, [pc, #220]	; (8001278 <MX_LTDC_Init+0x100>)
 800119a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800119e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80011a0:	4b35      	ldr	r3, [pc, #212]	; (8001278 <MX_LTDC_Init+0x100>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80011a6:	4b34      	ldr	r3, [pc, #208]	; (8001278 <MX_LTDC_Init+0x100>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 80011ac:	4b32      	ldr	r3, [pc, #200]	; (8001278 <MX_LTDC_Init+0x100>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 80011b2:	4b31      	ldr	r3, [pc, #196]	; (8001278 <MX_LTDC_Init+0x100>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 0;
 80011b8:	4b2f      	ldr	r3, [pc, #188]	; (8001278 <MX_LTDC_Init+0x100>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 0;
 80011be:	4b2e      	ldr	r3, [pc, #184]	; (8001278 <MX_LTDC_Init+0x100>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 416;
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <MX_LTDC_Init+0x100>)
 80011c6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 416;
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <MX_LTDC_Init+0x100>)
 80011ce:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 416;
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <MX_LTDC_Init+0x100>)
 80011d6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 416;
 80011dc:	4b26      	ldr	r3, [pc, #152]	; (8001278 <MX_LTDC_Init+0x100>)
 80011de:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80011e2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <MX_LTDC_Init+0x100>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <MX_LTDC_Init+0x100>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <MX_LTDC_Init+0x100>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011fc:	481e      	ldr	r0, [pc, #120]	; (8001278 <MX_LTDC_Init+0x100>)
 80011fe:	f004 fd15 	bl	8005c2c <HAL_LTDC_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8001208:	f000 fce6 	bl	8001bd8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 416;
 8001210:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001214:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 416;
 800121a:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800121e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001224:	23ff      	movs	r3, #255	; 0xff
 8001226:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800122c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001230:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001232:	2305      	movs	r3, #5
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = GFXMMU_VIRTUAL_BUFFER0_BASE;
 8001236:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 416;
 800123c:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 416;
 8001242:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_LTDC_Init+0x100>)
 8001262:	f004 fe75 	bl	8005f50 <HAL_LTDC_ConfigLayer>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 800126c:	f000 fcb4 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	3738      	adds	r7, #56	; 0x38
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000129c 	.word	0x2000129c
 800127c:	40016800 	.word	0x40016800

08001280 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001286:	f107 0318 	add.w	r3, r7, #24
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
 8001296:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80012a6:	463b      	mov	r3, r7
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80012ae:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 80012b0:	4a3d      	ldr	r2, [pc, #244]	; (80013a8 <MX_OCTOSPI1_Init+0x128>)
 80012b2:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80012b4:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80012ba:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 80012c0:	4b38      	ldr	r3, [pc, #224]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 80012c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012c6:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 80012c8:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 80012ca:	221a      	movs	r2, #26
 80012cc:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80012ce:	4b35      	ldr	r3, [pc, #212]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80012d4:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80012da:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 80012dc:	2200      	movs	r2, #0
 80012de:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_64_BYTES;
 80012e0:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 80012e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012e6:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 16;
 80012e8:	4b2e      	ldr	r3, [pc, #184]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 80012ea:	2210      	movs	r2, #16
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80012ee:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80012f4:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80012fa:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001300:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 8001302:	2208      	movs	r2, #8
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 16;
 8001306:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 8001308:	2210      	movs	r2, #16
 800130a:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 800130c:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 800130e:	2200      	movs	r2, #0
 8001310:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001312:	4824      	ldr	r0, [pc, #144]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 8001314:	f005 f99e 	bl	8006654 <HAL_OSPI_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_OCTOSPI1_Init+0xa2>
  {
    Error_Handler();
 800131e:	f000 fc5b 	bl	8001bd8 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001322:	2301      	movs	r3, #1
 8001324:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 8001326:	2301      	movs	r3, #1
 8001328:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 1;
 800132a:	2301      	movs	r3, #1
 800132c:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <MX_OCTOSPI1_Init+0x12c>)
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <MX_OCTOSPI1_Init+0x130>)
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 8001336:	2301      	movs	r3, #1
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800133a:	f107 0318 	add.w	r3, r7, #24
 800133e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001342:	4619      	mov	r1, r3
 8001344:	4817      	ldr	r0, [pc, #92]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 8001346:	f005 fb05 	bl	8006954 <HAL_OSPIM_Config>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_OCTOSPI1_Init+0xd4>
  {
    Error_Handler();
 8001350:	f000 fc42 	bl	8001bd8 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 800135c:	2302      	movs	r3, #2
 800135e:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi1, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	f241 3288 	movw	r2, #5000	; 0x1388
 800136c:	4619      	mov	r1, r3
 800136e:	480d      	ldr	r0, [pc, #52]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 8001370:	f005 fa2c 	bl	80067cc <HAL_OSPI_HyperbusCfg>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_OCTOSPI1_Init+0xfe>
  {
    Error_Handler();
 800137a:	f000 fc2d 	bl	8001bd8 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001386:	463b      	mov	r3, r7
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <MX_OCTOSPI1_Init+0x124>)
 800138c:	f006 f8ce 	bl	800752c <HAL_OSPI_DLYB_SetConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_OCTOSPI1_Init+0x11a>
  {
    Error_Handler();
 8001396:	f000 fc1f 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	3730      	adds	r7, #48	; 0x30
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20001344 	.word	0x20001344
 80013a8:	420d1400 	.word	0x420d1400
 80013ac:	00010002 	.word	0x00010002
 80013b0:	01000002 	.word	0x01000002

080013b4 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	; 0x30
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80013ba:	f107 0318 	add.w	r3, r7, #24
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80013da:	463b      	mov	r3, r7
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 80013e2:	4b3c      	ldr	r3, [pc, #240]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 80013e4:	4a3c      	ldr	r2, [pc, #240]	; (80014d8 <MX_OCTOSPI2_Init+0x124>)
 80013e6:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 80013e8:	4b3a      	ldr	r3, [pc, #232]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80013ee:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 80013f4:	4b37      	ldr	r3, [pc, #220]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 80013f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013fa:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 80013fc:	4b35      	ldr	r3, [pc, #212]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 80013fe:	2220      	movs	r2, #32
 8001400:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8001402:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 8001404:	2201      	movs	r2, #1
 8001406:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001408:	4b32      	ldr	r3, [pc, #200]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800140e:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 8001410:	2200      	movs	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001414:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 8001416:	2200      	movs	r2, #0
 8001418:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 800141a:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 800141c:	2201      	movs	r2, #1
 800141e:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001420:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 8001422:	2200      	movs	r2, #0
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 8001428:	2200      	movs	r2, #0
 800142a:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 800142e:	2200      	movs	r2, #0
 8001430:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 8001434:	2208      	movs	r2, #8
 8001436:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.MaxTran = 0;
 8001438:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 800143a:	2200      	movs	r2, #0
 800143c:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.Refresh = 0;
 800143e:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 8001440:	2200      	movs	r2, #0
 8001442:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8001444:	4823      	ldr	r0, [pc, #140]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 8001446:	f005 f905 	bl	8006654 <HAL_OSPI_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_OCTOSPI2_Init+0xa0>
  {
    Error_Handler();
 8001450:	f000 fbc2 	bl	8001bd8 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001454:	2301      	movs	r3, #1
 8001456:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 8001458:	2301      	movs	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 2;
 800145c:	2302      	movs	r3, #2
 800145e:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <MX_OCTOSPI2_Init+0x128>)
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <MX_OCTOSPI2_Init+0x12c>)
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 8001468:	2301      	movs	r3, #1
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800146c:	f107 0318 	add.w	r3, r7, #24
 8001470:	f241 3288 	movw	r2, #5000	; 0x1388
 8001474:	4619      	mov	r1, r3
 8001476:	4817      	ldr	r0, [pc, #92]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 8001478:	f005 fa6c 	bl	8006954 <HAL_OSPIM_Config>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_OCTOSPI2_Init+0xd2>
  {
    Error_Handler();
 8001482:	f000 fba9 	bl	8001bd8 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 800148e:	2302      	movs	r3, #2
 8001490:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	f241 3288 	movw	r2, #5000	; 0x1388
 800149e:	4619      	mov	r1, r3
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 80014a2:	f005 f993 	bl	80067cc <HAL_OSPI_HyperbusCfg>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_OCTOSPI2_Init+0xfc>
  {
    Error_Handler();
 80014ac:	f000 fb94 	bl	8001bd8 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 80014b8:	463b      	mov	r3, r7
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_OCTOSPI2_Init+0x120>)
 80014be:	f006 f835 	bl	800752c <HAL_OSPI_DLYB_SetConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_OCTOSPI2_Init+0x118>
  {
    Error_Handler();
 80014c8:	f000 fb86 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3730      	adds	r7, #48	; 0x30
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200013a0 	.word	0x200013a0
 80014d8:	420d2400 	.word	0x420d2400
 80014dc:	00010002 	.word	0x00010002
 80014e0:	01000002 	.word	0x01000002

080014e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08e      	sub	sp, #56	; 0x38
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]
 80014fa:	615a      	str	r2, [r3, #20]
 80014fc:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001512:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <MX_RTC_Init+0xfc>)
 8001514:	4a33      	ldr	r2, [pc, #204]	; (80015e4 <MX_RTC_Init+0x100>)
 8001516:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001518:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <MX_RTC_Init+0xfc>)
 800151a:	2200      	movs	r2, #0
 800151c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800151e:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <MX_RTC_Init+0xfc>)
 8001520:	227f      	movs	r2, #127	; 0x7f
 8001522:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001524:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <MX_RTC_Init+0xfc>)
 8001526:	22ff      	movs	r2, #255	; 0xff
 8001528:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800152a:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <MX_RTC_Init+0xfc>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001530:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <MX_RTC_Init+0xfc>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001536:	4b2a      	ldr	r3, [pc, #168]	; (80015e0 <MX_RTC_Init+0xfc>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800153c:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <MX_RTC_Init+0xfc>)
 800153e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001542:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001544:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <MX_RTC_Init+0xfc>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800154a:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <MX_RTC_Init+0xfc>)
 800154c:	2200      	movs	r2, #0
 800154e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001550:	4823      	ldr	r0, [pc, #140]	; (80015e0 <MX_RTC_Init+0xfc>)
 8001552:	f00a fc4d 	bl	800bdf0 <HAL_RTC_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800155c:	f000 fb3c 	bl	8001bd8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800156c:	2300      	movs	r3, #0
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4619      	mov	r1, r3
 8001576:	481a      	ldr	r0, [pc, #104]	; (80015e0 <MX_RTC_Init+0xfc>)
 8001578:	f00a feaa 	bl	800c2d0 <HAL_RTCEx_PrivilegeModeSet>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001582:	f000 fb29 	bl	8001bd8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001586:	2300      	movs	r3, #0
 8001588:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 800158a:	2300      	movs	r3, #0
 800158c:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 800158e:	2300      	movs	r3, #0
 8001590:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	2201      	movs	r2, #1
 80015a0:	4619      	mov	r1, r3
 80015a2:	480f      	ldr	r0, [pc, #60]	; (80015e0 <MX_RTC_Init+0xfc>)
 80015a4:	f00a fca6 	bl	800bef4 <HAL_RTC_SetTime>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80015ae:	f000 fb13 	bl	8001bd8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80015b2:	2301      	movs	r3, #1
 80015b4:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80015b6:	2301      	movs	r3, #1
 80015b8:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 80015be:	2300      	movs	r3, #0
 80015c0:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2201      	movs	r2, #1
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_RTC_Init+0xfc>)
 80015ca:	f00a fd2f 	bl	800c02c <HAL_RTC_SetDate>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 80015d4:	f000 fb00 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3738      	adds	r7, #56	; 0x38
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200013fc 	.word	0x200013fc
 80015e4:	46007800 	.word	0x46007800

080015e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015f8:	4b30      	ldr	r3, [pc, #192]	; (80016bc <MX_SPI1_Init+0xd4>)
 80015fa:	4a31      	ldr	r2, [pc, #196]	; (80016c0 <MX_SPI1_Init+0xd8>)
 80015fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015fe:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <MX_SPI1_Init+0xd4>)
 8001600:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001604:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001606:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <MX_SPI1_Init+0xd4>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800160c:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <MX_SPI1_Init+0xd4>)
 800160e:	2203      	movs	r2, #3
 8001610:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001612:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <MX_SPI1_Init+0xd4>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001618:	4b28      	ldr	r3, [pc, #160]	; (80016bc <MX_SPI1_Init+0xd4>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800161e:	4b27      	ldr	r3, [pc, #156]	; (80016bc <MX_SPI1_Init+0xd4>)
 8001620:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001624:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001626:	4b25      	ldr	r3, [pc, #148]	; (80016bc <MX_SPI1_Init+0xd4>)
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800162c:	4b23      	ldr	r3, [pc, #140]	; (80016bc <MX_SPI1_Init+0xd4>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001632:	4b22      	ldr	r3, [pc, #136]	; (80016bc <MX_SPI1_Init+0xd4>)
 8001634:	2200      	movs	r2, #0
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001638:	4b20      	ldr	r3, [pc, #128]	; (80016bc <MX_SPI1_Init+0xd4>)
 800163a:	2200      	movs	r2, #0
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800163e:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <MX_SPI1_Init+0xd4>)
 8001640:	2207      	movs	r2, #7
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <MX_SPI1_Init+0xd4>)
 8001646:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800164a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <MX_SPI1_Init+0xd4>)
 800164e:	2200      	movs	r2, #0
 8001650:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <MX_SPI1_Init+0xd4>)
 8001654:	2200      	movs	r2, #0
 8001656:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <MX_SPI1_Init+0xd4>)
 800165a:	2200      	movs	r2, #0
 800165c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <MX_SPI1_Init+0xd4>)
 8001660:	2200      	movs	r2, #0
 8001662:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <MX_SPI1_Init+0xd4>)
 8001666:	2200      	movs	r2, #0
 8001668:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <MX_SPI1_Init+0xd4>)
 800166c:	2200      	movs	r2, #0
 800166e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <MX_SPI1_Init+0xd4>)
 8001672:	2200      	movs	r2, #0
 8001674:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_SPI1_Init+0xd4>)
 8001678:	2200      	movs	r2, #0
 800167a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_SPI1_Init+0xd4>)
 800167e:	2200      	movs	r2, #0
 8001680:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001682:	480e      	ldr	r0, [pc, #56]	; (80016bc <MX_SPI1_Init+0xd4>)
 8001684:	f00a fe52 	bl	800c32c <HAL_SPI_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 800168e:	f000 faa3 	bl	8001bd8 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001696:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800169a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	4619      	mov	r1, r3
 80016a4:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_SPI1_Init+0xd4>)
 80016a6:	f00a ff72 	bl	800c58e <HAL_SPIEx_SetConfigAutonomousMode>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 80016b0:	f000 fa92 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	2000142c 	.word	0x2000142c
 80016c0:	40013000 	.word	0x40013000

080016c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b090      	sub	sp, #64	; 0x40
 80016c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	4bbf      	ldr	r3, [pc, #764]	; (80019d8 <MX_GPIO_Init+0x314>)
 80016dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016e0:	4abd      	ldr	r2, [pc, #756]	; (80019d8 <MX_GPIO_Init+0x314>)
 80016e2:	f043 0302 	orr.w	r3, r3, #2
 80016e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016ea:	4bbb      	ldr	r3, [pc, #748]	; (80019d8 <MX_GPIO_Init+0x314>)
 80016ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80016f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f8:	4bb7      	ldr	r3, [pc, #732]	; (80019d8 <MX_GPIO_Init+0x314>)
 80016fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016fe:	4ab6      	ldr	r2, [pc, #728]	; (80019d8 <MX_GPIO_Init+0x314>)
 8001700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001704:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001708:	4bb3      	ldr	r3, [pc, #716]	; (80019d8 <MX_GPIO_Init+0x314>)
 800170a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800170e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001716:	4bb0      	ldr	r3, [pc, #704]	; (80019d8 <MX_GPIO_Init+0x314>)
 8001718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800171c:	4aae      	ldr	r2, [pc, #696]	; (80019d8 <MX_GPIO_Init+0x314>)
 800171e:	f043 0308 	orr.w	r3, r3, #8
 8001722:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001726:	4bac      	ldr	r3, [pc, #688]	; (80019d8 <MX_GPIO_Init+0x314>)
 8001728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	623b      	str	r3, [r7, #32]
 8001732:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001734:	4ba8      	ldr	r3, [pc, #672]	; (80019d8 <MX_GPIO_Init+0x314>)
 8001736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800173a:	4aa7      	ldr	r2, [pc, #668]	; (80019d8 <MX_GPIO_Init+0x314>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001744:	4ba4      	ldr	r3, [pc, #656]	; (80019d8 <MX_GPIO_Init+0x314>)
 8001746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4ba1      	ldr	r3, [pc, #644]	; (80019d8 <MX_GPIO_Init+0x314>)
 8001754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001758:	4a9f      	ldr	r2, [pc, #636]	; (80019d8 <MX_GPIO_Init+0x314>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001762:	4b9d      	ldr	r3, [pc, #628]	; (80019d8 <MX_GPIO_Init+0x314>)
 8001764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	61bb      	str	r3, [r7, #24]
 800176e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001770:	4b99      	ldr	r3, [pc, #612]	; (80019d8 <MX_GPIO_Init+0x314>)
 8001772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001776:	4a98      	ldr	r2, [pc, #608]	; (80019d8 <MX_GPIO_Init+0x314>)
 8001778:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001780:	4b95      	ldr	r3, [pc, #596]	; (80019d8 <MX_GPIO_Init+0x314>)
 8001782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800178e:	4b92      	ldr	r3, [pc, #584]	; (80019d8 <MX_GPIO_Init+0x314>)
 8001790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001794:	4a90      	ldr	r2, [pc, #576]	; (80019d8 <MX_GPIO_Init+0x314>)
 8001796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800179a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800179e:	4b8e      	ldr	r3, [pc, #568]	; (80019d8 <MX_GPIO_Init+0x314>)
 80017a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80017ac:	4b8a      	ldr	r3, [pc, #552]	; (80019d8 <MX_GPIO_Init+0x314>)
 80017ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017b2:	4a89      	ldr	r2, [pc, #548]	; (80019d8 <MX_GPIO_Init+0x314>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017bc:	4b86      	ldr	r3, [pc, #536]	; (80019d8 <MX_GPIO_Init+0x314>)
 80017be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ca:	4b83      	ldr	r3, [pc, #524]	; (80019d8 <MX_GPIO_Init+0x314>)
 80017cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017d0:	4a81      	ldr	r2, [pc, #516]	; (80019d8 <MX_GPIO_Init+0x314>)
 80017d2:	f043 0320 	orr.w	r3, r3, #32
 80017d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017da:	4b7f      	ldr	r3, [pc, #508]	; (80019d8 <MX_GPIO_Init+0x314>)
 80017dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017e0:	f003 0320 	and.w	r3, r3, #32
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017e8:	4b7b      	ldr	r3, [pc, #492]	; (80019d8 <MX_GPIO_Init+0x314>)
 80017ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017ee:	4a7a      	ldr	r2, [pc, #488]	; (80019d8 <MX_GPIO_Init+0x314>)
 80017f0:	f043 0310 	orr.w	r3, r3, #16
 80017f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017f8:	4b77      	ldr	r3, [pc, #476]	; (80019d8 <MX_GPIO_Init+0x314>)
 80017fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800180c:	4873      	ldr	r0, [pc, #460]	; (80019dc <MX_GPIO_Init+0x318>)
 800180e:	f003 fadf 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SDMMC_EN_Pin|LRA_EN_Pin, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001818:	4871      	ldr	r0, [pc, #452]	; (80019e0 <MX_GPIO_Init+0x31c>)
 800181a:	f003 fad9 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO3_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	f248 0120 	movw	r1, #32800	; 0x8020
 8001824:	486f      	ldr	r0, [pc, #444]	; (80019e4 <MX_GPIO_Init+0x320>)
 8001826:	f003 fad3 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GNSS_RST_Pin|TP_RST_Pin|GNSS_WAKEUP_Pin, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	21c8      	movs	r1, #200	; 0xc8
 800182e:	486e      	ldr	r0, [pc, #440]	; (80019e8 <MX_GPIO_Init+0x324>)
 8001830:	f003 face 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_RST_GPIO_Port, FLASH_RST_Pin, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800183a:	486c      	ldr	r0, [pc, #432]	; (80019ec <MX_GPIO_Init+0x328>)
 800183c:	f003 fac8 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2180      	movs	r1, #128	; 0x80
 8001844:	486a      	ldr	r0, [pc, #424]	; (80019f0 <MX_GPIO_Init+0x32c>)
 8001846:	f003 fac3 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001850:	4868      	ldr	r0, [pc, #416]	; (80019f4 <MX_GPIO_Init+0x330>)
 8001852:	f003 fabd 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPLAY_SWIRE_IN_Pin DISPLAY_SWIRE_OUT_Pin */
  GPIO_InitStruct.Pin = DISPLAY_SWIRE_IN_Pin|DISPLAY_SWIRE_OUT_Pin;
 8001856:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185c:	2300      	movs	r3, #0
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001868:	4619      	mov	r1, r3
 800186a:	485c      	ldr	r0, [pc, #368]	; (80019dc <MX_GPIO_Init+0x318>)
 800186c:	f003 f8d8 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : AVDDEN_Pin */
  GPIO_InitStruct.Pin = AVDDEN_Pin;
 8001870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001876:	2301      	movs	r3, #1
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800187a:	2302      	movs	r3, #2
 800187c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(AVDDEN_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001886:	4619      	mov	r1, r3
 8001888:	4854      	ldr	r0, [pc, #336]	; (80019dc <MX_GPIO_Init+0x318>)
 800188a:	f003 f8c9 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_EN_Pin */
  GPIO_InitStruct.Pin = SDMMC_EN_Pin;
 800188e:	2310      	movs	r3, #16
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SDMMC_EN_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a2:	4619      	mov	r1, r3
 80018a4:	484e      	ldr	r0, [pc, #312]	; (80019e0 <MX_GPIO_Init+0x31c>)
 80018a6:	f003 f8bb 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_CD_Pin PWR_INT_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|PWR_INT_Pin;
 80018aa:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b0:	2300      	movs	r3, #0
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018bc:	4619      	mov	r1, r3
 80018be:	4848      	ldr	r0, [pc, #288]	; (80019e0 <MX_GPIO_Init+0x31c>)
 80018c0:	f003 f8ae 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC8 PC11 PC12
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
 80018c4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d2:	2302      	movs	r3, #2
 80018d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018d6:	230c      	movs	r3, #12
 80018d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018de:	4619      	mov	r1, r3
 80018e0:	4845      	ldr	r0, [pc, #276]	; (80019f8 <MX_GPIO_Init+0x334>)
 80018e2:	f003 f89d 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|PWR_ENCHG_Pin;
 80018e6:	f248 0320 	movw	r3, #32800	; 0x8020
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018f0:	2302      	movs	r3, #2
 80018f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fc:	4619      	mov	r1, r3
 80018fe:	4839      	ldr	r0, [pc, #228]	; (80019e4 <MX_GPIO_Init+0x320>)
 8001900:	f003 f88e 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001904:	2304      	movs	r3, #4
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001910:	2302      	movs	r3, #2
 8001912:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001914:	230c      	movs	r3, #12
 8001916:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800191c:	4619      	mov	r1, r3
 800191e:	4830      	ldr	r0, [pc, #192]	; (80019e0 <MX_GPIO_Init+0x31c>)
 8001920:	f003 f87e 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001924:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800193a:	4619      	mov	r1, r3
 800193c:	482f      	ldr	r0, [pc, #188]	; (80019fc <MX_GPIO_Init+0x338>)
 800193e:	f003 f86f 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT2_Pin */
  GPIO_InitStruct.Pin = BT_INT2_Pin;
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001946:	2300      	movs	r3, #0
 8001948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800194a:	2302      	movs	r3, #2
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BT_INT2_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001952:	4619      	mov	r1, r3
 8001954:	4828      	ldr	r0, [pc, #160]	; (80019f8 <MX_GPIO_Init+0x334>)
 8001956:	f003 f863 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800195a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001968:	2302      	movs	r3, #2
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 800196c:	2308      	movs	r3, #8
 800196e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001974:	4619      	mov	r1, r3
 8001976:	481b      	ldr	r0, [pc, #108]	; (80019e4 <MX_GPIO_Init+0x320>)
 8001978:	f003 f852 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_Pin GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO1_Pin;
 800197c:	2303      	movs	r3, #3
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001980:	2300      	movs	r3, #0
 8001982:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001984:	2302      	movs	r3, #2
 8001986:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198c:	4619      	mov	r1, r3
 800198e:	4814      	ldr	r0, [pc, #80]	; (80019e0 <MX_GPIO_Init+0x31c>)
 8001990:	f003 f846 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT1_Pin */
  GPIO_InitStruct.Pin = BT_INT1_Pin;
 8001994:	2340      	movs	r3, #64	; 0x40
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <MX_GPIO_Init+0x33c>)
 800199a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800199c:	2302      	movs	r3, #2
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BT_INT1_GPIO_Port, &GPIO_InitStruct);
 80019a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a4:	4619      	mov	r1, r3
 80019a6:	4814      	ldr	r0, [pc, #80]	; (80019f8 <MX_GPIO_Init+0x334>)
 80019a8:	f003 f83a 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin|TP_RST_Pin;
 80019ac:	2388      	movs	r3, #136	; 0x88
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80019bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c0:	4619      	mov	r1, r3
 80019c2:	4809      	ldr	r0, [pc, #36]	; (80019e8 <MX_GPIO_Init+0x324>)
 80019c4:	f003 f82c 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_PPS_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin;
 80019c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_GPIO_Init+0x33c>)
 80019d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
 80019d6:	e015      	b.n	8001a04 <MX_GPIO_Init+0x340>
 80019d8:	46020c00 	.word	0x46020c00
 80019dc:	42021800 	.word	0x42021800
 80019e0:	42020c00 	.word	0x42020c00
 80019e4:	42020400 	.word	0x42020400
 80019e8:	42022400 	.word	0x42022400
 80019ec:	42022000 	.word	0x42022000
 80019f0:	42021400 	.word	0x42021400
 80019f4:	42021000 	.word	0x42021000
 80019f8:	42020800 	.word	0x42020800
 80019fc:	42020000 	.word	0x42020000
 8001a00:	10110000 	.word	0x10110000
  HAL_GPIO_Init(GNSS_PPS_GPIO_Port, &GPIO_InitStruct);
 8001a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4860      	ldr	r0, [pc, #384]	; (8001b8c <MX_GPIO_Init+0x4c8>)
 8001a0c:	f003 f808 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_WAKEUP_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin;
 8001a10:	2340      	movs	r3, #64	; 0x40
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GNSS_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a24:	4619      	mov	r1, r3
 8001a26:	485a      	ldr	r0, [pc, #360]	; (8001b90 <MX_GPIO_Init+0x4cc>)
 8001a28:	f002 fffa 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 8001a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a32:	4b58      	ldr	r3, [pc, #352]	; (8001b94 <MX_GPIO_Init+0x4d0>)
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a36:	2301      	movs	r3, #1
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4853      	ldr	r0, [pc, #332]	; (8001b90 <MX_GPIO_Init+0x4cc>)
 8001a42:	f002 ffed 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RST_Pin */
  GPIO_InitStruct.Pin = FLASH_RST_Pin;
 8001a46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FLASH_RST_GPIO_Port, &GPIO_InitStruct);
 8001a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	484e      	ldr	r0, [pc, #312]	; (8001b98 <MX_GPIO_Init+0x4d4>)
 8001a60:	f002 ffde 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_INT_Pin */
  GPIO_InitStruct.Pin = FLASH_INT_Pin;
 8001a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a6a:	4b4a      	ldr	r3, [pc, #296]	; (8001b94 <MX_GPIO_Init+0x4d0>)
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(FLASH_INT_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a76:	4619      	mov	r1, r3
 8001a78:	4847      	ldr	r0, [pc, #284]	; (8001b98 <MX_GPIO_Init+0x4d4>)
 8001a7a:	f002 ffd1 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RSTO_Pin */
  GPIO_InitStruct.Pin = FLASH_RSTO_Pin;
 8001a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a84:	2300      	movs	r3, #0
 8001a86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(FLASH_RSTO_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a90:	4619      	mov	r1, r3
 8001a92:	4841      	ldr	r0, [pc, #260]	; (8001b98 <MX_GPIO_Init+0x4d4>)
 8001a94:	f002 ffc4 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin;
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DISPLAY_RST_GPIO_Port, &GPIO_InitStruct);
 8001aa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aac:	4619      	mov	r1, r3
 8001aae:	483b      	ldr	r0, [pc, #236]	; (8001b9c <MX_GPIO_Init+0x4d8>)
 8001ab0:	f002 ffb6 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALS_INT_Pin */
  GPIO_InitStruct.Pin = ALS_INT_Pin;
 8001ab4:	2340      	movs	r3, #64	; 0x40
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ALS_INT_GPIO_Port, &GPIO_InitStruct);
 8001ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4835      	ldr	r0, [pc, #212]	; (8001b9c <MX_GPIO_Init+0x4d8>)
 8001ac8:	f002 ffaa 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ad0:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <MX_GPIO_Init+0x4d0>)
 8001ad2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001adc:	4619      	mov	r1, r3
 8001ade:	4830      	ldr	r0, [pc, #192]	; (8001ba0 <MX_GPIO_Init+0x4dc>)
 8001ae0:	f002 ff9e 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8001ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001afa:	4619      	mov	r1, r3
 8001afc:	4828      	ldr	r0, [pc, #160]	; (8001ba0 <MX_GPIO_Init+0x4dc>)
 8001afe:	f002 ff8f 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : HR_INT_Pin */
  GPIO_InitStruct.Pin = HR_INT_Pin;
 8001b02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b08:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <MX_GPIO_Init+0x4d0>)
 8001b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HR_INT_GPIO_Port, &GPIO_InitStruct);
 8001b10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b14:	4619      	mov	r1, r3
 8001b16:	4823      	ldr	r0, [pc, #140]	; (8001ba4 <MX_GPIO_Init+0x4e0>)
 8001b18:	f002 ff82 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LRA_EN_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin;
 8001b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b26:	2302      	movs	r3, #2
 8001b28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LRA_EN_GPIO_Port, &GPIO_InitStruct);
 8001b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b32:	4619      	mov	r1, r3
 8001b34:	481b      	ldr	r0, [pc, #108]	; (8001ba4 <MX_GPIO_Init+0x4e0>)
 8001b36:	f002 ff73 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_INT_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin;
 8001b3a:	2310      	movs	r3, #16
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <MX_GPIO_Init+0x4d0>)
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MAG_INT_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4816      	ldr	r0, [pc, #88]	; (8001ba8 <MX_GPIO_Init+0x4e4>)
 8001b4e:	f002 ff67 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 8001b52:	2304      	movs	r3, #4
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <MX_GPIO_Init+0x4e8>)
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b62:	4619      	mov	r1, r3
 8001b64:	4812      	ldr	r0, [pc, #72]	; (8001bb0 <MX_GPIO_Init+0x4ec>)
 8001b66:	f002 ff5b 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin;
 8001b6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b70:	2300      	movs	r3, #0
 8001b72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IMU_INT2_GPIO_Port, &GPIO_InitStruct);
 8001b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4807      	ldr	r0, [pc, #28]	; (8001b9c <MX_GPIO_Init+0x4d8>)
 8001b80:	f002 ff4e 	bl	8004a20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b84:	bf00      	nop
 8001b86:	3740      	adds	r7, #64	; 0x40
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	42020000 	.word	0x42020000
 8001b90:	42022400 	.word	0x42022400
 8001b94:	10210000 	.word	0x10210000
 8001b98:	42022000 	.word	0x42022000
 8001b9c:	42021400 	.word	0x42021400
 8001ba0:	42021000 	.word	0x42021000
 8001ba4:	42020c00 	.word	0x42020c00
 8001ba8:	42020800 	.word	0x42020800
 8001bac:	10110000 	.word	0x10110000
 8001bb0:	42020400 	.word	0x42020400

08001bb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bc6:	f001 fa5b 	bl	8003080 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40001000 	.word	0x40001000

08001bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bdc:	b672      	cpsid	i
}
 8001bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <Error_Handler+0x8>
	...

08001be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_MspInit+0x30>)
 8001bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf0:	4a08      	ldr	r2, [pc, #32]	; (8001c14 <HAL_MspInit+0x30>)
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_MspInit+0x30>)
 8001bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	46020c00 	.word	0x46020c00

08001c18 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b0c2      	sub	sp, #264	; 0x108
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c26:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c38:	f107 0310 	add.w	r3, r7, #16
 8001c3c:	22e0      	movs	r2, #224	; 0xe0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f00b fe66 	bl	800d912 <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8001c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a2b      	ldr	r2, [pc, #172]	; (8001d00 <HAL_MDF_MspInit+0xe8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d14e      	bne.n	8001cf6 <HAL_MDF_MspInit+0xde>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001c58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c6a:	f107 0310 	add.w	r3, r7, #16
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f007 f8b0 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_MDF_MspInit+0x66>
    {
      Error_Handler();
 8001c7a:	f7ff ffad 	bl	8001bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 8001c7e:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <HAL_MDF_MspInit+0xec>)
 8001c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c84:	4a1f      	ldr	r2, [pc, #124]	; (8001d04 <HAL_MDF_MspInit+0xec>)
 8001c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_MDF_MspInit+0xec>)
 8001c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_MDF_MspInit+0xec>)
 8001c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ca2:	4a18      	ldr	r2, [pc, #96]	; (8001d04 <HAL_MDF_MspInit+0xec>)
 8001ca4:	f043 0310 	orr.w	r3, r3, #16
 8001ca8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_MDF_MspInit+0xec>)
 8001cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cb2:	f003 0210 	and.w	r2, r3, #16
 8001cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cc4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001cc8:	681b      	ldr	r3, [r3, #0]
    /**ADF1 GPIO Configuration
    PE9     ------> ADF1_CCK0
    PE10     ------> ADF1_SDI0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cea:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4805      	ldr	r0, [pc, #20]	; (8001d08 <HAL_MDF_MspInit+0xf0>)
 8001cf2:	f002 fe95 	bl	8004a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 8001cf6:	bf00      	nop
 8001cf8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	46024080 	.word	0x46024080
 8001d04:	46020c00 	.word	0x46020c00
 8001d08:	42021000 	.word	0x42021000

08001d0c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <HAL_CRC_MspInit+0x3c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d10e      	bne.n	8001d3c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_CRC_MspInit+0x40>)
 8001d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d24:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_CRC_MspInit+0x40>)
 8001d26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d2a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <HAL_CRC_MspInit+0x40>)
 8001d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	40023000 	.word	0x40023000
 8001d4c:	46020c00 	.word	0x46020c00

08001d50 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a16      	ldr	r2, [pc, #88]	; (8001db8 <HAL_DCACHE_MspInit+0x68>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d10f      	bne.n	8001d82 <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <HAL_DCACHE_MspInit+0x6c>)
 8001d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <HAL_DCACHE_MspInit+0x6c>)
 8001d6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_DCACHE_MspInit+0x6c>)
 8001d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 8001d80:	e013      	b.n	8001daa <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <HAL_DCACHE_MspInit+0x70>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d10e      	bne.n	8001daa <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_DCACHE_MspInit+0x6c>)
 8001d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_DCACHE_MspInit+0x6c>)
 8001d94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <HAL_DCACHE_MspInit+0x6c>)
 8001d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40031400 	.word	0x40031400
 8001dbc:	46020c00 	.word	0x46020c00
 8001dc0:	40031800 	.word	0x40031800

08001dc4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <HAL_DMA2D_MspInit+0x48>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d116      	bne.n	8001e04 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_DMA2D_MspInit+0x4c>)
 8001dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ddc:	4a0c      	ldr	r2, [pc, #48]	; (8001e10 <HAL_DMA2D_MspInit+0x4c>)
 8001dde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_DMA2D_MspInit+0x4c>)
 8001de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2100      	movs	r1, #0
 8001df8:	2076      	movs	r0, #118	; 0x76
 8001dfa:	f001 fa3d 	bl	8003278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001dfe:	2076      	movs	r0, #118	; 0x76
 8001e00:	f001 fa54 	bl	80032ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	4002b000 	.word	0x4002b000
 8001e10:	46020c00 	.word	0x46020c00

08001e14 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b0c2      	sub	sp, #264	; 0x108
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e22:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	22e0      	movs	r2, #224	; 0xe0
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f00b fd68 	bl	800d912 <memset>
  if(hdsi->Instance==DSI)
 8001e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a30      	ldr	r2, [pc, #192]	; (8001f10 <HAL_DSI_MspInit+0xfc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d157      	bne.n	8001f04 <HAL_DSI_MspInit+0xf0>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	f04f 0304 	mov.w	r3, #4
 8001e5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 8001e60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f006 ffb1 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_DSI_MspInit+0x68>
    {
      Error_Handler();
 8001e78:	f7ff feae 	bl	8001bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <HAL_DSI_MspInit+0x100>)
 8001e7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e82:	4a24      	ldr	r2, [pc, #144]	; (8001f14 <HAL_DSI_MspInit+0x100>)
 8001e84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e88:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_DSI_MspInit+0x100>)
 8001e8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <HAL_DSI_MspInit+0x100>)
 8001e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <HAL_DSI_MspInit+0x100>)
 8001ea2:	f043 0320 	orr.w	r3, r3, #32
 8001ea6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <HAL_DSI_MspInit+0x100>)
 8001eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eb0:	f003 0220 	and.w	r2, r3, #32
 8001eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001eb8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ec2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ec6:	681b      	ldr	r3, [r3, #0]
    DSI_CKN     ------> DSIHOST_CKN
    DSI_D1N     ------> DSIHOST_D1N
    DSI_D1P     ------> DSIHOST_D1P
    PF10     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ecc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8001ee2:	230b      	movs	r3, #11
 8001ee4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ee8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001eec:	4619      	mov	r1, r3
 8001eee:	480a      	ldr	r0, [pc, #40]	; (8001f18 <HAL_DSI_MspInit+0x104>)
 8001ef0:	f002 fd96 	bl	8004a20 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2089      	movs	r0, #137	; 0x89
 8001efa:	f001 f9bd 	bl	8003278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001efe:	2089      	movs	r0, #137	; 0x89
 8001f00:	f001 f9d4 	bl	80032ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001f04:	bf00      	nop
 8001f06:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40016c00 	.word	0x40016c00
 8001f14:	46020c00 	.word	0x46020c00
 8001f18:	42021400 	.word	0x42021400

08001f1c <HAL_GFXMMU_MspInit>:
* This function configures the hardware resources used in this example
* @param hgfxmmu: GFXMMU handle pointer
* @retval None
*/
void HAL_GFXMMU_MspInit(GFXMMU_HandleTypeDef* hgfxmmu)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  if(hgfxmmu->Instance==GFXMMU)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <HAL_GFXMMU_MspInit+0x48>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d116      	bne.n	8001f5c <HAL_GFXMMU_MspInit+0x40>
  {
  /* USER CODE BEGIN GFXMMU_MspInit 0 */

  /* USER CODE END GFXMMU_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GFXMMU_CLK_ENABLE();
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <HAL_GFXMMU_MspInit+0x4c>)
 8001f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f34:	4a0c      	ldr	r2, [pc, #48]	; (8001f68 <HAL_GFXMMU_MspInit+0x4c>)
 8001f36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_GFXMMU_MspInit+0x4c>)
 8001f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
    /* GFXMMU interrupt Init */
    HAL_NVIC_SetPriority(GFXMMU_IRQn, 0, 0);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2086      	movs	r0, #134	; 0x86
 8001f52:	f001 f991 	bl	8003278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GFXMMU_IRQn);
 8001f56:	2086      	movs	r0, #134	; 0x86
 8001f58:	f001 f9a8 	bl	80032ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GFXMMU_MspInit 1 */

  /* USER CODE END GFXMMU_MspInit 1 */
  }

}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	4002c000 	.word	0x4002c000
 8001f68:	46020c00 	.word	0x46020c00

08001f6c <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a1a      	ldr	r2, [pc, #104]	; (8001fe4 <HAL_GPU2D_MspInit+0x78>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d12d      	bne.n	8001fda <HAL_GPU2D_MspInit+0x6e>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <HAL_GPU2D_MspInit+0x7c>)
 8001f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f84:	4a18      	ldr	r2, [pc, #96]	; (8001fe8 <HAL_GPU2D_MspInit+0x7c>)
 8001f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_GPU2D_MspInit+0x7c>)
 8001f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_GPU2D_MspInit+0x7c>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa2:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <HAL_GPU2D_MspInit+0x7c>)
 8001fa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_GPU2D_MspInit+0x7c>)
 8001fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 0, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2084      	movs	r0, #132	; 0x84
 8001fc0:	f001 f95a 	bl	8003278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 8001fc4:	2084      	movs	r0, #132	; 0x84
 8001fc6:	f001 f971 	bl	80032ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 0, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	2085      	movs	r0, #133	; 0x85
 8001fd0:	f001 f952 	bl	8003278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 8001fd4:	2085      	movs	r0, #133	; 0x85
 8001fd6:	f001 f969 	bl	80032ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */

  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	4002f000 	.word	0x4002f000
 8001fe8:	46020c00 	.word	0x46020c00

08001fec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b0cc      	sub	sp, #304	; 0x130
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ff6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ffa:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800200c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002010:	22e0      	movs	r2, #224	; 0xe0
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f00b fc7c 	bl	800d912 <memset>
  if(hi2c->Instance==I2C1)
 800201a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800201e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4aba      	ldr	r2, [pc, #744]	; (8002310 <HAL_I2C_MspInit+0x324>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d14f      	bne.n	80020cc <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800202c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800203e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002042:	4618      	mov	r0, r3
 8002044:	f006 fec6 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 800204e:	f7ff fdc3 	bl	8001bd8 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002052:	4bb0      	ldr	r3, [pc, #704]	; (8002314 <HAL_I2C_MspInit+0x328>)
 8002054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002058:	4aae      	ldr	r2, [pc, #696]	; (8002314 <HAL_I2C_MspInit+0x328>)
 800205a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800205e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002062:	4bac      	ldr	r3, [pc, #688]	; (8002314 <HAL_I2C_MspInit+0x328>)
 8002064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206c:	637b      	str	r3, [r7, #52]	; 0x34
 800206e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002070:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002074:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002078:	2312      	movs	r3, #18
 800207a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800208a:	2304      	movs	r3, #4
 800208c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002090:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002094:	4619      	mov	r1, r3
 8002096:	48a0      	ldr	r0, [pc, #640]	; (8002318 <HAL_I2C_MspInit+0x32c>)
 8002098:	f002 fcc2 	bl	8004a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800209c:	4b9d      	ldr	r3, [pc, #628]	; (8002314 <HAL_I2C_MspInit+0x328>)
 800209e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020a2:	4a9c      	ldr	r2, [pc, #624]	; (8002314 <HAL_I2C_MspInit+0x328>)
 80020a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020a8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80020ac:	4b99      	ldr	r3, [pc, #612]	; (8002314 <HAL_I2C_MspInit+0x328>)
 80020ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020b2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80020b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80020ba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80020c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020c8:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C6_MspInit 1 */

  /* USER CODE END I2C6_MspInit 1 */
  }

}
 80020ca:	e1c0      	b.n	800244e <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C2)
 80020cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80020d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a90      	ldr	r2, [pc, #576]	; (800231c <HAL_I2C_MspInit+0x330>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d157      	bne.n	800218e <HAL_I2C_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80020de:	f04f 0280 	mov.w	r2, #128	; 0x80
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020f4:	4618      	mov	r0, r3
 80020f6:	f006 fe6d 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8002100:	f7ff fd6a 	bl	8001bd8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002104:	4b83      	ldr	r3, [pc, #524]	; (8002314 <HAL_I2C_MspInit+0x328>)
 8002106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800210a:	4a82      	ldr	r2, [pc, #520]	; (8002314 <HAL_I2C_MspInit+0x328>)
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002114:	4b7f      	ldr	r3, [pc, #508]	; (8002314 <HAL_I2C_MspInit+0x328>)
 8002116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800211a:	f003 0202 	and.w	r2, r3, #2
 800211e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800212c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002130:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002132:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002136:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800213a:	2312      	movs	r3, #18
 800213c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800214c:	2304      	movs	r3, #4
 800214e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002152:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002156:	4619      	mov	r1, r3
 8002158:	4871      	ldr	r0, [pc, #452]	; (8002320 <HAL_I2C_MspInit+0x334>)
 800215a:	f002 fc61 	bl	8004a20 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800215e:	4b6d      	ldr	r3, [pc, #436]	; (8002314 <HAL_I2C_MspInit+0x328>)
 8002160:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002164:	4a6b      	ldr	r2, [pc, #428]	; (8002314 <HAL_I2C_MspInit+0x328>)
 8002166:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800216a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800216e:	4b69      	ldr	r3, [pc, #420]	; (8002314 <HAL_I2C_MspInit+0x328>)
 8002170:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002174:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800217c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	e15f      	b.n	800244e <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C3)
 800218e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002192:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a62      	ldr	r2, [pc, #392]	; (8002324 <HAL_I2C_MspInit+0x338>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d156      	bne.n	800224e <HAL_I2C_MspInit+0x262>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80021a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021b6:	4618      	mov	r0, r3
 80021b8:	f006 fe0c 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_MspInit+0x1da>
      Error_Handler();
 80021c2:	f7ff fd09 	bl	8001bd8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c6:	4b53      	ldr	r3, [pc, #332]	; (8002314 <HAL_I2C_MspInit+0x328>)
 80021c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021cc:	4a51      	ldr	r2, [pc, #324]	; (8002314 <HAL_I2C_MspInit+0x328>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021d6:	4b4f      	ldr	r3, [pc, #316]	; (8002314 <HAL_I2C_MspInit+0x328>)
 80021d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021dc:	f003 0204 	and.w	r2, r3, #4
 80021e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021f2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80021f4:	2303      	movs	r3, #3
 80021f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021fa:	2312      	movs	r3, #18
 80021fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800220c:	2304      	movs	r3, #4
 800220e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002212:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002216:	4619      	mov	r1, r3
 8002218:	4843      	ldr	r0, [pc, #268]	; (8002328 <HAL_I2C_MspInit+0x33c>)
 800221a:	f002 fc01 	bl	8004a20 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800221e:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <HAL_I2C_MspInit+0x328>)
 8002220:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002224:	4a3b      	ldr	r2, [pc, #236]	; (8002314 <HAL_I2C_MspInit+0x328>)
 8002226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800222e:	4b39      	ldr	r3, [pc, #228]	; (8002314 <HAL_I2C_MspInit+0x328>)
 8002230:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002234:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800223c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002246:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	e0ff      	b.n	800244e <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C4)
 800224e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002252:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a34      	ldr	r2, [pc, #208]	; (800232c <HAL_I2C_MspInit+0x340>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d169      	bne.n	8002334 <HAL_I2C_MspInit+0x348>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002260:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002272:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002276:	4618      	mov	r0, r3
 8002278:	f006 fdac 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_I2C_MspInit+0x29a>
      Error_Handler();
 8002282:	f7ff fca9 	bl	8001bd8 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002286:	4b23      	ldr	r3, [pc, #140]	; (8002314 <HAL_I2C_MspInit+0x328>)
 8002288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800228c:	4a21      	ldr	r2, [pc, #132]	; (8002314 <HAL_I2C_MspInit+0x328>)
 800228e:	f043 0308 	orr.w	r3, r3, #8
 8002292:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002296:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <HAL_I2C_MspInit+0x328>)
 8002298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800229c:	f003 0208 	and.w	r2, r3, #8
 80022a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80022b2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80022b4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80022b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022bc:	2312      	movs	r3, #18
 80022be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80022ce:	2304      	movs	r3, #4
 80022d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022d4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80022d8:	4619      	mov	r1, r3
 80022da:	4815      	ldr	r0, [pc, #84]	; (8002330 <HAL_I2C_MspInit+0x344>)
 80022dc:	f002 fba0 	bl	8004a20 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80022e0:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <HAL_I2C_MspInit+0x328>)
 80022e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80022e6:	4a0b      	ldr	r2, [pc, #44]	; (8002314 <HAL_I2C_MspInit+0x328>)
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_I2C_MspInit+0x328>)
 80022f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80022f6:	f003 0202 	and.w	r2, r3, #2
 80022fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022fe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002308:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800230c:	681b      	ldr	r3, [r3, #0]
}
 800230e:	e09e      	b.n	800244e <HAL_I2C_MspInit+0x462>
 8002310:	40005400 	.word	0x40005400
 8002314:	46020c00 	.word	0x46020c00
 8002318:	42021800 	.word	0x42021800
 800231c:	40005800 	.word	0x40005800
 8002320:	42020400 	.word	0x42020400
 8002324:	46002800 	.word	0x46002800
 8002328:	42020800 	.word	0x42020800
 800232c:	40008400 	.word	0x40008400
 8002330:	42020c00 	.word	0x42020c00
  else if(hi2c->Instance==I2C6)
 8002334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002338:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a45      	ldr	r2, [pc, #276]	; (8002458 <HAL_I2C_MspInit+0x46c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	f040 8083 	bne.w	800244e <HAL_I2C_MspInit+0x462>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C6;
 8002348:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c6ClockSelection = RCC_I2C6CLKSOURCE_PCLK1;
 8002354:	2300      	movs	r3, #0
 8002356:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800235a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800235e:	4618      	mov	r0, r3
 8002360:	f006 fd38 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_MspInit+0x382>
      Error_Handler();
 800236a:	f7ff fc35 	bl	8001bd8 <Error_Handler>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800236e:	4b3b      	ldr	r3, [pc, #236]	; (800245c <HAL_I2C_MspInit+0x470>)
 8002370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002374:	4a39      	ldr	r2, [pc, #228]	; (800245c <HAL_I2C_MspInit+0x470>)
 8002376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800237a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800237e:	4b37      	ldr	r3, [pc, #220]	; (800245c <HAL_I2C_MspInit+0x470>)
 8002380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002384:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800238c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002396:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800239a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800239c:	4b2f      	ldr	r3, [pc, #188]	; (800245c <HAL_I2C_MspInit+0x470>)
 800239e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023a2:	4a2e      	ldr	r2, [pc, #184]	; (800245c <HAL_I2C_MspInit+0x470>)
 80023a4:	f043 0320 	orr.w	r3, r3, #32
 80023a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80023ac:	4b2b      	ldr	r3, [pc, #172]	; (800245c <HAL_I2C_MspInit+0x470>)
 80023ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023b2:	f003 0220 	and.w	r2, r3, #32
 80023b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80023c8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023d2:	2312      	movs	r3, #18
 80023d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	2300      	movs	r3, #0
 80023e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 80023e4:	2302      	movs	r3, #2
 80023e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80023ea:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80023ee:	4619      	mov	r1, r3
 80023f0:	481b      	ldr	r0, [pc, #108]	; (8002460 <HAL_I2C_MspInit+0x474>)
 80023f2:	f002 fb15 	bl	8004a20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023f6:	2301      	movs	r3, #1
 80023f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023fc:	2312      	movs	r3, #18
 80023fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002408:	2300      	movs	r3, #0
 800240a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 800240e:	2302      	movs	r3, #2
 8002410:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002414:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002418:	4619      	mov	r1, r3
 800241a:	4812      	ldr	r0, [pc, #72]	; (8002464 <HAL_I2C_MspInit+0x478>)
 800241c:	f002 fb00 	bl	8004a20 <HAL_GPIO_Init>
    __HAL_RCC_I2C6_CLK_ENABLE();
 8002420:	4b0e      	ldr	r3, [pc, #56]	; (800245c <HAL_I2C_MspInit+0x470>)
 8002422:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002426:	4a0d      	ldr	r2, [pc, #52]	; (800245c <HAL_I2C_MspInit+0x470>)
 8002428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800242c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <HAL_I2C_MspInit+0x470>)
 8002432:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002436:	f003 0280 	and.w	r2, r3, #128	; 0x80
 800243a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800243e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002448:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800244c:	681b      	ldr	r3, [r3, #0]
}
 800244e:	bf00      	nop
 8002450:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40009c00 	.word	0x40009c00
 800245c:	46020c00 	.word	0x46020c00
 8002460:	42022400 	.word	0x42022400
 8002464:	42021400 	.word	0x42021400

08002468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b0c8      	sub	sp, #288	; 0x120
 800246c:	af00      	add	r7, sp, #0
 800246e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002472:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002476:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002488:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800248c:	22e0      	movs	r2, #224	; 0xe0
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f00b fa3e 	bl	800d912 <memset>
  if(huart->Instance==LPUART1)
 8002496:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800249a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4aa1      	ldr	r2, [pc, #644]	; (8002728 <HAL_UART_MspInit+0x2c0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d17b      	bne.n	80025a0 <HAL_UART_MspInit+0x138>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80024a8:	f04f 0220 	mov.w	r2, #32
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024be:	4618      	mov	r0, r3
 80024c0:	f006 fc88 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80024ca:	f7ff fb85 	bl	8001bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80024ce:	4b97      	ldr	r3, [pc, #604]	; (800272c <HAL_UART_MspInit+0x2c4>)
 80024d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80024d4:	4a95      	ldr	r2, [pc, #596]	; (800272c <HAL_UART_MspInit+0x2c4>)
 80024d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024da:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80024de:	4b93      	ldr	r3, [pc, #588]	; (800272c <HAL_UART_MspInit+0x2c4>)
 80024e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80024e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024ec:	4b8f      	ldr	r3, [pc, #572]	; (800272c <HAL_UART_MspInit+0x2c4>)
 80024ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024f2:	4a8e      	ldr	r2, [pc, #568]	; (800272c <HAL_UART_MspInit+0x2c4>)
 80024f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024fc:	4b8b      	ldr	r3, [pc, #556]	; (800272c <HAL_UART_MspInit+0x2c4>)
 80024fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002502:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002506:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800250a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002514:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002518:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251a:	4b84      	ldr	r3, [pc, #528]	; (800272c <HAL_UART_MspInit+0x2c4>)
 800251c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002520:	4a82      	ldr	r2, [pc, #520]	; (800272c <HAL_UART_MspInit+0x2c4>)
 8002522:	f043 0302 	orr.w	r3, r3, #2
 8002526:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800252a:	4b80      	ldr	r3, [pc, #512]	; (800272c <HAL_UART_MspInit+0x2c4>)
 800252c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002530:	f003 0202 	and.w	r2, r3, #2
 8002534:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002538:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002542:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002546:	681b      	ldr	r3, [r3, #0]
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    PG5     ------> LPUART1_CTS
    PB1     ------> LPUART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_5;
 8002548:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800254c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255c:	2300      	movs	r3, #0
 800255e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002562:	2308      	movs	r3, #8
 8002564:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002568:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800256c:	4619      	mov	r1, r3
 800256e:	4870      	ldr	r0, [pc, #448]	; (8002730 <HAL_UART_MspInit+0x2c8>)
 8002570:	f002 fa56 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002574:	2302      	movs	r3, #2
 8002576:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002586:	2300      	movs	r3, #0
 8002588:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800258c:	2308      	movs	r3, #8
 800258e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002592:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002596:	4619      	mov	r1, r3
 8002598:	4866      	ldr	r0, [pc, #408]	; (8002734 <HAL_UART_MspInit+0x2cc>)
 800259a:	f002 fa41 	bl	8004a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800259e:	e0bd      	b.n	800271c <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART1)
 80025a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80025a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a62      	ldr	r2, [pc, #392]	; (8002738 <HAL_UART_MspInit+0x2d0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d155      	bne.n	800265e <HAL_UART_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025b2:	f04f 0201 	mov.w	r2, #1
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80025be:	2300      	movs	r3, #0
 80025c0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025c6:	4618      	mov	r0, r3
 80025c8:	f006 fc04 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 80025d2:	f7ff fb01 	bl	8001bd8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80025d6:	4b55      	ldr	r3, [pc, #340]	; (800272c <HAL_UART_MspInit+0x2c4>)
 80025d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80025dc:	4a53      	ldr	r2, [pc, #332]	; (800272c <HAL_UART_MspInit+0x2c4>)
 80025de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80025e6:	4b51      	ldr	r3, [pc, #324]	; (800272c <HAL_UART_MspInit+0x2c4>)
 80025e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80025ec:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80025f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80025f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80025fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002602:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002604:	4b49      	ldr	r3, [pc, #292]	; (800272c <HAL_UART_MspInit+0x2c4>)
 8002606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800260a:	4a48      	ldr	r2, [pc, #288]	; (800272c <HAL_UART_MspInit+0x2c4>)
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002614:	4b45      	ldr	r3, [pc, #276]	; (800272c <HAL_UART_MspInit+0x2c4>)
 8002616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800261a:	f003 0202 	and.w	r2, r3, #2
 800261e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002622:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800262c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002630:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002632:	23c0      	movs	r3, #192	; 0xc0
 8002634:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002638:	2302      	movs	r3, #2
 800263a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800264a:	2307      	movs	r3, #7
 800264c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002650:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002654:	4619      	mov	r1, r3
 8002656:	4837      	ldr	r0, [pc, #220]	; (8002734 <HAL_UART_MspInit+0x2cc>)
 8002658:	f002 f9e2 	bl	8004a20 <HAL_GPIO_Init>
}
 800265c:	e05e      	b.n	800271c <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART6)
 800265e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002662:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a34      	ldr	r2, [pc, #208]	; (800273c <HAL_UART_MspInit+0x2d4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d155      	bne.n	800271c <HAL_UART_MspInit+0x2b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002670:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 800267c:	2300      	movs	r3, #0
 800267e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002686:	4618      	mov	r0, r3
 8002688:	f006 fba4 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 8002692:	f7ff faa1 	bl	8001bd8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002696:	4b25      	ldr	r3, [pc, #148]	; (800272c <HAL_UART_MspInit+0x2c4>)
 8002698:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800269c:	4a23      	ldr	r2, [pc, #140]	; (800272c <HAL_UART_MspInit+0x2c4>)
 800269e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026a2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80026a6:	4b21      	ldr	r3, [pc, #132]	; (800272c <HAL_UART_MspInit+0x2c4>)
 80026a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026ac:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 80026b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80026b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80026be:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80026c2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_UART_MspInit+0x2c4>)
 80026c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026ca:	4a18      	ldr	r2, [pc, #96]	; (800272c <HAL_UART_MspInit+0x2c4>)
 80026cc:	f043 0304 	orr.w	r3, r3, #4
 80026d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_UART_MspInit+0x2c4>)
 80026d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026da:	f003 0204 	and.w	r2, r3, #4
 80026de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80026e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80026ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026f0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80026f2:	230c      	movs	r3, #12
 80026f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800270a:	2307      	movs	r3, #7
 800270c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002710:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002714:	4619      	mov	r1, r3
 8002716:	480a      	ldr	r0, [pc, #40]	; (8002740 <HAL_UART_MspInit+0x2d8>)
 8002718:	f002 f982 	bl	8004a20 <HAL_GPIO_Init>
}
 800271c:	bf00      	nop
 800271e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	46002400 	.word	0x46002400
 800272c:	46020c00 	.word	0x46020c00
 8002730:	42021800 	.word	0x42021800
 8002734:	42020400 	.word	0x42020400
 8002738:	40013800 	.word	0x40013800
 800273c:	40006400 	.word	0x40006400
 8002740:	42020800 	.word	0x42020800

08002744 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b0bc      	sub	sp, #240	; 0xf0
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800274c:	f107 0310 	add.w	r3, r7, #16
 8002750:	22e0      	movs	r2, #224	; 0xe0
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f00b f8dc 	bl	800d912 <memset>
  if(hltdc->Instance==LTDC)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a22      	ldr	r2, [pc, #136]	; (80027e8 <HAL_LTDC_MspInit+0xa4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d13d      	bne.n	80027e0 <HAL_LTDC_MspInit+0x9c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0302 	mov.w	r3, #2
 800276c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 8002770:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002774:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8002778:	2303      	movs	r3, #3
 800277a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLL2.PLL2M = 1;
 800277c:	2301      	movs	r3, #1
 800277e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLL2.PLL2N = 20;
 8002780:	2314      	movs	r3, #20
 8002782:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2P = 2;
 8002784:	2302      	movs	r3, #2
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLL2.PLL2Q = 2;
 8002788:	2302      	movs	r3, #2
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLL2.PLL2R = 2;
 800278c:	2302      	movs	r3, #2
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8002790:	230c      	movs	r3, #12
 8002792:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8002798:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800279c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800279e:	f107 0310 	add.w	r3, r7, #16
 80027a2:	4618      	mov	r0, r3
 80027a4:	f006 fb16 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 80027ae:	f7ff fa13 	bl	8001bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <HAL_LTDC_MspInit+0xa8>)
 80027b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027b8:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <HAL_LTDC_MspInit+0xa8>)
 80027ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027be:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <HAL_LTDC_MspInit+0xa8>)
 80027c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80027d0:	2200      	movs	r2, #0
 80027d2:	2100      	movs	r1, #0
 80027d4:	2087      	movs	r0, #135	; 0x87
 80027d6:	f000 fd4f 	bl	8003278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80027da:	2087      	movs	r0, #135	; 0x87
 80027dc:	f000 fd66 	bl	80032ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80027e0:	bf00      	nop
 80027e2:	37f0      	adds	r7, #240	; 0xf0
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40016800 	.word	0x40016800
 80027ec:	46020c00 	.word	0x46020c00

080027f0 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b0ca      	sub	sp, #296	; 0x128
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80027fa:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80027fe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002810:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002814:	22e0      	movs	r2, #224	; 0xe0
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f00b f87a 	bl	800d912 <memset>
  if(hospi->Instance==OCTOSPI1)
 800281e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002822:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a93      	ldr	r2, [pc, #588]	; (8002a78 <HAL_OSPI_MspInit+0x288>)
 800282c:	4293      	cmp	r3, r2
 800282e:	f040 8133 	bne.w	8002a98 <HAL_OSPI_MspInit+0x2a8>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002832:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800283e:	2300      	movs	r3, #0
 8002840:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002844:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002848:	4618      	mov	r0, r3
 800284a:	f006 fac3 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8002854:	f7ff f9c0 	bl	8001bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8002858:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <HAL_OSPI_MspInit+0x28c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	3301      	adds	r3, #1
 800285e:	4a87      	ldr	r2, [pc, #540]	; (8002a7c <HAL_OSPI_MspInit+0x28c>)
 8002860:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8002862:	4b86      	ldr	r3, [pc, #536]	; (8002a7c <HAL_OSPI_MspInit+0x28c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d10e      	bne.n	8002888 <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 800286a:	4b85      	ldr	r3, [pc, #532]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 800286c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002870:	4a83      	ldr	r2, [pc, #524]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 8002872:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002876:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800287a:	4b81      	ldr	r3, [pc, #516]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 800287c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002888:	4b7d      	ldr	r3, [pc, #500]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288e:	4a7c      	ldr	r2, [pc, #496]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 8002890:	f043 0310 	orr.w	r3, r3, #16
 8002894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002898:	4b79      	ldr	r3, [pc, #484]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289e:	f003 0210 	and.w	r2, r3, #16
 80028a2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80028a6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80028b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028b4:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80028b6:	4b72      	ldr	r3, [pc, #456]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 80028b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028bc:	4a70      	ldr	r2, [pc, #448]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 80028be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028c6:	4b6e      	ldr	r3, [pc, #440]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 80028c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028cc:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80028d0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80028d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80028de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80028e2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028e4:	4b66      	ldr	r3, [pc, #408]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 80028e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ea:	4a65      	ldr	r2, [pc, #404]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 80028ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028f4:	4b62      	ldr	r3, [pc, #392]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 80028f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028fa:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80028fe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800290c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002910:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002912:	4b5b      	ldr	r3, [pc, #364]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 8002914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002918:	4a59      	ldr	r2, [pc, #356]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 800291a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002922:	4b57      	ldr	r3, [pc, #348]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 8002924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002928:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800292c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002930:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800293a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800293e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002940:	4b4f      	ldr	r3, [pc, #316]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 8002942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002946:	4a4e      	ldr	r2, [pc, #312]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 8002948:	f043 0302 	orr.w	r3, r3, #2
 800294c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002950:	4b4b      	ldr	r3, [pc, #300]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 8002952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002956:	f003 0202 	and.w	r2, r3, #2
 800295a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800295e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002968:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800296c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800296e:	4b44      	ldr	r3, [pc, #272]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 8002970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002974:	4a42      	ldr	r2, [pc, #264]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 8002976:	f043 0310 	orr.w	r3, r3, #16
 800297a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800297e:	4b40      	ldr	r3, [pc, #256]	; (8002a80 <HAL_OSPI_MspInit+0x290>)
 8002980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002984:	f003 0210 	and.w	r2, r3, #16
 8002988:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800298c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002996:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800299a:	681b      	ldr	r3, [r3, #0]
    PH9     ------> OCTOSPIM_P2_IO4
    PH12     ------> OCTOSPIM_P2_IO7
    PB10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9
 800299c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80029a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b0:	2303      	movs	r3, #3
 80029b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80029b6:	2305      	movs	r3, #5
 80029b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029bc:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80029c0:	4619      	mov	r1, r3
 80029c2:	4830      	ldr	r0, [pc, #192]	; (8002a84 <HAL_OSPI_MspInit+0x294>)
 80029c4:	f002 f82c 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029c8:	2340      	movs	r3, #64	; 0x40
 80029ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80029e0:	2303      	movs	r3, #3
 80029e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029e6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80029ea:	4619      	mov	r1, r3
 80029ec:	4826      	ldr	r0, [pc, #152]	; (8002a88 <HAL_OSPI_MspInit+0x298>)
 80029ee:	f002 f817 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80029f2:	230e      	movs	r3, #14
 80029f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a04:	2303      	movs	r3, #3
 8002a06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPI2;
 8002a0a:	2306      	movs	r3, #6
 8002a0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002a10:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002a14:	4619      	mov	r1, r3
 8002a16:	481d      	ldr	r0, [pc, #116]	; (8002a8c <HAL_OSPI_MspInit+0x29c>)
 8002a18:	f002 f802 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 8002a1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a20:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a30:	2303      	movs	r3, #3
 8002a32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002a36:	230a      	movs	r3, #10
 8002a38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002a40:	4619      	mov	r1, r3
 8002a42:	4813      	ldr	r0, [pc, #76]	; (8002a90 <HAL_OSPI_MspInit+0x2a0>)
 8002a44:	f001 ffec 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a50:	2302      	movs	r3, #2
 8002a52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002a62:	230a      	movs	r3, #10
 8002a64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a68:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4809      	ldr	r0, [pc, #36]	; (8002a94 <HAL_OSPI_MspInit+0x2a4>)
 8002a70:	f001 ffd6 	bl	8004a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8002a74:	e08f      	b.n	8002b96 <HAL_OSPI_MspInit+0x3a6>
 8002a76:	bf00      	nop
 8002a78:	420d1400 	.word	0x420d1400
 8002a7c:	200014c0 	.word	0x200014c0
 8002a80:	46020c00 	.word	0x46020c00
 8002a84:	42021c00 	.word	0x42021c00
 8002a88:	42021800 	.word	0x42021800
 8002a8c:	42022000 	.word	0x42022000
 8002a90:	42020400 	.word	0x42020400
 8002a94:	42021000 	.word	0x42021000
  else if(hospi->Instance==OCTOSPI2)
 8002a98:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a9c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a3e      	ldr	r2, [pc, #248]	; (8002ba0 <HAL_OSPI_MspInit+0x3b0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d175      	bne.n	8002b96 <HAL_OSPI_MspInit+0x3a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002aaa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002abc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f006 f987 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_OSPI_MspInit+0x2e0>
      Error_Handler();
 8002acc:	f7ff f884 	bl	8001bd8 <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8002ad0:	4b34      	ldr	r3, [pc, #208]	; (8002ba4 <HAL_OSPI_MspInit+0x3b4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	4a33      	ldr	r2, [pc, #204]	; (8002ba4 <HAL_OSPI_MspInit+0x3b4>)
 8002ad8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8002ada:	4b32      	ldr	r3, [pc, #200]	; (8002ba4 <HAL_OSPI_MspInit+0x3b4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d116      	bne.n	8002b10 <HAL_OSPI_MspInit+0x320>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8002ae2:	4b31      	ldr	r3, [pc, #196]	; (8002ba8 <HAL_OSPI_MspInit+0x3b8>)
 8002ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ae8:	4a2f      	ldr	r2, [pc, #188]	; (8002ba8 <HAL_OSPI_MspInit+0x3b8>)
 8002aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002aee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002af2:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <HAL_OSPI_MspInit+0x3b8>)
 8002af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002afc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002b00:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002b0a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b0e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8002b10:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <HAL_OSPI_MspInit+0x3b8>)
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b16:	4a24      	ldr	r2, [pc, #144]	; (8002ba8 <HAL_OSPI_MspInit+0x3b8>)
 8002b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b20:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <HAL_OSPI_MspInit+0x3b8>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b26:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002b2a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002b2e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002b38:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b3c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <HAL_OSPI_MspInit+0x3b8>)
 8002b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b44:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <HAL_OSPI_MspInit+0x3b8>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b4e:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <HAL_OSPI_MspInit+0x3b8>)
 8002b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b54:	f003 0201 	and.w	r2, r3, #1
 8002b58:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002b5c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002b66:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b6a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI2;
 8002b84:	230a      	movs	r3, #10
 8002b86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4806      	ldr	r0, [pc, #24]	; (8002bac <HAL_OSPI_MspInit+0x3bc>)
 8002b92:	f001 ff45 	bl	8004a20 <HAL_GPIO_Init>
}
 8002b96:	bf00      	nop
 8002b98:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	420d2400 	.word	0x420d2400
 8002ba4:	200014c0 	.word	0x200014c0
 8002ba8:	46020c00 	.word	0x46020c00
 8002bac:	42020000 	.word	0x42020000

08002bb0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b0bc      	sub	sp, #240	; 0xf0
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bb8:	f107 0310 	add.w	r3, r7, #16
 8002bbc:	22e0      	movs	r2, #224	; 0xe0
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f00a fea6 	bl	800d912 <memset>
  if(hrtc->Instance==RTC)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <HAL_RTC_MspInit+0x90>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d132      	bne.n	8002c36 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002bd0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002be4:	f107 0310 	add.w	r3, r7, #16
 8002be8:	4618      	mov	r0, r3
 8002bea:	f006 f8f3 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002bf4:	f7fe fff0 	bl	8001bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <HAL_RTC_MspInit+0x94>)
 8002bfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bfe:	4a11      	ldr	r2, [pc, #68]	; (8002c44 <HAL_RTC_MspInit+0x94>)
 8002c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002c08:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <HAL_RTC_MspInit+0x94>)
 8002c0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c0e:	4a0d      	ldr	r2, [pc, #52]	; (8002c44 <HAL_RTC_MspInit+0x94>)
 8002c10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c14:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <HAL_RTC_MspInit+0x94>)
 8002c1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <HAL_RTC_MspInit+0x94>)
 8002c28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c2c:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <HAL_RTC_MspInit+0x94>)
 8002c2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c36:	bf00      	nop
 8002c38:	37f0      	adds	r7, #240	; 0xf0
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	46007800 	.word	0x46007800
 8002c44:	46020c00 	.word	0x46020c00

08002c48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b0c4      	sub	sp, #272	; 0x110
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c56:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c68:	f107 0318 	add.w	r3, r7, #24
 8002c6c:	22e0      	movs	r2, #224	; 0xe0
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f00a fe4e 	bl	800d912 <memset>
  if(hspi->Instance==SPI1)
 8002c76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a41      	ldr	r2, [pc, #260]	; (8002d88 <HAL_SPI_MspInit+0x140>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d17a      	bne.n	8002d7e <HAL_SPI_MspInit+0x136>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002c88:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8002c94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c9c:	f107 0318 	add.w	r3, r7, #24
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f006 f897 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8002cac:	f7fe ff94 	bl	8001bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cb0:	4b36      	ldr	r3, [pc, #216]	; (8002d8c <HAL_SPI_MspInit+0x144>)
 8002cb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002cb6:	4a35      	ldr	r2, [pc, #212]	; (8002d8c <HAL_SPI_MspInit+0x144>)
 8002cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cbc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002cc0:	4b32      	ldr	r3, [pc, #200]	; (8002d8c <HAL_SPI_MspInit+0x144>)
 8002cc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cce:	4b2f      	ldr	r3, [pc, #188]	; (8002d8c <HAL_SPI_MspInit+0x144>)
 8002cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd4:	4a2d      	ldr	r2, [pc, #180]	; (8002d8c <HAL_SPI_MspInit+0x144>)
 8002cd6:	f043 0302 	orr.w	r3, r3, #2
 8002cda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cde:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_SPI_MspInit+0x144>)
 8002ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce4:	f003 0202 	and.w	r2, r3, #2
 8002ce8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002cec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002cf6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002cfa:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfc:	4b23      	ldr	r3, [pc, #140]	; (8002d8c <HAL_SPI_MspInit+0x144>)
 8002cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d02:	4a22      	ldr	r2, [pc, #136]	; (8002d8c <HAL_SPI_MspInit+0x144>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d0c:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <HAL_SPI_MspInit+0x144>)
 8002d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d12:	f003 0201 	and.w	r2, r3, #1
 8002d16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d28:	681b      	ldr	r3, [r3, #0]
    PB0     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d42:	2305      	movs	r3, #5
 8002d44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d48:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4810      	ldr	r0, [pc, #64]	; (8002d90 <HAL_SPI_MspInit+0x148>)
 8002d50:	f001 fe66 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 8002d54:	23e0      	movs	r3, #224	; 0xe0
 8002d56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d6c:	2305      	movs	r3, #5
 8002d6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d72:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002d76:	4619      	mov	r1, r3
 8002d78:	4806      	ldr	r0, [pc, #24]	; (8002d94 <HAL_SPI_MspInit+0x14c>)
 8002d7a:	f001 fe51 	bl	8004a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d7e:	bf00      	nop
 8002d80:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40013000 	.word	0x40013000
 8002d8c:	46020c00 	.word	0x46020c00
 8002d90:	42020400 	.word	0x42020400
 8002d94:	42020000 	.word	0x42020000

08002d98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08e      	sub	sp, #56	; 0x38
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002da8:	4b2e      	ldr	r3, [pc, #184]	; (8002e64 <HAL_InitTick+0xcc>)
 8002daa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dae:	4a2d      	ldr	r2, [pc, #180]	; (8002e64 <HAL_InitTick+0xcc>)
 8002db0:	f043 0310 	orr.w	r3, r3, #16
 8002db4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002db8:	4b2a      	ldr	r3, [pc, #168]	; (8002e64 <HAL_InitTick+0xcc>)
 8002dba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002dc6:	f107 0210 	add.w	r2, r7, #16
 8002dca:	f107 0314 	add.w	r3, r7, #20
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f005 ff15 	bl	8008c00 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002dd6:	f005 fed7 	bl	8008b88 <HAL_RCC_GetPCLK1Freq>
 8002dda:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	4a22      	ldr	r2, [pc, #136]	; (8002e68 <HAL_InitTick+0xd0>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	0c9b      	lsrs	r3, r3, #18
 8002de6:	3b01      	subs	r3, #1
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002dea:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <HAL_InitTick+0xd4>)
 8002dec:	4a20      	ldr	r2, [pc, #128]	; (8002e70 <HAL_InitTick+0xd8>)
 8002dee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002df0:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <HAL_InitTick+0xd4>)
 8002df2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002df6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002df8:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <HAL_InitTick+0xd4>)
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002dfe:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <HAL_InitTick+0xd4>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_InitTick+0xd4>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002e0a:	4818      	ldr	r0, [pc, #96]	; (8002e6c <HAL_InitTick+0xd4>)
 8002e0c:	f009 fc00 	bl	800c610 <HAL_TIM_Base_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8002e16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d118      	bne.n	8002e50 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002e1e:	4813      	ldr	r0, [pc, #76]	; (8002e6c <HAL_InitTick+0xd4>)
 8002e20:	f009 fc58 	bl	800c6d4 <HAL_TIM_Base_Start_IT>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8002e2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10e      	bne.n	8002e50 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b0f      	cmp	r3, #15
 8002e36:	d808      	bhi.n	8002e4a <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	2031      	movs	r0, #49	; 0x31
 8002e3e:	f000 fa1b 	bl	8003278 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e42:	4a0c      	ldr	r2, [pc, #48]	; (8002e74 <HAL_InitTick+0xdc>)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	e002      	b.n	8002e50 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002e50:	2031      	movs	r0, #49	; 0x31
 8002e52:	f000 fa2b 	bl	80032ac <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8002e56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3738      	adds	r7, #56	; 0x38
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	46020c00 	.word	0x46020c00
 8002e68:	431bde83 	.word	0x431bde83
 8002e6c:	200014c4 	.word	0x200014c4
 8002e70:	40001000 	.word	0x40001000
 8002e74:	20000d04 	.word	0x20000d04

08002e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002e7c:	f005 ff08 	bl	8008c90 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e80:	e7fe      	b.n	8002e80 <NMI_Handler+0x8>

08002e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e86:	e7fe      	b.n	8002e86 <HardFault_Handler+0x4>

08002e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e8c:	e7fe      	b.n	8002e8c <MemManage_Handler+0x4>

08002e8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e92:	e7fe      	b.n	8002e92 <BusFault_Handler+0x4>

08002e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e98:	e7fe      	b.n	8002e98 <UsageFault_Handler+0x4>

08002e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <TIM6_IRQHandler+0x10>)
 8002eda:	f009 fc9b 	bl	800c814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200014c4 	.word	0x200014c4

08002ee8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <DMA2D_IRQHandler+0x10>)
 8002eee:	f000 fc65 	bl	80037bc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000e64 	.word	0x20000e64

08002efc <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 8002f00:	4802      	ldr	r0, [pc, #8]	; (8002f0c <GPU2D_IRQHandler+0x10>)
 8002f02:	f001 ffa7 	bl	8004e54 <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000f30 	.word	0x20000f30

08002f10 <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 8002f14:	4802      	ldr	r0, [pc, #8]	; (8002f20 <GPU2D_ER_IRQHandler+0x10>)
 8002f16:	f001 ffc3 	bl	8004ea0 <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000f30 	.word	0x20000f30

08002f24 <GFXMMU_IRQHandler>:

/**
  * @brief This function handles GFXMMU global interrupt.
  */
void GFXMMU_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GFXMMU_IRQn 0 */

  /* USER CODE END GFXMMU_IRQn 0 */
  HAL_GFXMMU_IRQHandler(&hgfxmmu);
 8002f28:	4802      	ldr	r0, [pc, #8]	; (8002f34 <GFXMMU_IRQHandler+0x10>)
 8002f2a:	f001 fd49 	bl	80049c0 <HAL_GFXMMU_IRQHandler>
  /* USER CODE BEGIN GFXMMU_IRQn 1 */

  /* USER CODE END GFXMMU_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000ee8 	.word	0x20000ee8

08002f38 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002f3c:	4802      	ldr	r0, [pc, #8]	; (8002f48 <LTDC_IRQHandler+0x10>)
 8002f3e:	f002 ff45 	bl	8005dcc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	2000129c 	.word	0x2000129c

08002f4c <DSI_IRQHandler>:

/**
  * @brief This function handles DSIHOST global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002f50:	4802      	ldr	r0, [pc, #8]	; (8002f5c <DSI_IRQHandler+0x10>)
 8002f52:	f001 f88b 	bl	800406c <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000ec4 	.word	0x20000ec4

08002f60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f64:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <SystemInit+0x68>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	4a17      	ldr	r2, [pc, #92]	; (8002fc8 <SystemInit+0x68>)
 8002f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002f74:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <SystemInit+0x6c>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002f7a:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <SystemInit+0x6c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002f80:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <SystemInit+0x6c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002f86:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <SystemInit+0x6c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002f8c:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <SystemInit+0x6c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <SystemInit+0x6c>)
 8002f92:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002f96:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002f9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <SystemInit+0x6c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <SystemInit+0x6c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a09      	ldr	r2, [pc, #36]	; (8002fcc <SystemInit+0x6c>)
 8002fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002fae:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <SystemInit+0x6c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fb4:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <SystemInit+0x68>)
 8002fb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fba:	609a      	str	r2, [r3, #8]
  #endif
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	e000ed00 	.word	0xe000ed00
 8002fcc:	46020c00 	.word	0x46020c00

08002fd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003008 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fd4:	f7ff ffc4 	bl	8002f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002fd8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002fda:	e003      	b.n	8002fe4 <LoopCopyDataInit>

08002fdc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002fde:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002fe0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002fe2:	3104      	adds	r1, #4

08002fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002fe4:	480a      	ldr	r0, [pc, #40]	; (8003010 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002fe8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002fea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002fec:	d3f6      	bcc.n	8002fdc <CopyDataInit>
	ldr	r2, =_sbss
 8002fee:	4a0a      	ldr	r2, [pc, #40]	; (8003018 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ff0:	e002      	b.n	8002ff8 <LoopFillZerobss>

08002ff2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ff2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ff4:	f842 3b04 	str.w	r3, [r2], #4

08002ff8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <LoopForever+0x16>)
	cmp	r2, r3
 8002ffa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002ffc:	d3f9      	bcc.n	8002ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ffe:	f00a fc91 	bl	800d924 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003002:	f7fd fb55 	bl	80006b0 <main>

08003006 <LoopForever>:

LoopForever:
    b LoopForever
 8003006:	e7fe      	b.n	8003006 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003008:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 800300c:	0800da94 	.word	0x0800da94
	ldr	r0, =_sdata
 8003010:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003014:	20000d09 	.word	0x20000d09
	ldr	r2, =_sbss
 8003018:	20000d0c 	.word	0x20000d0c
	ldr	r3, = _ebss
 800301c:	20001538 	.word	0x20001538

08003020 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003020:	e7fe      	b.n	8003020 <ADC1_2_IRQHandler>
	...

08003024 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003028:	4b11      	ldr	r3, [pc, #68]	; (8003070 <HAL_Init+0x4c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a10      	ldr	r2, [pc, #64]	; (8003070 <HAL_Init+0x4c>)
 800302e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003034:	2003      	movs	r0, #3
 8003036:	f000 f914 	bl	8003262 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800303a:	f005 fc89 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800303e:	4602      	mov	r2, r0
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <HAL_Init+0x50>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	490b      	ldr	r1, [pc, #44]	; (8003078 <HAL_Init+0x54>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	fa22 f303 	lsr.w	r3, r2, r3
 8003050:	4a0a      	ldr	r2, [pc, #40]	; (800307c <HAL_Init+0x58>)
 8003052:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003054:	200f      	movs	r0, #15
 8003056:	f7ff fe9f 	bl	8002d98 <HAL_InitTick>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e002      	b.n	800306a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003064:	f7fe fdbe 	bl	8001be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40022000 	.word	0x40022000
 8003074:	46020c00 	.word	0x46020c00
 8003078:	0800d984 	.word	0x0800d984
 800307c:	20000d00 	.word	0x20000d00

08003080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_IncTick+0x20>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_IncTick+0x24>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4413      	add	r3, r2
 8003090:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <HAL_IncTick+0x24>)
 8003092:	6013      	str	r3, [r2, #0]
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000d08 	.word	0x20000d08
 80030a4:	20001510 	.word	0x20001510

080030a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return uwTick;
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <HAL_GetTick+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20001510 	.word	0x20001510

080030c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030c8:	f7ff ffee 	bl	80030a8 <HAL_GetTick>
 80030cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d005      	beq.n	80030e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_Delay+0x44>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030e6:	bf00      	nop
 80030e8:	f7ff ffde 	bl	80030a8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d8f7      	bhi.n	80030e8 <HAL_Delay+0x28>
  {
  }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000d08 	.word	0x20000d08

08003108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003124:	4013      	ands	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313a:	4a04      	ldr	r2, [pc, #16]	; (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	60d3      	str	r3, [r2, #12]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <__NVIC_GetPriorityGrouping+0x18>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	f003 0307 	and.w	r3, r3, #7
}
 800315e:	4618      	mov	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800317a:	2b00      	cmp	r3, #0
 800317c:	db0b      	blt.n	8003196 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	f003 021f 	and.w	r2, r3, #31
 8003184:	4907      	ldr	r1, [pc, #28]	; (80031a4 <__NVIC_EnableIRQ+0x38>)
 8003186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	2001      	movs	r0, #1
 800318e:	fa00 f202 	lsl.w	r2, r0, r2
 8003192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	e000e100 	.word	0xe000e100

080031a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	db0a      	blt.n	80031d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	490c      	ldr	r1, [pc, #48]	; (80031f4 <__NVIC_SetPriority+0x4c>)
 80031c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031c6:	0112      	lsls	r2, r2, #4
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	440b      	add	r3, r1
 80031cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d0:	e00a      	b.n	80031e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4908      	ldr	r1, [pc, #32]	; (80031f8 <__NVIC_SetPriority+0x50>)
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	3b04      	subs	r3, #4
 80031e0:	0112      	lsls	r2, r2, #4
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	440b      	add	r3, r1
 80031e6:	761a      	strb	r2, [r3, #24]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000e100 	.word	0xe000e100
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f1c3 0307 	rsb	r3, r3, #7
 8003216:	2b04      	cmp	r3, #4
 8003218:	bf28      	it	cs
 800321a:	2304      	movcs	r3, #4
 800321c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3304      	adds	r3, #4
 8003222:	2b06      	cmp	r3, #6
 8003224:	d902      	bls.n	800322c <NVIC_EncodePriority+0x30>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3b03      	subs	r3, #3
 800322a:	e000      	b.n	800322e <NVIC_EncodePriority+0x32>
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	f04f 32ff 	mov.w	r2, #4294967295
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43da      	mvns	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	401a      	ands	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003244:	f04f 31ff 	mov.w	r1, #4294967295
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43d9      	mvns	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	4313      	orrs	r3, r2
         );
}
 8003256:	4618      	mov	r0, r3
 8003258:	3724      	adds	r7, #36	; 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff ff4c 	bl	8003108 <__NVIC_SetPriorityGrouping>
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003286:	f7ff ff63 	bl	8003150 <__NVIC_GetPriorityGrouping>
 800328a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	6978      	ldr	r0, [r7, #20]
 8003292:	f7ff ffb3 	bl	80031fc <NVIC_EncodePriority>
 8003296:	4602      	mov	r2, r0
 8003298:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff ff82 	bl	80031a8 <__NVIC_SetPriority>
}
 80032a4:	bf00      	nop
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff ff56 	bl	800316c <__NVIC_EnableIRQ>
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e054      	b.n	8003384 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7f5b      	ldrb	r3, [r3, #29]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d105      	bne.n	80032f0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fe fd0e 	bl	8001d0c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	791b      	ldrb	r3, [r3, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10c      	bne.n	8003318 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a22      	ldr	r2, [pc, #136]	; (800338c <HAL_CRC_Init+0xc4>)
 8003304:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0218 	bic.w	r2, r2, #24
 8003314:	609a      	str	r2, [r3, #8]
 8003316:	e00c      	b.n	8003332 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6899      	ldr	r1, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	461a      	mov	r2, r3
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f834 	bl	8003390 <HAL_CRCEx_Polynomial_Set>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e028      	b.n	8003384 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	795b      	ldrb	r3, [r3, #5]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d105      	bne.n	8003346 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f04f 32ff 	mov.w	r2, #4294967295
 8003342:	611a      	str	r2, [r3, #16]
 8003344:	e004      	b.n	8003350 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6912      	ldr	r2, [r2, #16]
 800334e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699a      	ldr	r2, [r3, #24]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	04c11db7 	.word	0x04c11db7

08003390 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80033a0:	231f      	movs	r3, #31
 80033a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	75fb      	strb	r3, [r7, #23]
 80033b2:	e063      	b.n	800347c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80033b4:	bf00      	nop
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1e5a      	subs	r2, r3, #1
 80033ba:	613a      	str	r2, [r7, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d009      	beq.n	80033d4 <HAL_CRCEx_Polynomial_Set+0x44>
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	fa22 f303 	lsr.w	r3, r2, r3
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f0      	beq.n	80033b6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b18      	cmp	r3, #24
 80033d8:	d846      	bhi.n	8003468 <HAL_CRCEx_Polynomial_Set+0xd8>
 80033da:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	0800346f 	.word	0x0800346f
 80033e4:	08003469 	.word	0x08003469
 80033e8:	08003469 	.word	0x08003469
 80033ec:	08003469 	.word	0x08003469
 80033f0:	08003469 	.word	0x08003469
 80033f4:	08003469 	.word	0x08003469
 80033f8:	08003469 	.word	0x08003469
 80033fc:	08003469 	.word	0x08003469
 8003400:	0800345d 	.word	0x0800345d
 8003404:	08003469 	.word	0x08003469
 8003408:	08003469 	.word	0x08003469
 800340c:	08003469 	.word	0x08003469
 8003410:	08003469 	.word	0x08003469
 8003414:	08003469 	.word	0x08003469
 8003418:	08003469 	.word	0x08003469
 800341c:	08003469 	.word	0x08003469
 8003420:	08003451 	.word	0x08003451
 8003424:	08003469 	.word	0x08003469
 8003428:	08003469 	.word	0x08003469
 800342c:	08003469 	.word	0x08003469
 8003430:	08003469 	.word	0x08003469
 8003434:	08003469 	.word	0x08003469
 8003438:	08003469 	.word	0x08003469
 800343c:	08003469 	.word	0x08003469
 8003440:	08003445 	.word	0x08003445
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2b06      	cmp	r3, #6
 8003448:	d913      	bls.n	8003472 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800344e:	e010      	b.n	8003472 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2b07      	cmp	r3, #7
 8003454:	d90f      	bls.n	8003476 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800345a:	e00c      	b.n	8003476 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b0f      	cmp	r3, #15
 8003460:	d90b      	bls.n	800347a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003466:	e008      	b.n	800347a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]
        break;
 800346c:	e006      	b.n	800347c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800346e:	bf00      	nop
 8003470:	e004      	b.n	800347c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003472:	bf00      	nop
 8003474:	e002      	b.n	800347c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003476:	bf00      	nop
 8003478:	e000      	b.n	800347c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800347a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10d      	bne.n	800349e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f023 0118 	bic.w	r1, r3, #24
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	430a      	orrs	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800349e:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	371c      	adds	r7, #28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e037      	b.n	800352e <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d119      	bne.n	80034fe <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a1a      	ldr	r2, [pc, #104]	; (8003538 <HAL_DCACHE_Init+0x8c>)
 80034ce:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a1a      	ldr	r2, [pc, #104]	; (800353c <HAL_DCACHE_Init+0x90>)
 80034d4:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a19      	ldr	r2, [pc, #100]	; (8003540 <HAL_DCACHE_Init+0x94>)
 80034da:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a19      	ldr	r2, [pc, #100]	; (8003544 <HAL_DCACHE_Init+0x98>)
 80034e0:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a18      	ldr	r2, [pc, #96]	; (8003548 <HAL_DCACHE_Init+0x9c>)
 80034e6:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d102      	bne.n	80034f6 <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a16      	ldr	r2, [pc, #88]	; (800354c <HAL_DCACHE_Init+0xa0>)
 80034f4:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f814 	bl	8003550 <HAL_DCACHE_Enable>
 8003528:	4603      	mov	r3, r0
 800352a:	73fb      	strb	r3, [r7, #15]

  return status;
 800352c:	7bfb      	ldrb	r3, [r7, #15]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	080035ef 	.word	0x080035ef
 800353c:	0800359f 	.word	0x0800359f
 8003540:	080035b3 	.word	0x080035b3
 8003544:	080035db 	.word	0x080035db
 8003548:	080035c7 	.word	0x080035c7
 800354c:	08001d51 	.word	0x08001d51

08003550 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e015      	b.n	8003592 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 0309 	and.w	r3, r3, #9
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8003574:	2302      	movs	r3, #2
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	e00a      	b.n	8003590 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]
  }

  return status;
 8003590:	7bfb      	ldrb	r3, [r7, #15]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800360a:	f7ff fd4d 	bl	80030a8 <HAL_GetTick>
 800360e:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e06b      	b.n	80036f2 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d008      	beq.n	8003638 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e05c      	b.n	80036f2 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0204 	orr.w	r2, r2, #4
 8003646:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2205      	movs	r2, #5
 800364c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003650:	e020      	b.n	8003694 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003652:	f7ff fd29 	bl	80030a8 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b05      	cmp	r3, #5
 800365e:	d919      	bls.n	8003694 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	f043 0210 	orr.w	r2, r3, #16
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2203      	movs	r2, #3
 8003670:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003684:	2201      	movs	r2, #1
 8003686:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e02e      	b.n	80036f2 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0d7      	beq.n	8003652 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0202 	orr.w	r2, r2, #2
 80036b0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2204      	movs	r2, #4
 80036b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80036c2:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d007      	beq.n	80036e8 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036dc:	2201      	movs	r2, #1
 80036de:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2200      	movs	r2, #0
 80036e6:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e053      	b.n	80037b4 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d106      	bne.n	8003726 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7fe fb4f 	bl	8001dc4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2202      	movs	r2, #2
 800372a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6851      	ldr	r1, [r2, #4]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	69d2      	ldr	r2, [r2, #28]
 8003744:	4311      	orrs	r1, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	430b      	orrs	r3, r1
 800374c:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003754:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6891      	ldr	r1, [r2, #8]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6992      	ldr	r2, [r2, #24]
 8003764:	4311      	orrs	r1, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	430b      	orrs	r3, r1
 800376c:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	0c1b      	lsrs	r3, r3, #16
 8003776:	041b      	lsls	r3, r3, #16
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	68d1      	ldr	r1, [r2, #12]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	430b      	orrs	r3, r1
 8003782:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	051a      	lsls	r2, r3, #20
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	055b      	lsls	r3, r3, #21
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d026      	beq.n	800382c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d021      	beq.n	800382c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037f6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fc:	f043 0201 	orr.w	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2201      	movs	r2, #1
 800380a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2204      	movs	r2, #4
 8003810:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d026      	beq.n	8003884 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d021      	beq.n	8003884 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800384e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2220      	movs	r2, #32
 8003856:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385c:	f043 0202 	orr.w	r2, r3, #2
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2204      	movs	r2, #4
 8003868:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d026      	beq.n	80038dc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003894:	2b00      	cmp	r3, #0
 8003896:	d021      	beq.n	80038dc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038a6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2208      	movs	r2, #8
 80038ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b4:	f043 0204 	orr.w	r2, r3, #4
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2204      	movs	r2, #4
 80038c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d013      	beq.n	800390e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00e      	beq.n	800390e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2204      	movs	r2, #4
 8003906:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f853 	bl	80039b4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d024      	beq.n	8003962 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800391e:	2b00      	cmp	r3, #0
 8003920:	d01f      	beq.n	8003962 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003930:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2202      	movs	r2, #2
 8003938:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferCpltCallback != NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01f      	beq.n	80039ac <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d01a      	beq.n	80039ac <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003984:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2210      	movs	r2, #16
 800398c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f80e 	bl	80039c8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_DMA2D_ConfigLayer+0x20>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e084      	b.n	8003b06 <HAL_DMA2D_ConfigLayer+0x12a>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	4413      	add	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	3328      	adds	r3, #40	; 0x28
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	041b      	lsls	r3, r3, #16
 8003a28:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003a30:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003a3c:	4b35      	ldr	r3, [pc, #212]	; (8003b14 <HAL_DMA2D_ConfigLayer+0x138>)
 8003a3e:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b0a      	cmp	r3, #10
 8003a46:	d003      	beq.n	8003a50 <HAL_DMA2D_ConfigLayer+0x74>
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b09      	cmp	r3, #9
 8003a4e:	d107      	bne.n	8003a60 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	e005      	b.n	8003a6c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	061b      	lsls	r3, r3, #24
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d120      	bne.n	8003ab4 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	ea02 0103 	and.w	r1, r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b0a      	cmp	r3, #10
 8003a9a:	d003      	beq.n	8003aa4 <HAL_DMA2D_ConfigLayer+0xc8>
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b09      	cmp	r3, #9
 8003aa2:	d127      	bne.n	8003af4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ab2:	e01f      	b.n	8003af4 <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69da      	ldr	r2, [r3, #28]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	ea02 0103 	and.w	r1, r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b0a      	cmp	r3, #10
 8003adc:	d003      	beq.n	8003ae6 <HAL_DMA2D_ConfigLayer+0x10a>
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b09      	cmp	r3, #9
 8003ae4:	d106      	bne.n	8003af4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003af2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	ff33000f 	.word	0xff33000f

08003b18 <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003b30:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	; 0xc04
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	00da      	lsls	r2, r3, #3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	220e      	movs	r2, #14
 8003b52:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	; 0xc70
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 021f 	bic.w	r2, r2, #31
 8003b66:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6912      	ldr	r2, [r2, #16]
 8003b72:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	220e      	movs	r2, #14
 8003b7c:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	; 0xd08
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 021f 	bic.w	r2, r2, #31
 8003b90:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6912      	ldr	r2, [r2, #16]
 8003b9c:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	220e      	movs	r2, #14
 8003ba6:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	; 0xc5c
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003bba:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003bce:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d007      	beq.n	8003bea <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d003      	beq.n	8003bea <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8003be6:	2b05      	cmp	r3, #5
 8003be8:	d10a      	bne.n	8003c00 <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8003bfe:	e02c      	b.n	8003c5a <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00b      	beq.n	8003c20 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d007      	beq.n	8003c20 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d003      	beq.n	8003c20 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8003c1c:	2b06      	cmp	r3, #6
 8003c1e:	d10a      	bne.n	8003c36 <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2210      	movs	r2, #16
 8003c26:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2210      	movs	r2, #16
 8003c30:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8003c34:	e011      	b.n	8003c5a <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b07      	cmp	r3, #7
 8003c3c:	d003      	beq.n	8003c46 <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d109      	bne.n	8003c5a <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	; 0xc60
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 020f 	bic.w	r2, r2, #15
 8003c6a:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	; 0xcf8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 020f 	bic.w	r2, r2, #15
 8003c7e:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6952      	ldr	r2, [r2, #20]
 8003c8a:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6952      	ldr	r2, [r2, #20]
 8003c96:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003cc0:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	075a      	lsls	r2, r3, #29
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003cec:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	031a      	lsls	r2, r3, #12
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	021a      	lsls	r2, r3, #8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0c3      	b.n	8003ec8 <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	7e5b      	ldrb	r3, [r3, #25]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d102      	bne.n	8003d50 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fe f862 	bl	8001e14 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2203      	movs	r2, #3
 8003d54:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d66:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 8003d6a:	2002      	movs	r0, #2
 8003d6c:	f7ff f9a8 	bl	80030c0 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	4b54      	ldr	r3, [pc, #336]	; (8003ed0 <HAL_DSI_Init+0x1a4>)
 8003d7e:	400b      	ands	r3, r1
 8003d80:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003d98:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003da0:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff feb3 	bl	8003b18 <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 8003db2:	6839      	ldr	r1, [r7, #0]
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff ff76 	bl	8003ca6 <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8003de2:	2001      	movs	r0, #1
 8003de4:	f7ff f96c 	bl	80030c0 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003de8:	f7ff f95e 	bl	80030a8 <HAL_GetTick>
 8003dec:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003dee:	e008      	b.n	8003e02 <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003df0:	f7ff f95a 	bl	80030a8 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	; 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e062      	b.n	8003ec8 <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0ee      	beq.n	8003df0 <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0206 	orr.w	r2, r2, #6
 8003e22:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0203 	bic.w	r2, r2, #3
 8003e36:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0201 	orr.w	r2, r2, #1
 8003e50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0203 	bic.w	r2, r2, #3
 8003e64:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e8c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6899      	ldr	r1, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	e0000003 	.word	0xe0000003

08003ed4 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	7e1b      	ldrb	r3, [r3, #24]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_DSI_ConfigErrorMonitor+0x16>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e0ba      	b.n	8004060 <HAL_DSI_ConfigErrorMonitor+0x18c>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003f24:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003f28:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d009      	beq.n	8003f4a <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003f46:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d009      	beq.n	8003f68 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0201 	orr.w	r2, r2, #1
 8003f64:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0202 	orr.w	r2, r2, #2
 8003f82:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 020c 	orr.w	r2, r2, #12
 8003fa0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d009      	beq.n	8003fc2 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0210 	orr.w	r2, r2, #16
 8003fbe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0220 	orr.w	r2, r2, #32
 8003fdc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d009      	beq.n	8003ffe <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ffa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d009      	beq.n	800401c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004018:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004022:	2b00      	cmp	r3, #0
 8004024:	d009      	beq.n	800403a <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8004036:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004040:	2b00      	cmp	r3, #0
 8004042:	d009      	beq.n	8004058 <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004054:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00f      	beq.n	80040a4 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d007      	beq.n	80040a4 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2201      	movs	r2, #1
 800409a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f8b8 	bl	8004214 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00f      	beq.n	80040d4 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d007      	beq.n	80040d4 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2202      	movs	r2, #2
 80040ca:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f8aa 	bl	8004228 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8097 	beq.w	800420c <HAL_DSI_IRQHandler+0x1a0>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80040e6:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4013      	ands	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80040fe:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	4013      	ands	r3, r2
 800410c:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f043 0201 	orr.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f043 0202 	orr.w	r2, r3, #2
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f043 0204 	orr.w	r2, r3, #4
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f043 0208 	orr.w	r2, r3, #8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f043 0210 	orr.w	r2, r3, #16
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	f043 0220 	orr.w	r2, r3, #32
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PBU_MASK) != 0U)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <HAL_DSI_IRQHandler+0x192>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PBU;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	61da      	str	r2, [r3, #28]
    }
    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HAL_DSI_IRQHandler+0x1a0>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f818 	bl	800423c <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	7e1b      	ldrb	r3, [r3, #24]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_DSI_SetGenericVCID+0x16>
 8004262:	2302      	movs	r3, #2
 8004264:	e019      	b.n	800429a <HAL_DSI_SetGenericVCID+0x4a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
 800427a:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6b19      	ldr	r1, [r3, #48]	; 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	7e1b      	ldrb	r3, [r3, #24]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e0c5      	b.n	8004448 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0201 	orr.w	r2, r2, #1
 80042d0:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0203 	bic.w	r2, r2, #3
 8004308:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68d9      	ldr	r1, [r3, #12]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0207 	bic.w	r2, r2, #7
 800432a:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6959      	ldr	r1, [r3, #20]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	431a      	orrs	r2, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 020f 	bic.w	r2, r2, #15
 8004358:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6919      	ldr	r1, [r3, #16]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 020e 	bic.w	r2, r2, #14
 800437c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	005a      	lsls	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6812      	ldr	r2, [r2, #0]
 80043a2:	0c1b      	lsrs	r3, r3, #16
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80043ca:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	431a      	orrs	r2, r3
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0201 	orr.w	r2, r2, #1
 8004428:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0202 	orr.w	r2, r2, #2
 800443c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	7e1b      	ldrb	r3, [r3, #24]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_DSI_ConfigCommand+0x16>
 8004466:	2302      	movs	r3, #2
 8004468:	e049      	b.n	80044fe <HAL_DSI_ConfigCommand+0xaa>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	4b24      	ldr	r3, [pc, #144]	; (800450c <HAL_DSI_ConfigCommand+0xb8>)
 800447c:	400b      	ands	r3, r1
 800447e:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800448e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004494:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800449a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80044a0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80044a6:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80044ac:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80044b2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80044b8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80044be:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80044c4:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80044ca:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0202 	bic.w	r2, r2, #2
 80044e2:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	fef080ff 	.word	0xfef080ff

08004510 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	7e1b      	ldrb	r3, [r3, #24]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d101      	bne.n	8004526 <HAL_DSI_ConfigFlowControl+0x16>
 8004522:	2302      	movs	r3, #2
 8004524:	e016      	b.n	8004554 <HAL_DSI_ConfigFlowControl+0x44>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800453a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	7e1b      	ldrb	r3, [r3, #24]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_DSI_ConfigPhyTimer+0x16>
 8004572:	2302      	movs	r3, #2
 8004574:	e084      	b.n	8004680 <HAL_DSI_ConfigPhyTimer+0x120>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	441a      	add	r2, r3
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6859      	ldr	r1, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	4613      	mov	r3, r2
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	4413      	add	r3, r2
 8004598:	18ca      	adds	r2, r1, r3
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	441a      	add	r2, r3
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	4293      	cmp	r3, r2
 80045b8:	bf38      	it	cc
 80045ba:	4613      	movcc	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80045ce:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	041a      	lsls	r2, r3, #16
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80045fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	041b      	lsls	r3, r3, #16
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800462e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004632:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	691a      	ldr	r2, [r3, #16]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800465c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	021a      	lsls	r2, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	7e1b      	ldrb	r3, [r3, #24]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_DSI_ConfigHostTimeouts+0x16>
 800469e:	2302      	movs	r3, #2
 80046a0:	e0b4      	b.n	800480c <HAL_DSI_ConfigHostTimeouts+0x180>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80046b6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6899      	ldr	r1, [r3, #8]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	021a      	lsls	r2, r3, #8
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	b292      	uxth	r2, r2
 80046d8:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	041a      	lsls	r2, r3, #16
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	0c1b      	lsrs	r3, r3, #16
 80046fa:	041b      	lsls	r3, r3, #16
 80046fc:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6812      	ldr	r2, [r2, #0]
 800471a:	0c1b      	lsrs	r3, r3, #16
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	0c1b      	lsrs	r3, r3, #16
 8004740:	041b      	lsls	r3, r3, #16
 8004742:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	0c1b      	lsrs	r3, r3, #16
 800476a:	041b      	lsls	r3, r3, #16
 800476c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	695a      	ldr	r2, [r3, #20]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	0c1b      	lsrs	r3, r3, #16
 80047be:	041b      	lsls	r3, r3, #16
 80047c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6812      	ldr	r2, [r2, #0]
 80047e6:	0c1b      	lsrs	r3, r3, #16
 80047e8:	041b      	lsls	r3, r3, #16
 80047ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6a1a      	ldr	r2, [r3, #32]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_GFXMMU_Init>:
  *         GFXMMU_InitTypeDef structure and initialize the associated handle.
  * @param  hgfxmmu GFXMMU handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GFXMMU_Init(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	73fb      	strb	r3, [r7, #15]

  /* Check GFXMMU handle */
  if (hgfxmmu == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d102      	bne.n	8004830 <HAL_GFXMMU_Init+0x18>
  {
    status = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	73fb      	strb	r3, [r7, #15]
 800482e:	e06e      	b.n	800490e <HAL_GFXMMU_Init+0xf6>
      hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
    }
    hgfxmmu->MspInitCallback(hgfxmmu);
#else
    /* Call GFXMMU MSP init function */
    HAL_GFXMMU_MspInit(hgfxmmu);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7fd fb73 	bl	8001f1c <HAL_GFXMMU_MspInit>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */

    /* Configure GFXMMU_CR register */
    hgfxmmu->Instance->CR = 0U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]
    hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlocksPerLine);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6819      	ldr	r1, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	601a      	str	r2, [r3, #0]
#if defined(GFXMMU_CR_CE)
    if (hgfxmmu->Init.CachePrefetch.Activation == ENABLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	7f1b      	ldrb	r3, [r3, #28]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d12c      	bne.n	80048b2 <HAL_GFXMMU_Init+0x9a>
    {
      assert_param(IS_GFXMMU_CACHE_LOCK(hgfxmmu->Init.CachePrefetch.CacheLock));
      assert_param(IS_GFXMMU_PREFETCH(hgfxmmu->Init.CachePrefetch.Prefetch));
      assert_param(IS_GFXMMU_OUTTER_BUFFERABILITY(hgfxmmu->Init.CachePrefetch.OutterBufferability));
      assert_param(IS_GFXMMU_OUTTER_CACHABILITY(hgfxmmu->Init.CachePrefetch.OutterCachability));
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a19      	ldr	r1, [r3, #32]
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 8004866:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 800486c:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterCachability);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 8004872:	430b      	orrs	r3, r1
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800487e:	601a      	str	r2, [r3, #0]
      if (hgfxmmu->Init.CachePrefetch.CacheLock == GFXMMU_CACHE_LOCK_ENABLE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004888:	d10b      	bne.n	80048a2 <HAL_GFXMMU_Init+0x8a>
      {
        assert_param(IS_GFXMMU_CACHE_LOCK_BUFFER(hgfxmmu->Init.CachePrefetch.CacheLockBuffer));
        assert_param(IS_GFXMMU_CACHE_FORCE(hgfxmmu->Init.CachePrefetch.CacheForce));
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6819      	ldr	r1, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                  hgfxmmu->Init.CachePrefetch.CacheForce);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	601a      	str	r2, [r3, #0]
      }

      /* Force invalidate cache if cache is enabled */
      hgfxmmu->Instance->CCR |= GFXMMU_CACHE_FORCE_INVALIDATE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0202 	orr.w	r2, r2, #2
 80048b0:	60da      	str	r2, [r3, #12]
      assert_param(IS_GFXMMU_ADDRESSCACHE_LOCK_BUFFER(hgfxmmu->Init.AddressCache.AddressCacheLockBuffer));
      hgfxmmu->Instance->CR |= GFXMMU_CR_ACE |
                               hgfxmmu->Init.AddressCache.AddressCacheLockBuffer;
    }
#endif /* GFXMMU_CR_ACE */
    if (hgfxmmu->Init.Interrupts.Activation == ENABLE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d108      	bne.n	80048ce <HAL_GFXMMU_Init+0xb6>
    {
      assert_param(IS_GFXMMU_INTERRUPTS(hgfxmmu->Init.Interrupts.UsedInterrupts));
      hgfxmmu->Instance->CR |= hgfxmmu->Init.Interrupts.UsedInterrupts;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6819      	ldr	r1, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	601a      	str	r2, [r3, #0]
    }

    /* Configure default value on GFXMMU_DVR register */
    hgfxmmu->Instance->DVR = hgfxmmu->Init.DefaultValue;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6892      	ldr	r2, [r2, #8]
 80048d6:	611a      	str	r2, [r3, #16]

    /* Configure physical buffer addresses on GFXMMU_BxCR registers */
    hgfxmmu->Instance->B0CR = hgfxmmu->Init.Buffers.Buf0Address;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	68d2      	ldr	r2, [r2, #12]
 80048e0:	621a      	str	r2, [r3, #32]
    hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6912      	ldr	r2, [r2, #16]
 80048ea:	625a      	str	r2, [r3, #36]	; 0x24
    hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6952      	ldr	r2, [r2, #20]
 80048f4:	629a      	str	r2, [r3, #40]	; 0x28
    hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6992      	ldr	r2, [r2, #24]
 80048fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Reset GFXMMU error code */
    hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set GFXMMU to ready state */
    hgfxmmu->State = HAL_GFXMMU_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }
  /* Return function status */
  return status;
 800490e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_GFXMMU_ConfigLut>:
  */
HAL_StatusTypeDef HAL_GFXMMU_ConfigLut(GFXMMU_HandleTypeDef *hgfxmmu,
                                       uint32_t FirstLine,
                                       uint32_t LinesNumber,
                                       uint32_t Address)
{
 8004918:	b480      	push	{r7}
 800491a:	b08b      	sub	sp, #44	; 0x2c
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
  assert_param(IS_GFXMMU_LUT_LINE(FirstLine));
  assert_param(IS_GFXMMU_LUT_LINES_NUMBER(LinesNumber));

  /* Check GFXMMU state and coherent parameters */
  if ((hgfxmmu->State != HAL_GFXMMU_STATE_READY) || ((FirstLine + LinesNumber) > 1024U))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004932:	2b01      	cmp	r3, #1
 8004934:	d105      	bne.n	8004942 <HAL_GFXMMU_ConfigLut+0x2a>
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4413      	add	r3, r2
 800493c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004940:	d903      	bls.n	800494a <HAL_GFXMMU_ConfigLut+0x32>
  {
    status = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004948:	e032      	b.n	80049b0 <HAL_GFXMMU_ConfigLut+0x98>
    uint32_t current_line;
    uint32_t lutxl_address;
    uint32_t lutxh_address;

    /* Initialize local variables */
    current_address = Address;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	623b      	str	r3, [r7, #32]
    current_line    = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
    lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
    lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * FirstLine) + 1U]);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	3301      	adds	r3, #1
 800496e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	617b      	str	r3, [r7, #20]

    /* Copy LUT from flash to look up RAM */
    while (current_line < LinesNumber)
 8004978:	e016      	b.n	80049a8 <HAL_GFXMMU_ConfigLut+0x90>
    {
      *((uint32_t *)lutxl_address) = *((uint32_t *)current_address);
 800497a:	6a3a      	ldr	r2, [r7, #32]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	3304      	adds	r3, #4
 8004986:	623b      	str	r3, [r7, #32]
      *((uint32_t *)lutxh_address) = *((uint32_t *)current_address);
 8004988:	6a3a      	ldr	r2, [r7, #32]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	3304      	adds	r3, #4
 8004994:	623b      	str	r3, [r7, #32]
      lutxl_address += 8U;
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	3308      	adds	r3, #8
 800499a:	61bb      	str	r3, [r7, #24]
      lutxh_address += 8U;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	3308      	adds	r3, #8
 80049a0:	617b      	str	r3, [r7, #20]
      current_line++;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	3301      	adds	r3, #1
 80049a6:	61fb      	str	r3, [r7, #28]
    while (current_line < LinesNumber)
 80049a8:	69fa      	ldr	r2, [r7, #28]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d3e4      	bcc.n	800497a <HAL_GFXMMU_ConfigLut+0x62>
    }
  }
  /* Return function status */
  return status;
 80049b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	372c      	adds	r7, #44	; 0x2c
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_GFXMMU_IRQHandler>:
  * @brief  This function handles the GFXMMU interrupts.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
void HAL_GFXMMU_IRQHandler(GFXMMU_HandleTypeDef *hgfxmmu)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t flags, interrupts, error;

  /* Read current flags and interrupts and determine which error occurs */
  flags = hgfxmmu->Instance->SR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	617b      	str	r3, [r7, #20]
  interrupts = (hgfxmmu->Instance->CR & GFXMMU_CR_ITS_MASK);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	613b      	str	r3, [r7, #16]
  error = (flags & interrupts);
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4013      	ands	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]

  if (error != 0U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00c      	beq.n	8004a04 <HAL_GFXMMU_IRQHandler+0x44>
  {
    /* Clear flags on GFXMMU_FCR register */
    hgfxmmu->Instance->FCR = error;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	609a      	str	r2, [r3, #8]

    /* Update GFXMMU error code */
    hgfxmmu->ErrorCode |= error;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Call GFXMMU error callback */
#if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
    hgfxmmu->ErrorCallback(hgfxmmu);
#else
    HAL_GFXMMU_ErrorCallback(hgfxmmu);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f804 	bl	8004a0c <HAL_GFXMMU_ErrorCallback>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
  }
}
 8004a04:	bf00      	nop
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_GFXMMU_ErrorCallback>:
  * @brief  Error callback.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
__weak void HAL_GFXMMU_ErrorCallback(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(hgfxmmu);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_GFXMMU_ErrorCallback could be implemented in the user file.
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b089      	sub	sp, #36	; 0x24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004a32:	e1ba      	b.n	8004daa <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	2101      	movs	r1, #1
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a40:	4013      	ands	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 81aa 	beq.w	8004da4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a55      	ldr	r2, [pc, #340]	; (8004ba8 <HAL_GPIO_Init+0x188>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d15d      	bne.n	8004b14 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004a5e:	2201      	movs	r2, #1
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	43db      	mvns	r3, r3
 8004a68:	69fa      	ldr	r2, [r7, #28]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f003 0201 	and.w	r2, r3, #1
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	69fa      	ldr	r2, [r7, #28]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004a88:	4a48      	ldr	r2, [pc, #288]	; (8004bac <HAL_GPIO_Init+0x18c>)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a90:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004a92:	4a46      	ldr	r2, [pc, #280]	; (8004bac <HAL_GPIO_Init+0x18c>)
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	4413      	add	r3, r2
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	08da      	lsrs	r2, r3, #3
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	3208      	adds	r2, #8
 8004aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aaa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	220f      	movs	r2, #15
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	43db      	mvns	r3, r3
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	220b      	movs	r2, #11
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	08da      	lsrs	r2, r3, #3
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	3208      	adds	r2, #8
 8004ade:	69f9      	ldr	r1, [r7, #28]
 8004ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	2203      	movs	r2, #3
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	43db      	mvns	r3, r3
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	4013      	ands	r3, r2
 8004afa:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	2202      	movs	r2, #2
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	e067      	b.n	8004be4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d003      	beq.n	8004b24 <HAL_GPIO_Init+0x104>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b12      	cmp	r3, #18
 8004b22:	d145      	bne.n	8004bb0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	08da      	lsrs	r2, r3, #3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3208      	adds	r2, #8
 8004b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b30:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	220f      	movs	r2, #15
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	4013      	ands	r3, r2
 8004b46:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f003 020f 	and.w	r2, r3, #15
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	08da      	lsrs	r2, r3, #3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3208      	adds	r2, #8
 8004b6a:	69f9      	ldr	r1, [r7, #28]
 8004b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	43db      	mvns	r3, r3
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	4013      	ands	r3, r2
 8004b86:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 0203 	and.w	r2, r3, #3
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e01e      	b.n	8004be4 <HAL_GPIO_Init+0x1c4>
 8004ba6:	bf00      	nop
 8004ba8:	46020000 	.word	0x46020000
 8004bac:	0800d9dc 	.word	0x0800d9dc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	2203      	movs	r2, #3
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f003 0203 	and.w	r2, r3, #3
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d00b      	beq.n	8004c04 <HAL_GPIO_Init+0x1e4>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d007      	beq.n	8004c04 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bf8:	2b11      	cmp	r3, #17
 8004bfa:	d003      	beq.n	8004c04 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b12      	cmp	r3, #18
 8004c02:	d130      	bne.n	8004c66 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	2203      	movs	r2, #3
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	43db      	mvns	r3, r3
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	43db      	mvns	r3, r3
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	4013      	ands	r3, r2
 8004c48:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	091b      	lsrs	r3, r3, #4
 8004c50:	f003 0201 	and.w	r2, r3, #1
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	69fa      	ldr	r2, [r7, #28]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	69fa      	ldr	r2, [r7, #28]
 8004c64:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d017      	beq.n	8004c9e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	2203      	movs	r2, #3
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	4013      	ands	r3, r2
 8004c84:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	69fa      	ldr	r2, [r7, #28]
 8004c9c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d07c      	beq.n	8004da4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004caa:	4a47      	ldr	r2, [pc, #284]	; (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	089b      	lsrs	r3, r3, #2
 8004cb0:	3318      	adds	r3, #24
 8004cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	220f      	movs	r2, #15
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	0a9a      	lsrs	r2, r3, #10
 8004cd2:	4b3e      	ldr	r3, [pc, #248]	; (8004dcc <HAL_GPIO_Init+0x3ac>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	f002 0203 	and.w	r2, r2, #3
 8004cdc:	00d2      	lsls	r2, r2, #3
 8004cde:	4093      	lsls	r3, r2
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004ce6:	4938      	ldr	r1, [pc, #224]	; (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	089b      	lsrs	r3, r3, #2
 8004cec:	3318      	adds	r3, #24
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004cf4:	4b34      	ldr	r3, [pc, #208]	; (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	4013      	ands	r3, r2
 8004d02:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004d18:	4a2b      	ldr	r2, [pc, #172]	; (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004d1e:	4b2a      	ldr	r3, [pc, #168]	; (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	43db      	mvns	r3, r3
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004d42:	4a21      	ldr	r2, [pc, #132]	; (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004d48:	4b1f      	ldr	r3, [pc, #124]	; (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d4e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	43db      	mvns	r3, r3
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	4013      	ands	r3, r2
 8004d58:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004d6e:	4a16      	ldr	r2, [pc, #88]	; (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8004d76:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	4013      	ands	r3, r2
 8004d86:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004d9c:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	3301      	adds	r3, #1
 8004da8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	fa22 f303 	lsr.w	r3, r2, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f47f ae3d 	bne.w	8004a34 <HAL_GPIO_Init+0x14>
  }
}
 8004dba:	bf00      	nop
 8004dbc:	bf00      	nop
 8004dbe:	3724      	adds	r7, #36	; 0x24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	46022000 	.word	0x46022000
 8004dcc:	002f7f7f 	.word	0x002f7f7f

08004dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	807b      	strh	r3, [r7, #2]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004de0:	787b      	ldrb	r3, [r7, #1]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004de6:	887a      	ldrh	r2, [r7, #2]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004dec:	e002      	b.n	8004df4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004dee:	887a      	ldrh	r2, [r7, #2]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e01c      	b.n	8004e4c <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	795b      	ldrb	r3, [r3, #5]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d105      	bne.n	8004e26 <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fd f8a6 	bl	8001f6c <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	791b      	ldrb	r3, [r3, #4]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_GPU2D_Init+0x32>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e00c      	b.n	8004e4c <HAL_GPU2D_Init+0x4c>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	33f8      	adds	r3, #248	; 0xf8
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d013      	beq.n	8004e98 <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	33f8      	adds	r3, #248	; 0xf8
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f023 0201 	bic.w	r2, r3, #1
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 8004e90:	68f9      	ldr	r1, [r7, #12]
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f80f 	bl	8004eb6 <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 8004e98:	bf00      	nop
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f80f 	bl	8004ecc <HAL_GPU2D_ErrorCallback>
}
 8004eae:	bf00      	nop
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_GPU2D_CommandListCpltCallback>:
  *                the configuration information for the GPU2D.
  * @param  CmdListID Command list ID that got completed.
  * @retval None
  */
__weak void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	6039      	str	r1, [r7, #0]
  UNUSED(CmdListID);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_GPU2D_CommandListCpltCallback can be implemented in the user file.
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 8004ed4:	e7fe      	b.n	8004ed4 <HAL_GPU2D_ErrorCallback+0x8>

08004ed6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e08d      	b.n	8005004 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7fd f875 	bl	8001fec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2224      	movs	r2, #36	; 0x24
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0201 	bic.w	r2, r2, #1
 8004f18:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f26:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689a      	ldr	r2, [r3, #8]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f36:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d107      	bne.n	8004f50 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f4c:	609a      	str	r2, [r3, #8]
 8004f4e:	e006      	b.n	8004f5e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f5c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d108      	bne.n	8004f78 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f74:	605a      	str	r2, [r3, #4]
 8004f76:	e007      	b.n	8004f88 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f86:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6812      	ldr	r2, [r2, #0]
 8004f92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004faa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69d9      	ldr	r1, [r3, #28]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1a      	ldr	r2, [r3, #32]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0201 	orr.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	4608      	mov	r0, r1
 8005016:	4611      	mov	r1, r2
 8005018:	461a      	mov	r2, r3
 800501a:	4603      	mov	r3, r0
 800501c:	817b      	strh	r3, [r7, #10]
 800501e:	460b      	mov	r3, r1
 8005020:	813b      	strh	r3, [r7, #8]
 8005022:	4613      	mov	r3, r2
 8005024:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b20      	cmp	r3, #32
 8005030:	f040 80f9 	bne.w	8005226 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <HAL_I2C_Mem_Write+0x34>
 800503a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800503c:	2b00      	cmp	r3, #0
 800503e:	d105      	bne.n	800504c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005046:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e0ed      	b.n	8005228 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_I2C_Mem_Write+0x4e>
 8005056:	2302      	movs	r3, #2
 8005058:	e0e6      	b.n	8005228 <HAL_I2C_Mem_Write+0x21c>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005062:	f7fe f821 	bl	80030a8 <HAL_GetTick>
 8005066:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	2319      	movs	r3, #25
 800506e:	2201      	movs	r2, #1
 8005070:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 fac3 	bl	8005600 <I2C_WaitOnFlagUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0d1      	b.n	8005228 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2221      	movs	r2, #33	; 0x21
 8005088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2240      	movs	r2, #64	; 0x40
 8005090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a3a      	ldr	r2, [r7, #32]
 800509e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050ac:	88f8      	ldrh	r0, [r7, #6]
 80050ae:	893a      	ldrh	r2, [r7, #8]
 80050b0:	8979      	ldrh	r1, [r7, #10]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	4603      	mov	r3, r0
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f9d3 	bl	8005468 <I2C_RequestMemoryWrite>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d005      	beq.n	80050d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e0a9      	b.n	8005228 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2bff      	cmp	r3, #255	; 0xff
 80050dc:	d90e      	bls.n	80050fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	22ff      	movs	r2, #255	; 0xff
 80050e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	8979      	ldrh	r1, [r7, #10]
 80050ec:	2300      	movs	r3, #0
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 fc3d 	bl	8005974 <I2C_TransferConfig>
 80050fa:	e00f      	b.n	800511c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510a:	b2da      	uxtb	r2, r3
 800510c:	8979      	ldrh	r1, [r7, #10]
 800510e:	2300      	movs	r3, #0
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 fc2c 	bl	8005974 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 fabc 	bl	800569e <I2C_WaitOnTXISFlagUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e07b      	b.n	8005228 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	781a      	ldrb	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d034      	beq.n	80051d4 <HAL_I2C_Mem_Write+0x1c8>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516e:	2b00      	cmp	r3, #0
 8005170:	d130      	bne.n	80051d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	2200      	movs	r2, #0
 800517a:	2180      	movs	r1, #128	; 0x80
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 fa3f 	bl	8005600 <I2C_WaitOnFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e04d      	b.n	8005228 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	2bff      	cmp	r3, #255	; 0xff
 8005194:	d90e      	bls.n	80051b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	22ff      	movs	r2, #255	; 0xff
 800519a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	8979      	ldrh	r1, [r7, #10]
 80051a4:	2300      	movs	r3, #0
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fbe1 	bl	8005974 <I2C_TransferConfig>
 80051b2:	e00f      	b.n	80051d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	8979      	ldrh	r1, [r7, #10]
 80051c6:	2300      	movs	r3, #0
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 fbd0 	bl	8005974 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d19e      	bne.n	800511c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 faa2 	bl	800572c <I2C_WaitOnSTOPFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e01a      	b.n	8005228 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2220      	movs	r2, #32
 80051f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6859      	ldr	r1, [r3, #4]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <HAL_I2C_Mem_Write+0x224>)
 8005206:	400b      	ands	r3, r1
 8005208:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	e000      	b.n	8005228 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005226:	2302      	movs	r3, #2
  }
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	fe00e800 	.word	0xfe00e800

08005234 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af02      	add	r7, sp, #8
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	4608      	mov	r0, r1
 800523e:	4611      	mov	r1, r2
 8005240:	461a      	mov	r2, r3
 8005242:	4603      	mov	r3, r0
 8005244:	817b      	strh	r3, [r7, #10]
 8005246:	460b      	mov	r3, r1
 8005248:	813b      	strh	r3, [r7, #8]
 800524a:	4613      	mov	r3, r2
 800524c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b20      	cmp	r3, #32
 8005258:	f040 80fd 	bne.w	8005456 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <HAL_I2C_Mem_Read+0x34>
 8005262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005264:	2b00      	cmp	r3, #0
 8005266:	d105      	bne.n	8005274 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800526e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e0f1      	b.n	8005458 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800527a:	2b01      	cmp	r3, #1
 800527c:	d101      	bne.n	8005282 <HAL_I2C_Mem_Read+0x4e>
 800527e:	2302      	movs	r3, #2
 8005280:	e0ea      	b.n	8005458 <HAL_I2C_Mem_Read+0x224>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800528a:	f7fd ff0d 	bl	80030a8 <HAL_GetTick>
 800528e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	2319      	movs	r3, #25
 8005296:	2201      	movs	r2, #1
 8005298:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 f9af 	bl	8005600 <I2C_WaitOnFlagUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e0d5      	b.n	8005458 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2222      	movs	r2, #34	; 0x22
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2240      	movs	r2, #64	; 0x40
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a3a      	ldr	r2, [r7, #32]
 80052c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052d4:	88f8      	ldrh	r0, [r7, #6]
 80052d6:	893a      	ldrh	r2, [r7, #8]
 80052d8:	8979      	ldrh	r1, [r7, #10]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	9301      	str	r3, [sp, #4]
 80052de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	4603      	mov	r3, r0
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f913 	bl	8005510 <I2C_RequestMemoryRead>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e0ad      	b.n	8005458 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	2bff      	cmp	r3, #255	; 0xff
 8005304:	d90e      	bls.n	8005324 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	22ff      	movs	r2, #255	; 0xff
 800530a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005310:	b2da      	uxtb	r2, r3
 8005312:	8979      	ldrh	r1, [r7, #10]
 8005314:	4b52      	ldr	r3, [pc, #328]	; (8005460 <HAL_I2C_Mem_Read+0x22c>)
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 fb29 	bl	8005974 <I2C_TransferConfig>
 8005322:	e00f      	b.n	8005344 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005332:	b2da      	uxtb	r2, r3
 8005334:	8979      	ldrh	r1, [r7, #10]
 8005336:	4b4a      	ldr	r3, [pc, #296]	; (8005460 <HAL_I2C_Mem_Read+0x22c>)
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 fb18 	bl	8005974 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	2200      	movs	r2, #0
 800534c:	2104      	movs	r1, #4
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f956 	bl	8005600 <I2C_WaitOnFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e07c      	b.n	8005458 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d034      	beq.n	8005404 <HAL_I2C_Mem_Read+0x1d0>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d130      	bne.n	8005404 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	2200      	movs	r2, #0
 80053aa:	2180      	movs	r1, #128	; 0x80
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f927 	bl	8005600 <I2C_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e04d      	b.n	8005458 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2bff      	cmp	r3, #255	; 0xff
 80053c4:	d90e      	bls.n	80053e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	22ff      	movs	r2, #255	; 0xff
 80053ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	8979      	ldrh	r1, [r7, #10]
 80053d4:	2300      	movs	r3, #0
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 fac9 	bl	8005974 <I2C_TransferConfig>
 80053e2:	e00f      	b.n	8005404 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	8979      	ldrh	r1, [r7, #10]
 80053f6:	2300      	movs	r3, #0
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 fab8 	bl	8005974 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d19a      	bne.n	8005344 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 f98a 	bl	800572c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e01a      	b.n	8005458 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2220      	movs	r2, #32
 8005428:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6859      	ldr	r1, [r3, #4]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	4b0b      	ldr	r3, [pc, #44]	; (8005464 <HAL_I2C_Mem_Read+0x230>)
 8005436:	400b      	ands	r3, r1
 8005438:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2220      	movs	r2, #32
 800543e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	e000      	b.n	8005458 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005456:	2302      	movs	r3, #2
  }
}
 8005458:	4618      	mov	r0, r3
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	80002400 	.word	0x80002400
 8005464:	fe00e800 	.word	0xfe00e800

08005468 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	4608      	mov	r0, r1
 8005472:	4611      	mov	r1, r2
 8005474:	461a      	mov	r2, r3
 8005476:	4603      	mov	r3, r0
 8005478:	817b      	strh	r3, [r7, #10]
 800547a:	460b      	mov	r3, r1
 800547c:	813b      	strh	r3, [r7, #8]
 800547e:	4613      	mov	r3, r2
 8005480:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005482:	88fb      	ldrh	r3, [r7, #6]
 8005484:	b2da      	uxtb	r2, r3
 8005486:	8979      	ldrh	r1, [r7, #10]
 8005488:	4b20      	ldr	r3, [pc, #128]	; (800550c <I2C_RequestMemoryWrite+0xa4>)
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 fa6f 	bl	8005974 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005496:	69fa      	ldr	r2, [r7, #28]
 8005498:	69b9      	ldr	r1, [r7, #24]
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f8ff 	bl	800569e <I2C_WaitOnTXISFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e02c      	b.n	8005504 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054aa:	88fb      	ldrh	r3, [r7, #6]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d105      	bne.n	80054bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054b0:	893b      	ldrh	r3, [r7, #8]
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	629a      	str	r2, [r3, #40]	; 0x28
 80054ba:	e015      	b.n	80054e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80054bc:	893b      	ldrh	r3, [r7, #8]
 80054be:	0a1b      	lsrs	r3, r3, #8
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ca:	69fa      	ldr	r2, [r7, #28]
 80054cc:	69b9      	ldr	r1, [r7, #24]
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f8e5 	bl	800569e <I2C_WaitOnTXISFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e012      	b.n	8005504 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054de:	893b      	ldrh	r3, [r7, #8]
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	2200      	movs	r2, #0
 80054f0:	2180      	movs	r1, #128	; 0x80
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 f884 	bl	8005600 <I2C_WaitOnFlagUntilTimeout>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	80002000 	.word	0x80002000

08005510 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af02      	add	r7, sp, #8
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	4608      	mov	r0, r1
 800551a:	4611      	mov	r1, r2
 800551c:	461a      	mov	r2, r3
 800551e:	4603      	mov	r3, r0
 8005520:	817b      	strh	r3, [r7, #10]
 8005522:	460b      	mov	r3, r1
 8005524:	813b      	strh	r3, [r7, #8]
 8005526:	4613      	mov	r3, r2
 8005528:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	b2da      	uxtb	r2, r3
 800552e:	8979      	ldrh	r1, [r7, #10]
 8005530:	4b20      	ldr	r3, [pc, #128]	; (80055b4 <I2C_RequestMemoryRead+0xa4>)
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	2300      	movs	r3, #0
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 fa1c 	bl	8005974 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	69b9      	ldr	r1, [r7, #24]
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 f8ac 	bl	800569e <I2C_WaitOnTXISFlagUntilTimeout>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e02c      	b.n	80055aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005550:	88fb      	ldrh	r3, [r7, #6]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d105      	bne.n	8005562 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005556:	893b      	ldrh	r3, [r7, #8]
 8005558:	b2da      	uxtb	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	629a      	str	r2, [r3, #40]	; 0x28
 8005560:	e015      	b.n	800558e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005562:	893b      	ldrh	r3, [r7, #8]
 8005564:	0a1b      	lsrs	r3, r3, #8
 8005566:	b29b      	uxth	r3, r3
 8005568:	b2da      	uxtb	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	69b9      	ldr	r1, [r7, #24]
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f892 	bl	800569e <I2C_WaitOnTXISFlagUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e012      	b.n	80055aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005584:	893b      	ldrh	r3, [r7, #8]
 8005586:	b2da      	uxtb	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	2200      	movs	r2, #0
 8005596:	2140      	movs	r1, #64	; 0x40
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f831 	bl	8005600 <I2C_WaitOnFlagUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	80002000 	.word	0x80002000

080055b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d103      	bne.n	80055d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2200      	movs	r2, #0
 80055d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d007      	beq.n	80055f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	619a      	str	r2, [r3, #24]
  }
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	603b      	str	r3, [r7, #0]
 800560c:	4613      	mov	r3, r2
 800560e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005610:	e031      	b.n	8005676 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d02d      	beq.n	8005676 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561a:	f7fd fd45 	bl	80030a8 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d302      	bcc.n	8005630 <I2C_WaitOnFlagUntilTimeout+0x30>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d122      	bne.n	8005676 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699a      	ldr	r2, [r3, #24]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	4013      	ands	r3, r2
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	429a      	cmp	r2, r3
 800563e:	bf0c      	ite	eq
 8005640:	2301      	moveq	r3, #1
 8005642:	2300      	movne	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	461a      	mov	r2, r3
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	429a      	cmp	r2, r3
 800564c:	d113      	bne.n	8005676 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005652:	f043 0220 	orr.w	r2, r3, #32
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e00f      	b.n	8005696 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699a      	ldr	r2, [r3, #24]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4013      	ands	r3, r2
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	429a      	cmp	r2, r3
 8005684:	bf0c      	ite	eq
 8005686:	2301      	moveq	r3, #1
 8005688:	2300      	movne	r3, #0
 800568a:	b2db      	uxtb	r3, r3
 800568c:	461a      	mov	r2, r3
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	429a      	cmp	r2, r3
 8005692:	d0be      	beq.n	8005612 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056aa:	e033      	b.n	8005714 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f87f 	bl	80057b4 <I2C_IsErrorOccurred>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e031      	b.n	8005724 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c6:	d025      	beq.n	8005714 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c8:	f7fd fcee 	bl	80030a8 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d302      	bcc.n	80056de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d11a      	bne.n	8005714 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d013      	beq.n	8005714 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f0:	f043 0220 	orr.w	r2, r3, #32
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e007      	b.n	8005724 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b02      	cmp	r3, #2
 8005720:	d1c4      	bne.n	80056ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005738:	e02f      	b.n	800579a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 f838 	bl	80057b4 <I2C_IsErrorOccurred>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e02d      	b.n	80057aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574e:	f7fd fcab 	bl	80030a8 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	429a      	cmp	r2, r3
 800575c:	d302      	bcc.n	8005764 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d11a      	bne.n	800579a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b20      	cmp	r3, #32
 8005770:	d013      	beq.n	800579a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005776:	f043 0220 	orr.w	r2, r3, #32
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e007      	b.n	80057aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d1c8      	bne.n	800573a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08a      	sub	sp, #40	; 0x28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d068      	beq.n	80058b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2210      	movs	r2, #16
 80057e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057e8:	e049      	b.n	800587e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f0:	d045      	beq.n	800587e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057f2:	f7fd fc59 	bl	80030a8 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d302      	bcc.n	8005808 <I2C_IsErrorOccurred+0x54>
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d13a      	bne.n	800587e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005812:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800581a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800582a:	d121      	bne.n	8005870 <I2C_IsErrorOccurred+0xbc>
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005832:	d01d      	beq.n	8005870 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005834:	7cfb      	ldrb	r3, [r7, #19]
 8005836:	2b20      	cmp	r3, #32
 8005838:	d01a      	beq.n	8005870 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005848:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800584a:	f7fd fc2d 	bl	80030a8 <HAL_GetTick>
 800584e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005850:	e00e      	b.n	8005870 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005852:	f7fd fc29 	bl	80030a8 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b19      	cmp	r3, #25
 800585e:	d907      	bls.n	8005870 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	f043 0320 	orr.w	r3, r3, #32
 8005866:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800586e:	e006      	b.n	800587e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b20      	cmp	r3, #32
 800587c:	d1e9      	bne.n	8005852 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b20      	cmp	r3, #32
 800588a:	d003      	beq.n	8005894 <I2C_IsErrorOccurred+0xe0>
 800588c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0aa      	beq.n	80057ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005898:	2b00      	cmp	r3, #0
 800589a:	d103      	bne.n	80058a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2220      	movs	r2, #32
 80058a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	f043 0304 	orr.w	r3, r3, #4
 80058aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00b      	beq.n	80058dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00b      	beq.n	80058fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	f043 0308 	orr.w	r3, r3, #8
 80058ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00b      	beq.n	8005920 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	f043 0302 	orr.w	r3, r3, #2
 800590e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005918:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01c      	beq.n	8005962 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f7ff fe45 	bl	80055b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6859      	ldr	r1, [r3, #4]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	4b0d      	ldr	r3, [pc, #52]	; (8005970 <I2C_IsErrorOccurred+0x1bc>)
 800593a:	400b      	ands	r3, r1
 800593c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	431a      	orrs	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005962:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005966:	4618      	mov	r0, r3
 8005968:	3728      	adds	r7, #40	; 0x28
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	fe00e800 	.word	0xfe00e800

08005974 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005974:	b480      	push	{r7}
 8005976:	b087      	sub	sp, #28
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	607b      	str	r3, [r7, #4]
 800597e:	460b      	mov	r3, r1
 8005980:	817b      	strh	r3, [r7, #10]
 8005982:	4613      	mov	r3, r2
 8005984:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005986:	897b      	ldrh	r3, [r7, #10]
 8005988:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800598c:	7a7b      	ldrb	r3, [r7, #9]
 800598e:	041b      	lsls	r3, r3, #16
 8005990:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005994:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	4313      	orrs	r3, r2
 800599e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	0d5b      	lsrs	r3, r3, #21
 80059ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80059b2:	4b08      	ldr	r3, [pc, #32]	; (80059d4 <I2C_TransferConfig+0x60>)
 80059b4:	430b      	orrs	r3, r1
 80059b6:	43db      	mvns	r3, r3
 80059b8:	ea02 0103 	and.w	r1, r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80059c6:	bf00      	nop
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	03ff63ff 	.word	0x03ff63ff

080059d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d138      	bne.n	8005a60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e032      	b.n	8005a62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2224      	movs	r2, #36	; 0x24
 8005a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0201 	bic.w	r2, r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6819      	ldr	r1, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0201 	orr.w	r2, r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	e000      	b.n	8005a62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a60:	2302      	movs	r3, #2
  }
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b085      	sub	sp, #20
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d139      	bne.n	8005af8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e033      	b.n	8005afa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2224      	movs	r2, #36	; 0x24
 8005a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0201 	bic.w	r2, r2, #1
 8005ab0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ac0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	e000      	b.n	8005afa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005af8:	2302      	movs	r3, #2
  }
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
	...

08005b08 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005b0c:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <HAL_ICACHE_Enable+0x1c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a04      	ldr	r2, [pc, #16]	; (8005b24 <HAL_ICACHE_Enable+0x1c>)
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	40030400 	.word	0x40030400

08005b28 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8005b32:	4b14      	ldr	r3, [pc, #80]	; (8005b84 <HAL_ICACHE_Disable+0x5c>)
 8005b34:	2202      	movs	r2, #2
 8005b36:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005b38:	4b12      	ldr	r3, [pc, #72]	; (8005b84 <HAL_ICACHE_Disable+0x5c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a11      	ldr	r2, [pc, #68]	; (8005b84 <HAL_ICACHE_Disable+0x5c>)
 8005b3e:	f023 0301 	bic.w	r3, r3, #1
 8005b42:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b44:	f7fd fab0 	bl	80030a8 <HAL_GetTick>
 8005b48:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005b4a:	e00f      	b.n	8005b6c <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8005b4c:	f7fd faac 	bl	80030a8 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d908      	bls.n	8005b6c <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005b5a:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <HAL_ICACHE_Disable+0x5c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	71fb      	strb	r3, [r7, #7]
        break;
 8005b6a:	e005      	b.n	8005b78 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005b6c:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <HAL_ICACHE_Disable+0x5c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e9      	bne.n	8005b4c <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8005b78:	79fb      	ldrb	r3, [r7, #7]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	40030400 	.word	0x40030400

08005b88 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005b96:	4b22      	ldr	r3, [pc, #136]	; (8005c20 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	75fb      	strb	r3, [r7, #23]
 8005ba6:	e034      	b.n	8005c12 <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	009a      	lsls	r2, r3, #2
 8005bac:	4b1d      	ldr	r3, [pc, #116]	; (8005c24 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8005bae:	4413      	add	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	75fb      	strb	r3, [r7, #23]
 8005bc2:	e026      	b.n	8005c12 <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	425b      	negs	r3, r3
 8005be2:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8005be4:	401a      	ands	r2, r3
 8005be6:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	025a      	lsls	r2, r3, #9
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8005c00:	4313      	orrs	r3, r2
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8005c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	40030400 	.word	0x40030400
 8005c24:	40030420 	.word	0x40030420
 8005c28:	07ff0000 	.word	0x07ff0000

08005c2c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e0bf      	b.n	8005dbe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fc fd76 	bl	8002744 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699a      	ldr	r2, [r3, #24]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005c6e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6999      	ldr	r1, [r3, #24]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c84:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6899      	ldr	r1, [r3, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	4b4a      	ldr	r3, [pc, #296]	; (8005dc8 <HAL_LTDC_Init+0x19c>)
 8005ca0:	400b      	ands	r3, r1
 8005ca2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	041b      	lsls	r3, r3, #16
 8005caa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6899      	ldr	r1, [r3, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699a      	ldr	r2, [r3, #24]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68d9      	ldr	r1, [r3, #12]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	4b3e      	ldr	r3, [pc, #248]	; (8005dc8 <HAL_LTDC_Init+0x19c>)
 8005cce:	400b      	ands	r3, r1
 8005cd0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	041b      	lsls	r3, r3, #16
 8005cd8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68d9      	ldr	r1, [r3, #12]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a1a      	ldr	r2, [r3, #32]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6919      	ldr	r1, [r3, #16]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	4b33      	ldr	r3, [pc, #204]	; (8005dc8 <HAL_LTDC_Init+0x19c>)
 8005cfc:	400b      	ands	r3, r1
 8005cfe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	041b      	lsls	r3, r3, #16
 8005d06:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6919      	ldr	r1, [r3, #16]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6959      	ldr	r1, [r3, #20]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4b27      	ldr	r3, [pc, #156]	; (8005dc8 <HAL_LTDC_Init+0x19c>)
 8005d2a:	400b      	ands	r3, r1
 8005d2c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	041b      	lsls	r3, r3, #16
 8005d34:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6959      	ldr	r1, [r3, #20]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d52:	021b      	lsls	r3, r3, #8
 8005d54:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005d5c:	041b      	lsls	r3, r3, #16
 8005d5e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0206 	orr.w	r2, r2, #6
 8005d9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0201 	orr.w	r2, r2, #1
 8005daa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	f000f800 	.word	0xf000f800

08005dcc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d023      	beq.n	8005e36 <HAL_LTDC_IRQHandler+0x6a>
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01e      	beq.n	8005e36 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0204 	bic.w	r2, r2, #4
 8005e06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2204      	movs	r2, #4
 8005e0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e16:	f043 0201 	orr.w	r2, r3, #1
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2204      	movs	r2, #4
 8005e24:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f86f 	bl	8005f14 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d023      	beq.n	8005e88 <HAL_LTDC_IRQHandler+0xbc>
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d01e      	beq.n	8005e88 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0202 	bic.w	r2, r2, #2
 8005e58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e68:	f043 0202 	orr.w	r2, r3, #2
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2204      	movs	r2, #4
 8005e76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f846 	bl	8005f14 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d01b      	beq.n	8005eca <HAL_LTDC_IRQHandler+0xfe>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d016      	beq.n	8005eca <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0201 	bic.w	r2, r2, #1
 8005eaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f82f 	bl	8005f28 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01b      	beq.n	8005f0c <HAL_LTDC_IRQHandler+0x140>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d016      	beq.n	8005f0c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0208 	bic.w	r2, r2, #8
 8005eec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2208      	movs	r2, #8
 8005ef4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f818 	bl	8005f3c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005f0c:	bf00      	nop
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f50:	b5b0      	push	{r4, r5, r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d101      	bne.n	8005f6a <HAL_LTDC_ConfigLayer+0x1a>
 8005f66:	2302      	movs	r3, #2
 8005f68:	e02c      	b.n	8005fc4 <HAL_LTDC_ConfigLayer+0x74>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2202      	movs	r2, #2
 8005f76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2134      	movs	r1, #52	; 0x34
 8005f80:	fb01 f303 	mul.w	r3, r1, r3
 8005f84:	4413      	add	r3, r2
 8005f86:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	4614      	mov	r4, r2
 8005f8e:	461d      	mov	r5, r3
 8005f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f9c:	682b      	ldr	r3, [r5, #0]
 8005f9e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	68b9      	ldr	r1, [r7, #8]
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 f811 	bl	8005fcc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bdb0      	pop	{r4, r5, r7, pc}

08005fcc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b089      	sub	sp, #36	; 0x24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	0c1b      	lsrs	r3, r3, #16
 8005fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fe8:	4413      	add	r3, r2
 8005fea:	041b      	lsls	r3, r3, #16
 8005fec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	01db      	lsls	r3, r3, #7
 8005ff8:	4413      	add	r3, r2
 8005ffa:	3384      	adds	r3, #132	; 0x84
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	6812      	ldr	r2, [r2, #0]
 8006002:	4611      	mov	r1, r2
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	01d2      	lsls	r2, r2, #7
 8006008:	440a      	add	r2, r1
 800600a:	3284      	adds	r2, #132	; 0x84
 800600c:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8006010:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	0c1b      	lsrs	r3, r3, #16
 800601e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006022:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006024:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4619      	mov	r1, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	01db      	lsls	r3, r3, #7
 8006030:	440b      	add	r3, r1
 8006032:	3384      	adds	r3, #132	; 0x84
 8006034:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800603a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800604a:	4413      	add	r3, r2
 800604c:	041b      	lsls	r3, r3, #16
 800604e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	461a      	mov	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	01db      	lsls	r3, r3, #7
 800605a:	4413      	add	r3, r2
 800605c:	3384      	adds	r3, #132	; 0x84
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	6812      	ldr	r2, [r2, #0]
 8006064:	4611      	mov	r1, r2
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	01d2      	lsls	r2, r2, #7
 800606a:	440a      	add	r2, r1
 800606c:	3284      	adds	r2, #132	; 0x84
 800606e:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8006072:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006082:	4413      	add	r3, r2
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4619      	mov	r1, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	01db      	lsls	r3, r3, #7
 8006090:	440b      	add	r3, r1
 8006092:	3384      	adds	r3, #132	; 0x84
 8006094:	4619      	mov	r1, r3
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	4313      	orrs	r3, r2
 800609a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	01db      	lsls	r3, r3, #7
 80060a6:	4413      	add	r3, r2
 80060a8:	3384      	adds	r3, #132	; 0x84
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	6812      	ldr	r2, [r2, #0]
 80060b0:	4611      	mov	r1, r2
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	01d2      	lsls	r2, r2, #7
 80060b6:	440a      	add	r2, r1
 80060b8:	3284      	adds	r2, #132	; 0x84
 80060ba:	f023 0307 	bic.w	r3, r3, #7
 80060be:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	461a      	mov	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	01db      	lsls	r3, r3, #7
 80060ca:	4413      	add	r3, r2
 80060cc:	3384      	adds	r3, #132	; 0x84
 80060ce:	461a      	mov	r2, r3
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80060dc:	021b      	lsls	r3, r3, #8
 80060de:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80060e6:	041b      	lsls	r3, r3, #16
 80060e8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	061b      	lsls	r3, r3, #24
 80060f0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	01db      	lsls	r3, r3, #7
 80060fc:	4413      	add	r3, r2
 80060fe:	3384      	adds	r3, #132	; 0x84
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	01db      	lsls	r3, r3, #7
 800610c:	4413      	add	r3, r2
 800610e:	3384      	adds	r3, #132	; 0x84
 8006110:	461a      	mov	r2, r3
 8006112:	2300      	movs	r3, #0
 8006114:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800611c:	461a      	mov	r2, r3
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	431a      	orrs	r2, r3
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	431a      	orrs	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4619      	mov	r1, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	01db      	lsls	r3, r3, #7
 8006130:	440b      	add	r3, r1
 8006132:	3384      	adds	r3, #132	; 0x84
 8006134:	4619      	mov	r1, r3
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	01db      	lsls	r3, r3, #7
 8006146:	4413      	add	r3, r2
 8006148:	3384      	adds	r3, #132	; 0x84
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	6812      	ldr	r2, [r2, #0]
 8006150:	4611      	mov	r1, r2
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	01d2      	lsls	r2, r2, #7
 8006156:	440a      	add	r2, r1
 8006158:	3284      	adds	r2, #132	; 0x84
 800615a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800615e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	01db      	lsls	r3, r3, #7
 800616a:	4413      	add	r3, r2
 800616c:	3384      	adds	r3, #132	; 0x84
 800616e:	461a      	mov	r2, r3
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	461a      	mov	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	01db      	lsls	r3, r3, #7
 8006180:	4413      	add	r3, r2
 8006182:	3384      	adds	r3, #132	; 0x84
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	6812      	ldr	r2, [r2, #0]
 800618a:	4611      	mov	r1, r2
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	01d2      	lsls	r2, r2, #7
 8006190:	440a      	add	r2, r1
 8006192:	3284      	adds	r2, #132	; 0x84
 8006194:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006198:	f023 0307 	bic.w	r3, r3, #7
 800619c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	69da      	ldr	r2, [r3, #28]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	68f9      	ldr	r1, [r7, #12]
 80061a8:	6809      	ldr	r1, [r1, #0]
 80061aa:	4608      	mov	r0, r1
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	01c9      	lsls	r1, r1, #7
 80061b0:	4401      	add	r1, r0
 80061b2:	3184      	adds	r1, #132	; 0x84
 80061b4:	4313      	orrs	r3, r2
 80061b6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	461a      	mov	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	01db      	lsls	r3, r3, #7
 80061c2:	4413      	add	r3, r2
 80061c4:	3384      	adds	r3, #132	; 0x84
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	461a      	mov	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	01db      	lsls	r3, r3, #7
 80061d2:	4413      	add	r3, r2
 80061d4:	3384      	adds	r3, #132	; 0x84
 80061d6:	461a      	mov	r2, r3
 80061d8:	2300      	movs	r3, #0
 80061da:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	01db      	lsls	r3, r3, #7
 80061e6:	4413      	add	r3, r2
 80061e8:	3384      	adds	r3, #132	; 0x84
 80061ea:	461a      	mov	r2, r3
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d102      	bne.n	8006200 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80061fa:	2304      	movs	r3, #4
 80061fc:	61fb      	str	r3, [r7, #28]
 80061fe:	e01b      	b.n	8006238 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d102      	bne.n	800620e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006208:	2303      	movs	r3, #3
 800620a:	61fb      	str	r3, [r7, #28]
 800620c:	e014      	b.n	8006238 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	2b04      	cmp	r3, #4
 8006214:	d00b      	beq.n	800622e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800621a:	2b02      	cmp	r3, #2
 800621c:	d007      	beq.n	800622e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006222:	2b03      	cmp	r3, #3
 8006224:	d003      	beq.n	800622e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800622a:	2b07      	cmp	r3, #7
 800622c:	d102      	bne.n	8006234 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800622e:	2302      	movs	r3, #2
 8006230:	61fb      	str	r3, [r7, #28]
 8006232:	e001      	b.n	8006238 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006234:	2301      	movs	r3, #1
 8006236:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	461a      	mov	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	01db      	lsls	r3, r3, #7
 8006242:	4413      	add	r3, r2
 8006244:	3384      	adds	r3, #132	; 0x84
 8006246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	6812      	ldr	r2, [r2, #0]
 800624c:	4611      	mov	r1, r2
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	01d2      	lsls	r2, r2, #7
 8006252:	440a      	add	r2, r1
 8006254:	3284      	adds	r2, #132	; 0x84
 8006256:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800625a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006260:	69fa      	ldr	r2, [r7, #28]
 8006262:	fb02 f303 	mul.w	r3, r2, r3
 8006266:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	6859      	ldr	r1, [r3, #4]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	1acb      	subs	r3, r1, r3
 8006272:	69f9      	ldr	r1, [r7, #28]
 8006274:	fb01 f303 	mul.w	r3, r1, r3
 8006278:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800627a:	68f9      	ldr	r1, [r7, #12]
 800627c:	6809      	ldr	r1, [r1, #0]
 800627e:	4608      	mov	r0, r1
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	01c9      	lsls	r1, r1, #7
 8006284:	4401      	add	r1, r0
 8006286:	3184      	adds	r1, #132	; 0x84
 8006288:	4313      	orrs	r3, r2
 800628a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	461a      	mov	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	01db      	lsls	r3, r3, #7
 8006296:	4413      	add	r3, r2
 8006298:	3384      	adds	r3, #132	; 0x84
 800629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	6812      	ldr	r2, [r2, #0]
 80062a0:	4611      	mov	r1, r2
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	01d2      	lsls	r2, r2, #7
 80062a6:	440a      	add	r2, r1
 80062a8:	3284      	adds	r2, #132	; 0x84
 80062aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062ae:	f023 0307 	bic.w	r3, r3, #7
 80062b2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	461a      	mov	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	01db      	lsls	r3, r3, #7
 80062be:	4413      	add	r3, r2
 80062c0:	3384      	adds	r3, #132	; 0x84
 80062c2:	461a      	mov	r2, r3
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	01db      	lsls	r3, r3, #7
 80062d4:	4413      	add	r3, r2
 80062d6:	3384      	adds	r3, #132	; 0x84
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	4611      	mov	r1, r2
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	01d2      	lsls	r2, r2, #7
 80062e4:	440a      	add	r2, r1
 80062e6:	3284      	adds	r2, #132	; 0x84
 80062e8:	f043 0301 	orr.w	r3, r3, #1
 80062ec:	6013      	str	r3, [r2, #0]
}
 80062ee:	bf00      	nop
 80062f0:	3724      	adds	r7, #36	; 0x24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
	...

080062fc <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006304:	2300      	movs	r3, #0
 8006306:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d102      	bne.n	8006314 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	73fb      	strb	r3, [r7, #15]
 8006312:	e141      	b.n	8006598 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4618      	mov	r0, r3
 800631a:	f000 f947 	bl	80065ac <MDF_GetHandleNumberFromInstance>
 800631e:	4603      	mov	r3, r0
 8006320:	4a86      	ldr	r2, [pc, #536]	; (800653c <HAL_MDF_Init+0x240>)
 8006322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	73fb      	strb	r3, [r7, #15]
 800632e:	e133      	b.n	8006598 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7fb fc71 	bl	8001c18 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8006336:	4b82      	ldr	r3, [pc, #520]	; (8006540 <HAL_MDF_Init+0x244>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d11d      	bne.n	800637a <HAL_MDF_Init+0x7e>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a80      	ldr	r2, [pc, #512]	; (8006544 <HAL_MDF_Init+0x248>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d023      	beq.n	8006390 <HAL_MDF_Init+0x94>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a7e      	ldr	r2, [pc, #504]	; (8006548 <HAL_MDF_Init+0x24c>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d01e      	beq.n	8006390 <HAL_MDF_Init+0x94>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a7d      	ldr	r2, [pc, #500]	; (800654c <HAL_MDF_Init+0x250>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d019      	beq.n	8006390 <HAL_MDF_Init+0x94>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a7b      	ldr	r2, [pc, #492]	; (8006550 <HAL_MDF_Init+0x254>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d014      	beq.n	8006390 <HAL_MDF_Init+0x94>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a7a      	ldr	r2, [pc, #488]	; (8006554 <HAL_MDF_Init+0x258>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00f      	beq.n	8006390 <HAL_MDF_Init+0x94>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a78      	ldr	r2, [pc, #480]	; (8006558 <HAL_MDF_Init+0x25c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00a      	beq.n	8006390 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 800637a:	4b78      	ldr	r3, [pc, #480]	; (800655c <HAL_MDF_Init+0x260>)
 800637c:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 800637e:	2b00      	cmp	r3, #0
 8006380:	f040 8090 	bne.w	80064a4 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a75      	ldr	r2, [pc, #468]	; (8006560 <HAL_MDF_Init+0x264>)
 800638a:	4293      	cmp	r3, r2
 800638c:	f040 808a 	bne.w	80064a4 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a72      	ldr	r2, [pc, #456]	; (8006560 <HAL_MDF_Init+0x264>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d101      	bne.n	800639e <HAL_MDF_Init+0xa2>
 800639a:	4b72      	ldr	r3, [pc, #456]	; (8006564 <HAL_MDF_Init+0x268>)
 800639c:	e000      	b.n	80063a0 <HAL_MDF_Init+0xa4>
 800639e:	4b72      	ldr	r3, [pc, #456]	; (8006568 <HAL_MDF_Init+0x26c>)
 80063a0:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	da02      	bge.n	80063b0 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	73fb      	strb	r3, [r7, #15]
 80063ae:	e079      	b.n	80064a4 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a63      	ldr	r2, [pc, #396]	; (8006544 <HAL_MDF_Init+0x248>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d018      	beq.n	80063ec <HAL_MDF_Init+0xf0>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a62      	ldr	r2, [pc, #392]	; (8006548 <HAL_MDF_Init+0x24c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d013      	beq.n	80063ec <HAL_MDF_Init+0xf0>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a60      	ldr	r2, [pc, #384]	; (800654c <HAL_MDF_Init+0x250>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d00e      	beq.n	80063ec <HAL_MDF_Init+0xf0>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a5f      	ldr	r2, [pc, #380]	; (8006550 <HAL_MDF_Init+0x254>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d009      	beq.n	80063ec <HAL_MDF_Init+0xf0>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a5d      	ldr	r2, [pc, #372]	; (8006554 <HAL_MDF_Init+0x258>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d004      	beq.n	80063ec <HAL_MDF_Init+0xf0>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a5c      	ldr	r2, [pc, #368]	; (8006558 <HAL_MDF_Init+0x25c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d10d      	bne.n	8006408 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	431a      	orrs	r2, r3
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2200      	movs	r2, #0
 800640c:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	3b01      	subs	r3, #1
 8006418:	061b      	lsls	r3, r3, #24
 800641a:	431a      	orrs	r2, r3
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	7b1b      	ldrb	r3, [r3, #12]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d137      	bne.n	8006498 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	3b01      	subs	r3, #1
 8006432:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006438:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8006440:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006442:	431a      	orrs	r2, r3
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	7e1b      	ldrb	r3, [r3, #24]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d123      	bne.n	8006498 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a3b      	ldr	r2, [pc, #236]	; (8006544 <HAL_MDF_Init+0x248>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d012      	beq.n	8006480 <HAL_MDF_Init+0x184>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a3a      	ldr	r2, [pc, #232]	; (8006548 <HAL_MDF_Init+0x24c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00d      	beq.n	8006480 <HAL_MDF_Init+0x184>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a38      	ldr	r2, [pc, #224]	; (800654c <HAL_MDF_Init+0x250>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d008      	beq.n	8006480 <HAL_MDF_Init+0x184>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a37      	ldr	r2, [pc, #220]	; (8006550 <HAL_MDF_Init+0x254>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <HAL_MDF_Init+0x184>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a35      	ldr	r2, [pc, #212]	; (8006554 <HAL_MDF_Init+0x258>)
 800647e:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 800648c:	430b      	orrs	r3, r1
 800648e:	4313      	orrs	r3, r2
 8006490:	f043 0210 	orr.w	r2, r3, #16
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f043 0201 	orr.w	r2, r3, #1
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d128      	bne.n	80064fc <HAL_MDF_Init+0x200>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d123      	bne.n	80064fc <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	da02      	bge.n	80064c4 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	73fb      	strb	r3, [r7, #15]
 80064c2:	e01b      	b.n	80064fc <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6819      	ldr	r1, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d6:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80064dc:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f042 0201 	orr.w	r2, r2, #1
 80064fa:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d14a      	bne.n	8006598 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 021f 	bic.w	r2, r2, #31
 8006510:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6859      	ldr	r1, [r3, #4]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a0d      	ldr	r2, [pc, #52]	; (8006560 <HAL_MDF_Init+0x264>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d11e      	bne.n	800656c <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 800652e:	4b0b      	ldr	r3, [pc, #44]	; (800655c <HAL_MDF_Init+0x260>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3301      	adds	r3, #1
 8006534:	4a09      	ldr	r2, [pc, #36]	; (800655c <HAL_MDF_Init+0x260>)
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	e01d      	b.n	8006576 <HAL_MDF_Init+0x27a>
 800653a:	bf00      	nop
 800653c:	2000151c 	.word	0x2000151c
 8006540:	20001514 	.word	0x20001514
 8006544:	40025080 	.word	0x40025080
 8006548:	40025100 	.word	0x40025100
 800654c:	40025180 	.word	0x40025180
 8006550:	40025200 	.word	0x40025200
 8006554:	40025280 	.word	0x40025280
 8006558:	40025300 	.word	0x40025300
 800655c:	20001518 	.word	0x20001518
 8006560:	46024080 	.word	0x46024080
 8006564:	46024000 	.word	0x46024000
 8006568:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 800656c:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <HAL_MDF_Init+0x2a8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3301      	adds	r3, #1
 8006572:	4a0c      	ldr	r2, [pc, #48]	; (80065a4 <HAL_MDF_Init+0x2a8>)
 8006574:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	f000 f816 	bl	80065ac <MDF_GetHandleNumberFromInstance>
 8006580:	4602      	mov	r2, r0
 8006582:	4909      	ldr	r1, [pc, #36]	; (80065a8 <HAL_MDF_Init+0x2ac>)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8006598:	7bfb      	ldrb	r3, [r7, #15]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20001514 	.word	0x20001514
 80065a8:	2000151c 	.word	0x2000151c

080065ac <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a19      	ldr	r2, [pc, #100]	; (800661c <MDF_GetHandleNumberFromInstance+0x70>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d102      	bne.n	80065c2 <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	e024      	b.n	800660c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a16      	ldr	r2, [pc, #88]	; (8006620 <MDF_GetHandleNumberFromInstance+0x74>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d102      	bne.n	80065d0 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 80065ca:	2301      	movs	r3, #1
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	e01d      	b.n	800660c <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a14      	ldr	r2, [pc, #80]	; (8006624 <MDF_GetHandleNumberFromInstance+0x78>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d102      	bne.n	80065de <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 80065d8:	2302      	movs	r3, #2
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	e016      	b.n	800660c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a11      	ldr	r2, [pc, #68]	; (8006628 <MDF_GetHandleNumberFromInstance+0x7c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d102      	bne.n	80065ec <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 80065e6:	2303      	movs	r3, #3
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	e00f      	b.n	800660c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a0f      	ldr	r2, [pc, #60]	; (800662c <MDF_GetHandleNumberFromInstance+0x80>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d102      	bne.n	80065fa <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 80065f4:	2304      	movs	r3, #4
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	e008      	b.n	800660c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a0c      	ldr	r2, [pc, #48]	; (8006630 <MDF_GetHandleNumberFromInstance+0x84>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d102      	bne.n	8006608 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8006602:	2305      	movs	r3, #5
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	e001      	b.n	800660c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8006608:	2306      	movs	r3, #6
 800660a:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 800660c:	68fb      	ldr	r3, [r7, #12]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40025080 	.word	0x40025080
 8006620:	40025100 	.word	0x40025100
 8006624:	40025180 	.word	0x40025180
 8006628:	40025200 	.word	0x40025200
 800662c:	40025280 	.word	0x40025280
 8006630:	40025300 	.word	0x40025300

08006634 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f043 0201 	orr.w	r2, r3, #1
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	601a      	str	r2, [r3, #0]
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af02      	add	r7, sp, #8
 800665a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006660:	f7fc fd22 	bl	80030a8 <HAL_GetTick>
 8006664:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d102      	bne.n	8006672 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	73fb      	strb	r3, [r7, #15]
 8006670:	e0a5      	b.n	80067be <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800667c:	2b00      	cmp	r3, #0
 800667e:	f040 809e 	bne.w	80067be <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fc f8b4 	bl	80027f0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006688:	f241 3188 	movw	r1, #5000	; 0x1388
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f951 	bl	8006934 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	4b4b      	ldr	r3, [pc, #300]	; (80067c8 <HAL_OSPI_Init+0x174>)
 800669a:	4013      	ands	r3, r2
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	68d1      	ldr	r1, [r2, #12]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6912      	ldr	r2, [r2, #16]
 80066a4:	3a01      	subs	r2, #1
 80066a6:	0412      	lsls	r2, r2, #16
 80066a8:	4311      	orrs	r1, r2
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6952      	ldr	r2, [r2, #20]
 80066ae:	3a01      	subs	r2, #1
 80066b0:	0212      	lsls	r2, r2, #8
 80066b2:	4311      	orrs	r1, r2
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80066b8:	4311      	orrs	r1, r2
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	69d2      	ldr	r2, [r2, #28]
 80066be:	4311      	orrs	r1, r2
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6812      	ldr	r2, [r2, #0]
 80066c4:	430b      	orrs	r3, r1
 80066c6:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1a      	ldr	r2, [r3, #32]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80066f8:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	3b01      	subs	r3, #1
 800670a:	021a      	lsls	r2, r3, #8
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2200      	movs	r2, #0
 800671e:	2120      	movs	r1, #32
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fe09 	bl	8007338 <OSPI_WaitFlagStateUntilTimeout>
 8006726:	4603      	mov	r3, r0
 8006728:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800672a:	7bfb      	ldrb	r3, [r7, #15]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d146      	bne.n	80067be <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	1e5a      	subs	r2, r3, #1
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689a      	ldr	r2, [r3, #8]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006766:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f042 0201 	orr.w	r2, r2, #1
 800678c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d107      	bne.n	80067a6 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f042 0202 	orr.w	r2, r2, #2
 80067a4:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067ae:	d103      	bne.n	80067b8 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	651a      	str	r2, [r3, #80]	; 0x50
 80067b6:	e002      	b.n	80067be <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80067be:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	f8e0c0f4 	.word	0xf8e0c0f4

080067cc <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08a      	sub	sp, #40	; 0x28
 80067d0:	af02      	add	r7, sp, #8
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80067d8:	f7fc fc66 	bl	80030a8 <HAL_GetTick>
 80067dc:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e2:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d002      	beq.n	80067f0 <HAL_OSPI_HyperbusCfg+0x24>
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d122      	bne.n	8006836 <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	2200      	movs	r2, #0
 80067f8:	2120      	movs	r1, #32
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 fd9c 	bl	8007338 <OSPI_WaitFlagStateUntilTimeout>
 8006800:	4603      	mov	r3, r0
 8006802:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8006804:	7ffb      	ldrb	r3, [r7, #31]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d11a      	bne.n	8006840 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	041a      	lsls	r2, r3, #16
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	021b      	lsls	r3, r3, #8
 8006816:	431a      	orrs	r2, r3
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	ea42 0103 	orr.w	r1, r2, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2202      	movs	r2, #2
 8006832:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8006834:	e004      	b.n	8006840 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2210      	movs	r2, #16
 800683e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8006840:	7ffb      	ldrb	r3, [r7, #31]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3720      	adds	r7, #32
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b088      	sub	sp, #32
 800684e:	af02      	add	r7, sp, #8
 8006850:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8006856:	f7fc fc27 	bl	80030a8 <HAL_GetTick>
 800685a:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006860:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d104      	bne.n	8006876 <HAL_OSPI_Abort+0x2c>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f003 0304 	and.w	r3, r3, #4
 8006872:	2b00      	cmp	r3, #0
 8006874:	d052      	beq.n	800691c <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b00      	cmp	r3, #0
 8006882:	d014      	beq.n	80068ae <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0204 	bic.w	r2, r2, #4
 8006892:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006898:	4618      	mov	r0, r3
 800689a:	f7fc feb2 	bl	8003602 <HAL_DMA_Abort>
 800689e:	4603      	mov	r3, r0
 80068a0:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 80068a2:	7dfb      	ldrb	r3, [r7, #23]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2204      	movs	r2, #4
 80068ac:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d02b      	beq.n	8006914 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0202 	orr.w	r2, r2, #2
 80068ca:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	2201      	movs	r2, #1
 80068d6:	2102      	movs	r1, #2
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fd2d 	bl	8007338 <OSPI_WaitFlagStateUntilTimeout>
 80068de:	4603      	mov	r3, r0
 80068e0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d11f      	bne.n	8006928 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2202      	movs	r2, #2
 80068ee:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2200      	movs	r2, #0
 80068fa:	2120      	movs	r1, #32
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fd1b 	bl	8007338 <OSPI_WaitFlagStateUntilTimeout>
 8006902:	4603      	mov	r3, r0
 8006904:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006906:	7dfb      	ldrb	r3, [r7, #23]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10d      	bne.n	8006928 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006912:	e009      	b.n	8006928 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800691a:	e005      	b.n	8006928 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2210      	movs	r2, #16
 8006924:	655a      	str	r2, [r3, #84]	; 0x54
 8006926:	e000      	b.n	800692a <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006928:	bf00      	nop
  }

  /* Return function status */
  return status;
 800692a:	7dfb      	ldrb	r3, [r7, #23]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
	...

08006954 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b094      	sub	sp, #80	; 0x50
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a9d      	ldr	r2, [pc, #628]	; (8006be8 <HAL_OSPIM_Config+0x294>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d105      	bne.n	8006982 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8006980:	e004      	b.n	800698c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8006982:	2301      	movs	r3, #1
 8006984:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800698c:	2300      	movs	r3, #0
 800698e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006992:	e01d      	b.n	80069d0 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8006994:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006998:	3301      	adds	r3, #1
 800699a:	b2d8      	uxtb	r0, r3
 800699c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80069a0:	f107 0114 	add.w	r1, r7, #20
 80069a4:	4613      	mov	r3, r2
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	4413      	add	r3, r2
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	440b      	add	r3, r1
 80069ae:	4619      	mov	r1, r3
 80069b0:	f000 fd02 	bl	80073b8 <OSPIM_GetConfig>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d005      	beq.n	80069c6 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2208      	movs	r2, #8
 80069c4:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80069c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80069ca:	3301      	adds	r3, #1
 80069cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80069d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d9dd      	bls.n	8006994 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80069d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f040 849e 	bne.w	800731e <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80069e2:	4b81      	ldr	r3, [pc, #516]	; (8006be8 <HAL_OSPIM_Config+0x294>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00b      	beq.n	8006a06 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80069ee:	4b7e      	ldr	r3, [pc, #504]	; (8006be8 <HAL_OSPIM_Config+0x294>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a7d      	ldr	r2, [pc, #500]	; (8006be8 <HAL_OSPIM_Config+0x294>)
 80069f4:	f023 0301 	bic.w	r3, r3, #1
 80069f8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80069fa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80069fe:	f043 0301 	orr.w	r3, r3, #1
 8006a02:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8006a06:	4b79      	ldr	r3, [pc, #484]	; (8006bec <HAL_OSPIM_Config+0x298>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006a12:	4b76      	ldr	r3, [pc, #472]	; (8006bec <HAL_OSPIM_Config+0x298>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a75      	ldr	r2, [pc, #468]	; (8006bec <HAL_OSPIM_Config+0x298>)
 8006a18:	f023 0301 	bic.w	r3, r3, #1
 8006a1c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8006a1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006a22:	f043 0302 	orr.w	r3, r3, #2
 8006a26:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006a2a:	4971      	ldr	r1, [pc, #452]	; (8006bf0 <HAL_OSPIM_Config+0x29c>)
 8006a2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a2e:	4613      	mov	r3, r2
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	4413      	add	r3, r2
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	3350      	adds	r3, #80	; 0x50
 8006a38:	443b      	add	r3, r7
 8006a3a:	3b34      	subs	r3, #52	; 0x34
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	440b      	add	r3, r1
 8006a44:	6859      	ldr	r1, [r3, #4]
 8006a46:	486a      	ldr	r0, [pc, #424]	; (8006bf0 <HAL_OSPIM_Config+0x29c>)
 8006a48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	4413      	add	r3, r2
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	3350      	adds	r3, #80	; 0x50
 8006a54:	443b      	add	r3, r7
 8006a56:	3b34      	subs	r3, #52	; 0x34
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4403      	add	r3, r0
 8006a64:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006a66:	4b62      	ldr	r3, [pc, #392]	; (8006bf0 <HAL_OSPIM_Config+0x29c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 80c0 	beq.w	8006bf4 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006a74:	4b5e      	ldr	r3, [pc, #376]	; (8006bf0 <HAL_OSPIM_Config+0x29c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a5d      	ldr	r2, [pc, #372]	; (8006bf0 <HAL_OSPIM_Config+0x29c>)
 8006a7a:	f023 0301 	bic.w	r3, r3, #1
 8006a7e:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8006a80:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	f040 8162 	bne.w	8006d4e <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8006a8a:	4959      	ldr	r1, [pc, #356]	; (8006bf0 <HAL_OSPIM_Config+0x29c>)
 8006a8c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a90:	4613      	mov	r3, r2
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	4413      	add	r3, r2
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	3350      	adds	r3, #80	; 0x50
 8006a9a:	443b      	add	r3, r7
 8006a9c:	3b3c      	subs	r3, #60	; 0x3c
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	440b      	add	r3, r1
 8006aa6:	6859      	ldr	r1, [r3, #4]
 8006aa8:	4851      	ldr	r0, [pc, #324]	; (8006bf0 <HAL_OSPIM_Config+0x29c>)
 8006aaa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006aae:	4613      	mov	r3, r2
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	4413      	add	r3, r2
 8006ab4:	00db      	lsls	r3, r3, #3
 8006ab6:	3350      	adds	r3, #80	; 0x50
 8006ab8:	443b      	add	r3, r7
 8006aba:	3b3c      	subs	r3, #60	; 0x3c
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	f041 0202 	orr.w	r2, r1, #2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4403      	add	r3, r0
 8006ac8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006aca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006ace:	4613      	mov	r3, r2
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	4413      	add	r3, r2
 8006ad4:	00db      	lsls	r3, r3, #3
 8006ad6:	3350      	adds	r3, #80	; 0x50
 8006ad8:	443b      	add	r3, r7
 8006ada:	3b38      	subs	r3, #56	; 0x38
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d01f      	beq.n	8006b22 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8006ae2:	4943      	ldr	r1, [pc, #268]	; (8006bf0 <HAL_OSPIM_Config+0x29c>)
 8006ae4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006ae8:	4613      	mov	r3, r2
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	4413      	add	r3, r2
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	3350      	adds	r3, #80	; 0x50
 8006af2:	443b      	add	r3, r7
 8006af4:	3b38      	subs	r3, #56	; 0x38
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	440b      	add	r3, r1
 8006afe:	6859      	ldr	r1, [r3, #4]
 8006b00:	483b      	ldr	r0, [pc, #236]	; (8006bf0 <HAL_OSPIM_Config+0x29c>)
 8006b02:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006b06:	4613      	mov	r3, r2
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	4413      	add	r3, r2
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	3350      	adds	r3, #80	; 0x50
 8006b10:	443b      	add	r3, r7
 8006b12:	3b38      	subs	r3, #56	; 0x38
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	f041 0220 	orr.w	r2, r1, #32
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4403      	add	r3, r0
 8006b20:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006b22:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006b26:	4613      	mov	r3, r2
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	4413      	add	r3, r2
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	3350      	adds	r3, #80	; 0x50
 8006b30:	443b      	add	r3, r7
 8006b32:	3b30      	subs	r3, #48	; 0x30
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d023      	beq.n	8006b82 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006b3a:	492d      	ldr	r1, [pc, #180]	; (8006bf0 <HAL_OSPIM_Config+0x29c>)
 8006b3c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006b40:	4613      	mov	r3, r2
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	4413      	add	r3, r2
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	3350      	adds	r3, #80	; 0x50
 8006b4a:	443b      	add	r3, r7
 8006b4c:	3b30      	subs	r3, #48	; 0x30
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3b01      	subs	r3, #1
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	440b      	add	r3, r1
 8006b5a:	6859      	ldr	r1, [r3, #4]
 8006b5c:	4824      	ldr	r0, [pc, #144]	; (8006bf0 <HAL_OSPIM_Config+0x29c>)
 8006b5e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006b62:	4613      	mov	r3, r2
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	4413      	add	r3, r2
 8006b68:	00db      	lsls	r3, r3, #3
 8006b6a:	3350      	adds	r3, #80	; 0x50
 8006b6c:	443b      	add	r3, r7
 8006b6e:	3b30      	subs	r3, #48	; 0x30
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3b01      	subs	r3, #1
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4403      	add	r3, r0
 8006b80:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006b82:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006b86:	4613      	mov	r3, r2
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	4413      	add	r3, r2
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	3350      	adds	r3, #80	; 0x50
 8006b90:	443b      	add	r3, r7
 8006b92:	3b2c      	subs	r3, #44	; 0x2c
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 80d9 	beq.w	8006d4e <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006b9c:	4914      	ldr	r1, [pc, #80]	; (8006bf0 <HAL_OSPIM_Config+0x29c>)
 8006b9e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	4413      	add	r3, r2
 8006ba8:	00db      	lsls	r3, r3, #3
 8006baa:	3350      	adds	r3, #80	; 0x50
 8006bac:	443b      	add	r3, r7
 8006bae:	3b2c      	subs	r3, #44	; 0x2c
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	440b      	add	r3, r1
 8006bbc:	6859      	ldr	r1, [r3, #4]
 8006bbe:	480c      	ldr	r0, [pc, #48]	; (8006bf0 <HAL_OSPIM_Config+0x29c>)
 8006bc0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	4413      	add	r3, r2
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	3350      	adds	r3, #80	; 0x50
 8006bce:	443b      	add	r3, r7
 8006bd0:	3b2c      	subs	r3, #44	; 0x2c
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4403      	add	r3, r0
 8006be2:	605a      	str	r2, [r3, #4]
 8006be4:	e0b3      	b.n	8006d4e <HAL_OSPIM_Config+0x3fa>
 8006be6:	bf00      	nop
 8006be8:	420d1400 	.word	0x420d1400
 8006bec:	420d2400 	.word	0x420d2400
 8006bf0:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8006bf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	4413      	add	r3, r2
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	3350      	adds	r3, #80	; 0x50
 8006c00:	443b      	add	r3, r7
 8006c02:	3b3c      	subs	r3, #60	; 0x3c
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f000 80a1 	beq.w	8006d4e <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006c0c:	4993      	ldr	r1, [pc, #588]	; (8006e5c <HAL_OSPIM_Config+0x508>)
 8006c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c10:	4613      	mov	r3, r2
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	4413      	add	r3, r2
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	3350      	adds	r3, #80	; 0x50
 8006c1a:	443b      	add	r3, r7
 8006c1c:	3b3c      	subs	r3, #60	; 0x3c
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	440b      	add	r3, r1
 8006c26:	6859      	ldr	r1, [r3, #4]
 8006c28:	488c      	ldr	r0, [pc, #560]	; (8006e5c <HAL_OSPIM_Config+0x508>)
 8006c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	005b      	lsls	r3, r3, #1
 8006c30:	4413      	add	r3, r2
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	3350      	adds	r3, #80	; 0x50
 8006c36:	443b      	add	r3, r7
 8006c38:	3b3c      	subs	r3, #60	; 0x3c
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	f021 0201 	bic.w	r2, r1, #1
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4403      	add	r3, r0
 8006c46:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006c48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	4413      	add	r3, r2
 8006c50:	00db      	lsls	r3, r3, #3
 8006c52:	3350      	adds	r3, #80	; 0x50
 8006c54:	443b      	add	r3, r7
 8006c56:	3b38      	subs	r3, #56	; 0x38
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d01d      	beq.n	8006c9a <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006c5e:	497f      	ldr	r1, [pc, #508]	; (8006e5c <HAL_OSPIM_Config+0x508>)
 8006c60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c62:	4613      	mov	r3, r2
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	4413      	add	r3, r2
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	3350      	adds	r3, #80	; 0x50
 8006c6c:	443b      	add	r3, r7
 8006c6e:	3b38      	subs	r3, #56	; 0x38
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	440b      	add	r3, r1
 8006c78:	6859      	ldr	r1, [r3, #4]
 8006c7a:	4878      	ldr	r0, [pc, #480]	; (8006e5c <HAL_OSPIM_Config+0x508>)
 8006c7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c7e:	4613      	mov	r3, r2
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	4413      	add	r3, r2
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	3350      	adds	r3, #80	; 0x50
 8006c88:	443b      	add	r3, r7
 8006c8a:	3b38      	subs	r3, #56	; 0x38
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	f021 0210 	bic.w	r2, r1, #16
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4403      	add	r3, r0
 8006c98:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006c9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	4413      	add	r3, r2
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	3350      	adds	r3, #80	; 0x50
 8006ca6:	443b      	add	r3, r7
 8006ca8:	3b30      	subs	r3, #48	; 0x30
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d021      	beq.n	8006cf4 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006cb0:	496a      	ldr	r1, [pc, #424]	; (8006e5c <HAL_OSPIM_Config+0x508>)
 8006cb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	4413      	add	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	3350      	adds	r3, #80	; 0x50
 8006cbe:	443b      	add	r3, r7
 8006cc0:	3b30      	subs	r3, #48	; 0x30
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	440b      	add	r3, r1
 8006cce:	6859      	ldr	r1, [r3, #4]
 8006cd0:	4862      	ldr	r0, [pc, #392]	; (8006e5c <HAL_OSPIM_Config+0x508>)
 8006cd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	4413      	add	r3, r2
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	3350      	adds	r3, #80	; 0x50
 8006cde:	443b      	add	r3, r7
 8006ce0:	3b30      	subs	r3, #48	; 0x30
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4403      	add	r3, r0
 8006cf2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	4413      	add	r3, r2
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	3350      	adds	r3, #80	; 0x50
 8006d00:	443b      	add	r3, r7
 8006d02:	3b2c      	subs	r3, #44	; 0x2c
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d021      	beq.n	8006d4e <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006d0a:	4954      	ldr	r1, [pc, #336]	; (8006e5c <HAL_OSPIM_Config+0x508>)
 8006d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d0e:	4613      	mov	r3, r2
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	4413      	add	r3, r2
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	3350      	adds	r3, #80	; 0x50
 8006d18:	443b      	add	r3, r7
 8006d1a:	3b2c      	subs	r3, #44	; 0x2c
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	440b      	add	r3, r1
 8006d28:	6859      	ldr	r1, [r3, #4]
 8006d2a:	484c      	ldr	r0, [pc, #304]	; (8006e5c <HAL_OSPIM_Config+0x508>)
 8006d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d2e:	4613      	mov	r3, r2
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	4413      	add	r3, r2
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	3350      	adds	r3, #80	; 0x50
 8006d38:	443b      	add	r3, r7
 8006d3a:	3b2c      	subs	r3, #44	; 0x2c
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4403      	add	r3, r0
 8006d4c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	6819      	ldr	r1, [r3, #0]
 8006d52:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006d56:	4613      	mov	r3, r2
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	4413      	add	r3, r2
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	3350      	adds	r3, #80	; 0x50
 8006d60:	443b      	add	r3, r7
 8006d62:	3b3c      	subs	r3, #60	; 0x3c
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4299      	cmp	r1, r3
 8006d68:	d038      	beq.n	8006ddc <HAL_OSPIM_Config+0x488>
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	6859      	ldr	r1, [r3, #4]
 8006d6e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006d72:	4613      	mov	r3, r2
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	4413      	add	r3, r2
 8006d78:	00db      	lsls	r3, r3, #3
 8006d7a:	3350      	adds	r3, #80	; 0x50
 8006d7c:	443b      	add	r3, r7
 8006d7e:	3b38      	subs	r3, #56	; 0x38
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4299      	cmp	r1, r3
 8006d84:	d02a      	beq.n	8006ddc <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	6899      	ldr	r1, [r3, #8]
 8006d8a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006d8e:	4613      	mov	r3, r2
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	4413      	add	r3, r2
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	3350      	adds	r3, #80	; 0x50
 8006d98:	443b      	add	r3, r7
 8006d9a:	3b34      	subs	r3, #52	; 0x34
 8006d9c:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006d9e:	4299      	cmp	r1, r3
 8006da0:	d01c      	beq.n	8006ddc <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	68d9      	ldr	r1, [r3, #12]
 8006da6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006daa:	4613      	mov	r3, r2
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	4413      	add	r3, r2
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	3350      	adds	r3, #80	; 0x50
 8006db4:	443b      	add	r3, r7
 8006db6:	3b30      	subs	r3, #48	; 0x30
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4299      	cmp	r1, r3
 8006dbc:	d00e      	beq.n	8006ddc <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	6919      	ldr	r1, [r3, #16]
 8006dc2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	4413      	add	r3, r2
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	3350      	adds	r3, #80	; 0x50
 8006dd0:	443b      	add	r3, r7
 8006dd2:	3b2c      	subs	r3, #44	; 0x2c
 8006dd4:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006dd6:	4299      	cmp	r1, r3
 8006dd8:	f040 810e 	bne.w	8006ff8 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	6819      	ldr	r1, [r3, #0]
 8006de0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006de4:	4613      	mov	r3, r2
 8006de6:	005b      	lsls	r3, r3, #1
 8006de8:	4413      	add	r3, r2
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	3350      	adds	r3, #80	; 0x50
 8006dee:	443b      	add	r3, r7
 8006df0:	3b3c      	subs	r3, #60	; 0x3c
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4299      	cmp	r1, r3
 8006df6:	d133      	bne.n	8006e60 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	6859      	ldr	r1, [r3, #4]
 8006dfc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e00:	4613      	mov	r3, r2
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	4413      	add	r3, r2
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	3350      	adds	r3, #80	; 0x50
 8006e0a:	443b      	add	r3, r7
 8006e0c:	3b38      	subs	r3, #56	; 0x38
 8006e0e:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006e10:	4299      	cmp	r1, r3
 8006e12:	d125      	bne.n	8006e60 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	68d9      	ldr	r1, [r3, #12]
 8006e18:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	4413      	add	r3, r2
 8006e22:	00db      	lsls	r3, r3, #3
 8006e24:	3350      	adds	r3, #80	; 0x50
 8006e26:	443b      	add	r3, r7
 8006e28:	3b30      	subs	r3, #48	; 0x30
 8006e2a:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006e2c:	4299      	cmp	r1, r3
 8006e2e:	d117      	bne.n	8006e60 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	6919      	ldr	r1, [r3, #16]
 8006e34:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e38:	4613      	mov	r3, r2
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	4413      	add	r3, r2
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	3350      	adds	r3, #80	; 0x50
 8006e42:	443b      	add	r3, r7
 8006e44:	3b2c      	subs	r3, #44	; 0x2c
 8006e46:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006e48:	4299      	cmp	r1, r3
 8006e4a:	d109      	bne.n	8006e60 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006e4c:	4b03      	ldr	r3, [pc, #12]	; (8006e5c <HAL_OSPIM_Config+0x508>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a02      	ldr	r2, [pc, #8]	; (8006e5c <HAL_OSPIM_Config+0x508>)
 8006e52:	f043 0301 	orr.w	r3, r3, #1
 8006e56:	6013      	str	r3, [r2, #0]
 8006e58:	e0ce      	b.n	8006ff8 <HAL_OSPIM_Config+0x6a4>
 8006e5a:	bf00      	nop
 8006e5c:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006e60:	49a4      	ldr	r1, [pc, #656]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 8006e62:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e66:	4613      	mov	r3, r2
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	4413      	add	r3, r2
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	3350      	adds	r3, #80	; 0x50
 8006e70:	443b      	add	r3, r7
 8006e72:	3b3c      	subs	r3, #60	; 0x3c
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	440b      	add	r3, r1
 8006e7c:	6859      	ldr	r1, [r3, #4]
 8006e7e:	489d      	ldr	r0, [pc, #628]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 8006e80:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e84:	4613      	mov	r3, r2
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	4413      	add	r3, r2
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	3350      	adds	r3, #80	; 0x50
 8006e8e:	443b      	add	r3, r7
 8006e90:	3b3c      	subs	r3, #60	; 0x3c
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	f021 0201 	bic.w	r2, r1, #1
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4403      	add	r3, r0
 8006e9e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006ea0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	4413      	add	r3, r2
 8006eaa:	00db      	lsls	r3, r3, #3
 8006eac:	3350      	adds	r3, #80	; 0x50
 8006eae:	443b      	add	r3, r7
 8006eb0:	3b38      	subs	r3, #56	; 0x38
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d01f      	beq.n	8006ef8 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006eb8:	498e      	ldr	r1, [pc, #568]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 8006eba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	4413      	add	r3, r2
 8006ec4:	00db      	lsls	r3, r3, #3
 8006ec6:	3350      	adds	r3, #80	; 0x50
 8006ec8:	443b      	add	r3, r7
 8006eca:	3b38      	subs	r3, #56	; 0x38
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	6859      	ldr	r1, [r3, #4]
 8006ed6:	4887      	ldr	r0, [pc, #540]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 8006ed8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006edc:	4613      	mov	r3, r2
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	4413      	add	r3, r2
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	3350      	adds	r3, #80	; 0x50
 8006ee6:	443b      	add	r3, r7
 8006ee8:	3b38      	subs	r3, #56	; 0x38
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	f021 0210 	bic.w	r2, r1, #16
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4403      	add	r3, r0
 8006ef6:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006ef8:	497e      	ldr	r1, [pc, #504]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 8006efa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006efe:	4613      	mov	r3, r2
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	4413      	add	r3, r2
 8006f04:	00db      	lsls	r3, r3, #3
 8006f06:	3350      	adds	r3, #80	; 0x50
 8006f08:	443b      	add	r3, r7
 8006f0a:	3b34      	subs	r3, #52	; 0x34
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	440b      	add	r3, r1
 8006f14:	6859      	ldr	r1, [r3, #4]
 8006f16:	4877      	ldr	r0, [pc, #476]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 8006f18:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	4413      	add	r3, r2
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	3350      	adds	r3, #80	; 0x50
 8006f26:	443b      	add	r3, r7
 8006f28:	3b34      	subs	r3, #52	; 0x34
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4403      	add	r3, r0
 8006f36:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006f38:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	005b      	lsls	r3, r3, #1
 8006f40:	4413      	add	r3, r2
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	3350      	adds	r3, #80	; 0x50
 8006f46:	443b      	add	r3, r7
 8006f48:	3b30      	subs	r3, #48	; 0x30
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d023      	beq.n	8006f98 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006f50:	4968      	ldr	r1, [pc, #416]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 8006f52:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006f56:	4613      	mov	r3, r2
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	4413      	add	r3, r2
 8006f5c:	00db      	lsls	r3, r3, #3
 8006f5e:	3350      	adds	r3, #80	; 0x50
 8006f60:	443b      	add	r3, r7
 8006f62:	3b30      	subs	r3, #48	; 0x30
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	440b      	add	r3, r1
 8006f70:	6859      	ldr	r1, [r3, #4]
 8006f72:	4860      	ldr	r0, [pc, #384]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 8006f74:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006f78:	4613      	mov	r3, r2
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	4413      	add	r3, r2
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	3350      	adds	r3, #80	; 0x50
 8006f82:	443b      	add	r3, r7
 8006f84:	3b30      	subs	r3, #48	; 0x30
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4403      	add	r3, r0
 8006f96:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006f98:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	4413      	add	r3, r2
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	3350      	adds	r3, #80	; 0x50
 8006fa6:	443b      	add	r3, r7
 8006fa8:	3b2c      	subs	r3, #44	; 0x2c
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d023      	beq.n	8006ff8 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006fb0:	4950      	ldr	r1, [pc, #320]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 8006fb2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	4413      	add	r3, r2
 8006fbc:	00db      	lsls	r3, r3, #3
 8006fbe:	3350      	adds	r3, #80	; 0x50
 8006fc0:	443b      	add	r3, r7
 8006fc2:	3b2c      	subs	r3, #44	; 0x2c
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	440b      	add	r3, r1
 8006fd0:	6859      	ldr	r1, [r3, #4]
 8006fd2:	4848      	ldr	r0, [pc, #288]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 8006fd4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006fd8:	4613      	mov	r3, r2
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	4413      	add	r3, r2
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	3350      	adds	r3, #80	; 0x50
 8006fe2:	443b      	add	r3, r7
 8006fe4:	3b2c      	subs	r3, #44	; 0x2c
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4403      	add	r3, r0
 8006ff6:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006ff8:	4a3e      	ldr	r2, [pc, #248]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	3b01      	subs	r3, #1
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800700a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800700c:	025b      	lsls	r3, r3, #9
 800700e:	431a      	orrs	r2, r3
 8007010:	4938      	ldr	r1, [pc, #224]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	3b01      	subs	r3, #1
 8007018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	440b      	add	r3, r1
 8007020:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d018      	beq.n	800705c <HAL_OSPIM_Config+0x708>
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007032:	d813      	bhi.n	800705c <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	1e5a      	subs	r2, r3, #1
 800703a:	4b2e      	ldr	r3, [pc, #184]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	0c1b      	lsrs	r3, r3, #16
 8007040:	b2db      	uxtb	r3, r3
 8007042:	429a      	cmp	r2, r3
 8007044:	d90a      	bls.n	800705c <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8007046:	4b2b      	ldr	r3, [pc, #172]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	3b01      	subs	r3, #1
 8007054:	041b      	lsls	r3, r3, #16
 8007056:	4927      	ldr	r1, [pc, #156]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 8007058:	4313      	orrs	r3, r2
 800705a:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800705c:	4b25      	ldr	r3, [pc, #148]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 809a 	beq.w	800719e <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800706a:	4a22      	ldr	r2, [pc, #136]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3b01      	subs	r3, #1
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f023 0203 	bic.w	r2, r3, #3
 800707c:	491d      	ldr	r1, [pc, #116]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3b01      	subs	r3, #1
 8007084:	f042 0201 	orr.w	r2, r2, #1
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	440b      	add	r3, r1
 800708c:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d011      	beq.n	80070ba <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8007096:	4a17      	ldr	r2, [pc, #92]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	3b01      	subs	r3, #1
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070a8:	4912      	ldr	r1, [pc, #72]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	f042 0210 	orr.w	r2, r2, #16
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	440b      	add	r3, r1
 80070b8:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d018      	beq.n	80070f8 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80070c6:	4a0b      	ldr	r2, [pc, #44]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	3b01      	subs	r3, #1
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80070dc:	4905      	ldr	r1, [pc, #20]	; (80070f4 <HAL_OSPIM_Config+0x7a0>)
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	440b      	add	r3, r1
 80070f0:	605a      	str	r2, [r3, #4]
 80070f2:	e01b      	b.n	800712c <HAL_OSPIM_Config+0x7d8>
 80070f4:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d015      	beq.n	800712c <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007100:	4a8a      	ldr	r2, [pc, #552]	; (800732c <HAL_OSPIM_Config+0x9d8>)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	3b01      	subs	r3, #1
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007116:	4985      	ldr	r1, [pc, #532]	; (800732c <HAL_OSPIM_Config+0x9d8>)
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	3b01      	subs	r3, #1
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d016      	beq.n	8007166 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007138:	4a7c      	ldr	r2, [pc, #496]	; (800732c <HAL_OSPIM_Config+0x9d8>)
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	3b01      	subs	r3, #1
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800714e:	4977      	ldr	r1, [pc, #476]	; (800732c <HAL_OSPIM_Config+0x9d8>)
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	3b01      	subs	r3, #1
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	440b      	add	r3, r1
 8007162:	605a      	str	r2, [r3, #4]
 8007164:	e0c3      	b.n	80072ee <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 80bf 	beq.w	80072ee <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007170:	4a6e      	ldr	r2, [pc, #440]	; (800732c <HAL_OSPIM_Config+0x9d8>)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	3b01      	subs	r3, #1
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007186:	4969      	ldr	r1, [pc, #420]	; (800732c <HAL_OSPIM_Config+0x9d8>)
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	3b01      	subs	r3, #1
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	440b      	add	r3, r1
 800719a:	605a      	str	r2, [r3, #4]
 800719c:	e0a7      	b.n	80072ee <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800719e:	4a63      	ldr	r2, [pc, #396]	; (800732c <HAL_OSPIM_Config+0x9d8>)
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f023 0203 	bic.w	r2, r3, #3
 80071b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	431a      	orrs	r2, r3
 80071b6:	495d      	ldr	r1, [pc, #372]	; (800732c <HAL_OSPIM_Config+0x9d8>)
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3b01      	subs	r3, #1
 80071be:	f042 0201 	orr.w	r2, r2, #1
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	440b      	add	r3, r1
 80071c6:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d014      	beq.n	80071fa <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80071d0:	4a56      	ldr	r2, [pc, #344]	; (800732c <HAL_OSPIM_Config+0x9d8>)
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071e4:	015b      	lsls	r3, r3, #5
 80071e6:	431a      	orrs	r2, r3
 80071e8:	4950      	ldr	r1, [pc, #320]	; (800732c <HAL_OSPIM_Config+0x9d8>)
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	3b01      	subs	r3, #1
 80071f0:	f042 0210 	orr.w	r2, r2, #16
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	440b      	add	r3, r1
 80071f8:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d019      	beq.n	800723a <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007206:	4a49      	ldr	r2, [pc, #292]	; (800732c <HAL_OSPIM_Config+0x9d8>)
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	3b01      	subs	r3, #1
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800721c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800721e:	049b      	lsls	r3, r3, #18
 8007220:	431a      	orrs	r2, r3
 8007222:	4942      	ldr	r1, [pc, #264]	; (800732c <HAL_OSPIM_Config+0x9d8>)
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	3b01      	subs	r3, #1
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	440b      	add	r3, r1
 8007236:	605a      	str	r2, [r3, #4]
 8007238:	e01c      	b.n	8007274 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d018      	beq.n	8007274 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007242:	4a3a      	ldr	r2, [pc, #232]	; (800732c <HAL_OSPIM_Config+0x9d8>)
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	3b01      	subs	r3, #1
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800725a:	069b      	lsls	r3, r3, #26
 800725c:	431a      	orrs	r2, r3
 800725e:	4933      	ldr	r1, [pc, #204]	; (800732c <HAL_OSPIM_Config+0x9d8>)
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	3b01      	subs	r3, #1
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	440b      	add	r3, r1
 8007272:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d019      	beq.n	80072b4 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007280:	4a2a      	ldr	r2, [pc, #168]	; (800732c <HAL_OSPIM_Config+0x9d8>)
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	3b01      	subs	r3, #1
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007298:	049b      	lsls	r3, r3, #18
 800729a:	431a      	orrs	r2, r3
 800729c:	4923      	ldr	r1, [pc, #140]	; (800732c <HAL_OSPIM_Config+0x9d8>)
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	440b      	add	r3, r1
 80072b0:	605a      	str	r2, [r3, #4]
 80072b2:	e01c      	b.n	80072ee <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d018      	beq.n	80072ee <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80072bc:	4a1b      	ldr	r2, [pc, #108]	; (800732c <HAL_OSPIM_Config+0x9d8>)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80072d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072d4:	069b      	lsls	r3, r3, #26
 80072d6:	431a      	orrs	r2, r3
 80072d8:	4914      	ldr	r1, [pc, #80]	; (800732c <HAL_OSPIM_Config+0x9d8>)
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	3b01      	subs	r3, #1
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	440b      	add	r3, r1
 80072ec:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80072ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d005      	beq.n	8007306 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80072fa:	4b0d      	ldr	r3, [pc, #52]	; (8007330 <HAL_OSPIM_Config+0x9dc>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a0c      	ldr	r2, [pc, #48]	; (8007330 <HAL_OSPIM_Config+0x9dc>)
 8007300:	f043 0301 	orr.w	r3, r3, #1
 8007304:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8007306:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d005      	beq.n	800731e <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007312:	4b08      	ldr	r3, [pc, #32]	; (8007334 <HAL_OSPIM_Config+0x9e0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a07      	ldr	r2, [pc, #28]	; (8007334 <HAL_OSPIM_Config+0x9e0>)
 8007318:	f043 0301 	orr.w	r3, r3, #1
 800731c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800731e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007322:	4618      	mov	r0, r3
 8007324:	3750      	adds	r7, #80	; 0x50
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	420c4000 	.word	0x420c4000
 8007330:	420d1400 	.word	0x420d1400
 8007334:	420d2400 	.word	0x420d2400

08007338 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	603b      	str	r3, [r7, #0]
 8007344:	4613      	mov	r3, r2
 8007346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007348:	e022      	b.n	8007390 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007350:	d01e      	beq.n	8007390 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007352:	f7fb fea9 	bl	80030a8 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	429a      	cmp	r2, r3
 8007360:	d302      	bcc.n	8007368 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d113      	bne.n	8007390 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6a1a      	ldr	r2, [r3, #32]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	401a      	ands	r2, r3
 8007372:	79fb      	ldrb	r3, [r7, #7]
 8007374:	429a      	cmp	r2, r3
 8007376:	d00b      	beq.n	8007390 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800737e:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007384:	f043 0201 	orr.w	r2, r3, #1
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e00e      	b.n	80073ae <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6a1a      	ldr	r2, [r3, #32]
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	4013      	ands	r3, r2
 800739a:	2b00      	cmp	r3, #0
 800739c:	bf14      	ite	ne
 800739e:	2301      	movne	r3, #1
 80073a0:	2300      	moveq	r3, #0
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	461a      	mov	r2, r3
 80073a6:	79fb      	ldrb	r3, [r7, #7]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d1ce      	bne.n	800734a <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
	...

080073b8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	4603      	mov	r3, r0
 80073c0:	6039      	str	r1, [r7, #0]
 80073c2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d005      	beq.n	80073de <OSPIM_GetConfig+0x26>
 80073d2:	79fb      	ldrb	r3, [r7, #7]
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d802      	bhi.n	80073de <OSPIM_GetConfig+0x26>
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d102      	bne.n	80073e4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	75fb      	strb	r3, [r7, #23]
 80073e2:	e098      	b.n	8007516 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2200      	movs	r2, #0
 80073ee:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2200      	movs	r2, #0
 80073f4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2200      	movs	r2, #0
 80073fa:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2200      	movs	r2, #0
 8007400:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	2b02      	cmp	r3, #2
 8007406:	d10b      	bne.n	8007420 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007408:	4b46      	ldr	r3, [pc, #280]	; (8007524 <OSPIM_GetConfig+0x16c>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b00      	cmp	r3, #0
 8007412:	d102      	bne.n	800741a <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007414:	4b44      	ldr	r3, [pc, #272]	; (8007528 <OSPIM_GetConfig+0x170>)
 8007416:	613b      	str	r3, [r7, #16]
 8007418:	e002      	b.n	8007420 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800741a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800741e:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007420:	2300      	movs	r3, #0
 8007422:	60fb      	str	r3, [r7, #12]
 8007424:	e074      	b.n	8007510 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8007426:	4a3f      	ldr	r2, [pc, #252]	; (8007524 <OSPIM_GetConfig+0x16c>)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00a      	beq.n	8007452 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	4053      	eors	r3, r2
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d103      	bne.n	8007452 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f003 0310 	and.w	r3, r3, #16
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00a      	beq.n	8007472 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	4053      	eors	r3, r2
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	2b00      	cmp	r3, #0
 8007468:	d103      	bne.n	8007472 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00a      	beq.n	8007492 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	4053      	eors	r3, r2
 8007482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007486:	2b00      	cmp	r3, #0
 8007488:	d103      	bne.n	8007492 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d018      	beq.n	80074ce <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	4053      	eors	r3, r2
 80074a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d111      	bne.n	80074ce <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d106      	bne.n	80074c2 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	3301      	adds	r3, #1
 80074b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	60da      	str	r2, [r3, #12]
 80074c0:	e005      	b.n	80074ce <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	3301      	adds	r3, #1
 80074c6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d018      	beq.n	800750a <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	4053      	eors	r3, r2
 80074de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d111      	bne.n	800750a <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d106      	bne.n	80074fe <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3301      	adds	r3, #1
 80074f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	611a      	str	r2, [r3, #16]
 80074fc:	e005      	b.n	800750a <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	3301      	adds	r3, #1
 8007502:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3301      	adds	r3, #1
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d987      	bls.n	8007426 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8007516:	7dfb      	ldrb	r3, [r7, #23]
}
 8007518:	4618      	mov	r0, r3
 800751a:	371c      	adds	r7, #28
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	420c4000 	.word	0x420c4000
 8007528:	04040222 	.word	0x04040222

0800752c <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689a      	ldr	r2, [r3, #8]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f042 0202 	orr.w	r2, r2, #2
 8007548:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2208      	movs	r2, #8
 800754e:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a15      	ldr	r2, [pc, #84]	; (80075ac <HAL_OSPI_DLYB_SetConfig+0x80>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d109      	bne.n	800756e <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800755a:	4815      	ldr	r0, [pc, #84]	; (80075b0 <HAL_OSPI_DLYB_SetConfig+0x84>)
 800755c:	f7ff f86a 	bl	8006634 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	4813      	ldr	r0, [pc, #76]	; (80075b0 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007564:	f006 f9b6 	bl	800d8d4 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	73fb      	strb	r3, [r7, #15]
 800756c:	e00d      	b.n	800758a <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a10      	ldr	r2, [pc, #64]	; (80075b4 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d108      	bne.n	800758a <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8007578:	480f      	ldr	r0, [pc, #60]	; (80075b8 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800757a:	f7ff f85b 	bl	8006634 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	480d      	ldr	r0, [pc, #52]	; (80075b8 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8007582:	f006 f9a7 	bl	800d8d4 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7ff f95d 	bl	800684a <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689a      	ldr	r2, [r3, #8]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f022 0202 	bic.w	r2, r2, #2
 800759e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	420d1400 	.word	0x420d1400
 80075b0:	420cf000 	.word	0x420cf000
 80075b4:	420d2400 	.word	0x420d2400
 80075b8:	420cf400 	.word	0x420cf400

080075bc <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80075bc:	b480      	push	{r7}
 80075be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80075c0:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80075c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c4:	4a04      	ldr	r2, [pc, #16]	; (80075d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80075c6:	f043 0301 	orr.w	r3, r3, #1
 80075ca:	6293      	str	r3, [r2, #40]	; 0x28
}
 80075cc:	bf00      	nop
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	46020800 	.word	0x46020800

080075dc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80075e4:	4b39      	ldr	r3, [pc, #228]	; (80076cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80075e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075ec:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d10b      	bne.n	800760e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075fc:	d905      	bls.n	800760a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80075fe:	4b33      	ldr	r3, [pc, #204]	; (80076cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	4a32      	ldr	r2, [pc, #200]	; (80076cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007608:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	e057      	b.n	80076be <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007614:	d90a      	bls.n	800762c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8007616:	4b2d      	ldr	r3, [pc, #180]	; (80076cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4313      	orrs	r3, r2
 8007622:	4a2a      	ldr	r2, [pc, #168]	; (80076cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007628:	60d3      	str	r3, [r2, #12]
 800762a:	e007      	b.n	800763c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800762c:	4b27      	ldr	r3, [pc, #156]	; (80076cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007634:	4925      	ldr	r1, [pc, #148]	; (80076cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4313      	orrs	r3, r2
 800763a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800763c:	4b24      	ldr	r3, [pc, #144]	; (80076d0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a24      	ldr	r2, [pc, #144]	; (80076d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007642:	fba2 2303 	umull	r2, r3, r2, r3
 8007646:	099b      	lsrs	r3, r3, #6
 8007648:	2232      	movs	r2, #50	; 0x32
 800764a:	fb02 f303 	mul.w	r3, r2, r3
 800764e:	4a21      	ldr	r2, [pc, #132]	; (80076d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007650:	fba2 2303 	umull	r2, r3, r2, r3
 8007654:	099b      	lsrs	r3, r3, #6
 8007656:	3301      	adds	r3, #1
 8007658:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800765a:	e002      	b.n	8007662 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	3b01      	subs	r3, #1
 8007660:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007662:	4b1a      	ldr	r3, [pc, #104]	; (80076cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d102      	bne.n	8007674 <HAL_PWREx_ControlVoltageScaling+0x98>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1f3      	bne.n	800765c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d01b      	beq.n	80076b2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800767a:	4b15      	ldr	r3, [pc, #84]	; (80076d0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a15      	ldr	r2, [pc, #84]	; (80076d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007680:	fba2 2303 	umull	r2, r3, r2, r3
 8007684:	099b      	lsrs	r3, r3, #6
 8007686:	2232      	movs	r2, #50	; 0x32
 8007688:	fb02 f303 	mul.w	r3, r2, r3
 800768c:	4a11      	ldr	r2, [pc, #68]	; (80076d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800768e:	fba2 2303 	umull	r2, r3, r2, r3
 8007692:	099b      	lsrs	r3, r3, #6
 8007694:	3301      	adds	r3, #1
 8007696:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007698:	e002      	b.n	80076a0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3b01      	subs	r3, #1
 800769e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80076a0:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80076a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d102      	bne.n	80076b2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1f3      	bne.n	800769a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e000      	b.n	80076be <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	46020800 	.word	0x46020800
 80076d0:	20000d00 	.word	0x20000d00
 80076d4:	10624dd3 	.word	0x10624dd3

080076d8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80076d8:	b480      	push	{r7}
 80076da:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80076dc:	4b04      	ldr	r3, [pc, #16]	; (80076f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80076de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	46020800 	.word	0x46020800

080076f4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80076fc:	4b22      	ldr	r3, [pc, #136]	; (8007788 <HAL_PWREx_ConfigSupply+0x94>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a22      	ldr	r2, [pc, #136]	; (800778c <HAL_PWREx_ConfigSupply+0x98>)
 8007702:	fba2 2303 	umull	r2, r3, r2, r3
 8007706:	099b      	lsrs	r3, r3, #6
 8007708:	2232      	movs	r2, #50	; 0x32
 800770a:	fb02 f303 	mul.w	r3, r2, r3
 800770e:	4a1f      	ldr	r2, [pc, #124]	; (800778c <HAL_PWREx_ConfigSupply+0x98>)
 8007710:	fba2 2303 	umull	r2, r3, r2, r3
 8007714:	099b      	lsrs	r3, r3, #6
 8007716:	3301      	adds	r3, #1
 8007718:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d113      	bne.n	8007748 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007720:	4b1b      	ldr	r3, [pc, #108]	; (8007790 <HAL_PWREx_ConfigSupply+0x9c>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	4a1a      	ldr	r2, [pc, #104]	; (8007790 <HAL_PWREx_ConfigSupply+0x9c>)
 8007726:	f023 0302 	bic.w	r3, r3, #2
 800772a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800772c:	e002      	b.n	8007734 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3b01      	subs	r3, #1
 8007732:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007734:	4b16      	ldr	r3, [pc, #88]	; (8007790 <HAL_PWREx_ConfigSupply+0x9c>)
 8007736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b02      	cmp	r3, #2
 800773e:	d116      	bne.n	800776e <HAL_PWREx_ConfigSupply+0x7a>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1f3      	bne.n	800772e <HAL_PWREx_ConfigSupply+0x3a>
 8007746:	e012      	b.n	800776e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007748:	4b11      	ldr	r3, [pc, #68]	; (8007790 <HAL_PWREx_ConfigSupply+0x9c>)
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	4a10      	ldr	r2, [pc, #64]	; (8007790 <HAL_PWREx_ConfigSupply+0x9c>)
 800774e:	f043 0302 	orr.w	r3, r3, #2
 8007752:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007754:	e002      	b.n	800775c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3b01      	subs	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800775c:	4b0c      	ldr	r3, [pc, #48]	; (8007790 <HAL_PWREx_ConfigSupply+0x9c>)
 800775e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d102      	bne.n	800776e <HAL_PWREx_ConfigSupply+0x7a>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1f3      	bne.n	8007756 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e000      	b.n	800777a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	20000d00 	.word	0x20000d00
 800778c:	10624dd3 	.word	0x10624dd3
 8007790:	46020800 	.word	0x46020800

08007794 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8007798:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	4a04      	ldr	r2, [pc, #16]	; (80077b0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800779e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077a2:	6113      	str	r3, [r2, #16]
}
 80077a4:	bf00      	nop
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	46020800 	.word	0x46020800

080077b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08e      	sub	sp, #56	; 0x38
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80077bc:	2300      	movs	r3, #0
 80077be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d102      	bne.n	80077ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	f000 bec8 	b.w	800855e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077ce:	4b99      	ldr	r3, [pc, #612]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f003 030c 	and.w	r3, r3, #12
 80077d6:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077d8:	4b96      	ldr	r3, [pc, #600]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 80077da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077dc:	f003 0303 	and.w	r3, r3, #3
 80077e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0310 	and.w	r3, r3, #16
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 816c 	beq.w	8007ac8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80077f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d007      	beq.n	8007806 <HAL_RCC_OscConfig+0x52>
 80077f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f8:	2b0c      	cmp	r3, #12
 80077fa:	f040 80de 	bne.w	80079ba <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80077fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007800:	2b01      	cmp	r3, #1
 8007802:	f040 80da 	bne.w	80079ba <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d102      	bne.n	8007814 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	f000 bea5 	b.w	800855e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007818:	4b86      	ldr	r3, [pc, #536]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d004      	beq.n	800782e <HAL_RCC_OscConfig+0x7a>
 8007824:	4b83      	ldr	r3, [pc, #524]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800782c:	e005      	b.n	800783a <HAL_RCC_OscConfig+0x86>
 800782e:	4b81      	ldr	r3, [pc, #516]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 8007830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007834:	041b      	lsls	r3, r3, #16
 8007836:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800783a:	4293      	cmp	r3, r2
 800783c:	d255      	bcs.n	80078ea <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800783e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10a      	bne.n	800785a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	4618      	mov	r0, r3
 800784a:	f001 fa3d 	bl	8008cc8 <RCC_SetFlashLatencyFromMSIRange>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	f000 be82 	b.w	800855e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800785a:	4b76      	ldr	r3, [pc, #472]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	4a75      	ldr	r2, [pc, #468]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 8007860:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007864:	6093      	str	r3, [r2, #8]
 8007866:	4b73      	ldr	r3, [pc, #460]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	4970      	ldr	r1, [pc, #448]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 8007874:	4313      	orrs	r3, r2
 8007876:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007880:	d309      	bcc.n	8007896 <HAL_RCC_OscConfig+0xe2>
 8007882:	4b6c      	ldr	r3, [pc, #432]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	f023 021f 	bic.w	r2, r3, #31
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	4969      	ldr	r1, [pc, #420]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 8007890:	4313      	orrs	r3, r2
 8007892:	60cb      	str	r3, [r1, #12]
 8007894:	e07e      	b.n	8007994 <HAL_RCC_OscConfig+0x1e0>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	2b00      	cmp	r3, #0
 800789c:	da0a      	bge.n	80078b4 <HAL_RCC_OscConfig+0x100>
 800789e:	4b65      	ldr	r3, [pc, #404]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	015b      	lsls	r3, r3, #5
 80078ac:	4961      	ldr	r1, [pc, #388]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60cb      	str	r3, [r1, #12]
 80078b2:	e06f      	b.n	8007994 <HAL_RCC_OscConfig+0x1e0>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078bc:	d30a      	bcc.n	80078d4 <HAL_RCC_OscConfig+0x120>
 80078be:	4b5d      	ldr	r3, [pc, #372]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	029b      	lsls	r3, r3, #10
 80078cc:	4959      	ldr	r1, [pc, #356]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	60cb      	str	r3, [r1, #12]
 80078d2:	e05f      	b.n	8007994 <HAL_RCC_OscConfig+0x1e0>
 80078d4:	4b57      	ldr	r3, [pc, #348]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a1b      	ldr	r3, [r3, #32]
 80078e0:	03db      	lsls	r3, r3, #15
 80078e2:	4954      	ldr	r1, [pc, #336]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	60cb      	str	r3, [r1, #12]
 80078e8:	e054      	b.n	8007994 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80078ea:	4b52      	ldr	r3, [pc, #328]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	4a51      	ldr	r2, [pc, #324]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 80078f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078f4:	6093      	str	r3, [r2, #8]
 80078f6:	4b4f      	ldr	r3, [pc, #316]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007902:	494c      	ldr	r1, [pc, #304]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 8007904:	4313      	orrs	r3, r2
 8007906:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007910:	d309      	bcc.n	8007926 <HAL_RCC_OscConfig+0x172>
 8007912:	4b48      	ldr	r3, [pc, #288]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f023 021f 	bic.w	r2, r3, #31
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	4945      	ldr	r1, [pc, #276]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 8007920:	4313      	orrs	r3, r2
 8007922:	60cb      	str	r3, [r1, #12]
 8007924:	e028      	b.n	8007978 <HAL_RCC_OscConfig+0x1c4>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792a:	2b00      	cmp	r3, #0
 800792c:	da0a      	bge.n	8007944 <HAL_RCC_OscConfig+0x190>
 800792e:	4b41      	ldr	r3, [pc, #260]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	015b      	lsls	r3, r3, #5
 800793c:	493d      	ldr	r1, [pc, #244]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 800793e:	4313      	orrs	r3, r2
 8007940:	60cb      	str	r3, [r1, #12]
 8007942:	e019      	b.n	8007978 <HAL_RCC_OscConfig+0x1c4>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800794c:	d30a      	bcc.n	8007964 <HAL_RCC_OscConfig+0x1b0>
 800794e:	4b39      	ldr	r3, [pc, #228]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	029b      	lsls	r3, r3, #10
 800795c:	4935      	ldr	r1, [pc, #212]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 800795e:	4313      	orrs	r3, r2
 8007960:	60cb      	str	r3, [r1, #12]
 8007962:	e009      	b.n	8007978 <HAL_RCC_OscConfig+0x1c4>
 8007964:	4b33      	ldr	r3, [pc, #204]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	03db      	lsls	r3, r3, #15
 8007972:	4930      	ldr	r1, [pc, #192]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 8007974:	4313      	orrs	r3, r2
 8007976:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10a      	bne.n	8007994 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007982:	4618      	mov	r0, r3
 8007984:	f001 f9a0 	bl	8008cc8 <RCC_SetFlashLatencyFromMSIRange>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	f000 bde5 	b.w	800855e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8007994:	f001 f8de 	bl	8008b54 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007998:	4b27      	ldr	r3, [pc, #156]	; (8007a38 <HAL_RCC_OscConfig+0x284>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4618      	mov	r0, r3
 800799e:	f7fb f9fb 	bl	8002d98 <HAL_InitTick>
 80079a2:	4603      	mov	r3, r0
 80079a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80079a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 808a 	beq.w	8007ac6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80079b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079b6:	f000 bdd2 	b.w	800855e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d066      	beq.n	8007a90 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80079c2:	4b1c      	ldr	r3, [pc, #112]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a1b      	ldr	r2, [pc, #108]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 80079c8:	f043 0301 	orr.w	r3, r3, #1
 80079cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80079ce:	f7fb fb6b 	bl	80030a8 <HAL_GetTick>
 80079d2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80079d4:	e009      	b.n	80079ea <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80079d6:	f7fb fb67 	bl	80030a8 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d902      	bls.n	80079ea <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	f000 bdba 	b.w	800855e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80079ea:	4b12      	ldr	r3, [pc, #72]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0304 	and.w	r3, r3, #4
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d0ef      	beq.n	80079d6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80079f6:	4b0f      	ldr	r3, [pc, #60]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	4a0e      	ldr	r2, [pc, #56]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 80079fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a00:	6093      	str	r3, [r2, #8]
 8007a02:	4b0c      	ldr	r3, [pc, #48]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	4909      	ldr	r1, [pc, #36]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 8007a10:	4313      	orrs	r3, r2
 8007a12:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007a1c:	d30e      	bcc.n	8007a3c <HAL_RCC_OscConfig+0x288>
 8007a1e:	4b05      	ldr	r3, [pc, #20]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	f023 021f 	bic.w	r2, r3, #31
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	4902      	ldr	r1, [pc, #8]	; (8007a34 <HAL_RCC_OscConfig+0x280>)
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60cb      	str	r3, [r1, #12]
 8007a30:	e04a      	b.n	8007ac8 <HAL_RCC_OscConfig+0x314>
 8007a32:	bf00      	nop
 8007a34:	46020c00 	.word	0x46020c00
 8007a38:	20000d04 	.word	0x20000d04
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	da0a      	bge.n	8007a5a <HAL_RCC_OscConfig+0x2a6>
 8007a44:	4b98      	ldr	r3, [pc, #608]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	015b      	lsls	r3, r3, #5
 8007a52:	4995      	ldr	r1, [pc, #596]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007a54:	4313      	orrs	r3, r2
 8007a56:	60cb      	str	r3, [r1, #12]
 8007a58:	e036      	b.n	8007ac8 <HAL_RCC_OscConfig+0x314>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a62:	d30a      	bcc.n	8007a7a <HAL_RCC_OscConfig+0x2c6>
 8007a64:	4b90      	ldr	r3, [pc, #576]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
 8007a70:	029b      	lsls	r3, r3, #10
 8007a72:	498d      	ldr	r1, [pc, #564]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	60cb      	str	r3, [r1, #12]
 8007a78:	e026      	b.n	8007ac8 <HAL_RCC_OscConfig+0x314>
 8007a7a:	4b8b      	ldr	r3, [pc, #556]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	03db      	lsls	r3, r3, #15
 8007a88:	4987      	ldr	r1, [pc, #540]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	60cb      	str	r3, [r1, #12]
 8007a8e:	e01b      	b.n	8007ac8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8007a90:	4b85      	ldr	r3, [pc, #532]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a84      	ldr	r2, [pc, #528]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007a96:	f023 0301 	bic.w	r3, r3, #1
 8007a9a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007a9c:	f7fb fb04 	bl	80030a8 <HAL_GetTick>
 8007aa0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007aa2:	e009      	b.n	8007ab8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007aa4:	f7fb fb00 	bl	80030a8 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d902      	bls.n	8007ab8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	f000 bd53 	b.w	800855e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007ab8:	4b7b      	ldr	r3, [pc, #492]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0304 	and.w	r3, r3, #4
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1ef      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x2f0>
 8007ac4:	e000      	b.n	8007ac8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007ac6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 808b 	beq.w	8007bec <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	2b08      	cmp	r3, #8
 8007ada:	d005      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x334>
 8007adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ade:	2b0c      	cmp	r3, #12
 8007ae0:	d109      	bne.n	8007af6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d106      	bne.n	8007af6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d17d      	bne.n	8007bec <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	f000 bd34 	b.w	800855e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007afe:	d106      	bne.n	8007b0e <HAL_RCC_OscConfig+0x35a>
 8007b00:	4b69      	ldr	r3, [pc, #420]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a68      	ldr	r2, [pc, #416]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	e041      	b.n	8007b92 <HAL_RCC_OscConfig+0x3de>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b16:	d112      	bne.n	8007b3e <HAL_RCC_OscConfig+0x38a>
 8007b18:	4b63      	ldr	r3, [pc, #396]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a62      	ldr	r2, [pc, #392]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	4b60      	ldr	r3, [pc, #384]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a5f      	ldr	r2, [pc, #380]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	4b5d      	ldr	r3, [pc, #372]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a5c      	ldr	r2, [pc, #368]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	e029      	b.n	8007b92 <HAL_RCC_OscConfig+0x3de>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8007b46:	d112      	bne.n	8007b6e <HAL_RCC_OscConfig+0x3ba>
 8007b48:	4b57      	ldr	r3, [pc, #348]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a56      	ldr	r2, [pc, #344]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b52:	6013      	str	r3, [r2, #0]
 8007b54:	4b54      	ldr	r3, [pc, #336]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a53      	ldr	r2, [pc, #332]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	4b51      	ldr	r3, [pc, #324]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a50      	ldr	r2, [pc, #320]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b6a:	6013      	str	r3, [r2, #0]
 8007b6c:	e011      	b.n	8007b92 <HAL_RCC_OscConfig+0x3de>
 8007b6e:	4b4e      	ldr	r3, [pc, #312]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a4d      	ldr	r2, [pc, #308]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	4b4b      	ldr	r3, [pc, #300]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a4a      	ldr	r2, [pc, #296]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	4b48      	ldr	r3, [pc, #288]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a47      	ldr	r2, [pc, #284]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007b8c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d014      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8007b9a:	f7fb fa85 	bl	80030a8 <HAL_GetTick>
 8007b9e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ba0:	e009      	b.n	8007bb6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ba2:	f7fb fa81 	bl	80030a8 <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	2b64      	cmp	r3, #100	; 0x64
 8007bae:	d902      	bls.n	8007bb6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	f000 bcd4 	b.w	800855e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007bb6:	4b3c      	ldr	r3, [pc, #240]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0ef      	beq.n	8007ba2 <HAL_RCC_OscConfig+0x3ee>
 8007bc2:	e013      	b.n	8007bec <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8007bc4:	f7fb fa70 	bl	80030a8 <HAL_GetTick>
 8007bc8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007bca:	e009      	b.n	8007be0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bcc:	f7fb fa6c 	bl	80030a8 <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b64      	cmp	r3, #100	; 0x64
 8007bd8:	d902      	bls.n	8007be0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	f000 bcbf 	b.w	800855e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007be0:	4b31      	ldr	r3, [pc, #196]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1ef      	bne.n	8007bcc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0302 	and.w	r3, r3, #2
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d05f      	beq.n	8007cb8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	2b04      	cmp	r3, #4
 8007bfc:	d005      	beq.n	8007c0a <HAL_RCC_OscConfig+0x456>
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c00:	2b0c      	cmp	r3, #12
 8007c02:	d114      	bne.n	8007c2e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d111      	bne.n	8007c2e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d102      	bne.n	8007c18 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	f000 bca3 	b.w	800855e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007c18:	4b23      	ldr	r3, [pc, #140]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	041b      	lsls	r3, r3, #16
 8007c26:	4920      	ldr	r1, [pc, #128]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007c2c:	e044      	b.n	8007cb8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d024      	beq.n	8007c80 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8007c36:	4b1c      	ldr	r3, [pc, #112]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a1b      	ldr	r2, [pc, #108]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c40:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007c42:	f7fb fa31 	bl	80030a8 <HAL_GetTick>
 8007c46:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c48:	e009      	b.n	8007c5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c4a:	f7fb fa2d 	bl	80030a8 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d902      	bls.n	8007c5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	f000 bc80 	b.w	800855e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c5e:	4b12      	ldr	r3, [pc, #72]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d0ef      	beq.n	8007c4a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007c6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	041b      	lsls	r3, r3, #16
 8007c78:	490b      	ldr	r1, [pc, #44]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	610b      	str	r3, [r1, #16]
 8007c7e:	e01b      	b.n	8007cb8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8007c80:	4b09      	ldr	r3, [pc, #36]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a08      	ldr	r2, [pc, #32]	; (8007ca8 <HAL_RCC_OscConfig+0x4f4>)
 8007c86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c8a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007c8c:	f7fb fa0c 	bl	80030a8 <HAL_GetTick>
 8007c90:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c92:	e00b      	b.n	8007cac <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c94:	f7fb fa08 	bl	80030a8 <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d904      	bls.n	8007cac <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	f000 bc5b 	b.w	800855e <HAL_RCC_OscConfig+0xdaa>
 8007ca8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007cac:	4baf      	ldr	r3, [pc, #700]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1ed      	bne.n	8007c94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0308 	and.w	r3, r3, #8
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 80c8 	beq.w	8007e56 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ccc:	4ba7      	ldr	r3, [pc, #668]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cd2:	f003 0304 	and.w	r3, r3, #4
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d111      	bne.n	8007cfe <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cda:	4ba4      	ldr	r3, [pc, #656]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ce0:	4aa2      	ldr	r2, [pc, #648]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007ce2:	f043 0304 	orr.w	r3, r3, #4
 8007ce6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007cea:	4ba0      	ldr	r3, [pc, #640]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cf0:	f003 0304 	and.w	r3, r3, #4
 8007cf4:	617b      	str	r3, [r7, #20]
 8007cf6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007cfe:	4b9c      	ldr	r3, [pc, #624]	; (8007f70 <HAL_RCC_OscConfig+0x7bc>)
 8007d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d119      	bne.n	8007d3e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007d0a:	4b99      	ldr	r3, [pc, #612]	; (8007f70 <HAL_RCC_OscConfig+0x7bc>)
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0e:	4a98      	ldr	r2, [pc, #608]	; (8007f70 <HAL_RCC_OscConfig+0x7bc>)
 8007d10:	f043 0301 	orr.w	r3, r3, #1
 8007d14:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d16:	f7fb f9c7 	bl	80030a8 <HAL_GetTick>
 8007d1a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007d1c:	e009      	b.n	8007d32 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d1e:	f7fb f9c3 	bl	80030a8 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d902      	bls.n	8007d32 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	f000 bc16 	b.w	800855e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007d32:	4b8f      	ldr	r3, [pc, #572]	; (8007f70 <HAL_RCC_OscConfig+0x7bc>)
 8007d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0ef      	beq.n	8007d1e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d05f      	beq.n	8007e06 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8007d46:	4b89      	ldr	r3, [pc, #548]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d4c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	699a      	ldr	r2, [r3, #24]
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d037      	beq.n	8007dcc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d006      	beq.n	8007d74 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e3f4      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01b      	beq.n	8007db6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8007d7e:	4b7b      	ldr	r3, [pc, #492]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d84:	4a79      	ldr	r2, [pc, #484]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007d86:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8007d8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8007d8e:	f7fb f98b 	bl	80030a8 <HAL_GetTick>
 8007d92:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007d94:	e008      	b.n	8007da8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d96:	f7fb f987 	bl	80030a8 <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	2b05      	cmp	r3, #5
 8007da2:	d901      	bls.n	8007da8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e3da      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007da8:	4b70      	ldr	r3, [pc, #448]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1ef      	bne.n	8007d96 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8007db6:	4b6d      	ldr	r3, [pc, #436]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dbc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	4969      	ldr	r1, [pc, #420]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8007dcc:	4b67      	ldr	r3, [pc, #412]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007dce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dd2:	4a66      	ldr	r2, [pc, #408]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007dd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007dd8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8007ddc:	f7fb f964 	bl	80030a8 <HAL_GetTick>
 8007de0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007de2:	e008      	b.n	8007df6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007de4:	f7fb f960 	bl	80030a8 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	2b05      	cmp	r3, #5
 8007df0:	d901      	bls.n	8007df6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e3b3      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007df6:	4b5d      	ldr	r3, [pc, #372]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007df8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d0ef      	beq.n	8007de4 <HAL_RCC_OscConfig+0x630>
 8007e04:	e01b      	b.n	8007e3e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8007e06:	4b59      	ldr	r3, [pc, #356]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e0c:	4a57      	ldr	r2, [pc, #348]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007e0e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8007e12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8007e16:	f7fb f947 	bl	80030a8 <HAL_GetTick>
 8007e1a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007e1c:	e008      	b.n	8007e30 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e1e:	f7fb f943 	bl	80030a8 <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	2b05      	cmp	r3, #5
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e396      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007e30:	4b4e      	ldr	r3, [pc, #312]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007e32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1ef      	bne.n	8007e1e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e3e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d107      	bne.n	8007e56 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e46:	4b49      	ldr	r3, [pc, #292]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e4c:	4a47      	ldr	r2, [pc, #284]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007e4e:	f023 0304 	bic.w	r3, r3, #4
 8007e52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0304 	and.w	r3, r3, #4
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 8111 	beq.w	8008086 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8007e64:	2300      	movs	r3, #0
 8007e66:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e6a:	4b40      	ldr	r3, [pc, #256]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e70:	f003 0304 	and.w	r3, r3, #4
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d111      	bne.n	8007e9c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e78:	4b3c      	ldr	r3, [pc, #240]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e7e:	4a3b      	ldr	r2, [pc, #236]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007e80:	f043 0304 	orr.w	r3, r3, #4
 8007e84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007e88:	4b38      	ldr	r3, [pc, #224]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e8e:	f003 0304 	and.w	r3, r3, #4
 8007e92:	613b      	str	r3, [r7, #16]
 8007e94:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8007e96:	2301      	movs	r3, #1
 8007e98:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007e9c:	4b34      	ldr	r3, [pc, #208]	; (8007f70 <HAL_RCC_OscConfig+0x7bc>)
 8007e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d118      	bne.n	8007eda <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007ea8:	4b31      	ldr	r3, [pc, #196]	; (8007f70 <HAL_RCC_OscConfig+0x7bc>)
 8007eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eac:	4a30      	ldr	r2, [pc, #192]	; (8007f70 <HAL_RCC_OscConfig+0x7bc>)
 8007eae:	f043 0301 	orr.w	r3, r3, #1
 8007eb2:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007eb4:	f7fb f8f8 	bl	80030a8 <HAL_GetTick>
 8007eb8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007eba:	e008      	b.n	8007ece <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ebc:	f7fb f8f4 	bl	80030a8 <HAL_GetTick>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d901      	bls.n	8007ece <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e347      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007ece:	4b28      	ldr	r3, [pc, #160]	; (8007f70 <HAL_RCC_OscConfig+0x7bc>)
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0f0      	beq.n	8007ebc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d01f      	beq.n	8007f26 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f003 0304 	and.w	r3, r3, #4
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d010      	beq.n	8007f14 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007ef2:	4b1e      	ldr	r3, [pc, #120]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007ef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ef8:	4a1c      	ldr	r2, [pc, #112]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007efa:	f043 0304 	orr.w	r3, r3, #4
 8007efe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007f02:	4b1a      	ldr	r3, [pc, #104]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f08:	4a18      	ldr	r2, [pc, #96]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007f0a:	f043 0301 	orr.w	r3, r3, #1
 8007f0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007f12:	e018      	b.n	8007f46 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007f14:	4b15      	ldr	r3, [pc, #84]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f1a:	4a14      	ldr	r2, [pc, #80]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007f1c:	f043 0301 	orr.w	r3, r3, #1
 8007f20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007f24:	e00f      	b.n	8007f46 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007f26:	4b11      	ldr	r3, [pc, #68]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f2c:	4a0f      	ldr	r2, [pc, #60]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007f2e:	f023 0301 	bic.w	r3, r3, #1
 8007f32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007f36:	4b0d      	ldr	r3, [pc, #52]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f3c:	4a0b      	ldr	r2, [pc, #44]	; (8007f6c <HAL_RCC_OscConfig+0x7b8>)
 8007f3e:	f023 0304 	bic.w	r3, r3, #4
 8007f42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d057      	beq.n	8007ffe <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8007f4e:	f7fb f8ab 	bl	80030a8 <HAL_GetTick>
 8007f52:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f54:	e00e      	b.n	8007f74 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f56:	f7fb f8a7 	bl	80030a8 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d905      	bls.n	8007f74 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e2f8      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
 8007f6c:	46020c00 	.word	0x46020c00
 8007f70:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f74:	4b9c      	ldr	r3, [pc, #624]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 8007f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0e9      	beq.n	8007f56 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d01b      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007f8e:	4b96      	ldr	r3, [pc, #600]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 8007f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f94:	4a94      	ldr	r2, [pc, #592]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 8007f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007f9e:	e00a      	b.n	8007fb6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fa0:	f7fb f882 	bl	80030a8 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d901      	bls.n	8007fb6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e2d3      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007fb6:	4b8c      	ldr	r3, [pc, #560]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 8007fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0ed      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x7ec>
 8007fc4:	e053      	b.n	800806e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007fc6:	4b88      	ldr	r3, [pc, #544]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 8007fc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fcc:	4a86      	ldr	r2, [pc, #536]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 8007fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007fd6:	e00a      	b.n	8007fee <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fd8:	f7fb f866 	bl	80030a8 <HAL_GetTick>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d901      	bls.n	8007fee <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e2b7      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007fee:	4b7e      	ldr	r3, [pc, #504]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 8007ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1ed      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x824>
 8007ffc:	e037      	b.n	800806e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8007ffe:	f7fb f853 	bl	80030a8 <HAL_GetTick>
 8008002:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008004:	e00a      	b.n	800801c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008006:	f7fb f84f 	bl	80030a8 <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	f241 3288 	movw	r2, #5000	; 0x1388
 8008014:	4293      	cmp	r3, r2
 8008016:	d901      	bls.n	800801c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e2a0      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800801c:	4b72      	ldr	r3, [pc, #456]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 800801e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008022:	f003 0302 	and.w	r3, r3, #2
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1ed      	bne.n	8008006 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800802a:	4b6f      	ldr	r3, [pc, #444]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 800802c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008034:	2b00      	cmp	r3, #0
 8008036:	d01a      	beq.n	800806e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008038:	4b6b      	ldr	r3, [pc, #428]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 800803a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800803e:	4a6a      	ldr	r2, [pc, #424]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 8008040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008044:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008048:	e00a      	b.n	8008060 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800804a:	f7fb f82d 	bl	80030a8 <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	f241 3288 	movw	r2, #5000	; 0x1388
 8008058:	4293      	cmp	r3, r2
 800805a:	d901      	bls.n	8008060 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e27e      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008060:	4b61      	ldr	r3, [pc, #388]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 8008062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1ed      	bne.n	800804a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800806e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008072:	2b01      	cmp	r3, #1
 8008074:	d107      	bne.n	8008086 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008076:	4b5c      	ldr	r3, [pc, #368]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 8008078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800807c:	4a5a      	ldr	r2, [pc, #360]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 800807e:	f023 0304 	bic.w	r3, r3, #4
 8008082:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0320 	and.w	r3, r3, #32
 800808e:	2b00      	cmp	r3, #0
 8008090:	d036      	beq.n	8008100 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008096:	2b00      	cmp	r3, #0
 8008098:	d019      	beq.n	80080ce <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800809a:	4b53      	ldr	r3, [pc, #332]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a52      	ldr	r2, [pc, #328]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 80080a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080a4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80080a6:	f7fa ffff 	bl	80030a8 <HAL_GetTick>
 80080aa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80080ac:	e008      	b.n	80080c0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080ae:	f7fa fffb 	bl	80030a8 <HAL_GetTick>
 80080b2:	4602      	mov	r2, r0
 80080b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d901      	bls.n	80080c0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e24e      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80080c0:	4b49      	ldr	r3, [pc, #292]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d0f0      	beq.n	80080ae <HAL_RCC_OscConfig+0x8fa>
 80080cc:	e018      	b.n	8008100 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80080ce:	4b46      	ldr	r3, [pc, #280]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a45      	ldr	r2, [pc, #276]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 80080d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080d8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80080da:	f7fa ffe5 	bl	80030a8 <HAL_GetTick>
 80080de:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80080e0:	e008      	b.n	80080f4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080e2:	f7fa ffe1 	bl	80030a8 <HAL_GetTick>
 80080e6:	4602      	mov	r2, r0
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d901      	bls.n	80080f4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e234      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80080f4:	4b3c      	ldr	r3, [pc, #240]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1f0      	bne.n	80080e2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008108:	2b00      	cmp	r3, #0
 800810a:	d036      	beq.n	800817a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008110:	2b00      	cmp	r3, #0
 8008112:	d019      	beq.n	8008148 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8008114:	4b34      	ldr	r3, [pc, #208]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a33      	ldr	r2, [pc, #204]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 800811a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800811e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008120:	f7fa ffc2 	bl	80030a8 <HAL_GetTick>
 8008124:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008126:	e008      	b.n	800813a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008128:	f7fa ffbe 	bl	80030a8 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b02      	cmp	r3, #2
 8008134:	d901      	bls.n	800813a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e211      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800813a:	4b2b      	ldr	r3, [pc, #172]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d0f0      	beq.n	8008128 <HAL_RCC_OscConfig+0x974>
 8008146:	e018      	b.n	800817a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8008148:	4b27      	ldr	r3, [pc, #156]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a26      	ldr	r2, [pc, #152]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 800814e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008152:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008154:	f7fa ffa8 	bl	80030a8 <HAL_GetTick>
 8008158:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800815a:	e008      	b.n	800816e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800815c:	f7fa ffa4 	bl	80030a8 <HAL_GetTick>
 8008160:	4602      	mov	r2, r0
 8008162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	2b02      	cmp	r3, #2
 8008168:	d901      	bls.n	800816e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e1f7      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800816e:	4b1e      	ldr	r3, [pc, #120]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1f0      	bne.n	800815c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008182:	2b00      	cmp	r3, #0
 8008184:	d07f      	beq.n	8008286 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818a:	2b00      	cmp	r3, #0
 800818c:	d062      	beq.n	8008254 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800818e:	4b16      	ldr	r3, [pc, #88]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	4a15      	ldr	r2, [pc, #84]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 8008194:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008198:	6093      	str	r3, [r2, #8]
 800819a:	4b13      	ldr	r3, [pc, #76]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a6:	4910      	ldr	r1, [pc, #64]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80081b4:	d309      	bcc.n	80081ca <HAL_RCC_OscConfig+0xa16>
 80081b6:	4b0c      	ldr	r3, [pc, #48]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	f023 021f 	bic.w	r2, r3, #31
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	4909      	ldr	r1, [pc, #36]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60cb      	str	r3, [r1, #12]
 80081c8:	e02a      	b.n	8008220 <HAL_RCC_OscConfig+0xa6c>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	da0c      	bge.n	80081ec <HAL_RCC_OscConfig+0xa38>
 80081d2:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	015b      	lsls	r3, r3, #5
 80081e0:	4901      	ldr	r1, [pc, #4]	; (80081e8 <HAL_RCC_OscConfig+0xa34>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60cb      	str	r3, [r1, #12]
 80081e6:	e01b      	b.n	8008220 <HAL_RCC_OscConfig+0xa6c>
 80081e8:	46020c00 	.word	0x46020c00
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f4:	d30a      	bcc.n	800820c <HAL_RCC_OscConfig+0xa58>
 80081f6:	4ba1      	ldr	r3, [pc, #644]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	029b      	lsls	r3, r3, #10
 8008204:	499d      	ldr	r1, [pc, #628]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 8008206:	4313      	orrs	r3, r2
 8008208:	60cb      	str	r3, [r1, #12]
 800820a:	e009      	b.n	8008220 <HAL_RCC_OscConfig+0xa6c>
 800820c:	4b9b      	ldr	r3, [pc, #620]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a1b      	ldr	r3, [r3, #32]
 8008218:	03db      	lsls	r3, r3, #15
 800821a:	4998      	ldr	r1, [pc, #608]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 800821c:	4313      	orrs	r3, r2
 800821e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8008220:	4b96      	ldr	r3, [pc, #600]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a95      	ldr	r2, [pc, #596]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 8008226:	f043 0310 	orr.w	r3, r3, #16
 800822a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800822c:	f7fa ff3c 	bl	80030a8 <HAL_GetTick>
 8008230:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008232:	e008      	b.n	8008246 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008234:	f7fa ff38 	bl	80030a8 <HAL_GetTick>
 8008238:	4602      	mov	r2, r0
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	2b02      	cmp	r3, #2
 8008240:	d901      	bls.n	8008246 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e18b      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008246:	4b8d      	ldr	r3, [pc, #564]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0320 	and.w	r3, r3, #32
 800824e:	2b00      	cmp	r3, #0
 8008250:	d0f0      	beq.n	8008234 <HAL_RCC_OscConfig+0xa80>
 8008252:	e018      	b.n	8008286 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8008254:	4b89      	ldr	r3, [pc, #548]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a88      	ldr	r2, [pc, #544]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 800825a:	f023 0310 	bic.w	r3, r3, #16
 800825e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008260:	f7fa ff22 	bl	80030a8 <HAL_GetTick>
 8008264:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008266:	e008      	b.n	800827a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008268:	f7fa ff1e 	bl	80030a8 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	2b02      	cmp	r3, #2
 8008274:	d901      	bls.n	800827a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e171      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800827a:	4b80      	ldr	r3, [pc, #512]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0320 	and.w	r3, r3, #32
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1f0      	bne.n	8008268 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 8166 	beq.w	800855c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008290:	2300      	movs	r3, #0
 8008292:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008296:	4b79      	ldr	r3, [pc, #484]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	f003 030c 	and.w	r3, r3, #12
 800829e:	2b0c      	cmp	r3, #12
 80082a0:	f000 80f2 	beq.w	8008488 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	f040 80c5 	bne.w	8008438 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80082ae:	4b73      	ldr	r3, [pc, #460]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a72      	ldr	r2, [pc, #456]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 80082b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082b8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80082ba:	f7fa fef5 	bl	80030a8 <HAL_GetTick>
 80082be:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80082c0:	e008      	b.n	80082d4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082c2:	f7fa fef1 	bl	80030a8 <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d901      	bls.n	80082d4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e144      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80082d4:	4b69      	ldr	r3, [pc, #420]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1f0      	bne.n	80082c2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082e0:	4b66      	ldr	r3, [pc, #408]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 80082e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082e6:	f003 0304 	and.w	r3, r3, #4
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d111      	bne.n	8008312 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80082ee:	4b63      	ldr	r3, [pc, #396]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 80082f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082f4:	4a61      	ldr	r2, [pc, #388]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 80082f6:	f043 0304 	orr.w	r3, r3, #4
 80082fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80082fe:	4b5f      	ldr	r3, [pc, #380]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 8008300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008304:	f003 0304 	and.w	r3, r3, #4
 8008308:	60fb      	str	r3, [r7, #12]
 800830a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800830c:	2301      	movs	r3, #1
 800830e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8008312:	4b5b      	ldr	r3, [pc, #364]	; (8008480 <HAL_RCC_OscConfig+0xccc>)
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800831a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800831e:	d102      	bne.n	8008326 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8008320:	2301      	movs	r3, #1
 8008322:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008326:	4b56      	ldr	r3, [pc, #344]	; (8008480 <HAL_RCC_OscConfig+0xccc>)
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	4a55      	ldr	r2, [pc, #340]	; (8008480 <HAL_RCC_OscConfig+0xccc>)
 800832c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008330:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8008332:	4b52      	ldr	r3, [pc, #328]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 8008334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800833a:	f023 0303 	bic.w	r3, r3, #3
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008346:	3a01      	subs	r2, #1
 8008348:	0212      	lsls	r2, r2, #8
 800834a:	4311      	orrs	r1, r2
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008350:	430a      	orrs	r2, r1
 8008352:	494a      	ldr	r1, [pc, #296]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 8008354:	4313      	orrs	r3, r2
 8008356:	628b      	str	r3, [r1, #40]	; 0x28
 8008358:	4b48      	ldr	r3, [pc, #288]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 800835a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800835c:	4b49      	ldr	r3, [pc, #292]	; (8008484 <HAL_RCC_OscConfig+0xcd0>)
 800835e:	4013      	ands	r3, r2
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008364:	3a01      	subs	r2, #1
 8008366:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800836e:	3a01      	subs	r2, #1
 8008370:	0252      	lsls	r2, r2, #9
 8008372:	b292      	uxth	r2, r2
 8008374:	4311      	orrs	r1, r2
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800837a:	3a01      	subs	r2, #1
 800837c:	0412      	lsls	r2, r2, #16
 800837e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008382:	4311      	orrs	r1, r2
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008388:	3a01      	subs	r2, #1
 800838a:	0612      	lsls	r2, r2, #24
 800838c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008390:	430a      	orrs	r2, r1
 8008392:	493a      	ldr	r1, [pc, #232]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 8008394:	4313      	orrs	r3, r2
 8008396:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008398:	4b38      	ldr	r3, [pc, #224]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 800839a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839c:	4a37      	ldr	r2, [pc, #220]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 800839e:	f023 0310 	bic.w	r3, r3, #16
 80083a2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083a8:	4a34      	ldr	r2, [pc, #208]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 80083aa:	00db      	lsls	r3, r3, #3
 80083ac:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80083ae:	4b33      	ldr	r3, [pc, #204]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 80083b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b2:	4a32      	ldr	r2, [pc, #200]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 80083b4:	f043 0310 	orr.w	r3, r3, #16
 80083b8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80083ba:	4b30      	ldr	r3, [pc, #192]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 80083bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083be:	f023 020c 	bic.w	r2, r3, #12
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c6:	492d      	ldr	r1, [pc, #180]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80083cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d105      	bne.n	80083e0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80083d4:	4b2a      	ldr	r3, [pc, #168]	; (8008480 <HAL_RCC_OscConfig+0xccc>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	4a29      	ldr	r2, [pc, #164]	; (8008480 <HAL_RCC_OscConfig+0xccc>)
 80083da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083de:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80083e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d107      	bne.n	80083f8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80083e8:	4b24      	ldr	r3, [pc, #144]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 80083ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083ee:	4a23      	ldr	r2, [pc, #140]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 80083f0:	f023 0304 	bic.w	r3, r3, #4
 80083f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80083f8:	4b20      	ldr	r3, [pc, #128]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 80083fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fc:	4a1f      	ldr	r2, [pc, #124]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 80083fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008402:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8008404:	4b1d      	ldr	r3, [pc, #116]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a1c      	ldr	r2, [pc, #112]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 800840a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800840e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008410:	f7fa fe4a 	bl	80030a8 <HAL_GetTick>
 8008414:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008416:	e008      	b.n	800842a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008418:	f7fa fe46 	bl	80030a8 <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	2b02      	cmp	r3, #2
 8008424:	d901      	bls.n	800842a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	e099      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800842a:	4b14      	ldr	r3, [pc, #80]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d0f0      	beq.n	8008418 <HAL_RCC_OscConfig+0xc64>
 8008436:	e091      	b.n	800855c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008438:	4b10      	ldr	r3, [pc, #64]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a0f      	ldr	r2, [pc, #60]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 800843e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008442:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008444:	f7fa fe30 	bl	80030a8 <HAL_GetTick>
 8008448:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800844a:	e008      	b.n	800845e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800844c:	f7fa fe2c 	bl	80030a8 <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	2b02      	cmp	r3, #2
 8008458:	d901      	bls.n	800845e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e07f      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800845e:	4b07      	ldr	r3, [pc, #28]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1f0      	bne.n	800844c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800846a:	4b04      	ldr	r3, [pc, #16]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 800846c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846e:	4a03      	ldr	r2, [pc, #12]	; (800847c <HAL_RCC_OscConfig+0xcc8>)
 8008470:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008474:	f023 0303 	bic.w	r3, r3, #3
 8008478:	6293      	str	r3, [r2, #40]	; 0x28
 800847a:	e06f      	b.n	800855c <HAL_RCC_OscConfig+0xda8>
 800847c:	46020c00 	.word	0x46020c00
 8008480:	46020800 	.word	0x46020800
 8008484:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008488:	4b37      	ldr	r3, [pc, #220]	; (8008568 <HAL_RCC_OscConfig+0xdb4>)
 800848a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800848e:	4b36      	ldr	r3, [pc, #216]	; (8008568 <HAL_RCC_OscConfig+0xdb4>)
 8008490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008492:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008498:	2b01      	cmp	r3, #1
 800849a:	d039      	beq.n	8008510 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	f003 0203 	and.w	r2, r3, #3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d132      	bne.n	8008510 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	0a1b      	lsrs	r3, r3, #8
 80084ae:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d129      	bne.n	8008510 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d122      	bne.n	8008510 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084d4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d11a      	bne.n	8008510 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	0a5b      	lsrs	r3, r3, #9
 80084de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d111      	bne.n	8008510 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	0c1b      	lsrs	r3, r3, #16
 80084f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d108      	bne.n	8008510 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	0e1b      	lsrs	r3, r3, #24
 8008502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800850a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800850c:	429a      	cmp	r2, r3
 800850e:	d001      	beq.n	8008514 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e024      	b.n	800855e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008514:	4b14      	ldr	r3, [pc, #80]	; (8008568 <HAL_RCC_OscConfig+0xdb4>)
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	08db      	lsrs	r3, r3, #3
 800851a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008522:	429a      	cmp	r2, r3
 8008524:	d01a      	beq.n	800855c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008526:	4b10      	ldr	r3, [pc, #64]	; (8008568 <HAL_RCC_OscConfig+0xdb4>)
 8008528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852a:	4a0f      	ldr	r2, [pc, #60]	; (8008568 <HAL_RCC_OscConfig+0xdb4>)
 800852c:	f023 0310 	bic.w	r3, r3, #16
 8008530:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008532:	f7fa fdb9 	bl	80030a8 <HAL_GetTick>
 8008536:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8008538:	bf00      	nop
 800853a:	f7fa fdb5 	bl	80030a8 <HAL_GetTick>
 800853e:	4602      	mov	r2, r0
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	4293      	cmp	r3, r2
 8008544:	d0f9      	beq.n	800853a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800854a:	4a07      	ldr	r2, [pc, #28]	; (8008568 <HAL_RCC_OscConfig+0xdb4>)
 800854c:	00db      	lsls	r3, r3, #3
 800854e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008550:	4b05      	ldr	r3, [pc, #20]	; (8008568 <HAL_RCC_OscConfig+0xdb4>)
 8008552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008554:	4a04      	ldr	r2, [pc, #16]	; (8008568 <HAL_RCC_OscConfig+0xdb4>)
 8008556:	f043 0310 	orr.w	r3, r3, #16
 800855a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3738      	adds	r7, #56	; 0x38
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	46020c00 	.word	0x46020c00

0800856c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e1d9      	b.n	8008934 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008580:	4b9b      	ldr	r3, [pc, #620]	; (80087f0 <HAL_RCC_ClockConfig+0x284>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	429a      	cmp	r2, r3
 800858c:	d910      	bls.n	80085b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800858e:	4b98      	ldr	r3, [pc, #608]	; (80087f0 <HAL_RCC_ClockConfig+0x284>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f023 020f 	bic.w	r2, r3, #15
 8008596:	4996      	ldr	r1, [pc, #600]	; (80087f0 <HAL_RCC_ClockConfig+0x284>)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	4313      	orrs	r3, r2
 800859c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800859e:	4b94      	ldr	r3, [pc, #592]	; (80087f0 <HAL_RCC_ClockConfig+0x284>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 030f 	and.w	r3, r3, #15
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d001      	beq.n	80085b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e1c1      	b.n	8008934 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0310 	and.w	r3, r3, #16
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d010      	beq.n	80085de <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	695a      	ldr	r2, [r3, #20]
 80085c0:	4b8c      	ldr	r3, [pc, #560]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 80085c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d908      	bls.n	80085de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80085cc:	4b89      	ldr	r3, [pc, #548]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	4986      	ldr	r1, [pc, #536]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0308 	and.w	r3, r3, #8
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d012      	beq.n	8008610 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	691a      	ldr	r2, [r3, #16]
 80085ee:	4b81      	ldr	r3, [pc, #516]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	091b      	lsrs	r3, r3, #4
 80085f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d909      	bls.n	8008610 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80085fc:	4b7d      	ldr	r3, [pc, #500]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 80085fe:	6a1b      	ldr	r3, [r3, #32]
 8008600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	011b      	lsls	r3, r3, #4
 800860a:	497a      	ldr	r1, [pc, #488]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 800860c:	4313      	orrs	r3, r2
 800860e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0304 	and.w	r3, r3, #4
 8008618:	2b00      	cmp	r3, #0
 800861a:	d010      	beq.n	800863e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	68da      	ldr	r2, [r3, #12]
 8008620:	4b74      	ldr	r3, [pc, #464]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008628:	429a      	cmp	r2, r3
 800862a:	d908      	bls.n	800863e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800862c:	4b71      	ldr	r3, [pc, #452]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 800862e:	6a1b      	ldr	r3, [r3, #32]
 8008630:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	496e      	ldr	r1, [pc, #440]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 800863a:	4313      	orrs	r3, r2
 800863c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0302 	and.w	r3, r3, #2
 8008646:	2b00      	cmp	r3, #0
 8008648:	d010      	beq.n	800866c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	689a      	ldr	r2, [r3, #8]
 800864e:	4b69      	ldr	r3, [pc, #420]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	f003 030f 	and.w	r3, r3, #15
 8008656:	429a      	cmp	r2, r3
 8008658:	d908      	bls.n	800866c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800865a:	4b66      	ldr	r3, [pc, #408]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	f023 020f 	bic.w	r2, r3, #15
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	4963      	ldr	r1, [pc, #396]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 8008668:	4313      	orrs	r3, r2
 800866a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 80d2 	beq.w	800881e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800867a:	2300      	movs	r3, #0
 800867c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	2b03      	cmp	r3, #3
 8008684:	d143      	bne.n	800870e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008686:	4b5b      	ldr	r3, [pc, #364]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 8008688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800868c:	f003 0304 	and.w	r3, r3, #4
 8008690:	2b00      	cmp	r3, #0
 8008692:	d110      	bne.n	80086b6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008694:	4b57      	ldr	r3, [pc, #348]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 8008696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800869a:	4a56      	ldr	r2, [pc, #344]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 800869c:	f043 0304 	orr.w	r3, r3, #4
 80086a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80086a4:	4b53      	ldr	r3, [pc, #332]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 80086a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086aa:	f003 0304 	and.w	r3, r3, #4
 80086ae:	60bb      	str	r3, [r7, #8]
 80086b0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80086b2:	2301      	movs	r3, #1
 80086b4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80086b6:	f7fa fcf7 	bl	80030a8 <HAL_GetTick>
 80086ba:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80086bc:	4b4e      	ldr	r3, [pc, #312]	; (80087f8 <HAL_RCC_ClockConfig+0x28c>)
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00f      	beq.n	80086e8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80086c8:	e008      	b.n	80086dc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80086ca:	f7fa fced 	bl	80030a8 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d901      	bls.n	80086dc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e12b      	b.n	8008934 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80086dc:	4b46      	ldr	r3, [pc, #280]	; (80087f8 <HAL_RCC_ClockConfig+0x28c>)
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d0f0      	beq.n	80086ca <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80086e8:	7dfb      	ldrb	r3, [r7, #23]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d107      	bne.n	80086fe <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80086ee:	4b41      	ldr	r3, [pc, #260]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 80086f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086f4:	4a3f      	ldr	r2, [pc, #252]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 80086f6:	f023 0304 	bic.w	r3, r3, #4
 80086fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80086fe:	4b3d      	ldr	r3, [pc, #244]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d121      	bne.n	800874e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e112      	b.n	8008934 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	2b02      	cmp	r3, #2
 8008714:	d107      	bne.n	8008726 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008716:	4b37      	ldr	r3, [pc, #220]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d115      	bne.n	800874e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e106      	b.n	8008934 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d107      	bne.n	800873e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800872e:	4b31      	ldr	r3, [pc, #196]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0304 	and.w	r3, r3, #4
 8008736:	2b00      	cmp	r3, #0
 8008738:	d109      	bne.n	800874e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e0fa      	b.n	8008934 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800873e:	4b2d      	ldr	r3, [pc, #180]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e0f2      	b.n	8008934 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800874e:	4b29      	ldr	r3, [pc, #164]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	f023 0203 	bic.w	r2, r3, #3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	4926      	ldr	r1, [pc, #152]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 800875c:	4313      	orrs	r3, r2
 800875e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8008760:	f7fa fca2 	bl	80030a8 <HAL_GetTick>
 8008764:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	2b03      	cmp	r3, #3
 800876c:	d112      	bne.n	8008794 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800876e:	e00a      	b.n	8008786 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008770:	f7fa fc9a 	bl	80030a8 <HAL_GetTick>
 8008774:	4602      	mov	r2, r0
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	f241 3288 	movw	r2, #5000	; 0x1388
 800877e:	4293      	cmp	r3, r2
 8008780:	d901      	bls.n	8008786 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e0d6      	b.n	8008934 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008786:	4b1b      	ldr	r3, [pc, #108]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	f003 030c 	and.w	r3, r3, #12
 800878e:	2b0c      	cmp	r3, #12
 8008790:	d1ee      	bne.n	8008770 <HAL_RCC_ClockConfig+0x204>
 8008792:	e044      	b.n	800881e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	2b02      	cmp	r3, #2
 800879a:	d112      	bne.n	80087c2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800879c:	e00a      	b.n	80087b4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800879e:	f7fa fc83 	bl	80030a8 <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d901      	bls.n	80087b4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e0bf      	b.n	8008934 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80087b4:	4b0f      	ldr	r3, [pc, #60]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 80087b6:	69db      	ldr	r3, [r3, #28]
 80087b8:	f003 030c 	and.w	r3, r3, #12
 80087bc:	2b08      	cmp	r3, #8
 80087be:	d1ee      	bne.n	800879e <HAL_RCC_ClockConfig+0x232>
 80087c0:	e02d      	b.n	800881e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d123      	bne.n	8008812 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80087ca:	e00a      	b.n	80087e2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087cc:	f7fa fc6c 	bl	80030a8 <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80087da:	4293      	cmp	r3, r2
 80087dc:	d901      	bls.n	80087e2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e0a8      	b.n	8008934 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80087e2:	4b04      	ldr	r3, [pc, #16]	; (80087f4 <HAL_RCC_ClockConfig+0x288>)
 80087e4:	69db      	ldr	r3, [r3, #28]
 80087e6:	f003 030c 	and.w	r3, r3, #12
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1ee      	bne.n	80087cc <HAL_RCC_ClockConfig+0x260>
 80087ee:	e016      	b.n	800881e <HAL_RCC_ClockConfig+0x2b2>
 80087f0:	40022000 	.word	0x40022000
 80087f4:	46020c00 	.word	0x46020c00
 80087f8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087fc:	f7fa fc54 	bl	80030a8 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	f241 3288 	movw	r2, #5000	; 0x1388
 800880a:	4293      	cmp	r3, r2
 800880c:	d901      	bls.n	8008812 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e090      	b.n	8008934 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008812:	4b4a      	ldr	r3, [pc, #296]	; (800893c <HAL_RCC_ClockConfig+0x3d0>)
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	f003 030c 	and.w	r3, r3, #12
 800881a:	2b04      	cmp	r3, #4
 800881c:	d1ee      	bne.n	80087fc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 0302 	and.w	r3, r3, #2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d010      	beq.n	800884c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689a      	ldr	r2, [r3, #8]
 800882e:	4b43      	ldr	r3, [pc, #268]	; (800893c <HAL_RCC_ClockConfig+0x3d0>)
 8008830:	6a1b      	ldr	r3, [r3, #32]
 8008832:	f003 030f 	and.w	r3, r3, #15
 8008836:	429a      	cmp	r2, r3
 8008838:	d208      	bcs.n	800884c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800883a:	4b40      	ldr	r3, [pc, #256]	; (800893c <HAL_RCC_ClockConfig+0x3d0>)
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	f023 020f 	bic.w	r2, r3, #15
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	493d      	ldr	r1, [pc, #244]	; (800893c <HAL_RCC_ClockConfig+0x3d0>)
 8008848:	4313      	orrs	r3, r2
 800884a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800884c:	4b3c      	ldr	r3, [pc, #240]	; (8008940 <HAL_RCC_ClockConfig+0x3d4>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 030f 	and.w	r3, r3, #15
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	429a      	cmp	r2, r3
 8008858:	d210      	bcs.n	800887c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800885a:	4b39      	ldr	r3, [pc, #228]	; (8008940 <HAL_RCC_ClockConfig+0x3d4>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f023 020f 	bic.w	r2, r3, #15
 8008862:	4937      	ldr	r1, [pc, #220]	; (8008940 <HAL_RCC_ClockConfig+0x3d4>)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	4313      	orrs	r3, r2
 8008868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800886a:	4b35      	ldr	r3, [pc, #212]	; (8008940 <HAL_RCC_ClockConfig+0x3d4>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 030f 	and.w	r3, r3, #15
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	429a      	cmp	r2, r3
 8008876:	d001      	beq.n	800887c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e05b      	b.n	8008934 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0304 	and.w	r3, r3, #4
 8008884:	2b00      	cmp	r3, #0
 8008886:	d010      	beq.n	80088aa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68da      	ldr	r2, [r3, #12]
 800888c:	4b2b      	ldr	r3, [pc, #172]	; (800893c <HAL_RCC_ClockConfig+0x3d0>)
 800888e:	6a1b      	ldr	r3, [r3, #32]
 8008890:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008894:	429a      	cmp	r2, r3
 8008896:	d208      	bcs.n	80088aa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008898:	4b28      	ldr	r3, [pc, #160]	; (800893c <HAL_RCC_ClockConfig+0x3d0>)
 800889a:	6a1b      	ldr	r3, [r3, #32]
 800889c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	4925      	ldr	r1, [pc, #148]	; (800893c <HAL_RCC_ClockConfig+0x3d0>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 0308 	and.w	r3, r3, #8
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d012      	beq.n	80088dc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	691a      	ldr	r2, [r3, #16]
 80088ba:	4b20      	ldr	r3, [pc, #128]	; (800893c <HAL_RCC_ClockConfig+0x3d0>)
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	091b      	lsrs	r3, r3, #4
 80088c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d209      	bcs.n	80088dc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80088c8:	4b1c      	ldr	r3, [pc, #112]	; (800893c <HAL_RCC_ClockConfig+0x3d0>)
 80088ca:	6a1b      	ldr	r3, [r3, #32]
 80088cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	011b      	lsls	r3, r3, #4
 80088d6:	4919      	ldr	r1, [pc, #100]	; (800893c <HAL_RCC_ClockConfig+0x3d0>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0310 	and.w	r3, r3, #16
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d010      	beq.n	800890a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	695a      	ldr	r2, [r3, #20]
 80088ec:	4b13      	ldr	r3, [pc, #76]	; (800893c <HAL_RCC_ClockConfig+0x3d0>)
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d208      	bcs.n	800890a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80088f8:	4b10      	ldr	r3, [pc, #64]	; (800893c <HAL_RCC_ClockConfig+0x3d0>)
 80088fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	490d      	ldr	r1, [pc, #52]	; (800893c <HAL_RCC_ClockConfig+0x3d0>)
 8008906:	4313      	orrs	r3, r2
 8008908:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800890a:	f000 f821 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800890e:	4602      	mov	r2, r0
 8008910:	4b0a      	ldr	r3, [pc, #40]	; (800893c <HAL_RCC_ClockConfig+0x3d0>)
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	f003 030f 	and.w	r3, r3, #15
 8008918:	490a      	ldr	r1, [pc, #40]	; (8008944 <HAL_RCC_ClockConfig+0x3d8>)
 800891a:	5ccb      	ldrb	r3, [r1, r3]
 800891c:	fa22 f303 	lsr.w	r3, r2, r3
 8008920:	4a09      	ldr	r2, [pc, #36]	; (8008948 <HAL_RCC_ClockConfig+0x3dc>)
 8008922:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008924:	4b09      	ldr	r3, [pc, #36]	; (800894c <HAL_RCC_ClockConfig+0x3e0>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4618      	mov	r0, r3
 800892a:	f7fa fa35 	bl	8002d98 <HAL_InitTick>
 800892e:	4603      	mov	r3, r0
 8008930:	73fb      	strb	r3, [r7, #15]

  return status;
 8008932:	7bfb      	ldrb	r3, [r7, #15]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	46020c00 	.word	0x46020c00
 8008940:	40022000 	.word	0x40022000
 8008944:	0800d984 	.word	0x0800d984
 8008948:	20000d00 	.word	0x20000d00
 800894c:	20000d04 	.word	0x20000d04

08008950 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008950:	b480      	push	{r7}
 8008952:	b08b      	sub	sp, #44	; 0x2c
 8008954:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8008956:	2300      	movs	r3, #0
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800895e:	4b78      	ldr	r3, [pc, #480]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008960:	69db      	ldr	r3, [r3, #28]
 8008962:	f003 030c 	and.w	r3, r3, #12
 8008966:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008968:	4b75      	ldr	r3, [pc, #468]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800896a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896c:	f003 0303 	and.w	r3, r3, #3
 8008970:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d005      	beq.n	8008984 <HAL_RCC_GetSysClockFreq+0x34>
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	2b0c      	cmp	r3, #12
 800897c:	d121      	bne.n	80089c2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d11e      	bne.n	80089c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8008984:	4b6e      	ldr	r3, [pc, #440]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d107      	bne.n	80089a0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8008990:	4b6b      	ldr	r3, [pc, #428]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008992:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008996:	0b1b      	lsrs	r3, r3, #12
 8008998:	f003 030f 	and.w	r3, r3, #15
 800899c:	627b      	str	r3, [r7, #36]	; 0x24
 800899e:	e005      	b.n	80089ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80089a0:	4b67      	ldr	r3, [pc, #412]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	0f1b      	lsrs	r3, r3, #28
 80089a6:	f003 030f 	and.w	r3, r3, #15
 80089aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80089ac:	4a65      	ldr	r2, [pc, #404]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80089ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089b4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d110      	bne.n	80089de <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80089bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089be:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80089c0:	e00d      	b.n	80089de <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80089c2:	4b5f      	ldr	r3, [pc, #380]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	f003 030c 	and.w	r3, r3, #12
 80089ca:	2b04      	cmp	r3, #4
 80089cc:	d102      	bne.n	80089d4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80089ce:	4b5e      	ldr	r3, [pc, #376]	; (8008b48 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80089d0:	623b      	str	r3, [r7, #32]
 80089d2:	e004      	b.n	80089de <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	2b08      	cmp	r3, #8
 80089d8:	d101      	bne.n	80089de <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80089da:	4b5b      	ldr	r3, [pc, #364]	; (8008b48 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80089dc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	2b0c      	cmp	r3, #12
 80089e2:	f040 80a5 	bne.w	8008b30 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80089e6:	4b56      	ldr	r3, [pc, #344]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80089e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ea:	f003 0303 	and.w	r3, r3, #3
 80089ee:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80089f0:	4b53      	ldr	r3, [pc, #332]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80089f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f4:	0a1b      	lsrs	r3, r3, #8
 80089f6:	f003 030f 	and.w	r3, r3, #15
 80089fa:	3301      	adds	r3, #1
 80089fc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80089fe:	4b50      	ldr	r3, [pc, #320]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a02:	091b      	lsrs	r3, r3, #4
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008a0a:	4b4d      	ldr	r3, [pc, #308]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0e:	08db      	lsrs	r3, r3, #3
 8008a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	fb02 f303 	mul.w	r3, r2, r3
 8008a1a:	ee07 3a90 	vmov	s15, r3
 8008a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a22:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d003      	beq.n	8008a34 <HAL_RCC_GetSysClockFreq+0xe4>
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	d022      	beq.n	8008a78 <HAL_RCC_GetSysClockFreq+0x128>
 8008a32:	e043      	b.n	8008abc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	ee07 3a90 	vmov	s15, r3
 8008a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3e:	eddf 6a43 	vldr	s13, [pc, #268]	; 8008b4c <HAL_RCC_GetSysClockFreq+0x1fc>
 8008a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a46:	4b3e      	ldr	r3, [pc, #248]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4e:	ee07 3a90 	vmov	s15, r3
 8008a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008a56:	ed97 6a01 	vldr	s12, [r7, #4]
 8008a5a:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8008b50 <HAL_RCC_GetSysClockFreq+0x200>
 8008a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a76:	e046      	b.n	8008b06 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	ee07 3a90 	vmov	s15, r3
 8008a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a82:	eddf 6a32 	vldr	s13, [pc, #200]	; 8008b4c <HAL_RCC_GetSysClockFreq+0x1fc>
 8008a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a8a:	4b2d      	ldr	r3, [pc, #180]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a92:	ee07 3a90 	vmov	s15, r3
 8008a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008a9a:	ed97 6a01 	vldr	s12, [r7, #4]
 8008a9e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8008b50 <HAL_RCC_GetSysClockFreq+0x200>
 8008aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aba:	e024      	b.n	8008b06 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	ee07 3a90 	vmov	s15, r3
 8008ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	ee07 3a90 	vmov	s15, r3
 8008acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ad4:	4b1a      	ldr	r3, [pc, #104]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008adc:	ee07 3a90 	vmov	s15, r3
 8008ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008ae4:	ed97 6a01 	vldr	s12, [r7, #4]
 8008ae8:	eddf 5a19 	vldr	s11, [pc, #100]	; 8008b50 <HAL_RCC_GetSysClockFreq+0x200>
 8008aec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008af0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008af4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008af8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b04:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8008b06:	4b0e      	ldr	r3, [pc, #56]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b0a:	0e1b      	lsrs	r3, r3, #24
 8008b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b10:	3301      	adds	r3, #1
 8008b12:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b2a:	ee17 3a90 	vmov	r3, s15
 8008b2e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8008b30:	6a3b      	ldr	r3, [r7, #32]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	372c      	adds	r7, #44	; 0x2c
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	46020c00 	.word	0x46020c00
 8008b44:	0800d99c 	.word	0x0800d99c
 8008b48:	00f42400 	.word	0x00f42400
 8008b4c:	4b742400 	.word	0x4b742400
 8008b50:	46000000 	.word	0x46000000

08008b54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008b58:	f7ff fefa 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	4b07      	ldr	r3, [pc, #28]	; (8008b7c <HAL_RCC_GetHCLKFreq+0x28>)
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	f003 030f 	and.w	r3, r3, #15
 8008b66:	4906      	ldr	r1, [pc, #24]	; (8008b80 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008b68:	5ccb      	ldrb	r3, [r1, r3]
 8008b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b6e:	4a05      	ldr	r2, [pc, #20]	; (8008b84 <HAL_RCC_GetHCLKFreq+0x30>)
 8008b70:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8008b72:	4b04      	ldr	r3, [pc, #16]	; (8008b84 <HAL_RCC_GetHCLKFreq+0x30>)
 8008b74:	681b      	ldr	r3, [r3, #0]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	46020c00 	.word	0x46020c00
 8008b80:	0800d984 	.word	0x0800d984
 8008b84:	20000d00 	.word	0x20000d00

08008b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8008b8c:	f7ff ffe2 	bl	8008b54 <HAL_RCC_GetHCLKFreq>
 8008b90:	4602      	mov	r2, r0
 8008b92:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	091b      	lsrs	r3, r3, #4
 8008b98:	f003 0307 	and.w	r3, r3, #7
 8008b9c:	4903      	ldr	r1, [pc, #12]	; (8008bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b9e:	5ccb      	ldrb	r3, [r1, r3]
 8008ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	46020c00 	.word	0x46020c00
 8008bac:	0800d994 	.word	0x0800d994

08008bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8008bb4:	f7ff ffce 	bl	8008b54 <HAL_RCC_GetHCLKFreq>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	0a1b      	lsrs	r3, r3, #8
 8008bc0:	f003 0307 	and.w	r3, r3, #7
 8008bc4:	4903      	ldr	r1, [pc, #12]	; (8008bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bc6:	5ccb      	ldrb	r3, [r1, r3]
 8008bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	46020c00 	.word	0x46020c00
 8008bd4:	0800d994 	.word	0x0800d994

08008bd8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8008bdc:	f7ff ffba 	bl	8008b54 <HAL_RCC_GetHCLKFreq>
 8008be0:	4602      	mov	r2, r0
 8008be2:	4b05      	ldr	r3, [pc, #20]	; (8008bf8 <HAL_RCC_GetPCLK3Freq+0x20>)
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	091b      	lsrs	r3, r3, #4
 8008be8:	f003 0307 	and.w	r3, r3, #7
 8008bec:	4903      	ldr	r1, [pc, #12]	; (8008bfc <HAL_RCC_GetPCLK3Freq+0x24>)
 8008bee:	5ccb      	ldrb	r3, [r1, r3]
 8008bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	46020c00 	.word	0x46020c00
 8008bfc:	0800d994 	.word	0x0800d994

08008c00 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	221f      	movs	r2, #31
 8008c0e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8008c10:	4b15      	ldr	r3, [pc, #84]	; (8008c68 <HAL_RCC_GetClockConfig+0x68>)
 8008c12:	69db      	ldr	r3, [r3, #28]
 8008c14:	f003 0203 	and.w	r2, r3, #3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8008c1c:	4b12      	ldr	r3, [pc, #72]	; (8008c68 <HAL_RCC_GetClockConfig+0x68>)
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	f003 020f 	and.w	r2, r3, #15
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8008c28:	4b0f      	ldr	r3, [pc, #60]	; (8008c68 <HAL_RCC_GetClockConfig+0x68>)
 8008c2a:	6a1b      	ldr	r3, [r3, #32]
 8008c2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8008c34:	4b0c      	ldr	r3, [pc, #48]	; (8008c68 <HAL_RCC_GetClockConfig+0x68>)
 8008c36:	6a1b      	ldr	r3, [r3, #32]
 8008c38:	091b      	lsrs	r3, r3, #4
 8008c3a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8008c42:	4b09      	ldr	r3, [pc, #36]	; (8008c68 <HAL_RCC_GetClockConfig+0x68>)
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008c4e:	4b07      	ldr	r3, [pc, #28]	; (8008c6c <HAL_RCC_GetClockConfig+0x6c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 020f 	and.w	r2, r3, #15
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	601a      	str	r2, [r3, #0]
}
 8008c5a:	bf00      	nop
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	46020c00 	.word	0x46020c00
 8008c6c:	40022000 	.word	0x40022000

08008c70 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008c70:	b480      	push	{r7}
 8008c72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8008c74:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <HAL_RCC_EnableCSS+0x1c>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a04      	ldr	r2, [pc, #16]	; (8008c8c <HAL_RCC_EnableCSS+0x1c>)
 8008c7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c7e:	6013      	str	r3, [r2, #0]
}
 8008c80:	bf00      	nop
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	46020c00 	.word	0x46020c00

08008c90 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008c94:	4b07      	ldr	r3, [pc, #28]	; (8008cb4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ca0:	d105      	bne.n	8008cae <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008ca2:	f000 f809 	bl	8008cb8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008ca6:	4b03      	ldr	r3, [pc, #12]	; (8008cb4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008cac:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8008cae:	bf00      	nop
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	46020c00 	.word	0x46020c00

08008cb8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8008cbc:	bf00      	nop
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
	...

08008cc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008cd0:	4b3e      	ldr	r3, [pc, #248]	; (8008dcc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cd6:	f003 0304 	and.w	r3, r3, #4
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d003      	beq.n	8008ce6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008cde:	f7fe fcfb 	bl	80076d8 <HAL_PWREx_GetVoltageRange>
 8008ce2:	6178      	str	r0, [r7, #20]
 8008ce4:	e019      	b.n	8008d1a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008ce6:	4b39      	ldr	r3, [pc, #228]	; (8008dcc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cec:	4a37      	ldr	r2, [pc, #220]	; (8008dcc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008cee:	f043 0304 	orr.w	r3, r3, #4
 8008cf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008cf6:	4b35      	ldr	r3, [pc, #212]	; (8008dcc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cfc:	f003 0304 	and.w	r3, r3, #4
 8008d00:	60fb      	str	r3, [r7, #12]
 8008d02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008d04:	f7fe fce8 	bl	80076d8 <HAL_PWREx_GetVoltageRange>
 8008d08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008d0a:	4b30      	ldr	r3, [pc, #192]	; (8008dcc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d10:	4a2e      	ldr	r2, [pc, #184]	; (8008dcc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008d12:	f023 0304 	bic.w	r3, r3, #4
 8008d16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d20:	d003      	beq.n	8008d2a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d28:	d109      	bne.n	8008d3e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d30:	d202      	bcs.n	8008d38 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8008d32:	2301      	movs	r3, #1
 8008d34:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008d36:	e033      	b.n	8008da0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8008d38:	2300      	movs	r3, #0
 8008d3a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008d3c:	e030      	b.n	8008da0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d44:	d208      	bcs.n	8008d58 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d4c:	d102      	bne.n	8008d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8008d4e:	2303      	movs	r3, #3
 8008d50:	613b      	str	r3, [r7, #16]
 8008d52:	e025      	b.n	8008da0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e035      	b.n	8008dc4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d5e:	d90f      	bls.n	8008d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d109      	bne.n	8008d7a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d6c:	d902      	bls.n	8008d74 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8008d6e:	2300      	movs	r3, #0
 8008d70:	613b      	str	r3, [r7, #16]
 8008d72:	e015      	b.n	8008da0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8008d74:	2301      	movs	r3, #1
 8008d76:	613b      	str	r3, [r7, #16]
 8008d78:	e012      	b.n	8008da0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	613b      	str	r3, [r7, #16]
 8008d7e:	e00f      	b.n	8008da0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d86:	d109      	bne.n	8008d9c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d8e:	d102      	bne.n	8008d96 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8008d90:	2301      	movs	r3, #1
 8008d92:	613b      	str	r3, [r7, #16]
 8008d94:	e004      	b.n	8008da0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8008d96:	2302      	movs	r3, #2
 8008d98:	613b      	str	r3, [r7, #16]
 8008d9a:	e001      	b.n	8008da0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008da0:	4b0b      	ldr	r3, [pc, #44]	; (8008dd0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f023 020f 	bic.w	r2, r3, #15
 8008da8:	4909      	ldr	r1, [pc, #36]	; (8008dd0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8008db0:	4b07      	ldr	r3, [pc, #28]	; (8008dd0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 030f 	and.w	r3, r3, #15
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d001      	beq.n	8008dc2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e000      	b.n	8008dc4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3718      	adds	r7, #24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	46020c00 	.word	0x46020c00
 8008dd0:	40022000 	.word	0x40022000

08008dd4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dd8:	b0c8      	sub	sp, #288	; 0x120
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008de0:	2300      	movs	r3, #0
 8008de2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008de6:	2300      	movs	r3, #0
 8008de8:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	f002 0401 	and.w	r4, r2, #1
 8008df8:	2500      	movs	r5, #0
 8008dfa:	ea54 0305 	orrs.w	r3, r4, r5
 8008dfe:	d00b      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008e00:	4bd5      	ldr	r3, [pc, #852]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e06:	f023 0103 	bic.w	r1, r3, #3
 8008e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e10:	4ad1      	ldr	r2, [pc, #836]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e12:	430b      	orrs	r3, r1
 8008e14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	f002 0802 	and.w	r8, r2, #2
 8008e24:	f04f 0900 	mov.w	r9, #0
 8008e28:	ea58 0309 	orrs.w	r3, r8, r9
 8008e2c:	d00b      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8008e2e:	4bca      	ldr	r3, [pc, #808]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e34:	f023 010c 	bic.w	r1, r3, #12
 8008e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e3e:	4ac6      	ldr	r2, [pc, #792]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e40:	430b      	orrs	r3, r1
 8008e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4e:	f002 0a04 	and.w	sl, r2, #4
 8008e52:	f04f 0b00 	mov.w	fp, #0
 8008e56:	ea5a 030b 	orrs.w	r3, sl, fp
 8008e5a:	d00b      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8008e5c:	4bbe      	ldr	r3, [pc, #760]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e62:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e6c:	4aba      	ldr	r2, [pc, #744]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e6e:	430b      	orrs	r3, r1
 8008e70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7c:	f002 0308 	and.w	r3, r2, #8
 8008e80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008e84:	2300      	movs	r3, #0
 8008e86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008e8a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4313      	orrs	r3, r2
 8008e92:	d00b      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8008e94:	4bb0      	ldr	r3, [pc, #704]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ea4:	4aac      	ldr	r2, [pc, #688]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008ea6:	430b      	orrs	r3, r1
 8008ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb4:	f002 0310 	and.w	r3, r2, #16
 8008eb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008ec2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	d00b      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8008ecc:	4ba2      	ldr	r3, [pc, #648]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ed2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008edc:	4a9e      	ldr	r2, [pc, #632]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008ede:	430b      	orrs	r3, r1
 8008ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008ef0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008efa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008efe:	460b      	mov	r3, r1
 8008f00:	4313      	orrs	r3, r2
 8008f02:	d00b      	beq.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8008f04:	4b94      	ldr	r3, [pc, #592]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008f0a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f14:	4a90      	ldr	r2, [pc, #576]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f16:	430b      	orrs	r3, r1
 8008f18:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f24:	f002 0320 	and.w	r3, r2, #32
 8008f28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008f32:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008f36:	460b      	mov	r3, r1
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	d00b      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008f3c:	4b86      	ldr	r3, [pc, #536]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008f42:	f023 0107 	bic.w	r1, r3, #7
 8008f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f4c:	4a82      	ldr	r2, [pc, #520]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f4e:	430b      	orrs	r3, r1
 8008f50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f64:	2300      	movs	r3, #0
 8008f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f6a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008f6e:	460b      	mov	r3, r1
 8008f70:	4313      	orrs	r3, r2
 8008f72:	d00b      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008f74:	4b78      	ldr	r3, [pc, #480]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f7a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8008f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f84:	4a74      	ldr	r2, [pc, #464]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f86:	430b      	orrs	r3, r1
 8008f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f94:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008f98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008fa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	d00b      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8008fac:	4b6a      	ldr	r3, [pc, #424]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fbc:	4a66      	ldr	r2, [pc, #408]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008fbe:	430b      	orrs	r3, r1
 8008fc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fcc:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8008fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008fda:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	d00b      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8008fe4:	4b5c      	ldr	r3, [pc, #368]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008fe6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008fea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ff4:	4a58      	ldr	r2, [pc, #352]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008ff6:	430b      	orrs	r3, r1
 8008ff8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009004:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009008:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800900c:	2300      	movs	r3, #0
 800900e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009012:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009016:	460b      	mov	r3, r1
 8009018:	4313      	orrs	r3, r2
 800901a:	d00b      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800901c:	4b4e      	ldr	r3, [pc, #312]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800901e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009022:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8009026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800902a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800902c:	4a4a      	ldr	r2, [pc, #296]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800902e:	430b      	orrs	r3, r1
 8009030:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8009034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009040:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009044:	2300      	movs	r3, #0
 8009046:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800904a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800904e:	460b      	mov	r3, r1
 8009050:	4313      	orrs	r3, r2
 8009052:	d00b      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8009054:	4b40      	ldr	r3, [pc, #256]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009056:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800905a:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 800905e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009064:	4a3c      	ldr	r2, [pc, #240]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009066:	430b      	orrs	r3, r1
 8009068:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800906c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009074:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009078:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800907c:	2300      	movs	r3, #0
 800907e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009082:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009086:	460b      	mov	r3, r1
 8009088:	4313      	orrs	r3, r2
 800908a:	d00c      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800908c:	4b32      	ldr	r3, [pc, #200]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800908e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009092:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8009096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800909a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800909e:	4a2e      	ldr	r2, [pc, #184]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80090a0:	430b      	orrs	r3, r1
 80090a2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80090a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ae:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80090b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090b6:	2300      	movs	r3, #0
 80090b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090bc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80090c0:	460b      	mov	r3, r1
 80090c2:	4313      	orrs	r3, r2
 80090c4:	d00c      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80090c6:	4b24      	ldr	r3, [pc, #144]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80090c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80090cc:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80090d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090d8:	4a1f      	ldr	r2, [pc, #124]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80090da:	430b      	orrs	r3, r1
 80090dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80090e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80090ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80090f0:	2300      	movs	r3, #0
 80090f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090f6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80090fa:	460b      	mov	r3, r1
 80090fc:	4313      	orrs	r3, r2
 80090fe:	d00c      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8009100:	4b15      	ldr	r3, [pc, #84]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009106:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800910a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800910e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009112:	4a11      	ldr	r2, [pc, #68]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009114:	430b      	orrs	r3, r1
 8009116:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800911a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800911e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009122:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800912a:	2300      	movs	r3, #0
 800912c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009130:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009134:	460b      	mov	r3, r1
 8009136:	4313      	orrs	r3, r2
 8009138:	d010      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800913a:	4b07      	ldr	r3, [pc, #28]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800913c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009140:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800914c:	4a02      	ldr	r2, [pc, #8]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800914e:	430b      	orrs	r3, r1
 8009150:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009154:	e002      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8009156:	bf00      	nop
 8009158:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800915c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009164:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800916c:	2300      	movs	r3, #0
 800916e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009172:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009176:	460b      	mov	r3, r1
 8009178:	4313      	orrs	r3, r2
 800917a:	d04c      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800917c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009180:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009184:	2b80      	cmp	r3, #128	; 0x80
 8009186:	d02d      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009188:	2b80      	cmp	r3, #128	; 0x80
 800918a:	d827      	bhi.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x408>
 800918c:	2b60      	cmp	r3, #96	; 0x60
 800918e:	d02b      	beq.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009190:	2b60      	cmp	r3, #96	; 0x60
 8009192:	d823      	bhi.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009194:	2b40      	cmp	r3, #64	; 0x40
 8009196:	d006      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8009198:	2b40      	cmp	r3, #64	; 0x40
 800919a:	d81f      	bhi.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x408>
 800919c:	2b00      	cmp	r3, #0
 800919e:	d009      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80091a0:	2b20      	cmp	r3, #32
 80091a2:	d011      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80091a4:	e01a      	b.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80091a6:	4bc0      	ldr	r3, [pc, #768]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80091a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091aa:	4abf      	ldr	r2, [pc, #764]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80091ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091b0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80091b2:	e01a      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80091b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091b8:	3308      	adds	r3, #8
 80091ba:	4618      	mov	r0, r3
 80091bc:	f002 fce8 	bl	800bb90 <RCCEx_PLL2_Config>
 80091c0:	4603      	mov	r3, r0
 80091c2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80091c6:	e010      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80091c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091cc:	332c      	adds	r3, #44	; 0x2c
 80091ce:	4618      	mov	r0, r3
 80091d0:	f002 fd76 	bl	800bcc0 <RCCEx_PLL3_Config>
 80091d4:	4603      	mov	r3, r0
 80091d6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80091da:	e006      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80091e2:	e002      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80091e4:	bf00      	nop
 80091e6:	e000      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80091e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091ea:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10d      	bne.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80091f2:	4bad      	ldr	r3, [pc, #692]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80091f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80091f8:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80091fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009200:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009204:	4aa8      	ldr	r2, [pc, #672]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009206:	430b      	orrs	r3, r1
 8009208:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800920c:	e003      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800920e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009212:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009222:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009226:	2300      	movs	r3, #0
 8009228:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800922c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009230:	460b      	mov	r3, r1
 8009232:	4313      	orrs	r3, r2
 8009234:	d053      	beq.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8009236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800923a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800923e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009242:	d033      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8009244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009248:	d82c      	bhi.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800924a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800924e:	d02f      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8009250:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009254:	d826      	bhi.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800925a:	d008      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800925c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009260:	d820      	bhi.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00a      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800926a:	d011      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800926c:	e01a      	b.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800926e:	4b8e      	ldr	r3, [pc, #568]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009272:	4a8d      	ldr	r2, [pc, #564]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009278:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800927a:	e01a      	b.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800927c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009280:	3308      	adds	r3, #8
 8009282:	4618      	mov	r0, r3
 8009284:	f002 fc84 	bl	800bb90 <RCCEx_PLL2_Config>
 8009288:	4603      	mov	r3, r0
 800928a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800928e:	e010      	b.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009294:	332c      	adds	r3, #44	; 0x2c
 8009296:	4618      	mov	r0, r3
 8009298:	f002 fd12 	bl	800bcc0 <RCCEx_PLL3_Config>
 800929c:	4603      	mov	r3, r0
 800929e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80092a2:	e006      	b.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80092aa:	e002      	b.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80092ac:	bf00      	nop
 80092ae:	e000      	b.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80092b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092b2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10d      	bne.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80092ba:	4b7b      	ldr	r3, [pc, #492]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80092bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80092c0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80092c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80092cc:	4a76      	ldr	r2, [pc, #472]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80092ce:	430b      	orrs	r3, r1
 80092d0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80092d4:	e003      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80092da:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80092de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80092ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80092ee:	2300      	movs	r3, #0
 80092f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80092f4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80092f8:	460b      	mov	r3, r1
 80092fa:	4313      	orrs	r3, r2
 80092fc:	d046      	beq.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80092fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009302:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009306:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800930a:	d028      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800930c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009310:	d821      	bhi.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009312:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009316:	d022      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800931c:	d81b      	bhi.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800931e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009322:	d01c      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009324:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009328:	d815      	bhi.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800932a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800932e:	d008      	beq.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8009330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009334:	d80f      	bhi.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009336:	2b00      	cmp	r3, #0
 8009338:	d011      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800933a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800933e:	d00e      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009340:	e009      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009346:	3308      	adds	r3, #8
 8009348:	4618      	mov	r0, r3
 800934a:	f002 fc21 	bl	800bb90 <RCCEx_PLL2_Config>
 800934e:	4603      	mov	r3, r0
 8009350:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009354:	e004      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800935c:	e000      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800935e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009360:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10d      	bne.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009368:	4b4f      	ldr	r3, [pc, #316]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800936a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800936e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009376:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800937a:	4a4b      	ldr	r2, [pc, #300]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800937c:	430b      	orrs	r3, r1
 800937e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009382:	e003      	b.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009384:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009388:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800938c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009394:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009398:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800939c:	2300      	movs	r3, #0
 800939e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80093a6:	460b      	mov	r3, r1
 80093a8:	4313      	orrs	r3, r2
 80093aa:	d03f      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80093ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093b4:	2b04      	cmp	r3, #4
 80093b6:	d81e      	bhi.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x622>
 80093b8:	a201      	add	r2, pc, #4	; (adr r2, 80093c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80093ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093be:	bf00      	nop
 80093c0:	080093ff 	.word	0x080093ff
 80093c4:	080093d5 	.word	0x080093d5
 80093c8:	080093e3 	.word	0x080093e3
 80093cc:	080093ff 	.word	0x080093ff
 80093d0:	080093ff 	.word	0x080093ff
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80093d4:	4b34      	ldr	r3, [pc, #208]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80093d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d8:	4a33      	ldr	r2, [pc, #204]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80093da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093de:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80093e0:	e00e      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80093e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093e6:	332c      	adds	r3, #44	; 0x2c
 80093e8:	4618      	mov	r0, r3
 80093ea:	f002 fc69 	bl	800bcc0 <RCCEx_PLL3_Config>
 80093ee:	4603      	mov	r3, r0
 80093f0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80093f4:	e004      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80093fc:	e000      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 80093fe:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009400:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10d      	bne.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8009408:	4b27      	ldr	r3, [pc, #156]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800940a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800940e:	f023 0107 	bic.w	r1, r3, #7
 8009412:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800941a:	4a23      	ldr	r2, [pc, #140]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800941c:	430b      	orrs	r3, r1
 800941e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009422:	e003      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009424:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009428:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800942c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009438:	67bb      	str	r3, [r7, #120]	; 0x78
 800943a:	2300      	movs	r3, #0
 800943c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800943e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009442:	460b      	mov	r3, r1
 8009444:	4313      	orrs	r3, r2
 8009446:	d04c      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8009448:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800944c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009450:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009454:	d02a      	beq.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8009456:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800945a:	d821      	bhi.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800945c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009460:	d026      	beq.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8009462:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009466:	d81b      	bhi.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800946c:	d00e      	beq.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800946e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009472:	d815      	bhi.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009474:	2b00      	cmp	r3, #0
 8009476:	d01d      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8009478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800947c:	d110      	bne.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800947e:	4b0a      	ldr	r3, [pc, #40]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009482:	4a09      	ldr	r2, [pc, #36]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009488:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800948a:	e014      	b.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800948c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009490:	332c      	adds	r3, #44	; 0x2c
 8009492:	4618      	mov	r0, r3
 8009494:	f002 fc14 	bl	800bcc0 <RCCEx_PLL3_Config>
 8009498:	4603      	mov	r3, r0
 800949a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800949e:	e00a      	b.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80094a6:	e006      	b.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80094a8:	46020c00 	.word	0x46020c00
        break;
 80094ac:	bf00      	nop
 80094ae:	e002      	b.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 80094b0:	bf00      	nop
 80094b2:	e000      	b.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 80094b4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80094b6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10d      	bne.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80094be:	4baf      	ldr	r3, [pc, #700]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80094c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80094c4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80094c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094d0:	4aaa      	ldr	r2, [pc, #680]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80094d2:	430b      	orrs	r3, r1
 80094d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80094d8:	e003      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094da:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80094de:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80094e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ea:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80094ee:	673b      	str	r3, [r7, #112]	; 0x70
 80094f0:	2300      	movs	r3, #0
 80094f2:	677b      	str	r3, [r7, #116]	; 0x74
 80094f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80094f8:	460b      	mov	r3, r1
 80094fa:	4313      	orrs	r3, r2
 80094fc:	f000 80b5 	beq.w	800966a <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009500:	2300      	movs	r3, #0
 8009502:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009506:	4b9d      	ldr	r3, [pc, #628]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800950c:	f003 0304 	and.w	r3, r3, #4
 8009510:	2b00      	cmp	r3, #0
 8009512:	d113      	bne.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009514:	4b99      	ldr	r3, [pc, #612]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800951a:	4a98      	ldr	r2, [pc, #608]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800951c:	f043 0304 	orr.w	r3, r3, #4
 8009520:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009524:	4b95      	ldr	r3, [pc, #596]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800952a:	f003 0304 	and.w	r3, r3, #4
 800952e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009532:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
      pwrclkchanged = SET;
 8009536:	2301      	movs	r3, #1
 8009538:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800953c:	4b90      	ldr	r3, [pc, #576]	; (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800953e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009540:	4a8f      	ldr	r2, [pc, #572]	; (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009542:	f043 0301 	orr.w	r3, r3, #1
 8009546:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009548:	f7f9 fdae 	bl	80030a8 <HAL_GetTick>
 800954c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009550:	e00b      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009552:	f7f9 fda9 	bl	80030a8 <HAL_GetTick>
 8009556:	4602      	mov	r2, r0
 8009558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	2b02      	cmp	r3, #2
 8009560:	d903      	bls.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009568:	e005      	b.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800956a:	4b85      	ldr	r3, [pc, #532]	; (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800956c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b00      	cmp	r3, #0
 8009574:	d0ed      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 8009576:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800957a:	2b00      	cmp	r3, #0
 800957c:	d165      	bne.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800957e:	4b7f      	ldr	r3, [pc, #508]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009588:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800958c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009590:	2b00      	cmp	r3, #0
 8009592:	d023      	beq.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x808>
 8009594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009598:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800959c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d01b      	beq.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80095a4:	4b75      	ldr	r3, [pc, #468]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80095a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80095b2:	4b72      	ldr	r3, [pc, #456]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80095b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095b8:	4a70      	ldr	r2, [pc, #448]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80095ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80095c2:	4b6e      	ldr	r3, [pc, #440]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80095c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095c8:	4a6c      	ldr	r2, [pc, #432]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80095ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80095d2:	4a6a      	ldr	r2, [pc, #424]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80095d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80095d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80095dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80095e0:	f003 0301 	and.w	r3, r3, #1
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d019      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e8:	f7f9 fd5e 	bl	80030a8 <HAL_GetTick>
 80095ec:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095f0:	e00d      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095f2:	f7f9 fd59 	bl	80030a8 <HAL_GetTick>
 80095f6:	4602      	mov	r2, r0
 80095f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095fc:	1ad2      	subs	r2, r2, r3
 80095fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8009602:	429a      	cmp	r2, r3
 8009604:	d903      	bls.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
            break;
 800960c:	e006      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800960e:	4b5b      	ldr	r3, [pc, #364]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009614:	f003 0302 	and.w	r3, r3, #2
 8009618:	2b00      	cmp	r3, #0
 800961a:	d0ea      	beq.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800961c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10d      	bne.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8009624:	4b55      	ldr	r3, [pc, #340]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800962a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800962e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009632:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8009636:	4a51      	ldr	r2, [pc, #324]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009638:	430b      	orrs	r3, r1
 800963a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800963e:	e008      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009640:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009644:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 8009648:	e003      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800964a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800964e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009652:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8009656:	2b01      	cmp	r3, #1
 8009658:	d107      	bne.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800965a:	4b48      	ldr	r3, [pc, #288]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800965c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009660:	4a46      	ldr	r2, [pc, #280]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009662:	f023 0304 	bic.w	r3, r3, #4
 8009666:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800966a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800966e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009672:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009676:	66bb      	str	r3, [r7, #104]	; 0x68
 8009678:	2300      	movs	r3, #0
 800967a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800967c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009680:	460b      	mov	r3, r1
 8009682:	4313      	orrs	r3, r2
 8009684:	d042      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8009686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800968a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800968e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009692:	d022      	beq.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x906>
 8009694:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009698:	d81b      	bhi.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800969a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800969e:	d011      	beq.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80096a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096a4:	d815      	bhi.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d019      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80096aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80096ae:	d110      	bne.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80096b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096b4:	3308      	adds	r3, #8
 80096b6:	4618      	mov	r0, r3
 80096b8:	f002 fa6a 	bl	800bb90 <RCCEx_PLL2_Config>
 80096bc:	4603      	mov	r3, r0
 80096be:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80096c2:	e00d      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096c4:	4b2d      	ldr	r3, [pc, #180]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80096c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c8:	4a2c      	ldr	r2, [pc, #176]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80096ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ce:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80096d0:	e006      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80096d8:	e002      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 80096da:	bf00      	nop
 80096dc:	e000      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 80096de:	bf00      	nop
    }
    if (ret == HAL_OK)
 80096e0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10d      	bne.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80096e8:	4b24      	ldr	r3, [pc, #144]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80096ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096ee:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80096f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80096fa:	4a20      	ldr	r2, [pc, #128]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80096fc:	430b      	orrs	r3, r1
 80096fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009702:	e003      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009704:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009708:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800970c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009714:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009718:	663b      	str	r3, [r7, #96]	; 0x60
 800971a:	2300      	movs	r3, #0
 800971c:	667b      	str	r3, [r7, #100]	; 0x64
 800971e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009722:	460b      	mov	r3, r1
 8009724:	4313      	orrs	r3, r2
 8009726:	d031      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8009728:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800972c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009734:	d00b      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8009736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800973a:	d804      	bhi.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800973c:	2b00      	cmp	r3, #0
 800973e:	d008      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8009740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009744:	d007      	beq.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800974c:	e004      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800974e:	bf00      	nop
 8009750:	e002      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8009752:	bf00      	nop
 8009754:	e000      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8009756:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009758:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800975c:	2b00      	cmp	r3, #0
 800975e:	d111      	bne.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009760:	4b06      	ldr	r3, [pc, #24]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009762:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800976a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800976e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009772:	4a02      	ldr	r2, [pc, #8]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009774:	430b      	orrs	r3, r1
 8009776:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800977a:	e007      	b.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800977c:	46020c00 	.word	0x46020c00
 8009780:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009784:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009788:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800978c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009794:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009798:	65bb      	str	r3, [r7, #88]	; 0x58
 800979a:	2300      	movs	r3, #0
 800979c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800979e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80097a2:	460b      	mov	r3, r1
 80097a4:	4313      	orrs	r3, r2
 80097a6:	d00c      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80097a8:	4bb2      	ldr	r3, [pc, #712]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80097aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80097ae:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80097b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80097ba:	4aae      	ldr	r2, [pc, #696]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80097bc:	430b      	orrs	r3, r1
 80097be:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80097c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ca:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80097ce:	653b      	str	r3, [r7, #80]	; 0x50
 80097d0:	2300      	movs	r3, #0
 80097d2:	657b      	str	r3, [r7, #84]	; 0x54
 80097d4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80097d8:	460b      	mov	r3, r1
 80097da:	4313      	orrs	r3, r2
 80097dc:	d019      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80097de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80097e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097ea:	d105      	bne.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80097ec:	4ba1      	ldr	r3, [pc, #644]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80097ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f0:	4aa0      	ldr	r2, [pc, #640]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80097f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097f6:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80097f8:	4b9e      	ldr	r3, [pc, #632]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80097fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80097fe:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009806:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800980a:	4a9a      	ldr	r2, [pc, #616]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800980c:	430b      	orrs	r3, r1
 800980e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800981e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009820:	2300      	movs	r3, #0
 8009822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009824:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009828:	460b      	mov	r3, r1
 800982a:	4313      	orrs	r3, r2
 800982c:	d00c      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800982e:	4b91      	ldr	r3, [pc, #580]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009834:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800983c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009840:	4a8c      	ldr	r2, [pc, #560]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009842:	430b      	orrs	r3, r1
 8009844:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800984c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009850:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009854:	643b      	str	r3, [r7, #64]	; 0x40
 8009856:	2300      	movs	r3, #0
 8009858:	647b      	str	r3, [r7, #68]	; 0x44
 800985a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800985e:	460b      	mov	r3, r1
 8009860:	4313      	orrs	r3, r2
 8009862:	d00c      	beq.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8009864:	4b83      	ldr	r3, [pc, #524]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800986a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800986e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009872:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8009876:	4a7f      	ldr	r2, [pc, #508]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009878:	430b      	orrs	r3, r1
 800987a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800987e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009886:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800988a:	63bb      	str	r3, [r7, #56]	; 0x38
 800988c:	2300      	movs	r3, #0
 800988e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009890:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009894:	460b      	mov	r3, r1
 8009896:	4313      	orrs	r3, r2
 8009898:	d00c      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800989a:	4b76      	ldr	r3, [pc, #472]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800989c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80098a0:	f023 0118 	bic.w	r1, r3, #24
 80098a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098a8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80098ac:	4a71      	ldr	r2, [pc, #452]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80098ae:	430b      	orrs	r3, r1
 80098b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80098b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80098c0:	633b      	str	r3, [r7, #48]	; 0x30
 80098c2:	2300      	movs	r3, #0
 80098c4:	637b      	str	r3, [r7, #52]	; 0x34
 80098c6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80098ca:	460b      	mov	r3, r1
 80098cc:	4313      	orrs	r3, r2
 80098ce:	d032      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80098d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80098d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098dc:	d105      	bne.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098de:	4b65      	ldr	r3, [pc, #404]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80098e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e2:	4a64      	ldr	r2, [pc, #400]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80098e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098e8:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80098ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80098f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098f6:	d108      	bne.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80098f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098fc:	3308      	adds	r3, #8
 80098fe:	4618      	mov	r0, r3
 8009900:	f002 f946 	bl	800bb90 <RCCEx_PLL2_Config>
 8009904:	4603      	mov	r3, r0
 8009906:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }
    if (ret == HAL_OK)
 800990a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10d      	bne.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8009912:	4b58      	ldr	r3, [pc, #352]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009914:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009918:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800991c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009920:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009924:	4a53      	ldr	r2, [pc, #332]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009926:	430b      	orrs	r3, r1
 8009928:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800992c:	e003      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800992e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009932:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8009936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800993a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993e:	2100      	movs	r1, #0
 8009940:	62b9      	str	r1, [r7, #40]	; 0x28
 8009942:	f003 0301 	and.w	r3, r3, #1
 8009946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009948:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800994c:	460b      	mov	r3, r1
 800994e:	4313      	orrs	r3, r2
 8009950:	d04a      	beq.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8009952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009956:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800995a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800995e:	d01e      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8009960:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009964:	d825      	bhi.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8009966:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800996a:	d00e      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800996c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009970:	d81f      	bhi.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8009972:	2b00      	cmp	r3, #0
 8009974:	d021      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8009976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800997a:	d11a      	bne.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800997c:	4b3d      	ldr	r3, [pc, #244]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800997e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009980:	4a3c      	ldr	r2, [pc, #240]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009986:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009988:	e018      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800998a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800998e:	3308      	adds	r3, #8
 8009990:	4618      	mov	r0, r3
 8009992:	f002 f8fd 	bl	800bb90 <RCCEx_PLL2_Config>
 8009996:	4603      	mov	r3, r0
 8009998:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800999c:	e00e      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800999e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099a2:	332c      	adds	r3, #44	; 0x2c
 80099a4:	4618      	mov	r0, r3
 80099a6:	f002 f98b 	bl	800bcc0 <RCCEx_PLL3_Config>
 80099aa:	4603      	mov	r3, r0
 80099ac:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80099b0:	e004      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80099b8:	e000      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 80099ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099bc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10d      	bne.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80099c4:	4b2b      	ldr	r3, [pc, #172]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80099c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80099ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80099ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80099d6:	4927      	ldr	r1, [pc, #156]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80099de:	e003      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099e0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80099e4:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80099e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f0:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80099f4:	623b      	str	r3, [r7, #32]
 80099f6:	2300      	movs	r3, #0
 80099f8:	627b      	str	r3, [r7, #36]	; 0x24
 80099fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80099fe:	460b      	mov	r3, r1
 8009a00:	4313      	orrs	r3, r2
 8009a02:	d03d      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8009a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a10:	d00e      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8009a12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a16:	d815      	bhi.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d017      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a20:	d110      	bne.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a22:	4b14      	ldr	r3, [pc, #80]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a26:	4a13      	ldr	r2, [pc, #76]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a2c:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009a2e:	e00e      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a34:	3308      	adds	r3, #8
 8009a36:	4618      	mov	r0, r3
 8009a38:	f002 f8aa 	bl	800bb90 <RCCEx_PLL2_Config>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009a42:	e004      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009a4a:	e000      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009a4c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009a4e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d110      	bne.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8009a56:	4b07      	ldr	r3, [pc, #28]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a68:	4902      	ldr	r1, [pc, #8]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8009a70:	e006      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8009a72:	bf00      	nop
 8009a74:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a78:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009a7c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8009a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a88:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009a8c:	61bb      	str	r3, [r7, #24]
 8009a8e:	2300      	movs	r3, #0
 8009a90:	61fb      	str	r3, [r7, #28]
 8009a92:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009a96:	460b      	mov	r3, r1
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	d00c      	beq.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8009a9c:	4b68      	ldr	r3, [pc, #416]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009a9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009aa2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009aaa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009aae:	4964      	ldr	r1, [pc, #400]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	2100      	movs	r1, #0
 8009ac0:	6139      	str	r1, [r7, #16]
 8009ac2:	f003 0302 	and.w	r3, r3, #2
 8009ac6:	617b      	str	r3, [r7, #20]
 8009ac8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009acc:	460b      	mov	r3, r1
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	d036      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 8009ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ad6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00c      	beq.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8009ade:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ae2:	d113      	bne.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ae8:	3308      	adds	r3, #8
 8009aea:	4618      	mov	r0, r3
 8009aec:	f002 f850 	bl	800bb90 <RCCEx_PLL2_Config>
 8009af0:	4603      	mov	r3, r0
 8009af2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8009af6:	e00d      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009afc:	332c      	adds	r3, #44	; 0x2c
 8009afe:	4618      	mov	r0, r3
 8009b00:	f002 f8de 	bl	800bcc0 <RCCEx_PLL3_Config>
 8009b04:	4603      	mov	r3, r0
 8009b06:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8009b0a:	e003      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009b12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b14:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10d      	bne.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 8009b1c:	4b48      	ldr	r3, [pc, #288]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009b1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009b22:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009b2e:	4944      	ldr	r1, [pc, #272]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009b30:	4313      	orrs	r3, r2
 8009b32:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009b36:	e003      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b38:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009b3c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8009b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	2100      	movs	r1, #0
 8009b4a:	60b9      	str	r1, [r7, #8]
 8009b4c:	f003 0304 	and.w	r3, r3, #4
 8009b50:	60fb      	str	r3, [r7, #12]
 8009b52:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009b56:	460b      	mov	r3, r1
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	d024      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 8009b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d108      	bne.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b6c:	332c      	adds	r3, #44	; 0x2c
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f002 f8a6 	bl	800bcc0 <RCCEx_PLL3_Config>
 8009b74:	4603      	mov	r3, r0
 8009b76:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }

    if (ret == HAL_OK)
 8009b7a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d10d      	bne.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 8009b82:	4b2f      	ldr	r3, [pc, #188]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009b84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009b88:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009b94:	492a      	ldr	r1, [pc, #168]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009b96:	4313      	orrs	r3, r2
 8009b98:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009b9c:	e003      	b.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b9e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009ba2:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8009ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bae:	2100      	movs	r1, #0
 8009bb0:	6039      	str	r1, [r7, #0]
 8009bb2:	f003 0308 	and.w	r3, r3, #8
 8009bb6:	607b      	str	r3, [r7, #4]
 8009bb8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	d036      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8009bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bc6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009bca:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009bce:	d00d      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8009bd0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009bd4:	d811      	bhi.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8009bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bda:	d012      	beq.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8009bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009be0:	d80b      	bhi.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00d      	beq.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8009be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bea:	d106      	bne.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009bec:	4b14      	ldr	r3, [pc, #80]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf0:	4a13      	ldr	r2, [pc, #76]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bf6:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8009bf8:	e004      	b.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009c00:	e000      	b.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 8009c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c04:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10d      	bne.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8009c0c:	4b0c      	ldr	r3, [pc, #48]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009c0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009c12:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c1a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009c1e:	4908      	ldr	r1, [pc, #32]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009c20:	4313      	orrs	r3, r2
 8009c22:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009c26:	e003      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c28:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009c2c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8009c30:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c40:	46020c00 	.word	0x46020c00

08009c44 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b089      	sub	sp, #36	; 0x24
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8009c4c:	4ba6      	ldr	r3, [pc, #664]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c54:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009c56:	4ba4      	ldr	r3, [pc, #656]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c5a:	f003 0303 	and.w	r3, r3, #3
 8009c5e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009c60:	4ba1      	ldr	r3, [pc, #644]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c64:	0a1b      	lsrs	r3, r3, #8
 8009c66:	f003 030f 	and.w	r3, r3, #15
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009c6e:	4b9e      	ldr	r3, [pc, #632]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c72:	091b      	lsrs	r3, r3, #4
 8009c74:	f003 0301 	and.w	r3, r3, #1
 8009c78:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009c7a:	4b9b      	ldr	r3, [pc, #620]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7e:	08db      	lsrs	r3, r3, #3
 8009c80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	fb02 f303 	mul.w	r3, r2, r3
 8009c8a:	ee07 3a90 	vmov	s15, r3
 8009c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c92:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	2b03      	cmp	r3, #3
 8009c9a:	d062      	beq.n	8009d62 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	f200 8081 	bhi.w	8009da6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d024      	beq.n	8009cf4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d17a      	bne.n	8009da6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	ee07 3a90 	vmov	s15, r3
 8009cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cba:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cc2:	4b89      	ldr	r3, [pc, #548]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cca:	ee07 3a90 	vmov	s15, r3
 8009cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cd6:	eddf 5a86 	vldr	s11, [pc, #536]	; 8009ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cf2:	e08f      	b.n	8009e14 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009cf4:	4b7c      	ldr	r3, [pc, #496]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d005      	beq.n	8009d0c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8009d00:	4b79      	ldr	r3, [pc, #484]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	0f1b      	lsrs	r3, r3, #28
 8009d06:	f003 030f 	and.w	r3, r3, #15
 8009d0a:	e006      	b.n	8009d1a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8009d0c:	4b76      	ldr	r3, [pc, #472]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009d0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009d12:	041b      	lsls	r3, r3, #16
 8009d14:	0f1b      	lsrs	r3, r3, #28
 8009d16:	f003 030f 	and.w	r3, r3, #15
 8009d1a:	4a76      	ldr	r2, [pc, #472]	; (8009ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d20:	ee07 3a90 	vmov	s15, r3
 8009d24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	ee07 3a90 	vmov	s15, r3
 8009d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	ee07 3a90 	vmov	s15, r3
 8009d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d40:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d44:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8009ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009d48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d60:	e058      	b.n	8009e14 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	ee07 3a90 	vmov	s15, r3
 8009d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d6c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d74:	4b5c      	ldr	r3, [pc, #368]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d7c:	ee07 3a90 	vmov	s15, r3
 8009d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d84:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d88:	eddf 5a59 	vldr	s11, [pc, #356]	; 8009ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009da0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009da4:	e036      	b.n	8009e14 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009da6:	4b50      	ldr	r3, [pc, #320]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d005      	beq.n	8009dbe <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8009db2:	4b4d      	ldr	r3, [pc, #308]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	0f1b      	lsrs	r3, r3, #28
 8009db8:	f003 030f 	and.w	r3, r3, #15
 8009dbc:	e006      	b.n	8009dcc <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8009dbe:	4b4a      	ldr	r3, [pc, #296]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009dc4:	041b      	lsls	r3, r3, #16
 8009dc6:	0f1b      	lsrs	r3, r3, #28
 8009dc8:	f003 030f 	and.w	r3, r3, #15
 8009dcc:	4a49      	ldr	r2, [pc, #292]	; (8009ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dd2:	ee07 3a90 	vmov	s15, r3
 8009dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	ee07 3a90 	vmov	s15, r3
 8009de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009de4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	ee07 3a90 	vmov	s15, r3
 8009dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009df6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e12:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8009e14:	4b34      	ldr	r3, [pc, #208]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d017      	beq.n	8009e50 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009e20:	4b31      	ldr	r3, [pc, #196]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e24:	0a5b      	lsrs	r3, r3, #9
 8009e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e2a:	ee07 3a90 	vmov	s15, r3
 8009e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8009e32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e36:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009e3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e46:	ee17 2a90 	vmov	r2, s15
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	601a      	str	r2, [r3, #0]
 8009e4e:	e002      	b.n	8009e56 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8009e56:	4b24      	ldr	r3, [pc, #144]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d017      	beq.n	8009e92 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009e62:	4b21      	ldr	r3, [pc, #132]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e66:	0c1b      	lsrs	r3, r3, #16
 8009e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e6c:	ee07 3a90 	vmov	s15, r3
 8009e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8009e74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e78:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009e7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e88:	ee17 2a90 	vmov	r2, s15
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	605a      	str	r2, [r3, #4]
 8009e90:	e002      	b.n	8009e98 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8009e98:	4b13      	ldr	r3, [pc, #76]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d017      	beq.n	8009ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009ea4:	4b10      	ldr	r3, [pc, #64]	; (8009ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea8:	0e1b      	lsrs	r3, r3, #24
 8009eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eae:	ee07 3a90 	vmov	s15, r3
 8009eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8009eb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009eba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009ebe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eca:	ee17 2a90 	vmov	r2, s15
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009ed2:	e002      	b.n	8009eda <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	609a      	str	r2, [r3, #8]
}
 8009eda:	bf00      	nop
 8009edc:	3724      	adds	r7, #36	; 0x24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	46020c00 	.word	0x46020c00
 8009eec:	4b742400 	.word	0x4b742400
 8009ef0:	46000000 	.word	0x46000000
 8009ef4:	0800d99c 	.word	0x0800d99c

08009ef8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b089      	sub	sp, #36	; 0x24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8009f00:	4ba6      	ldr	r3, [pc, #664]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f08:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009f0a:	4ba4      	ldr	r3, [pc, #656]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0e:	f003 0303 	and.w	r3, r3, #3
 8009f12:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8009f14:	4ba1      	ldr	r3, [pc, #644]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f18:	0a1b      	lsrs	r3, r3, #8
 8009f1a:	f003 030f 	and.w	r3, r3, #15
 8009f1e:	3301      	adds	r3, #1
 8009f20:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8009f22:	4b9e      	ldr	r3, [pc, #632]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f26:	091b      	lsrs	r3, r3, #4
 8009f28:	f003 0301 	and.w	r3, r3, #1
 8009f2c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8009f2e:	4b9b      	ldr	r3, [pc, #620]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f32:	08db      	lsrs	r3, r3, #3
 8009f34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	fb02 f303 	mul.w	r3, r2, r3
 8009f3e:	ee07 3a90 	vmov	s15, r3
 8009f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f46:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2b03      	cmp	r3, #3
 8009f4e:	d062      	beq.n	800a016 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	f200 8081 	bhi.w	800a05a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d024      	beq.n	8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d17a      	bne.n	800a05a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	ee07 3a90 	vmov	s15, r3
 8009f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f6e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8009f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f76:	4b89      	ldr	r3, [pc, #548]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f7e:	ee07 3a90 	vmov	s15, r3
 8009f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f8a:	eddf 5a86 	vldr	s11, [pc, #536]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fa6:	e08f      	b.n	800a0c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009fa8:	4b7c      	ldr	r3, [pc, #496]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d005      	beq.n	8009fc0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8009fb4:	4b79      	ldr	r3, [pc, #484]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	0f1b      	lsrs	r3, r3, #28
 8009fba:	f003 030f 	and.w	r3, r3, #15
 8009fbe:	e006      	b.n	8009fce <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8009fc0:	4b76      	ldr	r3, [pc, #472]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009fc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009fc6:	041b      	lsls	r3, r3, #16
 8009fc8:	0f1b      	lsrs	r3, r3, #28
 8009fca:	f003 030f 	and.w	r3, r3, #15
 8009fce:	4a76      	ldr	r2, [pc, #472]	; (800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fd4:	ee07 3a90 	vmov	s15, r3
 8009fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	ee07 3a90 	vmov	s15, r3
 8009fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	ee07 3a90 	vmov	s15, r3
 8009ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff4:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ff8:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009ffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a008:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800a00c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a010:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a014:	e058      	b.n	800a0c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	ee07 3a90 	vmov	s15, r3
 800a01c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a020:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a028:	4b5c      	ldr	r3, [pc, #368]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a02a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a02c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a030:	ee07 3a90 	vmov	s15, r3
 800a034:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a038:	ed97 6a02 	vldr	s12, [r7, #8]
 800a03c:	eddf 5a59 	vldr	s11, [pc, #356]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a040:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a044:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a048:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a04c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a050:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a054:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a058:	e036      	b.n	800a0c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800a05a:	4b50      	ldr	r3, [pc, #320]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a062:	2b00      	cmp	r3, #0
 800a064:	d005      	beq.n	800a072 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800a066:	4b4d      	ldr	r3, [pc, #308]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	0f1b      	lsrs	r3, r3, #28
 800a06c:	f003 030f 	and.w	r3, r3, #15
 800a070:	e006      	b.n	800a080 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800a072:	4b4a      	ldr	r3, [pc, #296]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a078:	041b      	lsls	r3, r3, #16
 800a07a:	0f1b      	lsrs	r3, r3, #28
 800a07c:	f003 030f 	and.w	r3, r3, #15
 800a080:	4a49      	ldr	r2, [pc, #292]	; (800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800a082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a086:	ee07 3a90 	vmov	s15, r3
 800a08a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	ee07 3a90 	vmov	s15, r3
 800a094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	ee07 3a90 	vmov	s15, r3
 800a0a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0aa:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a0ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800a0be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0c6:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800a0c8:	4b34      	ldr	r3, [pc, #208]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d017      	beq.n	800a104 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a0d4:	4b31      	ldr	r3, [pc, #196]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0d8:	0a5b      	lsrs	r3, r3, #9
 800a0da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0de:	ee07 3a90 	vmov	s15, r3
 800a0e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800a0e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0ea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a0ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0fa:	ee17 2a90 	vmov	r2, s15
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	e002      	b.n	800a10a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800a10a:	4b24      	ldr	r3, [pc, #144]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a112:	2b00      	cmp	r3, #0
 800a114:	d017      	beq.n	800a146 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a116:	4b21      	ldr	r3, [pc, #132]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a11a:	0c1b      	lsrs	r3, r3, #16
 800a11c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a120:	ee07 3a90 	vmov	s15, r3
 800a124:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800a128:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a12c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a130:	edd7 6a07 	vldr	s13, [r7, #28]
 800a134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a13c:	ee17 2a90 	vmov	r2, s15
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	605a      	str	r2, [r3, #4]
 800a144:	e002      	b.n	800a14c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800a14c:	4b13      	ldr	r3, [pc, #76]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d017      	beq.n	800a188 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a158:	4b10      	ldr	r3, [pc, #64]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a15c:	0e1b      	lsrs	r3, r3, #24
 800a15e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a162:	ee07 3a90 	vmov	s15, r3
 800a166:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800a16a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a16e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a172:	edd7 6a07 	vldr	s13, [r7, #28]
 800a176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a17a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a17e:	ee17 2a90 	vmov	r2, s15
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a186:	e002      	b.n	800a18e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	609a      	str	r2, [r3, #8]
}
 800a18e:	bf00      	nop
 800a190:	3724      	adds	r7, #36	; 0x24
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	46020c00 	.word	0x46020c00
 800a1a0:	4b742400 	.word	0x4b742400
 800a1a4:	46000000 	.word	0x46000000
 800a1a8:	0800d99c 	.word	0x0800d99c

0800a1ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b089      	sub	sp, #36	; 0x24
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800a1b4:	4ba6      	ldr	r3, [pc, #664]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1bc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800a1be:	4ba4      	ldr	r3, [pc, #656]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c2:	f003 0303 	and.w	r3, r3, #3
 800a1c6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800a1c8:	4ba1      	ldr	r3, [pc, #644]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1cc:	0a1b      	lsrs	r3, r3, #8
 800a1ce:	f003 030f 	and.w	r3, r3, #15
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800a1d6:	4b9e      	ldr	r3, [pc, #632]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1da:	091b      	lsrs	r3, r3, #4
 800a1dc:	f003 0301 	and.w	r3, r3, #1
 800a1e0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800a1e2:	4b9b      	ldr	r3, [pc, #620]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1e6:	08db      	lsrs	r3, r3, #3
 800a1e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	fb02 f303 	mul.w	r3, r2, r3
 800a1f2:	ee07 3a90 	vmov	s15, r3
 800a1f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1fa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	2b03      	cmp	r3, #3
 800a202:	d062      	beq.n	800a2ca <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	2b03      	cmp	r3, #3
 800a208:	f200 8081 	bhi.w	800a30e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d024      	beq.n	800a25c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	2b02      	cmp	r3, #2
 800a216:	d17a      	bne.n	800a30e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	ee07 3a90 	vmov	s15, r3
 800a21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a222:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a22a:	4b89      	ldr	r3, [pc, #548]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a22c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a22e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a232:	ee07 3a90 	vmov	s15, r3
 800a236:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a23a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a23e:	eddf 5a86 	vldr	s11, [pc, #536]	; 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a242:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a246:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a24a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a24e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a252:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a256:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800a25a:	e08f      	b.n	800a37c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a25c:	4b7c      	ldr	r3, [pc, #496]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d005      	beq.n	800a274 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800a268:	4b79      	ldr	r3, [pc, #484]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	0f1b      	lsrs	r3, r3, #28
 800a26e:	f003 030f 	and.w	r3, r3, #15
 800a272:	e006      	b.n	800a282 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800a274:	4b76      	ldr	r3, [pc, #472]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a276:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a27a:	041b      	lsls	r3, r3, #16
 800a27c:	0f1b      	lsrs	r3, r3, #28
 800a27e:	f003 030f 	and.w	r3, r3, #15
 800a282:	4a76      	ldr	r2, [pc, #472]	; (800a45c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a288:	ee07 3a90 	vmov	s15, r3
 800a28c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	ee07 3a90 	vmov	s15, r3
 800a296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a29a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	ee07 3a90 	vmov	s15, r3
 800a2a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2a8:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2ac:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a2b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a2c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2c8:	e058      	b.n	800a37c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	ee07 3a90 	vmov	s15, r3
 800a2d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a2d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2dc:	4b5c      	ldr	r3, [pc, #368]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a2de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e4:	ee07 3a90 	vmov	s15, r3
 800a2e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a2ec:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2f0:	eddf 5a59 	vldr	s11, [pc, #356]	; 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a2f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a2f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a2fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a300:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a304:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a308:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a30c:	e036      	b.n	800a37c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a30e:	4b50      	ldr	r3, [pc, #320]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a316:	2b00      	cmp	r3, #0
 800a318:	d005      	beq.n	800a326 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800a31a:	4b4d      	ldr	r3, [pc, #308]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	0f1b      	lsrs	r3, r3, #28
 800a320:	f003 030f 	and.w	r3, r3, #15
 800a324:	e006      	b.n	800a334 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800a326:	4b4a      	ldr	r3, [pc, #296]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a328:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a32c:	041b      	lsls	r3, r3, #16
 800a32e:	0f1b      	lsrs	r3, r3, #28
 800a330:	f003 030f 	and.w	r3, r3, #15
 800a334:	4a49      	ldr	r2, [pc, #292]	; (800a45c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a33a:	ee07 3a90 	vmov	s15, r3
 800a33e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	ee07 3a90 	vmov	s15, r3
 800a348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a34c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	ee07 3a90 	vmov	s15, r3
 800a356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a35a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a35e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a36a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a36e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a372:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a376:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a37a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800a37c:	4b34      	ldr	r3, [pc, #208]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a384:	2b00      	cmp	r3, #0
 800a386:	d017      	beq.n	800a3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a388:	4b31      	ldr	r3, [pc, #196]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a38a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a38c:	0a5b      	lsrs	r3, r3, #9
 800a38e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a392:	ee07 3a90 	vmov	s15, r3
 800a396:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800a39a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a39e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a3a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3ae:	ee17 2a90 	vmov	r2, s15
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	601a      	str	r2, [r3, #0]
 800a3b6:	e002      	b.n	800a3be <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800a3be:	4b24      	ldr	r3, [pc, #144]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d017      	beq.n	800a3fa <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a3ca:	4b21      	ldr	r3, [pc, #132]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a3cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ce:	0c1b      	lsrs	r3, r3, #16
 800a3d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3d4:	ee07 3a90 	vmov	s15, r3
 800a3d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800a3dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3e0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a3e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3f0:	ee17 2a90 	vmov	r2, s15
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	605a      	str	r2, [r3, #4]
 800a3f8:	e002      	b.n	800a400 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800a400:	4b13      	ldr	r3, [pc, #76]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d017      	beq.n	800a43c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a40c:	4b10      	ldr	r3, [pc, #64]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a40e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a410:	0e1b      	lsrs	r3, r3, #24
 800a412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a416:	ee07 3a90 	vmov	s15, r3
 800a41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800a41e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a422:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a426:	edd7 6a07 	vldr	s13, [r7, #28]
 800a42a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a42e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a432:	ee17 2a90 	vmov	r2, s15
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a43a:	e002      	b.n	800a442 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	609a      	str	r2, [r3, #8]
}
 800a442:	bf00      	nop
 800a444:	3724      	adds	r7, #36	; 0x24
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	46020c00 	.word	0x46020c00
 800a454:	4b742400 	.word	0x4b742400
 800a458:	46000000 	.word	0x46000000
 800a45c:	0800d99c 	.word	0x0800d99c

0800a460 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b08e      	sub	sp, #56	; 0x38
 800a464:	af00      	add	r7, sp, #0
 800a466:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a46a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a46e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800a472:	430b      	orrs	r3, r1
 800a474:	d145      	bne.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a476:	4ba7      	ldr	r3, [pc, #668]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a47c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a480:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800a482:	4ba4      	ldr	r3, [pc, #656]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a488:	f003 0302 	and.w	r3, r3, #2
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d108      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800a490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a496:	d104      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800a498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a49c:	637b      	str	r3, [r7, #52]	; 0x34
 800a49e:	f001 bb5a 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800a4a2:	4b9c      	ldr	r3, [pc, #624]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a4a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a4a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4b0:	d114      	bne.n	800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4b8:	d110      	bne.n	800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a4ba:	4b96      	ldr	r3, [pc, #600]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a4bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a4c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4c8:	d103      	bne.n	800a4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800a4ca:	23fa      	movs	r3, #250	; 0xfa
 800a4cc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a4ce:	f001 bb42 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800a4d2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a4d6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a4d8:	f001 bb3d 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800a4dc:	4b8d      	ldr	r3, [pc, #564]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4e8:	d107      	bne.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4f0:	d103      	bne.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800a4f2:	4b89      	ldr	r3, [pc, #548]	; (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a4f4:	637b      	str	r3, [r7, #52]	; 0x34
 800a4f6:	f001 bb2e 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	637b      	str	r3, [r7, #52]	; 0x34
 800a4fe:	f001 bb2a 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a502:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a506:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a50a:	430b      	orrs	r3, r1
 800a50c:	d151      	bne.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a50e:	4b81      	ldr	r3, [pc, #516]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a510:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a514:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a518:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51c:	2b80      	cmp	r3, #128	; 0x80
 800a51e:	d035      	beq.n	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800a520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a522:	2b80      	cmp	r3, #128	; 0x80
 800a524:	d841      	bhi.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a528:	2b60      	cmp	r3, #96	; 0x60
 800a52a:	d02a      	beq.n	800a582 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800a52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52e:	2b60      	cmp	r3, #96	; 0x60
 800a530:	d83b      	bhi.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a534:	2b40      	cmp	r3, #64	; 0x40
 800a536:	d009      	beq.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53a:	2b40      	cmp	r3, #64	; 0x40
 800a53c:	d835      	bhi.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00c      	beq.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800a544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a546:	2b20      	cmp	r3, #32
 800a548:	d012      	beq.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a54a:	e02e      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a54c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a550:	4618      	mov	r0, r3
 800a552:	f7ff fb77 	bl	8009c44 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a558:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a55a:	f001 bafc 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a55e:	f107 0318 	add.w	r3, r7, #24
 800a562:	4618      	mov	r0, r3
 800a564:	f7ff fcc8 	bl	8009ef8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a56c:	f001 baf3 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a570:	f107 030c 	add.w	r3, r7, #12
 800a574:	4618      	mov	r0, r3
 800a576:	f7ff fe19 	bl	800a1ac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a57e:	f001 baea 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a582:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a586:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a588:	f001 bae5 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a58c:	4b61      	ldr	r3, [pc, #388]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a598:	d103      	bne.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800a59a:	4b60      	ldr	r3, [pc, #384]	; (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a59c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a59e:	f001 bada 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a5a6:	f001 bad6 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a5ae:	f001 bad2 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800a5b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5b6:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a5ba:	430b      	orrs	r3, r1
 800a5bc:	d158      	bne.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a5be:	4b55      	ldr	r3, [pc, #340]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a5c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a5c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5c8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5d0:	d03b      	beq.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5d8:	d846      	bhi.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5e0:	d02e      	beq.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800a5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5e8:	d83e      	bhi.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5f0:	d00b      	beq.n	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5f8:	d836      	bhi.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d00d      	beq.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800a600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a606:	d012      	beq.n	800a62e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800a608:	e02e      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a60a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a60e:	4618      	mov	r0, r3
 800a610:	f7ff fb18 	bl	8009c44 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a616:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a618:	f001 ba9d 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a61c:	f107 0318 	add.w	r3, r7, #24
 800a620:	4618      	mov	r0, r3
 800a622:	f7ff fc69 	bl	8009ef8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a62a:	f001 ba94 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a62e:	f107 030c 	add.w	r3, r7, #12
 800a632:	4618      	mov	r0, r3
 800a634:	f7ff fdba 	bl	800a1ac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a63c:	f001 ba8b 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a640:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a644:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a646:	f001 ba86 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a64a:	4b32      	ldr	r3, [pc, #200]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a656:	d103      	bne.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800a658:	4b30      	ldr	r3, [pc, #192]	; (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a65a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a65c:	f001 ba7b 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a660:	2300      	movs	r3, #0
 800a662:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a664:	f001 ba77 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800a668:	2300      	movs	r3, #0
 800a66a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a66c:	f001 ba73 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800a670:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a674:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a678:	430b      	orrs	r3, r1
 800a67a:	d126      	bne.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800a67c:	4b25      	ldr	r3, [pc, #148]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a67e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a686:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800a688:	4b22      	ldr	r3, [pc, #136]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a694:	d106      	bne.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d103      	bne.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800a69c:	4b1f      	ldr	r3, [pc, #124]	; (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a69e:	637b      	str	r3, [r7, #52]	; 0x34
 800a6a0:	f001 ba59 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800a6a4:	4b1b      	ldr	r3, [pc, #108]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6b0:	d107      	bne.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6b8:	d103      	bne.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800a6ba:	4b19      	ldr	r3, [pc, #100]	; (800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a6bc:	637b      	str	r3, [r7, #52]	; 0x34
 800a6be:	f001 ba4a 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a6c6:	f001 ba46 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800a6ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6ce:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800a6d2:	430b      	orrs	r3, r1
 800a6d4:	d16e      	bne.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a6d6:	4b0f      	ldr	r3, [pc, #60]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a6d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6dc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a6e0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a6e8:	d03d      	beq.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a6f0:	d85c      	bhi.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6f8:	d014      	beq.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a700:	d854      	bhi.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a704:	2b00      	cmp	r3, #0
 800a706:	d01f      	beq.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800a708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a70e:	d012      	beq.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800a710:	e04c      	b.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a712:	bf00      	nop
 800a714:	46020c00 	.word	0x46020c00
 800a718:	0007a120 	.word	0x0007a120
 800a71c:	00f42400 	.word	0x00f42400
 800a720:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a728:	4618      	mov	r0, r3
 800a72a:	f7ff fa8b 	bl	8009c44 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a730:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a732:	f001 ba10 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a736:	f107 0318 	add.w	r3, r7, #24
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7ff fbdc 	bl	8009ef8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a744:	f001 ba07 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a748:	4ba7      	ldr	r3, [pc, #668]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a754:	d103      	bne.n	800a75e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800a756:	4ba5      	ldr	r3, [pc, #660]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a758:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a75a:	f001 b9fc 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a75e:	2300      	movs	r3, #0
 800a760:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a762:	f001 b9f8 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a766:	4ba0      	ldr	r3, [pc, #640]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f003 0320 	and.w	r3, r3, #32
 800a76e:	2b20      	cmp	r3, #32
 800a770:	d118      	bne.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a772:	4b9d      	ldr	r3, [pc, #628]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d005      	beq.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a77e:	4b9a      	ldr	r3, [pc, #616]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	0e1b      	lsrs	r3, r3, #24
 800a784:	f003 030f 	and.w	r3, r3, #15
 800a788:	e006      	b.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a78a:	4b97      	ldr	r3, [pc, #604]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a78c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a790:	041b      	lsls	r3, r3, #16
 800a792:	0e1b      	lsrs	r3, r3, #24
 800a794:	f003 030f 	and.w	r3, r3, #15
 800a798:	4a95      	ldr	r2, [pc, #596]	; (800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a79a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a79e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a7a0:	f001 b9d9 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a7a8:	f001 b9d5 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a7b0:	f001 b9d1 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a7b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7b8:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800a7bc:	430b      	orrs	r3, r1
 800a7be:	d17f      	bne.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a7c0:	4b89      	ldr	r3, [pc, #548]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a7c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a7c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7ca:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d165      	bne.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a7d2:	4b85      	ldr	r3, [pc, #532]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a7d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7d8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a7dc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800a7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a7e4:	d034      	beq.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a7ec:	d853      	bhi.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7f4:	d00b      	beq.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7fc:	d84b      	bhi.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	2b00      	cmp	r3, #0
 800a802:	d016      	beq.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800a804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a806:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a80a:	d009      	beq.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a80c:	e043      	b.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a80e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a812:	4618      	mov	r0, r3
 800a814:	f7ff fa16 	bl	8009c44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a81c:	f001 b99b 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a820:	f107 0318 	add.w	r3, r7, #24
 800a824:	4618      	mov	r0, r3
 800a826:	f7ff fb67 	bl	8009ef8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a82e:	f001 b992 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a832:	4b6d      	ldr	r3, [pc, #436]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a83a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a83e:	d103      	bne.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800a840:	4b6a      	ldr	r3, [pc, #424]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a842:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a844:	f001 b987 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800a848:	2300      	movs	r3, #0
 800a84a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a84c:	f001 b983 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a850:	4b65      	ldr	r3, [pc, #404]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 0320 	and.w	r3, r3, #32
 800a858:	2b20      	cmp	r3, #32
 800a85a:	d118      	bne.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a85c:	4b62      	ldr	r3, [pc, #392]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a864:	2b00      	cmp	r3, #0
 800a866:	d005      	beq.n	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800a868:	4b5f      	ldr	r3, [pc, #380]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	0e1b      	lsrs	r3, r3, #24
 800a86e:	f003 030f 	and.w	r3, r3, #15
 800a872:	e006      	b.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a874:	4b5c      	ldr	r3, [pc, #368]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a876:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a87a:	041b      	lsls	r3, r3, #16
 800a87c:	0e1b      	lsrs	r3, r3, #24
 800a87e:	f003 030f 	and.w	r3, r3, #15
 800a882:	4a5b      	ldr	r2, [pc, #364]	; (800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a888:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a88a:	f001 b964 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800a88e:	2300      	movs	r3, #0
 800a890:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a892:	f001 b960 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800a896:	2300      	movs	r3, #0
 800a898:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a89a:	f001 b95c 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800a89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8a4:	d108      	bne.n	800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7ff f9ca 	bl	8009c44 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b2:	637b      	str	r3, [r7, #52]	; 0x34
 800a8b4:	f001 b94f 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	637b      	str	r3, [r7, #52]	; 0x34
 800a8bc:	f001 b94b 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800a8c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8c4:	1e51      	subs	r1, r2, #1
 800a8c6:	430b      	orrs	r3, r1
 800a8c8:	d136      	bne.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a8ca:	4b47      	ldr	r3, [pc, #284]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a8cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8d0:	f003 0303 	and.w	r3, r3, #3
 800a8d4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d104      	bne.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800a8dc:	f7fe f968 	bl	8008bb0 <HAL_RCC_GetPCLK2Freq>
 800a8e0:	6378      	str	r0, [r7, #52]	; 0x34
 800a8e2:	f001 b938 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d104      	bne.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a8ec:	f7fe f830 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800a8f0:	6378      	str	r0, [r7, #52]	; 0x34
 800a8f2:	f001 b930 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800a8f6:	4b3c      	ldr	r3, [pc, #240]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a902:	d106      	bne.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800a904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a906:	2b02      	cmp	r3, #2
 800a908:	d103      	bne.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800a90a:	4b3a      	ldr	r3, [pc, #232]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a90c:	637b      	str	r3, [r7, #52]	; 0x34
 800a90e:	f001 b922 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800a912:	4b35      	ldr	r3, [pc, #212]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a918:	f003 0302 	and.w	r3, r3, #2
 800a91c:	2b02      	cmp	r3, #2
 800a91e:	d107      	bne.n	800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a922:	2b03      	cmp	r3, #3
 800a924:	d104      	bne.n	800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800a926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a92a:	637b      	str	r3, [r7, #52]	; 0x34
 800a92c:	f001 b913 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800a930:	2300      	movs	r3, #0
 800a932:	637b      	str	r3, [r7, #52]	; 0x34
 800a934:	f001 b90f 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800a938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a93c:	1e91      	subs	r1, r2, #2
 800a93e:	430b      	orrs	r3, r1
 800a940:	d136      	bne.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a942:	4b29      	ldr	r3, [pc, #164]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a948:	f003 030c 	and.w	r3, r3, #12
 800a94c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800a94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a950:	2b00      	cmp	r3, #0
 800a952:	d104      	bne.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a954:	f7fe f918 	bl	8008b88 <HAL_RCC_GetPCLK1Freq>
 800a958:	6378      	str	r0, [r7, #52]	; 0x34
 800a95a:	f001 b8fc 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800a95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a960:	2b04      	cmp	r3, #4
 800a962:	d104      	bne.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a964:	f7fd fff4 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800a968:	6378      	str	r0, [r7, #52]	; 0x34
 800a96a:	f001 b8f4 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800a96e:	4b1e      	ldr	r3, [pc, #120]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a97a:	d106      	bne.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97e:	2b08      	cmp	r3, #8
 800a980:	d103      	bne.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800a982:	4b1c      	ldr	r3, [pc, #112]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a984:	637b      	str	r3, [r7, #52]	; 0x34
 800a986:	f001 b8e6 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800a98a:	4b17      	ldr	r3, [pc, #92]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a98c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a990:	f003 0302 	and.w	r3, r3, #2
 800a994:	2b02      	cmp	r3, #2
 800a996:	d107      	bne.n	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800a998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99a:	2b0c      	cmp	r3, #12
 800a99c:	d104      	bne.n	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800a99e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9a2:	637b      	str	r3, [r7, #52]	; 0x34
 800a9a4:	f001 b8d7 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	637b      	str	r3, [r7, #52]	; 0x34
 800a9ac:	f001 b8d3 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800a9b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9b4:	1f11      	subs	r1, r2, #4
 800a9b6:	430b      	orrs	r3, r1
 800a9b8:	d13f      	bne.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a9ba:	4b0b      	ldr	r3, [pc, #44]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a9bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a9c4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d104      	bne.n	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a9cc:	f7fe f8dc 	bl	8008b88 <HAL_RCC_GetPCLK1Freq>
 800a9d0:	6378      	str	r0, [r7, #52]	; 0x34
 800a9d2:	f001 b8c0 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800a9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d8:	2b10      	cmp	r3, #16
 800a9da:	d10d      	bne.n	800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a9dc:	f7fd ffb8 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800a9e0:	6378      	str	r0, [r7, #52]	; 0x34
 800a9e2:	f001 b8b8 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a9e6:	bf00      	nop
 800a9e8:	46020c00 	.word	0x46020c00
 800a9ec:	02dc6c00 	.word	0x02dc6c00
 800a9f0:	0800d99c 	.word	0x0800d99c
 800a9f4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800a9f8:	4ba8      	ldr	r3, [pc, #672]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa04:	d106      	bne.n	800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800aa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa08:	2b20      	cmp	r3, #32
 800aa0a:	d103      	bne.n	800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800aa0c:	4ba4      	ldr	r3, [pc, #656]	; (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800aa0e:	637b      	str	r3, [r7, #52]	; 0x34
 800aa10:	f001 b8a1 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800aa14:	4ba1      	ldr	r3, [pc, #644]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aa1a:	f003 0302 	and.w	r3, r3, #2
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d107      	bne.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800aa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa24:	2b30      	cmp	r3, #48	; 0x30
 800aa26:	d104      	bne.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800aa28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa2c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa2e:	f001 b892 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800aa32:	2300      	movs	r3, #0
 800aa34:	637b      	str	r3, [r7, #52]	; 0x34
 800aa36:	f001 b88e 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800aa3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa3e:	f1a2 0108 	sub.w	r1, r2, #8
 800aa42:	430b      	orrs	r3, r1
 800aa44:	d136      	bne.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800aa46:	4b95      	ldr	r3, [pc, #596]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa4c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aa50:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800aa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d104      	bne.n	800aa62 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800aa58:	f7fe f896 	bl	8008b88 <HAL_RCC_GetPCLK1Freq>
 800aa5c:	6378      	str	r0, [r7, #52]	; 0x34
 800aa5e:	f001 b87a 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800aa62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa64:	2b40      	cmp	r3, #64	; 0x40
 800aa66:	d104      	bne.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aa68:	f7fd ff72 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800aa6c:	6378      	str	r0, [r7, #52]	; 0x34
 800aa6e:	f001 b872 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800aa72:	4b8a      	ldr	r3, [pc, #552]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa7e:	d106      	bne.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800aa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa82:	2b80      	cmp	r3, #128	; 0x80
 800aa84:	d103      	bne.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800aa86:	4b86      	ldr	r3, [pc, #536]	; (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800aa88:	637b      	str	r3, [r7, #52]	; 0x34
 800aa8a:	f001 b864 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800aa8e:	4b83      	ldr	r3, [pc, #524]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aa94:	f003 0302 	and.w	r3, r3, #2
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d107      	bne.n	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800aa9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9e:	2bc0      	cmp	r3, #192	; 0xc0
 800aaa0:	d104      	bne.n	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800aaa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaa6:	637b      	str	r3, [r7, #52]	; 0x34
 800aaa8:	f001 b855 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800aaac:	2300      	movs	r3, #0
 800aaae:	637b      	str	r3, [r7, #52]	; 0x34
 800aab0:	f001 b851 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800aab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aab8:	f1a2 0110 	sub.w	r1, r2, #16
 800aabc:	430b      	orrs	r3, r1
 800aabe:	d139      	bne.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800aac0:	4b76      	ldr	r3, [pc, #472]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaca:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800aacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d104      	bne.n	800aadc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800aad2:	f7fe f859 	bl	8008b88 <HAL_RCC_GetPCLK1Freq>
 800aad6:	6378      	str	r0, [r7, #52]	; 0x34
 800aad8:	f001 b83d 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aae2:	d104      	bne.n	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aae4:	f7fd ff34 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800aae8:	6378      	str	r0, [r7, #52]	; 0x34
 800aaea:	f001 b834 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800aaee:	4b6b      	ldr	r3, [pc, #428]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aaf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aafa:	d107      	bne.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800aafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab02:	d103      	bne.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800ab04:	4b66      	ldr	r3, [pc, #408]	; (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ab06:	637b      	str	r3, [r7, #52]	; 0x34
 800ab08:	f001 b825 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800ab0c:	4b63      	ldr	r3, [pc, #396]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ab0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ab12:	f003 0302 	and.w	r3, r3, #2
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d108      	bne.n	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab20:	d104      	bne.n	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800ab22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab26:	637b      	str	r3, [r7, #52]	; 0x34
 800ab28:	f001 b815 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	637b      	str	r3, [r7, #52]	; 0x34
 800ab30:	f001 b811 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800ab34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab38:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800ab3c:	430b      	orrs	r3, r1
 800ab3e:	d139      	bne.n	800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800ab40:	4b56      	ldr	r3, [pc, #344]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ab42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ab46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ab4a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800ab4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d104      	bne.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ab52:	f7fe f819 	bl	8008b88 <HAL_RCC_GetPCLK1Freq>
 800ab56:	6378      	str	r0, [r7, #52]	; 0x34
 800ab58:	f000 bffd 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800ab5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab62:	d104      	bne.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ab64:	f7fd fef4 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800ab68:	6378      	str	r0, [r7, #52]	; 0x34
 800ab6a:	f000 bff4 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800ab6e:	4b4b      	ldr	r3, [pc, #300]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab7a:	d107      	bne.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800ab7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab82:	d103      	bne.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800ab84:	4b46      	ldr	r3, [pc, #280]	; (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ab86:	637b      	str	r3, [r7, #52]	; 0x34
 800ab88:	f000 bfe5 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800ab8c:	4b43      	ldr	r3, [pc, #268]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ab8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ab92:	f003 0302 	and.w	r3, r3, #2
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	d108      	bne.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aba0:	d104      	bne.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800aba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aba6:	637b      	str	r3, [r7, #52]	; 0x34
 800aba8:	f000 bfd5 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800abac:	2300      	movs	r3, #0
 800abae:	637b      	str	r3, [r7, #52]	; 0x34
 800abb0:	f000 bfd1 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800abb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abb8:	f1a2 0120 	sub.w	r1, r2, #32
 800abbc:	430b      	orrs	r3, r1
 800abbe:	d158      	bne.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800abc0:	4b36      	ldr	r3, [pc, #216]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800abc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800abc6:	f003 0307 	and.w	r3, r3, #7
 800abca:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800abcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d104      	bne.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800abd2:	f7fe f801 	bl	8008bd8 <HAL_RCC_GetPCLK3Freq>
 800abd6:	6378      	str	r0, [r7, #52]	; 0x34
 800abd8:	f000 bfbd 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800abdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d104      	bne.n	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800abe2:	f7fd feb5 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800abe6:	6378      	str	r0, [r7, #52]	; 0x34
 800abe8:	f000 bfb5 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800abec:	4b2b      	ldr	r3, [pc, #172]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abf8:	d106      	bne.n	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800abfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d103      	bne.n	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800ac00:	4b27      	ldr	r3, [pc, #156]	; (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ac02:	637b      	str	r3, [r7, #52]	; 0x34
 800ac04:	f000 bfa7 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800ac08:	4b24      	ldr	r3, [pc, #144]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ac0e:	f003 0302 	and.w	r3, r3, #2
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d107      	bne.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac18:	2b03      	cmp	r3, #3
 800ac1a:	d104      	bne.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800ac1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac20:	637b      	str	r3, [r7, #52]	; 0x34
 800ac22:	f000 bf98 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800ac26:	4b1d      	ldr	r3, [pc, #116]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f003 0320 	and.w	r3, r3, #32
 800ac2e:	2b20      	cmp	r3, #32
 800ac30:	d11b      	bne.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800ac32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac34:	2b04      	cmp	r3, #4
 800ac36:	d118      	bne.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ac38:	4b18      	ldr	r3, [pc, #96]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d005      	beq.n	800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800ac44:	4b15      	ldr	r3, [pc, #84]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	0e1b      	lsrs	r3, r3, #24
 800ac4a:	f003 030f 	and.w	r3, r3, #15
 800ac4e:	e006      	b.n	800ac5e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800ac50:	4b12      	ldr	r3, [pc, #72]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac56:	041b      	lsls	r3, r3, #16
 800ac58:	0e1b      	lsrs	r3, r3, #24
 800ac5a:	f003 030f 	and.w	r3, r3, #15
 800ac5e:	4a11      	ldr	r2, [pc, #68]	; (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ac60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac64:	637b      	str	r3, [r7, #52]	; 0x34
 800ac66:	f000 bf76 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	637b      	str	r3, [r7, #52]	; 0x34
 800ac6e:	f000 bf72 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800ac72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac76:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ac7a:	430b      	orrs	r3, r1
 800ac7c:	d172      	bne.n	800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800ac7e:	4b07      	ldr	r3, [pc, #28]	; (800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ac84:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ac88:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac90:	d10a      	bne.n	800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ac92:	f7fd fe5d 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800ac96:	6378      	str	r0, [r7, #52]	; 0x34
 800ac98:	f000 bf5d 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ac9c:	46020c00 	.word	0x46020c00
 800aca0:	00f42400 	.word	0x00f42400
 800aca4:	0800d99c 	.word	0x0800d99c
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800aca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acae:	d108      	bne.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acb0:	f107 0318 	add.w	r3, r7, #24
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7ff f91f 	bl	8009ef8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800acba:	6a3b      	ldr	r3, [r7, #32]
 800acbc:	637b      	str	r3, [r7, #52]	; 0x34
 800acbe:	f000 bf4a 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800acc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d104      	bne.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800acc8:	f7fd ff44 	bl	8008b54 <HAL_RCC_GetHCLKFreq>
 800accc:	6378      	str	r0, [r7, #52]	; 0x34
 800acce:	f000 bf42 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800acd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800acd8:	d122      	bne.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800acda:	4bb0      	ldr	r3, [pc, #704]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 0320 	and.w	r3, r3, #32
 800ace2:	2b20      	cmp	r3, #32
 800ace4:	d118      	bne.n	800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ace6:	4bad      	ldr	r3, [pc, #692]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d005      	beq.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800acf2:	4baa      	ldr	r3, [pc, #680]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	0e1b      	lsrs	r3, r3, #24
 800acf8:	f003 030f 	and.w	r3, r3, #15
 800acfc:	e006      	b.n	800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800acfe:	4ba7      	ldr	r3, [pc, #668]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ad04:	041b      	lsls	r3, r3, #16
 800ad06:	0e1b      	lsrs	r3, r3, #24
 800ad08:	f003 030f 	and.w	r3, r3, #15
 800ad0c:	4aa4      	ldr	r2, [pc, #656]	; (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ad0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad12:	637b      	str	r3, [r7, #52]	; 0x34
 800ad14:	f000 bf1f 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	637b      	str	r3, [r7, #52]	; 0x34
 800ad1c:	f000 bf1b 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800ad20:	4b9e      	ldr	r3, [pc, #632]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad2c:	d107      	bne.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad34:	d103      	bne.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800ad36:	4b9b      	ldr	r3, [pc, #620]	; (800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ad38:	637b      	str	r3, [r7, #52]	; 0x34
 800ad3a:	f000 bf0c 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800ad3e:	4b97      	ldr	r3, [pc, #604]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad4a:	d107      	bne.n	800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800ad4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad52:	d103      	bne.n	800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800ad54:	4b93      	ldr	r3, [pc, #588]	; (800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ad56:	637b      	str	r3, [r7, #52]	; 0x34
 800ad58:	f000 befd 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	637b      	str	r3, [r7, #52]	; 0x34
 800ad60:	f000 bef9 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800ad64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad68:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ad6c:	430b      	orrs	r3, r1
 800ad6e:	d158      	bne.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800ad70:	4b8a      	ldr	r3, [pc, #552]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ad76:	f003 0307 	and.w	r3, r3, #7
 800ad7a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7e:	2b04      	cmp	r3, #4
 800ad80:	d84b      	bhi.n	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800ad82:	a201      	add	r2, pc, #4	; (adr r2, 800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800ad84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad88:	0800adc1 	.word	0x0800adc1
 800ad8c:	0800ad9d 	.word	0x0800ad9d
 800ad90:	0800adaf 	.word	0x0800adaf
 800ad94:	0800adcb 	.word	0x0800adcb
 800ad98:	0800add5 	.word	0x0800add5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fe ff4f 	bl	8009c44 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800adaa:	f000 bed4 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adae:	f107 030c 	add.w	r3, r7, #12
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7ff f9fa 	bl	800a1ac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800adbc:	f000 becb 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800adc0:	f7fd fec8 	bl	8008b54 <HAL_RCC_GetHCLKFreq>
 800adc4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800adc6:	f000 bec6 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800adca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800adce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800add0:	f000 bec1 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800add4:	4b71      	ldr	r3, [pc, #452]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 0320 	and.w	r3, r3, #32
 800addc:	2b20      	cmp	r3, #32
 800adde:	d118      	bne.n	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ade0:	4b6e      	ldr	r3, [pc, #440]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d005      	beq.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800adec:	4b6b      	ldr	r3, [pc, #428]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	0e1b      	lsrs	r3, r3, #24
 800adf2:	f003 030f 	and.w	r3, r3, #15
 800adf6:	e006      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800adf8:	4b68      	ldr	r3, [pc, #416]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800adfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800adfe:	041b      	lsls	r3, r3, #16
 800ae00:	0e1b      	lsrs	r3, r3, #24
 800ae02:	f003 030f 	and.w	r3, r3, #15
 800ae06:	4a66      	ldr	r2, [pc, #408]	; (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ae08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae0c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ae0e:	f000 bea2 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ae12:	2300      	movs	r3, #0
 800ae14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae16:	f000 be9e 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae1e:	f000 be9a 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800ae22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae26:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800ae2a:	430b      	orrs	r3, r1
 800ae2c:	d167      	bne.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800ae2e:	4b5b      	ldr	r3, [pc, #364]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ae30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ae34:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ae38:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae40:	d036      	beq.n	800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800ae42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae48:	d855      	bhi.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae50:	d029      	beq.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800ae52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae58:	d84d      	bhi.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae60:	d013      	beq.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800ae62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae68:	d845      	bhi.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d015      	beq.n	800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800ae70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae76:	d13e      	bne.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7fe fee1 	bl	8009c44 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ae82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae86:	f000 be66 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae8a:	f107 030c 	add.w	r3, r7, #12
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7ff f98c 	bl	800a1ac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae98:	f000 be5d 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800ae9c:	f7fd fe5a 	bl	8008b54 <HAL_RCC_GetHCLKFreq>
 800aea0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800aea2:	f000 be58 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800aea6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800aeaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aeac:	f000 be53 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800aeb0:	4b3a      	ldr	r3, [pc, #232]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f003 0320 	and.w	r3, r3, #32
 800aeb8:	2b20      	cmp	r3, #32
 800aeba:	d118      	bne.n	800aeee <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aebc:	4b37      	ldr	r3, [pc, #220]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d005      	beq.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800aec8:	4b34      	ldr	r3, [pc, #208]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	0e1b      	lsrs	r3, r3, #24
 800aece:	f003 030f 	and.w	r3, r3, #15
 800aed2:	e006      	b.n	800aee2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800aed4:	4b31      	ldr	r3, [pc, #196]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aed6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aeda:	041b      	lsls	r3, r3, #16
 800aedc:	0e1b      	lsrs	r3, r3, #24
 800aede:	f003 030f 	and.w	r3, r3, #15
 800aee2:	4a2f      	ldr	r2, [pc, #188]	; (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800aee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aee8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aeea:	f000 be34 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800aeee:	2300      	movs	r3, #0
 800aef0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aef2:	f000 be30 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800aef6:	2300      	movs	r3, #0
 800aef8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aefa:	f000 be2c 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800aefe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af02:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800af06:	430b      	orrs	r3, r1
 800af08:	d152      	bne.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800af0a:	4b24      	ldr	r3, [pc, #144]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800af0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800af14:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800af16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d104      	bne.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800af1c:	f7fd fe34 	bl	8008b88 <HAL_RCC_GetPCLK1Freq>
 800af20:	6378      	str	r0, [r7, #52]	; 0x34
 800af22:	f000 be18 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800af26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af2c:	d104      	bne.n	800af38 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800af2e:	f7fd fd0f 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800af32:	6378      	str	r0, [r7, #52]	; 0x34
 800af34:	f000 be0f 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800af38:	4b18      	ldr	r3, [pc, #96]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af44:	d107      	bne.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800af46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af4c:	d103      	bne.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800af4e:	4b15      	ldr	r3, [pc, #84]	; (800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800af50:	637b      	str	r3, [r7, #52]	; 0x34
 800af52:	f000 be00 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800af56:	4b11      	ldr	r3, [pc, #68]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 0320 	and.w	r3, r3, #32
 800af5e:	2b20      	cmp	r3, #32
 800af60:	d122      	bne.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800af62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800af68:	d11e      	bne.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800af6a:	4b0c      	ldr	r3, [pc, #48]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af72:	2b00      	cmp	r3, #0
 800af74:	d005      	beq.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800af76:	4b09      	ldr	r3, [pc, #36]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	0e1b      	lsrs	r3, r3, #24
 800af7c:	f003 030f 	and.w	r3, r3, #15
 800af80:	e006      	b.n	800af90 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800af82:	4b06      	ldr	r3, [pc, #24]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800af84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800af88:	041b      	lsls	r3, r3, #16
 800af8a:	0e1b      	lsrs	r3, r3, #24
 800af8c:	f003 030f 	and.w	r3, r3, #15
 800af90:	4a03      	ldr	r2, [pc, #12]	; (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800af92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af96:	637b      	str	r3, [r7, #52]	; 0x34
 800af98:	f000 bddd 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800af9c:	46020c00 	.word	0x46020c00
 800afa0:	0800d99c 	.word	0x0800d99c
 800afa4:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800afa8:	2300      	movs	r3, #0
 800afaa:	637b      	str	r3, [r7, #52]	; 0x34
 800afac:	f000 bdd3 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800afb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afb4:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800afb8:	430b      	orrs	r3, r1
 800afba:	d14c      	bne.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800afbc:	4ba8      	ldr	r3, [pc, #672]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800afbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afc2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800afc6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800afc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d104      	bne.n	800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800afce:	f7fd fddb 	bl	8008b88 <HAL_RCC_GetPCLK1Freq>
 800afd2:	6378      	str	r0, [r7, #52]	; 0x34
 800afd4:	f000 bdbf 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800afd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afde:	d104      	bne.n	800afea <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800afe0:	f7fd fcb6 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800afe4:	6378      	str	r0, [r7, #52]	; 0x34
 800afe6:	f000 bdb6 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800afea:	4b9d      	ldr	r3, [pc, #628]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aff6:	d107      	bne.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800affe:	d103      	bne.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800b000:	4b98      	ldr	r3, [pc, #608]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b002:	637b      	str	r3, [r7, #52]	; 0x34
 800b004:	f000 bda7 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800b008:	4b95      	ldr	r3, [pc, #596]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f003 0320 	and.w	r3, r3, #32
 800b010:	2b20      	cmp	r3, #32
 800b012:	d11c      	bne.n	800b04e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800b014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b016:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b01a:	d118      	bne.n	800b04e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b01c:	4b90      	ldr	r3, [pc, #576]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b024:	2b00      	cmp	r3, #0
 800b026:	d005      	beq.n	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800b028:	4b8d      	ldr	r3, [pc, #564]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	0e1b      	lsrs	r3, r3, #24
 800b02e:	f003 030f 	and.w	r3, r3, #15
 800b032:	e006      	b.n	800b042 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800b034:	4b8a      	ldr	r3, [pc, #552]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b036:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b03a:	041b      	lsls	r3, r3, #16
 800b03c:	0e1b      	lsrs	r3, r3, #24
 800b03e:	f003 030f 	and.w	r3, r3, #15
 800b042:	4a89      	ldr	r2, [pc, #548]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b048:	637b      	str	r3, [r7, #52]	; 0x34
 800b04a:	f000 bd84 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800b04e:	2300      	movs	r3, #0
 800b050:	637b      	str	r3, [r7, #52]	; 0x34
 800b052:	f000 bd80 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800b056:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b05a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b05e:	430b      	orrs	r3, r1
 800b060:	d158      	bne.n	800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b062:	4b7f      	ldr	r3, [pc, #508]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b064:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b068:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b06c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b070:	2bc0      	cmp	r3, #192	; 0xc0
 800b072:	d028      	beq.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800b074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b076:	2bc0      	cmp	r3, #192	; 0xc0
 800b078:	d848      	bhi.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800b07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07c:	2b80      	cmp	r3, #128	; 0x80
 800b07e:	d00e      	beq.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800b080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b082:	2b80      	cmp	r3, #128	; 0x80
 800b084:	d842      	bhi.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d003      	beq.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800b08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08e:	2b40      	cmp	r3, #64	; 0x40
 800b090:	d014      	beq.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800b092:	e03b      	b.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800b094:	f7fd fda0 	bl	8008bd8 <HAL_RCC_GetPCLK3Freq>
 800b098:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b09a:	f000 bd5c 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b09e:	4b70      	ldr	r3, [pc, #448]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0aa:	d103      	bne.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800b0ac:	4b6d      	ldr	r3, [pc, #436]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b0ae:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b0b0:	f000 bd51 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0b8:	f000 bd4d 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800b0bc:	f7fd fc48 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800b0c0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b0c2:	f000 bd48 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b0c6:	4b66      	ldr	r3, [pc, #408]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f003 0320 	and.w	r3, r3, #32
 800b0ce:	2b20      	cmp	r3, #32
 800b0d0:	d118      	bne.n	800b104 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b0d2:	4b63      	ldr	r3, [pc, #396]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d005      	beq.n	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800b0de:	4b60      	ldr	r3, [pc, #384]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	0e1b      	lsrs	r3, r3, #24
 800b0e4:	f003 030f 	and.w	r3, r3, #15
 800b0e8:	e006      	b.n	800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800b0ea:	4b5d      	ldr	r3, [pc, #372]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b0ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b0f0:	041b      	lsls	r3, r3, #16
 800b0f2:	0e1b      	lsrs	r3, r3, #24
 800b0f4:	f003 030f 	and.w	r3, r3, #15
 800b0f8:	4a5b      	ldr	r2, [pc, #364]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b0fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0fe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b100:	f000 bd29 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b104:	2300      	movs	r3, #0
 800b106:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b108:	f000 bd25 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800b10c:	2300      	movs	r3, #0
 800b10e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b110:	f000 bd21 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800b114:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b118:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800b11c:	430b      	orrs	r3, r1
 800b11e:	d14c      	bne.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b120:	4b4f      	ldr	r3, [pc, #316]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b126:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b12a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800b12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d104      	bne.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b132:	f7fd fd29 	bl	8008b88 <HAL_RCC_GetPCLK1Freq>
 800b136:	6378      	str	r0, [r7, #52]	; 0x34
 800b138:	f000 bd0d 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800b13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b142:	d104      	bne.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b144:	f7fd fc04 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800b148:	6378      	str	r0, [r7, #52]	; 0x34
 800b14a:	f000 bd04 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800b14e:	4b44      	ldr	r3, [pc, #272]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b15a:	d107      	bne.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b162:	d103      	bne.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800b164:	4b3f      	ldr	r3, [pc, #252]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b166:	637b      	str	r3, [r7, #52]	; 0x34
 800b168:	f000 bcf5 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800b16c:	4b3c      	ldr	r3, [pc, #240]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f003 0320 	and.w	r3, r3, #32
 800b174:	2b20      	cmp	r3, #32
 800b176:	d11c      	bne.n	800b1b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800b178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b17e:	d118      	bne.n	800b1b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b180:	4b37      	ldr	r3, [pc, #220]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d005      	beq.n	800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800b18c:	4b34      	ldr	r3, [pc, #208]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	0e1b      	lsrs	r3, r3, #24
 800b192:	f003 030f 	and.w	r3, r3, #15
 800b196:	e006      	b.n	800b1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800b198:	4b31      	ldr	r3, [pc, #196]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b19a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b19e:	041b      	lsls	r3, r3, #16
 800b1a0:	0e1b      	lsrs	r3, r3, #24
 800b1a2:	f003 030f 	and.w	r3, r3, #15
 800b1a6:	4a30      	ldr	r2, [pc, #192]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b1ae:	f000 bcd2 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	637b      	str	r3, [r7, #52]	; 0x34
 800b1b6:	f000 bcce 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800b1ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1be:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800b1c2:	430b      	orrs	r3, r1
 800b1c4:	d152      	bne.n	800b26c <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800b1c6:	4b26      	ldr	r3, [pc, #152]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b1c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b1cc:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800b1d0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d104      	bne.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b1d8:	f7fd fcd6 	bl	8008b88 <HAL_RCC_GetPCLK1Freq>
 800b1dc:	6378      	str	r0, [r7, #52]	; 0x34
 800b1de:	f000 bcba 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800b1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b1e8:	d104      	bne.n	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b1ea:	f7fd fbb1 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800b1ee:	6378      	str	r0, [r7, #52]	; 0x34
 800b1f0:	f000 bcb1 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800b1f4:	4b1a      	ldr	r3, [pc, #104]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b200:	d107      	bne.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800b202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b204:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b208:	d103      	bne.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800b20a:	4b16      	ldr	r3, [pc, #88]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b20c:	637b      	str	r3, [r7, #52]	; 0x34
 800b20e:	f000 bca2 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800b212:	4b13      	ldr	r3, [pc, #76]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f003 0320 	and.w	r3, r3, #32
 800b21a:	2b20      	cmp	r3, #32
 800b21c:	d11c      	bne.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800b21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b220:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b224:	d118      	bne.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b226:	4b0e      	ldr	r3, [pc, #56]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d005      	beq.n	800b23e <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800b232:	4b0b      	ldr	r3, [pc, #44]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	0e1b      	lsrs	r3, r3, #24
 800b238:	f003 030f 	and.w	r3, r3, #15
 800b23c:	e006      	b.n	800b24c <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800b23e:	4b08      	ldr	r3, [pc, #32]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b244:	041b      	lsls	r3, r3, #16
 800b246:	0e1b      	lsrs	r3, r3, #24
 800b248:	f003 030f 	and.w	r3, r3, #15
 800b24c:	4a06      	ldr	r2, [pc, #24]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b24e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b252:	637b      	str	r3, [r7, #52]	; 0x34
 800b254:	f000 bc7f 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800b258:	2300      	movs	r3, #0
 800b25a:	637b      	str	r3, [r7, #52]	; 0x34
 800b25c:	f000 bc7b 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b260:	46020c00 	.word	0x46020c00
 800b264:	00f42400 	.word	0x00f42400
 800b268:	0800d99c 	.word	0x0800d99c
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800b26c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b270:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800b274:	430b      	orrs	r3, r1
 800b276:	d14c      	bne.n	800b312 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800b278:	4ba6      	ldr	r3, [pc, #664]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b27a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b27e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b282:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800b284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b286:	2b00      	cmp	r3, #0
 800b288:	d104      	bne.n	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b28a:	f7fd fc7d 	bl	8008b88 <HAL_RCC_GetPCLK1Freq>
 800b28e:	6378      	str	r0, [r7, #52]	; 0x34
 800b290:	f000 bc61 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800b294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b296:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b29a:	d104      	bne.n	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b29c:	f7fd fb58 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800b2a0:	6378      	str	r0, [r7, #52]	; 0x34
 800b2a2:	f000 bc58 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800b2a6:	4b9b      	ldr	r3, [pc, #620]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2b2:	d107      	bne.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800b2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2ba:	d103      	bne.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800b2bc:	4b96      	ldr	r3, [pc, #600]	; (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b2be:	637b      	str	r3, [r7, #52]	; 0x34
 800b2c0:	f000 bc49 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800b2c4:	4b93      	ldr	r3, [pc, #588]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f003 0320 	and.w	r3, r3, #32
 800b2cc:	2b20      	cmp	r3, #32
 800b2ce:	d11c      	bne.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800b2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b2d6:	d118      	bne.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b2d8:	4b8e      	ldr	r3, [pc, #568]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d005      	beq.n	800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800b2e4:	4b8b      	ldr	r3, [pc, #556]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	0e1b      	lsrs	r3, r3, #24
 800b2ea:	f003 030f 	and.w	r3, r3, #15
 800b2ee:	e006      	b.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800b2f0:	4b88      	ldr	r3, [pc, #544]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b2f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b2f6:	041b      	lsls	r3, r3, #16
 800b2f8:	0e1b      	lsrs	r3, r3, #24
 800b2fa:	f003 030f 	and.w	r3, r3, #15
 800b2fe:	4a87      	ldr	r2, [pc, #540]	; (800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b304:	637b      	str	r3, [r7, #52]	; 0x34
 800b306:	f000 bc26 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800b30a:	2300      	movs	r3, #0
 800b30c:	637b      	str	r3, [r7, #52]	; 0x34
 800b30e:	f000 bc22 	b.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800b312:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b316:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b31a:	430b      	orrs	r3, r1
 800b31c:	d164      	bne.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800b31e:	4b7d      	ldr	r3, [pc, #500]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b320:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b328:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800b32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d120      	bne.n	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b330:	4b78      	ldr	r3, [pc, #480]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f003 0320 	and.w	r3, r3, #32
 800b338:	2b20      	cmp	r3, #32
 800b33a:	d117      	bne.n	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b33c:	4b75      	ldr	r3, [pc, #468]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b33e:	689b      	ldr	r3, [r3, #8]
 800b340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b344:	2b00      	cmp	r3, #0
 800b346:	d005      	beq.n	800b354 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800b348:	4b72      	ldr	r3, [pc, #456]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	0e1b      	lsrs	r3, r3, #24
 800b34e:	f003 030f 	and.w	r3, r3, #15
 800b352:	e006      	b.n	800b362 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800b354:	4b6f      	ldr	r3, [pc, #444]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b356:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b35a:	041b      	lsls	r3, r3, #16
 800b35c:	0e1b      	lsrs	r3, r3, #24
 800b35e:	f003 030f 	and.w	r3, r3, #15
 800b362:	4a6e      	ldr	r2, [pc, #440]	; (800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b368:	637b      	str	r3, [r7, #52]	; 0x34
 800b36a:	e3f4      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b36c:	2300      	movs	r3, #0
 800b36e:	637b      	str	r3, [r7, #52]	; 0x34
 800b370:	e3f1      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800b372:	4b68      	ldr	r3, [pc, #416]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b37c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b380:	d112      	bne.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800b382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b388:	d10e      	bne.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b38a:	4b62      	ldr	r3, [pc, #392]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b38c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b394:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b398:	d102      	bne.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800b39a:	23fa      	movs	r3, #250	; 0xfa
 800b39c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b39e:	e3da      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b3a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b3a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b3a6:	e3d6      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800b3a8:	4b5a      	ldr	r3, [pc, #360]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3b4:	d106      	bne.n	800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3bc:	d102      	bne.n	800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800b3be:	4b56      	ldr	r3, [pc, #344]	; (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b3c0:	637b      	str	r3, [r7, #52]	; 0x34
 800b3c2:	e3c8      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800b3c4:	4b53      	ldr	r3, [pc, #332]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b3c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b3ca:	f003 0302 	and.w	r3, r3, #2
 800b3ce:	2b02      	cmp	r3, #2
 800b3d0:	d107      	bne.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3d8:	d103      	bne.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800b3da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3de:	637b      	str	r3, [r7, #52]	; 0x34
 800b3e0:	e3b9      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b3e6:	e3b6      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800b3e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3ec:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800b3f0:	430b      	orrs	r3, r1
 800b3f2:	d164      	bne.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b3f4:	4b47      	ldr	r3, [pc, #284]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b3f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b3fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b3fe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800b400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b402:	2b00      	cmp	r3, #0
 800b404:	d120      	bne.n	800b448 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b406:	4b43      	ldr	r3, [pc, #268]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f003 0320 	and.w	r3, r3, #32
 800b40e:	2b20      	cmp	r3, #32
 800b410:	d117      	bne.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b412:	4b40      	ldr	r3, [pc, #256]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d005      	beq.n	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800b41e:	4b3d      	ldr	r3, [pc, #244]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	0e1b      	lsrs	r3, r3, #24
 800b424:	f003 030f 	and.w	r3, r3, #15
 800b428:	e006      	b.n	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800b42a:	4b3a      	ldr	r3, [pc, #232]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b42c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b430:	041b      	lsls	r3, r3, #16
 800b432:	0e1b      	lsrs	r3, r3, #24
 800b434:	f003 030f 	and.w	r3, r3, #15
 800b438:	4a38      	ldr	r2, [pc, #224]	; (800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b43a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b43e:	637b      	str	r3, [r7, #52]	; 0x34
 800b440:	e389      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b442:	2300      	movs	r3, #0
 800b444:	637b      	str	r3, [r7, #52]	; 0x34
 800b446:	e386      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800b448:	4b32      	ldr	r3, [pc, #200]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b44a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b44e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b452:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b456:	d112      	bne.n	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800b458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b45e:	d10e      	bne.n	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b460:	4b2c      	ldr	r3, [pc, #176]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b462:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b46a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b46e:	d102      	bne.n	800b476 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800b470:	23fa      	movs	r3, #250	; 0xfa
 800b472:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b474:	e36f      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b476:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b47a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b47c:	e36b      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800b47e:	4b25      	ldr	r3, [pc, #148]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b48a:	d106      	bne.n	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800b48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b492:	d102      	bne.n	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800b494:	4b20      	ldr	r3, [pc, #128]	; (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b496:	637b      	str	r3, [r7, #52]	; 0x34
 800b498:	e35d      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800b49a:	4b1e      	ldr	r3, [pc, #120]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b49c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b4a0:	f003 0302 	and.w	r3, r3, #2
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d107      	bne.n	800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4ae:	d103      	bne.n	800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800b4b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4b4:	637b      	str	r3, [r7, #52]	; 0x34
 800b4b6:	e34e      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	637b      	str	r3, [r7, #52]	; 0x34
 800b4bc:	e34b      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800b4be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4c2:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b4c6:	430b      	orrs	r3, r1
 800b4c8:	d14e      	bne.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b4ca:	4b12      	ldr	r3, [pc, #72]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b4cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b4d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800b4d4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d103      	bne.n	800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b4dc:	f7fd fb54 	bl	8008b88 <HAL_RCC_GetPCLK1Freq>
 800b4e0:	6378      	str	r0, [r7, #52]	; 0x34
 800b4e2:	e338      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800b4e4:	4b0b      	ldr	r3, [pc, #44]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b4e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b4ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4f2:	d119      	bne.n	800b528 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800b4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b4fa:	d115      	bne.n	800b528 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b4fc:	4b05      	ldr	r3, [pc, #20]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b4fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b50a:	d109      	bne.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800b50c:	23fa      	movs	r3, #250	; 0xfa
 800b50e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b510:	e321      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b512:	bf00      	nop
 800b514:	46020c00 	.word	0x46020c00
 800b518:	00f42400 	.word	0x00f42400
 800b51c:	0800d99c 	.word	0x0800d99c
      }
      else
      {
        frequency = LSI_VALUE;
 800b520:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b524:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b526:	e316      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800b528:	4ba8      	ldr	r3, [pc, #672]	; (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b534:	d106      	bne.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800b536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b538:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b53c:	d102      	bne.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800b53e:	4ba4      	ldr	r3, [pc, #656]	; (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b540:	637b      	str	r3, [r7, #52]	; 0x34
 800b542:	e308      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800b544:	4ba1      	ldr	r3, [pc, #644]	; (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b54a:	f003 0302 	and.w	r3, r3, #2
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d107      	bne.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800b552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b554:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b558:	d103      	bne.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800b55a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b55e:	637b      	str	r3, [r7, #52]	; 0x34
 800b560:	e2f9      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800b562:	2300      	movs	r3, #0
 800b564:	637b      	str	r3, [r7, #52]	; 0x34
 800b566:	e2f6      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800b568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b56c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800b570:	430b      	orrs	r3, r1
 800b572:	d12d      	bne.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800b574:	4b95      	ldr	r3, [pc, #596]	; (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b57a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800b57e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800b580:	4b92      	ldr	r3, [pc, #584]	; (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b58c:	d105      	bne.n	800b59a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800b58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b590:	2b00      	cmp	r3, #0
 800b592:	d102      	bne.n	800b59a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800b594:	4b8e      	ldr	r3, [pc, #568]	; (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b596:	637b      	str	r3, [r7, #52]	; 0x34
 800b598:	e2dd      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800b59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b5a0:	d107      	bne.n	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7fe fb4c 	bl	8009c44 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ae:	637b      	str	r3, [r7, #52]	; 0x34
 800b5b0:	e2d1      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800b5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5b8:	d107      	bne.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5ba:	f107 0318 	add.w	r3, r7, #24
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fe fc9a 	bl	8009ef8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800b5c4:	69bb      	ldr	r3, [r7, #24]
 800b5c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b5c8:	e2c5      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b5ce:	e2c2      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800b5d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5d4:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800b5d8:	430b      	orrs	r3, r1
 800b5da:	d156      	bne.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b5dc:	4b7b      	ldr	r3, [pc, #492]	; (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b5de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b5e6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800b5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b5ee:	d028      	beq.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800b5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b5f6:	d845      	bhi.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800b5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5fe:	d013      	beq.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800b600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b606:	d83d      	bhi.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800b608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d004      	beq.n	800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800b60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b610:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b614:	d004      	beq.n	800b620 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800b616:	e035      	b.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800b618:	f7fd faca 	bl	8008bb0 <HAL_RCC_GetPCLK2Freq>
 800b61c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b61e:	e29a      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b620:	f7fd f996 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800b624:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b626:	e296      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b628:	4b68      	ldr	r3, [pc, #416]	; (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b634:	d102      	bne.n	800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800b636:	4b66      	ldr	r3, [pc, #408]	; (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b638:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b63a:	e28c      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b63c:	2300      	movs	r3, #0
 800b63e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b640:	e289      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b642:	4b62      	ldr	r3, [pc, #392]	; (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f003 0320 	and.w	r3, r3, #32
 800b64a:	2b20      	cmp	r3, #32
 800b64c:	d117      	bne.n	800b67e <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b64e:	4b5f      	ldr	r3, [pc, #380]	; (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b656:	2b00      	cmp	r3, #0
 800b658:	d005      	beq.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800b65a:	4b5c      	ldr	r3, [pc, #368]	; (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b65c:	689b      	ldr	r3, [r3, #8]
 800b65e:	0e1b      	lsrs	r3, r3, #24
 800b660:	f003 030f 	and.w	r3, r3, #15
 800b664:	e006      	b.n	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800b666:	4b59      	ldr	r3, [pc, #356]	; (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b668:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b66c:	041b      	lsls	r3, r3, #16
 800b66e:	0e1b      	lsrs	r3, r3, #24
 800b670:	f003 030f 	and.w	r3, r3, #15
 800b674:	4a57      	ldr	r2, [pc, #348]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800b676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b67a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b67c:	e26b      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b67e:	2300      	movs	r3, #0
 800b680:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b682:	e268      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b684:	2300      	movs	r3, #0
 800b686:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b688:	e265      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800b68a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b68e:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800b692:	430b      	orrs	r3, r1
 800b694:	d156      	bne.n	800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b696:	4b4d      	ldr	r3, [pc, #308]	; (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b69c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b6a0:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b6a8:	d028      	beq.n	800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800b6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b6b0:	d845      	bhi.n	800b73e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800b6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6b8:	d013      	beq.n	800b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6c0:	d83d      	bhi.n	800b73e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d004      	beq.n	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6ce:	d004      	beq.n	800b6da <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800b6d0:	e035      	b.n	800b73e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800b6d2:	f7fd fa59 	bl	8008b88 <HAL_RCC_GetPCLK1Freq>
 800b6d6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b6d8:	e23d      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b6da:	f7fd f939 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800b6de:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b6e0:	e239      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b6e2:	4b3a      	ldr	r3, [pc, #232]	; (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6ee:	d102      	bne.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800b6f0:	4b37      	ldr	r3, [pc, #220]	; (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b6f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b6f4:	e22f      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6fa:	e22c      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b6fc:	4b33      	ldr	r3, [pc, #204]	; (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f003 0320 	and.w	r3, r3, #32
 800b704:	2b20      	cmp	r3, #32
 800b706:	d117      	bne.n	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b708:	4b30      	ldr	r3, [pc, #192]	; (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b710:	2b00      	cmp	r3, #0
 800b712:	d005      	beq.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800b714:	4b2d      	ldr	r3, [pc, #180]	; (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	0e1b      	lsrs	r3, r3, #24
 800b71a:	f003 030f 	and.w	r3, r3, #15
 800b71e:	e006      	b.n	800b72e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800b720:	4b2a      	ldr	r3, [pc, #168]	; (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b722:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b726:	041b      	lsls	r3, r3, #16
 800b728:	0e1b      	lsrs	r3, r3, #24
 800b72a:	f003 030f 	and.w	r3, r3, #15
 800b72e:	4a29      	ldr	r2, [pc, #164]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800b730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b734:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b736:	e20e      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b738:	2300      	movs	r3, #0
 800b73a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b73c:	e20b      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b73e:	2300      	movs	r3, #0
 800b740:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b742:	e208      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800b744:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b748:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800b74c:	430b      	orrs	r3, r1
 800b74e:	d17c      	bne.n	800b84a <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800b750:	4b1e      	ldr	r3, [pc, #120]	; (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b756:	f003 0318 	and.w	r3, r3, #24
 800b75a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800b75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75e:	2b18      	cmp	r3, #24
 800b760:	d870      	bhi.n	800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800b762:	a201      	add	r2, pc, #4	; (adr r2, 800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800b764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b768:	0800b7d9 	.word	0x0800b7d9
 800b76c:	0800b845 	.word	0x0800b845
 800b770:	0800b845 	.word	0x0800b845
 800b774:	0800b845 	.word	0x0800b845
 800b778:	0800b845 	.word	0x0800b845
 800b77c:	0800b845 	.word	0x0800b845
 800b780:	0800b845 	.word	0x0800b845
 800b784:	0800b845 	.word	0x0800b845
 800b788:	0800b7e1 	.word	0x0800b7e1
 800b78c:	0800b845 	.word	0x0800b845
 800b790:	0800b845 	.word	0x0800b845
 800b794:	0800b845 	.word	0x0800b845
 800b798:	0800b845 	.word	0x0800b845
 800b79c:	0800b845 	.word	0x0800b845
 800b7a0:	0800b845 	.word	0x0800b845
 800b7a4:	0800b845 	.word	0x0800b845
 800b7a8:	0800b7e9 	.word	0x0800b7e9
 800b7ac:	0800b845 	.word	0x0800b845
 800b7b0:	0800b845 	.word	0x0800b845
 800b7b4:	0800b845 	.word	0x0800b845
 800b7b8:	0800b845 	.word	0x0800b845
 800b7bc:	0800b845 	.word	0x0800b845
 800b7c0:	0800b845 	.word	0x0800b845
 800b7c4:	0800b845 	.word	0x0800b845
 800b7c8:	0800b803 	.word	0x0800b803
 800b7cc:	46020c00 	.word	0x46020c00
 800b7d0:	00f42400 	.word	0x00f42400
 800b7d4:	0800d99c 	.word	0x0800d99c
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800b7d8:	f7fd f9fe 	bl	8008bd8 <HAL_RCC_GetPCLK3Freq>
 800b7dc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b7de:	e1ba      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b7e0:	f7fd f8b6 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800b7e4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b7e6:	e1b6      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b7e8:	4b9f      	ldr	r3, [pc, #636]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7f4:	d102      	bne.n	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800b7f6:	4b9d      	ldr	r3, [pc, #628]	; (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b7f8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b7fa:	e1ac      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b800:	e1a9      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b802:	4b99      	ldr	r3, [pc, #612]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f003 0320 	and.w	r3, r3, #32
 800b80a:	2b20      	cmp	r3, #32
 800b80c:	d117      	bne.n	800b83e <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b80e:	4b96      	ldr	r3, [pc, #600]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b816:	2b00      	cmp	r3, #0
 800b818:	d005      	beq.n	800b826 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800b81a:	4b93      	ldr	r3, [pc, #588]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	0e1b      	lsrs	r3, r3, #24
 800b820:	f003 030f 	and.w	r3, r3, #15
 800b824:	e006      	b.n	800b834 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800b826:	4b90      	ldr	r3, [pc, #576]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b82c:	041b      	lsls	r3, r3, #16
 800b82e:	0e1b      	lsrs	r3, r3, #24
 800b830:	f003 030f 	and.w	r3, r3, #15
 800b834:	4a8e      	ldr	r2, [pc, #568]	; (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800b836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b83a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b83c:	e18b      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b83e:	2300      	movs	r3, #0
 800b840:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b842:	e188      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b844:	2300      	movs	r3, #0
 800b846:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b848:	e185      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800b84a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b84e:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800b852:	430b      	orrs	r3, r1
 800b854:	d155      	bne.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b856:	4b84      	ldr	r3, [pc, #528]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b858:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b85c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b860:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b864:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b868:	d013      	beq.n	800b892 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800b86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b870:	d844      	bhi.n	800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800b872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b874:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b878:	d013      	beq.n	800b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800b87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b880:	d83c      	bhi.n	800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800b882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b884:	2b00      	cmp	r3, #0
 800b886:	d014      	beq.n	800b8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800b888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b88e:	d014      	beq.n	800b8ba <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800b890:	e034      	b.n	800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b892:	f107 0318 	add.w	r3, r7, #24
 800b896:	4618      	mov	r0, r3
 800b898:	f7fe fb2e 	bl	8009ef8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8a0:	e159      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fe f9cc 	bl	8009c44 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8b0:	e151      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b8b2:	f7fd f84d 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800b8b6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b8b8:	e14d      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b8ba:	4b6b      	ldr	r3, [pc, #428]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f003 0320 	and.w	r3, r3, #32
 800b8c2:	2b20      	cmp	r3, #32
 800b8c4:	d117      	bne.n	800b8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b8c6:	4b68      	ldr	r3, [pc, #416]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d005      	beq.n	800b8de <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800b8d2:	4b65      	ldr	r3, [pc, #404]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	0e1b      	lsrs	r3, r3, #24
 800b8d8:	f003 030f 	and.w	r3, r3, #15
 800b8dc:	e006      	b.n	800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800b8de:	4b62      	ldr	r3, [pc, #392]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b8e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b8e4:	041b      	lsls	r3, r3, #16
 800b8e6:	0e1b      	lsrs	r3, r3, #24
 800b8e8:	f003 030f 	and.w	r3, r3, #15
 800b8ec:	4a60      	ldr	r2, [pc, #384]	; (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800b8ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b8f4:	e12f      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8fa:	e12c      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b900:	e129      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800b902:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b906:	1e59      	subs	r1, r3, #1
 800b908:	ea52 0301 	orrs.w	r3, r2, r1
 800b90c:	d13c      	bne.n	800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800b90e:	4b56      	ldr	r3, [pc, #344]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b910:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b914:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800b918:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b920:	d027      	beq.n	800b972 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800b922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b924:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b928:	d82b      	bhi.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800b92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b930:	d017      	beq.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800b932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b934:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b938:	d823      	bhi.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800b93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d004      	beq.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800b940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b946:	d004      	beq.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800b948:	e01b      	b.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b94a:	f7fd f801 	bl	8008950 <HAL_RCC_GetSysClockFreq>
 800b94e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b950:	e101      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b956:	4618      	mov	r0, r3
 800b958:	f7fe f974 	bl	8009c44 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b960:	e0f9      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b962:	f107 0318 	add.w	r3, r7, #24
 800b966:	4618      	mov	r0, r3
 800b968:	f7fe fac6 	bl	8009ef8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b970:	e0f1      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b972:	f107 030c 	add.w	r3, r7, #12
 800b976:	4618      	mov	r0, r3
 800b978:	f7fe fc18 	bl	800a1ac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b980:	e0e9      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b982:	2300      	movs	r3, #0
 800b984:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b986:	e0e6      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800b988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b98c:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800b990:	430b      	orrs	r3, r1
 800b992:	d131      	bne.n	800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800b994:	4b34      	ldr	r3, [pc, #208]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b996:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b99a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b99e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800b9a0:	4b31      	ldr	r3, [pc, #196]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b9a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b9a6:	f003 0302 	and.w	r3, r3, #2
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d106      	bne.n	800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800b9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d103      	bne.n	800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800b9b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9b8:	637b      	str	r3, [r7, #52]	; 0x34
 800b9ba:	e0cc      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800b9bc:	4b2a      	ldr	r3, [pc, #168]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b9be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b9c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9ca:	d112      	bne.n	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800b9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9d2:	d10e      	bne.n	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b9d4:	4b24      	ldr	r3, [pc, #144]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b9d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b9da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9e2:	d102      	bne.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800b9e4:	23fa      	movs	r3, #250	; 0xfa
 800b9e6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b9e8:	e0b5      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b9ea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b9ee:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b9f0:	e0b1      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	637b      	str	r3, [r7, #52]	; 0x34
 800b9f6:	e0ae      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800b9f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9fc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ba00:	430b      	orrs	r3, r1
 800ba02:	d13b      	bne.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800ba04:	4b18      	ldr	r3, [pc, #96]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ba06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ba0a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ba0e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800ba10:	4b15      	ldr	r3, [pc, #84]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba1c:	d105      	bne.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800ba1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d102      	bne.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800ba24:	4b13      	ldr	r3, [pc, #76]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800ba26:	637b      	str	r3, [r7, #52]	; 0x34
 800ba28:	e095      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800ba2a:	4b0f      	ldr	r3, [pc, #60]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba36:	d106      	bne.n	800ba46 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800ba38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba3e:	d102      	bne.n	800ba46 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800ba40:	4b0d      	ldr	r3, [pc, #52]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800ba42:	637b      	str	r3, [r7, #52]	; 0x34
 800ba44:	e087      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800ba46:	4b08      	ldr	r3, [pc, #32]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba52:	d106      	bne.n	800ba62 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800ba54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba5a:	d102      	bne.n	800ba62 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800ba5c:	4b03      	ldr	r3, [pc, #12]	; (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800ba5e:	637b      	str	r3, [r7, #52]	; 0x34
 800ba60:	e079      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800ba62:	2300      	movs	r3, #0
 800ba64:	637b      	str	r3, [r7, #52]	; 0x34
 800ba66:	e076      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ba68:	46020c00 	.word	0x46020c00
 800ba6c:	00f42400 	.word	0x00f42400
 800ba70:	0800d99c 	.word	0x0800d99c
 800ba74:	02dc6c00 	.word	0x02dc6c00
 800ba78:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800ba7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba80:	1e99      	subs	r1, r3, #2
 800ba82:	ea52 0301 	orrs.w	r3, r2, r1
 800ba86:	d120      	bne.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800ba88:	4b35      	ldr	r3, [pc, #212]	; (800bb60 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800ba8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ba8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba92:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ba94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d004      	beq.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800ba9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800baa0:	d008      	beq.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800baa2:	e00f      	b.n	800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baa4:	f107 030c 	add.w	r3, r7, #12
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7fe fb7f 	bl	800a1ac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bab2:	e050      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bab4:	f107 0318 	add.w	r3, r7, #24
 800bab8:	4618      	mov	r0, r3
 800baba:	f7fe fa1d 	bl	8009ef8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800babe:	6a3b      	ldr	r3, [r7, #32]
 800bac0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bac2:	e048      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bac4:	2300      	movs	r3, #0
 800bac6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bac8:	e045      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800baca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bace:	f1a3 0108 	sub.w	r1, r3, #8
 800bad2:	ea52 0301 	orrs.w	r3, r2, r1
 800bad6:	d13c      	bne.n	800bb52 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800bad8:	4b21      	ldr	r3, [pc, #132]	; (800bb60 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800bada:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bade:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800bae2:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800bae4:	4b1e      	ldr	r3, [pc, #120]	; (800bb60 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800baf0:	d105      	bne.n	800bafe <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800baf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d102      	bne.n	800bafe <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800baf8:	4b1a      	ldr	r3, [pc, #104]	; (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800bafa:	637b      	str	r3, [r7, #52]	; 0x34
 800bafc:	e02b      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800bafe:	4b18      	ldr	r3, [pc, #96]	; (800bb60 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb0a:	d106      	bne.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800bb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb12:	d102      	bne.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800bb14:	4b14      	ldr	r3, [pc, #80]	; (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800bb16:	637b      	str	r3, [r7, #52]	; 0x34
 800bb18:	e01d      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb20:	d107      	bne.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fe f88c 	bl	8009c44 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800bb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb30:	e011      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800bb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb34:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800bb38:	d108      	bne.n	800bb4c <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fe f880 	bl	8009c44 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800bb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb46:	085b      	lsrs	r3, r3, #1
 800bb48:	637b      	str	r3, [r7, #52]	; 0x34
 800bb4a:	e004      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb50:	e001      	b.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800bb52:	2300      	movs	r3, #0
 800bb54:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800bb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3738      	adds	r7, #56	; 0x38
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	46020c00 	.word	0x46020c00
 800bb64:	00f42400 	.word	0x00f42400
 800bb68:	007a1200 	.word	0x007a1200

0800bb6c <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800bb70:	4b06      	ldr	r3, [pc, #24]	; (800bb8c <HAL_RCCEx_EnableLSECSS+0x20>)
 800bb72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bb76:	4a05      	ldr	r2, [pc, #20]	; (800bb8c <HAL_RCCEx_EnableLSECSS+0x20>)
 800bb78:	f043 0320 	orr.w	r3, r3, #32
 800bb7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 800bb80:	bf00      	nop
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr
 800bb8a:	bf00      	nop
 800bb8c:	46020c00 	.word	0x46020c00

0800bb90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800bb98:	4b47      	ldr	r3, [pc, #284]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4a46      	ldr	r2, [pc, #280]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bb9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bba2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bba4:	f7f7 fa80 	bl	80030a8 <HAL_GetTick>
 800bba8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bbaa:	e008      	b.n	800bbbe <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bbac:	f7f7 fa7c 	bl	80030a8 <HAL_GetTick>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	1ad3      	subs	r3, r2, r3
 800bbb6:	2b02      	cmp	r3, #2
 800bbb8:	d901      	bls.n	800bbbe <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800bbba:	2303      	movs	r3, #3
 800bbbc:	e077      	b.n	800bcae <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bbbe:	4b3e      	ldr	r3, [pc, #248]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d1f0      	bne.n	800bbac <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800bbca:	4b3b      	ldr	r3, [pc, #236]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bbd2:	f023 0303 	bic.w	r3, r3, #3
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	6811      	ldr	r1, [r2, #0]
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	6852      	ldr	r2, [r2, #4]
 800bbde:	3a01      	subs	r2, #1
 800bbe0:	0212      	lsls	r2, r2, #8
 800bbe2:	430a      	orrs	r2, r1
 800bbe4:	4934      	ldr	r1, [pc, #208]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	62cb      	str	r3, [r1, #44]	; 0x2c
 800bbea:	4b33      	ldr	r3, [pc, #204]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bbec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbee:	4b33      	ldr	r3, [pc, #204]	; (800bcbc <RCCEx_PLL2_Config+0x12c>)
 800bbf0:	4013      	ands	r3, r2
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	6892      	ldr	r2, [r2, #8]
 800bbf6:	3a01      	subs	r2, #1
 800bbf8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	68d2      	ldr	r2, [r2, #12]
 800bc00:	3a01      	subs	r2, #1
 800bc02:	0252      	lsls	r2, r2, #9
 800bc04:	b292      	uxth	r2, r2
 800bc06:	4311      	orrs	r1, r2
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	6912      	ldr	r2, [r2, #16]
 800bc0c:	3a01      	subs	r2, #1
 800bc0e:	0412      	lsls	r2, r2, #16
 800bc10:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800bc14:	4311      	orrs	r1, r2
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	6952      	ldr	r2, [r2, #20]
 800bc1a:	3a01      	subs	r2, #1
 800bc1c:	0612      	lsls	r2, r2, #24
 800bc1e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800bc22:	430a      	orrs	r2, r1
 800bc24:	4924      	ldr	r1, [pc, #144]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bc26:	4313      	orrs	r3, r2
 800bc28:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800bc2a:	4b23      	ldr	r3, [pc, #140]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc2e:	f023 020c 	bic.w	r2, r3, #12
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	699b      	ldr	r3, [r3, #24]
 800bc36:	4920      	ldr	r1, [pc, #128]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800bc3c:	4b1e      	ldr	r3, [pc, #120]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6a1b      	ldr	r3, [r3, #32]
 800bc44:	491c      	ldr	r1, [pc, #112]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bc46:	4313      	orrs	r3, r2
 800bc48:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800bc4a:	4b1b      	ldr	r3, [pc, #108]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4e:	4a1a      	ldr	r2, [pc, #104]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bc50:	f023 0310 	bic.w	r3, r3, #16
 800bc54:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bc56:	4b18      	ldr	r3, [pc, #96]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc5e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	69d2      	ldr	r2, [r2, #28]
 800bc66:	00d2      	lsls	r2, r2, #3
 800bc68:	4913      	ldr	r1, [pc, #76]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800bc6e:	4b12      	ldr	r3, [pc, #72]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bc70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc72:	4a11      	ldr	r2, [pc, #68]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bc74:	f043 0310 	orr.w	r3, r3, #16
 800bc78:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800bc7a:	4b0f      	ldr	r3, [pc, #60]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a0e      	ldr	r2, [pc, #56]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bc80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc84:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bc86:	f7f7 fa0f 	bl	80030a8 <HAL_GetTick>
 800bc8a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc8c:	e008      	b.n	800bca0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bc8e:	f7f7 fa0b 	bl	80030a8 <HAL_GetTick>
 800bc92:	4602      	mov	r2, r0
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d901      	bls.n	800bca0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	e006      	b.n	800bcae <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bca0:	4b05      	ldr	r3, [pc, #20]	; (800bcb8 <RCCEx_PLL2_Config+0x128>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d0f0      	beq.n	800bc8e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800bcac:	2300      	movs	r3, #0

}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	46020c00 	.word	0x46020c00
 800bcbc:	80800000 	.word	0x80800000

0800bcc0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800bcc8:	4b47      	ldr	r3, [pc, #284]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a46      	ldr	r2, [pc, #280]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bcce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bcd2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bcd4:	f7f7 f9e8 	bl	80030a8 <HAL_GetTick>
 800bcd8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcda:	e008      	b.n	800bcee <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bcdc:	f7f7 f9e4 	bl	80030a8 <HAL_GetTick>
 800bce0:	4602      	mov	r2, r0
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	1ad3      	subs	r3, r2, r3
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	d901      	bls.n	800bcee <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800bcea:	2303      	movs	r3, #3
 800bcec:	e077      	b.n	800bdde <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcee:	4b3e      	ldr	r3, [pc, #248]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1f0      	bne.n	800bcdc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800bcfa:	4b3b      	ldr	r3, [pc, #236]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bcfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bd02:	f023 0303 	bic.w	r3, r3, #3
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	6811      	ldr	r1, [r2, #0]
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	6852      	ldr	r2, [r2, #4]
 800bd0e:	3a01      	subs	r2, #1
 800bd10:	0212      	lsls	r2, r2, #8
 800bd12:	430a      	orrs	r2, r1
 800bd14:	4934      	ldr	r1, [pc, #208]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bd16:	4313      	orrs	r3, r2
 800bd18:	630b      	str	r3, [r1, #48]	; 0x30
 800bd1a:	4b33      	ldr	r3, [pc, #204]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bd1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd1e:	4b33      	ldr	r3, [pc, #204]	; (800bdec <RCCEx_PLL3_Config+0x12c>)
 800bd20:	4013      	ands	r3, r2
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	6892      	ldr	r2, [r2, #8]
 800bd26:	3a01      	subs	r2, #1
 800bd28:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	68d2      	ldr	r2, [r2, #12]
 800bd30:	3a01      	subs	r2, #1
 800bd32:	0252      	lsls	r2, r2, #9
 800bd34:	b292      	uxth	r2, r2
 800bd36:	4311      	orrs	r1, r2
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	6912      	ldr	r2, [r2, #16]
 800bd3c:	3a01      	subs	r2, #1
 800bd3e:	0412      	lsls	r2, r2, #16
 800bd40:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800bd44:	4311      	orrs	r1, r2
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	6952      	ldr	r2, [r2, #20]
 800bd4a:	3a01      	subs	r2, #1
 800bd4c:	0612      	lsls	r2, r2, #24
 800bd4e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800bd52:	430a      	orrs	r2, r1
 800bd54:	4924      	ldr	r1, [pc, #144]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bd56:	4313      	orrs	r3, r2
 800bd58:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800bd5a:	4b23      	ldr	r3, [pc, #140]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bd5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd5e:	f023 020c 	bic.w	r2, r3, #12
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	699b      	ldr	r3, [r3, #24]
 800bd66:	4920      	ldr	r1, [pc, #128]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800bd6c:	4b1e      	ldr	r3, [pc, #120]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bd6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6a1b      	ldr	r3, [r3, #32]
 800bd74:	491c      	ldr	r1, [pc, #112]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bd76:	4313      	orrs	r3, r2
 800bd78:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800bd7a:	4b1b      	ldr	r3, [pc, #108]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bd7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd7e:	4a1a      	ldr	r2, [pc, #104]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bd80:	f023 0310 	bic.w	r3, r3, #16
 800bd84:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bd86:	4b18      	ldr	r3, [pc, #96]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bd88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd8e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	69d2      	ldr	r2, [r2, #28]
 800bd96:	00d2      	lsls	r2, r2, #3
 800bd98:	4913      	ldr	r1, [pc, #76]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800bd9e:	4b12      	ldr	r3, [pc, #72]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bda0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda2:	4a11      	ldr	r2, [pc, #68]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bda4:	f043 0310 	orr.w	r3, r3, #16
 800bda8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800bdaa:	4b0f      	ldr	r3, [pc, #60]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a0e      	ldr	r2, [pc, #56]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bdb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdb4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bdb6:	f7f7 f977 	bl	80030a8 <HAL_GetTick>
 800bdba:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bdbc:	e008      	b.n	800bdd0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bdbe:	f7f7 f973 	bl	80030a8 <HAL_GetTick>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	1ad3      	subs	r3, r2, r3
 800bdc8:	2b02      	cmp	r3, #2
 800bdca:	d901      	bls.n	800bdd0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800bdcc:	2303      	movs	r3, #3
 800bdce:	e006      	b.n	800bdde <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bdd0:	4b05      	ldr	r3, [pc, #20]	; (800bde8 <RCCEx_PLL3_Config+0x128>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d0f0      	beq.n	800bdbe <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800bddc:	2300      	movs	r3, #0
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	46020c00 	.word	0x46020c00
 800bdec:	80800000 	.word	0x80800000

0800bdf0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d071      	beq.n	800bee6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d106      	bne.n	800be1c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f7f6 feca 	bl	8002bb0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2202      	movs	r2, #2
 800be20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800be24:	4b32      	ldr	r3, [pc, #200]	; (800bef0 <HAL_RTC_Init+0x100>)
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	f003 0310 	and.w	r3, r3, #16
 800be2c:	2b10      	cmp	r3, #16
 800be2e:	d051      	beq.n	800bed4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be30:	4b2f      	ldr	r3, [pc, #188]	; (800bef0 <HAL_RTC_Init+0x100>)
 800be32:	22ca      	movs	r2, #202	; 0xca
 800be34:	625a      	str	r2, [r3, #36]	; 0x24
 800be36:	4b2e      	ldr	r3, [pc, #184]	; (800bef0 <HAL_RTC_Init+0x100>)
 800be38:	2253      	movs	r2, #83	; 0x53
 800be3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 f9ad 	bl	800c19c <RTC_EnterInitMode>
 800be42:	4603      	mov	r3, r0
 800be44:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800be46:	7bfb      	ldrb	r3, [r7, #15]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d13f      	bne.n	800becc <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800be4c:	4b28      	ldr	r3, [pc, #160]	; (800bef0 <HAL_RTC_Init+0x100>)
 800be4e:	699b      	ldr	r3, [r3, #24]
 800be50:	4a27      	ldr	r2, [pc, #156]	; (800bef0 <HAL_RTC_Init+0x100>)
 800be52:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800be56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be5a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800be5c:	4b24      	ldr	r3, [pc, #144]	; (800bef0 <HAL_RTC_Init+0x100>)
 800be5e:	699a      	ldr	r2, [r3, #24]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6859      	ldr	r1, [r3, #4]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	691b      	ldr	r3, [r3, #16]
 800be68:	4319      	orrs	r1, r3
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	699b      	ldr	r3, [r3, #24]
 800be6e:	430b      	orrs	r3, r1
 800be70:	491f      	ldr	r1, [pc, #124]	; (800bef0 <HAL_RTC_Init+0x100>)
 800be72:	4313      	orrs	r3, r2
 800be74:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	68da      	ldr	r2, [r3, #12]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	041b      	lsls	r3, r3, #16
 800be80:	491b      	ldr	r1, [pc, #108]	; (800bef0 <HAL_RTC_Init+0x100>)
 800be82:	4313      	orrs	r3, r2
 800be84:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800be86:	4b1a      	ldr	r3, [pc, #104]	; (800bef0 <HAL_RTC_Init+0x100>)
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be96:	430b      	orrs	r3, r1
 800be98:	4915      	ldr	r1, [pc, #84]	; (800bef0 <HAL_RTC_Init+0x100>)
 800be9a:	4313      	orrs	r3, r2
 800be9c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 f9b8 	bl	800c214 <RTC_ExitInitMode>
 800bea4:	4603      	mov	r3, r0
 800bea6:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800bea8:	7bfb      	ldrb	r3, [r7, #15]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d10e      	bne.n	800becc <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800beae:	4b10      	ldr	r3, [pc, #64]	; (800bef0 <HAL_RTC_Init+0x100>)
 800beb0:	699b      	ldr	r3, [r3, #24]
 800beb2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a19      	ldr	r1, [r3, #32]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	69db      	ldr	r3, [r3, #28]
 800bebe:	4319      	orrs	r1, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	695b      	ldr	r3, [r3, #20]
 800bec4:	430b      	orrs	r3, r1
 800bec6:	490a      	ldr	r1, [pc, #40]	; (800bef0 <HAL_RTC_Init+0x100>)
 800bec8:	4313      	orrs	r3, r2
 800beca:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800becc:	4b08      	ldr	r3, [pc, #32]	; (800bef0 <HAL_RTC_Init+0x100>)
 800bece:	22ff      	movs	r2, #255	; 0xff
 800bed0:	625a      	str	r2, [r3, #36]	; 0x24
 800bed2:	e001      	b.n	800bed8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800bed4:	2300      	movs	r3, #0
 800bed6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800bed8:	7bfb      	ldrb	r3, [r7, #15]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d103      	bne.n	800bee6 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2201      	movs	r2, #1
 800bee2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800bee6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3710      	adds	r7, #16
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	46007800 	.word	0x46007800

0800bef4 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bef4:	b590      	push	{r4, r7, lr}
 800bef6:	b087      	sub	sp, #28
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d101      	bne.n	800bf0e <HAL_RTC_SetTime+0x1a>
 800bf0a:	2302      	movs	r3, #2
 800bf0c:	e088      	b.n	800c020 <HAL_RTC_SetTime+0x12c>
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2201      	movs	r2, #1
 800bf12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2202      	movs	r2, #2
 800bf1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bf1e:	4b42      	ldr	r3, [pc, #264]	; (800c028 <HAL_RTC_SetTime+0x134>)
 800bf20:	22ca      	movs	r2, #202	; 0xca
 800bf22:	625a      	str	r2, [r3, #36]	; 0x24
 800bf24:	4b40      	ldr	r3, [pc, #256]	; (800c028 <HAL_RTC_SetTime+0x134>)
 800bf26:	2253      	movs	r2, #83	; 0x53
 800bf28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f000 f936 	bl	800c19c <RTC_EnterInitMode>
 800bf30:	4603      	mov	r3, r0
 800bf32:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800bf34:	7cfb      	ldrb	r3, [r7, #19]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d163      	bne.n	800c002 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800bf3a:	4b3b      	ldr	r3, [pc, #236]	; (800c028 <HAL_RTC_SetTime+0x134>)
 800bf3c:	68db      	ldr	r3, [r3, #12]
 800bf3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf46:	d057      	beq.n	800bff8 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d125      	bne.n	800bf9a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800bf4e:	4b36      	ldr	r3, [pc, #216]	; (800c028 <HAL_RTC_SetTime+0x134>)
 800bf50:	699b      	ldr	r3, [r3, #24]
 800bf52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d102      	bne.n	800bf60 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	4618      	mov	r0, r3
 800bf66:	f000 f993 	bl	800c290 <RTC_ByteToBcd2>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	785b      	ldrb	r3, [r3, #1]
 800bf72:	4618      	mov	r0, r3
 800bf74:	f000 f98c 	bl	800c290 <RTC_ByteToBcd2>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bf7c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	789b      	ldrb	r3, [r3, #2]
 800bf82:	4618      	mov	r0, r3
 800bf84:	f000 f984 	bl	800c290 <RTC_ByteToBcd2>
 800bf88:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bf8a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	78db      	ldrb	r3, [r3, #3]
 800bf92:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bf94:	4313      	orrs	r3, r2
 800bf96:	617b      	str	r3, [r7, #20]
 800bf98:	e017      	b.n	800bfca <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800bf9a:	4b23      	ldr	r3, [pc, #140]	; (800c028 <HAL_RTC_SetTime+0x134>)
 800bf9c:	699b      	ldr	r3, [r3, #24]
 800bf9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d102      	bne.n	800bfac <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	785b      	ldrb	r3, [r3, #1]
 800bfb6:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bfb8:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bfba:	68ba      	ldr	r2, [r7, #8]
 800bfbc:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bfbe:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	78db      	ldrb	r3, [r3, #3]
 800bfc4:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800bfca:	4a17      	ldr	r2, [pc, #92]	; (800c028 <HAL_RTC_SetTime+0x134>)
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bfd2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bfd6:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800bfd8:	4b13      	ldr	r3, [pc, #76]	; (800c028 <HAL_RTC_SetTime+0x134>)
 800bfda:	699b      	ldr	r3, [r3, #24]
 800bfdc:	4a12      	ldr	r2, [pc, #72]	; (800c028 <HAL_RTC_SetTime+0x134>)
 800bfde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bfe2:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800bfe4:	4b10      	ldr	r3, [pc, #64]	; (800c028 <HAL_RTC_SetTime+0x134>)
 800bfe6:	699a      	ldr	r2, [r3, #24]
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	68d9      	ldr	r1, [r3, #12]
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	430b      	orrs	r3, r1
 800bff2:	490d      	ldr	r1, [pc, #52]	; (800c028 <HAL_RTC_SetTime+0x134>)
 800bff4:	4313      	orrs	r3, r2
 800bff6:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bff8:	68f8      	ldr	r0, [r7, #12]
 800bffa:	f000 f90b 	bl	800c214 <RTC_ExitInitMode>
 800bffe:	4603      	mov	r3, r0
 800c000:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c002:	4b09      	ldr	r3, [pc, #36]	; (800c028 <HAL_RTC_SetTime+0x134>)
 800c004:	22ff      	movs	r2, #255	; 0xff
 800c006:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c008:	7cfb      	ldrb	r3, [r7, #19]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d103      	bne.n	800c016 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2201      	movs	r2, #1
 800c012:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2200      	movs	r2, #0
 800c01a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800c01e:	7cfb      	ldrb	r3, [r7, #19]
}
 800c020:	4618      	mov	r0, r3
 800c022:	371c      	adds	r7, #28
 800c024:	46bd      	mov	sp, r7
 800c026:	bd90      	pop	{r4, r7, pc}
 800c028:	46007800 	.word	0x46007800

0800c02c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c02c:	b590      	push	{r4, r7, lr}
 800c02e:	b087      	sub	sp, #28
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d101      	bne.n	800c046 <HAL_RTC_SetDate+0x1a>
 800c042:	2302      	movs	r3, #2
 800c044:	e071      	b.n	800c12a <HAL_RTC_SetDate+0xfe>
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2201      	movs	r2, #1
 800c04a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2202      	movs	r2, #2
 800c052:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d10e      	bne.n	800c07a <HAL_RTC_SetDate+0x4e>
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	785b      	ldrb	r3, [r3, #1]
 800c060:	f003 0310 	and.w	r3, r3, #16
 800c064:	2b00      	cmp	r3, #0
 800c066:	d008      	beq.n	800c07a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	785b      	ldrb	r3, [r3, #1]
 800c06c:	f023 0310 	bic.w	r3, r3, #16
 800c070:	b2db      	uxtb	r3, r3
 800c072:	330a      	adds	r3, #10
 800c074:	b2da      	uxtb	r2, r3
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d11c      	bne.n	800c0ba <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	78db      	ldrb	r3, [r3, #3]
 800c084:	4618      	mov	r0, r3
 800c086:	f000 f903 	bl	800c290 <RTC_ByteToBcd2>
 800c08a:	4603      	mov	r3, r0
 800c08c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	785b      	ldrb	r3, [r3, #1]
 800c092:	4618      	mov	r0, r3
 800c094:	f000 f8fc 	bl	800c290 <RTC_ByteToBcd2>
 800c098:	4603      	mov	r3, r0
 800c09a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c09c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	789b      	ldrb	r3, [r3, #2]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f000 f8f4 	bl	800c290 <RTC_ByteToBcd2>
 800c0a8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c0aa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	617b      	str	r3, [r7, #20]
 800c0b8:	e00e      	b.n	800c0d8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	78db      	ldrb	r3, [r3, #3]
 800c0be:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	785b      	ldrb	r3, [r3, #1]
 800c0c4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c0c6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800c0c8:	68ba      	ldr	r2, [r7, #8]
 800c0ca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c0cc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c0d8:	4b16      	ldr	r3, [pc, #88]	; (800c134 <HAL_RTC_SetDate+0x108>)
 800c0da:	22ca      	movs	r2, #202	; 0xca
 800c0dc:	625a      	str	r2, [r3, #36]	; 0x24
 800c0de:	4b15      	ldr	r3, [pc, #84]	; (800c134 <HAL_RTC_SetDate+0x108>)
 800c0e0:	2253      	movs	r2, #83	; 0x53
 800c0e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	f000 f859 	bl	800c19c <RTC_EnterInitMode>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c0ee:	7cfb      	ldrb	r3, [r7, #19]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10b      	bne.n	800c10c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800c0f4:	4a0f      	ldr	r2, [pc, #60]	; (800c134 <HAL_RTC_SetDate+0x108>)
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c0fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c100:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f000 f886 	bl	800c214 <RTC_ExitInitMode>
 800c108:	4603      	mov	r3, r0
 800c10a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c10c:	4b09      	ldr	r3, [pc, #36]	; (800c134 <HAL_RTC_SetDate+0x108>)
 800c10e:	22ff      	movs	r2, #255	; 0xff
 800c110:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c112:	7cfb      	ldrb	r3, [r7, #19]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d103      	bne.n	800c120 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2201      	movs	r2, #1
 800c11c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2200      	movs	r2, #0
 800c124:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800c128:	7cfb      	ldrb	r3, [r7, #19]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	371c      	adds	r7, #28
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd90      	pop	{r4, r7, pc}
 800c132:	bf00      	nop
 800c134:	46007800 	.word	0x46007800

0800c138 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800c140:	4b15      	ldr	r3, [pc, #84]	; (800c198 <HAL_RTC_WaitForSynchro+0x60>)
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	4a14      	ldr	r2, [pc, #80]	; (800c198 <HAL_RTC_WaitForSynchro+0x60>)
 800c146:	f023 0320 	bic.w	r3, r3, #32
 800c14a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800c14c:	f7f6 ffac 	bl	80030a8 <HAL_GetTick>
 800c150:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c152:	e013      	b.n	800c17c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c154:	f7f6 ffa8 	bl	80030a8 <HAL_GetTick>
 800c158:	4602      	mov	r2, r0
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	1ad3      	subs	r3, r2, r3
 800c15e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c162:	d90b      	bls.n	800c17c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c164:	4b0c      	ldr	r3, [pc, #48]	; (800c198 <HAL_RTC_WaitForSynchro+0x60>)
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	f003 0320 	and.w	r3, r3, #32
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10c      	bne.n	800c18a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2203      	movs	r2, #3
 800c174:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 800c178:	2303      	movs	r3, #3
 800c17a:	e008      	b.n	800c18e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c17c:	4b06      	ldr	r3, [pc, #24]	; (800c198 <HAL_RTC_WaitForSynchro+0x60>)
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	f003 0320 	and.w	r3, r3, #32
 800c184:	2b00      	cmp	r3, #0
 800c186:	d0e5      	beq.n	800c154 <HAL_RTC_WaitForSynchro+0x1c>
 800c188:	e000      	b.n	800c18c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800c18a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	46007800 	.word	0x46007800

0800c19c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c1a8:	4b19      	ldr	r3, [pc, #100]	; (800c210 <RTC_EnterInitMode+0x74>)
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d128      	bne.n	800c206 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c1b4:	4b16      	ldr	r3, [pc, #88]	; (800c210 <RTC_EnterInitMode+0x74>)
 800c1b6:	68db      	ldr	r3, [r3, #12]
 800c1b8:	4a15      	ldr	r2, [pc, #84]	; (800c210 <RTC_EnterInitMode+0x74>)
 800c1ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1be:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800c1c0:	f7f6 ff72 	bl	80030a8 <HAL_GetTick>
 800c1c4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c1c6:	e013      	b.n	800c1f0 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c1c8:	f7f6 ff6e 	bl	80030a8 <HAL_GetTick>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1d6:	d90b      	bls.n	800c1f0 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c1d8:	4b0d      	ldr	r3, [pc, #52]	; (800c210 <RTC_EnterInitMode+0x74>)
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d10f      	bne.n	800c204 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800c1e4:	2303      	movs	r3, #3
 800c1e6:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2203      	movs	r2, #3
 800c1ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c1f0:	4b07      	ldr	r3, [pc, #28]	; (800c210 <RTC_EnterInitMode+0x74>)
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d104      	bne.n	800c206 <RTC_EnterInitMode+0x6a>
 800c1fc:	7bfb      	ldrb	r3, [r7, #15]
 800c1fe:	2b03      	cmp	r3, #3
 800c200:	d1e2      	bne.n	800c1c8 <RTC_EnterInitMode+0x2c>
 800c202:	e000      	b.n	800c206 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800c204:	bf00      	nop
        }
      }
    }
  }

  return status;
 800c206:	7bfb      	ldrb	r3, [r7, #15]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3710      	adds	r7, #16
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	46007800 	.word	0x46007800

0800c214 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c21c:	2300      	movs	r3, #0
 800c21e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c220:	4b1a      	ldr	r3, [pc, #104]	; (800c28c <RTC_ExitInitMode+0x78>)
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	4a19      	ldr	r2, [pc, #100]	; (800c28c <RTC_ExitInitMode+0x78>)
 800c226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c22a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c22c:	4b17      	ldr	r3, [pc, #92]	; (800c28c <RTC_ExitInitMode+0x78>)
 800c22e:	699b      	ldr	r3, [r3, #24]
 800c230:	f003 0320 	and.w	r3, r3, #32
 800c234:	2b00      	cmp	r3, #0
 800c236:	d10c      	bne.n	800c252 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f7ff ff7d 	bl	800c138 <HAL_RTC_WaitForSynchro>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d01e      	beq.n	800c282 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2203      	movs	r2, #3
 800c248:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800c24c:	2303      	movs	r3, #3
 800c24e:	73fb      	strb	r3, [r7, #15]
 800c250:	e017      	b.n	800c282 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c252:	4b0e      	ldr	r3, [pc, #56]	; (800c28c <RTC_ExitInitMode+0x78>)
 800c254:	699b      	ldr	r3, [r3, #24]
 800c256:	4a0d      	ldr	r2, [pc, #52]	; (800c28c <RTC_ExitInitMode+0x78>)
 800c258:	f023 0320 	bic.w	r3, r3, #32
 800c25c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f7ff ff6a 	bl	800c138 <HAL_RTC_WaitForSynchro>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d005      	beq.n	800c276 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2203      	movs	r2, #3
 800c26e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800c272:	2303      	movs	r3, #3
 800c274:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c276:	4b05      	ldr	r3, [pc, #20]	; (800c28c <RTC_ExitInitMode+0x78>)
 800c278:	699b      	ldr	r3, [r3, #24]
 800c27a:	4a04      	ldr	r2, [pc, #16]	; (800c28c <RTC_ExitInitMode+0x78>)
 800c27c:	f043 0320 	orr.w	r3, r3, #32
 800c280:	6193      	str	r3, [r2, #24]
  }
  return status;
 800c282:	7bfb      	ldrb	r3, [r7, #15]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	46007800 	.word	0x46007800

0800c290 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	4603      	mov	r3, r0
 800c298:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c29a:	2300      	movs	r3, #0
 800c29c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800c29e:	79fb      	ldrb	r3, [r7, #7]
 800c2a0:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800c2a2:	e005      	b.n	800c2b0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800c2aa:	7afb      	ldrb	r3, [r7, #11]
 800c2ac:	3b0a      	subs	r3, #10
 800c2ae:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800c2b0:	7afb      	ldrb	r3, [r7, #11]
 800c2b2:	2b09      	cmp	r3, #9
 800c2b4:	d8f6      	bhi.n	800c2a4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	011b      	lsls	r3, r3, #4
 800c2bc:	b2da      	uxtb	r2, r3
 800c2be:	7afb      	ldrb	r3, [r7, #11]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	b2db      	uxtb	r3, r3
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3714      	adds	r7, #20
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	4910      	ldr	r1, [pc, #64]	; (800c324 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	689a      	ldr	r2, [r3, #8]
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	431a      	orrs	r2, r3
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	699b      	ldr	r3, [r3, #24]
 800c2f6:	490c      	ldr	r1, [pc, #48]	; (800c328 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800c2fc:	4b0a      	ldr	r3, [pc, #40]	; (800c328 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c2fe:	6a1b      	ldr	r3, [r3, #32]
 800c300:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	6919      	ldr	r1, [r3, #16]
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	695b      	ldr	r3, [r3, #20]
 800c30c:	041b      	lsls	r3, r3, #16
 800c30e:	430b      	orrs	r3, r1
 800c310:	4905      	ldr	r1, [pc, #20]	; (800c328 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c312:	4313      	orrs	r3, r2
 800c314:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800c316:	2300      	movs	r3, #0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr
 800c324:	46007800 	.word	0x46007800
 800c328:	46007c00 	.word	0x46007c00

0800c32c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d101      	bne.n	800c33e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	e0fb      	b.n	800c536 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4a7f      	ldr	r2, [pc, #508]	; (800c540 <HAL_SPI_Init+0x214>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d004      	beq.n	800c352 <HAL_SPI_Init+0x26>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a7d      	ldr	r2, [pc, #500]	; (800c544 <HAL_SPI_Init+0x218>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	e000      	b.n	800c354 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800c352:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a78      	ldr	r2, [pc, #480]	; (800c540 <HAL_SPI_Init+0x214>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d004      	beq.n	800c36e <HAL_SPI_Init+0x42>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a76      	ldr	r2, [pc, #472]	; (800c544 <HAL_SPI_Init+0x218>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d105      	bne.n	800c37a <HAL_SPI_Init+0x4e>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	2b0f      	cmp	r3, #15
 800c374:	d901      	bls.n	800c37a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800c376:	2301      	movs	r3, #1
 800c378:	e0dd      	b.n	800c536 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 f8ec 	bl	800c558 <SPI_GetPacketSize>
 800c380:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4a6e      	ldr	r2, [pc, #440]	; (800c540 <HAL_SPI_Init+0x214>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d004      	beq.n	800c396 <HAL_SPI_Init+0x6a>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a6c      	ldr	r2, [pc, #432]	; (800c544 <HAL_SPI_Init+0x218>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d102      	bne.n	800c39c <HAL_SPI_Init+0x70>
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2b08      	cmp	r3, #8
 800c39a:	d816      	bhi.n	800c3ca <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c3a0:	4a69      	ldr	r2, [pc, #420]	; (800c548 <HAL_SPI_Init+0x21c>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d00e      	beq.n	800c3c4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a68      	ldr	r2, [pc, #416]	; (800c54c <HAL_SPI_Init+0x220>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d009      	beq.n	800c3c4 <HAL_SPI_Init+0x98>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a66      	ldr	r2, [pc, #408]	; (800c550 <HAL_SPI_Init+0x224>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d004      	beq.n	800c3c4 <HAL_SPI_Init+0x98>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a65      	ldr	r2, [pc, #404]	; (800c554 <HAL_SPI_Init+0x228>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d104      	bne.n	800c3ce <HAL_SPI_Init+0xa2>
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2b10      	cmp	r3, #16
 800c3c8:	d901      	bls.n	800c3ce <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e0b3      	b.n	800c536 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d106      	bne.n	800c3e8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7f6 fc30 	bl	8002c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2202      	movs	r2, #2
 800c3ec:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f022 0201 	bic.w	r2, r2, #1
 800c3fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c40a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	699b      	ldr	r3, [r3, #24]
 800c410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c414:	d119      	bne.n	800c44a <HAL_SPI_Init+0x11e>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c41e:	d103      	bne.n	800c428 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c424:	2b00      	cmp	r3, #0
 800c426:	d008      	beq.n	800c43a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d10c      	bne.n	800c44a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c434:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c438:	d107      	bne.n	800c44a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c448:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00f      	beq.n	800c476 <HAL_SPI_Init+0x14a>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	68db      	ldr	r3, [r3, #12]
 800c45a:	2b06      	cmp	r3, #6
 800c45c:	d90b      	bls.n	800c476 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	430a      	orrs	r2, r1
 800c472:	601a      	str	r2, [r3, #0]
 800c474:	e007      	b.n	800c486 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c484:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	69da      	ldr	r2, [r3, #28]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c48e:	431a      	orrs	r2, r3
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	431a      	orrs	r2, r3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c498:	ea42 0103 	orr.w	r1, r2, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	68da      	ldr	r2, [r3, #12]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	430a      	orrs	r2, r1
 800c4a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b0:	431a      	orrs	r2, r3
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b6:	431a      	orrs	r2, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	431a      	orrs	r2, r3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	691b      	ldr	r3, [r3, #16]
 800c4c2:	431a      	orrs	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	695b      	ldr	r3, [r3, #20]
 800c4c8:	431a      	orrs	r2, r3
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a1b      	ldr	r3, [r3, #32]
 800c4ce:	431a      	orrs	r2, r3
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	431a      	orrs	r2, r3
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4da:	431a      	orrs	r2, r3
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	431a      	orrs	r2, r3
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4e6:	431a      	orrs	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4ec:	431a      	orrs	r2, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4f2:	ea42 0103 	orr.w	r1, r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	430a      	orrs	r2, r1
 800c500:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00a      	beq.n	800c524 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	430a      	orrs	r2, r1
 800c522:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2201      	movs	r2, #1
 800c530:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	46002000 	.word	0x46002000
 800c544:	56002000 	.word	0x56002000
 800c548:	40013000 	.word	0x40013000
 800c54c:	50013000 	.word	0x50013000
 800c550:	40003800 	.word	0x40003800
 800c554:	50003800 	.word	0x50003800

0800c558 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c564:	095b      	lsrs	r3, r3, #5
 800c566:	3301      	adds	r3, #1
 800c568:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	3301      	adds	r3, #1
 800c570:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	3307      	adds	r3, #7
 800c576:	08db      	lsrs	r3, r3, #3
 800c578:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	fb02 f303 	mul.w	r3, r2, r3
}
 800c582:	4618      	mov	r0, r3
 800c584:	3714      	adds	r7, #20
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800c58e:	b480      	push	{r7}
 800c590:	b083      	sub	sp, #12
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
 800c596:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d12e      	bne.n	800c602 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d101      	bne.n	800c5b2 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800c5ae:	2302      	movs	r3, #2
 800c5b0:	e028      	b.n	800c604 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2202      	movs	r2, #2
 800c5be:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f022 0201 	bic.w	r2, r2, #1
 800c5d0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800c5de:	ea42 0103 	orr.w	r1, r2, r3
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	689a      	ldr	r2, [r3, #8]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	430a      	orrs	r2, r1
 800c5ec:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800c5fe:	2300      	movs	r3, #0
 800c600:	e000      	b.n	800c604 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800c602:	2301      	movs	r3, #1
  }
}
 800c604:	4618      	mov	r0, r3
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d101      	bne.n	800c622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	e049      	b.n	800c6b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d106      	bne.n	800c63c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 f841 	bl	800c6be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2202      	movs	r2, #2
 800c640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681a      	ldr	r2, [r3, #0]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	3304      	adds	r3, #4
 800c64c:	4619      	mov	r1, r3
 800c64e:	4610      	mov	r0, r2
 800c650:	f000 fa58 	bl	800cb04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2201      	movs	r2, #1
 800c660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2201      	movs	r2, #1
 800c670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2201      	movs	r2, #1
 800c678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2201      	movs	r2, #1
 800c680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2201      	movs	r2, #1
 800c688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2201      	movs	r2, #1
 800c690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2201      	movs	r2, #1
 800c698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2201      	movs	r2, #1
 800c6a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c6b4:	2300      	movs	r3, #0
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3708      	adds	r7, #8
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}

0800c6be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c6be:	b480      	push	{r7}
 800c6c0:	b083      	sub	sp, #12
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c6c6:	bf00      	nop
 800c6c8:	370c      	adds	r7, #12
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
	...

0800c6d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b085      	sub	sp, #20
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d001      	beq.n	800c6ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	e072      	b.n	800c7d2 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2202      	movs	r2, #2
 800c6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	68da      	ldr	r2, [r3, #12]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f042 0201 	orr.w	r2, r2, #1
 800c702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a35      	ldr	r2, [pc, #212]	; (800c7e0 <HAL_TIM_Base_Start_IT+0x10c>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d040      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0xbc>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4a34      	ldr	r2, [pc, #208]	; (800c7e4 <HAL_TIM_Base_Start_IT+0x110>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d03b      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0xbc>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c720:	d036      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0xbc>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c72a:	d031      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0xbc>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a2d      	ldr	r2, [pc, #180]	; (800c7e8 <HAL_TIM_Base_Start_IT+0x114>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d02c      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0xbc>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a2c      	ldr	r2, [pc, #176]	; (800c7ec <HAL_TIM_Base_Start_IT+0x118>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d027      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0xbc>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a2a      	ldr	r2, [pc, #168]	; (800c7f0 <HAL_TIM_Base_Start_IT+0x11c>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d022      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0xbc>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a29      	ldr	r2, [pc, #164]	; (800c7f4 <HAL_TIM_Base_Start_IT+0x120>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d01d      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0xbc>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a27      	ldr	r2, [pc, #156]	; (800c7f8 <HAL_TIM_Base_Start_IT+0x124>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d018      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0xbc>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a26      	ldr	r2, [pc, #152]	; (800c7fc <HAL_TIM_Base_Start_IT+0x128>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d013      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0xbc>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a24      	ldr	r2, [pc, #144]	; (800c800 <HAL_TIM_Base_Start_IT+0x12c>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d00e      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0xbc>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a23      	ldr	r2, [pc, #140]	; (800c804 <HAL_TIM_Base_Start_IT+0x130>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d009      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0xbc>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a21      	ldr	r2, [pc, #132]	; (800c808 <HAL_TIM_Base_Start_IT+0x134>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d004      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0xbc>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4a20      	ldr	r2, [pc, #128]	; (800c80c <HAL_TIM_Base_Start_IT+0x138>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d115      	bne.n	800c7bc <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	689a      	ldr	r2, [r3, #8]
 800c796:	4b1e      	ldr	r3, [pc, #120]	; (800c810 <HAL_TIM_Base_Start_IT+0x13c>)
 800c798:	4013      	ands	r3, r2
 800c79a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b06      	cmp	r3, #6
 800c7a0:	d015      	beq.n	800c7ce <HAL_TIM_Base_Start_IT+0xfa>
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7a8:	d011      	beq.n	800c7ce <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f042 0201 	orr.w	r2, r2, #1
 800c7b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7ba:	e008      	b.n	800c7ce <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f042 0201 	orr.w	r2, r2, #1
 800c7ca:	601a      	str	r2, [r3, #0]
 800c7cc:	e000      	b.n	800c7d0 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7d0:	2300      	movs	r3, #0
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3714      	adds	r7, #20
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	40012c00 	.word	0x40012c00
 800c7e4:	50012c00 	.word	0x50012c00
 800c7e8:	40000400 	.word	0x40000400
 800c7ec:	50000400 	.word	0x50000400
 800c7f0:	40000800 	.word	0x40000800
 800c7f4:	50000800 	.word	0x50000800
 800c7f8:	40000c00 	.word	0x40000c00
 800c7fc:	50000c00 	.word	0x50000c00
 800c800:	40013400 	.word	0x40013400
 800c804:	50013400 	.word	0x50013400
 800c808:	40014000 	.word	0x40014000
 800c80c:	50014000 	.word	0x50014000
 800c810:	00010007 	.word	0x00010007

0800c814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	691b      	ldr	r3, [r3, #16]
 800c82a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	f003 0302 	and.w	r3, r3, #2
 800c832:	2b00      	cmp	r3, #0
 800c834:	d020      	beq.n	800c878 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f003 0302 	and.w	r3, r3, #2
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d01b      	beq.n	800c878 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f06f 0202 	mvn.w	r2, #2
 800c848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2201      	movs	r2, #1
 800c84e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	699b      	ldr	r3, [r3, #24]
 800c856:	f003 0303 	and.w	r3, r3, #3
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d003      	beq.n	800c866 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 f931 	bl	800cac6 <HAL_TIM_IC_CaptureCallback>
 800c864:	e005      	b.n	800c872 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 f923 	bl	800cab2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 f934 	bl	800cada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	f003 0304 	and.w	r3, r3, #4
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d020      	beq.n	800c8c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f003 0304 	and.w	r3, r3, #4
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d01b      	beq.n	800c8c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f06f 0204 	mvn.w	r2, #4
 800c894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2202      	movs	r2, #2
 800c89a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	699b      	ldr	r3, [r3, #24]
 800c8a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d003      	beq.n	800c8b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 f90b 	bl	800cac6 <HAL_TIM_IC_CaptureCallback>
 800c8b0:	e005      	b.n	800c8be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 f8fd 	bl	800cab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 f90e 	bl	800cada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	f003 0308 	and.w	r3, r3, #8
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d020      	beq.n	800c910 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f003 0308 	and.w	r3, r3, #8
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d01b      	beq.n	800c910 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f06f 0208 	mvn.w	r2, #8
 800c8e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2204      	movs	r2, #4
 800c8e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	69db      	ldr	r3, [r3, #28]
 800c8ee:	f003 0303 	and.w	r3, r3, #3
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d003      	beq.n	800c8fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 f8e5 	bl	800cac6 <HAL_TIM_IC_CaptureCallback>
 800c8fc:	e005      	b.n	800c90a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f8d7 	bl	800cab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f000 f8e8 	bl	800cada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2200      	movs	r2, #0
 800c90e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	f003 0310 	and.w	r3, r3, #16
 800c916:	2b00      	cmp	r3, #0
 800c918:	d020      	beq.n	800c95c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f003 0310 	and.w	r3, r3, #16
 800c920:	2b00      	cmp	r3, #0
 800c922:	d01b      	beq.n	800c95c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f06f 0210 	mvn.w	r2, #16
 800c92c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2208      	movs	r2, #8
 800c932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	69db      	ldr	r3, [r3, #28]
 800c93a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d003      	beq.n	800c94a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 f8bf 	bl	800cac6 <HAL_TIM_IC_CaptureCallback>
 800c948:	e005      	b.n	800c956 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 f8b1 	bl	800cab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 f8c2 	bl	800cada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2200      	movs	r2, #0
 800c95a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	f003 0301 	and.w	r3, r3, #1
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00c      	beq.n	800c980 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f003 0301 	and.w	r3, r3, #1
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d007      	beq.n	800c980 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f06f 0201 	mvn.w	r2, #1
 800c978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f7f5 f91a 	bl	8001bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c986:	2b00      	cmp	r3, #0
 800c988:	d104      	bne.n	800c994 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c990:	2b00      	cmp	r3, #0
 800c992:	d00c      	beq.n	800c9ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d007      	beq.n	800c9ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800c9a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 f9af 	bl	800cd0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d00c      	beq.n	800c9d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d007      	beq.n	800c9d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c9ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 f9a7 	bl	800cd20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00c      	beq.n	800c9f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d007      	beq.n	800c9f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c9ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 f87c 	bl	800caee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	f003 0320 	and.w	r3, r3, #32
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00c      	beq.n	800ca1a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f003 0320 	and.w	r3, r3, #32
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d007      	beq.n	800ca1a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f06f 0220 	mvn.w	r2, #32
 800ca12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 f96f 	bl	800ccf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d00c      	beq.n	800ca3e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d007      	beq.n	800ca3e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ca36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 f97b 	bl	800cd34 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00c      	beq.n	800ca62 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d007      	beq.n	800ca62 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ca5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f000 f973 	bl	800cd48 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d00c      	beq.n	800ca86 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d007      	beq.n	800ca86 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ca7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 f96b 	bl	800cd5c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d00c      	beq.n	800caaa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d007      	beq.n	800caaa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800caa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 f963 	bl	800cd70 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800caaa:	bf00      	nop
 800caac:	3710      	adds	r7, #16
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}

0800cab2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cab2:	b480      	push	{r7}
 800cab4:	b083      	sub	sp, #12
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800caba:	bf00      	nop
 800cabc:	370c      	adds	r7, #12
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr

0800cac6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cac6:	b480      	push	{r7}
 800cac8:	b083      	sub	sp, #12
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cace:	bf00      	nop
 800cad0:	370c      	adds	r7, #12
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr

0800cada <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cada:	b480      	push	{r7}
 800cadc:	b083      	sub	sp, #12
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cae2:	bf00      	nop
 800cae4:	370c      	adds	r7, #12
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr

0800caee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800caee:	b480      	push	{r7}
 800caf0:	b083      	sub	sp, #12
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800caf6:	bf00      	nop
 800caf8:	370c      	adds	r7, #12
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr
	...

0800cb04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b085      	sub	sp, #20
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	4a68      	ldr	r2, [pc, #416]	; (800ccb8 <TIM_Base_SetConfig+0x1b4>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d02b      	beq.n	800cb74 <TIM_Base_SetConfig+0x70>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a67      	ldr	r2, [pc, #412]	; (800ccbc <TIM_Base_SetConfig+0x1b8>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d027      	beq.n	800cb74 <TIM_Base_SetConfig+0x70>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb2a:	d023      	beq.n	800cb74 <TIM_Base_SetConfig+0x70>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb32:	d01f      	beq.n	800cb74 <TIM_Base_SetConfig+0x70>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a62      	ldr	r2, [pc, #392]	; (800ccc0 <TIM_Base_SetConfig+0x1bc>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d01b      	beq.n	800cb74 <TIM_Base_SetConfig+0x70>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a61      	ldr	r2, [pc, #388]	; (800ccc4 <TIM_Base_SetConfig+0x1c0>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d017      	beq.n	800cb74 <TIM_Base_SetConfig+0x70>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4a60      	ldr	r2, [pc, #384]	; (800ccc8 <TIM_Base_SetConfig+0x1c4>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d013      	beq.n	800cb74 <TIM_Base_SetConfig+0x70>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4a5f      	ldr	r2, [pc, #380]	; (800cccc <TIM_Base_SetConfig+0x1c8>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d00f      	beq.n	800cb74 <TIM_Base_SetConfig+0x70>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4a5e      	ldr	r2, [pc, #376]	; (800ccd0 <TIM_Base_SetConfig+0x1cc>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d00b      	beq.n	800cb74 <TIM_Base_SetConfig+0x70>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4a5d      	ldr	r2, [pc, #372]	; (800ccd4 <TIM_Base_SetConfig+0x1d0>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d007      	beq.n	800cb74 <TIM_Base_SetConfig+0x70>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4a5c      	ldr	r2, [pc, #368]	; (800ccd8 <TIM_Base_SetConfig+0x1d4>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d003      	beq.n	800cb74 <TIM_Base_SetConfig+0x70>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	4a5b      	ldr	r2, [pc, #364]	; (800ccdc <TIM_Base_SetConfig+0x1d8>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d108      	bne.n	800cb86 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4a4b      	ldr	r2, [pc, #300]	; (800ccb8 <TIM_Base_SetConfig+0x1b4>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d043      	beq.n	800cc16 <TIM_Base_SetConfig+0x112>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a4a      	ldr	r2, [pc, #296]	; (800ccbc <TIM_Base_SetConfig+0x1b8>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d03f      	beq.n	800cc16 <TIM_Base_SetConfig+0x112>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb9c:	d03b      	beq.n	800cc16 <TIM_Base_SetConfig+0x112>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cba4:	d037      	beq.n	800cc16 <TIM_Base_SetConfig+0x112>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	4a45      	ldr	r2, [pc, #276]	; (800ccc0 <TIM_Base_SetConfig+0x1bc>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d033      	beq.n	800cc16 <TIM_Base_SetConfig+0x112>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4a44      	ldr	r2, [pc, #272]	; (800ccc4 <TIM_Base_SetConfig+0x1c0>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d02f      	beq.n	800cc16 <TIM_Base_SetConfig+0x112>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4a43      	ldr	r2, [pc, #268]	; (800ccc8 <TIM_Base_SetConfig+0x1c4>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d02b      	beq.n	800cc16 <TIM_Base_SetConfig+0x112>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4a42      	ldr	r2, [pc, #264]	; (800cccc <TIM_Base_SetConfig+0x1c8>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d027      	beq.n	800cc16 <TIM_Base_SetConfig+0x112>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	4a41      	ldr	r2, [pc, #260]	; (800ccd0 <TIM_Base_SetConfig+0x1cc>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d023      	beq.n	800cc16 <TIM_Base_SetConfig+0x112>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	4a40      	ldr	r2, [pc, #256]	; (800ccd4 <TIM_Base_SetConfig+0x1d0>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d01f      	beq.n	800cc16 <TIM_Base_SetConfig+0x112>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	4a3f      	ldr	r2, [pc, #252]	; (800ccd8 <TIM_Base_SetConfig+0x1d4>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d01b      	beq.n	800cc16 <TIM_Base_SetConfig+0x112>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	4a3e      	ldr	r2, [pc, #248]	; (800ccdc <TIM_Base_SetConfig+0x1d8>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d017      	beq.n	800cc16 <TIM_Base_SetConfig+0x112>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	4a3d      	ldr	r2, [pc, #244]	; (800cce0 <TIM_Base_SetConfig+0x1dc>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d013      	beq.n	800cc16 <TIM_Base_SetConfig+0x112>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	4a3c      	ldr	r2, [pc, #240]	; (800cce4 <TIM_Base_SetConfig+0x1e0>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d00f      	beq.n	800cc16 <TIM_Base_SetConfig+0x112>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	4a3b      	ldr	r2, [pc, #236]	; (800cce8 <TIM_Base_SetConfig+0x1e4>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d00b      	beq.n	800cc16 <TIM_Base_SetConfig+0x112>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	4a3a      	ldr	r2, [pc, #232]	; (800ccec <TIM_Base_SetConfig+0x1e8>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d007      	beq.n	800cc16 <TIM_Base_SetConfig+0x112>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	4a39      	ldr	r2, [pc, #228]	; (800ccf0 <TIM_Base_SetConfig+0x1ec>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d003      	beq.n	800cc16 <TIM_Base_SetConfig+0x112>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	4a38      	ldr	r2, [pc, #224]	; (800ccf4 <TIM_Base_SetConfig+0x1f0>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d108      	bne.n	800cc28 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	68db      	ldr	r3, [r3, #12]
 800cc22:	68fa      	ldr	r2, [r7, #12]
 800cc24:	4313      	orrs	r3, r2
 800cc26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	695b      	ldr	r3, [r3, #20]
 800cc32:	4313      	orrs	r3, r2
 800cc34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	689a      	ldr	r2, [r3, #8]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	4a1a      	ldr	r2, [pc, #104]	; (800ccb8 <TIM_Base_SetConfig+0x1b4>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d023      	beq.n	800cc9c <TIM_Base_SetConfig+0x198>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	4a19      	ldr	r2, [pc, #100]	; (800ccbc <TIM_Base_SetConfig+0x1b8>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d01f      	beq.n	800cc9c <TIM_Base_SetConfig+0x198>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	4a1e      	ldr	r2, [pc, #120]	; (800ccd8 <TIM_Base_SetConfig+0x1d4>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d01b      	beq.n	800cc9c <TIM_Base_SetConfig+0x198>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	4a1d      	ldr	r2, [pc, #116]	; (800ccdc <TIM_Base_SetConfig+0x1d8>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d017      	beq.n	800cc9c <TIM_Base_SetConfig+0x198>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	4a1c      	ldr	r2, [pc, #112]	; (800cce0 <TIM_Base_SetConfig+0x1dc>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d013      	beq.n	800cc9c <TIM_Base_SetConfig+0x198>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	4a1b      	ldr	r2, [pc, #108]	; (800cce4 <TIM_Base_SetConfig+0x1e0>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d00f      	beq.n	800cc9c <TIM_Base_SetConfig+0x198>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	4a1a      	ldr	r2, [pc, #104]	; (800cce8 <TIM_Base_SetConfig+0x1e4>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d00b      	beq.n	800cc9c <TIM_Base_SetConfig+0x198>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4a19      	ldr	r2, [pc, #100]	; (800ccec <TIM_Base_SetConfig+0x1e8>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d007      	beq.n	800cc9c <TIM_Base_SetConfig+0x198>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	4a18      	ldr	r2, [pc, #96]	; (800ccf0 <TIM_Base_SetConfig+0x1ec>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d003      	beq.n	800cc9c <TIM_Base_SetConfig+0x198>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	4a17      	ldr	r2, [pc, #92]	; (800ccf4 <TIM_Base_SetConfig+0x1f0>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d103      	bne.n	800cca4 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	691a      	ldr	r2, [r3, #16]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2201      	movs	r2, #1
 800cca8:	615a      	str	r2, [r3, #20]
}
 800ccaa:	bf00      	nop
 800ccac:	3714      	adds	r7, #20
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr
 800ccb6:	bf00      	nop
 800ccb8:	40012c00 	.word	0x40012c00
 800ccbc:	50012c00 	.word	0x50012c00
 800ccc0:	40000400 	.word	0x40000400
 800ccc4:	50000400 	.word	0x50000400
 800ccc8:	40000800 	.word	0x40000800
 800cccc:	50000800 	.word	0x50000800
 800ccd0:	40000c00 	.word	0x40000c00
 800ccd4:	50000c00 	.word	0x50000c00
 800ccd8:	40013400 	.word	0x40013400
 800ccdc:	50013400 	.word	0x50013400
 800cce0:	40014000 	.word	0x40014000
 800cce4:	50014000 	.word	0x50014000
 800cce8:	40014400 	.word	0x40014400
 800ccec:	50014400 	.word	0x50014400
 800ccf0:	40014800 	.word	0x40014800
 800ccf4:	50014800 	.word	0x50014800

0800ccf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cd00:	bf00      	nop
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b083      	sub	sp, #12
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cd14:	bf00      	nop
 800cd16:	370c      	adds	r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cd28:	bf00      	nop
 800cd2a:	370c      	adds	r7, #12
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b083      	sub	sp, #12
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cd3c:	bf00      	nop
 800cd3e:	370c      	adds	r7, #12
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr

0800cd48 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800cd50:	bf00      	nop
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800cd64:	bf00      	nop
 800cd66:	370c      	adds	r7, #12
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr

0800cd70 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800cd78:	bf00      	nop
 800cd7a:	370c      	adds	r7, #12
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr

0800cd84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d101      	bne.n	800cd96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd92:	2301      	movs	r3, #1
 800cd94:	e042      	b.n	800ce1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d106      	bne.n	800cdae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f7f5 fb5d 	bl	8002468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2224      	movs	r2, #36	; 0x24
 800cdb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	681a      	ldr	r2, [r3, #0]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f022 0201 	bic.w	r2, r2, #1
 800cdc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d002      	beq.n	800cdd4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 fa64 	bl	800d29c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 f8b3 	bl	800cf40 <UART_SetConfig>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d101      	bne.n	800cde4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cde0:	2301      	movs	r3, #1
 800cde2:	e01b      	b.n	800ce1c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	685a      	ldr	r2, [r3, #4]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cdf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	689a      	ldr	r2, [r3, #8]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ce02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f042 0201 	orr.w	r2, r2, #1
 800ce12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f000 fae3 	bl	800d3e0 <UART_CheckIdleState>
 800ce1a:	4603      	mov	r3, r0
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3708      	adds	r7, #8
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b08a      	sub	sp, #40	; 0x28
 800ce28:	af02      	add	r7, sp, #8
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	603b      	str	r3, [r7, #0]
 800ce30:	4613      	mov	r3, r2
 800ce32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce3a:	2b20      	cmp	r3, #32
 800ce3c:	d17b      	bne.n	800cf36 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d002      	beq.n	800ce4a <HAL_UART_Transmit+0x26>
 800ce44:	88fb      	ldrh	r3, [r7, #6]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d101      	bne.n	800ce4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e074      	b.n	800cf38 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2200      	movs	r2, #0
 800ce52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2221      	movs	r2, #33	; 0x21
 800ce5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ce5e:	f7f6 f923 	bl	80030a8 <HAL_GetTick>
 800ce62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	88fa      	ldrh	r2, [r7, #6]
 800ce68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	88fa      	ldrh	r2, [r7, #6]
 800ce70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	689b      	ldr	r3, [r3, #8]
 800ce78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce7c:	d108      	bne.n	800ce90 <HAL_UART_Transmit+0x6c>
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	691b      	ldr	r3, [r3, #16]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d104      	bne.n	800ce90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ce86:	2300      	movs	r3, #0
 800ce88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	61bb      	str	r3, [r7, #24]
 800ce8e:	e003      	b.n	800ce98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ce94:	2300      	movs	r3, #0
 800ce96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ce98:	e030      	b.n	800cefc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	9300      	str	r3, [sp, #0]
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	2200      	movs	r2, #0
 800cea2:	2180      	movs	r1, #128	; 0x80
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f000 fb45 	bl	800d534 <UART_WaitOnFlagUntilTimeout>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d005      	beq.n	800cebc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2220      	movs	r2, #32
 800ceb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ceb8:	2303      	movs	r3, #3
 800ceba:	e03d      	b.n	800cf38 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d10b      	bne.n	800ceda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	881b      	ldrh	r3, [r3, #0]
 800cec6:	461a      	mov	r2, r3
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ced0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	3302      	adds	r3, #2
 800ced6:	61bb      	str	r3, [r7, #24]
 800ced8:	e007      	b.n	800ceea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	781a      	ldrb	r2, [r3, #0]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cee4:	69fb      	ldr	r3, [r7, #28]
 800cee6:	3301      	adds	r3, #1
 800cee8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	3b01      	subs	r3, #1
 800cef4:	b29a      	uxth	r2, r3
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d1c8      	bne.n	800ce9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	2140      	movs	r1, #64	; 0x40
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f000 fb0e 	bl	800d534 <UART_WaitOnFlagUntilTimeout>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d005      	beq.n	800cf2a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2220      	movs	r2, #32
 800cf22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800cf26:	2303      	movs	r3, #3
 800cf28:	e006      	b.n	800cf38 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2220      	movs	r2, #32
 800cf2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800cf32:	2300      	movs	r3, #0
 800cf34:	e000      	b.n	800cf38 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cf36:	2302      	movs	r3, #2
  }
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3720      	adds	r7, #32
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf44:	b094      	sub	sp, #80	; 0x50
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800cf50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	4b83      	ldr	r3, [pc, #524]	; (800d164 <UART_SetConfig+0x224>)
 800cf56:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5a:	689a      	ldr	r2, [r3, #8]
 800cf5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	431a      	orrs	r2, r3
 800cf62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf64:	695b      	ldr	r3, [r3, #20]
 800cf66:	431a      	orrs	r2, r3
 800cf68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6a:	69db      	ldr	r3, [r3, #28]
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	497c      	ldr	r1, [pc, #496]	; (800d168 <UART_SetConfig+0x228>)
 800cf78:	4019      	ands	r1, r3
 800cf7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf80:	430b      	orrs	r3, r1
 800cf82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	685b      	ldr	r3, [r3, #4]
 800cf8a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cf8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf90:	68d9      	ldr	r1, [r3, #12]
 800cf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf94:	681a      	ldr	r2, [r3, #0]
 800cf96:	ea40 0301 	orr.w	r3, r0, r1
 800cf9a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9e:	699b      	ldr	r3, [r3, #24]
 800cfa0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	4b6f      	ldr	r3, [pc, #444]	; (800d164 <UART_SetConfig+0x224>)
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d009      	beq.n	800cfc0 <UART_SetConfig+0x80>
 800cfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfae:	681a      	ldr	r2, [r3, #0]
 800cfb0:	4b6e      	ldr	r3, [pc, #440]	; (800d16c <UART_SetConfig+0x22c>)
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d004      	beq.n	800cfc0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb8:	6a1a      	ldr	r2, [r3, #32]
 800cfba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	689b      	ldr	r3, [r3, #8]
 800cfc6:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800cfca:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800cfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd0:	681a      	ldr	r2, [r3, #0]
 800cfd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfd4:	430b      	orrs	r3, r1
 800cfd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfde:	f023 000f 	bic.w	r0, r3, #15
 800cfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800cfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	ea40 0301 	orr.w	r3, r0, r1
 800cfee:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff2:	681a      	ldr	r2, [r3, #0]
 800cff4:	4b5e      	ldr	r3, [pc, #376]	; (800d170 <UART_SetConfig+0x230>)
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d102      	bne.n	800d000 <UART_SetConfig+0xc0>
 800cffa:	2301      	movs	r3, #1
 800cffc:	64bb      	str	r3, [r7, #72]	; 0x48
 800cffe:	e032      	b.n	800d066 <UART_SetConfig+0x126>
 800d000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	4b5b      	ldr	r3, [pc, #364]	; (800d174 <UART_SetConfig+0x234>)
 800d006:	429a      	cmp	r2, r3
 800d008:	d102      	bne.n	800d010 <UART_SetConfig+0xd0>
 800d00a:	2302      	movs	r3, #2
 800d00c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d00e:	e02a      	b.n	800d066 <UART_SetConfig+0x126>
 800d010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	4b58      	ldr	r3, [pc, #352]	; (800d178 <UART_SetConfig+0x238>)
 800d016:	429a      	cmp	r2, r3
 800d018:	d102      	bne.n	800d020 <UART_SetConfig+0xe0>
 800d01a:	2304      	movs	r3, #4
 800d01c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d01e:	e022      	b.n	800d066 <UART_SetConfig+0x126>
 800d020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	4b55      	ldr	r3, [pc, #340]	; (800d17c <UART_SetConfig+0x23c>)
 800d026:	429a      	cmp	r2, r3
 800d028:	d102      	bne.n	800d030 <UART_SetConfig+0xf0>
 800d02a:	2308      	movs	r3, #8
 800d02c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d02e:	e01a      	b.n	800d066 <UART_SetConfig+0x126>
 800d030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d032:	681a      	ldr	r2, [r3, #0]
 800d034:	4b52      	ldr	r3, [pc, #328]	; (800d180 <UART_SetConfig+0x240>)
 800d036:	429a      	cmp	r2, r3
 800d038:	d102      	bne.n	800d040 <UART_SetConfig+0x100>
 800d03a:	2310      	movs	r3, #16
 800d03c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d03e:	e012      	b.n	800d066 <UART_SetConfig+0x126>
 800d040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	4b4f      	ldr	r3, [pc, #316]	; (800d184 <UART_SetConfig+0x244>)
 800d046:	429a      	cmp	r2, r3
 800d048:	d103      	bne.n	800d052 <UART_SetConfig+0x112>
 800d04a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800d04e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d050:	e009      	b.n	800d066 <UART_SetConfig+0x126>
 800d052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	4b43      	ldr	r3, [pc, #268]	; (800d164 <UART_SetConfig+0x224>)
 800d058:	429a      	cmp	r2, r3
 800d05a:	d102      	bne.n	800d062 <UART_SetConfig+0x122>
 800d05c:	2320      	movs	r3, #32
 800d05e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d060:	e001      	b.n	800d066 <UART_SetConfig+0x126>
 800d062:	2300      	movs	r3, #0
 800d064:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	4b3e      	ldr	r3, [pc, #248]	; (800d164 <UART_SetConfig+0x224>)
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d005      	beq.n	800d07c <UART_SetConfig+0x13c>
 800d070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	4b3d      	ldr	r3, [pc, #244]	; (800d16c <UART_SetConfig+0x22c>)
 800d076:	429a      	cmp	r2, r3
 800d078:	f040 8088 	bne.w	800d18c <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d07c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d07e:	2200      	movs	r2, #0
 800d080:	623b      	str	r3, [r7, #32]
 800d082:	627a      	str	r2, [r7, #36]	; 0x24
 800d084:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d088:	f7fd f9ea 	bl	800a460 <HAL_RCCEx_GetPeriphCLKFreq>
 800d08c:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d08e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d090:	2b00      	cmp	r3, #0
 800d092:	f000 80eb 	beq.w	800d26c <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d09a:	4a3b      	ldr	r2, [pc, #236]	; (800d188 <UART_SetConfig+0x248>)
 800d09c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0a8:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ac:	685a      	ldr	r2, [r3, #4]
 800d0ae:	4613      	mov	r3, r2
 800d0b0:	005b      	lsls	r3, r3, #1
 800d0b2:	4413      	add	r3, r2
 800d0b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d305      	bcc.n	800d0c6 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d903      	bls.n	800d0ce <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d0cc:	e048      	b.n	800d160 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	61bb      	str	r3, [r7, #24]
 800d0d4:	61fa      	str	r2, [r7, #28]
 800d0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0da:	4a2b      	ldr	r2, [pc, #172]	; (800d188 <UART_SetConfig+0x248>)
 800d0dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	613b      	str	r3, [r7, #16]
 800d0e6:	617a      	str	r2, [r7, #20]
 800d0e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d0ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d0f0:	f7f3 f8dc 	bl	80002ac <__aeabi_uldivmod>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	4610      	mov	r0, r2
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	f04f 0200 	mov.w	r2, #0
 800d100:	f04f 0300 	mov.w	r3, #0
 800d104:	020b      	lsls	r3, r1, #8
 800d106:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d10a:	0202      	lsls	r2, r0, #8
 800d10c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d10e:	6849      	ldr	r1, [r1, #4]
 800d110:	0849      	lsrs	r1, r1, #1
 800d112:	2000      	movs	r0, #0
 800d114:	460c      	mov	r4, r1
 800d116:	4605      	mov	r5, r0
 800d118:	eb12 0804 	adds.w	r8, r2, r4
 800d11c:	eb43 0905 	adc.w	r9, r3, r5
 800d120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	2200      	movs	r2, #0
 800d126:	60bb      	str	r3, [r7, #8]
 800d128:	60fa      	str	r2, [r7, #12]
 800d12a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d12e:	4640      	mov	r0, r8
 800d130:	4649      	mov	r1, r9
 800d132:	f7f3 f8bb 	bl	80002ac <__aeabi_uldivmod>
 800d136:	4602      	mov	r2, r0
 800d138:	460b      	mov	r3, r1
 800d13a:	4613      	mov	r3, r2
 800d13c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d13e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d140:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d144:	d308      	bcc.n	800d158 <UART_SetConfig+0x218>
 800d146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d14c:	d204      	bcs.n	800d158 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800d14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d154:	60da      	str	r2, [r3, #12]
 800d156:	e003      	b.n	800d160 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800d158:	2301      	movs	r3, #1
 800d15a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800d15e:	e085      	b.n	800d26c <UART_SetConfig+0x32c>
 800d160:	e084      	b.n	800d26c <UART_SetConfig+0x32c>
 800d162:	bf00      	nop
 800d164:	46002400 	.word	0x46002400
 800d168:	cfff69f3 	.word	0xcfff69f3
 800d16c:	56002400 	.word	0x56002400
 800d170:	40013800 	.word	0x40013800
 800d174:	40004400 	.word	0x40004400
 800d178:	40004800 	.word	0x40004800
 800d17c:	40004c00 	.word	0x40004c00
 800d180:	40005000 	.word	0x40005000
 800d184:	40006400 	.word	0x40006400
 800d188:	0800da5c 	.word	0x0800da5c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18e:	69db      	ldr	r3, [r3, #28]
 800d190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d194:	d13c      	bne.n	800d210 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d198:	2200      	movs	r2, #0
 800d19a:	603b      	str	r3, [r7, #0]
 800d19c:	607a      	str	r2, [r7, #4]
 800d19e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1a2:	f7fd f95d 	bl	800a460 <HAL_RCCEx_GetPeriphCLKFreq>
 800d1a6:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d1a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d05e      	beq.n	800d26c <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b2:	4a39      	ldr	r2, [pc, #228]	; (800d298 <UART_SetConfig+0x358>)
 800d1b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1c0:	005a      	lsls	r2, r3, #1
 800d1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	085b      	lsrs	r3, r3, #1
 800d1c8:	441a      	add	r2, r3
 800d1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1d6:	2b0f      	cmp	r3, #15
 800d1d8:	d916      	bls.n	800d208 <UART_SetConfig+0x2c8>
 800d1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1e0:	d212      	bcs.n	800d208 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d1e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	f023 030f 	bic.w	r3, r3, #15
 800d1ea:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1ee:	085b      	lsrs	r3, r3, #1
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	f003 0307 	and.w	r3, r3, #7
 800d1f6:	b29a      	uxth	r2, r3
 800d1f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800d1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d204:	60da      	str	r2, [r3, #12]
 800d206:	e031      	b.n	800d26c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d208:	2301      	movs	r3, #1
 800d20a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d20e:	e02d      	b.n	800d26c <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d212:	2200      	movs	r2, #0
 800d214:	469a      	mov	sl, r3
 800d216:	4693      	mov	fp, r2
 800d218:	4650      	mov	r0, sl
 800d21a:	4659      	mov	r1, fp
 800d21c:	f7fd f920 	bl	800a460 <HAL_RCCEx_GetPeriphCLKFreq>
 800d220:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800d222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d224:	2b00      	cmp	r3, #0
 800d226:	d021      	beq.n	800d26c <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d22c:	4a1a      	ldr	r2, [pc, #104]	; (800d298 <UART_SetConfig+0x358>)
 800d22e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d232:	461a      	mov	r2, r3
 800d234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d236:	fbb3 f2f2 	udiv	r2, r3, r2
 800d23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	085b      	lsrs	r3, r3, #1
 800d240:	441a      	add	r2, r3
 800d242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	fbb2 f3f3 	udiv	r3, r2, r3
 800d24a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d24e:	2b0f      	cmp	r3, #15
 800d250:	d909      	bls.n	800d266 <UART_SetConfig+0x326>
 800d252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d258:	d205      	bcs.n	800d266 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d25a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d25c:	b29a      	uxth	r2, r3
 800d25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	60da      	str	r2, [r3, #12]
 800d264:	e002      	b.n	800d26c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d266:	2301      	movs	r3, #1
 800d268:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26e:	2201      	movs	r2, #1
 800d270:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d276:	2201      	movs	r2, #1
 800d278:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27e:	2200      	movs	r2, #0
 800d280:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d284:	2200      	movs	r2, #0
 800d286:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d288:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3750      	adds	r7, #80	; 0x50
 800d290:	46bd      	mov	sp, r7
 800d292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d296:	bf00      	nop
 800d298:	0800da5c 	.word	0x0800da5c

0800d29c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2a8:	f003 0308 	and.w	r3, r3, #8
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d00a      	beq.n	800d2c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	430a      	orrs	r2, r1
 800d2c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ca:	f003 0301 	and.w	r3, r3, #1
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d00a      	beq.n	800d2e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	430a      	orrs	r2, r1
 800d2e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ec:	f003 0302 	and.w	r3, r3, #2
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00a      	beq.n	800d30a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	430a      	orrs	r2, r1
 800d308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d30e:	f003 0304 	and.w	r3, r3, #4
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00a      	beq.n	800d32c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	430a      	orrs	r2, r1
 800d32a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d330:	f003 0310 	and.w	r3, r3, #16
 800d334:	2b00      	cmp	r3, #0
 800d336:	d00a      	beq.n	800d34e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	689b      	ldr	r3, [r3, #8]
 800d33e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	430a      	orrs	r2, r1
 800d34c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d352:	f003 0320 	and.w	r3, r3, #32
 800d356:	2b00      	cmp	r3, #0
 800d358:	d00a      	beq.n	800d370 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	430a      	orrs	r2, r1
 800d36e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d01a      	beq.n	800d3b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	430a      	orrs	r2, r1
 800d390:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d39a:	d10a      	bne.n	800d3b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	430a      	orrs	r2, r1
 800d3b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00a      	beq.n	800d3d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	430a      	orrs	r2, r1
 800d3d2:	605a      	str	r2, [r3, #4]
  }
}
 800d3d4:	bf00      	nop
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b098      	sub	sp, #96	; 0x60
 800d3e4:	af02      	add	r7, sp, #8
 800d3e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d3f0:	f7f5 fe5a 	bl	80030a8 <HAL_GetTick>
 800d3f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f003 0308 	and.w	r3, r3, #8
 800d400:	2b08      	cmp	r3, #8
 800d402:	d12f      	bne.n	800d464 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d404:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d408:	9300      	str	r3, [sp, #0]
 800d40a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d40c:	2200      	movs	r2, #0
 800d40e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 f88e 	bl	800d534 <UART_WaitOnFlagUntilTimeout>
 800d418:	4603      	mov	r3, r0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d022      	beq.n	800d464 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d426:	e853 3f00 	ldrex	r3, [r3]
 800d42a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d42e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d432:	653b      	str	r3, [r7, #80]	; 0x50
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	461a      	mov	r2, r3
 800d43a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d43c:	647b      	str	r3, [r7, #68]	; 0x44
 800d43e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d440:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d442:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d444:	e841 2300 	strex	r3, r2, [r1]
 800d448:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d44a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d1e6      	bne.n	800d41e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2220      	movs	r2, #32
 800d454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d460:	2303      	movs	r3, #3
 800d462:	e063      	b.n	800d52c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f003 0304 	and.w	r3, r3, #4
 800d46e:	2b04      	cmp	r3, #4
 800d470:	d149      	bne.n	800d506 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d472:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d476:	9300      	str	r3, [sp, #0]
 800d478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d47a:	2200      	movs	r2, #0
 800d47c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 f857 	bl	800d534 <UART_WaitOnFlagUntilTimeout>
 800d486:	4603      	mov	r3, r0
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d03c      	beq.n	800d506 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d494:	e853 3f00 	ldrex	r3, [r3]
 800d498:	623b      	str	r3, [r7, #32]
   return(result);
 800d49a:	6a3b      	ldr	r3, [r7, #32]
 800d49c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d4a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4aa:	633b      	str	r3, [r7, #48]	; 0x30
 800d4ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4b2:	e841 2300 	strex	r3, r2, [r1]
 800d4b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d1e6      	bne.n	800d48c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	3308      	adds	r3, #8
 800d4c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	e853 3f00 	ldrex	r3, [r3]
 800d4cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f023 0301 	bic.w	r3, r3, #1
 800d4d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	3308      	adds	r3, #8
 800d4dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4de:	61fa      	str	r2, [r7, #28]
 800d4e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e2:	69b9      	ldr	r1, [r7, #24]
 800d4e4:	69fa      	ldr	r2, [r7, #28]
 800d4e6:	e841 2300 	strex	r3, r2, [r1]
 800d4ea:	617b      	str	r3, [r7, #20]
   return(result);
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d1e5      	bne.n	800d4be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2220      	movs	r2, #32
 800d4f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d502:	2303      	movs	r3, #3
 800d504:	e012      	b.n	800d52c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2220      	movs	r2, #32
 800d50a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2220      	movs	r2, #32
 800d512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2200      	movs	r2, #0
 800d51a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2200      	movs	r2, #0
 800d520:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2200      	movs	r2, #0
 800d526:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d52a:	2300      	movs	r3, #0
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3758      	adds	r7, #88	; 0x58
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b084      	sub	sp, #16
 800d538:	af00      	add	r7, sp, #0
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	603b      	str	r3, [r7, #0]
 800d540:	4613      	mov	r3, r2
 800d542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d544:	e049      	b.n	800d5da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d546:	69bb      	ldr	r3, [r7, #24]
 800d548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d54c:	d045      	beq.n	800d5da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d54e:	f7f5 fdab 	bl	80030a8 <HAL_GetTick>
 800d552:	4602      	mov	r2, r0
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	1ad3      	subs	r3, r2, r3
 800d558:	69ba      	ldr	r2, [r7, #24]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d302      	bcc.n	800d564 <UART_WaitOnFlagUntilTimeout+0x30>
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d101      	bne.n	800d568 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d564:	2303      	movs	r3, #3
 800d566:	e048      	b.n	800d5fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f003 0304 	and.w	r3, r3, #4
 800d572:	2b00      	cmp	r3, #0
 800d574:	d031      	beq.n	800d5da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	69db      	ldr	r3, [r3, #28]
 800d57c:	f003 0308 	and.w	r3, r3, #8
 800d580:	2b08      	cmp	r3, #8
 800d582:	d110      	bne.n	800d5a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2208      	movs	r2, #8
 800d58a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	f000 f838 	bl	800d602 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2208      	movs	r2, #8
 800d596:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2200      	movs	r2, #0
 800d59e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	e029      	b.n	800d5fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	69db      	ldr	r3, [r3, #28]
 800d5ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5b4:	d111      	bne.n	800d5da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f000 f81e 	bl	800d602 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2220      	movs	r2, #32
 800d5ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d5d6:	2303      	movs	r3, #3
 800d5d8:	e00f      	b.n	800d5fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	69da      	ldr	r2, [r3, #28]
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	4013      	ands	r3, r2
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	bf0c      	ite	eq
 800d5ea:	2301      	moveq	r3, #1
 800d5ec:	2300      	movne	r3, #0
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	79fb      	ldrb	r3, [r7, #7]
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d0a6      	beq.n	800d546 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d602:	b480      	push	{r7}
 800d604:	b095      	sub	sp, #84	; 0x54
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d612:	e853 3f00 	ldrex	r3, [r3]
 800d616:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d61e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	461a      	mov	r2, r3
 800d626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d628:	643b      	str	r3, [r7, #64]	; 0x40
 800d62a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d62c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d62e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d630:	e841 2300 	strex	r3, r2, [r1]
 800d634:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d1e6      	bne.n	800d60a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	3308      	adds	r3, #8
 800d642:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d644:	6a3b      	ldr	r3, [r7, #32]
 800d646:	e853 3f00 	ldrex	r3, [r3]
 800d64a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d64c:	69fb      	ldr	r3, [r7, #28]
 800d64e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d652:	f023 0301 	bic.w	r3, r3, #1
 800d656:	64bb      	str	r3, [r7, #72]	; 0x48
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	3308      	adds	r3, #8
 800d65e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d660:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d668:	e841 2300 	strex	r3, r2, [r1]
 800d66c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d670:	2b00      	cmp	r3, #0
 800d672:	d1e3      	bne.n	800d63c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d118      	bne.n	800d6ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	e853 3f00 	ldrex	r3, [r3]
 800d688:	60bb      	str	r3, [r7, #8]
   return(result);
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	f023 0310 	bic.w	r3, r3, #16
 800d690:	647b      	str	r3, [r7, #68]	; 0x44
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	461a      	mov	r2, r3
 800d698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d69a:	61bb      	str	r3, [r7, #24]
 800d69c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d69e:	6979      	ldr	r1, [r7, #20]
 800d6a0:	69ba      	ldr	r2, [r7, #24]
 800d6a2:	e841 2300 	strex	r3, r2, [r1]
 800d6a6:	613b      	str	r3, [r7, #16]
   return(result);
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d1e6      	bne.n	800d67c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2220      	movs	r2, #32
 800d6b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d6c2:	bf00      	nop
 800d6c4:	3754      	adds	r7, #84	; 0x54
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6cc:	4770      	bx	lr

0800d6ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d6ce:	b480      	push	{r7}
 800d6d0:	b085      	sub	sp, #20
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	d101      	bne.n	800d6e4 <HAL_UARTEx_DisableFifoMode+0x16>
 800d6e0:	2302      	movs	r3, #2
 800d6e2:	e027      	b.n	800d734 <HAL_UARTEx_DisableFifoMode+0x66>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2224      	movs	r2, #36	; 0x24
 800d6f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	681a      	ldr	r2, [r3, #0]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f022 0201 	bic.w	r2, r2, #1
 800d70a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d712:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	68fa      	ldr	r2, [r7, #12]
 800d720:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2220      	movs	r2, #32
 800d726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2200      	movs	r2, #0
 800d72e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d732:	2300      	movs	r3, #0
}
 800d734:	4618      	mov	r0, r3
 800d736:	3714      	adds	r7, #20
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d750:	2b01      	cmp	r3, #1
 800d752:	d101      	bne.n	800d758 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d754:	2302      	movs	r3, #2
 800d756:	e02d      	b.n	800d7b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2201      	movs	r2, #1
 800d75c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2224      	movs	r2, #36	; 0x24
 800d764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f022 0201 	bic.w	r2, r2, #1
 800d77e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	689b      	ldr	r3, [r3, #8]
 800d786:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	683a      	ldr	r2, [r7, #0]
 800d790:	430a      	orrs	r2, r1
 800d792:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f000 f84f 	bl	800d838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	68fa      	ldr	r2, [r7, #12]
 800d7a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2220      	movs	r2, #32
 800d7a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d7b2:	2300      	movs	r3, #0
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3710      	adds	r7, #16
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b084      	sub	sp, #16
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d101      	bne.n	800d7d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d7d0:	2302      	movs	r3, #2
 800d7d2:	e02d      	b.n	800d830 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2224      	movs	r2, #36	; 0x24
 800d7e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f022 0201 	bic.w	r2, r2, #1
 800d7fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	689b      	ldr	r3, [r3, #8]
 800d802:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	683a      	ldr	r2, [r7, #0]
 800d80c:	430a      	orrs	r2, r1
 800d80e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 f811 	bl	800d838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2220      	movs	r2, #32
 800d822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d82e:	2300      	movs	r3, #0
}
 800d830:	4618      	mov	r0, r3
 800d832:	3710      	adds	r7, #16
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d838:	b480      	push	{r7}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d844:	2b00      	cmp	r3, #0
 800d846:	d108      	bne.n	800d85a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2201      	movs	r2, #1
 800d84c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2201      	movs	r2, #1
 800d854:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d858:	e031      	b.n	800d8be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d85a:	2308      	movs	r3, #8
 800d85c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d85e:	2308      	movs	r3, #8
 800d860:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	0e5b      	lsrs	r3, r3, #25
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	f003 0307 	and.w	r3, r3, #7
 800d870:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	689b      	ldr	r3, [r3, #8]
 800d878:	0f5b      	lsrs	r3, r3, #29
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	f003 0307 	and.w	r3, r3, #7
 800d880:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d882:	7bbb      	ldrb	r3, [r7, #14]
 800d884:	7b3a      	ldrb	r2, [r7, #12]
 800d886:	4911      	ldr	r1, [pc, #68]	; (800d8cc <UARTEx_SetNbDataToProcess+0x94>)
 800d888:	5c8a      	ldrb	r2, [r1, r2]
 800d88a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d88e:	7b3a      	ldrb	r2, [r7, #12]
 800d890:	490f      	ldr	r1, [pc, #60]	; (800d8d0 <UARTEx_SetNbDataToProcess+0x98>)
 800d892:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d894:	fb93 f3f2 	sdiv	r3, r3, r2
 800d898:	b29a      	uxth	r2, r3
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d8a0:	7bfb      	ldrb	r3, [r7, #15]
 800d8a2:	7b7a      	ldrb	r2, [r7, #13]
 800d8a4:	4909      	ldr	r1, [pc, #36]	; (800d8cc <UARTEx_SetNbDataToProcess+0x94>)
 800d8a6:	5c8a      	ldrb	r2, [r1, r2]
 800d8a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d8ac:	7b7a      	ldrb	r2, [r7, #13]
 800d8ae:	4908      	ldr	r1, [pc, #32]	; (800d8d0 <UARTEx_SetNbDataToProcess+0x98>)
 800d8b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d8b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d8b6:	b29a      	uxth	r2, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d8be:	bf00      	nop
 800d8c0:	3714      	adds	r7, #20
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr
 800d8ca:	bf00      	nop
 800d8cc:	0800da74 	.word	0x0800da74
 800d8d0:	0800da7c 	.word	0x0800da7c

0800d8d4 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f043 0202 	orr.w	r2, r3, #2
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	685a      	ldr	r2, [r3, #4]
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	021b      	lsls	r3, r3, #8
 800d8f4:	431a      	orrs	r2, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f023 0202 	bic.w	r2, r3, #2
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	601a      	str	r2, [r3, #0]
}
 800d906:	bf00      	nop
 800d908:	370c      	adds	r7, #12
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr

0800d912 <memset>:
 800d912:	4402      	add	r2, r0
 800d914:	4603      	mov	r3, r0
 800d916:	4293      	cmp	r3, r2
 800d918:	d100      	bne.n	800d91c <memset+0xa>
 800d91a:	4770      	bx	lr
 800d91c:	f803 1b01 	strb.w	r1, [r3], #1
 800d920:	e7f9      	b.n	800d916 <memset+0x4>
	...

0800d924 <__libc_init_array>:
 800d924:	b570      	push	{r4, r5, r6, lr}
 800d926:	4d0d      	ldr	r5, [pc, #52]	; (800d95c <__libc_init_array+0x38>)
 800d928:	2600      	movs	r6, #0
 800d92a:	4c0d      	ldr	r4, [pc, #52]	; (800d960 <__libc_init_array+0x3c>)
 800d92c:	1b64      	subs	r4, r4, r5
 800d92e:	10a4      	asrs	r4, r4, #2
 800d930:	42a6      	cmp	r6, r4
 800d932:	d109      	bne.n	800d948 <__libc_init_array+0x24>
 800d934:	4d0b      	ldr	r5, [pc, #44]	; (800d964 <__libc_init_array+0x40>)
 800d936:	2600      	movs	r6, #0
 800d938:	4c0b      	ldr	r4, [pc, #44]	; (800d968 <__libc_init_array+0x44>)
 800d93a:	f000 f817 	bl	800d96c <_init>
 800d93e:	1b64      	subs	r4, r4, r5
 800d940:	10a4      	asrs	r4, r4, #2
 800d942:	42a6      	cmp	r6, r4
 800d944:	d105      	bne.n	800d952 <__libc_init_array+0x2e>
 800d946:	bd70      	pop	{r4, r5, r6, pc}
 800d948:	f855 3b04 	ldr.w	r3, [r5], #4
 800d94c:	3601      	adds	r6, #1
 800d94e:	4798      	blx	r3
 800d950:	e7ee      	b.n	800d930 <__libc_init_array+0xc>
 800d952:	f855 3b04 	ldr.w	r3, [r5], #4
 800d956:	3601      	adds	r6, #1
 800d958:	4798      	blx	r3
 800d95a:	e7f2      	b.n	800d942 <__libc_init_array+0x1e>
 800d95c:	0800da8c 	.word	0x0800da8c
 800d960:	0800da8c 	.word	0x0800da8c
 800d964:	0800da8c 	.word	0x0800da8c
 800d968:	0800da90 	.word	0x0800da90

0800d96c <_init>:
 800d96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d96e:	bf00      	nop
 800d970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d972:	bc08      	pop	{r3}
 800d974:	469e      	mov	lr, r3
 800d976:	4770      	bx	lr

0800d978 <_fini>:
 800d978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d97a:	bf00      	nop
 800d97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d97e:	bc08      	pop	{r3}
 800d980:	469e      	mov	lr, r3
 800d982:	4770      	bx	lr
