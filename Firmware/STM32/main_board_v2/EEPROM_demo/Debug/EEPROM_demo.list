
EEPROM_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d71c  0800026c  0800026c  0000126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800d988  0800d988  0000e988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800da88  0800da88  0000ea88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800da90  0800da90  0000ea90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800da94  0800da94  0000ea94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000d09  20000000  0800da98  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000082c  20000d0c  0800e7a1  0000fd0c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001538  0800e7a1  00010538  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000fd09  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030a0f  00000000  00000000  0000fd3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000521c  00000000  00000000  0004074e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002808  00000000  00000000  00045970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001f32  00000000  00000000  00048178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044e86  00000000  00000000  0004a0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00035ded  00000000  00000000  0008ef30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a1bf3  00000000  00000000  000c4d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00266910  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000aea0  00000000  00000000  00266954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008c  00000000  00000000  002717f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800026c <__do_global_dtors_aux>:
 800026c:	b510      	push	{r4, lr}
 800026e:	4c05      	ldr	r4, [pc, #20]	@ (8000284 <__do_global_dtors_aux+0x18>)
 8000270:	7823      	ldrb	r3, [r4, #0]
 8000272:	b933      	cbnz	r3, 8000282 <__do_global_dtors_aux+0x16>
 8000274:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <__do_global_dtors_aux+0x1c>)
 8000276:	b113      	cbz	r3, 800027e <__do_global_dtors_aux+0x12>
 8000278:	4804      	ldr	r0, [pc, #16]	@ (800028c <__do_global_dtors_aux+0x20>)
 800027a:	f3af 8000 	nop.w
 800027e:	2301      	movs	r3, #1
 8000280:	7023      	strb	r3, [r4, #0]
 8000282:	bd10      	pop	{r4, pc}
 8000284:	20000d0c 	.word	0x20000d0c
 8000288:	00000000 	.word	0x00000000
 800028c:	0800d970 	.word	0x0800d970

08000290 <frame_dummy>:
 8000290:	b508      	push	{r3, lr}
 8000292:	4b03      	ldr	r3, [pc, #12]	@ (80002a0 <frame_dummy+0x10>)
 8000294:	b11b      	cbz	r3, 800029e <frame_dummy+0xe>
 8000296:	4903      	ldr	r1, [pc, #12]	@ (80002a4 <frame_dummy+0x14>)
 8000298:	4803      	ldr	r0, [pc, #12]	@ (80002a8 <frame_dummy+0x18>)
 800029a:	f3af 8000 	nop.w
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	00000000 	.word	0x00000000
 80002a4:	20000d10 	.word	0x20000d10
 80002a8:	0800d970 	.word	0x0800d970

080002ac <__aeabi_uldivmod>:
 80002ac:	b953      	cbnz	r3, 80002c4 <__aeabi_uldivmod+0x18>
 80002ae:	b94a      	cbnz	r2, 80002c4 <__aeabi_uldivmod+0x18>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	bf08      	it	eq
 80002b4:	2800      	cmpeq	r0, #0
 80002b6:	bf1c      	itt	ne
 80002b8:	f04f 31ff 	movne.w	r1, #4294967295
 80002bc:	f04f 30ff 	movne.w	r0, #4294967295
 80002c0:	f000 b97e 	b.w	80005c0 <__aeabi_idiv0>
 80002c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002cc:	f000 f806 	bl	80002dc <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4770      	bx	lr

080002dc <__udivmoddi4>:
 80002dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002e2:	460c      	mov	r4, r1
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d14d      	bne.n	8000384 <__udivmoddi4+0xa8>
 80002e8:	428a      	cmp	r2, r1
 80002ea:	460f      	mov	r7, r1
 80002ec:	4684      	mov	ip, r0
 80002ee:	4696      	mov	lr, r2
 80002f0:	fab2 f382 	clz	r3, r2
 80002f4:	d960      	bls.n	80003b8 <__udivmoddi4+0xdc>
 80002f6:	b14b      	cbz	r3, 800030c <__udivmoddi4+0x30>
 80002f8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002fc:	f1c3 0220 	rsb	r2, r3, #32
 8000300:	409f      	lsls	r7, r3
 8000302:	fa00 fc03 	lsl.w	ip, r0, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000310:	fa1f f48e 	uxth.w	r4, lr
 8000314:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000318:	fbb7 f1f6 	udiv	r1, r7, r6
 800031c:	fb06 7711 	mls	r7, r6, r1, r7
 8000320:	fb01 f004 	mul.w	r0, r1, r4
 8000324:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000328:	4290      	cmp	r0, r2
 800032a:	d908      	bls.n	800033e <__udivmoddi4+0x62>
 800032c:	eb1e 0202 	adds.w	r2, lr, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x60>
 8000336:	4290      	cmp	r0, r2
 8000338:	f200 812d 	bhi.w	8000596 <__udivmoddi4+0x2ba>
 800033c:	4639      	mov	r1, r7
 800033e:	1a12      	subs	r2, r2, r0
 8000340:	fa1f fc8c 	uxth.w	ip, ip
 8000344:	fbb2 f0f6 	udiv	r0, r2, r6
 8000348:	fb06 2210 	mls	r2, r6, r0, r2
 800034c:	fb00 f404 	mul.w	r4, r0, r4
 8000350:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000354:	4564      	cmp	r4, ip
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x8e>
 8000358:	eb1e 0c0c 	adds.w	ip, lr, ip
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x8c>
 8000362:	4564      	cmp	r4, ip
 8000364:	f200 811a 	bhi.w	800059c <__udivmoddi4+0x2c0>
 8000368:	4610      	mov	r0, r2
 800036a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800036e:	ebac 0c04 	sub.w	ip, ip, r4
 8000372:	2100      	movs	r1, #0
 8000374:	b125      	cbz	r5, 8000380 <__udivmoddi4+0xa4>
 8000376:	fa2c f303 	lsr.w	r3, ip, r3
 800037a:	2200      	movs	r2, #0
 800037c:	e9c5 3200 	strd	r3, r2, [r5]
 8000380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d905      	bls.n	8000394 <__udivmoddi4+0xb8>
 8000388:	b10d      	cbz	r5, 800038e <__udivmoddi4+0xb2>
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	2100      	movs	r1, #0
 8000390:	4608      	mov	r0, r1
 8000392:	e7f5      	b.n	8000380 <__udivmoddi4+0xa4>
 8000394:	fab3 f183 	clz	r1, r3
 8000398:	2900      	cmp	r1, #0
 800039a:	d14d      	bne.n	8000438 <__udivmoddi4+0x15c>
 800039c:	42a3      	cmp	r3, r4
 800039e:	f0c0 80f2 	bcc.w	8000586 <__udivmoddi4+0x2aa>
 80003a2:	4290      	cmp	r0, r2
 80003a4:	f080 80ef 	bcs.w	8000586 <__udivmoddi4+0x2aa>
 80003a8:	4606      	mov	r6, r0
 80003aa:	4623      	mov	r3, r4
 80003ac:	4608      	mov	r0, r1
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e6      	beq.n	8000380 <__udivmoddi4+0xa4>
 80003b2:	e9c5 6300 	strd	r6, r3, [r5]
 80003b6:	e7e3      	b.n	8000380 <__udivmoddi4+0xa4>
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	f040 80a2 	bne.w	8000502 <__udivmoddi4+0x226>
 80003be:	1a8a      	subs	r2, r1, r2
 80003c0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003c4:	fa1f f68e 	uxth.w	r6, lr
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ce:	fb07 2014 	mls	r0, r7, r4, r2
 80003d2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb06 f004 	mul.w	r0, r6, r4
 80003de:	4290      	cmp	r0, r2
 80003e0:	d90f      	bls.n	8000402 <__udivmoddi4+0x126>
 80003e2:	eb1e 0202 	adds.w	r2, lr, r2
 80003e6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	f04f 0901 	movcs.w	r9, #1
 80003f0:	f04f 0900 	movcc.w	r9, #0
 80003f4:	4290      	cmp	r0, r2
 80003f6:	d903      	bls.n	8000400 <__udivmoddi4+0x124>
 80003f8:	f1b9 0f00 	cmp.w	r9, #0
 80003fc:	f000 80c8 	beq.w	8000590 <__udivmoddi4+0x2b4>
 8000400:	4644      	mov	r4, r8
 8000402:	1a12      	subs	r2, r2, r0
 8000404:	fa1f fc8c 	uxth.w	ip, ip
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	fb00 f606 	mul.w	r6, r0, r6
 8000414:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000418:	4566      	cmp	r6, ip
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x152>
 800041c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x150>
 8000426:	4566      	cmp	r6, ip
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c6>
 800042c:	4610      	mov	r0, r2
 800042e:	ebac 0c06 	sub.w	ip, ip, r6
 8000432:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000436:	e79d      	b.n	8000374 <__udivmoddi4+0x98>
 8000438:	f1c1 0620 	rsb	r6, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	fa20 fc06 	lsr.w	ip, r0, r6
 800044a:	40f4      	lsrs	r4, r6
 800044c:	408a      	lsls	r2, r1
 800044e:	431f      	orrs	r7, r3
 8000450:	ea4e 030c 	orr.w	r3, lr, ip
 8000454:	fa00 fe01 	lsl.w	lr, r0, r1
 8000458:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800045c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000460:	fa1f fc87 	uxth.w	ip, r7
 8000464:	fbb4 f0f8 	udiv	r0, r4, r8
 8000468:	fb08 4410 	mls	r4, r8, r0, r4
 800046c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000470:	fb00 f90c 	mul.w	r9, r0, ip
 8000474:	45a1      	cmp	r9, r4
 8000476:	d90e      	bls.n	8000496 <__udivmoddi4+0x1ba>
 8000478:	193c      	adds	r4, r7, r4
 800047a:	f100 3aff 	add.w	sl, r0, #4294967295
 800047e:	bf2c      	ite	cs
 8000480:	f04f 0b01 	movcs.w	fp, #1
 8000484:	f04f 0b00 	movcc.w	fp, #0
 8000488:	45a1      	cmp	r9, r4
 800048a:	d903      	bls.n	8000494 <__udivmoddi4+0x1b8>
 800048c:	f1bb 0f00 	cmp.w	fp, #0
 8000490:	f000 8093 	beq.w	80005ba <__udivmoddi4+0x2de>
 8000494:	4650      	mov	r0, sl
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f8 	udiv	r3, r4, r8
 80004a2:	fb08 4413 	mls	r4, r8, r3, r4
 80004a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004aa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d906      	bls.n	80004c0 <__udivmoddi4+0x1e4>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x1e2>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d87a      	bhi.n	80005b4 <__udivmoddi4+0x2d8>
 80004be:	4643      	mov	r3, r8
 80004c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c4:	eba4 040c 	sub.w	r4, r4, ip
 80004c8:	fba0 9802 	umull	r9, r8, r0, r2
 80004cc:	4544      	cmp	r4, r8
 80004ce:	46cc      	mov	ip, r9
 80004d0:	4643      	mov	r3, r8
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x1fe>
 80004d4:	d106      	bne.n	80004e4 <__udivmoddi4+0x208>
 80004d6:	45ce      	cmp	lr, r9
 80004d8:	d204      	bcs.n	80004e4 <__udivmoddi4+0x208>
 80004da:	3801      	subs	r0, #1
 80004dc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e0:	eb68 0307 	sbc.w	r3, r8, r7
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x222>
 80004e6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ea:	eb64 0403 	sbc.w	r4, r4, r3
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	40cc      	lsrs	r4, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e73e      	b.n	8000380 <__udivmoddi4+0xa4>
 8000502:	fa02 fe03 	lsl.w	lr, r2, r3
 8000506:	f1c3 0120 	rsb	r1, r3, #32
 800050a:	fa04 f203 	lsl.w	r2, r4, r3
 800050e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000512:	40cc      	lsrs	r4, r1
 8000514:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000518:	fa20 f101 	lsr.w	r1, r0, r1
 800051c:	fa1f f68e 	uxth.w	r6, lr
 8000520:	fbb4 f0f7 	udiv	r0, r4, r7
 8000524:	430a      	orrs	r2, r1
 8000526:	fb07 4410 	mls	r4, r7, r0, r4
 800052a:	0c11      	lsrs	r1, r2, #16
 800052c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000530:	fb00 f406 	mul.w	r4, r0, r6
 8000534:	428c      	cmp	r4, r1
 8000536:	d90e      	bls.n	8000556 <__udivmoddi4+0x27a>
 8000538:	eb1e 0101 	adds.w	r1, lr, r1
 800053c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0901 	movcs.w	r9, #1
 8000546:	f04f 0900 	movcc.w	r9, #0
 800054a:	428c      	cmp	r4, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x278>
 800054e:	f1b9 0f00 	cmp.w	r9, #0
 8000552:	d02c      	beq.n	80005ae <__udivmoddi4+0x2d2>
 8000554:	4640      	mov	r0, r8
 8000556:	1b09      	subs	r1, r1, r4
 8000558:	b292      	uxth	r2, r2
 800055a:	fbb1 f4f7 	udiv	r4, r1, r7
 800055e:	fb07 1114 	mls	r1, r7, r4, r1
 8000562:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000566:	fb04 f106 	mul.w	r1, r4, r6
 800056a:	4291      	cmp	r1, r2
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x2a2>
 800056e:	eb1e 0202 	adds.w	r2, lr, r2
 8000572:	f104 38ff 	add.w	r8, r4, #4294967295
 8000576:	d201      	bcs.n	800057c <__udivmoddi4+0x2a0>
 8000578:	4291      	cmp	r1, r2
 800057a:	d815      	bhi.n	80005a8 <__udivmoddi4+0x2cc>
 800057c:	4644      	mov	r4, r8
 800057e:	1a52      	subs	r2, r2, r1
 8000580:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000584:	e721      	b.n	80003ca <__udivmoddi4+0xee>
 8000586:	1a86      	subs	r6, r0, r2
 8000588:	eb64 0303 	sbc.w	r3, r4, r3
 800058c:	2001      	movs	r0, #1
 800058e:	e70e      	b.n	80003ae <__udivmoddi4+0xd2>
 8000590:	3c02      	subs	r4, #2
 8000592:	4472      	add	r2, lr
 8000594:	e735      	b.n	8000402 <__udivmoddi4+0x126>
 8000596:	3902      	subs	r1, #2
 8000598:	4472      	add	r2, lr
 800059a:	e6d0      	b.n	800033e <__udivmoddi4+0x62>
 800059c:	44f4      	add	ip, lr
 800059e:	3802      	subs	r0, #2
 80005a0:	e6e3      	b.n	800036a <__udivmoddi4+0x8e>
 80005a2:	44f4      	add	ip, lr
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x152>
 80005a8:	3c02      	subs	r4, #2
 80005aa:	4472      	add	r2, lr
 80005ac:	e7e7      	b.n	800057e <__udivmoddi4+0x2a2>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4471      	add	r1, lr
 80005b2:	e7d0      	b.n	8000556 <__udivmoddi4+0x27a>
 80005b4:	3b02      	subs	r3, #2
 80005b6:	443c      	add	r4, r7
 80005b8:	e782      	b.n	80004c0 <__udivmoddi4+0x1e4>
 80005ba:	3802      	subs	r0, #2
 80005bc:	443c      	add	r4, r7
 80005be:	e76a      	b.n	8000496 <__udivmoddi4+0x1ba>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <EEPROM_Init>:

#ifdef M24256X
#include "M24256X.h"
#endif

EEPROM_StatusTypeDef EEPROM_Init(EEPROM_HandleTypeDef *dev, I2C_HandleTypeDef *i2cHandle){
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]

	EEPROM_StatusTypeDef status = EEPROM_OK;
 80005ce:	2300      	movs	r3, #0
 80005d0:	73fb      	strb	r3, [r7, #15]

	/* Assign I2C handle */
	dev->i2cHandle = i2cHandle;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	601a      	str	r2, [r3, #0]

	return status;
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <EEPROM_ReadMemoryByte>:

EEPROM_StatusTypeDef EEPROM_ReadMemoryByte(EEPROM_HandleTypeDef *dev, uint16_t address, uint8_t *data){
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b08a      	sub	sp, #40	@ 0x28
 80005ea:	af04      	add	r7, sp, #16
 80005ec:	60f8      	str	r0, [r7, #12]
 80005ee:	460b      	mov	r3, r1
 80005f0:	607a      	str	r2, [r7, #4]
 80005f2:	817b      	strh	r3, [r7, #10]

	EEPROM_StatusTypeDef status = EEPROM_OK;
 80005f4:	2300      	movs	r3, #0
 80005f6:	75fb      	strb	r3, [r7, #23]

#ifdef M24256X

	uint8_t attempts_remaining = M24256X_MAX_ATTEMPTS;
 80005f8:	2364      	movs	r3, #100	@ 0x64
 80005fa:	75bb      	strb	r3, [r7, #22]

	while (attempts_remaining > 0){
 80005fc:	e01b      	b.n	8000636 <EEPROM_ReadMemoryByte+0x50>
		status = HAL_I2C_Mem_Read(dev->i2cHandle, M24256X_MEM_DEV_ADDR, (address & 0x7FFF), I2C_MEMADD_SIZE_16BIT, data, 1, HAL_MAX_DELAY);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	897b      	ldrh	r3, [r7, #10]
 8000604:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000608:	b29a      	uxth	r2, r3
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	9302      	str	r3, [sp, #8]
 8000610:	2301      	movs	r3, #1
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2302      	movs	r3, #2
 800061a:	21a0      	movs	r1, #160	@ 0xa0
 800061c:	f004 fe0c 	bl	8005238 <HAL_I2C_Mem_Read>
 8000620:	4603      	mov	r3, r0
 8000622:	75fb      	strb	r3, [r7, #23]

		if (status == EEPROM_OK){
 8000624:	7dfb      	ldrb	r3, [r7, #23]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d102      	bne.n	8000630 <EEPROM_ReadMemoryByte+0x4a>
			attempts_remaining = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	75bb      	strb	r3, [r7, #22]
 800062e:	e002      	b.n	8000636 <EEPROM_ReadMemoryByte+0x50>
		}
		else{
			attempts_remaining--;
 8000630:	7dbb      	ldrb	r3, [r7, #22]
 8000632:	3b01      	subs	r3, #1
 8000634:	75bb      	strb	r3, [r7, #22]
	while (attempts_remaining > 0){
 8000636:	7dbb      	ldrb	r3, [r7, #22]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1e0      	bne.n	80005fe <EEPROM_ReadMemoryByte+0x18>
		}
	}

#endif

	return status;
 800063c:	7dfb      	ldrb	r3, [r7, #23]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <EEPROM_WriteMemoryByte>:

EEPROM_StatusTypeDef EEPROM_WriteMemoryByte(EEPROM_HandleTypeDef *dev, uint16_t address, uint8_t *data){
 8000646:	b580      	push	{r7, lr}
 8000648:	b08a      	sub	sp, #40	@ 0x28
 800064a:	af04      	add	r7, sp, #16
 800064c:	60f8      	str	r0, [r7, #12]
 800064e:	460b      	mov	r3, r1
 8000650:	607a      	str	r2, [r7, #4]
 8000652:	817b      	strh	r3, [r7, #10]

	EEPROM_StatusTypeDef status = EEPROM_OK;
 8000654:	2300      	movs	r3, #0
 8000656:	75fb      	strb	r3, [r7, #23]

#ifdef M24256X

	uint8_t attempts_remaining = M24256X_MAX_ATTEMPTS;
 8000658:	2364      	movs	r3, #100	@ 0x64
 800065a:	75bb      	strb	r3, [r7, #22]

	while (attempts_remaining > 0){
 800065c:	e01b      	b.n	8000696 <EEPROM_WriteMemoryByte+0x50>
		status = HAL_I2C_Mem_Write(dev->i2cHandle, M24256X_MEM_DEV_ADDR, (address & 0x7FFF), I2C_MEMADD_SIZE_16BIT, data, 1, HAL_MAX_DELAY);
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	897b      	ldrh	r3, [r7, #10]
 8000664:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000668:	b29a      	uxth	r2, r3
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
 800066e:	9302      	str	r3, [sp, #8]
 8000670:	2301      	movs	r3, #1
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2302      	movs	r3, #2
 800067a:	21a0      	movs	r1, #160	@ 0xa0
 800067c:	f004 fcc8 	bl	8005010 <HAL_I2C_Mem_Write>
 8000680:	4603      	mov	r3, r0
 8000682:	75fb      	strb	r3, [r7, #23]

		if (status == EEPROM_OK){
 8000684:	7dfb      	ldrb	r3, [r7, #23]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d102      	bne.n	8000690 <EEPROM_WriteMemoryByte+0x4a>
			attempts_remaining = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	75bb      	strb	r3, [r7, #22]
 800068e:	e002      	b.n	8000696 <EEPROM_WriteMemoryByte+0x50>
		}
		else{
			attempts_remaining--;
 8000690:	7dbb      	ldrb	r3, [r7, #22]
 8000692:	3b01      	subs	r3, #1
 8000694:	75bb      	strb	r3, [r7, #22]
	while (attempts_remaining > 0){
 8000696:	7dbb      	ldrb	r3, [r7, #22]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1e0      	bne.n	800065e <EEPROM_WriteMemoryByte+0x18>
		}
	}

#endif

	return status;
 800069c:	7dfb      	ldrb	r3, [r7, #23]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f002 fcb9 	bl	8003024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f855 	bl	8000760 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80006b6:	f000 f8bd 	bl	8000834 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ba:	f000 ffff 	bl	80016bc <MX_GPIO_Init>
  MX_DCACHE1_Init();
 80006be:	f000 f937 	bl	8000930 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 80006c2:	f000 f94b 	bl	800095c <MX_DCACHE2_Init>
  MX_ICACHE_Init();
 80006c6:	f000 fc3d 	bl	8000f44 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80006ca:	f000 fc6d 	bl	8000fa8 <MX_LPUART1_UART_Init>
  MX_OCTOSPI1_Init();
 80006ce:	f000 fdd3 	bl	8001278 <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 80006d2:	f000 f90b 	bl	80008ec <MX_CRC_Init>
  MX_DMA2D_Init();
 80006d6:	f000 f957 	bl	8000988 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80006da:	f000 f993 	bl	8000a04 <MX_DSIHOST_DSI_Init>
  MX_GFXMMU_Init();
 80006de:	f000 fa8d 	bl	8000bfc <MX_GFXMMU_Init>
  MX_GPU2D_Init();
 80006e2:	f000 fadb 	bl	8000c9c <MX_GPU2D_Init>
  MX_LTDC_Init();
 80006e6:	f000 fd43 	bl	8001170 <MX_LTDC_Init>
  MX_RTC_Init();
 80006ea:	f000 fef7 	bl	80014dc <MX_RTC_Init>
  MX_OCTOSPI2_Init();
 80006ee:	f000 fe5d 	bl	80013ac <MX_OCTOSPI2_Init>
  MX_ADF1_Init();
 80006f2:	f000 f8ad 	bl	8000850 <MX_ADF1_Init>
  MX_I2C1_Init();
 80006f6:	f000 fae5 	bl	8000cc4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006fa:	f000 fb23 	bl	8000d44 <MX_I2C2_Init>
  MX_I2C4_Init();
 80006fe:	f000 fba1 	bl	8000e44 <MX_I2C4_Init>
  MX_I2C6_Init();
 8000702:	f000 fbdf 	bl	8000ec4 <MX_I2C6_Init>
  MX_USART1_UART_Init();
 8000706:	f000 fc9b 	bl	8001040 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800070a:	f000 fce5 	bl	80010d8 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 800070e:	f000 ff67 	bl	80015e0 <MX_SPI1_Init>
  MX_I2C3_Init();
 8000712:	f000 fb57 	bl	8000dc4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  EEPROM_Init(&heeprom, &hi2c4);
 8000716:	490f      	ldr	r1, [pc, #60]	@ (8000754 <main+0xac>)
 8000718:	480f      	ldr	r0, [pc, #60]	@ (8000758 <main+0xb0>)
 800071a:	f7ff ff53 	bl	80005c4 <EEPROM_Init>
  uint8_t testWrite = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	71fb      	strb	r3, [r7, #7]
  uint8_t testRead	= 0;
 8000722:	2300      	movs	r3, #0
 8000724:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  EEPROM_WriteMemoryByte(&heeprom, 0x0800, &testWrite);
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	461a      	mov	r2, r3
 800072a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800072e:	480a      	ldr	r0, [pc, #40]	@ (8000758 <main+0xb0>)
 8000730:	f7ff ff89 	bl	8000646 <EEPROM_WriteMemoryByte>
  EEPROM_ReadMemoryByte(&heeprom, 0x0800, &testRead);
 8000734:	1dbb      	adds	r3, r7, #6
 8000736:	461a      	mov	r2, r3
 8000738:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800073c:	4806      	ldr	r0, [pc, #24]	@ (8000758 <main+0xb0>)
 800073e:	f7ff ff52 	bl	80005e6 <EEPROM_ReadMemoryByte>
  HAL_UART_Transmit(&huart6, &testRead, 1, HAL_MAX_DELAY);
 8000742:	1db9      	adds	r1, r7, #6
 8000744:	f04f 33ff 	mov.w	r3, #4294967295
 8000748:	2201      	movs	r2, #1
 800074a:	4804      	ldr	r0, [pc, #16]	@ (800075c <main+0xb4>)
 800074c:	f00c fb6c 	bl	800ce28 <HAL_UART_Transmit>
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <main+0xa8>
 8000754:	20001038 	.word	0x20001038
 8000758:	200014bc 	.word	0x200014bc
 800075c:	20001208 	.word	0x20001208

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b09e      	sub	sp, #120	@ 0x78
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0318 	add.w	r3, r7, #24
 800076a:	2260      	movs	r2, #96	@ 0x60
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f00d f8d1 	bl	800d916 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	463b      	mov	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
 8000782:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000784:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000788:	f006 ff2a 	bl	80075e0 <HAL_PWREx_ControlVoltageScaling>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000792:	f001 fa1d 	bl	8001bd0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000796:	f006 ff13 	bl	80075c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800079a:	4b25      	ldr	r3, [pc, #148]	@ (8000830 <SystemClock_Config+0xd0>)
 800079c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80007a0:	4a23      	ldr	r2, [pc, #140]	@ (8000830 <SystemClock_Config+0xd0>)
 80007a2:	f023 0318 	bic.w	r3, r3, #24
 80007a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80007aa:	2305      	movs	r3, #5
 80007ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007b4:	2381      	movs	r3, #129	@ 0x81
 80007b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b8:	2302      	movs	r3, #2
 80007ba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007bc:	2303      	movs	r3, #3
 80007be:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007c8:	230a      	movs	r3, #10
 80007ca:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80007d8:	230c      	movs	r3, #12
 80007da:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0318 	add.w	r3, r7, #24
 80007e4:	4618      	mov	r0, r3
 80007e6:	f006 ffe7 	bl	80077b8 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f0:	f001 f9ee 	bl	8001bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	231f      	movs	r3, #31
 80007f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2303      	movs	r3, #3
 80007fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	2104      	movs	r1, #4
 8000810:	4618      	mov	r0, r3
 8000812:	f007 fead 	bl	8008570 <HAL_RCC_ClockConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800081c:	f001 f9d8 	bl	8001bd0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000820:	f008 fa28 	bl	8008c74 <HAL_RCC_EnableCSS>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8000824:	f00b f9a4 	bl	800bb70 <HAL_RCCEx_EnableLSECSS>
}
 8000828:	bf00      	nop
 800082a:	3778      	adds	r7, #120	@ 0x78
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	46020c00 	.word	0x46020c00

08000834 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000838:	f006 ffae 	bl	8007798 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800083c:	2002      	movs	r0, #2
 800083e:	f006 ff5b 	bl	80076f8 <HAL_PWREx_ConfigSupply>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000848:	f001 f9c2 	bl	8001bd0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 8000854:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <MX_ADF1_Init+0x90>)
 8000856:	4a23      	ldr	r2, [pc, #140]	@ (80008e4 <MX_ADF1_Init+0x94>)
 8000858:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 800085a:	4b21      	ldr	r3, [pc, #132]	@ (80008e0 <MX_ADF1_Init+0x90>)
 800085c:	2201      	movs	r2, #1
 800085e:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 8000860:	4b1f      	ldr	r3, [pc, #124]	@ (80008e0 <MX_ADF1_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 8000866:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <MX_ADF1_Init+0x90>)
 8000868:	2201      	movs	r2, #1
 800086a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 800086e:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <MX_ADF1_Init+0x90>)
 8000870:	2210      	movs	r2, #16
 8000872:	629a      	str	r2, [r3, #40]	@ 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 8000874:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <MX_ADF1_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	62da      	str	r2, [r3, #44]	@ 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 800087a:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <MX_ADF1_Init+0x90>)
 800087c:	2204      	movs	r2, #4
 800087e:	631a      	str	r2, [r3, #48]	@ 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8000880:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <MX_ADF1_Init+0x90>)
 8000882:	2201      	movs	r2, #1
 8000884:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 8000886:	4816      	ldr	r0, [pc, #88]	@ (80008e0 <MX_ADF1_Init+0x90>)
 8000888:	f005 fd3a 	bl	8006300 <HAL_MDF_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ADF1_Init+0x46>
  {
    Error_Handler();
 8000892:	f001 f99d 	bl	8001bd0 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 8000896:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_ADF1_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <MX_ADF1_Init+0x98>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_ADF1_Init+0x98>)
 80008a4:	2240      	movs	r2, #64	@ 0x40
 80008a6:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <MX_ADF1_Init+0x98>)
 80008aa:	2202      	movs	r2, #2
 80008ac:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_ADF1_Init+0x98>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_ADF1_Init+0x98>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_ADF1_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_ADF1_Init+0x98>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 80008ca:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <MX_ADF1_Init+0x98>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	665a      	str	r2, [r3, #100]	@ 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 80008d0:	4b05      	ldr	r3, [pc, #20]	@ (80008e8 <MX_ADF1_Init+0x98>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	669a      	str	r2, [r3, #104]	@ 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 80008d6:	4b04      	ldr	r3, [pc, #16]	@ (80008e8 <MX_ADF1_Init+0x98>)
 80008d8:	2200      	movs	r2, #0
 80008da:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000d28 	.word	0x20000d28
 80008e4:	46024080 	.word	0x46024080
 80008e8:	20000d6c 	.word	0x20000d6c

080008ec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <MX_CRC_Init+0x3c>)
 80008f2:	4a0e      	ldr	r2, [pc, #56]	@ (800092c <MX_CRC_Init+0x40>)
 80008f4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <MX_CRC_Init+0x3c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <MX_CRC_Init+0x3c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <MX_CRC_Init+0x3c>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000908:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <MX_CRC_Init+0x3c>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <MX_CRC_Init+0x3c>)
 8000910:	2201      	movs	r2, #1
 8000912:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	@ (8000928 <MX_CRC_Init+0x3c>)
 8000916:	f002 fcd7 	bl	80032c8 <HAL_CRC_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000920:	f001 f956 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000de8 	.word	0x20000de8
 800092c:	40023000 	.word	0x40023000

08000930 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8000934:	4b07      	ldr	r3, [pc, #28]	@ (8000954 <MX_DCACHE1_Init+0x24>)
 8000936:	4a08      	ldr	r2, [pc, #32]	@ (8000958 <MX_DCACHE1_Init+0x28>)
 8000938:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <MX_DCACHE1_Init+0x24>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	@ (8000954 <MX_DCACHE1_Init+0x24>)
 8000942:	f002 fdb3 	bl	80034ac <HAL_DCACHE_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 800094c:	f001 f940 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000e0c 	.word	0x20000e0c
 8000958:	40031400 	.word	0x40031400

0800095c <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 8000960:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <MX_DCACHE2_Init+0x24>)
 8000962:	4a08      	ldr	r2, [pc, #32]	@ (8000984 <MX_DCACHE2_Init+0x28>)
 8000964:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000966:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <MX_DCACHE2_Init+0x24>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	@ (8000980 <MX_DCACHE2_Init+0x24>)
 800096e:	f002 fd9d 	bl	80034ac <HAL_DCACHE_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_DCACHE2_Init+0x20>
  {
    Error_Handler();
 8000978:	f001 f92a 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000e38 	.word	0x20000e38
 8000984:	40031800 	.word	0x40031800

08000988 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800098c:	4b1b      	ldr	r3, [pc, #108]	@ (80009fc <MX_DMA2D_Init+0x74>)
 800098e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a00 <MX_DMA2D_Init+0x78>)
 8000990:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000992:	4b1a      	ldr	r3, [pc, #104]	@ (80009fc <MX_DMA2D_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000998:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <MX_DMA2D_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 608;
 800099e:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <MX_DMA2D_Init+0x74>)
 80009a0:	f44f 7218 	mov.w	r2, #608	@ 0x260
 80009a4:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 80009a6:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <MX_DMA2D_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 80009ac:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <MX_DMA2D_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009b2:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <MX_DMA2D_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80009b8:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <MX_DMA2D_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009be:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_DMA2D_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009c4:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <MX_DMA2D_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80009ca:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_DMA2D_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <MX_DMA2D_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009d6:	4809      	ldr	r0, [pc, #36]	@ (80009fc <MX_DMA2D_Init+0x74>)
 80009d8:	f002 fe8f 	bl	80036fa <HAL_DMA2D_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 80009e2:	f001 f8f5 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009e6:	2101      	movs	r1, #1
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <MX_DMA2D_Init+0x74>)
 80009ea:	f002 fff7 	bl	80039dc <HAL_DMA2D_ConfigLayer>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 80009f4:	f001 f8ec 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000e64 	.word	0x20000e64
 8000a00:	4002b000 	.word	0x4002b000

08000a04 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0ae      	sub	sp, #184	@ 0xb8
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000a0a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]
 8000a1a:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000a1c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a20:	2224      	movs	r2, #36	@ 0x24
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f00c ff76 	bl	800d916 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000a2a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
 8000a3a:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000a3c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a40:	2234      	movs	r2, #52	@ 0x34
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f00c ff66 	bl	800d916 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	222c      	movs	r2, #44	@ 0x2c
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f00c ff60 	bl	800d916 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000a56:	4b67      	ldr	r3, [pc, #412]	@ (8000bf4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a58:	4a67      	ldr	r2, [pc, #412]	@ (8000bf8 <MX_DSIHOST_DSI_Init+0x1f4>)
 8000a5a:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000a5c:	4b65      	ldr	r3, [pc, #404]	@ (8000bf4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000a62:	4b64      	ldr	r3, [pc, #400]	@ (8000bf4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a64:	2204      	movs	r2, #4
 8000a66:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000a68:	4b62      	ldr	r3, [pc, #392]	@ (8000bf4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 8000a6e:	4b61      	ldr	r3, [pc, #388]	@ (8000bf4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a70:	2208      	movs	r2, #8
 8000a72:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 8000a74:	4b5f      	ldr	r3, [pc, #380]	@ (8000bf4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 8000a7a:	237d      	movs	r3, #125	@ 0x7d
 8000a7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 8000a80:	2304      	movs	r3, #4
 8000a82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a9e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4853      	ldr	r0, [pc, #332]	@ (8000bf4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000aa6:	f003 f941 	bl	8003d2c <HAL_DSI_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 8000ab0:	f001 f88e 	bl	8001bd0 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.LowPowerReadTimeout = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  HostTimeouts.BTATimeout = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000ae8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000aec:	4619      	mov	r1, r3
 8000aee:	4841      	ldr	r0, [pc, #260]	@ (8000bf4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000af0:	f003 fdcc 	bl	800468c <HAL_DSI_ConfigHostTimeouts>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_DSIHOST_DSI_Init+0xfa>
  {
    Error_Handler();
 8000afa:	f001 f869 	bl	8001bd0 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 10;
 8000afe:	230a      	movs	r3, #10
 8000b00:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.ClockLaneLP2HSTime = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneHS2LPTime = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneLP2HSTime = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.DataLaneMaxReadTime = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	677b      	str	r3, [r7, #116]	@ 0x74
  PhyTimings.StopWaitTime = 10;
 8000b12:	230a      	movs	r3, #10
 8000b14:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000b16:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4835      	ldr	r0, [pc, #212]	@ (8000bf4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000b1e:	f003 fd1f 	bl	8004560 <HAL_DSI_ConfigPhyTimer>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000b28:	f001 f852 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000b2c:	2104      	movs	r1, #4
 8000b2e:	4831      	ldr	r0, [pc, #196]	@ (8000bf4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000b30:	f003 fcee 	bl	8004510 <HAL_DSI_ConfigFlowControl>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000b3a:	f001 f849 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	482c      	ldr	r0, [pc, #176]	@ (8000bf4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000b42:	f003 f9c7 	bl	8003ed4 <HAL_DSI_ConfigErrorMonitor>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 8000b4c:	f001 f840 	bl	8001bd0 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000b84:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b88:	4619      	mov	r1, r3
 8000b8a:	481a      	ldr	r0, [pc, #104]	@ (8000bf4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000b8c:	f003 fc62 	bl	8004454 <HAL_DSI_ConfigCommand>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_DSIHOST_DSI_Init+0x196>
  {
    Error_Handler();
 8000b96:	f001 f81b 	bl	8001bd0 <Error_Handler>
  }
  CmdCfg.ColorCoding = DSI_RGB888;
 8000b9a:	2305      	movs	r3, #5
 8000b9c:	60bb      	str	r3, [r7, #8]
  CmdCfg.CommandSize = 416;
 8000b9e:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8000ba2:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	613b      	str	r3, [r7, #16]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000bb8:	2380      	movs	r3, #128	@ 0x80
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000bbc:	2340      	movs	r3, #64	@ 0x40
 8000bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480a      	ldr	r0, [pc, #40]	@ (8000bf4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000bca:	f003 fb6c 	bl	80042a6 <HAL_DSI_ConfigAdaptedCommandMode>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 8000bd4:	f000 fffc 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4806      	ldr	r0, [pc, #24]	@ (8000bf4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000bdc:	f003 fb38 	bl	8004250 <HAL_DSI_SetGenericVCID>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 8000be6:	f000 fff3 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	37b8      	adds	r7, #184	@ 0xb8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000ec4 	.word	0x20000ec4
 8000bf8:	40016c00 	.word	0x40016c00

08000bfc <MX_GFXMMU_Init>:
  * @brief GFXMMU Initialization Function
  * @param None
  * @retval None
  */
static void MX_GFXMMU_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END GFXMMU_Init 0 */

  /* USER CODE BEGIN GFXMMU_Init 1 */

  /* USER CODE END GFXMMU_Init 1 */
  hgfxmmu.Instance = GFXMMU;
 8000c00:	4b23      	ldr	r3, [pc, #140]	@ (8000c90 <MX_GFXMMU_Init+0x94>)
 8000c02:	4a24      	ldr	r2, [pc, #144]	@ (8000c94 <MX_GFXMMU_Init+0x98>)
 8000c04:	601a      	str	r2, [r3, #0]
  hgfxmmu.Init.BlocksPerLine = GFXMMU_256BLOCKS;
 8000c06:	4b22      	ldr	r3, [pc, #136]	@ (8000c90 <MX_GFXMMU_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  hgfxmmu.Init.DefaultValue = 0;
 8000c0c:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <MX_GFXMMU_Init+0x94>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hgfxmmu.Init.Buffers.Buf0Address = 0;
 8000c12:	4b1f      	ldr	r3, [pc, #124]	@ (8000c90 <MX_GFXMMU_Init+0x94>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  hgfxmmu.Init.Buffers.Buf1Address = 0;
 8000c18:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <MX_GFXMMU_Init+0x94>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  hgfxmmu.Init.Buffers.Buf2Address = 0;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <MX_GFXMMU_Init+0x94>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	615a      	str	r2, [r3, #20]
  hgfxmmu.Init.Buffers.Buf3Address = 0;
 8000c24:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <MX_GFXMMU_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  hgfxmmu.Init.CachePrefetch.Activation = ENABLE;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <MX_GFXMMU_Init+0x94>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	771a      	strb	r2, [r3, #28]
  hgfxmmu.Init.CachePrefetch.CacheLock = GFXMMU_CACHE_LOCK_ENABLE;
 8000c30:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <MX_GFXMMU_Init+0x94>)
 8000c32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c36:	621a      	str	r2, [r3, #32]
  hgfxmmu.Init.CachePrefetch.CacheLockBuffer = GFXMMU_CACHE_LOCK_BUFFER0;
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <MX_GFXMMU_Init+0x94>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hgfxmmu.Init.CachePrefetch.CacheForce = GFXMMU_CACHE_FORCE_ENABLE;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <MX_GFXMMU_Init+0x94>)
 8000c40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c44:	629a      	str	r2, [r3, #40]	@ 0x28
  hgfxmmu.Init.CachePrefetch.OutterBufferability = GFXMMU_OUTTER_BUFFERABILITY_ENABLE;
 8000c46:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <MX_GFXMMU_Init+0x94>)
 8000c48:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hgfxmmu.Init.CachePrefetch.OutterCachability = GFXMMU_OUTTER_CACHABILITY_ENABLE;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <MX_GFXMMU_Init+0x94>)
 8000c50:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c54:	631a      	str	r2, [r3, #48]	@ 0x30
  hgfxmmu.Init.CachePrefetch.Prefetch = GFXMMU_PREFETCH_ENABLE;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <MX_GFXMMU_Init+0x94>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	635a      	str	r2, [r3, #52]	@ 0x34
  hgfxmmu.Init.Interrupts.Activation = ENABLE;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <MX_GFXMMU_Init+0x94>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_GFXMMU_Init(&hgfxmmu) != HAL_OK)
 8000c64:	480a      	ldr	r0, [pc, #40]	@ (8000c90 <MX_GFXMMU_Init+0x94>)
 8000c66:	f003 fdd7 	bl	8004818 <HAL_GFXMMU_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_GFXMMU_Init+0x78>
  {
    Error_Handler();
 8000c70:	f000 ffae 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_GFXMMU_ConfigLut(&hgfxmmu, GFXMMU_LUT_FIRST, GFXMMU_LUT_SIZE, (uint32_t)gfxmmu_lut_config) != HAL_OK)
 8000c74:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <MX_GFXMMU_Init+0x9c>)
 8000c76:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <MX_GFXMMU_Init+0x94>)
 8000c7e:	f003 fe4b 	bl	8004918 <HAL_GFXMMU_ConfigLut>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_GFXMMU_Init+0x90>
  {
    Error_Handler();
 8000c88:	f000 ffa2 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN GFXMMU_Init 2 */

  /* USER CODE END GFXMMU_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000ee8 	.word	0x20000ee8
 8000c94:	4002c000 	.word	0x4002c000
 8000c98:	20000000 	.word	0x20000000

08000c9c <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <MX_GPU2D_Init+0x20>)
 8000ca2:	4a07      	ldr	r2, [pc, #28]	@ (8000cc0 <MX_GPU2D_Init+0x24>)
 8000ca4:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_GPU2D_Init+0x20>)
 8000ca8:	f004 f8aa 	bl	8004e00 <HAL_GPU2D_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 8000cb2:	f000 ff8d 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000f30 	.word	0x20000f30
 8000cc0:	4002f000 	.word	0x4002f000

08000cc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000cca:	4a1c      	ldr	r2, [pc, #112]	@ (8000d3c <MX_I2C1_Init+0x78>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d40 <MX_I2C1_Init+0x7c>)
 8000cd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cda:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cfe:	480e      	ldr	r0, [pc, #56]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000d00:	f004 f8ea 	bl	8004ed8 <HAL_I2C_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d0a:	f000 ff61 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4809      	ldr	r0, [pc, #36]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000d12:	f004 fe63 	bl	80059dc <HAL_I2CEx_ConfigAnalogFilter>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d1c:	f000 ff58 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d20:	2100      	movs	r1, #0
 8000d22:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <MX_I2C1_Init+0x74>)
 8000d24:	f004 fea5 	bl	8005a72 <HAL_I2CEx_ConfigDigitalFilter>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d2e:	f000 ff4f 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000f3c 	.word	0x20000f3c
 8000d3c:	40005400 	.word	0x40005400
 8000d40:	30909dec 	.word	0x30909dec

08000d44 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dbc <MX_I2C2_Init+0x78>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d50:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc0 <MX_I2C2_Init+0x7c>)
 8000d52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d54:	4b18      	ldr	r3, [pc, #96]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d60:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d66:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d72:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d7e:	480e      	ldr	r0, [pc, #56]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d80:	f004 f8aa 	bl	8004ed8 <HAL_I2C_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d8a:	f000 ff21 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4809      	ldr	r0, [pc, #36]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000d92:	f004 fe23 	bl	80059dc <HAL_I2CEx_ConfigAnalogFilter>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d9c:	f000 ff18 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000da0:	2100      	movs	r1, #0
 8000da2:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <MX_I2C2_Init+0x74>)
 8000da4:	f004 fe65 	bl	8005a72 <HAL_I2CEx_ConfigDigitalFilter>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dae:	f000 ff0f 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000f90 	.word	0x20000f90
 8000dbc:	40005800 	.word	0x40005800
 8000dc0:	30909dec 	.word	0x30909dec

08000dc4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e38 <MX_I2C3_Init+0x74>)
 8000dca:	4a1c      	ldr	r2, [pc, #112]	@ (8000e3c <MX_I2C3_Init+0x78>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	@ (8000e38 <MX_I2C3_Init+0x74>)
 8000dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e40 <MX_I2C3_Init+0x7c>)
 8000dd2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000dd4:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <MX_I2C3_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dda:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <MX_I2C3_Init+0x74>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de0:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <MX_I2C3_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000de6:	4b14      	ldr	r3, [pc, #80]	@ (8000e38 <MX_I2C3_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dec:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <MX_I2C3_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df2:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <MX_I2C3_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <MX_I2C3_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000dfe:	480e      	ldr	r0, [pc, #56]	@ (8000e38 <MX_I2C3_Init+0x74>)
 8000e00:	f004 f86a 	bl	8004ed8 <HAL_I2C_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e0a:	f000 fee1 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4809      	ldr	r0, [pc, #36]	@ (8000e38 <MX_I2C3_Init+0x74>)
 8000e12:	f004 fde3 	bl	80059dc <HAL_I2CEx_ConfigAnalogFilter>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e1c:	f000 fed8 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e20:	2100      	movs	r1, #0
 8000e22:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <MX_I2C3_Init+0x74>)
 8000e24:	f004 fe25 	bl	8005a72 <HAL_I2CEx_ConfigDigitalFilter>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e2e:	f000 fecf 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000fe4 	.word	0x20000fe4
 8000e3c:	46002800 	.word	0x46002800
 8000e40:	30909dec 	.word	0x30909dec

08000e44 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb8 <MX_I2C4_Init+0x74>)
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ebc <MX_I2C4_Init+0x78>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30909DEC;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_I2C4_Init+0x74>)
 8000e50:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec0 <MX_I2C4_Init+0x7c>)
 8000e52:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <MX_I2C4_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <MX_I2C4_Init+0x74>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_I2C4_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_I2C4_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_I2C4_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_I2C4_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_I2C4_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000e7e:	480e      	ldr	r0, [pc, #56]	@ (8000eb8 <MX_I2C4_Init+0x74>)
 8000e80:	f004 f82a 	bl	8004ed8 <HAL_I2C_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000e8a:	f000 fea1 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4809      	ldr	r0, [pc, #36]	@ (8000eb8 <MX_I2C4_Init+0x74>)
 8000e92:	f004 fda3 	bl	80059dc <HAL_I2CEx_ConfigAnalogFilter>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000e9c:	f000 fe98 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <MX_I2C4_Init+0x74>)
 8000ea4:	f004 fde5 	bl	8005a72 <HAL_I2CEx_ConfigDigitalFilter>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000eae:	f000 fe8f 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20001038 	.word	0x20001038
 8000ebc:	40008400 	.word	0x40008400
 8000ec0:	30909dec 	.word	0x30909dec

08000ec4 <MX_I2C6_Init>:
  * @brief I2C6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C6_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C6_Init 0 */

  /* USER CODE BEGIN I2C6_Init 1 */

  /* USER CODE END I2C6_Init 1 */
  hi2c6.Instance = I2C6;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f38 <MX_I2C6_Init+0x74>)
 8000eca:	4a1c      	ldr	r2, [pc, #112]	@ (8000f3c <MX_I2C6_Init+0x78>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hi2c6.Init.Timing = 0x30909DEC;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <MX_I2C6_Init+0x74>)
 8000ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f40 <MX_I2C6_Init+0x7c>)
 8000ed2:	605a      	str	r2, [r3, #4]
  hi2c6.Init.OwnAddress1 = 0;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <MX_I2C6_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  hi2c6.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eda:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <MX_I2C6_Init+0x74>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	60da      	str	r2, [r3, #12]
  hi2c6.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <MX_I2C6_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
  hi2c6.Init.OwnAddress2 = 0;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <MX_I2C6_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
  hi2c6.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <MX_I2C6_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
  hi2c6.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <MX_I2C6_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	61da      	str	r2, [r3, #28]
  hi2c6.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <MX_I2C6_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c6) != HAL_OK)
 8000efe:	480e      	ldr	r0, [pc, #56]	@ (8000f38 <MX_I2C6_Init+0x74>)
 8000f00:	f003 ffea 	bl	8004ed8 <HAL_I2C_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_I2C6_Init+0x4a>
  {
    Error_Handler();
 8000f0a:	f000 fe61 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c6, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4809      	ldr	r0, [pc, #36]	@ (8000f38 <MX_I2C6_Init+0x74>)
 8000f12:	f004 fd63 	bl	80059dc <HAL_I2CEx_ConfigAnalogFilter>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_I2C6_Init+0x5c>
  {
    Error_Handler();
 8000f1c:	f000 fe58 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c6, 0) != HAL_OK)
 8000f20:	2100      	movs	r1, #0
 8000f22:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <MX_I2C6_Init+0x74>)
 8000f24:	f004 fda5 	bl	8005a72 <HAL_I2CEx_ConfigDigitalFilter>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_I2C6_Init+0x6e>
  {
    Error_Handler();
 8000f2e:	f000 fe4f 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C6_Init 2 */

  /* USER CODE END I2C6_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000108c 	.word	0x2000108c
 8000f3c:	40009c00 	.word	0x40009c00
 8000f40:	30909dec 	.word	0x30909dec

08000f44 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8000f58:	f004 fde8 	bl	8005b2c <HAL_ICACHE_Disable>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000f62:	f000 fe35 	bl	8001bd0 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 8000f66:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f6a:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8000f6c:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000f70:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 8000f72:	2301      	movs	r3, #1
 8000f74:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	4619      	mov	r1, r3
 8000f82:	2000      	movs	r0, #0
 8000f84:	f004 fe02 	bl	8005b8c <HAL_ICACHE_EnableRemapRegion>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 8000f8e:	f000 fe1f 	bl	8001bd0 <Error_Handler>
  }

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000f92:	f004 fdbb 	bl	8005b0c <HAL_ICACHE_Enable>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_ICACHE_Init+0x5c>
  {
    Error_Handler();
 8000f9c:	f000 fe18 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000fac:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <MX_LPUART1_UART_Init+0x8c>)
 8000fae:	4a22      	ldr	r2, [pc, #136]	@ (8001038 <MX_LPUART1_UART_Init+0x90>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000fb2:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <MX_LPUART1_UART_Init+0x8c>)
 8000fb4:	4a21      	ldr	r2, [pc, #132]	@ (800103c <MX_LPUART1_UART_Init+0x94>)
 8000fb6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <MX_LPUART1_UART_Init+0x8c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <MX_LPUART1_UART_Init+0x8c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <MX_LPUART1_UART_Init+0x8c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <MX_LPUART1_UART_Init+0x8c>)
 8000fcc:	220c      	movs	r2, #12
 8000fce:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <MX_LPUART1_UART_Init+0x8c>)
 8000fd2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000fd6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <MX_LPUART1_UART_Init+0x8c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <MX_LPUART1_UART_Init+0x8c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000fe4:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <MX_LPUART1_UART_Init+0x8c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000fea:	4812      	ldr	r0, [pc, #72]	@ (8001034 <MX_LPUART1_UART_Init+0x8c>)
 8000fec:	f00b fecc 	bl	800cd88 <HAL_UART_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ff6:	f000 fdeb 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	480d      	ldr	r0, [pc, #52]	@ (8001034 <MX_LPUART1_UART_Init+0x8c>)
 8000ffe:	f00c fba1 	bl	800d744 <HAL_UARTEx_SetTxFifoThreshold>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001008:	f000 fde2 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100c:	2100      	movs	r1, #0
 800100e:	4809      	ldr	r0, [pc, #36]	@ (8001034 <MX_LPUART1_UART_Init+0x8c>)
 8001010:	f00c fbd6 	bl	800d7c0 <HAL_UARTEx_SetRxFifoThreshold>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800101a:	f000 fdd9 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_LPUART1_UART_Init+0x8c>)
 8001020:	f00c fb57 	bl	800d6d2 <HAL_UARTEx_DisableFifoMode>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800102a:	f000 fdd1 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200010e0 	.word	0x200010e0
 8001038:	46002400 	.word	0x46002400
 800103c:	00033324 	.word	0x00033324

08001040 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001044:	4b22      	ldr	r3, [pc, #136]	@ (80010d0 <MX_USART1_UART_Init+0x90>)
 8001046:	4a23      	ldr	r2, [pc, #140]	@ (80010d4 <MX_USART1_UART_Init+0x94>)
 8001048:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800104a:	4b21      	ldr	r3, [pc, #132]	@ (80010d0 <MX_USART1_UART_Init+0x90>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <MX_USART1_UART_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b1d      	ldr	r3, [pc, #116]	@ (80010d0 <MX_USART1_UART_Init+0x90>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800105e:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <MX_USART1_UART_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <MX_USART1_UART_Init+0x90>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <MX_USART1_UART_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <MX_USART1_UART_Init+0x90>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001076:	4b16      	ldr	r3, [pc, #88]	@ (80010d0 <MX_USART1_UART_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800107c:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <MX_USART1_UART_Init+0x90>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001082:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <MX_USART1_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001088:	4811      	ldr	r0, [pc, #68]	@ (80010d0 <MX_USART1_UART_Init+0x90>)
 800108a:	f00b fe7d 	bl	800cd88 <HAL_UART_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001094:	f000 fd9c 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001098:	2100      	movs	r1, #0
 800109a:	480d      	ldr	r0, [pc, #52]	@ (80010d0 <MX_USART1_UART_Init+0x90>)
 800109c:	f00c fb52 	bl	800d744 <HAL_UARTEx_SetTxFifoThreshold>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010a6:	f000 fd93 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010aa:	2100      	movs	r1, #0
 80010ac:	4808      	ldr	r0, [pc, #32]	@ (80010d0 <MX_USART1_UART_Init+0x90>)
 80010ae:	f00c fb87 	bl	800d7c0 <HAL_UARTEx_SetRxFifoThreshold>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010b8:	f000 fd8a 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <MX_USART1_UART_Init+0x90>)
 80010be:	f00c fb08 	bl	800d6d2 <HAL_UARTEx_DisableFifoMode>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010c8:	f000 fd82 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20001174 	.word	0x20001174
 80010d4:	40013800 	.word	0x40013800

080010d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80010dc:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <MX_USART6_UART_Init+0x90>)
 80010de:	4a23      	ldr	r2, [pc, #140]	@ (800116c <MX_USART6_UART_Init+0x94>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80010e2:	4b21      	ldr	r3, [pc, #132]	@ (8001168 <MX_USART6_UART_Init+0x90>)
 80010e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <MX_USART6_UART_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <MX_USART6_UART_Init+0x90>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001168 <MX_USART6_UART_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <MX_USART6_UART_Init+0x90>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <MX_USART6_UART_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <MX_USART6_UART_Init+0x90>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110e:	4b16      	ldr	r3, [pc, #88]	@ (8001168 <MX_USART6_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001114:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <MX_USART6_UART_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111a:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <MX_USART6_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001120:	4811      	ldr	r0, [pc, #68]	@ (8001168 <MX_USART6_UART_Init+0x90>)
 8001122:	f00b fe31 	bl	800cd88 <HAL_UART_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800112c:	f000 fd50 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001130:	2100      	movs	r1, #0
 8001132:	480d      	ldr	r0, [pc, #52]	@ (8001168 <MX_USART6_UART_Init+0x90>)
 8001134:	f00c fb06 	bl	800d744 <HAL_UARTEx_SetTxFifoThreshold>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800113e:	f000 fd47 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001142:	2100      	movs	r1, #0
 8001144:	4808      	ldr	r0, [pc, #32]	@ (8001168 <MX_USART6_UART_Init+0x90>)
 8001146:	f00c fb3b 	bl	800d7c0 <HAL_UARTEx_SetRxFifoThreshold>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001150:	f000 fd3e 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	@ (8001168 <MX_USART6_UART_Init+0x90>)
 8001156:	f00c fabc 	bl	800d6d2 <HAL_UARTEx_DisableFifoMode>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001160:	f000 fd36 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20001208 	.word	0x20001208
 800116c:	40006400 	.word	0x40006400

08001170 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08e      	sub	sp, #56	@ 0x38
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2234      	movs	r2, #52	@ 0x34
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f00c fbca 	bl	800d916 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001182:	4b3b      	ldr	r3, [pc, #236]	@ (8001270 <MX_LTDC_Init+0x100>)
 8001184:	4a3b      	ldr	r2, [pc, #236]	@ (8001274 <MX_LTDC_Init+0x104>)
 8001186:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8001188:	4b39      	ldr	r3, [pc, #228]	@ (8001270 <MX_LTDC_Init+0x100>)
 800118a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800118e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8001190:	4b37      	ldr	r3, [pc, #220]	@ (8001270 <MX_LTDC_Init+0x100>)
 8001192:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001196:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001198:	4b35      	ldr	r3, [pc, #212]	@ (8001270 <MX_LTDC_Init+0x100>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800119e:	4b34      	ldr	r3, [pc, #208]	@ (8001270 <MX_LTDC_Init+0x100>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 80011a4:	4b32      	ldr	r3, [pc, #200]	@ (8001270 <MX_LTDC_Init+0x100>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 80011aa:	4b31      	ldr	r3, [pc, #196]	@ (8001270 <MX_LTDC_Init+0x100>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 0;
 80011b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001270 <MX_LTDC_Init+0x100>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 0;
 80011b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001270 <MX_LTDC_Init+0x100>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 416;
 80011bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001270 <MX_LTDC_Init+0x100>)
 80011be:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80011c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 416;
 80011c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001270 <MX_LTDC_Init+0x100>)
 80011c6:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80011ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 416;
 80011cc:	4b28      	ldr	r3, [pc, #160]	@ (8001270 <MX_LTDC_Init+0x100>)
 80011ce:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80011d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 416;
 80011d4:	4b26      	ldr	r3, [pc, #152]	@ (8001270 <MX_LTDC_Init+0x100>)
 80011d6:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80011da:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80011dc:	4b24      	ldr	r3, [pc, #144]	@ (8001270 <MX_LTDC_Init+0x100>)
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80011e4:	4b22      	ldr	r3, [pc, #136]	@ (8001270 <MX_LTDC_Init+0x100>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80011ec:	4b20      	ldr	r3, [pc, #128]	@ (8001270 <MX_LTDC_Init+0x100>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011f4:	481e      	ldr	r0, [pc, #120]	@ (8001270 <MX_LTDC_Init+0x100>)
 80011f6:	f004 fd1b 	bl	8005c30 <HAL_LTDC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8001200:	f000 fce6 	bl	8001bd0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 416;
 8001208:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 800120c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 416;
 8001212:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8001216:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800121c:	23ff      	movs	r3, #255	@ 0xff
 800121e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001224:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001228:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800122a:	2305      	movs	r3, #5
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = GFXMMU_VIRTUAL_BUFFER0_BASE;
 800122e:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8001232:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 416;
 8001234:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8001238:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 416;
 800123a:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 800123e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	@ (8001270 <MX_LTDC_Init+0x100>)
 800125a:	f004 fe7b 	bl	8005f54 <HAL_LTDC_ConfigLayer>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8001264:	f000 fcb4 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	3738      	adds	r7, #56	@ 0x38
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	2000129c 	.word	0x2000129c
 8001274:	40016800 	.word	0x40016800

08001278 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08c      	sub	sp, #48	@ 0x30
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800127e:	f107 0318 	add.w	r3, r7, #24
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]
 800128e:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 800129e:	463b      	mov	r3, r7
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80012a6:	4b3d      	ldr	r3, [pc, #244]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 80012a8:	4a3d      	ldr	r2, [pc, #244]	@ (80013a0 <MX_OCTOSPI1_Init+0x128>)
 80012aa:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80012ac:	4b3b      	ldr	r3, [pc, #236]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80012b2:	4b3a      	ldr	r3, [pc, #232]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 80012b8:	4b38      	ldr	r3, [pc, #224]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 80012ba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80012be:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 80012c0:	4b36      	ldr	r3, [pc, #216]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 80012c2:	221a      	movs	r2, #26
 80012c4:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80012c6:	4b35      	ldr	r3, [pc, #212]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80012cc:	4b33      	ldr	r3, [pc, #204]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80012d2:	4b32      	ldr	r3, [pc, #200]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_64_BYTES;
 80012d8:	4b30      	ldr	r3, [pc, #192]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 80012da:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012de:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 16;
 80012e0:	4b2e      	ldr	r3, [pc, #184]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 80012e2:	2210      	movs	r2, #16
 80012e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80012e6:	4b2d      	ldr	r3, [pc, #180]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80012ec:	4b2b      	ldr	r3, [pc, #172]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80012f2:	4b2a      	ldr	r3, [pc, #168]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80012f8:	4b28      	ldr	r3, [pc, #160]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 80012fa:	2208      	movs	r2, #8
 80012fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 16;
 80012fe:	4b27      	ldr	r3, [pc, #156]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 8001300:	2210      	movs	r2, #16
 8001302:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8001304:	4b25      	ldr	r3, [pc, #148]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 8001306:	2200      	movs	r2, #0
 8001308:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800130a:	4824      	ldr	r0, [pc, #144]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 800130c:	f005 f9a4 	bl	8006658 <HAL_OSPI_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_OCTOSPI1_Init+0xa2>
  {
    Error_Handler();
 8001316:	f000 fc5b 	bl	8001bd0 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800131a:	2301      	movs	r3, #1
 800131c:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 800131e:	2301      	movs	r3, #1
 8001320:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 1;
 8001322:	2301      	movs	r3, #1
 8001324:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001326:	4b1f      	ldr	r3, [pc, #124]	@ (80013a4 <MX_OCTOSPI1_Init+0x12c>)
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 800132a:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <MX_OCTOSPI1_Init+0x130>)
 800132c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 800132e:	2301      	movs	r3, #1
 8001330:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001332:	f107 0318 	add.w	r3, r7, #24
 8001336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800133a:	4619      	mov	r1, r3
 800133c:	4817      	ldr	r0, [pc, #92]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 800133e:	f005 fb0b 	bl	8006958 <HAL_OSPIM_Config>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_OCTOSPI1_Init+0xd4>
  {
    Error_Handler();
 8001348:	f000 fc42 	bl	8001bd0 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001354:	2302      	movs	r3, #2
 8001356:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi1, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 8001368:	f005 fa32 	bl	80067d0 <HAL_OSPI_HyperbusCfg>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_OCTOSPI1_Init+0xfe>
  {
    Error_Handler();
 8001372:	f000 fc2d 	bl	8001bd0 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	@ (800139c <MX_OCTOSPI1_Init+0x124>)
 8001384:	f006 f8d4 	bl	8007530 <HAL_OSPI_DLYB_SetConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_OCTOSPI1_Init+0x11a>
  {
    Error_Handler();
 800138e:	f000 fc1f 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3730      	adds	r7, #48	@ 0x30
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20001344 	.word	0x20001344
 80013a0:	420d1400 	.word	0x420d1400
 80013a4:	00010002 	.word	0x00010002
 80013a8:	01000002 	.word	0x01000002

080013ac <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08c      	sub	sp, #48	@ 0x30
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80013b2:	f107 0318 	add.w	r3, r7, #24
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]
 80013c2:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80013d2:	463b      	mov	r3, r7
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 80013da:	4b3c      	ldr	r3, [pc, #240]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 80013dc:	4a3c      	ldr	r2, [pc, #240]	@ (80014d0 <MX_OCTOSPI2_Init+0x124>)
 80013de:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 80013e0:	4b3a      	ldr	r3, [pc, #232]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80013e6:	4b39      	ldr	r3, [pc, #228]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 80013ec:	4b37      	ldr	r3, [pc, #220]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 80013ee:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013f2:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 80013f4:	4b35      	ldr	r3, [pc, #212]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 80013f6:	2220      	movs	r2, #32
 80013f8:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 80013fa:	4b34      	ldr	r3, [pc, #208]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001400:	4b32      	ldr	r3, [pc, #200]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001406:	4b31      	ldr	r3, [pc, #196]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800140c:	4b2f      	ldr	r3, [pc, #188]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 800140e:	2200      	movs	r2, #0
 8001410:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 8001412:	4b2e      	ldr	r3, [pc, #184]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 8001414:	2201      	movs	r2, #1
 8001416:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001418:	4b2c      	ldr	r3, [pc, #176]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 800141a:	2200      	movs	r2, #0
 800141c:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800141e:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 8001420:	2200      	movs	r2, #0
 8001422:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8001424:	4b29      	ldr	r3, [pc, #164]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 8001426:	2200      	movs	r2, #0
 8001428:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800142a:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 800142c:	2208      	movs	r2, #8
 800142e:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 8001430:	4b26      	ldr	r3, [pc, #152]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 8001432:	2200      	movs	r2, #0
 8001434:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 0;
 8001436:	4b25      	ldr	r3, [pc, #148]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 8001438:	2200      	movs	r2, #0
 800143a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 800143c:	4823      	ldr	r0, [pc, #140]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 800143e:	f005 f90b 	bl	8006658 <HAL_OSPI_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_OCTOSPI2_Init+0xa0>
  {
    Error_Handler();
 8001448:	f000 fbc2 	bl	8001bd0 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800144c:	2301      	movs	r3, #1
 800144e:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 8001450:	2301      	movs	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 2;
 8001454:	2302      	movs	r3, #2
 8001456:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001458:	4b1e      	ldr	r3, [pc, #120]	@ (80014d4 <MX_OCTOSPI2_Init+0x128>)
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 800145c:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <MX_OCTOSPI2_Init+0x12c>)
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 8001460:	2301      	movs	r3, #1
 8001462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800146c:	4619      	mov	r1, r3
 800146e:	4817      	ldr	r0, [pc, #92]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 8001470:	f005 fa72 	bl	8006958 <HAL_OSPIM_Config>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_OCTOSPI2_Init+0xd2>
  {
    Error_Handler();
 800147a:	f000 fba9 	bl	8001bd0 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001486:	2302      	movs	r3, #2
 8001488:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001496:	4619      	mov	r1, r3
 8001498:	480c      	ldr	r0, [pc, #48]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 800149a:	f005 f999 	bl	80067d0 <HAL_OSPI_HyperbusCfg>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_OCTOSPI2_Init+0xfc>
  {
    Error_Handler();
 80014a4:	f000 fb94 	bl	8001bd0 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_OCTOSPI2_Init+0x120>)
 80014b6:	f006 f83b 	bl	8007530 <HAL_OSPI_DLYB_SetConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_OCTOSPI2_Init+0x118>
  {
    Error_Handler();
 80014c0:	f000 fb86 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3730      	adds	r7, #48	@ 0x30
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200013a0 	.word	0x200013a0
 80014d0:	420d2400 	.word	0x420d2400
 80014d4:	00010002 	.word	0x00010002
 80014d8:	01000002 	.word	0x01000002

080014dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08e      	sub	sp, #56	@ 0x38
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]
 80014f2:	615a      	str	r2, [r3, #20]
 80014f4:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800150a:	4b33      	ldr	r3, [pc, #204]	@ (80015d8 <MX_RTC_Init+0xfc>)
 800150c:	4a33      	ldr	r2, [pc, #204]	@ (80015dc <MX_RTC_Init+0x100>)
 800150e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001510:	4b31      	ldr	r3, [pc, #196]	@ (80015d8 <MX_RTC_Init+0xfc>)
 8001512:	2200      	movs	r2, #0
 8001514:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001516:	4b30      	ldr	r3, [pc, #192]	@ (80015d8 <MX_RTC_Init+0xfc>)
 8001518:	227f      	movs	r2, #127	@ 0x7f
 800151a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800151c:	4b2e      	ldr	r3, [pc, #184]	@ (80015d8 <MX_RTC_Init+0xfc>)
 800151e:	22ff      	movs	r2, #255	@ 0xff
 8001520:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001522:	4b2d      	ldr	r3, [pc, #180]	@ (80015d8 <MX_RTC_Init+0xfc>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001528:	4b2b      	ldr	r3, [pc, #172]	@ (80015d8 <MX_RTC_Init+0xfc>)
 800152a:	2200      	movs	r2, #0
 800152c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800152e:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <MX_RTC_Init+0xfc>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001534:	4b28      	ldr	r3, [pc, #160]	@ (80015d8 <MX_RTC_Init+0xfc>)
 8001536:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800153a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800153c:	4b26      	ldr	r3, [pc, #152]	@ (80015d8 <MX_RTC_Init+0xfc>)
 800153e:	2200      	movs	r2, #0
 8001540:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001542:	4b25      	ldr	r3, [pc, #148]	@ (80015d8 <MX_RTC_Init+0xfc>)
 8001544:	2200      	movs	r2, #0
 8001546:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001548:	4823      	ldr	r0, [pc, #140]	@ (80015d8 <MX_RTC_Init+0xfc>)
 800154a:	f00a fc53 	bl	800bdf4 <HAL_RTC_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001554:	f000 fb3c 	bl	8001bd0 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001564:	2300      	movs	r3, #0
 8001566:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	481a      	ldr	r0, [pc, #104]	@ (80015d8 <MX_RTC_Init+0xfc>)
 8001570:	f00a feb0 	bl	800c2d4 <HAL_RTCEx_PrivilegeModeSet>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800157a:	f000 fb29 	bl	8001bd0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800157e:	2300      	movs	r3, #0
 8001580:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8001582:	2300      	movs	r3, #0
 8001584:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8001586:	2300      	movs	r3, #0
 8001588:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	2201      	movs	r2, #1
 8001598:	4619      	mov	r1, r3
 800159a:	480f      	ldr	r0, [pc, #60]	@ (80015d8 <MX_RTC_Init+0xfc>)
 800159c:	f00a fcac 	bl	800bef8 <HAL_RTC_SetTime>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80015a6:	f000 fb13 	bl	8001bd0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80015aa:	2301      	movs	r3, #1
 80015ac:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80015ae:	2301      	movs	r3, #1
 80015b0:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 80015b2:	2301      	movs	r3, #1
 80015b4:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2201      	movs	r2, #1
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <MX_RTC_Init+0xfc>)
 80015c2:	f00a fd35 	bl	800c030 <HAL_RTC_SetDate>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 80015cc:	f000 fb00 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	3738      	adds	r7, #56	@ 0x38
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	200013fc 	.word	0x200013fc
 80015dc:	46007800 	.word	0x46007800

080015e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015f0:	4b30      	ldr	r3, [pc, #192]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 80015f2:	4a31      	ldr	r2, [pc, #196]	@ (80016b8 <MX_SPI1_Init+0xd8>)
 80015f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015f6:	4b2f      	ldr	r3, [pc, #188]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 80015f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015fe:	4b2d      	ldr	r3, [pc, #180]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001604:	4b2b      	ldr	r3, [pc, #172]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 8001606:	2203      	movs	r2, #3
 8001608:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800160a:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001610:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001616:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 8001618:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800161c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800161e:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 8001620:	2200      	movs	r2, #0
 8001622:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001624:	4b23      	ldr	r3, [pc, #140]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 8001626:	2200      	movs	r2, #0
 8001628:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800162a:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 800162c:	2200      	movs	r2, #0
 800162e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001630:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 8001632:	2200      	movs	r2, #0
 8001634:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001636:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 8001638:	2207      	movs	r2, #7
 800163a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 800163e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001642:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 8001646:	2200      	movs	r2, #0
 8001648:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800164a:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 800164c:	2200      	movs	r2, #0
 800164e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001650:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 8001652:	2200      	movs	r2, #0
 8001654:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001656:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 8001658:	2200      	movs	r2, #0
 800165a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800165c:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 800165e:	2200      	movs	r2, #0
 8001660:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001662:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 8001664:	2200      	movs	r2, #0
 8001666:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 800166a:	2200      	movs	r2, #0
 800166c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800166e:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 8001670:	2200      	movs	r2, #0
 8001672:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001674:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 8001676:	2200      	movs	r2, #0
 8001678:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800167a:	480e      	ldr	r0, [pc, #56]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 800167c:	f00a fe58 	bl	800c330 <HAL_SPI_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8001686:	f000 faa3 	bl	8001bd0 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800168e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001692:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <MX_SPI1_Init+0xd4>)
 800169e:	f00a ff78 	bl	800c592 <HAL_SPIEx_SetConfigAutonomousMode>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 80016a8:	f000 fa92 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	2000142c 	.word	0x2000142c
 80016b8:	40013000 	.word	0x40013000

080016bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b090      	sub	sp, #64	@ 0x40
 80016c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	4bbf      	ldr	r3, [pc, #764]	@ (80019d0 <MX_GPIO_Init+0x314>)
 80016d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016d8:	4abd      	ldr	r2, [pc, #756]	@ (80019d0 <MX_GPIO_Init+0x314>)
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016e2:	4bbb      	ldr	r3, [pc, #748]	@ (80019d0 <MX_GPIO_Init+0x314>)
 80016e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f0:	4bb7      	ldr	r3, [pc, #732]	@ (80019d0 <MX_GPIO_Init+0x314>)
 80016f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016f6:	4ab6      	ldr	r2, [pc, #728]	@ (80019d0 <MX_GPIO_Init+0x314>)
 80016f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001700:	4bb3      	ldr	r3, [pc, #716]	@ (80019d0 <MX_GPIO_Init+0x314>)
 8001702:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24
 800170c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800170e:	4bb0      	ldr	r3, [pc, #704]	@ (80019d0 <MX_GPIO_Init+0x314>)
 8001710:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001714:	4aae      	ldr	r2, [pc, #696]	@ (80019d0 <MX_GPIO_Init+0x314>)
 8001716:	f043 0308 	orr.w	r3, r3, #8
 800171a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800171e:	4bac      	ldr	r3, [pc, #688]	@ (80019d0 <MX_GPIO_Init+0x314>)
 8001720:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	623b      	str	r3, [r7, #32]
 800172a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172c:	4ba8      	ldr	r3, [pc, #672]	@ (80019d0 <MX_GPIO_Init+0x314>)
 800172e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001732:	4aa7      	ldr	r2, [pc, #668]	@ (80019d0 <MX_GPIO_Init+0x314>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800173c:	4ba4      	ldr	r3, [pc, #656]	@ (80019d0 <MX_GPIO_Init+0x314>)
 800173e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	4ba1      	ldr	r3, [pc, #644]	@ (80019d0 <MX_GPIO_Init+0x314>)
 800174c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001750:	4a9f      	ldr	r2, [pc, #636]	@ (80019d0 <MX_GPIO_Init+0x314>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800175a:	4b9d      	ldr	r3, [pc, #628]	@ (80019d0 <MX_GPIO_Init+0x314>)
 800175c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	61bb      	str	r3, [r7, #24]
 8001766:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001768:	4b99      	ldr	r3, [pc, #612]	@ (80019d0 <MX_GPIO_Init+0x314>)
 800176a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800176e:	4a98      	ldr	r2, [pc, #608]	@ (80019d0 <MX_GPIO_Init+0x314>)
 8001770:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001774:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001778:	4b95      	ldr	r3, [pc, #596]	@ (80019d0 <MX_GPIO_Init+0x314>)
 800177a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800177e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001786:	4b92      	ldr	r3, [pc, #584]	@ (80019d0 <MX_GPIO_Init+0x314>)
 8001788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800178c:	4a90      	ldr	r2, [pc, #576]	@ (80019d0 <MX_GPIO_Init+0x314>)
 800178e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001792:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001796:	4b8e      	ldr	r3, [pc, #568]	@ (80019d0 <MX_GPIO_Init+0x314>)
 8001798:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800179c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80017a4:	4b8a      	ldr	r3, [pc, #552]	@ (80019d0 <MX_GPIO_Init+0x314>)
 80017a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017aa:	4a89      	ldr	r2, [pc, #548]	@ (80019d0 <MX_GPIO_Init+0x314>)
 80017ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017b4:	4b86      	ldr	r3, [pc, #536]	@ (80019d0 <MX_GPIO_Init+0x314>)
 80017b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c2:	4b83      	ldr	r3, [pc, #524]	@ (80019d0 <MX_GPIO_Init+0x314>)
 80017c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017c8:	4a81      	ldr	r2, [pc, #516]	@ (80019d0 <MX_GPIO_Init+0x314>)
 80017ca:	f043 0320 	orr.w	r3, r3, #32
 80017ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017d2:	4b7f      	ldr	r3, [pc, #508]	@ (80019d0 <MX_GPIO_Init+0x314>)
 80017d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017d8:	f003 0320 	and.w	r3, r3, #32
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017e0:	4b7b      	ldr	r3, [pc, #492]	@ (80019d0 <MX_GPIO_Init+0x314>)
 80017e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017e6:	4a7a      	ldr	r2, [pc, #488]	@ (80019d0 <MX_GPIO_Init+0x314>)
 80017e8:	f043 0310 	orr.w	r3, r3, #16
 80017ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017f0:	4b77      	ldr	r3, [pc, #476]	@ (80019d0 <MX_GPIO_Init+0x314>)
 80017f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001804:	4873      	ldr	r0, [pc, #460]	@ (80019d4 <MX_GPIO_Init+0x318>)
 8001806:	f003 fae3 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SDMMC_EN_Pin|LRA_EN_Pin, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001810:	4871      	ldr	r0, [pc, #452]	@ (80019d8 <MX_GPIO_Init+0x31c>)
 8001812:	f003 fadd 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO3_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	f248 0120 	movw	r1, #32800	@ 0x8020
 800181c:	486f      	ldr	r0, [pc, #444]	@ (80019dc <MX_GPIO_Init+0x320>)
 800181e:	f003 fad7 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GNSS_RST_Pin|TP_RST_Pin|GNSS_WAKEUP_Pin, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	21c8      	movs	r1, #200	@ 0xc8
 8001826:	486e      	ldr	r0, [pc, #440]	@ (80019e0 <MX_GPIO_Init+0x324>)
 8001828:	f003 fad2 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_RST_GPIO_Port, FLASH_RST_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001832:	486c      	ldr	r0, [pc, #432]	@ (80019e4 <MX_GPIO_Init+0x328>)
 8001834:	f003 facc 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	2180      	movs	r1, #128	@ 0x80
 800183c:	486a      	ldr	r0, [pc, #424]	@ (80019e8 <MX_GPIO_Init+0x32c>)
 800183e:	f003 fac7 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001848:	4868      	ldr	r0, [pc, #416]	@ (80019ec <MX_GPIO_Init+0x330>)
 800184a:	f003 fac1 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPLAY_SWIRE_IN_Pin DISPLAY_SWIRE_OUT_Pin */
  GPIO_InitStruct.Pin = DISPLAY_SWIRE_IN_Pin|DISPLAY_SWIRE_OUT_Pin;
 800184e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001854:	2300      	movs	r3, #0
 8001856:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800185c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001860:	4619      	mov	r1, r3
 8001862:	485c      	ldr	r0, [pc, #368]	@ (80019d4 <MX_GPIO_Init+0x318>)
 8001864:	f003 f8dc 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : AVDDEN_Pin */
  GPIO_InitStruct.Pin = AVDDEN_Pin;
 8001868:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800186c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186e:	2301      	movs	r3, #1
 8001870:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001872:	2302      	movs	r3, #2
 8001874:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(AVDDEN_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800187e:	4619      	mov	r1, r3
 8001880:	4854      	ldr	r0, [pc, #336]	@ (80019d4 <MX_GPIO_Init+0x318>)
 8001882:	f003 f8cd 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_EN_Pin */
  GPIO_InitStruct.Pin = SDMMC_EN_Pin;
 8001886:	2310      	movs	r3, #16
 8001888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	2301      	movs	r3, #1
 800188c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(SDMMC_EN_GPIO_Port, &GPIO_InitStruct);
 8001896:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800189a:	4619      	mov	r1, r3
 800189c:	484e      	ldr	r0, [pc, #312]	@ (80019d8 <MX_GPIO_Init+0x31c>)
 800189e:	f003 f8bf 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_CD_Pin PWR_INT_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|PWR_INT_Pin;
 80018a2:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80018a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a8:	2300      	movs	r3, #0
 80018aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ac:	2301      	movs	r3, #1
 80018ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018b4:	4619      	mov	r1, r3
 80018b6:	4848      	ldr	r0, [pc, #288]	@ (80019d8 <MX_GPIO_Init+0x31c>)
 80018b8:	f003 f8b2 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC8 PC11 PC12
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
 80018bc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80018c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ca:	2302      	movs	r3, #2
 80018cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018ce:	230c      	movs	r3, #12
 80018d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018d6:	4619      	mov	r1, r3
 80018d8:	4845      	ldr	r0, [pc, #276]	@ (80019f0 <MX_GPIO_Init+0x334>)
 80018da:	f003 f8a1 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|PWR_ENCHG_Pin;
 80018de:	f248 0320 	movw	r3, #32800	@ 0x8020
 80018e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018e8:	2302      	movs	r3, #2
 80018ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018f4:	4619      	mov	r1, r3
 80018f6:	4839      	ldr	r0, [pc, #228]	@ (80019dc <MX_GPIO_Init+0x320>)
 80018f8:	f003 f892 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018fc:	2304      	movs	r3, #4
 80018fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001908:	2302      	movs	r3, #2
 800190a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800190c:	230c      	movs	r3, #12
 800190e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001910:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001914:	4619      	mov	r1, r3
 8001916:	4830      	ldr	r0, [pc, #192]	@ (80019d8 <MX_GPIO_Init+0x31c>)
 8001918:	f003 f882 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800191c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001932:	4619      	mov	r1, r3
 8001934:	482f      	ldr	r0, [pc, #188]	@ (80019f4 <MX_GPIO_Init+0x338>)
 8001936:	f003 f873 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT2_Pin */
  GPIO_InitStruct.Pin = BT_INT2_Pin;
 800193a:	2380      	movs	r3, #128	@ 0x80
 800193c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193e:	2300      	movs	r3, #0
 8001940:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001942:	2302      	movs	r3, #2
 8001944:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BT_INT2_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800194a:	4619      	mov	r1, r3
 800194c:	4828      	ldr	r0, [pc, #160]	@ (80019f0 <MX_GPIO_Init+0x334>)
 800194e:	f003 f867 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001952:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001960:	2302      	movs	r3, #2
 8001962:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001964:	2308      	movs	r3, #8
 8001966:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001968:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800196c:	4619      	mov	r1, r3
 800196e:	481b      	ldr	r0, [pc, #108]	@ (80019dc <MX_GPIO_Init+0x320>)
 8001970:	f003 f856 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_Pin GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO1_Pin;
 8001974:	2303      	movs	r3, #3
 8001976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001978:	2300      	movs	r3, #0
 800197a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800197c:	2302      	movs	r3, #2
 800197e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001980:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001984:	4619      	mov	r1, r3
 8001986:	4814      	ldr	r0, [pc, #80]	@ (80019d8 <MX_GPIO_Init+0x31c>)
 8001988:	f003 f84a 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT1_Pin */
  GPIO_InitStruct.Pin = BT_INT1_Pin;
 800198c:	2340      	movs	r3, #64	@ 0x40
 800198e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001990:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <MX_GPIO_Init+0x33c>)
 8001992:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001994:	2302      	movs	r3, #2
 8001996:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BT_INT1_GPIO_Port, &GPIO_InitStruct);
 8001998:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800199c:	4619      	mov	r1, r3
 800199e:	4814      	ldr	r0, [pc, #80]	@ (80019f0 <MX_GPIO_Init+0x334>)
 80019a0:	f003 f83e 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin|TP_RST_Pin;
 80019a4:	2388      	movs	r3, #136	@ 0x88
 80019a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ac:	2301      	movs	r3, #1
 80019ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80019b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019b8:	4619      	mov	r1, r3
 80019ba:	4809      	ldr	r0, [pc, #36]	@ (80019e0 <MX_GPIO_Init+0x324>)
 80019bc:	f003 f830 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_PPS_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin;
 80019c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019c6:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <MX_GPIO_Init+0x33c>)
 80019c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80019ce:	e015      	b.n	80019fc <MX_GPIO_Init+0x340>
 80019d0:	46020c00 	.word	0x46020c00
 80019d4:	42021800 	.word	0x42021800
 80019d8:	42020c00 	.word	0x42020c00
 80019dc:	42020400 	.word	0x42020400
 80019e0:	42022400 	.word	0x42022400
 80019e4:	42022000 	.word	0x42022000
 80019e8:	42021400 	.word	0x42021400
 80019ec:	42021000 	.word	0x42021000
 80019f0:	42020800 	.word	0x42020800
 80019f4:	42020000 	.word	0x42020000
 80019f8:	10110000 	.word	0x10110000
  HAL_GPIO_Init(GNSS_PPS_GPIO_Port, &GPIO_InitStruct);
 80019fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a00:	4619      	mov	r1, r3
 8001a02:	4860      	ldr	r0, [pc, #384]	@ (8001b84 <MX_GPIO_Init+0x4c8>)
 8001a04:	f003 f80c 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_WAKEUP_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin;
 8001a08:	2340      	movs	r3, #64	@ 0x40
 8001a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GNSS_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	485a      	ldr	r0, [pc, #360]	@ (8001b88 <MX_GPIO_Init+0x4cc>)
 8001a20:	f002 fffe 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 8001a24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a2a:	4b58      	ldr	r3, [pc, #352]	@ (8001b8c <MX_GPIO_Init+0x4d0>)
 8001a2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a36:	4619      	mov	r1, r3
 8001a38:	4853      	ldr	r0, [pc, #332]	@ (8001b88 <MX_GPIO_Init+0x4cc>)
 8001a3a:	f002 fff1 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RST_Pin */
  GPIO_InitStruct.Pin = FLASH_RST_Pin;
 8001a3e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(FLASH_RST_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a54:	4619      	mov	r1, r3
 8001a56:	484e      	ldr	r0, [pc, #312]	@ (8001b90 <MX_GPIO_Init+0x4d4>)
 8001a58:	f002 ffe2 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_INT_Pin */
  GPIO_InitStruct.Pin = FLASH_INT_Pin;
 8001a5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a62:	4b4a      	ldr	r3, [pc, #296]	@ (8001b8c <MX_GPIO_Init+0x4d0>)
 8001a64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a66:	2301      	movs	r3, #1
 8001a68:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(FLASH_INT_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4847      	ldr	r0, [pc, #284]	@ (8001b90 <MX_GPIO_Init+0x4d4>)
 8001a72:	f002 ffd5 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RSTO_Pin */
  GPIO_InitStruct.Pin = FLASH_RSTO_Pin;
 8001a76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(FLASH_RSTO_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4841      	ldr	r0, [pc, #260]	@ (8001b90 <MX_GPIO_Init+0x4d4>)
 8001a8c:	f002 ffc8 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin;
 8001a90:	2380      	movs	r3, #128	@ 0x80
 8001a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DISPLAY_RST_GPIO_Port, &GPIO_InitStruct);
 8001aa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	483b      	ldr	r0, [pc, #236]	@ (8001b94 <MX_GPIO_Init+0x4d8>)
 8001aa8:	f002 ffba 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALS_INT_Pin */
  GPIO_InitStruct.Pin = ALS_INT_Pin;
 8001aac:	2340      	movs	r3, #64	@ 0x40
 8001aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ALS_INT_GPIO_Port, &GPIO_InitStruct);
 8001ab8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001abc:	4619      	mov	r1, r3
 8001abe:	4835      	ldr	r0, [pc, #212]	@ (8001b94 <MX_GPIO_Init+0x4d8>)
 8001ac0:	f002 ffae 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 8001ac4:	2380      	movs	r3, #128	@ 0x80
 8001ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ac8:	4b30      	ldr	r3, [pc, #192]	@ (8001b8c <MX_GPIO_Init+0x4d0>)
 8001aca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4830      	ldr	r0, [pc, #192]	@ (8001b98 <MX_GPIO_Init+0x4dc>)
 8001ad8:	f002 ffa2 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8001adc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001af2:	4619      	mov	r1, r3
 8001af4:	4828      	ldr	r0, [pc, #160]	@ (8001b98 <MX_GPIO_Init+0x4dc>)
 8001af6:	f002 ff93 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : HR_INT_Pin */
  GPIO_InitStruct.Pin = HR_INT_Pin;
 8001afa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b00:	4b22      	ldr	r3, [pc, #136]	@ (8001b8c <MX_GPIO_Init+0x4d0>)
 8001b02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b04:	2301      	movs	r3, #1
 8001b06:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(HR_INT_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4823      	ldr	r0, [pc, #140]	@ (8001b9c <MX_GPIO_Init+0x4e0>)
 8001b10:	f002 ff86 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LRA_EN_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin;
 8001b14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LRA_EN_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	481b      	ldr	r0, [pc, #108]	@ (8001b9c <MX_GPIO_Init+0x4e0>)
 8001b2e:	f002 ff77 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_INT_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin;
 8001b32:	2310      	movs	r3, #16
 8001b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <MX_GPIO_Init+0x4d0>)
 8001b38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MAG_INT_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b42:	4619      	mov	r1, r3
 8001b44:	4816      	ldr	r0, [pc, #88]	@ (8001ba0 <MX_GPIO_Init+0x4e4>)
 8001b46:	f002 ff6b 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ba4 <MX_GPIO_Init+0x4e8>)
 8001b50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4812      	ldr	r0, [pc, #72]	@ (8001ba8 <MX_GPIO_Init+0x4ec>)
 8001b5e:	f002 ff5f 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin;
 8001b62:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(IMU_INT2_GPIO_Port, &GPIO_InitStruct);
 8001b70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b74:	4619      	mov	r1, r3
 8001b76:	4807      	ldr	r0, [pc, #28]	@ (8001b94 <MX_GPIO_Init+0x4d8>)
 8001b78:	f002 ff52 	bl	8004a20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b7c:	bf00      	nop
 8001b7e:	3740      	adds	r7, #64	@ 0x40
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	42020000 	.word	0x42020000
 8001b88:	42022400 	.word	0x42022400
 8001b8c:	10210000 	.word	0x10210000
 8001b90:	42022000 	.word	0x42022000
 8001b94:	42021400 	.word	0x42021400
 8001b98:	42021000 	.word	0x42021000
 8001b9c:	42020c00 	.word	0x42020c00
 8001ba0:	42020800 	.word	0x42020800
 8001ba4:	10110000 	.word	0x10110000
 8001ba8:	42020400 	.word	0x42020400

08001bac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a04      	ldr	r2, [pc, #16]	@ (8001bcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bbe:	f001 fa5f 	bl	8003080 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40001000 	.word	0x40001000

08001bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <Error_Handler+0x8>

08001bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <HAL_MspInit+0x30>)
 8001be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001be8:	4a08      	ldr	r2, [pc, #32]	@ (8001c0c <HAL_MspInit+0x30>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001bf2:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <HAL_MspInit+0x30>)
 8001bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	46020c00 	.word	0x46020c00

08001c10 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b0c2      	sub	sp, #264	@ 0x108
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c1e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	22e0      	movs	r2, #224	@ 0xe0
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f00b fe6c 	bl	800d916 <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8001c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8001cf8 <HAL_MDF_MspInit+0xe8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d14e      	bne.n	8001cee <HAL_MDF_MspInit+0xde>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001c50:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c62:	f107 0310 	add.w	r3, r7, #16
 8001c66:	4618      	mov	r0, r3
 8001c68:	f007 f8b6 	bl	8008dd8 <HAL_RCCEx_PeriphCLKConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_MDF_MspInit+0x66>
    {
      Error_Handler();
 8001c72:	f7ff ffad 	bl	8001bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 8001c76:	4b21      	ldr	r3, [pc, #132]	@ (8001cfc <HAL_MDF_MspInit+0xec>)
 8001c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cfc <HAL_MDF_MspInit+0xec>)
 8001c7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001c86:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <HAL_MDF_MspInit+0xec>)
 8001c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c94:	4b19      	ldr	r3, [pc, #100]	@ (8001cfc <HAL_MDF_MspInit+0xec>)
 8001c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c9a:	4a18      	ldr	r2, [pc, #96]	@ (8001cfc <HAL_MDF_MspInit+0xec>)
 8001c9c:	f043 0310 	orr.w	r3, r3, #16
 8001ca0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ca4:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <HAL_MDF_MspInit+0xec>)
 8001ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001caa:	f003 0210 	and.w	r2, r3, #16
 8001cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001cb2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001cbc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001cc0:	681b      	ldr	r3, [r3, #0]
    /**ADF1 GPIO Configuration
    PE9     ------> ADF1_CCK0
    PE10     ------> ADF1_SDI0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cc2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001cc6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ce2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4805      	ldr	r0, [pc, #20]	@ (8001d00 <HAL_MDF_MspInit+0xf0>)
 8001cea:	f002 fe99 	bl	8004a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 8001cee:	bf00      	nop
 8001cf0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	46024080 	.word	0x46024080
 8001cfc:	46020c00 	.word	0x46020c00
 8001d00:	42021000 	.word	0x42021000

08001d04 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0b      	ldr	r2, [pc, #44]	@ (8001d40 <HAL_CRC_MspInit+0x3c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d10e      	bne.n	8001d34 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <HAL_CRC_MspInit+0x40>)
 8001d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d1c:	4a09      	ldr	r2, [pc, #36]	@ (8001d44 <HAL_CRC_MspInit+0x40>)
 8001d1e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d22:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001d26:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <HAL_CRC_MspInit+0x40>)
 8001d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40023000 	.word	0x40023000
 8001d44:	46020c00 	.word	0x46020c00

08001d48 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a16      	ldr	r2, [pc, #88]	@ (8001db0 <HAL_DCACHE_MspInit+0x68>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10f      	bne.n	8001d7a <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8001d5a:	4b16      	ldr	r3, [pc, #88]	@ (8001db4 <HAL_DCACHE_MspInit+0x6c>)
 8001d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d60:	4a14      	ldr	r2, [pc, #80]	@ (8001db4 <HAL_DCACHE_MspInit+0x6c>)
 8001d62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d66:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001d6a:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <HAL_DCACHE_MspInit+0x6c>)
 8001d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d70:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 8001d78:	e013      	b.n	8001da2 <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001db8 <HAL_DCACHE_MspInit+0x70>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d10e      	bne.n	8001da2 <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001d84:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <HAL_DCACHE_MspInit+0x6c>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <HAL_DCACHE_MspInit+0x6c>)
 8001d8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001d94:	4b07      	ldr	r3, [pc, #28]	@ (8001db4 <HAL_DCACHE_MspInit+0x6c>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40031400 	.word	0x40031400
 8001db4:	46020c00 	.word	0x46020c00
 8001db8:	40031800 	.word	0x40031800

08001dbc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8001e04 <HAL_DMA2D_MspInit+0x48>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d116      	bne.n	8001dfc <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001dce:	4b0e      	ldr	r3, [pc, #56]	@ (8001e08 <HAL_DMA2D_MspInit+0x4c>)
 8001dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001e08 <HAL_DMA2D_MspInit+0x4c>)
 8001dd6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dda:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001dde:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <HAL_DMA2D_MspInit+0x4c>)
 8001de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2100      	movs	r1, #0
 8001df0:	2076      	movs	r0, #118	@ 0x76
 8001df2:	f001 fa41 	bl	8003278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001df6:	2076      	movs	r0, #118	@ 0x76
 8001df8:	f001 fa58 	bl	80032ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	4002b000 	.word	0x4002b000
 8001e08:	46020c00 	.word	0x46020c00

08001e0c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b0c2      	sub	sp, #264	@ 0x108
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e1a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e2c:	f107 0310 	add.w	r3, r7, #16
 8001e30:	22e0      	movs	r2, #224	@ 0xe0
 8001e32:	2100      	movs	r1, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f00b fd6e 	bl	800d916 <memset>
  if(hdsi->Instance==DSI)
 8001e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a30      	ldr	r2, [pc, #192]	@ (8001f08 <HAL_DSI_MspInit+0xfc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d157      	bne.n	8001efc <HAL_DSI_MspInit+0xf0>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0304 	mov.w	r3, #4
 8001e54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 8001e58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e5c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	4618      	mov	r0, r3
 8001e66:	f006 ffb7 	bl	8008dd8 <HAL_RCCEx_PeriphCLKConfig>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_DSI_MspInit+0x68>
    {
      Error_Handler();
 8001e70:	f7ff feae 	bl	8001bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001e74:	4b25      	ldr	r3, [pc, #148]	@ (8001f0c <HAL_DSI_MspInit+0x100>)
 8001e76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001e7a:	4a24      	ldr	r2, [pc, #144]	@ (8001f0c <HAL_DSI_MspInit+0x100>)
 8001e7c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001e80:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001e84:	4b21      	ldr	r3, [pc, #132]	@ (8001f0c <HAL_DSI_MspInit+0x100>)
 8001e86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001e8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e92:	4b1e      	ldr	r3, [pc, #120]	@ (8001f0c <HAL_DSI_MspInit+0x100>)
 8001e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e98:	4a1c      	ldr	r2, [pc, #112]	@ (8001f0c <HAL_DSI_MspInit+0x100>)
 8001e9a:	f043 0320 	orr.w	r3, r3, #32
 8001e9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f0c <HAL_DSI_MspInit+0x100>)
 8001ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ea8:	f003 0220 	and.w	r2, r3, #32
 8001eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001eb0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001eba:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ebe:	681b      	ldr	r3, [r3, #0]
    DSI_CKN     ------> DSIHOST_CKN
    DSI_D1N     ------> DSIHOST_D1N
    DSI_D1P     ------> DSIHOST_D1P
    PF10     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ec0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ec4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8001eda:	230b      	movs	r3, #11
 8001edc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ee0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	480a      	ldr	r0, [pc, #40]	@ (8001f10 <HAL_DSI_MspInit+0x104>)
 8001ee8:	f002 fd9a 	bl	8004a20 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2089      	movs	r0, #137	@ 0x89
 8001ef2:	f001 f9c1 	bl	8003278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001ef6:	2089      	movs	r0, #137	@ 0x89
 8001ef8:	f001 f9d8 	bl	80032ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001efc:	bf00      	nop
 8001efe:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40016c00 	.word	0x40016c00
 8001f0c:	46020c00 	.word	0x46020c00
 8001f10:	42021400 	.word	0x42021400

08001f14 <HAL_GFXMMU_MspInit>:
* This function configures the hardware resources used in this example
* @param hgfxmmu: GFXMMU handle pointer
* @retval None
*/
void HAL_GFXMMU_MspInit(GFXMMU_HandleTypeDef* hgfxmmu)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if(hgfxmmu->Instance==GFXMMU)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0e      	ldr	r2, [pc, #56]	@ (8001f5c <HAL_GFXMMU_MspInit+0x48>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d116      	bne.n	8001f54 <HAL_GFXMMU_MspInit+0x40>
  {
  /* USER CODE BEGIN GFXMMU_MspInit 0 */

  /* USER CODE END GFXMMU_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GFXMMU_CLK_ENABLE();
 8001f26:	4b0e      	ldr	r3, [pc, #56]	@ (8001f60 <HAL_GFXMMU_MspInit+0x4c>)
 8001f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f60 <HAL_GFXMMU_MspInit+0x4c>)
 8001f2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f32:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001f36:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <HAL_GFXMMU_MspInit+0x4c>)
 8001f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
    /* GFXMMU interrupt Init */
    HAL_NVIC_SetPriority(GFXMMU_IRQn, 0, 0);
 8001f44:	2200      	movs	r2, #0
 8001f46:	2100      	movs	r1, #0
 8001f48:	2086      	movs	r0, #134	@ 0x86
 8001f4a:	f001 f995 	bl	8003278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GFXMMU_IRQn);
 8001f4e:	2086      	movs	r0, #134	@ 0x86
 8001f50:	f001 f9ac 	bl	80032ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GFXMMU_MspInit 1 */

  /* USER CODE END GFXMMU_MspInit 1 */
  }

}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	4002c000 	.word	0x4002c000
 8001f60:	46020c00 	.word	0x46020c00

08001f64 <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1a      	ldr	r2, [pc, #104]	@ (8001fdc <HAL_GPU2D_MspInit+0x78>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d12d      	bne.n	8001fd2 <HAL_GPU2D_MspInit+0x6e>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 8001f76:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe0 <HAL_GPU2D_MspInit+0x7c>)
 8001f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f7c:	4a18      	ldr	r2, [pc, #96]	@ (8001fe0 <HAL_GPU2D_MspInit+0x7c>)
 8001f7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f82:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001f86:	4b16      	ldr	r3, [pc, #88]	@ (8001fe0 <HAL_GPU2D_MspInit+0x7c>)
 8001f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001f94:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <HAL_GPU2D_MspInit+0x7c>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f9a:	4a11      	ldr	r2, [pc, #68]	@ (8001fe0 <HAL_GPU2D_MspInit+0x7c>)
 8001f9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <HAL_GPU2D_MspInit+0x7c>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001faa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2084      	movs	r0, #132	@ 0x84
 8001fb8:	f001 f95e 	bl	8003278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 8001fbc:	2084      	movs	r0, #132	@ 0x84
 8001fbe:	f001 f975 	bl	80032ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 0, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2085      	movs	r0, #133	@ 0x85
 8001fc8:	f001 f956 	bl	8003278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 8001fcc:	2085      	movs	r0, #133	@ 0x85
 8001fce:	f001 f96d 	bl	80032ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */

  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 8001fd2:	bf00      	nop
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	4002f000 	.word	0x4002f000
 8001fe0:	46020c00 	.word	0x46020c00

08001fe4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b0cc      	sub	sp, #304	@ 0x130
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001fee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ff2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002004:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002008:	22e0      	movs	r2, #224	@ 0xe0
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f00b fc82 	bl	800d916 <memset>
  if(hi2c->Instance==I2C1)
 8002012:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002016:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4aba      	ldr	r2, [pc, #744]	@ (8002308 <HAL_I2C_MspInit+0x324>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d14f      	bne.n	80020c4 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002024:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002036:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800203a:	4618      	mov	r0, r3
 800203c:	f006 fecc 	bl	8008dd8 <HAL_RCCEx_PeriphCLKConfig>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8002046:	f7ff fdc3 	bl	8001bd0 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800204a:	4bb0      	ldr	r3, [pc, #704]	@ (800230c <HAL_I2C_MspInit+0x328>)
 800204c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002050:	4aae      	ldr	r2, [pc, #696]	@ (800230c <HAL_I2C_MspInit+0x328>)
 8002052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002056:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800205a:	4bac      	ldr	r3, [pc, #688]	@ (800230c <HAL_I2C_MspInit+0x328>)
 800205c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002064:	637b      	str	r3, [r7, #52]	@ 0x34
 8002066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002068:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800206c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002070:	2312      	movs	r3, #18
 8002072:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002082:	2304      	movs	r3, #4
 8002084:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002088:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800208c:	4619      	mov	r1, r3
 800208e:	48a0      	ldr	r0, [pc, #640]	@ (8002310 <HAL_I2C_MspInit+0x32c>)
 8002090:	f002 fcc6 	bl	8004a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002094:	4b9d      	ldr	r3, [pc, #628]	@ (800230c <HAL_I2C_MspInit+0x328>)
 8002096:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800209a:	4a9c      	ldr	r2, [pc, #624]	@ (800230c <HAL_I2C_MspInit+0x328>)
 800209c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020a0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80020a4:	4b99      	ldr	r3, [pc, #612]	@ (800230c <HAL_I2C_MspInit+0x328>)
 80020a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020aa:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80020ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80020b2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80020bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80020c0:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C6_MspInit 1 */

  /* USER CODE END I2C6_MspInit 1 */
  }

}
 80020c2:	e1c0      	b.n	8002446 <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C2)
 80020c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80020c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a90      	ldr	r2, [pc, #576]	@ (8002314 <HAL_I2C_MspInit+0x330>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d157      	bne.n	8002186 <HAL_I2C_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80020d6:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020ec:	4618      	mov	r0, r3
 80020ee:	f006 fe73 	bl	8008dd8 <HAL_RCCEx_PeriphCLKConfig>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_I2C_MspInit+0x118>
      Error_Handler();
 80020f8:	f7ff fd6a 	bl	8001bd0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fc:	4b83      	ldr	r3, [pc, #524]	@ (800230c <HAL_I2C_MspInit+0x328>)
 80020fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002102:	4a82      	ldr	r2, [pc, #520]	@ (800230c <HAL_I2C_MspInit+0x328>)
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800210c:	4b7f      	ldr	r3, [pc, #508]	@ (800230c <HAL_I2C_MspInit+0x328>)
 800210e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002112:	f003 0202 	and.w	r2, r3, #2
 8002116:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800211a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002124:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002128:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800212a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800212e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002132:	2312      	movs	r3, #18
 8002134:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213e:	2300      	movs	r3, #0
 8002140:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002144:	2304      	movs	r3, #4
 8002146:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800214e:	4619      	mov	r1, r3
 8002150:	4871      	ldr	r0, [pc, #452]	@ (8002318 <HAL_I2C_MspInit+0x334>)
 8002152:	f002 fc65 	bl	8004a20 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002156:	4b6d      	ldr	r3, [pc, #436]	@ (800230c <HAL_I2C_MspInit+0x328>)
 8002158:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800215c:	4a6b      	ldr	r2, [pc, #428]	@ (800230c <HAL_I2C_MspInit+0x328>)
 800215e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002162:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002166:	4b69      	ldr	r3, [pc, #420]	@ (800230c <HAL_I2C_MspInit+0x328>)
 8002168:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800216c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002170:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002174:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800217e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	e15f      	b.n	8002446 <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C3)
 8002186:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800218a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a62      	ldr	r2, [pc, #392]	@ (800231c <HAL_I2C_MspInit+0x338>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d156      	bne.n	8002246 <HAL_I2C_MspInit+0x262>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002198:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021ae:	4618      	mov	r0, r3
 80021b0:	f006 fe12 	bl	8008dd8 <HAL_RCCEx_PeriphCLKConfig>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_I2C_MspInit+0x1da>
      Error_Handler();
 80021ba:	f7ff fd09 	bl	8001bd0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021be:	4b53      	ldr	r3, [pc, #332]	@ (800230c <HAL_I2C_MspInit+0x328>)
 80021c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021c4:	4a51      	ldr	r2, [pc, #324]	@ (800230c <HAL_I2C_MspInit+0x328>)
 80021c6:	f043 0304 	orr.w	r3, r3, #4
 80021ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021ce:	4b4f      	ldr	r3, [pc, #316]	@ (800230c <HAL_I2C_MspInit+0x328>)
 80021d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021d4:	f003 0204 	and.w	r2, r3, #4
 80021d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80021dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80021e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021ea:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80021ec:	2303      	movs	r3, #3
 80021ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021f2:	2312      	movs	r3, #18
 80021f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002204:	2304      	movs	r3, #4
 8002206:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220a:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800220e:	4619      	mov	r1, r3
 8002210:	4843      	ldr	r0, [pc, #268]	@ (8002320 <HAL_I2C_MspInit+0x33c>)
 8002212:	f002 fc05 	bl	8004a20 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002216:	4b3d      	ldr	r3, [pc, #244]	@ (800230c <HAL_I2C_MspInit+0x328>)
 8002218:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800221c:	4a3b      	ldr	r2, [pc, #236]	@ (800230c <HAL_I2C_MspInit+0x328>)
 800221e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002222:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002226:	4b39      	ldr	r3, [pc, #228]	@ (800230c <HAL_I2C_MspInit+0x328>)
 8002228:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800222c:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002230:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002234:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800223e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	e0ff      	b.n	8002446 <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C4)
 8002246:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800224a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a34      	ldr	r2, [pc, #208]	@ (8002324 <HAL_I2C_MspInit+0x340>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d169      	bne.n	800232c <HAL_I2C_MspInit+0x348>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002258:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002264:	2300      	movs	r3, #0
 8002266:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800226a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800226e:	4618      	mov	r0, r3
 8002270:	f006 fdb2 	bl	8008dd8 <HAL_RCCEx_PeriphCLKConfig>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_I2C_MspInit+0x29a>
      Error_Handler();
 800227a:	f7ff fca9 	bl	8001bd0 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800227e:	4b23      	ldr	r3, [pc, #140]	@ (800230c <HAL_I2C_MspInit+0x328>)
 8002280:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002284:	4a21      	ldr	r2, [pc, #132]	@ (800230c <HAL_I2C_MspInit+0x328>)
 8002286:	f043 0308 	orr.w	r3, r3, #8
 800228a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800228e:	4b1f      	ldr	r3, [pc, #124]	@ (800230c <HAL_I2C_MspInit+0x328>)
 8002290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002294:	f003 0208 	and.w	r2, r3, #8
 8002298:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800229c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80022a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022aa:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80022ac:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80022b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022b4:	2312      	movs	r3, #18
 80022b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80022c6:	2304      	movs	r3, #4
 80022c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022cc:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80022d0:	4619      	mov	r1, r3
 80022d2:	4815      	ldr	r0, [pc, #84]	@ (8002328 <HAL_I2C_MspInit+0x344>)
 80022d4:	f002 fba4 	bl	8004a20 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80022d8:	4b0c      	ldr	r3, [pc, #48]	@ (800230c <HAL_I2C_MspInit+0x328>)
 80022da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80022de:	4a0b      	ldr	r2, [pc, #44]	@ (800230c <HAL_I2C_MspInit+0x328>)
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80022e8:	4b08      	ldr	r3, [pc, #32]	@ (800230c <HAL_I2C_MspInit+0x328>)
 80022ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80022ee:	f003 0202 	and.w	r2, r3, #2
 80022f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80022f6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002300:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002304:	681b      	ldr	r3, [r3, #0]
}
 8002306:	e09e      	b.n	8002446 <HAL_I2C_MspInit+0x462>
 8002308:	40005400 	.word	0x40005400
 800230c:	46020c00 	.word	0x46020c00
 8002310:	42021800 	.word	0x42021800
 8002314:	40005800 	.word	0x40005800
 8002318:	42020400 	.word	0x42020400
 800231c:	46002800 	.word	0x46002800
 8002320:	42020800 	.word	0x42020800
 8002324:	40008400 	.word	0x40008400
 8002328:	42020c00 	.word	0x42020c00
  else if(hi2c->Instance==I2C6)
 800232c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002330:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a45      	ldr	r2, [pc, #276]	@ (8002450 <HAL_I2C_MspInit+0x46c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	f040 8083 	bne.w	8002446 <HAL_I2C_MspInit+0x462>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C6;
 8002340:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c6ClockSelection = RCC_I2C6CLKSOURCE_PCLK1;
 800234c:	2300      	movs	r3, #0
 800234e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002352:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002356:	4618      	mov	r0, r3
 8002358:	f006 fd3e 	bl	8008dd8 <HAL_RCCEx_PeriphCLKConfig>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_I2C_MspInit+0x382>
      Error_Handler();
 8002362:	f7ff fc35 	bl	8001bd0 <Error_Handler>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002366:	4b3b      	ldr	r3, [pc, #236]	@ (8002454 <HAL_I2C_MspInit+0x470>)
 8002368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800236c:	4a39      	ldr	r2, [pc, #228]	@ (8002454 <HAL_I2C_MspInit+0x470>)
 800236e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002372:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002376:	4b37      	ldr	r3, [pc, #220]	@ (8002454 <HAL_I2C_MspInit+0x470>)
 8002378:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800237c:	f403 7200 	and.w	r2, r3, #512	@ 0x200
 8002380:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002384:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800238e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002392:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002394:	4b2f      	ldr	r3, [pc, #188]	@ (8002454 <HAL_I2C_MspInit+0x470>)
 8002396:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800239a:	4a2e      	ldr	r2, [pc, #184]	@ (8002454 <HAL_I2C_MspInit+0x470>)
 800239c:	f043 0320 	orr.w	r3, r3, #32
 80023a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002454 <HAL_I2C_MspInit+0x470>)
 80023a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023aa:	f003 0220 	and.w	r2, r3, #32
 80023ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80023b2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80023bc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023c0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ca:	2312      	movs	r3, #18
 80023cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 80023dc:	2302      	movs	r3, #2
 80023de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80023e2:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80023e6:	4619      	mov	r1, r3
 80023e8:	481b      	ldr	r0, [pc, #108]	@ (8002458 <HAL_I2C_MspInit+0x474>)
 80023ea:	f002 fb19 	bl	8004a20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023ee:	2301      	movs	r3, #1
 80023f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023f4:	2312      	movs	r3, #18
 80023f6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 8002406:	2302      	movs	r3, #2
 8002408:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800240c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002410:	4619      	mov	r1, r3
 8002412:	4812      	ldr	r0, [pc, #72]	@ (800245c <HAL_I2C_MspInit+0x478>)
 8002414:	f002 fb04 	bl	8004a20 <HAL_GPIO_Init>
    __HAL_RCC_I2C6_CLK_ENABLE();
 8002418:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <HAL_I2C_MspInit+0x470>)
 800241a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800241e:	4a0d      	ldr	r2, [pc, #52]	@ (8002454 <HAL_I2C_MspInit+0x470>)
 8002420:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002424:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8002428:	4b0a      	ldr	r3, [pc, #40]	@ (8002454 <HAL_I2C_MspInit+0x470>)
 800242a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800242e:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002432:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002436:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002440:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002444:	681b      	ldr	r3, [r3, #0]
}
 8002446:	bf00      	nop
 8002448:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40009c00 	.word	0x40009c00
 8002454:	46020c00 	.word	0x46020c00
 8002458:	42022400 	.word	0x42022400
 800245c:	42021400 	.word	0x42021400

08002460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b0c8      	sub	sp, #288	@ 0x120
 8002464:	af00      	add	r7, sp, #0
 8002466:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800246a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800246e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002480:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002484:	22e0      	movs	r2, #224	@ 0xe0
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f00b fa44 	bl	800d916 <memset>
  if(huart->Instance==LPUART1)
 800248e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002492:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4aa1      	ldr	r2, [pc, #644]	@ (8002720 <HAL_UART_MspInit+0x2c0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d17b      	bne.n	8002598 <HAL_UART_MspInit+0x138>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80024a0:	f04f 0220 	mov.w	r2, #32
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024b6:	4618      	mov	r0, r3
 80024b8:	f006 fc8e 	bl	8008dd8 <HAL_RCCEx_PeriphCLKConfig>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80024c2:	f7ff fb85 	bl	8001bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80024c6:	4b97      	ldr	r3, [pc, #604]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 80024c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80024cc:	4a95      	ldr	r2, [pc, #596]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 80024ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024d2:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80024d6:	4b93      	ldr	r3, [pc, #588]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 80024d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80024dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024e4:	4b8f      	ldr	r3, [pc, #572]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 80024e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024ea:	4a8e      	ldr	r2, [pc, #568]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 80024ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024f4:	4b8b      	ldr	r3, [pc, #556]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 80024f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024fa:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80024fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002502:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800250c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002510:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002512:	4b84      	ldr	r3, [pc, #528]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 8002514:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002518:	4a82      	ldr	r2, [pc, #520]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 800251a:	f043 0302 	orr.w	r3, r3, #2
 800251e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002522:	4b80      	ldr	r3, [pc, #512]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 8002524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002528:	f003 0202 	and.w	r2, r3, #2
 800252c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002530:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800253a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800253e:	681b      	ldr	r3, [r3, #0]
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    PG5     ------> LPUART1_CTS
    PB1     ------> LPUART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_5;
 8002540:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8002544:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800255a:	2308      	movs	r3, #8
 800255c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002560:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002564:	4619      	mov	r1, r3
 8002566:	4870      	ldr	r0, [pc, #448]	@ (8002728 <HAL_UART_MspInit+0x2c8>)
 8002568:	f002 fa5a 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800256c:	2302      	movs	r3, #2
 800256e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002584:	2308      	movs	r3, #8
 8002586:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800258e:	4619      	mov	r1, r3
 8002590:	4866      	ldr	r0, [pc, #408]	@ (800272c <HAL_UART_MspInit+0x2cc>)
 8002592:	f002 fa45 	bl	8004a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002596:	e0bd      	b.n	8002714 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART1)
 8002598:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800259c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a62      	ldr	r2, [pc, #392]	@ (8002730 <HAL_UART_MspInit+0x2d0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d155      	bne.n	8002656 <HAL_UART_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025aa:	f04f 0201 	mov.w	r2, #1
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80025b6:	2300      	movs	r3, #0
 80025b8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025be:	4618      	mov	r0, r3
 80025c0:	f006 fc0a 	bl	8008dd8 <HAL_RCCEx_PeriphCLKConfig>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_UART_MspInit+0x16e>
      Error_Handler();
 80025ca:	f7ff fb01 	bl	8001bd0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80025ce:	4b55      	ldr	r3, [pc, #340]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 80025d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025d4:	4a53      	ldr	r2, [pc, #332]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 80025d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025da:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80025de:	4b51      	ldr	r3, [pc, #324]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 80025e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025e4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80025e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80025ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80025f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80025fa:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fc:	4b49      	ldr	r3, [pc, #292]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 80025fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002602:	4a48      	ldr	r2, [pc, #288]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800260c:	4b45      	ldr	r3, [pc, #276]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 800260e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002612:	f003 0202 	and.w	r2, r3, #2
 8002616:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800261a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002624:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002628:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800262a:	23c0      	movs	r3, #192	@ 0xc0
 800262c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002630:	2302      	movs	r3, #2
 8002632:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2300      	movs	r3, #0
 800263e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002642:	2307      	movs	r3, #7
 8002644:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002648:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800264c:	4619      	mov	r1, r3
 800264e:	4837      	ldr	r0, [pc, #220]	@ (800272c <HAL_UART_MspInit+0x2cc>)
 8002650:	f002 f9e6 	bl	8004a20 <HAL_GPIO_Init>
}
 8002654:	e05e      	b.n	8002714 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART6)
 8002656:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800265a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a34      	ldr	r2, [pc, #208]	@ (8002734 <HAL_UART_MspInit+0x2d4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d155      	bne.n	8002714 <HAL_UART_MspInit+0x2b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002668:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8002674:	2300      	movs	r3, #0
 8002676:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800267a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800267e:	4618      	mov	r0, r3
 8002680:	f006 fbaa 	bl	8008dd8 <HAL_RCCEx_PeriphCLKConfig>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_UART_MspInit+0x22e>
      Error_Handler();
 800268a:	f7ff faa1 	bl	8001bd0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800268e:	4b25      	ldr	r3, [pc, #148]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 8002690:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002694:	4a23      	ldr	r2, [pc, #140]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 8002696:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800269a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800269e:	4b21      	ldr	r3, [pc, #132]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 80026a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026a4:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 80026a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026ac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026b6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80026ba:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026bc:	4b19      	ldr	r3, [pc, #100]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 80026be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026c2:	4a18      	ldr	r2, [pc, #96]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026cc:	4b15      	ldr	r3, [pc, #84]	@ (8002724 <HAL_UART_MspInit+0x2c4>)
 80026ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026d2:	f003 0204 	and.w	r2, r3, #4
 80026d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026e4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026e8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80026ea:	230c      	movs	r3, #12
 80026ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002702:	2307      	movs	r3, #7
 8002704:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002708:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800270c:	4619      	mov	r1, r3
 800270e:	480a      	ldr	r0, [pc, #40]	@ (8002738 <HAL_UART_MspInit+0x2d8>)
 8002710:	f002 f986 	bl	8004a20 <HAL_GPIO_Init>
}
 8002714:	bf00      	nop
 8002716:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	46002400 	.word	0x46002400
 8002724:	46020c00 	.word	0x46020c00
 8002728:	42021800 	.word	0x42021800
 800272c:	42020400 	.word	0x42020400
 8002730:	40013800 	.word	0x40013800
 8002734:	40006400 	.word	0x40006400
 8002738:	42020800 	.word	0x42020800

0800273c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b0bc      	sub	sp, #240	@ 0xf0
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002744:	f107 0310 	add.w	r3, r7, #16
 8002748:	22e0      	movs	r2, #224	@ 0xe0
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f00b f8e2 	bl	800d916 <memset>
  if(hltdc->Instance==LTDC)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a22      	ldr	r2, [pc, #136]	@ (80027e0 <HAL_LTDC_MspInit+0xa4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d13d      	bne.n	80027d8 <HAL_LTDC_MspInit+0x9c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0302 	mov.w	r3, #2
 8002764:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 8002768:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800276c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8002770:	2303      	movs	r3, #3
 8002772:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLL2.PLL2M = 1;
 8002774:	2301      	movs	r3, #1
 8002776:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLL2.PLL2N = 20;
 8002778:	2314      	movs	r3, #20
 800277a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2P = 2;
 800277c:	2302      	movs	r3, #2
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLL2.PLL2Q = 2;
 8002780:	2302      	movs	r3, #2
 8002782:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLL2.PLL2R = 2;
 8002784:	2302      	movs	r3, #2
 8002786:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8002788:	230c      	movs	r3, #12
 800278a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8002790:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002794:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002796:	f107 0310 	add.w	r3, r7, #16
 800279a:	4618      	mov	r0, r3
 800279c:	f006 fb1c 	bl	8008dd8 <HAL_RCCEx_PeriphCLKConfig>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 80027a6:	f7ff fa13 	bl	8001bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80027aa:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <HAL_LTDC_MspInit+0xa8>)
 80027ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80027b0:	4a0c      	ldr	r2, [pc, #48]	@ (80027e4 <HAL_LTDC_MspInit+0xa8>)
 80027b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027b6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80027ba:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <HAL_LTDC_MspInit+0xa8>)
 80027bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80027c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80027c8:	2200      	movs	r2, #0
 80027ca:	2100      	movs	r1, #0
 80027cc:	2087      	movs	r0, #135	@ 0x87
 80027ce:	f000 fd53 	bl	8003278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80027d2:	2087      	movs	r0, #135	@ 0x87
 80027d4:	f000 fd6a 	bl	80032ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80027d8:	bf00      	nop
 80027da:	37f0      	adds	r7, #240	@ 0xf0
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40016800 	.word	0x40016800
 80027e4:	46020c00 	.word	0x46020c00

080027e8 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b0ca      	sub	sp, #296	@ 0x128
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80027f2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80027f6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002808:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800280c:	22e0      	movs	r2, #224	@ 0xe0
 800280e:	2100      	movs	r1, #0
 8002810:	4618      	mov	r0, r3
 8002812:	f00b f880 	bl	800d916 <memset>
  if(hospi->Instance==OCTOSPI1)
 8002816:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800281a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a93      	ldr	r2, [pc, #588]	@ (8002a70 <HAL_OSPI_MspInit+0x288>)
 8002824:	4293      	cmp	r3, r2
 8002826:	f040 8133 	bne.w	8002a90 <HAL_OSPI_MspInit+0x2a8>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800282a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002836:	2300      	movs	r3, #0
 8002838:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800283c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002840:	4618      	mov	r0, r3
 8002842:	f006 fac9 	bl	8008dd8 <HAL_RCCEx_PeriphCLKConfig>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 800284c:	f7ff f9c0 	bl	8001bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8002850:	4b88      	ldr	r3, [pc, #544]	@ (8002a74 <HAL_OSPI_MspInit+0x28c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	4a87      	ldr	r2, [pc, #540]	@ (8002a74 <HAL_OSPI_MspInit+0x28c>)
 8002858:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 800285a:	4b86      	ldr	r3, [pc, #536]	@ (8002a74 <HAL_OSPI_MspInit+0x28c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d10e      	bne.n	8002880 <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8002862:	4b85      	ldr	r3, [pc, #532]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 8002864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002868:	4a83      	ldr	r2, [pc, #524]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 800286a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800286e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002872:	4b81      	ldr	r3, [pc, #516]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 8002874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800287c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800287e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002880:	4b7d      	ldr	r3, [pc, #500]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002886:	4a7c      	ldr	r2, [pc, #496]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 8002888:	f043 0310 	orr.w	r3, r3, #16
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002890:	4b79      	ldr	r3, [pc, #484]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002896:	f003 0210 	and.w	r2, r3, #16
 800289a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800289e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80028a8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028ac:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80028ae:	4b72      	ldr	r3, [pc, #456]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 80028b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028b4:	4a70      	ldr	r2, [pc, #448]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 80028b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028be:	4b6e      	ldr	r3, [pc, #440]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 80028c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028c4:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 80028c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80028cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80028d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028da:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028dc:	4b66      	ldr	r3, [pc, #408]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 80028de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028e2:	4a65      	ldr	r2, [pc, #404]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 80028e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028ec:	4b62      	ldr	r3, [pc, #392]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 80028ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028f2:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80028f6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80028fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002908:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800290a:	4b5b      	ldr	r3, [pc, #364]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 800290c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002910:	4a59      	ldr	r2, [pc, #356]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 8002912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002916:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800291a:	4b57      	ldr	r3, [pc, #348]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 800291c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002920:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8002924:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002928:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002932:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002936:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002938:	4b4f      	ldr	r3, [pc, #316]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 800293a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800293e:	4a4e      	ldr	r2, [pc, #312]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002948:	4b4b      	ldr	r3, [pc, #300]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 800294a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800294e:	f003 0202 	and.w	r2, r3, #2
 8002952:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002956:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002960:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002964:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002966:	4b44      	ldr	r3, [pc, #272]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 8002968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800296c:	4a42      	ldr	r2, [pc, #264]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 800296e:	f043 0310 	orr.w	r3, r3, #16
 8002972:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002976:	4b40      	ldr	r3, [pc, #256]	@ (8002a78 <HAL_OSPI_MspInit+0x290>)
 8002978:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800297c:	f003 0210 	and.w	r2, r3, #16
 8002980:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002984:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800298e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002992:	681b      	ldr	r3, [r3, #0]
    PH9     ------> OCTOSPIM_P2_IO4
    PH12     ------> OCTOSPIM_P2_IO7
    PB10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9
 8002994:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002998:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a8:	2303      	movs	r3, #3
 80029aa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80029ae:	2305      	movs	r3, #5
 80029b0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029b4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80029b8:	4619      	mov	r1, r3
 80029ba:	4830      	ldr	r0, [pc, #192]	@ (8002a7c <HAL_OSPI_MspInit+0x294>)
 80029bc:	f002 f830 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029c0:	2340      	movs	r3, #64	@ 0x40
 80029c2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d2:	2303      	movs	r3, #3
 80029d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80029d8:	2303      	movs	r3, #3
 80029da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029de:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80029e2:	4619      	mov	r1, r3
 80029e4:	4826      	ldr	r0, [pc, #152]	@ (8002a80 <HAL_OSPI_MspInit+0x298>)
 80029e6:	f002 f81b 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80029ea:	230e      	movs	r3, #14
 80029ec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fc:	2303      	movs	r3, #3
 80029fe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPI2;
 8002a02:	2306      	movs	r3, #6
 8002a04:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002a08:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	481d      	ldr	r0, [pc, #116]	@ (8002a84 <HAL_OSPI_MspInit+0x29c>)
 8002a10:	f002 f806 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 8002a14:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002a18:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002a2e:	230a      	movs	r3, #10
 8002a30:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a34:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4813      	ldr	r0, [pc, #76]	@ (8002a88 <HAL_OSPI_MspInit+0x2a0>)
 8002a3c:	f001 fff0 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a44:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a54:	2303      	movs	r3, #3
 8002a56:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002a5a:	230a      	movs	r3, #10
 8002a5c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a60:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002a64:	4619      	mov	r1, r3
 8002a66:	4809      	ldr	r0, [pc, #36]	@ (8002a8c <HAL_OSPI_MspInit+0x2a4>)
 8002a68:	f001 ffda 	bl	8004a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8002a6c:	e08f      	b.n	8002b8e <HAL_OSPI_MspInit+0x3a6>
 8002a6e:	bf00      	nop
 8002a70:	420d1400 	.word	0x420d1400
 8002a74:	200014c0 	.word	0x200014c0
 8002a78:	46020c00 	.word	0x46020c00
 8002a7c:	42021c00 	.word	0x42021c00
 8002a80:	42021800 	.word	0x42021800
 8002a84:	42022000 	.word	0x42022000
 8002a88:	42020400 	.word	0x42020400
 8002a8c:	42021000 	.word	0x42021000
  else if(hospi->Instance==OCTOSPI2)
 8002a90:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002a94:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a3e      	ldr	r2, [pc, #248]	@ (8002b98 <HAL_OSPI_MspInit+0x3b0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d175      	bne.n	8002b8e <HAL_OSPI_MspInit+0x3a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002aa2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ab4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f006 f98d 	bl	8008dd8 <HAL_RCCEx_PeriphCLKConfig>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_OSPI_MspInit+0x2e0>
      Error_Handler();
 8002ac4:	f7ff f884 	bl	8001bd0 <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8002ac8:	4b34      	ldr	r3, [pc, #208]	@ (8002b9c <HAL_OSPI_MspInit+0x3b4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	4a33      	ldr	r2, [pc, #204]	@ (8002b9c <HAL_OSPI_MspInit+0x3b4>)
 8002ad0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8002ad2:	4b32      	ldr	r3, [pc, #200]	@ (8002b9c <HAL_OSPI_MspInit+0x3b4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d116      	bne.n	8002b08 <HAL_OSPI_MspInit+0x320>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8002ada:	4b31      	ldr	r3, [pc, #196]	@ (8002ba0 <HAL_OSPI_MspInit+0x3b8>)
 8002adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ae0:	4a2f      	ldr	r2, [pc, #188]	@ (8002ba0 <HAL_OSPI_MspInit+0x3b8>)
 8002ae2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ae6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002aea:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba0 <HAL_OSPI_MspInit+0x3b8>)
 8002aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002af0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002af4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002af8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002b02:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002b06:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8002b08:	4b25      	ldr	r3, [pc, #148]	@ (8002ba0 <HAL_OSPI_MspInit+0x3b8>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0e:	4a24      	ldr	r2, [pc, #144]	@ (8002ba0 <HAL_OSPI_MspInit+0x3b8>)
 8002b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b18:	4b21      	ldr	r3, [pc, #132]	@ (8002ba0 <HAL_OSPI_MspInit+0x3b8>)
 8002b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8002b22:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002b26:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002b30:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b34:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b36:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba0 <HAL_OSPI_MspInit+0x3b8>)
 8002b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b3c:	4a18      	ldr	r2, [pc, #96]	@ (8002ba0 <HAL_OSPI_MspInit+0x3b8>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b46:	4b16      	ldr	r3, [pc, #88]	@ (8002ba0 <HAL_OSPI_MspInit+0x3b8>)
 8002b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b4c:	f003 0201 	and.w	r2, r3, #1
 8002b50:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002b54:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002b5e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002b62:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b64:	2301      	movs	r3, #1
 8002b66:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b76:	2303      	movs	r3, #3
 8002b78:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI2;
 8002b7c:	230a      	movs	r3, #10
 8002b7e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b82:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002b86:	4619      	mov	r1, r3
 8002b88:	4806      	ldr	r0, [pc, #24]	@ (8002ba4 <HAL_OSPI_MspInit+0x3bc>)
 8002b8a:	f001 ff49 	bl	8004a20 <HAL_GPIO_Init>
}
 8002b8e:	bf00      	nop
 8002b90:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	420d2400 	.word	0x420d2400
 8002b9c:	200014c0 	.word	0x200014c0
 8002ba0:	46020c00 	.word	0x46020c00
 8002ba4:	42020000 	.word	0x42020000

08002ba8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b0bc      	sub	sp, #240	@ 0xf0
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bb0:	f107 0310 	add.w	r3, r7, #16
 8002bb4:	22e0      	movs	r2, #224	@ 0xe0
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f00a feac 	bl	800d916 <memset>
  if(hrtc->Instance==RTC)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8002c38 <HAL_RTC_MspInit+0x90>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d132      	bne.n	8002c2e <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002bc8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002bd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bdc:	f107 0310 	add.w	r3, r7, #16
 8002be0:	4618      	mov	r0, r3
 8002be2:	f006 f8f9 	bl	8008dd8 <HAL_RCCEx_PeriphCLKConfig>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002bec:	f7fe fff0 	bl	8001bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002bf0:	4b12      	ldr	r3, [pc, #72]	@ (8002c3c <HAL_RTC_MspInit+0x94>)
 8002bf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bf6:	4a11      	ldr	r2, [pc, #68]	@ (8002c3c <HAL_RTC_MspInit+0x94>)
 8002bf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bfc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002c00:	4b0e      	ldr	r3, [pc, #56]	@ (8002c3c <HAL_RTC_MspInit+0x94>)
 8002c02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002c06:	4a0d      	ldr	r2, [pc, #52]	@ (8002c3c <HAL_RTC_MspInit+0x94>)
 8002c08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c0c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002c10:	4b0a      	ldr	r3, [pc, #40]	@ (8002c3c <HAL_RTC_MspInit+0x94>)
 8002c12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002c16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002c1e:	4b07      	ldr	r3, [pc, #28]	@ (8002c3c <HAL_RTC_MspInit+0x94>)
 8002c20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c24:	4a05      	ldr	r2, [pc, #20]	@ (8002c3c <HAL_RTC_MspInit+0x94>)
 8002c26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c2e:	bf00      	nop
 8002c30:	37f0      	adds	r7, #240	@ 0xf0
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	46007800 	.word	0x46007800
 8002c3c:	46020c00 	.word	0x46020c00

08002c40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b0c4      	sub	sp, #272	@ 0x110
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c4e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c60:	f107 0318 	add.w	r3, r7, #24
 8002c64:	22e0      	movs	r2, #224	@ 0xe0
 8002c66:	2100      	movs	r1, #0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f00a fe54 	bl	800d916 <memset>
  if(hspi->Instance==SPI1)
 8002c6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a41      	ldr	r2, [pc, #260]	@ (8002d80 <HAL_SPI_MspInit+0x140>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d17a      	bne.n	8002d76 <HAL_SPI_MspInit+0x136>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002c80:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8002c8c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c94:	f107 0318 	add.w	r3, r7, #24
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f006 f89d 	bl	8008dd8 <HAL_RCCEx_PeriphCLKConfig>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8002ca4:	f7fe ff94 	bl	8001bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ca8:	4b36      	ldr	r3, [pc, #216]	@ (8002d84 <HAL_SPI_MspInit+0x144>)
 8002caa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002cae:	4a35      	ldr	r2, [pc, #212]	@ (8002d84 <HAL_SPI_MspInit+0x144>)
 8002cb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cb4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002cb8:	4b32      	ldr	r3, [pc, #200]	@ (8002d84 <HAL_SPI_MspInit+0x144>)
 8002cba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002cbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8002d84 <HAL_SPI_MspInit+0x144>)
 8002cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ccc:	4a2d      	ldr	r2, [pc, #180]	@ (8002d84 <HAL_SPI_MspInit+0x144>)
 8002cce:	f043 0302 	orr.w	r3, r3, #2
 8002cd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002cd6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d84 <HAL_SPI_MspInit+0x144>)
 8002cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cdc:	f003 0202 	and.w	r2, r3, #2
 8002ce0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ce4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002cee:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002cf2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf4:	4b23      	ldr	r3, [pc, #140]	@ (8002d84 <HAL_SPI_MspInit+0x144>)
 8002cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cfa:	4a22      	ldr	r2, [pc, #136]	@ (8002d84 <HAL_SPI_MspInit+0x144>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d04:	4b1f      	ldr	r3, [pc, #124]	@ (8002d84 <HAL_SPI_MspInit+0x144>)
 8002d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d0a:	f003 0201 	and.w	r2, r3, #1
 8002d0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d20:	681b      	ldr	r3, [r3, #0]
    PB0     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d3a:	2305      	movs	r3, #5
 8002d3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d40:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002d44:	4619      	mov	r1, r3
 8002d46:	4810      	ldr	r0, [pc, #64]	@ (8002d88 <HAL_SPI_MspInit+0x148>)
 8002d48:	f001 fe6a 	bl	8004a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 8002d4c:	23e0      	movs	r3, #224	@ 0xe0
 8002d4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d64:	2305      	movs	r3, #5
 8002d66:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4806      	ldr	r0, [pc, #24]	@ (8002d8c <HAL_SPI_MspInit+0x14c>)
 8002d72:	f001 fe55 	bl	8004a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d76:	bf00      	nop
 8002d78:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40013000 	.word	0x40013000
 8002d84:	46020c00 	.word	0x46020c00
 8002d88:	42020400 	.word	0x42020400
 8002d8c:	42020000 	.word	0x42020000

08002d90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08e      	sub	sp, #56	@ 0x38
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002da0:	4b2e      	ldr	r3, [pc, #184]	@ (8002e5c <HAL_InitTick+0xcc>)
 8002da2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002da6:	4a2d      	ldr	r2, [pc, #180]	@ (8002e5c <HAL_InitTick+0xcc>)
 8002da8:	f043 0310 	orr.w	r3, r3, #16
 8002dac:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002db0:	4b2a      	ldr	r3, [pc, #168]	@ (8002e5c <HAL_InitTick+0xcc>)
 8002db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002dbe:	f107 0210 	add.w	r2, r7, #16
 8002dc2:	f107 0314 	add.w	r3, r7, #20
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f005 ff1b 	bl	8008c04 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002dce:	f005 fedd 	bl	8008b8c <HAL_RCC_GetPCLK1Freq>
 8002dd2:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd6:	4a22      	ldr	r2, [pc, #136]	@ (8002e60 <HAL_InitTick+0xd0>)
 8002dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ddc:	0c9b      	lsrs	r3, r3, #18
 8002dde:	3b01      	subs	r3, #1
 8002de0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002de2:	4b20      	ldr	r3, [pc, #128]	@ (8002e64 <HAL_InitTick+0xd4>)
 8002de4:	4a20      	ldr	r2, [pc, #128]	@ (8002e68 <HAL_InitTick+0xd8>)
 8002de6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002de8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e64 <HAL_InitTick+0xd4>)
 8002dea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002dee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002df0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e64 <HAL_InitTick+0xd4>)
 8002df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002df6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e64 <HAL_InitTick+0xd4>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dfc:	4b19      	ldr	r3, [pc, #100]	@ (8002e64 <HAL_InitTick+0xd4>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002e02:	4818      	ldr	r0, [pc, #96]	@ (8002e64 <HAL_InitTick+0xd4>)
 8002e04:	f009 fc06 	bl	800c614 <HAL_TIM_Base_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8002e0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d118      	bne.n	8002e48 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002e16:	4813      	ldr	r0, [pc, #76]	@ (8002e64 <HAL_InitTick+0xd4>)
 8002e18:	f009 fc5e 	bl	800c6d8 <HAL_TIM_Base_Start_IT>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8002e22:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10e      	bne.n	8002e48 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b0f      	cmp	r3, #15
 8002e2e:	d808      	bhi.n	8002e42 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8002e30:	2200      	movs	r2, #0
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	2031      	movs	r0, #49	@ 0x31
 8002e36:	f000 fa1f 	bl	8003278 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e6c <HAL_InitTick+0xdc>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	e002      	b.n	8002e48 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002e48:	2031      	movs	r0, #49	@ 0x31
 8002e4a:	f000 fa2f 	bl	80032ac <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8002e4e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3738      	adds	r7, #56	@ 0x38
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	46020c00 	.word	0x46020c00
 8002e60:	431bde83 	.word	0x431bde83
 8002e64:	200014c4 	.word	0x200014c4
 8002e68:	40001000 	.word	0x40001000
 8002e6c:	20000d04 	.word	0x20000d04

08002e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002e74:	f005 ff0e 	bl	8008c94 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e78:	bf00      	nop
 8002e7a:	e7fd      	b.n	8002e78 <NMI_Handler+0x8>

08002e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e80:	bf00      	nop
 8002e82:	e7fd      	b.n	8002e80 <HardFault_Handler+0x4>

08002e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e88:	bf00      	nop
 8002e8a:	e7fd      	b.n	8002e88 <MemManage_Handler+0x4>

08002e8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e90:	bf00      	nop
 8002e92:	e7fd      	b.n	8002e90 <BusFault_Handler+0x4>

08002e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e98:	bf00      	nop
 8002e9a:	e7fd      	b.n	8002e98 <UsageFault_Handler+0x4>

08002e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ed8:	4802      	ldr	r0, [pc, #8]	@ (8002ee4 <TIM6_IRQHandler+0x10>)
 8002eda:	f009 fc9d 	bl	800c818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200014c4 	.word	0x200014c4

08002ee8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002eec:	4802      	ldr	r0, [pc, #8]	@ (8002ef8 <DMA2D_IRQHandler+0x10>)
 8002eee:	f000 fc65 	bl	80037bc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000e64 	.word	0x20000e64

08002efc <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 8002f00:	4802      	ldr	r0, [pc, #8]	@ (8002f0c <GPU2D_IRQHandler+0x10>)
 8002f02:	f001 ffa7 	bl	8004e54 <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000f30 	.word	0x20000f30

08002f10 <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 8002f14:	4802      	ldr	r0, [pc, #8]	@ (8002f20 <GPU2D_ER_IRQHandler+0x10>)
 8002f16:	f001 ffc3 	bl	8004ea0 <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000f30 	.word	0x20000f30

08002f24 <GFXMMU_IRQHandler>:

/**
  * @brief This function handles GFXMMU global interrupt.
  */
void GFXMMU_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GFXMMU_IRQn 0 */

  /* USER CODE END GFXMMU_IRQn 0 */
  HAL_GFXMMU_IRQHandler(&hgfxmmu);
 8002f28:	4802      	ldr	r0, [pc, #8]	@ (8002f34 <GFXMMU_IRQHandler+0x10>)
 8002f2a:	f001 fd49 	bl	80049c0 <HAL_GFXMMU_IRQHandler>
  /* USER CODE BEGIN GFXMMU_IRQn 1 */

  /* USER CODE END GFXMMU_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000ee8 	.word	0x20000ee8

08002f38 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002f3c:	4802      	ldr	r0, [pc, #8]	@ (8002f48 <LTDC_IRQHandler+0x10>)
 8002f3e:	f002 ff47 	bl	8005dd0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	2000129c 	.word	0x2000129c

08002f4c <DSI_IRQHandler>:

/**
  * @brief This function handles DSIHOST global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002f50:	4802      	ldr	r0, [pc, #8]	@ (8002f5c <DSI_IRQHandler+0x10>)
 8002f52:	f001 f88b 	bl	800406c <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000ec4 	.word	0x20000ec4

08002f60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f64:	4b18      	ldr	r3, [pc, #96]	@ (8002fc8 <SystemInit+0x68>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f6a:	4a17      	ldr	r2, [pc, #92]	@ (8002fc8 <SystemInit+0x68>)
 8002f6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002f74:	4b15      	ldr	r3, [pc, #84]	@ (8002fcc <SystemInit+0x6c>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002f7a:	4b14      	ldr	r3, [pc, #80]	@ (8002fcc <SystemInit+0x6c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002f80:	4b12      	ldr	r3, [pc, #72]	@ (8002fcc <SystemInit+0x6c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002f86:	4b11      	ldr	r3, [pc, #68]	@ (8002fcc <SystemInit+0x6c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fcc <SystemInit+0x6c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a0e      	ldr	r2, [pc, #56]	@ (8002fcc <SystemInit+0x6c>)
 8002f92:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002f96:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002f9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fcc <SystemInit+0x6c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fcc <SystemInit+0x6c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a09      	ldr	r2, [pc, #36]	@ (8002fcc <SystemInit+0x6c>)
 8002fa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002fae:	4b07      	ldr	r3, [pc, #28]	@ (8002fcc <SystemInit+0x6c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fb4:	4b04      	ldr	r3, [pc, #16]	@ (8002fc8 <SystemInit+0x68>)
 8002fb6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002fba:	609a      	str	r2, [r3, #8]
  #endif
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	e000ed00 	.word	0xe000ed00
 8002fcc:	46020c00 	.word	0x46020c00

08002fd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002fd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003008 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fd4:	f7ff ffc4 	bl	8002f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002fd8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002fda:	e003      	b.n	8002fe4 <LoopCopyDataInit>

08002fdc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002fde:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002fe0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002fe2:	3104      	adds	r1, #4

08002fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002fe4:	480a      	ldr	r0, [pc, #40]	@ (8003010 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8003014 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002fe8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002fea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002fec:	d3f6      	bcc.n	8002fdc <CopyDataInit>
	ldr	r2, =_sbss
 8002fee:	4a0a      	ldr	r2, [pc, #40]	@ (8003018 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ff0:	e002      	b.n	8002ff8 <LoopFillZerobss>

08002ff2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ff2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ff4:	f842 3b04 	str.w	r3, [r2], #4

08002ff8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ff8:	4b08      	ldr	r3, [pc, #32]	@ (800301c <LoopForever+0x16>)
	cmp	r2, r3
 8002ffa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002ffc:	d3f9      	bcc.n	8002ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ffe:	f00a fc93 	bl	800d928 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003002:	f7fd fb51 	bl	80006a8 <main>

08003006 <LoopForever>:

LoopForever:
    b LoopForever
 8003006:	e7fe      	b.n	8003006 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003008:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 800300c:	0800da98 	.word	0x0800da98
	ldr	r0, =_sdata
 8003010:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003014:	20000d09 	.word	0x20000d09
	ldr	r2, =_sbss
 8003018:	20000d0c 	.word	0x20000d0c
	ldr	r3, = _ebss
 800301c:	20001538 	.word	0x20001538

08003020 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003020:	e7fe      	b.n	8003020 <ADC1_2_IRQHandler>
	...

08003024 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003028:	4b11      	ldr	r3, [pc, #68]	@ (8003070 <HAL_Init+0x4c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a10      	ldr	r2, [pc, #64]	@ (8003070 <HAL_Init+0x4c>)
 800302e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003034:	2003      	movs	r0, #3
 8003036:	f000 f914 	bl	8003262 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800303a:	f005 fc8b 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800303e:	4602      	mov	r2, r0
 8003040:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <HAL_Init+0x50>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	490b      	ldr	r1, [pc, #44]	@ (8003078 <HAL_Init+0x54>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	fa22 f303 	lsr.w	r3, r2, r3
 8003050:	4a0a      	ldr	r2, [pc, #40]	@ (800307c <HAL_Init+0x58>)
 8003052:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003054:	200f      	movs	r0, #15
 8003056:	f7ff fe9b 	bl	8002d90 <HAL_InitTick>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e002      	b.n	800306a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003064:	f7fe fdba 	bl	8001bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40022000 	.word	0x40022000
 8003074:	46020c00 	.word	0x46020c00
 8003078:	0800d988 	.word	0x0800d988
 800307c:	20000d00 	.word	0x20000d00

08003080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003084:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <HAL_IncTick+0x20>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4b06      	ldr	r3, [pc, #24]	@ (80030a4 <HAL_IncTick+0x24>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4413      	add	r3, r2
 8003090:	4a04      	ldr	r2, [pc, #16]	@ (80030a4 <HAL_IncTick+0x24>)
 8003092:	6013      	str	r3, [r2, #0]
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000d08 	.word	0x20000d08
 80030a4:	20001510 	.word	0x20001510

080030a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return uwTick;
 80030ac:	4b03      	ldr	r3, [pc, #12]	@ (80030bc <HAL_GetTick+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20001510 	.word	0x20001510

080030c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030c8:	f7ff ffee 	bl	80030a8 <HAL_GetTick>
 80030cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d005      	beq.n	80030e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030da:	4b0a      	ldr	r3, [pc, #40]	@ (8003104 <HAL_Delay+0x44>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030e6:	bf00      	nop
 80030e8:	f7ff ffde 	bl	80030a8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d8f7      	bhi.n	80030e8 <HAL_Delay+0x28>
  {
  }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000d08 	.word	0x20000d08

08003108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003118:	4b0c      	ldr	r3, [pc, #48]	@ (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003124:	4013      	ands	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313a:	4a04      	ldr	r2, [pc, #16]	@ (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	60d3      	str	r3, [r2, #12]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003154:	4b04      	ldr	r3, [pc, #16]	@ (8003168 <__NVIC_GetPriorityGrouping+0x18>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	f003 0307 	and.w	r3, r3, #7
}
 800315e:	4618      	mov	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800317a:	2b00      	cmp	r3, #0
 800317c:	db0b      	blt.n	8003196 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	f003 021f 	and.w	r2, r3, #31
 8003184:	4907      	ldr	r1, [pc, #28]	@ (80031a4 <__NVIC_EnableIRQ+0x38>)
 8003186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	2001      	movs	r0, #1
 800318e:	fa00 f202 	lsl.w	r2, r0, r2
 8003192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	e000e100 	.word	0xe000e100

080031a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	db0a      	blt.n	80031d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	490c      	ldr	r1, [pc, #48]	@ (80031f4 <__NVIC_SetPriority+0x4c>)
 80031c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031c6:	0112      	lsls	r2, r2, #4
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	440b      	add	r3, r1
 80031cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d0:	e00a      	b.n	80031e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4908      	ldr	r1, [pc, #32]	@ (80031f8 <__NVIC_SetPriority+0x50>)
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	3b04      	subs	r3, #4
 80031e0:	0112      	lsls	r2, r2, #4
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	440b      	add	r3, r1
 80031e6:	761a      	strb	r2, [r3, #24]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000e100 	.word	0xe000e100
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	@ 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f1c3 0307 	rsb	r3, r3, #7
 8003216:	2b04      	cmp	r3, #4
 8003218:	bf28      	it	cs
 800321a:	2304      	movcs	r3, #4
 800321c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3304      	adds	r3, #4
 8003222:	2b06      	cmp	r3, #6
 8003224:	d902      	bls.n	800322c <NVIC_EncodePriority+0x30>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3b03      	subs	r3, #3
 800322a:	e000      	b.n	800322e <NVIC_EncodePriority+0x32>
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	f04f 32ff 	mov.w	r2, #4294967295
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43da      	mvns	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	401a      	ands	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003244:	f04f 31ff 	mov.w	r1, #4294967295
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43d9      	mvns	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	4313      	orrs	r3, r2
         );
}
 8003256:	4618      	mov	r0, r3
 8003258:	3724      	adds	r7, #36	@ 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff ff4c 	bl	8003108 <__NVIC_SetPriorityGrouping>
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003286:	f7ff ff63 	bl	8003150 <__NVIC_GetPriorityGrouping>
 800328a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	6978      	ldr	r0, [r7, #20]
 8003292:	f7ff ffb3 	bl	80031fc <NVIC_EncodePriority>
 8003296:	4602      	mov	r2, r0
 8003298:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff ff82 	bl	80031a8 <__NVIC_SetPriority>
}
 80032a4:	bf00      	nop
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff ff56 	bl	800316c <__NVIC_EnableIRQ>
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e054      	b.n	8003384 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7f5b      	ldrb	r3, [r3, #29]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d105      	bne.n	80032f0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fe fd0a 	bl	8001d04 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	791b      	ldrb	r3, [r3, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10c      	bne.n	8003318 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a22      	ldr	r2, [pc, #136]	@ (800338c <HAL_CRC_Init+0xc4>)
 8003304:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0218 	bic.w	r2, r2, #24
 8003314:	609a      	str	r2, [r3, #8]
 8003316:	e00c      	b.n	8003332 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6899      	ldr	r1, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	461a      	mov	r2, r3
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f834 	bl	8003390 <HAL_CRCEx_Polynomial_Set>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e028      	b.n	8003384 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	795b      	ldrb	r3, [r3, #5]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d105      	bne.n	8003346 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f04f 32ff 	mov.w	r2, #4294967295
 8003342:	611a      	str	r2, [r3, #16]
 8003344:	e004      	b.n	8003350 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6912      	ldr	r2, [r2, #16]
 800334e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699a      	ldr	r2, [r3, #24]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	04c11db7 	.word	0x04c11db7

08003390 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80033a0:	231f      	movs	r3, #31
 80033a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	75fb      	strb	r3, [r7, #23]
 80033b2:	e063      	b.n	800347c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80033b4:	bf00      	nop
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1e5a      	subs	r2, r3, #1
 80033ba:	613a      	str	r2, [r7, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d009      	beq.n	80033d4 <HAL_CRCEx_Polynomial_Set+0x44>
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	fa22 f303 	lsr.w	r3, r2, r3
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f0      	beq.n	80033b6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b18      	cmp	r3, #24
 80033d8:	d846      	bhi.n	8003468 <HAL_CRCEx_Polynomial_Set+0xd8>
 80033da:	a201      	add	r2, pc, #4	@ (adr r2, 80033e0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	0800346f 	.word	0x0800346f
 80033e4:	08003469 	.word	0x08003469
 80033e8:	08003469 	.word	0x08003469
 80033ec:	08003469 	.word	0x08003469
 80033f0:	08003469 	.word	0x08003469
 80033f4:	08003469 	.word	0x08003469
 80033f8:	08003469 	.word	0x08003469
 80033fc:	08003469 	.word	0x08003469
 8003400:	0800345d 	.word	0x0800345d
 8003404:	08003469 	.word	0x08003469
 8003408:	08003469 	.word	0x08003469
 800340c:	08003469 	.word	0x08003469
 8003410:	08003469 	.word	0x08003469
 8003414:	08003469 	.word	0x08003469
 8003418:	08003469 	.word	0x08003469
 800341c:	08003469 	.word	0x08003469
 8003420:	08003451 	.word	0x08003451
 8003424:	08003469 	.word	0x08003469
 8003428:	08003469 	.word	0x08003469
 800342c:	08003469 	.word	0x08003469
 8003430:	08003469 	.word	0x08003469
 8003434:	08003469 	.word	0x08003469
 8003438:	08003469 	.word	0x08003469
 800343c:	08003469 	.word	0x08003469
 8003440:	08003445 	.word	0x08003445
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2b06      	cmp	r3, #6
 8003448:	d913      	bls.n	8003472 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800344e:	e010      	b.n	8003472 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2b07      	cmp	r3, #7
 8003454:	d90f      	bls.n	8003476 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800345a:	e00c      	b.n	8003476 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b0f      	cmp	r3, #15
 8003460:	d90b      	bls.n	800347a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003466:	e008      	b.n	800347a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]
        break;
 800346c:	e006      	b.n	800347c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800346e:	bf00      	nop
 8003470:	e004      	b.n	800347c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003472:	bf00      	nop
 8003474:	e002      	b.n	800347c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003476:	bf00      	nop
 8003478:	e000      	b.n	800347c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800347a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10d      	bne.n	800349e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f023 0118 	bic.w	r1, r3, #24
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	430a      	orrs	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800349e:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	371c      	adds	r7, #28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e037      	b.n	800352e <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d119      	bne.n	80034fe <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003538 <HAL_DCACHE_Init+0x8c>)
 80034ce:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a1a      	ldr	r2, [pc, #104]	@ (800353c <HAL_DCACHE_Init+0x90>)
 80034d4:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a19      	ldr	r2, [pc, #100]	@ (8003540 <HAL_DCACHE_Init+0x94>)
 80034da:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a19      	ldr	r2, [pc, #100]	@ (8003544 <HAL_DCACHE_Init+0x98>)
 80034e0:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a18      	ldr	r2, [pc, #96]	@ (8003548 <HAL_DCACHE_Init+0x9c>)
 80034e6:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d102      	bne.n	80034f6 <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a16      	ldr	r2, [pc, #88]	@ (800354c <HAL_DCACHE_Init+0xa0>)
 80034f4:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f814 	bl	8003550 <HAL_DCACHE_Enable>
 8003528:	4603      	mov	r3, r0
 800352a:	73fb      	strb	r3, [r7, #15]

  return status;
 800352c:	7bfb      	ldrb	r3, [r7, #15]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	080035ef 	.word	0x080035ef
 800353c:	0800359f 	.word	0x0800359f
 8003540:	080035b3 	.word	0x080035b3
 8003544:	080035db 	.word	0x080035db
 8003548:	080035c7 	.word	0x080035c7
 800354c:	08001d49 	.word	0x08001d49

08003550 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e015      	b.n	8003592 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 0309 	and.w	r3, r3, #9
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8003574:	2302      	movs	r3, #2
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	e00a      	b.n	8003590 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]
  }

  return status;
 8003590:	7bfb      	ldrb	r3, [r7, #15]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800360a:	f7ff fd4d 	bl	80030a8 <HAL_GetTick>
 800360e:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e06b      	b.n	80036f2 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d008      	beq.n	8003638 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e05c      	b.n	80036f2 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0204 	orr.w	r2, r2, #4
 8003646:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2205      	movs	r2, #5
 800364c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003650:	e020      	b.n	8003694 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003652:	f7ff fd29 	bl	80030a8 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b05      	cmp	r3, #5
 800365e:	d919      	bls.n	8003694 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003664:	f043 0210 	orr.w	r2, r3, #16
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2203      	movs	r2, #3
 8003670:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003684:	2201      	movs	r2, #1
 8003686:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e02e      	b.n	80036f2 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0d7      	beq.n	8003652 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0202 	orr.w	r2, r2, #2
 80036b0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2204      	movs	r2, #4
 80036b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80036c2:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d007      	beq.n	80036e8 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036dc:	2201      	movs	r2, #1
 80036de:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2200      	movs	r2, #0
 80036e6:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e053      	b.n	80037b4 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d106      	bne.n	8003726 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7fe fb4b 	bl	8001dbc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2202      	movs	r2, #2
 800372a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6851      	ldr	r1, [r2, #4]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	69d2      	ldr	r2, [r2, #28]
 8003744:	4311      	orrs	r1, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	430b      	orrs	r3, r1
 800374c:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003754:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6891      	ldr	r1, [r2, #8]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6992      	ldr	r2, [r2, #24]
 8003764:	4311      	orrs	r1, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	430b      	orrs	r3, r1
 800376c:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	0c1b      	lsrs	r3, r3, #16
 8003776:	041b      	lsls	r3, r3, #16
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	68d1      	ldr	r1, [r2, #12]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	430b      	orrs	r3, r1
 8003782:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800378a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	051a      	lsls	r2, r3, #20
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	055b      	lsls	r3, r3, #21
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d026      	beq.n	800382c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d021      	beq.n	800382c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037f6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fc:	f043 0201 	orr.w	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2201      	movs	r2, #1
 800380a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2204      	movs	r2, #4
 8003810:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d026      	beq.n	8003884 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d021      	beq.n	8003884 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800384e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2220      	movs	r2, #32
 8003856:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385c:	f043 0202 	orr.w	r2, r3, #2
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2204      	movs	r2, #4
 8003868:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d026      	beq.n	80038dc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003894:	2b00      	cmp	r3, #0
 8003896:	d021      	beq.n	80038dc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038a6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2208      	movs	r2, #8
 80038ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b4:	f043 0204 	orr.w	r2, r3, #4
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2204      	movs	r2, #4
 80038c0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d013      	beq.n	800390e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00e      	beq.n	800390e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038fe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2204      	movs	r2, #4
 8003906:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f853 	bl	80039b4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d024      	beq.n	8003962 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800391e:	2b00      	cmp	r3, #0
 8003920:	d01f      	beq.n	8003962 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003930:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2202      	movs	r2, #2
 8003938:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferCpltCallback != NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01f      	beq.n	80039ac <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d01a      	beq.n	80039ac <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003984:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2210      	movs	r2, #16
 800398c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f80e 	bl	80039c8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_DMA2D_ConfigLayer+0x20>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e084      	b.n	8003b06 <HAL_DMA2D_ConfigLayer+0x12a>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	4413      	add	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	3328      	adds	r3, #40	@ 0x28
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	041b      	lsls	r3, r3, #16
 8003a28:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003a30:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003a3c:	4b35      	ldr	r3, [pc, #212]	@ (8003b14 <HAL_DMA2D_ConfigLayer+0x138>)
 8003a3e:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b0a      	cmp	r3, #10
 8003a46:	d003      	beq.n	8003a50 <HAL_DMA2D_ConfigLayer+0x74>
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b09      	cmp	r3, #9
 8003a4e:	d107      	bne.n	8003a60 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	e005      	b.n	8003a6c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	061b      	lsls	r3, r3, #24
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d120      	bne.n	8003ab4 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	ea02 0103 	and.w	r1, r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b0a      	cmp	r3, #10
 8003a9a:	d003      	beq.n	8003aa4 <HAL_DMA2D_ConfigLayer+0xc8>
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b09      	cmp	r3, #9
 8003aa2:	d127      	bne.n	8003af4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003ab0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ab2:	e01f      	b.n	8003af4 <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69da      	ldr	r2, [r3, #28]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	ea02 0103 	and.w	r1, r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b0a      	cmp	r3, #10
 8003adc:	d003      	beq.n	8003ae6 <HAL_DMA2D_ConfigLayer+0x10a>
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b09      	cmp	r3, #9
 8003ae4:	d106      	bne.n	8003af4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003af2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	ff33000f 	.word	0xff33000f

08003b18 <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8003b30:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	@ 0xc04
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	00da      	lsls	r2, r3, #3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	220e      	movs	r2, #14
 8003b52:	f8c3 2c34 	str.w	r2, [r3, #3124]	@ 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	@ 0xc70
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 021f 	bic.w	r2, r2, #31
 8003b66:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6912      	ldr	r2, [r2, #16]
 8003b72:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	220e      	movs	r2, #14
 8003b7c:	f8c3 2ca0 	str.w	r2, [r3, #3232]	@ 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	@ 0xd08
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 021f 	bic.w	r2, r2, #31
 8003b90:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6912      	ldr	r2, [r2, #16]
 8003b9c:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	220e      	movs	r2, #14
 8003ba6:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	@ 0xc5c
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003bba:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	@ 0xcf4
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003bce:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d007      	beq.n	8003bea <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d003      	beq.n	8003bea <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8003be6:	2b05      	cmp	r3, #5
 8003be8:	d10a      	bne.n	8003c00 <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 8003bfe:	e02c      	b.n	8003c5a <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00b      	beq.n	8003c20 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d007      	beq.n	8003c20 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d003      	beq.n	8003c20 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8003c1c:	2b06      	cmp	r3, #6
 8003c1e:	d10a      	bne.n	8003c36 <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2210      	movs	r2, #16
 8003c26:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2210      	movs	r2, #16
 8003c30:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 8003c34:	e011      	b.n	8003c5a <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b07      	cmp	r3, #7
 8003c3c:	d003      	beq.n	8003c46 <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d109      	bne.n	8003c5a <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	@ 0xc60
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 020f 	bic.w	r2, r2, #15
 8003c6a:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	@ 0xcf8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 020f 	bic.w	r2, r2, #15
 8003c7e:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6952      	ldr	r2, [r2, #20]
 8003c8a:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6952      	ldr	r2, [r2, #20]
 8003c96:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8003cc0:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	075a      	lsls	r2, r3, #29
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f8d3 2434 	ldr.w	r2, [r3, #1076]	@ 0x434
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003cec:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	031a      	lsls	r2, r3, #12
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	021a      	lsls	r2, r3, #8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0c3      	b.n	8003ec8 <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	7e5b      	ldrb	r3, [r3, #25]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d102      	bne.n	8003d50 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fe f85e 	bl	8001e0c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2203      	movs	r2, #3
 8003d54:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d66:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 8003d6a:	2002      	movs	r0, #2
 8003d6c:	f7ff f9a8 	bl	80030c0 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	4b54      	ldr	r3, [pc, #336]	@ (8003ed0 <HAL_DSI_Init+0x1a4>)
 8003d7e:	400b      	ands	r3, r1
 8003d80:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003d98:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003da0:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff feb3 	bl	8003b18 <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 8003db2:	6839      	ldr	r1, [r7, #0]
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff ff76 	bl	8003ca6 <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8003de2:	2001      	movs	r0, #1
 8003de4:	f7ff f96c 	bl	80030c0 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003de8:	f7ff f95e 	bl	80030a8 <HAL_GetTick>
 8003dec:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003dee:	e008      	b.n	8003e02 <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003df0:	f7ff f95a 	bl	80030a8 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	@ 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e062      	b.n	8003ec8 <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8003e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0ee      	beq.n	8003df0 <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0206 	orr.w	r2, r2, #6
 8003e22:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0203 	bic.w	r2, r2, #3
 8003e36:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0201 	orr.w	r2, r2, #1
 8003e50:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0203 	bic.w	r2, r2, #3
 8003e64:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e8c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6899      	ldr	r1, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	e0000003 	.word	0xe0000003

08003ed4 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	7e1b      	ldrb	r3, [r3, #24]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_DSI_ConfigErrorMonitor+0x16>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e0ba      	b.n	8004060 <HAL_DSI_ConfigErrorMonitor+0x18c>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003f24:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003f28:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d009      	beq.n	8003f4a <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 8003f46:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d009      	beq.n	8003f68 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0201 	orr.w	r2, r2, #1
 8003f64:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0202 	orr.w	r2, r2, #2
 8003f82:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 020c 	orr.w	r2, r2, #12
 8003fa0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d009      	beq.n	8003fc2 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0210 	orr.w	r2, r2, #16
 8003fbe:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0220 	orr.w	r2, r2, #32
 8003fdc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d009      	beq.n	8003ffe <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ffa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d009      	beq.n	800401c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004018:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004022:	2b00      	cmp	r3, #0
 8004024:	d009      	beq.n	800403a <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8004036:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004040:	2b00      	cmp	r3, #0
 8004042:	d009      	beq.n	8004058 <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8004054:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00f      	beq.n	80040a4 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d007      	beq.n	80040a4 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2201      	movs	r2, #1
 800409a:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f8b8 	bl	8004214 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00f      	beq.n	80040d4 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d007      	beq.n	80040d4 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2202      	movs	r2, #2
 80040ca:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f8aa 	bl	8004228 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8097 	beq.w	800420c <HAL_DSI_IRQHandler+0x1a0>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80040e6:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4013      	ands	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80040fe:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	4013      	ands	r3, r2
 800410c:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f043 0201 	orr.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f043 0202 	orr.w	r2, r3, #2
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f043 0204 	orr.w	r2, r3, #4
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f043 0208 	orr.w	r2, r3, #8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f043 0210 	orr.w	r2, r3, #16
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	f043 0220 	orr.w	r2, r3, #32
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PBU_MASK) != 0U)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <HAL_DSI_IRQHandler+0x192>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PBU;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	61da      	str	r2, [r3, #28]
    }
    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HAL_DSI_IRQHandler+0x1a0>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f818 	bl	800423c <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	7e1b      	ldrb	r3, [r3, #24]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_DSI_SetGenericVCID+0x16>
 8004262:	2302      	movs	r3, #2
 8004264:	e019      	b.n	800429a <HAL_DSI_SetGenericVCID+0x4a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 1203 	bic.w	r2, r2, #196611	@ 0x30003
 800427a:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6b19      	ldr	r1, [r3, #48]	@ 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	7e1b      	ldrb	r3, [r3, #24]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e0c5      	b.n	8004448 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0201 	orr.w	r2, r2, #1
 80042d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0203 	bic.w	r2, r2, #3
 8004308:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68d9      	ldr	r1, [r3, #12]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0207 	bic.w	r2, r2, #7
 800432a:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6959      	ldr	r1, [r3, #20]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	431a      	orrs	r2, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 020f 	bic.w	r2, r2, #15
 8004358:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6919      	ldr	r1, [r3, #16]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 020e 	bic.w	r2, r2, #14
 800437c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	005a      	lsls	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6812      	ldr	r2, [r2, #0]
 80043a2:	0c1b      	lsrs	r3, r3, #16
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80043ca:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	431a      	orrs	r2, r3
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0201 	orr.w	r2, r2, #1
 8004428:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0202 	orr.w	r2, r2, #2
 800443c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	7e1b      	ldrb	r3, [r3, #24]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_DSI_ConfigCommand+0x16>
 8004466:	2302      	movs	r3, #2
 8004468:	e049      	b.n	80044fe <HAL_DSI_ConfigCommand+0xaa>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	4b24      	ldr	r3, [pc, #144]	@ (800450c <HAL_DSI_ConfigCommand+0xb8>)
 800447c:	400b      	ands	r3, r1
 800447e:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800448e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004494:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800449a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80044a0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80044a6:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80044ac:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80044b2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80044b8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80044be:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80044c4:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80044ca:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0202 	bic.w	r2, r2, #2
 80044e2:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	fef080ff 	.word	0xfef080ff

08004510 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	7e1b      	ldrb	r3, [r3, #24]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d101      	bne.n	8004526 <HAL_DSI_ConfigFlowControl+0x16>
 8004522:	2302      	movs	r3, #2
 8004524:	e016      	b.n	8004554 <HAL_DSI_ConfigFlowControl+0x44>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800453a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	7e1b      	ldrb	r3, [r3, #24]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_DSI_ConfigPhyTimer+0x16>
 8004572:	2302      	movs	r3, #2
 8004574:	e084      	b.n	8004680 <HAL_DSI_ConfigPhyTimer+0x120>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	441a      	add	r2, r3
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6859      	ldr	r1, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	4613      	mov	r3, r2
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	4413      	add	r3, r2
 8004598:	18ca      	adds	r2, r1, r3
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	441a      	add	r2, r3
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	4293      	cmp	r3, r2
 80045b8:	bf38      	it	cc
 80045ba:	4613      	movcc	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80045ce:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	041a      	lsls	r2, r3, #16
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80045fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	041b      	lsls	r3, r3, #16
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800462e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004632:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	691a      	ldr	r2, [r3, #16]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800465c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	021a      	lsls	r2, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	7e1b      	ldrb	r3, [r3, #24]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_DSI_ConfigHostTimeouts+0x16>
 800469e:	2302      	movs	r3, #2
 80046a0:	e0b4      	b.n	800480c <HAL_DSI_ConfigHostTimeouts+0x180>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80046b6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6899      	ldr	r1, [r3, #8]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	021a      	lsls	r2, r3, #8
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	b292      	uxth	r2, r2
 80046d8:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	041a      	lsls	r2, r3, #16
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	0c1b      	lsrs	r3, r3, #16
 80046fa:	041b      	lsls	r3, r3, #16
 80046fc:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6812      	ldr	r2, [r2, #0]
 800471a:	0c1b      	lsrs	r3, r3, #16
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	0c1b      	lsrs	r3, r3, #16
 8004740:	041b      	lsls	r3, r3, #16
 8004742:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	0c1b      	lsrs	r3, r3, #16
 800476a:	041b      	lsls	r3, r3, #16
 800476c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	695a      	ldr	r2, [r3, #20]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004796:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	0c1b      	lsrs	r3, r3, #16
 80047be:	041b      	lsls	r3, r3, #16
 80047c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6812      	ldr	r2, [r2, #0]
 80047e6:	0c1b      	lsrs	r3, r3, #16
 80047e8:	041b      	lsls	r3, r3, #16
 80047ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6a1a      	ldr	r2, [r3, #32]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_GFXMMU_Init>:
  *         GFXMMU_InitTypeDef structure and initialize the associated handle.
  * @param  hgfxmmu GFXMMU handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GFXMMU_Init(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	73fb      	strb	r3, [r7, #15]

  /* Check GFXMMU handle */
  if (hgfxmmu == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d102      	bne.n	8004830 <HAL_GFXMMU_Init+0x18>
  {
    status = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	73fb      	strb	r3, [r7, #15]
 800482e:	e06e      	b.n	800490e <HAL_GFXMMU_Init+0xf6>
      hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
    }
    hgfxmmu->MspInitCallback(hgfxmmu);
#else
    /* Call GFXMMU MSP init function */
    HAL_GFXMMU_MspInit(hgfxmmu);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7fd fb6f 	bl	8001f14 <HAL_GFXMMU_MspInit>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */

    /* Configure GFXMMU_CR register */
    hgfxmmu->Instance->CR = 0U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]
    hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlocksPerLine);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6819      	ldr	r1, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	601a      	str	r2, [r3, #0]
#if defined(GFXMMU_CR_CE)
    if (hgfxmmu->Init.CachePrefetch.Activation == ENABLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	7f1b      	ldrb	r3, [r3, #28]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d12c      	bne.n	80048b2 <HAL_GFXMMU_Init+0x9a>
    {
      assert_param(IS_GFXMMU_CACHE_LOCK(hgfxmmu->Init.CachePrefetch.CacheLock));
      assert_param(IS_GFXMMU_PREFETCH(hgfxmmu->Init.CachePrefetch.Prefetch));
      assert_param(IS_GFXMMU_OUTTER_BUFFERABILITY(hgfxmmu->Init.CachePrefetch.OutterBufferability));
      assert_param(IS_GFXMMU_OUTTER_CACHABILITY(hgfxmmu->Init.CachePrefetch.OutterCachability));
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a19      	ldr	r1, [r3, #32]
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 8004866:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 800486c:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterCachability);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 8004872:	430b      	orrs	r3, r1
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800487e:	601a      	str	r2, [r3, #0]
      if (hgfxmmu->Init.CachePrefetch.CacheLock == GFXMMU_CACHE_LOCK_ENABLE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004888:	d10b      	bne.n	80048a2 <HAL_GFXMMU_Init+0x8a>
      {
        assert_param(IS_GFXMMU_CACHE_LOCK_BUFFER(hgfxmmu->Init.CachePrefetch.CacheLockBuffer));
        assert_param(IS_GFXMMU_CACHE_FORCE(hgfxmmu->Init.CachePrefetch.CacheForce));
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6819      	ldr	r1, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                  hgfxmmu->Init.CachePrefetch.CacheForce);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	601a      	str	r2, [r3, #0]
      }

      /* Force invalidate cache if cache is enabled */
      hgfxmmu->Instance->CCR |= GFXMMU_CACHE_FORCE_INVALIDATE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0202 	orr.w	r2, r2, #2
 80048b0:	60da      	str	r2, [r3, #12]
      assert_param(IS_GFXMMU_ADDRESSCACHE_LOCK_BUFFER(hgfxmmu->Init.AddressCache.AddressCacheLockBuffer));
      hgfxmmu->Instance->CR |= GFXMMU_CR_ACE |
                               hgfxmmu->Init.AddressCache.AddressCacheLockBuffer;
    }
#endif /* GFXMMU_CR_ACE */
    if (hgfxmmu->Init.Interrupts.Activation == ENABLE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d108      	bne.n	80048ce <HAL_GFXMMU_Init+0xb6>
    {
      assert_param(IS_GFXMMU_INTERRUPTS(hgfxmmu->Init.Interrupts.UsedInterrupts));
      hgfxmmu->Instance->CR |= hgfxmmu->Init.Interrupts.UsedInterrupts;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6819      	ldr	r1, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	601a      	str	r2, [r3, #0]
    }

    /* Configure default value on GFXMMU_DVR register */
    hgfxmmu->Instance->DVR = hgfxmmu->Init.DefaultValue;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6892      	ldr	r2, [r2, #8]
 80048d6:	611a      	str	r2, [r3, #16]

    /* Configure physical buffer addresses on GFXMMU_BxCR registers */
    hgfxmmu->Instance->B0CR = hgfxmmu->Init.Buffers.Buf0Address;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	68d2      	ldr	r2, [r2, #12]
 80048e0:	621a      	str	r2, [r3, #32]
    hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6912      	ldr	r2, [r2, #16]
 80048ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6952      	ldr	r2, [r2, #20]
 80048f4:	629a      	str	r2, [r3, #40]	@ 0x28
    hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6992      	ldr	r2, [r2, #24]
 80048fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Reset GFXMMU error code */
    hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set GFXMMU to ready state */
    hgfxmmu->State = HAL_GFXMMU_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }
  /* Return function status */
  return status;
 800490e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_GFXMMU_ConfigLut>:
  */
HAL_StatusTypeDef HAL_GFXMMU_ConfigLut(GFXMMU_HandleTypeDef *hgfxmmu,
                                       uint32_t FirstLine,
                                       uint32_t LinesNumber,
                                       uint32_t Address)
{
 8004918:	b480      	push	{r7}
 800491a:	b08b      	sub	sp, #44	@ 0x2c
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
  assert_param(IS_GFXMMU_LUT_LINE(FirstLine));
  assert_param(IS_GFXMMU_LUT_LINES_NUMBER(LinesNumber));

  /* Check GFXMMU state and coherent parameters */
  if ((hgfxmmu->State != HAL_GFXMMU_STATE_READY) || ((FirstLine + LinesNumber) > 1024U))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004932:	2b01      	cmp	r3, #1
 8004934:	d105      	bne.n	8004942 <HAL_GFXMMU_ConfigLut+0x2a>
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4413      	add	r3, r2
 800493c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004940:	d903      	bls.n	800494a <HAL_GFXMMU_ConfigLut+0x32>
  {
    status = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004948:	e032      	b.n	80049b0 <HAL_GFXMMU_ConfigLut+0x98>
    uint32_t current_line;
    uint32_t lutxl_address;
    uint32_t lutxh_address;

    /* Initialize local variables */
    current_address = Address;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	623b      	str	r3, [r7, #32]
    current_line    = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
    lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
    lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * FirstLine) + 1U]);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	3301      	adds	r3, #1
 800496e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	617b      	str	r3, [r7, #20]

    /* Copy LUT from flash to look up RAM */
    while (current_line < LinesNumber)
 8004978:	e016      	b.n	80049a8 <HAL_GFXMMU_ConfigLut+0x90>
    {
      *((uint32_t *)lutxl_address) = *((uint32_t *)current_address);
 800497a:	6a3a      	ldr	r2, [r7, #32]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	3304      	adds	r3, #4
 8004986:	623b      	str	r3, [r7, #32]
      *((uint32_t *)lutxh_address) = *((uint32_t *)current_address);
 8004988:	6a3a      	ldr	r2, [r7, #32]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	3304      	adds	r3, #4
 8004994:	623b      	str	r3, [r7, #32]
      lutxl_address += 8U;
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	3308      	adds	r3, #8
 800499a:	61bb      	str	r3, [r7, #24]
      lutxh_address += 8U;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	3308      	adds	r3, #8
 80049a0:	617b      	str	r3, [r7, #20]
      current_line++;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	3301      	adds	r3, #1
 80049a6:	61fb      	str	r3, [r7, #28]
    while (current_line < LinesNumber)
 80049a8:	69fa      	ldr	r2, [r7, #28]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d3e4      	bcc.n	800497a <HAL_GFXMMU_ConfigLut+0x62>
    }
  }
  /* Return function status */
  return status;
 80049b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	372c      	adds	r7, #44	@ 0x2c
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_GFXMMU_IRQHandler>:
  * @brief  This function handles the GFXMMU interrupts.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
void HAL_GFXMMU_IRQHandler(GFXMMU_HandleTypeDef *hgfxmmu)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t flags, interrupts, error;

  /* Read current flags and interrupts and determine which error occurs */
  flags = hgfxmmu->Instance->SR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	617b      	str	r3, [r7, #20]
  interrupts = (hgfxmmu->Instance->CR & GFXMMU_CR_ITS_MASK);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	613b      	str	r3, [r7, #16]
  error = (flags & interrupts);
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4013      	ands	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]

  if (error != 0U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00c      	beq.n	8004a04 <HAL_GFXMMU_IRQHandler+0x44>
  {
    /* Clear flags on GFXMMU_FCR register */
    hgfxmmu->Instance->FCR = error;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	609a      	str	r2, [r3, #8]

    /* Update GFXMMU error code */
    hgfxmmu->ErrorCode |= error;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Call GFXMMU error callback */
#if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
    hgfxmmu->ErrorCallback(hgfxmmu);
#else
    HAL_GFXMMU_ErrorCallback(hgfxmmu);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f804 	bl	8004a0c <HAL_GFXMMU_ErrorCallback>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
  }
}
 8004a04:	bf00      	nop
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_GFXMMU_ErrorCallback>:
  * @brief  Error callback.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
__weak void HAL_GFXMMU_ErrorCallback(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(hgfxmmu);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_GFXMMU_ErrorCallback could be implemented in the user file.
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b089      	sub	sp, #36	@ 0x24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004a32:	e1ba      	b.n	8004daa <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	2101      	movs	r1, #1
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a40:	4013      	ands	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 81aa 	beq.w	8004da4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a55      	ldr	r2, [pc, #340]	@ (8004ba8 <HAL_GPIO_Init+0x188>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d15d      	bne.n	8004b14 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004a5e:	2201      	movs	r2, #1
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	43db      	mvns	r3, r3
 8004a68:	69fa      	ldr	r2, [r7, #28]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f003 0201 	and.w	r2, r3, #1
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	69fa      	ldr	r2, [r7, #28]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004a88:	4a48      	ldr	r2, [pc, #288]	@ (8004bac <HAL_GPIO_Init+0x18c>)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a90:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004a92:	4a46      	ldr	r2, [pc, #280]	@ (8004bac <HAL_GPIO_Init+0x18c>)
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	4413      	add	r3, r2
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	08da      	lsrs	r2, r3, #3
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	3208      	adds	r2, #8
 8004aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aaa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	220f      	movs	r2, #15
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	43db      	mvns	r3, r3
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	220b      	movs	r2, #11
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	08da      	lsrs	r2, r3, #3
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	3208      	adds	r2, #8
 8004ade:	69f9      	ldr	r1, [r7, #28]
 8004ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	2203      	movs	r2, #3
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	43db      	mvns	r3, r3
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	4013      	ands	r3, r2
 8004afa:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	2202      	movs	r2, #2
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	e067      	b.n	8004be4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d003      	beq.n	8004b24 <HAL_GPIO_Init+0x104>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b12      	cmp	r3, #18
 8004b22:	d145      	bne.n	8004bb0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	08da      	lsrs	r2, r3, #3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3208      	adds	r2, #8
 8004b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b30:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	220f      	movs	r2, #15
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	4013      	ands	r3, r2
 8004b46:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f003 020f 	and.w	r2, r3, #15
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	08da      	lsrs	r2, r3, #3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3208      	adds	r2, #8
 8004b6a:	69f9      	ldr	r1, [r7, #28]
 8004b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	43db      	mvns	r3, r3
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	4013      	ands	r3, r2
 8004b86:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 0203 	and.w	r2, r3, #3
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e01e      	b.n	8004be4 <HAL_GPIO_Init+0x1c4>
 8004ba6:	bf00      	nop
 8004ba8:	46020000 	.word	0x46020000
 8004bac:	0800d9e0 	.word	0x0800d9e0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	2203      	movs	r2, #3
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f003 0203 	and.w	r2, r3, #3
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d00b      	beq.n	8004c04 <HAL_GPIO_Init+0x1e4>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d007      	beq.n	8004c04 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bf8:	2b11      	cmp	r3, #17
 8004bfa:	d003      	beq.n	8004c04 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b12      	cmp	r3, #18
 8004c02:	d130      	bne.n	8004c66 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	2203      	movs	r2, #3
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	43db      	mvns	r3, r3
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	43db      	mvns	r3, r3
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	4013      	ands	r3, r2
 8004c48:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	091b      	lsrs	r3, r3, #4
 8004c50:	f003 0201 	and.w	r2, r3, #1
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	69fa      	ldr	r2, [r7, #28]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	69fa      	ldr	r2, [r7, #28]
 8004c64:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d017      	beq.n	8004c9e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	2203      	movs	r2, #3
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	4013      	ands	r3, r2
 8004c84:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	69fa      	ldr	r2, [r7, #28]
 8004c9c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d07c      	beq.n	8004da4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004caa:	4a47      	ldr	r2, [pc, #284]	@ (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	089b      	lsrs	r3, r3, #2
 8004cb0:	3318      	adds	r3, #24
 8004cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	220f      	movs	r2, #15
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	0a9a      	lsrs	r2, r3, #10
 8004cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8004dcc <HAL_GPIO_Init+0x3ac>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	f002 0203 	and.w	r2, r2, #3
 8004cdc:	00d2      	lsls	r2, r2, #3
 8004cde:	4093      	lsls	r3, r2
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004ce6:	4938      	ldr	r1, [pc, #224]	@ (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	089b      	lsrs	r3, r3, #2
 8004cec:	3318      	adds	r3, #24
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004cf4:	4b34      	ldr	r3, [pc, #208]	@ (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	4013      	ands	r3, r2
 8004d02:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004d18:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	43db      	mvns	r3, r3
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004d42:	4a21      	ldr	r2, [pc, #132]	@ (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004d48:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d4e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	43db      	mvns	r3, r3
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	4013      	ands	r3, r2
 8004d58:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004d6e:	4a16      	ldr	r2, [pc, #88]	@ (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004d76:	4b14      	ldr	r3, [pc, #80]	@ (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	4013      	ands	r3, r2
 8004d86:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc8 <HAL_GPIO_Init+0x3a8>)
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	3301      	adds	r3, #1
 8004da8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	fa22 f303 	lsr.w	r3, r2, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f47f ae3d 	bne.w	8004a34 <HAL_GPIO_Init+0x14>
  }
}
 8004dba:	bf00      	nop
 8004dbc:	bf00      	nop
 8004dbe:	3724      	adds	r7, #36	@ 0x24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	46022000 	.word	0x46022000
 8004dcc:	002f7f7f 	.word	0x002f7f7f

08004dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	807b      	strh	r3, [r7, #2]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004de0:	787b      	ldrb	r3, [r7, #1]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004de6:	887a      	ldrh	r2, [r7, #2]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004dec:	e002      	b.n	8004df4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004dee:	887a      	ldrh	r2, [r7, #2]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e01c      	b.n	8004e4c <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	795b      	ldrb	r3, [r3, #5]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d105      	bne.n	8004e26 <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fd f8a2 	bl	8001f64 <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	791b      	ldrb	r3, [r3, #4]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_GPU2D_Init+0x32>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e00c      	b.n	8004e4c <HAL_GPU2D_Init+0x4c>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	33f8      	adds	r3, #248	@ 0xf8
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d013      	beq.n	8004e98 <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	33f8      	adds	r3, #248	@ 0xf8
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f023 0201 	bic.w	r2, r3, #1
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 8004e90:	68f9      	ldr	r1, [r7, #12]
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f80f 	bl	8004eb6 <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 8004e98:	bf00      	nop
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f80f 	bl	8004ecc <HAL_GPU2D_ErrorCallback>
}
 8004eae:	bf00      	nop
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_GPU2D_CommandListCpltCallback>:
  *                the configuration information for the GPU2D.
  * @param  CmdListID Command list ID that got completed.
  * @retval None
  */
__weak void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	6039      	str	r1, [r7, #0]
  UNUSED(CmdListID);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_GPU2D_CommandListCpltCallback can be implemented in the user file.
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 8004ed4:	bf00      	nop
 8004ed6:	e7fd      	b.n	8004ed4 <HAL_GPU2D_ErrorCallback+0x8>

08004ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e08d      	b.n	8005006 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fd f870 	bl	8001fe4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2224      	movs	r2, #36	@ 0x24
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0201 	bic.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d107      	bne.n	8004f52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	e006      	b.n	8004f60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004f5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d108      	bne.n	8004f7a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f76:	605a      	str	r2, [r3, #4]
 8004f78:	e007      	b.n	8004f8a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6812      	ldr	r2, [r2, #0]
 8004f94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69d9      	ldr	r1, [r3, #28]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1a      	ldr	r2, [r3, #32]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af02      	add	r7, sp, #8
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	4608      	mov	r0, r1
 800501a:	4611      	mov	r1, r2
 800501c:	461a      	mov	r2, r3
 800501e:	4603      	mov	r3, r0
 8005020:	817b      	strh	r3, [r7, #10]
 8005022:	460b      	mov	r3, r1
 8005024:	813b      	strh	r3, [r7, #8]
 8005026:	4613      	mov	r3, r2
 8005028:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b20      	cmp	r3, #32
 8005034:	f040 80f9 	bne.w	800522a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <HAL_I2C_Mem_Write+0x34>
 800503e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	d105      	bne.n	8005050 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800504a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e0ed      	b.n	800522c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_I2C_Mem_Write+0x4e>
 800505a:	2302      	movs	r3, #2
 800505c:	e0e6      	b.n	800522c <HAL_I2C_Mem_Write+0x21c>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005066:	f7fe f81f 	bl	80030a8 <HAL_GetTick>
 800506a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	2319      	movs	r3, #25
 8005072:	2201      	movs	r2, #1
 8005074:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 fac3 	bl	8005604 <I2C_WaitOnFlagUntilTimeout>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0d1      	b.n	800522c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2221      	movs	r2, #33	@ 0x21
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2240      	movs	r2, #64	@ 0x40
 8005094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a3a      	ldr	r2, [r7, #32]
 80050a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80050a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050b0:	88f8      	ldrh	r0, [r7, #6]
 80050b2:	893a      	ldrh	r2, [r7, #8]
 80050b4:	8979      	ldrh	r1, [r7, #10]
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	9301      	str	r3, [sp, #4]
 80050ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	4603      	mov	r3, r0
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 f9d3 	bl	800546c <I2C_RequestMemoryWrite>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e0a9      	b.n	800522c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2bff      	cmp	r3, #255	@ 0xff
 80050e0:	d90e      	bls.n	8005100 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	22ff      	movs	r2, #255	@ 0xff
 80050e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	8979      	ldrh	r1, [r7, #10]
 80050f0:	2300      	movs	r3, #0
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 fc3d 	bl	8005978 <I2C_TransferConfig>
 80050fe:	e00f      	b.n	8005120 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800510e:	b2da      	uxtb	r2, r3
 8005110:	8979      	ldrh	r1, [r7, #10]
 8005112:	2300      	movs	r3, #0
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 fc2c 	bl	8005978 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 fabc 	bl	80056a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e07b      	b.n	800522c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005138:	781a      	ldrb	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d034      	beq.n	80051d8 <HAL_I2C_Mem_Write+0x1c8>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005172:	2b00      	cmp	r3, #0
 8005174:	d130      	bne.n	80051d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517c:	2200      	movs	r2, #0
 800517e:	2180      	movs	r1, #128	@ 0x80
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 fa3f 	bl	8005604 <I2C_WaitOnFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e04d      	b.n	800522c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005194:	b29b      	uxth	r3, r3
 8005196:	2bff      	cmp	r3, #255	@ 0xff
 8005198:	d90e      	bls.n	80051b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	22ff      	movs	r2, #255	@ 0xff
 800519e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	8979      	ldrh	r1, [r7, #10]
 80051a8:	2300      	movs	r3, #0
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fbe1 	bl	8005978 <I2C_TransferConfig>
 80051b6:	e00f      	b.n	80051d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	8979      	ldrh	r1, [r7, #10]
 80051ca:	2300      	movs	r3, #0
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fbd0 	bl	8005978 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d19e      	bne.n	8005120 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 faa2 	bl	8005730 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e01a      	b.n	800522c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2220      	movs	r2, #32
 80051fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6859      	ldr	r1, [r3, #4]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	4b0a      	ldr	r3, [pc, #40]	@ (8005234 <HAL_I2C_Mem_Write+0x224>)
 800520a:	400b      	ands	r3, r1
 800520c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	e000      	b.n	800522c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800522a:	2302      	movs	r3, #2
  }
}
 800522c:	4618      	mov	r0, r3
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	fe00e800 	.word	0xfe00e800

08005238 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	4608      	mov	r0, r1
 8005242:	4611      	mov	r1, r2
 8005244:	461a      	mov	r2, r3
 8005246:	4603      	mov	r3, r0
 8005248:	817b      	strh	r3, [r7, #10]
 800524a:	460b      	mov	r3, r1
 800524c:	813b      	strh	r3, [r7, #8]
 800524e:	4613      	mov	r3, r2
 8005250:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b20      	cmp	r3, #32
 800525c:	f040 80fd 	bne.w	800545a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <HAL_I2C_Mem_Read+0x34>
 8005266:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005268:	2b00      	cmp	r3, #0
 800526a:	d105      	bne.n	8005278 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005272:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0f1      	b.n	800545c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_I2C_Mem_Read+0x4e>
 8005282:	2302      	movs	r3, #2
 8005284:	e0ea      	b.n	800545c <HAL_I2C_Mem_Read+0x224>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800528e:	f7fd ff0b 	bl	80030a8 <HAL_GetTick>
 8005292:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	2319      	movs	r3, #25
 800529a:	2201      	movs	r2, #1
 800529c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 f9af 	bl	8005604 <I2C_WaitOnFlagUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0d5      	b.n	800545c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2222      	movs	r2, #34	@ 0x22
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2240      	movs	r2, #64	@ 0x40
 80052bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a3a      	ldr	r2, [r7, #32]
 80052ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80052d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052d8:	88f8      	ldrh	r0, [r7, #6]
 80052da:	893a      	ldrh	r2, [r7, #8]
 80052dc:	8979      	ldrh	r1, [r7, #10]
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	9301      	str	r3, [sp, #4]
 80052e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	4603      	mov	r3, r0
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 f913 	bl	8005514 <I2C_RequestMemoryRead>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d005      	beq.n	8005300 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0ad      	b.n	800545c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005304:	b29b      	uxth	r3, r3
 8005306:	2bff      	cmp	r3, #255	@ 0xff
 8005308:	d90e      	bls.n	8005328 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	22ff      	movs	r2, #255	@ 0xff
 800530e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005314:	b2da      	uxtb	r2, r3
 8005316:	8979      	ldrh	r1, [r7, #10]
 8005318:	4b52      	ldr	r3, [pc, #328]	@ (8005464 <HAL_I2C_Mem_Read+0x22c>)
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 fb29 	bl	8005978 <I2C_TransferConfig>
 8005326:	e00f      	b.n	8005348 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005336:	b2da      	uxtb	r2, r3
 8005338:	8979      	ldrh	r1, [r7, #10]
 800533a:	4b4a      	ldr	r3, [pc, #296]	@ (8005464 <HAL_I2C_Mem_Read+0x22c>)
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 fb18 	bl	8005978 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	2200      	movs	r2, #0
 8005350:	2104      	movs	r1, #4
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 f956 	bl	8005604 <I2C_WaitOnFlagUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e07c      	b.n	800545c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d034      	beq.n	8005408 <HAL_I2C_Mem_Read+0x1d0>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d130      	bne.n	8005408 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ac:	2200      	movs	r2, #0
 80053ae:	2180      	movs	r1, #128	@ 0x80
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f927 	bl	8005604 <I2C_WaitOnFlagUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e04d      	b.n	800545c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2bff      	cmp	r3, #255	@ 0xff
 80053c8:	d90e      	bls.n	80053e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	22ff      	movs	r2, #255	@ 0xff
 80053ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	8979      	ldrh	r1, [r7, #10]
 80053d8:	2300      	movs	r3, #0
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 fac9 	bl	8005978 <I2C_TransferConfig>
 80053e6:	e00f      	b.n	8005408 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	8979      	ldrh	r1, [r7, #10]
 80053fa:	2300      	movs	r3, #0
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 fab8 	bl	8005978 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d19a      	bne.n	8005348 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f98a 	bl	8005730 <I2C_WaitOnSTOPFlagUntilTimeout>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e01a      	b.n	800545c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2220      	movs	r2, #32
 800542c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6859      	ldr	r1, [r3, #4]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	4b0b      	ldr	r3, [pc, #44]	@ (8005468 <HAL_I2C_Mem_Read+0x230>)
 800543a:	400b      	ands	r3, r1
 800543c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	e000      	b.n	800545c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800545a:	2302      	movs	r3, #2
  }
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	80002400 	.word	0x80002400
 8005468:	fe00e800 	.word	0xfe00e800

0800546c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af02      	add	r7, sp, #8
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	4608      	mov	r0, r1
 8005476:	4611      	mov	r1, r2
 8005478:	461a      	mov	r2, r3
 800547a:	4603      	mov	r3, r0
 800547c:	817b      	strh	r3, [r7, #10]
 800547e:	460b      	mov	r3, r1
 8005480:	813b      	strh	r3, [r7, #8]
 8005482:	4613      	mov	r3, r2
 8005484:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005486:	88fb      	ldrh	r3, [r7, #6]
 8005488:	b2da      	uxtb	r2, r3
 800548a:	8979      	ldrh	r1, [r7, #10]
 800548c:	4b20      	ldr	r3, [pc, #128]	@ (8005510 <I2C_RequestMemoryWrite+0xa4>)
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 fa6f 	bl	8005978 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800549a:	69fa      	ldr	r2, [r7, #28]
 800549c:	69b9      	ldr	r1, [r7, #24]
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 f8ff 	bl	80056a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e02c      	b.n	8005508 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d105      	bne.n	80054c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054b4:	893b      	ldrh	r3, [r7, #8]
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80054be:	e015      	b.n	80054ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80054c0:	893b      	ldrh	r3, [r7, #8]
 80054c2:	0a1b      	lsrs	r3, r3, #8
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	69b9      	ldr	r1, [r7, #24]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f8e5 	bl	80056a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e012      	b.n	8005508 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054e2:	893b      	ldrh	r3, [r7, #8]
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2200      	movs	r2, #0
 80054f4:	2180      	movs	r1, #128	@ 0x80
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f884 	bl	8005604 <I2C_WaitOnFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e000      	b.n	8005508 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	80002000 	.word	0x80002000

08005514 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af02      	add	r7, sp, #8
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	4608      	mov	r0, r1
 800551e:	4611      	mov	r1, r2
 8005520:	461a      	mov	r2, r3
 8005522:	4603      	mov	r3, r0
 8005524:	817b      	strh	r3, [r7, #10]
 8005526:	460b      	mov	r3, r1
 8005528:	813b      	strh	r3, [r7, #8]
 800552a:	4613      	mov	r3, r2
 800552c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	b2da      	uxtb	r2, r3
 8005532:	8979      	ldrh	r1, [r7, #10]
 8005534:	4b20      	ldr	r3, [pc, #128]	@ (80055b8 <I2C_RequestMemoryRead+0xa4>)
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	2300      	movs	r3, #0
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fa1c 	bl	8005978 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005540:	69fa      	ldr	r2, [r7, #28]
 8005542:	69b9      	ldr	r1, [r7, #24]
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 f8ac 	bl	80056a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e02c      	b.n	80055ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005554:	88fb      	ldrh	r3, [r7, #6]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d105      	bne.n	8005566 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800555a:	893b      	ldrh	r3, [r7, #8]
 800555c:	b2da      	uxtb	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	629a      	str	r2, [r3, #40]	@ 0x28
 8005564:	e015      	b.n	8005592 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005566:	893b      	ldrh	r3, [r7, #8]
 8005568:	0a1b      	lsrs	r3, r3, #8
 800556a:	b29b      	uxth	r3, r3
 800556c:	b2da      	uxtb	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	69b9      	ldr	r1, [r7, #24]
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 f892 	bl	80056a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e012      	b.n	80055ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005588:	893b      	ldrh	r3, [r7, #8]
 800558a:	b2da      	uxtb	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	2200      	movs	r2, #0
 800559a:	2140      	movs	r1, #64	@ 0x40
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f831 	bl	8005604 <I2C_WaitOnFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	80002000 	.word	0x80002000

080055bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d103      	bne.n	80055da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2200      	movs	r2, #0
 80055d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d007      	beq.n	80055f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	619a      	str	r2, [r3, #24]
  }
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	4613      	mov	r3, r2
 8005612:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005614:	e031      	b.n	800567a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561c:	d02d      	beq.n	800567a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561e:	f7fd fd43 	bl	80030a8 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d302      	bcc.n	8005634 <I2C_WaitOnFlagUntilTimeout+0x30>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d122      	bne.n	800567a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4013      	ands	r3, r2
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	429a      	cmp	r2, r3
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	461a      	mov	r2, r3
 800564c:	79fb      	ldrb	r3, [r7, #7]
 800564e:	429a      	cmp	r2, r3
 8005650:	d113      	bne.n	800567a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005656:	f043 0220 	orr.w	r2, r3, #32
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e00f      	b.n	800569a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699a      	ldr	r2, [r3, #24]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4013      	ands	r3, r2
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	429a      	cmp	r2, r3
 8005688:	bf0c      	ite	eq
 800568a:	2301      	moveq	r3, #1
 800568c:	2300      	movne	r3, #0
 800568e:	b2db      	uxtb	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	429a      	cmp	r2, r3
 8005696:	d0be      	beq.n	8005616 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056ae:	e033      	b.n	8005718 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 f87f 	bl	80057b8 <I2C_IsErrorOccurred>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e031      	b.n	8005728 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ca:	d025      	beq.n	8005718 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056cc:	f7fd fcec 	bl	80030a8 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d302      	bcc.n	80056e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d11a      	bne.n	8005718 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d013      	beq.n	8005718 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f4:	f043 0220 	orr.w	r2, r3, #32
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e007      	b.n	8005728 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b02      	cmp	r3, #2
 8005724:	d1c4      	bne.n	80056b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800573c:	e02f      	b.n	800579e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 f838 	bl	80057b8 <I2C_IsErrorOccurred>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e02d      	b.n	80057ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005752:	f7fd fca9 	bl	80030a8 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	429a      	cmp	r2, r3
 8005760:	d302      	bcc.n	8005768 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d11a      	bne.n	800579e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b20      	cmp	r3, #32
 8005774:	d013      	beq.n	800579e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800577a:	f043 0220 	orr.w	r2, r3, #32
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e007      	b.n	80057ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	d1c8      	bne.n	800573e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08a      	sub	sp, #40	@ 0x28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d068      	beq.n	80058b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2210      	movs	r2, #16
 80057ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057ec:	e049      	b.n	8005882 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f4:	d045      	beq.n	8005882 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057f6:	f7fd fc57 	bl	80030a8 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	429a      	cmp	r2, r3
 8005804:	d302      	bcc.n	800580c <I2C_IsErrorOccurred+0x54>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d13a      	bne.n	8005882 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005816:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800581e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800582a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800582e:	d121      	bne.n	8005874 <I2C_IsErrorOccurred+0xbc>
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005836:	d01d      	beq.n	8005874 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005838:	7cfb      	ldrb	r3, [r7, #19]
 800583a:	2b20      	cmp	r3, #32
 800583c:	d01a      	beq.n	8005874 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800584c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800584e:	f7fd fc2b 	bl	80030a8 <HAL_GetTick>
 8005852:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005854:	e00e      	b.n	8005874 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005856:	f7fd fc27 	bl	80030a8 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b19      	cmp	r3, #25
 8005862:	d907      	bls.n	8005874 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	f043 0320 	orr.w	r3, r3, #32
 800586a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005872:	e006      	b.n	8005882 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b20      	cmp	r3, #32
 8005880:	d1e9      	bne.n	8005856 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b20      	cmp	r3, #32
 800588e:	d003      	beq.n	8005898 <I2C_IsErrorOccurred+0xe0>
 8005890:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0aa      	beq.n	80057ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800589c:	2b00      	cmp	r3, #0
 800589e:	d103      	bne.n	80058a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2220      	movs	r2, #32
 80058a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	f043 0304 	orr.w	r3, r3, #4
 80058ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00b      	beq.n	80058e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	f043 0301 	orr.w	r3, r3, #1
 80058ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	f043 0308 	orr.w	r3, r3, #8
 80058f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80058fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00b      	beq.n	8005924 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	f043 0302 	orr.w	r3, r3, #2
 8005912:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800591c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01c      	beq.n	8005966 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f7ff fe45 	bl	80055bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6859      	ldr	r1, [r3, #4]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	4b0d      	ldr	r3, [pc, #52]	@ (8005974 <I2C_IsErrorOccurred+0x1bc>)
 800593e:	400b      	ands	r3, r1
 8005940:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	431a      	orrs	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2220      	movs	r2, #32
 8005952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005966:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800596a:	4618      	mov	r0, r3
 800596c:	3728      	adds	r7, #40	@ 0x28
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	fe00e800 	.word	0xfe00e800

08005978 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	607b      	str	r3, [r7, #4]
 8005982:	460b      	mov	r3, r1
 8005984:	817b      	strh	r3, [r7, #10]
 8005986:	4613      	mov	r3, r2
 8005988:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800598a:	897b      	ldrh	r3, [r7, #10]
 800598c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005990:	7a7b      	ldrb	r3, [r7, #9]
 8005992:	041b      	lsls	r3, r3, #16
 8005994:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005998:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	0d5b      	lsrs	r3, r3, #21
 80059b2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80059b6:	4b08      	ldr	r3, [pc, #32]	@ (80059d8 <I2C_TransferConfig+0x60>)
 80059b8:	430b      	orrs	r3, r1
 80059ba:	43db      	mvns	r3, r3
 80059bc:	ea02 0103 	and.w	r1, r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	03ff63ff 	.word	0x03ff63ff

080059dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b20      	cmp	r3, #32
 80059f0:	d138      	bne.n	8005a64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e032      	b.n	8005a66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2224      	movs	r2, #36	@ 0x24
 8005a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0201 	bic.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6819      	ldr	r1, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	e000      	b.n	8005a66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a64:	2302      	movs	r3, #2
  }
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b085      	sub	sp, #20
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d139      	bne.n	8005afc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e033      	b.n	8005afe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2224      	movs	r2, #36	@ 0x24
 8005aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 0201 	bic.w	r2, r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ac4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0201 	orr.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	e000      	b.n	8005afe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005afc:	2302      	movs	r3, #2
  }
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
	...

08005b0c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005b10:	4b05      	ldr	r3, [pc, #20]	@ (8005b28 <HAL_ICACHE_Enable+0x1c>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a04      	ldr	r2, [pc, #16]	@ (8005b28 <HAL_ICACHE_Enable+0x1c>)
 8005b16:	f043 0301 	orr.w	r3, r3, #1
 8005b1a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	40030400 	.word	0x40030400

08005b2c <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8005b36:	4b14      	ldr	r3, [pc, #80]	@ (8005b88 <HAL_ICACHE_Disable+0x5c>)
 8005b38:	2202      	movs	r2, #2
 8005b3a:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005b3c:	4b12      	ldr	r3, [pc, #72]	@ (8005b88 <HAL_ICACHE_Disable+0x5c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a11      	ldr	r2, [pc, #68]	@ (8005b88 <HAL_ICACHE_Disable+0x5c>)
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b48:	f7fd faae 	bl	80030a8 <HAL_GetTick>
 8005b4c:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005b4e:	e00f      	b.n	8005b70 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8005b50:	f7fd faaa 	bl	80030a8 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d908      	bls.n	8005b70 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b88 <HAL_ICACHE_Disable+0x5c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	71fb      	strb	r3, [r7, #7]
        break;
 8005b6e:	e005      	b.n	8005b7c <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005b70:	4b05      	ldr	r3, [pc, #20]	@ (8005b88 <HAL_ICACHE_Disable+0x5c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e9      	bne.n	8005b50 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8005b7c:	79fb      	ldrb	r3, [r7, #7]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40030400 	.word	0x40030400

08005b8c <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005b9a:	4b22      	ldr	r3, [pc, #136]	@ (8005c24 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	75fb      	strb	r3, [r7, #23]
 8005baa:	e034      	b.n	8005c16 <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	009a      	lsls	r2, r3, #2
 8005bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8005c28 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8005bb2:	4413      	add	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	75fb      	strb	r3, [r7, #23]
 8005bc6:	e026      	b.n	8005c16 <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	425b      	negs	r3, r3
 8005be6:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8005be8:	401a      	ands	r2, r3
 8005bea:	4b10      	ldr	r3, [pc, #64]	@ (8005c2c <HAL_ICACHE_EnableRemapRegion+0xa0>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	025a      	lsls	r2, r3, #9
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8005c04:	4313      	orrs	r3, r2
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	371c      	adds	r7, #28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	40030400 	.word	0x40030400
 8005c28:	40030420 	.word	0x40030420
 8005c2c:	07ff0000 	.word	0x07ff0000

08005c30 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e0bf      	b.n	8005dc2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d106      	bne.n	8005c5c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fc fd70 	bl	800273c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005c72:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6999      	ldr	r1, [r3, #24]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c88:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6899      	ldr	r1, [r3, #8]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8005dcc <HAL_LTDC_Init+0x19c>)
 8005ca4:	400b      	ands	r3, r1
 8005ca6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	041b      	lsls	r3, r3, #16
 8005cae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6899      	ldr	r1, [r3, #8]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	699a      	ldr	r2, [r3, #24]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68d9      	ldr	r1, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	4b3e      	ldr	r3, [pc, #248]	@ (8005dcc <HAL_LTDC_Init+0x19c>)
 8005cd2:	400b      	ands	r3, r1
 8005cd4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	041b      	lsls	r3, r3, #16
 8005cdc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68d9      	ldr	r1, [r3, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a1a      	ldr	r2, [r3, #32]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	431a      	orrs	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6919      	ldr	r1, [r3, #16]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4b33      	ldr	r3, [pc, #204]	@ (8005dcc <HAL_LTDC_Init+0x19c>)
 8005d00:	400b      	ands	r3, r1
 8005d02:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d08:	041b      	lsls	r3, r3, #16
 8005d0a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6919      	ldr	r1, [r3, #16]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6959      	ldr	r1, [r3, #20]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	4b27      	ldr	r3, [pc, #156]	@ (8005dcc <HAL_LTDC_Init+0x19c>)
 8005d2e:	400b      	ands	r3, r1
 8005d30:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d36:	041b      	lsls	r3, r3, #16
 8005d38:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6959      	ldr	r1, [r3, #20]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d56:	021b      	lsls	r3, r3, #8
 8005d58:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005d60:	041b      	lsls	r3, r3, #16
 8005d62:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005d72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0206 	orr.w	r2, r2, #6
 8005d9e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0201 	orr.w	r2, r2, #1
 8005dae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	f000f800 	.word	0xf000f800

08005dd0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dde:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d023      	beq.n	8005e3a <HAL_LTDC_IRQHandler+0x6a>
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d01e      	beq.n	8005e3a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0204 	bic.w	r2, r2, #4
 8005e0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2204      	movs	r2, #4
 8005e12:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e1a:	f043 0201 	orr.w	r2, r3, #1
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2204      	movs	r2, #4
 8005e28:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f86f 	bl	8005f18 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d023      	beq.n	8005e8c <HAL_LTDC_IRQHandler+0xbc>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d01e      	beq.n	8005e8c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0202 	bic.w	r2, r2, #2
 8005e5c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2202      	movs	r2, #2
 8005e64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e6c:	f043 0202 	orr.w	r2, r3, #2
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2204      	movs	r2, #4
 8005e7a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f846 	bl	8005f18 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d01b      	beq.n	8005ece <HAL_LTDC_IRQHandler+0xfe>
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d016      	beq.n	8005ece <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0201 	bic.w	r2, r2, #1
 8005eae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f82f 	bl	8005f2c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01b      	beq.n	8005f10 <HAL_LTDC_IRQHandler+0x140>
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d016      	beq.n	8005f10 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0208 	bic.w	r2, r2, #8
 8005ef0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2208      	movs	r2, #8
 8005ef8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f818 	bl	8005f40 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005f10:	bf00      	nop
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f54:	b5b0      	push	{r4, r5, r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d101      	bne.n	8005f6e <HAL_LTDC_ConfigLayer+0x1a>
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	e02c      	b.n	8005fc8 <HAL_LTDC_ConfigLayer+0x74>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2134      	movs	r1, #52	@ 0x34
 8005f84:	fb01 f303 	mul.w	r3, r1, r3
 8005f88:	4413      	add	r3, r2
 8005f8a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	4614      	mov	r4, r2
 8005f92:	461d      	mov	r5, r3
 8005f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 f811 	bl	8005fd0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bdb0      	pop	{r4, r5, r7, pc}

08005fd0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b089      	sub	sp, #36	@ 0x24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	0c1b      	lsrs	r3, r3, #16
 8005fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fec:	4413      	add	r3, r2
 8005fee:	041b      	lsls	r3, r3, #16
 8005ff0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	01db      	lsls	r3, r3, #7
 8005ffc:	4413      	add	r3, r2
 8005ffe:	3384      	adds	r3, #132	@ 0x84
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	6812      	ldr	r2, [r2, #0]
 8006006:	4611      	mov	r1, r2
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	01d2      	lsls	r2, r2, #7
 800600c:	440a      	add	r2, r1
 800600e:	3284      	adds	r2, #132	@ 0x84
 8006010:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8006014:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	0c1b      	lsrs	r3, r3, #16
 8006022:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006026:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006028:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4619      	mov	r1, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	01db      	lsls	r3, r3, #7
 8006034:	440b      	add	r3, r1
 8006036:	3384      	adds	r3, #132	@ 0x84
 8006038:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800603e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800604e:	4413      	add	r3, r2
 8006050:	041b      	lsls	r3, r3, #16
 8006052:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	01db      	lsls	r3, r3, #7
 800605e:	4413      	add	r3, r2
 8006060:	3384      	adds	r3, #132	@ 0x84
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	6812      	ldr	r2, [r2, #0]
 8006068:	4611      	mov	r1, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	01d2      	lsls	r2, r2, #7
 800606e:	440a      	add	r2, r1
 8006070:	3284      	adds	r2, #132	@ 0x84
 8006072:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8006076:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006086:	4413      	add	r3, r2
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4619      	mov	r1, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	01db      	lsls	r3, r3, #7
 8006094:	440b      	add	r3, r1
 8006096:	3384      	adds	r3, #132	@ 0x84
 8006098:	4619      	mov	r1, r3
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4313      	orrs	r3, r2
 800609e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	461a      	mov	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	01db      	lsls	r3, r3, #7
 80060aa:	4413      	add	r3, r2
 80060ac:	3384      	adds	r3, #132	@ 0x84
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	6812      	ldr	r2, [r2, #0]
 80060b4:	4611      	mov	r1, r2
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	01d2      	lsls	r2, r2, #7
 80060ba:	440a      	add	r2, r1
 80060bc:	3284      	adds	r2, #132	@ 0x84
 80060be:	f023 0307 	bic.w	r3, r3, #7
 80060c2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	01db      	lsls	r3, r3, #7
 80060ce:	4413      	add	r3, r2
 80060d0:	3384      	adds	r3, #132	@ 0x84
 80060d2:	461a      	mov	r2, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80060e0:	021b      	lsls	r3, r3, #8
 80060e2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80060ea:	041b      	lsls	r3, r3, #16
 80060ec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	061b      	lsls	r3, r3, #24
 80060f4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	01db      	lsls	r3, r3, #7
 8006100:	4413      	add	r3, r2
 8006102:	3384      	adds	r3, #132	@ 0x84
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	01db      	lsls	r3, r3, #7
 8006110:	4413      	add	r3, r2
 8006112:	3384      	adds	r3, #132	@ 0x84
 8006114:	461a      	mov	r2, r3
 8006116:	2300      	movs	r3, #0
 8006118:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006120:	461a      	mov	r2, r3
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	431a      	orrs	r2, r3
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	431a      	orrs	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4619      	mov	r1, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	01db      	lsls	r3, r3, #7
 8006134:	440b      	add	r3, r1
 8006136:	3384      	adds	r3, #132	@ 0x84
 8006138:	4619      	mov	r1, r3
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	4313      	orrs	r3, r2
 800613e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	461a      	mov	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	01db      	lsls	r3, r3, #7
 800614a:	4413      	add	r3, r2
 800614c:	3384      	adds	r3, #132	@ 0x84
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	6812      	ldr	r2, [r2, #0]
 8006154:	4611      	mov	r1, r2
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	01d2      	lsls	r2, r2, #7
 800615a:	440a      	add	r2, r1
 800615c:	3284      	adds	r2, #132	@ 0x84
 800615e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006162:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	01db      	lsls	r3, r3, #7
 800616e:	4413      	add	r3, r2
 8006170:	3384      	adds	r3, #132	@ 0x84
 8006172:	461a      	mov	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	01db      	lsls	r3, r3, #7
 8006184:	4413      	add	r3, r2
 8006186:	3384      	adds	r3, #132	@ 0x84
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	4611      	mov	r1, r2
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	01d2      	lsls	r2, r2, #7
 8006194:	440a      	add	r2, r1
 8006196:	3284      	adds	r2, #132	@ 0x84
 8006198:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800619c:	f023 0307 	bic.w	r3, r3, #7
 80061a0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	69da      	ldr	r2, [r3, #28]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	68f9      	ldr	r1, [r7, #12]
 80061ac:	6809      	ldr	r1, [r1, #0]
 80061ae:	4608      	mov	r0, r1
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	01c9      	lsls	r1, r1, #7
 80061b4:	4401      	add	r1, r0
 80061b6:	3184      	adds	r1, #132	@ 0x84
 80061b8:	4313      	orrs	r3, r2
 80061ba:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	01db      	lsls	r3, r3, #7
 80061c6:	4413      	add	r3, r2
 80061c8:	3384      	adds	r3, #132	@ 0x84
 80061ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	461a      	mov	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	01db      	lsls	r3, r3, #7
 80061d6:	4413      	add	r3, r2
 80061d8:	3384      	adds	r3, #132	@ 0x84
 80061da:	461a      	mov	r2, r3
 80061dc:	2300      	movs	r3, #0
 80061de:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	461a      	mov	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	01db      	lsls	r3, r3, #7
 80061ea:	4413      	add	r3, r2
 80061ec:	3384      	adds	r3, #132	@ 0x84
 80061ee:	461a      	mov	r2, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d102      	bne.n	8006204 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80061fe:	2304      	movs	r3, #4
 8006200:	61fb      	str	r3, [r7, #28]
 8006202:	e01b      	b.n	800623c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d102      	bne.n	8006212 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800620c:	2303      	movs	r3, #3
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	e014      	b.n	800623c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	2b04      	cmp	r3, #4
 8006218:	d00b      	beq.n	8006232 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800621e:	2b02      	cmp	r3, #2
 8006220:	d007      	beq.n	8006232 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006226:	2b03      	cmp	r3, #3
 8006228:	d003      	beq.n	8006232 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800622e:	2b07      	cmp	r3, #7
 8006230:	d102      	bne.n	8006238 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006232:	2302      	movs	r3, #2
 8006234:	61fb      	str	r3, [r7, #28]
 8006236:	e001      	b.n	800623c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006238:	2301      	movs	r3, #1
 800623a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	461a      	mov	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	01db      	lsls	r3, r3, #7
 8006246:	4413      	add	r3, r2
 8006248:	3384      	adds	r3, #132	@ 0x84
 800624a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	6812      	ldr	r2, [r2, #0]
 8006250:	4611      	mov	r1, r2
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	01d2      	lsls	r2, r2, #7
 8006256:	440a      	add	r2, r1
 8006258:	3284      	adds	r2, #132	@ 0x84
 800625a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800625e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006264:	69fa      	ldr	r2, [r7, #28]
 8006266:	fb02 f303 	mul.w	r3, r2, r3
 800626a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	6859      	ldr	r1, [r3, #4]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	1acb      	subs	r3, r1, r3
 8006276:	69f9      	ldr	r1, [r7, #28]
 8006278:	fb01 f303 	mul.w	r3, r1, r3
 800627c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800627e:	68f9      	ldr	r1, [r7, #12]
 8006280:	6809      	ldr	r1, [r1, #0]
 8006282:	4608      	mov	r0, r1
 8006284:	6879      	ldr	r1, [r7, #4]
 8006286:	01c9      	lsls	r1, r1, #7
 8006288:	4401      	add	r1, r0
 800628a:	3184      	adds	r1, #132	@ 0x84
 800628c:	4313      	orrs	r3, r2
 800628e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	461a      	mov	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	01db      	lsls	r3, r3, #7
 800629a:	4413      	add	r3, r2
 800629c:	3384      	adds	r3, #132	@ 0x84
 800629e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	6812      	ldr	r2, [r2, #0]
 80062a4:	4611      	mov	r1, r2
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	01d2      	lsls	r2, r2, #7
 80062aa:	440a      	add	r2, r1
 80062ac:	3284      	adds	r2, #132	@ 0x84
 80062ae:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80062b2:	f023 0307 	bic.w	r3, r3, #7
 80062b6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	461a      	mov	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	01db      	lsls	r3, r3, #7
 80062c2:	4413      	add	r3, r2
 80062c4:	3384      	adds	r3, #132	@ 0x84
 80062c6:	461a      	mov	r2, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062cc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	01db      	lsls	r3, r3, #7
 80062d8:	4413      	add	r3, r2
 80062da:	3384      	adds	r3, #132	@ 0x84
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	6812      	ldr	r2, [r2, #0]
 80062e2:	4611      	mov	r1, r2
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	01d2      	lsls	r2, r2, #7
 80062e8:	440a      	add	r2, r1
 80062ea:	3284      	adds	r2, #132	@ 0x84
 80062ec:	f043 0301 	orr.w	r3, r3, #1
 80062f0:	6013      	str	r3, [r2, #0]
}
 80062f2:	bf00      	nop
 80062f4:	3724      	adds	r7, #36	@ 0x24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
	...

08006300 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d102      	bne.n	8006318 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	73fb      	strb	r3, [r7, #15]
 8006316:	e141      	b.n	800659c <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4618      	mov	r0, r3
 800631e:	f000 f947 	bl	80065b0 <MDF_GetHandleNumberFromInstance>
 8006322:	4603      	mov	r3, r0
 8006324:	4a86      	ldr	r2, [pc, #536]	@ (8006540 <HAL_MDF_Init+0x240>)
 8006326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	73fb      	strb	r3, [r7, #15]
 8006332:	e133      	b.n	800659c <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7fb fc6b 	bl	8001c10 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 800633a:	4b82      	ldr	r3, [pc, #520]	@ (8006544 <HAL_MDF_Init+0x244>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d11d      	bne.n	800637e <HAL_MDF_Init+0x7e>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a80      	ldr	r2, [pc, #512]	@ (8006548 <HAL_MDF_Init+0x248>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d023      	beq.n	8006394 <HAL_MDF_Init+0x94>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a7e      	ldr	r2, [pc, #504]	@ (800654c <HAL_MDF_Init+0x24c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d01e      	beq.n	8006394 <HAL_MDF_Init+0x94>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a7d      	ldr	r2, [pc, #500]	@ (8006550 <HAL_MDF_Init+0x250>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d019      	beq.n	8006394 <HAL_MDF_Init+0x94>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a7b      	ldr	r2, [pc, #492]	@ (8006554 <HAL_MDF_Init+0x254>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d014      	beq.n	8006394 <HAL_MDF_Init+0x94>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a7a      	ldr	r2, [pc, #488]	@ (8006558 <HAL_MDF_Init+0x258>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00f      	beq.n	8006394 <HAL_MDF_Init+0x94>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a78      	ldr	r2, [pc, #480]	@ (800655c <HAL_MDF_Init+0x25c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00a      	beq.n	8006394 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 800637e:	4b78      	ldr	r3, [pc, #480]	@ (8006560 <HAL_MDF_Init+0x260>)
 8006380:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8006382:	2b00      	cmp	r3, #0
 8006384:	f040 8090 	bne.w	80064a8 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a75      	ldr	r2, [pc, #468]	@ (8006564 <HAL_MDF_Init+0x264>)
 800638e:	4293      	cmp	r3, r2
 8006390:	f040 808a 	bne.w	80064a8 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a72      	ldr	r2, [pc, #456]	@ (8006564 <HAL_MDF_Init+0x264>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d101      	bne.n	80063a2 <HAL_MDF_Init+0xa2>
 800639e:	4b72      	ldr	r3, [pc, #456]	@ (8006568 <HAL_MDF_Init+0x268>)
 80063a0:	e000      	b.n	80063a4 <HAL_MDF_Init+0xa4>
 80063a2:	4b72      	ldr	r3, [pc, #456]	@ (800656c <HAL_MDF_Init+0x26c>)
 80063a4:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	da02      	bge.n	80063b4 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	73fb      	strb	r3, [r7, #15]
 80063b2:	e079      	b.n	80064a8 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a63      	ldr	r2, [pc, #396]	@ (8006548 <HAL_MDF_Init+0x248>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d018      	beq.n	80063f0 <HAL_MDF_Init+0xf0>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a62      	ldr	r2, [pc, #392]	@ (800654c <HAL_MDF_Init+0x24c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d013      	beq.n	80063f0 <HAL_MDF_Init+0xf0>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a60      	ldr	r2, [pc, #384]	@ (8006550 <HAL_MDF_Init+0x250>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00e      	beq.n	80063f0 <HAL_MDF_Init+0xf0>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a5f      	ldr	r2, [pc, #380]	@ (8006554 <HAL_MDF_Init+0x254>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d009      	beq.n	80063f0 <HAL_MDF_Init+0xf0>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a5d      	ldr	r2, [pc, #372]	@ (8006558 <HAL_MDF_Init+0x258>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <HAL_MDF_Init+0xf0>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a5c      	ldr	r2, [pc, #368]	@ (800655c <HAL_MDF_Init+0x25c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d10d      	bne.n	800640c <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	011b      	lsls	r3, r3, #4
 8006406:	431a      	orrs	r2, r3
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2200      	movs	r2, #0
 8006410:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	3b01      	subs	r3, #1
 800641c:	061b      	lsls	r3, r3, #24
 800641e:	431a      	orrs	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	7b1b      	ldrb	r3, [r3, #12]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d137      	bne.n	800649c <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	3b01      	subs	r3, #1
 8006436:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 800643c:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8006444:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006446:	431a      	orrs	r2, r3
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	7e1b      	ldrb	r3, [r3, #24]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d123      	bne.n	800649c <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a3b      	ldr	r2, [pc, #236]	@ (8006548 <HAL_MDF_Init+0x248>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d012      	beq.n	8006484 <HAL_MDF_Init+0x184>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a3a      	ldr	r2, [pc, #232]	@ (800654c <HAL_MDF_Init+0x24c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00d      	beq.n	8006484 <HAL_MDF_Init+0x184>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a38      	ldr	r2, [pc, #224]	@ (8006550 <HAL_MDF_Init+0x250>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d008      	beq.n	8006484 <HAL_MDF_Init+0x184>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a37      	ldr	r2, [pc, #220]	@ (8006554 <HAL_MDF_Init+0x254>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d003      	beq.n	8006484 <HAL_MDF_Init+0x184>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a35      	ldr	r2, [pc, #212]	@ (8006558 <HAL_MDF_Init+0x258>)
 8006482:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006490:	430b      	orrs	r3, r1
 8006492:	4313      	orrs	r3, r2
 8006494:	f043 0210 	orr.w	r2, r3, #16
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f043 0201 	orr.w	r2, r3, #1
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d128      	bne.n	8006500 <HAL_MDF_Init+0x200>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d123      	bne.n	8006500 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	da02      	bge.n	80064c8 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	73fb      	strb	r3, [r7, #15]
 80064c6:	e01b      	b.n	8006500 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6819      	ldr	r1, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064da:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80064e0:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e6:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0201 	orr.w	r2, r2, #1
 80064fe:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d14a      	bne.n	800659c <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 021f 	bic.w	r2, r2, #31
 8006514:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6859      	ldr	r1, [r3, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a0d      	ldr	r2, [pc, #52]	@ (8006564 <HAL_MDF_Init+0x264>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d11e      	bne.n	8006570 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8006532:	4b0b      	ldr	r3, [pc, #44]	@ (8006560 <HAL_MDF_Init+0x260>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3301      	adds	r3, #1
 8006538:	4a09      	ldr	r2, [pc, #36]	@ (8006560 <HAL_MDF_Init+0x260>)
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	e01d      	b.n	800657a <HAL_MDF_Init+0x27a>
 800653e:	bf00      	nop
 8006540:	2000151c 	.word	0x2000151c
 8006544:	20001514 	.word	0x20001514
 8006548:	40025080 	.word	0x40025080
 800654c:	40025100 	.word	0x40025100
 8006550:	40025180 	.word	0x40025180
 8006554:	40025200 	.word	0x40025200
 8006558:	40025280 	.word	0x40025280
 800655c:	40025300 	.word	0x40025300
 8006560:	20001518 	.word	0x20001518
 8006564:	46024080 	.word	0x46024080
 8006568:	46024000 	.word	0x46024000
 800656c:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8006570:	4b0d      	ldr	r3, [pc, #52]	@ (80065a8 <HAL_MDF_Init+0x2a8>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3301      	adds	r3, #1
 8006576:	4a0c      	ldr	r2, [pc, #48]	@ (80065a8 <HAL_MDF_Init+0x2a8>)
 8006578:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f000 f816 	bl	80065b0 <MDF_GetHandleNumberFromInstance>
 8006584:	4602      	mov	r2, r0
 8006586:	4909      	ldr	r1, [pc, #36]	@ (80065ac <HAL_MDF_Init+0x2ac>)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	641a      	str	r2, [r3, #64]	@ 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 800659c:	7bfb      	ldrb	r3, [r7, #15]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20001514 	.word	0x20001514
 80065ac:	2000151c 	.word	0x2000151c

080065b0 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a19      	ldr	r2, [pc, #100]	@ (8006620 <MDF_GetHandleNumberFromInstance+0x70>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d102      	bne.n	80065c6 <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	e024      	b.n	8006610 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a16      	ldr	r2, [pc, #88]	@ (8006624 <MDF_GetHandleNumberFromInstance+0x74>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d102      	bne.n	80065d4 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 80065ce:	2301      	movs	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	e01d      	b.n	8006610 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a14      	ldr	r2, [pc, #80]	@ (8006628 <MDF_GetHandleNumberFromInstance+0x78>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d102      	bne.n	80065e2 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 80065dc:	2302      	movs	r3, #2
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	e016      	b.n	8006610 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a11      	ldr	r2, [pc, #68]	@ (800662c <MDF_GetHandleNumberFromInstance+0x7c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d102      	bne.n	80065f0 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 80065ea:	2303      	movs	r3, #3
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	e00f      	b.n	8006610 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a0f      	ldr	r2, [pc, #60]	@ (8006630 <MDF_GetHandleNumberFromInstance+0x80>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d102      	bne.n	80065fe <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 80065f8:	2304      	movs	r3, #4
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	e008      	b.n	8006610 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a0c      	ldr	r2, [pc, #48]	@ (8006634 <MDF_GetHandleNumberFromInstance+0x84>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d102      	bne.n	800660c <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8006606:	2305      	movs	r3, #5
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	e001      	b.n	8006610 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 800660c:	2306      	movs	r3, #6
 800660e:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8006610:	68fb      	ldr	r3, [r7, #12]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40025080 	.word	0x40025080
 8006624:	40025100 	.word	0x40025100
 8006628:	40025180 	.word	0x40025180
 800662c:	40025200 	.word	0x40025200
 8006630:	40025280 	.word	0x40025280
 8006634:	40025300 	.word	0x40025300

08006638 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f043 0201 	orr.w	r2, r3, #1
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	601a      	str	r2, [r3, #0]
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af02      	add	r7, sp, #8
 800665e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006664:	f7fc fd20 	bl	80030a8 <HAL_GetTick>
 8006668:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d102      	bne.n	8006676 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	73fb      	strb	r3, [r7, #15]
 8006674:	e0a5      	b.n	80067c2 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006680:	2b00      	cmp	r3, #0
 8006682:	f040 809e 	bne.w	80067c2 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7fc f8ae 	bl	80027e8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800668c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f951 	bl	8006938 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	4b4b      	ldr	r3, [pc, #300]	@ (80067cc <HAL_OSPI_Init+0x174>)
 800669e:	4013      	ands	r3, r2
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	68d1      	ldr	r1, [r2, #12]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6912      	ldr	r2, [r2, #16]
 80066a8:	3a01      	subs	r2, #1
 80066aa:	0412      	lsls	r2, r2, #16
 80066ac:	4311      	orrs	r1, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6952      	ldr	r2, [r2, #20]
 80066b2:	3a01      	subs	r2, #1
 80066b4:	0212      	lsls	r2, r2, #8
 80066b6:	4311      	orrs	r1, r2
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80066bc:	4311      	orrs	r1, r2
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	69d2      	ldr	r2, [r2, #28]
 80066c2:	4311      	orrs	r1, r2
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	6812      	ldr	r2, [r2, #0]
 80066c8:	430b      	orrs	r3, r1
 80066ca:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1a      	ldr	r2, [r3, #32]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80066fc:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	3b01      	subs	r3, #1
 800670e:	021a      	lsls	r2, r3, #8
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2200      	movs	r2, #0
 8006722:	2120      	movs	r1, #32
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fe09 	bl	800733c <OSPI_WaitFlagStateUntilTimeout>
 800672a:	4603      	mov	r3, r0
 800672c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d146      	bne.n	80067c2 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006742:	1e5a      	subs	r2, r3, #1
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800676a:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 0201 	orr.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	2b02      	cmp	r3, #2
 8006798:	d107      	bne.n	80067aa <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0202 	orr.w	r2, r2, #2
 80067a8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067b2:	d103      	bne.n	80067bc <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80067ba:	e002      	b.n	80067c2 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	f8e0c0f4 	.word	0xf8e0c0f4

080067d0 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08a      	sub	sp, #40	@ 0x28
 80067d4:	af02      	add	r7, sp, #8
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80067dc:	f7fc fc64 	bl	80030a8 <HAL_GetTick>
 80067e0:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067e6:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d002      	beq.n	80067f4 <HAL_OSPI_HyperbusCfg+0x24>
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d122      	bne.n	800683a <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	2200      	movs	r2, #0
 80067fc:	2120      	movs	r1, #32
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 fd9c 	bl	800733c <OSPI_WaitFlagStateUntilTimeout>
 8006804:	4603      	mov	r3, r0
 8006806:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8006808:	7ffb      	ldrb	r3, [r7, #31]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d11a      	bne.n	8006844 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	041a      	lsls	r2, r3, #16
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	021b      	lsls	r3, r3, #8
 800681a:	431a      	orrs	r2, r3
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	ea42 0103 	orr.w	r1, r2, r3
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2202      	movs	r2, #2
 8006836:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006838:	e004      	b.n	8006844 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2210      	movs	r2, #16
 8006842:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 8006844:	7ffb      	ldrb	r3, [r7, #31]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3720      	adds	r7, #32
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b088      	sub	sp, #32
 8006852:	af02      	add	r7, sp, #8
 8006854:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800685a:	f7fc fc25 	bl	80030a8 <HAL_GetTick>
 800685e:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006864:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f003 0308 	and.w	r3, r3, #8
 800686c:	2b00      	cmp	r3, #0
 800686e:	d104      	bne.n	800687a <HAL_OSPI_Abort+0x2c>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	2b00      	cmp	r3, #0
 8006878:	d052      	beq.n	8006920 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b00      	cmp	r3, #0
 8006886:	d014      	beq.n	80068b2 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0204 	bic.w	r2, r2, #4
 8006896:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800689c:	4618      	mov	r0, r3
 800689e:	f7fc feb0 	bl	8003602 <HAL_DMA_Abort>
 80068a2:	4603      	mov	r3, r0
 80068a4:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2204      	movs	r2, #4
 80068b0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	f003 0320 	and.w	r3, r3, #32
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d02b      	beq.n	8006918 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0202 	orr.w	r2, r2, #2
 80068ce:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	2201      	movs	r2, #1
 80068da:	2102      	movs	r1, #2
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fd2d 	bl	800733c <OSPI_WaitFlagStateUntilTimeout>
 80068e2:	4603      	mov	r3, r0
 80068e4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d11f      	bne.n	800692c <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2202      	movs	r2, #2
 80068f2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2200      	movs	r2, #0
 80068fe:	2120      	movs	r1, #32
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fd1b 	bl	800733c <OSPI_WaitFlagStateUntilTimeout>
 8006906:	4603      	mov	r3, r0
 8006908:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800690a:	7dfb      	ldrb	r3, [r7, #23]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10d      	bne.n	800692c <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006916:	e009      	b.n	800692c <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800691e:	e005      	b.n	800692c <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2210      	movs	r2, #16
 8006928:	655a      	str	r2, [r3, #84]	@ 0x54
 800692a:	e000      	b.n	800692e <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800692c:	bf00      	nop
  }

  /* Return function status */
  return status;
 800692e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
	...

08006958 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b094      	sub	sp, #80	@ 0x50
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a9d      	ldr	r2, [pc, #628]	@ (8006bec <HAL_OSPIM_Config+0x294>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d105      	bne.n	8006986 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 800697e:	2301      	movs	r3, #1
 8006980:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8006984:	e004      	b.n	8006990 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8006986:	2301      	movs	r3, #1
 8006988:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006990:	2300      	movs	r3, #0
 8006992:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006996:	e01d      	b.n	80069d4 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8006998:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800699c:	3301      	adds	r3, #1
 800699e:	b2d8      	uxtb	r0, r3
 80069a0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80069a4:	f107 0114 	add.w	r1, r7, #20
 80069a8:	4613      	mov	r3, r2
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	4413      	add	r3, r2
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	440b      	add	r3, r1
 80069b2:	4619      	mov	r1, r3
 80069b4:	f000 fd02 	bl	80073bc <OSPIM_GetConfig>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d005      	beq.n	80069ca <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2208      	movs	r2, #8
 80069c8:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80069ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80069ce:	3301      	adds	r3, #1
 80069d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80069d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d9dd      	bls.n	8006998 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80069dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f040 849e 	bne.w	8007322 <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80069e6:	4b81      	ldr	r3, [pc, #516]	@ (8006bec <HAL_OSPIM_Config+0x294>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00b      	beq.n	8006a0a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80069f2:	4b7e      	ldr	r3, [pc, #504]	@ (8006bec <HAL_OSPIM_Config+0x294>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a7d      	ldr	r2, [pc, #500]	@ (8006bec <HAL_OSPIM_Config+0x294>)
 80069f8:	f023 0301 	bic.w	r3, r3, #1
 80069fc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80069fe:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006a02:	f043 0301 	orr.w	r3, r3, #1
 8006a06:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8006a0a:	4b79      	ldr	r3, [pc, #484]	@ (8006bf0 <HAL_OSPIM_Config+0x298>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00b      	beq.n	8006a2e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006a16:	4b76      	ldr	r3, [pc, #472]	@ (8006bf0 <HAL_OSPIM_Config+0x298>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a75      	ldr	r2, [pc, #468]	@ (8006bf0 <HAL_OSPIM_Config+0x298>)
 8006a1c:	f023 0301 	bic.w	r3, r3, #1
 8006a20:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8006a22:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006a26:	f043 0302 	orr.w	r3, r3, #2
 8006a2a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006a2e:	4971      	ldr	r1, [pc, #452]	@ (8006bf4 <HAL_OSPIM_Config+0x29c>)
 8006a30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a32:	4613      	mov	r3, r2
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	4413      	add	r3, r2
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	3350      	adds	r3, #80	@ 0x50
 8006a3c:	443b      	add	r3, r7
 8006a3e:	3b34      	subs	r3, #52	@ 0x34
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	440b      	add	r3, r1
 8006a48:	6859      	ldr	r1, [r3, #4]
 8006a4a:	486a      	ldr	r0, [pc, #424]	@ (8006bf4 <HAL_OSPIM_Config+0x29c>)
 8006a4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a4e:	4613      	mov	r3, r2
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	4413      	add	r3, r2
 8006a54:	00db      	lsls	r3, r3, #3
 8006a56:	3350      	adds	r3, #80	@ 0x50
 8006a58:	443b      	add	r3, r7
 8006a5a:	3b34      	subs	r3, #52	@ 0x34
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4403      	add	r3, r0
 8006a68:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006a6a:	4b62      	ldr	r3, [pc, #392]	@ (8006bf4 <HAL_OSPIM_Config+0x29c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 80c0 	beq.w	8006bf8 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006a78:	4b5e      	ldr	r3, [pc, #376]	@ (8006bf4 <HAL_OSPIM_Config+0x29c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a5d      	ldr	r2, [pc, #372]	@ (8006bf4 <HAL_OSPIM_Config+0x29c>)
 8006a7e:	f023 0301 	bic.w	r3, r3, #1
 8006a82:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8006a84:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	f040 8162 	bne.w	8006d52 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8006a8e:	4959      	ldr	r1, [pc, #356]	@ (8006bf4 <HAL_OSPIM_Config+0x29c>)
 8006a90:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006a94:	4613      	mov	r3, r2
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	4413      	add	r3, r2
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	3350      	adds	r3, #80	@ 0x50
 8006a9e:	443b      	add	r3, r7
 8006aa0:	3b3c      	subs	r3, #60	@ 0x3c
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	440b      	add	r3, r1
 8006aaa:	6859      	ldr	r1, [r3, #4]
 8006aac:	4851      	ldr	r0, [pc, #324]	@ (8006bf4 <HAL_OSPIM_Config+0x29c>)
 8006aae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	4413      	add	r3, r2
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	3350      	adds	r3, #80	@ 0x50
 8006abc:	443b      	add	r3, r7
 8006abe:	3b3c      	subs	r3, #60	@ 0x3c
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	f041 0202 	orr.w	r2, r1, #2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4403      	add	r3, r0
 8006acc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006ace:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	4413      	add	r3, r2
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	3350      	adds	r3, #80	@ 0x50
 8006adc:	443b      	add	r3, r7
 8006ade:	3b38      	subs	r3, #56	@ 0x38
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d01f      	beq.n	8006b26 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8006ae6:	4943      	ldr	r1, [pc, #268]	@ (8006bf4 <HAL_OSPIM_Config+0x29c>)
 8006ae8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006aec:	4613      	mov	r3, r2
 8006aee:	005b      	lsls	r3, r3, #1
 8006af0:	4413      	add	r3, r2
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	3350      	adds	r3, #80	@ 0x50
 8006af6:	443b      	add	r3, r7
 8006af8:	3b38      	subs	r3, #56	@ 0x38
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	440b      	add	r3, r1
 8006b02:	6859      	ldr	r1, [r3, #4]
 8006b04:	483b      	ldr	r0, [pc, #236]	@ (8006bf4 <HAL_OSPIM_Config+0x29c>)
 8006b06:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	4413      	add	r3, r2
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	3350      	adds	r3, #80	@ 0x50
 8006b14:	443b      	add	r3, r7
 8006b16:	3b38      	subs	r3, #56	@ 0x38
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	f041 0220 	orr.w	r2, r1, #32
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4403      	add	r3, r0
 8006b24:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006b26:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	4413      	add	r3, r2
 8006b30:	00db      	lsls	r3, r3, #3
 8006b32:	3350      	adds	r3, #80	@ 0x50
 8006b34:	443b      	add	r3, r7
 8006b36:	3b30      	subs	r3, #48	@ 0x30
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d023      	beq.n	8006b86 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006b3e:	492d      	ldr	r1, [pc, #180]	@ (8006bf4 <HAL_OSPIM_Config+0x29c>)
 8006b40:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006b44:	4613      	mov	r3, r2
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	4413      	add	r3, r2
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	3350      	adds	r3, #80	@ 0x50
 8006b4e:	443b      	add	r3, r7
 8006b50:	3b30      	subs	r3, #48	@ 0x30
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	440b      	add	r3, r1
 8006b5e:	6859      	ldr	r1, [r3, #4]
 8006b60:	4824      	ldr	r0, [pc, #144]	@ (8006bf4 <HAL_OSPIM_Config+0x29c>)
 8006b62:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006b66:	4613      	mov	r3, r2
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	4413      	add	r3, r2
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	3350      	adds	r3, #80	@ 0x50
 8006b70:	443b      	add	r3, r7
 8006b72:	3b30      	subs	r3, #48	@ 0x30
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4403      	add	r3, r0
 8006b84:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006b86:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	4413      	add	r3, r2
 8006b90:	00db      	lsls	r3, r3, #3
 8006b92:	3350      	adds	r3, #80	@ 0x50
 8006b94:	443b      	add	r3, r7
 8006b96:	3b2c      	subs	r3, #44	@ 0x2c
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 80d9 	beq.w	8006d52 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006ba0:	4914      	ldr	r1, [pc, #80]	@ (8006bf4 <HAL_OSPIM_Config+0x29c>)
 8006ba2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	4413      	add	r3, r2
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	3350      	adds	r3, #80	@ 0x50
 8006bb0:	443b      	add	r3, r7
 8006bb2:	3b2c      	subs	r3, #44	@ 0x2c
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	440b      	add	r3, r1
 8006bc0:	6859      	ldr	r1, [r3, #4]
 8006bc2:	480c      	ldr	r0, [pc, #48]	@ (8006bf4 <HAL_OSPIM_Config+0x29c>)
 8006bc4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006bc8:	4613      	mov	r3, r2
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	4413      	add	r3, r2
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	3350      	adds	r3, #80	@ 0x50
 8006bd2:	443b      	add	r3, r7
 8006bd4:	3b2c      	subs	r3, #44	@ 0x2c
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4403      	add	r3, r0
 8006be6:	605a      	str	r2, [r3, #4]
 8006be8:	e0b3      	b.n	8006d52 <HAL_OSPIM_Config+0x3fa>
 8006bea:	bf00      	nop
 8006bec:	420d1400 	.word	0x420d1400
 8006bf0:	420d2400 	.word	0x420d2400
 8006bf4:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8006bf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	4413      	add	r3, r2
 8006c00:	00db      	lsls	r3, r3, #3
 8006c02:	3350      	adds	r3, #80	@ 0x50
 8006c04:	443b      	add	r3, r7
 8006c06:	3b3c      	subs	r3, #60	@ 0x3c
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 80a1 	beq.w	8006d52 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006c10:	4993      	ldr	r1, [pc, #588]	@ (8006e60 <HAL_OSPIM_Config+0x508>)
 8006c12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c14:	4613      	mov	r3, r2
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	4413      	add	r3, r2
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	3350      	adds	r3, #80	@ 0x50
 8006c1e:	443b      	add	r3, r7
 8006c20:	3b3c      	subs	r3, #60	@ 0x3c
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	440b      	add	r3, r1
 8006c2a:	6859      	ldr	r1, [r3, #4]
 8006c2c:	488c      	ldr	r0, [pc, #560]	@ (8006e60 <HAL_OSPIM_Config+0x508>)
 8006c2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c30:	4613      	mov	r3, r2
 8006c32:	005b      	lsls	r3, r3, #1
 8006c34:	4413      	add	r3, r2
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	3350      	adds	r3, #80	@ 0x50
 8006c3a:	443b      	add	r3, r7
 8006c3c:	3b3c      	subs	r3, #60	@ 0x3c
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	f021 0201 	bic.w	r2, r1, #1
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4403      	add	r3, r0
 8006c4a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006c4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c4e:	4613      	mov	r3, r2
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	4413      	add	r3, r2
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	3350      	adds	r3, #80	@ 0x50
 8006c58:	443b      	add	r3, r7
 8006c5a:	3b38      	subs	r3, #56	@ 0x38
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d01d      	beq.n	8006c9e <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006c62:	497f      	ldr	r1, [pc, #508]	@ (8006e60 <HAL_OSPIM_Config+0x508>)
 8006c64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c66:	4613      	mov	r3, r2
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	4413      	add	r3, r2
 8006c6c:	00db      	lsls	r3, r3, #3
 8006c6e:	3350      	adds	r3, #80	@ 0x50
 8006c70:	443b      	add	r3, r7
 8006c72:	3b38      	subs	r3, #56	@ 0x38
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	440b      	add	r3, r1
 8006c7c:	6859      	ldr	r1, [r3, #4]
 8006c7e:	4878      	ldr	r0, [pc, #480]	@ (8006e60 <HAL_OSPIM_Config+0x508>)
 8006c80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c82:	4613      	mov	r3, r2
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	4413      	add	r3, r2
 8006c88:	00db      	lsls	r3, r3, #3
 8006c8a:	3350      	adds	r3, #80	@ 0x50
 8006c8c:	443b      	add	r3, r7
 8006c8e:	3b38      	subs	r3, #56	@ 0x38
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	f021 0210 	bic.w	r2, r1, #16
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4403      	add	r3, r0
 8006c9c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006c9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	4413      	add	r3, r2
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	3350      	adds	r3, #80	@ 0x50
 8006caa:	443b      	add	r3, r7
 8006cac:	3b30      	subs	r3, #48	@ 0x30
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d021      	beq.n	8006cf8 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006cb4:	496a      	ldr	r1, [pc, #424]	@ (8006e60 <HAL_OSPIM_Config+0x508>)
 8006cb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cb8:	4613      	mov	r3, r2
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	4413      	add	r3, r2
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	3350      	adds	r3, #80	@ 0x50
 8006cc2:	443b      	add	r3, r7
 8006cc4:	3b30      	subs	r3, #48	@ 0x30
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	440b      	add	r3, r1
 8006cd2:	6859      	ldr	r1, [r3, #4]
 8006cd4:	4862      	ldr	r0, [pc, #392]	@ (8006e60 <HAL_OSPIM_Config+0x508>)
 8006cd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cd8:	4613      	mov	r3, r2
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	4413      	add	r3, r2
 8006cde:	00db      	lsls	r3, r3, #3
 8006ce0:	3350      	adds	r3, #80	@ 0x50
 8006ce2:	443b      	add	r3, r7
 8006ce4:	3b30      	subs	r3, #48	@ 0x30
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4403      	add	r3, r0
 8006cf6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006cf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	4413      	add	r3, r2
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	3350      	adds	r3, #80	@ 0x50
 8006d04:	443b      	add	r3, r7
 8006d06:	3b2c      	subs	r3, #44	@ 0x2c
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d021      	beq.n	8006d52 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006d0e:	4954      	ldr	r1, [pc, #336]	@ (8006e60 <HAL_OSPIM_Config+0x508>)
 8006d10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d12:	4613      	mov	r3, r2
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	4413      	add	r3, r2
 8006d18:	00db      	lsls	r3, r3, #3
 8006d1a:	3350      	adds	r3, #80	@ 0x50
 8006d1c:	443b      	add	r3, r7
 8006d1e:	3b2c      	subs	r3, #44	@ 0x2c
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	440b      	add	r3, r1
 8006d2c:	6859      	ldr	r1, [r3, #4]
 8006d2e:	484c      	ldr	r0, [pc, #304]	@ (8006e60 <HAL_OSPIM_Config+0x508>)
 8006d30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d32:	4613      	mov	r3, r2
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	4413      	add	r3, r2
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	3350      	adds	r3, #80	@ 0x50
 8006d3c:	443b      	add	r3, r7
 8006d3e:	3b2c      	subs	r3, #44	@ 0x2c
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4403      	add	r3, r0
 8006d50:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	6819      	ldr	r1, [r3, #0]
 8006d56:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	4413      	add	r3, r2
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	3350      	adds	r3, #80	@ 0x50
 8006d64:	443b      	add	r3, r7
 8006d66:	3b3c      	subs	r3, #60	@ 0x3c
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4299      	cmp	r1, r3
 8006d6c:	d038      	beq.n	8006de0 <HAL_OSPIM_Config+0x488>
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	6859      	ldr	r1, [r3, #4]
 8006d72:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006d76:	4613      	mov	r3, r2
 8006d78:	005b      	lsls	r3, r3, #1
 8006d7a:	4413      	add	r3, r2
 8006d7c:	00db      	lsls	r3, r3, #3
 8006d7e:	3350      	adds	r3, #80	@ 0x50
 8006d80:	443b      	add	r3, r7
 8006d82:	3b38      	subs	r3, #56	@ 0x38
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4299      	cmp	r1, r3
 8006d88:	d02a      	beq.n	8006de0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	6899      	ldr	r1, [r3, #8]
 8006d8e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006d92:	4613      	mov	r3, r2
 8006d94:	005b      	lsls	r3, r3, #1
 8006d96:	4413      	add	r3, r2
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	3350      	adds	r3, #80	@ 0x50
 8006d9c:	443b      	add	r3, r7
 8006d9e:	3b34      	subs	r3, #52	@ 0x34
 8006da0:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006da2:	4299      	cmp	r1, r3
 8006da4:	d01c      	beq.n	8006de0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	68d9      	ldr	r1, [r3, #12]
 8006daa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006dae:	4613      	mov	r3, r2
 8006db0:	005b      	lsls	r3, r3, #1
 8006db2:	4413      	add	r3, r2
 8006db4:	00db      	lsls	r3, r3, #3
 8006db6:	3350      	adds	r3, #80	@ 0x50
 8006db8:	443b      	add	r3, r7
 8006dba:	3b30      	subs	r3, #48	@ 0x30
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4299      	cmp	r1, r3
 8006dc0:	d00e      	beq.n	8006de0 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	6919      	ldr	r1, [r3, #16]
 8006dc6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006dca:	4613      	mov	r3, r2
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	4413      	add	r3, r2
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	3350      	adds	r3, #80	@ 0x50
 8006dd4:	443b      	add	r3, r7
 8006dd6:	3b2c      	subs	r3, #44	@ 0x2c
 8006dd8:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006dda:	4299      	cmp	r1, r3
 8006ddc:	f040 810e 	bne.w	8006ffc <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	6819      	ldr	r1, [r3, #0]
 8006de4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006de8:	4613      	mov	r3, r2
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	4413      	add	r3, r2
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	3350      	adds	r3, #80	@ 0x50
 8006df2:	443b      	add	r3, r7
 8006df4:	3b3c      	subs	r3, #60	@ 0x3c
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4299      	cmp	r1, r3
 8006dfa:	d133      	bne.n	8006e64 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	6859      	ldr	r1, [r3, #4]
 8006e00:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006e04:	4613      	mov	r3, r2
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	4413      	add	r3, r2
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	3350      	adds	r3, #80	@ 0x50
 8006e0e:	443b      	add	r3, r7
 8006e10:	3b38      	subs	r3, #56	@ 0x38
 8006e12:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006e14:	4299      	cmp	r1, r3
 8006e16:	d125      	bne.n	8006e64 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	68d9      	ldr	r1, [r3, #12]
 8006e1c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006e20:	4613      	mov	r3, r2
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	4413      	add	r3, r2
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	3350      	adds	r3, #80	@ 0x50
 8006e2a:	443b      	add	r3, r7
 8006e2c:	3b30      	subs	r3, #48	@ 0x30
 8006e2e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006e30:	4299      	cmp	r1, r3
 8006e32:	d117      	bne.n	8006e64 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	6919      	ldr	r1, [r3, #16]
 8006e38:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	005b      	lsls	r3, r3, #1
 8006e40:	4413      	add	r3, r2
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	3350      	adds	r3, #80	@ 0x50
 8006e46:	443b      	add	r3, r7
 8006e48:	3b2c      	subs	r3, #44	@ 0x2c
 8006e4a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006e4c:	4299      	cmp	r1, r3
 8006e4e:	d109      	bne.n	8006e64 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006e50:	4b03      	ldr	r3, [pc, #12]	@ (8006e60 <HAL_OSPIM_Config+0x508>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a02      	ldr	r2, [pc, #8]	@ (8006e60 <HAL_OSPIM_Config+0x508>)
 8006e56:	f043 0301 	orr.w	r3, r3, #1
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	e0ce      	b.n	8006ffc <HAL_OSPIM_Config+0x6a4>
 8006e5e:	bf00      	nop
 8006e60:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006e64:	49a4      	ldr	r1, [pc, #656]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 8006e66:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	4413      	add	r3, r2
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	3350      	adds	r3, #80	@ 0x50
 8006e74:	443b      	add	r3, r7
 8006e76:	3b3c      	subs	r3, #60	@ 0x3c
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	440b      	add	r3, r1
 8006e80:	6859      	ldr	r1, [r3, #4]
 8006e82:	489d      	ldr	r0, [pc, #628]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 8006e84:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006e88:	4613      	mov	r3, r2
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	4413      	add	r3, r2
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	3350      	adds	r3, #80	@ 0x50
 8006e92:	443b      	add	r3, r7
 8006e94:	3b3c      	subs	r3, #60	@ 0x3c
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	f021 0201 	bic.w	r2, r1, #1
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4403      	add	r3, r0
 8006ea2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006ea4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	4413      	add	r3, r2
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	3350      	adds	r3, #80	@ 0x50
 8006eb2:	443b      	add	r3, r7
 8006eb4:	3b38      	subs	r3, #56	@ 0x38
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01f      	beq.n	8006efc <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006ebc:	498e      	ldr	r1, [pc, #568]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 8006ebe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	4413      	add	r3, r2
 8006ec8:	00db      	lsls	r3, r3, #3
 8006eca:	3350      	adds	r3, #80	@ 0x50
 8006ecc:	443b      	add	r3, r7
 8006ece:	3b38      	subs	r3, #56	@ 0x38
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	440b      	add	r3, r1
 8006ed8:	6859      	ldr	r1, [r3, #4]
 8006eda:	4887      	ldr	r0, [pc, #540]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 8006edc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	4413      	add	r3, r2
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	3350      	adds	r3, #80	@ 0x50
 8006eea:	443b      	add	r3, r7
 8006eec:	3b38      	subs	r3, #56	@ 0x38
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	f021 0210 	bic.w	r2, r1, #16
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4403      	add	r3, r0
 8006efa:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006efc:	497e      	ldr	r1, [pc, #504]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 8006efe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006f02:	4613      	mov	r3, r2
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	4413      	add	r3, r2
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	3350      	adds	r3, #80	@ 0x50
 8006f0c:	443b      	add	r3, r7
 8006f0e:	3b34      	subs	r3, #52	@ 0x34
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3b01      	subs	r3, #1
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	440b      	add	r3, r1
 8006f18:	6859      	ldr	r1, [r3, #4]
 8006f1a:	4877      	ldr	r0, [pc, #476]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 8006f1c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006f20:	4613      	mov	r3, r2
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	4413      	add	r3, r2
 8006f26:	00db      	lsls	r3, r3, #3
 8006f28:	3350      	adds	r3, #80	@ 0x50
 8006f2a:	443b      	add	r3, r7
 8006f2c:	3b34      	subs	r3, #52	@ 0x34
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3b01      	subs	r3, #1
 8006f32:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4403      	add	r3, r0
 8006f3a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006f3c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006f40:	4613      	mov	r3, r2
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	4413      	add	r3, r2
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	3350      	adds	r3, #80	@ 0x50
 8006f4a:	443b      	add	r3, r7
 8006f4c:	3b30      	subs	r3, #48	@ 0x30
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d023      	beq.n	8006f9c <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006f54:	4968      	ldr	r1, [pc, #416]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 8006f56:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	4413      	add	r3, r2
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	3350      	adds	r3, #80	@ 0x50
 8006f64:	443b      	add	r3, r7
 8006f66:	3b30      	subs	r3, #48	@ 0x30
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	440b      	add	r3, r1
 8006f74:	6859      	ldr	r1, [r3, #4]
 8006f76:	4860      	ldr	r0, [pc, #384]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 8006f78:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	4413      	add	r3, r2
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	3350      	adds	r3, #80	@ 0x50
 8006f86:	443b      	add	r3, r7
 8006f88:	3b30      	subs	r3, #48	@ 0x30
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4403      	add	r3, r0
 8006f9a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006f9c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	4413      	add	r3, r2
 8006fa6:	00db      	lsls	r3, r3, #3
 8006fa8:	3350      	adds	r3, #80	@ 0x50
 8006faa:	443b      	add	r3, r7
 8006fac:	3b2c      	subs	r3, #44	@ 0x2c
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d023      	beq.n	8006ffc <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006fb4:	4950      	ldr	r1, [pc, #320]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 8006fb6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006fba:	4613      	mov	r3, r2
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	4413      	add	r3, r2
 8006fc0:	00db      	lsls	r3, r3, #3
 8006fc2:	3350      	adds	r3, #80	@ 0x50
 8006fc4:	443b      	add	r3, r7
 8006fc6:	3b2c      	subs	r3, #44	@ 0x2c
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	440b      	add	r3, r1
 8006fd4:	6859      	ldr	r1, [r3, #4]
 8006fd6:	4848      	ldr	r0, [pc, #288]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 8006fd8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006fdc:	4613      	mov	r3, r2
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	4413      	add	r3, r2
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	3350      	adds	r3, #80	@ 0x50
 8006fe6:	443b      	add	r3, r7
 8006fe8:	3b2c      	subs	r3, #44	@ 0x2c
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4403      	add	r3, r0
 8006ffa:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006ffc:	4a3e      	ldr	r2, [pc, #248]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	3b01      	subs	r3, #1
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800700e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007010:	025b      	lsls	r3, r3, #9
 8007012:	431a      	orrs	r2, r3
 8007014:	4938      	ldr	r1, [pc, #224]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	3b01      	subs	r3, #1
 800701c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	440b      	add	r3, r1
 8007024:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d018      	beq.n	8007060 <HAL_OSPIM_Config+0x708>
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007036:	d813      	bhi.n	8007060 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	1e5a      	subs	r2, r3, #1
 800703e:	4b2e      	ldr	r3, [pc, #184]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	0c1b      	lsrs	r3, r3, #16
 8007044:	b2db      	uxtb	r3, r3
 8007046:	429a      	cmp	r2, r3
 8007048:	d90a      	bls.n	8007060 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800704a:	4b2b      	ldr	r3, [pc, #172]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	3b01      	subs	r3, #1
 8007058:	041b      	lsls	r3, r3, #16
 800705a:	4927      	ldr	r1, [pc, #156]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 800705c:	4313      	orrs	r3, r2
 800705e:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007060:	4b25      	ldr	r3, [pc, #148]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 809a 	beq.w	80071a2 <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800706e:	4a22      	ldr	r2, [pc, #136]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3b01      	subs	r3, #1
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f023 0203 	bic.w	r2, r3, #3
 8007080:	491d      	ldr	r1, [pc, #116]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3b01      	subs	r3, #1
 8007088:	f042 0201 	orr.w	r2, r2, #1
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	440b      	add	r3, r1
 8007090:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d011      	beq.n	80070be <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800709a:	4a17      	ldr	r2, [pc, #92]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	3b01      	subs	r3, #1
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80070ac:	4912      	ldr	r1, [pc, #72]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	f042 0210 	orr.w	r2, r2, #16
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	440b      	add	r3, r1
 80070bc:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d018      	beq.n	80070fc <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80070ca:	4a0b      	ldr	r2, [pc, #44]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80070e0:	4905      	ldr	r1, [pc, #20]	@ (80070f8 <HAL_OSPIM_Config+0x7a0>)
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	3b01      	subs	r3, #1
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	440b      	add	r3, r1
 80070f4:	605a      	str	r2, [r3, #4]
 80070f6:	e01b      	b.n	8007130 <HAL_OSPIM_Config+0x7d8>
 80070f8:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d015      	beq.n	8007130 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007104:	4a8a      	ldr	r2, [pc, #552]	@ (8007330 <HAL_OSPIM_Config+0x9d8>)
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	3b01      	subs	r3, #1
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800711a:	4985      	ldr	r1, [pc, #532]	@ (8007330 <HAL_OSPIM_Config+0x9d8>)
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	3b01      	subs	r3, #1
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	440b      	add	r3, r1
 800712e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d016      	beq.n	800716a <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800713c:	4a7c      	ldr	r2, [pc, #496]	@ (8007330 <HAL_OSPIM_Config+0x9d8>)
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	3b01      	subs	r3, #1
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007152:	4977      	ldr	r1, [pc, #476]	@ (8007330 <HAL_OSPIM_Config+0x9d8>)
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	3b01      	subs	r3, #1
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	440b      	add	r3, r1
 8007166:	605a      	str	r2, [r3, #4]
 8007168:	e0c3      	b.n	80072f2 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 80bf 	beq.w	80072f2 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007174:	4a6e      	ldr	r2, [pc, #440]	@ (8007330 <HAL_OSPIM_Config+0x9d8>)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	3b01      	subs	r3, #1
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800718a:	4969      	ldr	r1, [pc, #420]	@ (8007330 <HAL_OSPIM_Config+0x9d8>)
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	3b01      	subs	r3, #1
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	440b      	add	r3, r1
 800719e:	605a      	str	r2, [r3, #4]
 80071a0:	e0a7      	b.n	80072f2 <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80071a2:	4a63      	ldr	r2, [pc, #396]	@ (8007330 <HAL_OSPIM_Config+0x9d8>)
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3b01      	subs	r3, #1
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f023 0203 	bic.w	r2, r3, #3
 80071b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	431a      	orrs	r2, r3
 80071ba:	495d      	ldr	r1, [pc, #372]	@ (8007330 <HAL_OSPIM_Config+0x9d8>)
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	f042 0201 	orr.w	r2, r2, #1
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	440b      	add	r3, r1
 80071ca:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d014      	beq.n	80071fe <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80071d4:	4a56      	ldr	r2, [pc, #344]	@ (8007330 <HAL_OSPIM_Config+0x9d8>)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	3b01      	subs	r3, #1
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80071e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071e8:	015b      	lsls	r3, r3, #5
 80071ea:	431a      	orrs	r2, r3
 80071ec:	4950      	ldr	r1, [pc, #320]	@ (8007330 <HAL_OSPIM_Config+0x9d8>)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	f042 0210 	orr.w	r2, r2, #16
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	440b      	add	r3, r1
 80071fc:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d019      	beq.n	800723e <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800720a:	4a49      	ldr	r2, [pc, #292]	@ (8007330 <HAL_OSPIM_Config+0x9d8>)
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	3b01      	subs	r3, #1
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007220:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007222:	049b      	lsls	r3, r3, #18
 8007224:	431a      	orrs	r2, r3
 8007226:	4942      	ldr	r1, [pc, #264]	@ (8007330 <HAL_OSPIM_Config+0x9d8>)
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	3b01      	subs	r3, #1
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	440b      	add	r3, r1
 800723a:	605a      	str	r2, [r3, #4]
 800723c:	e01c      	b.n	8007278 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d018      	beq.n	8007278 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007246:	4a3a      	ldr	r2, [pc, #232]	@ (8007330 <HAL_OSPIM_Config+0x9d8>)
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	3b01      	subs	r3, #1
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800725c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800725e:	069b      	lsls	r3, r3, #26
 8007260:	431a      	orrs	r2, r3
 8007262:	4933      	ldr	r1, [pc, #204]	@ (8007330 <HAL_OSPIM_Config+0x9d8>)
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	3b01      	subs	r3, #1
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	440b      	add	r3, r1
 8007276:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d019      	beq.n	80072b8 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007284:	4a2a      	ldr	r2, [pc, #168]	@ (8007330 <HAL_OSPIM_Config+0x9d8>)
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	3b01      	subs	r3, #1
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800729a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800729c:	049b      	lsls	r3, r3, #18
 800729e:	431a      	orrs	r2, r3
 80072a0:	4923      	ldr	r1, [pc, #140]	@ (8007330 <HAL_OSPIM_Config+0x9d8>)
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	440b      	add	r3, r1
 80072b4:	605a      	str	r2, [r3, #4]
 80072b6:	e01c      	b.n	80072f2 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d018      	beq.n	80072f2 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80072c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007330 <HAL_OSPIM_Config+0x9d8>)
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80072d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072d8:	069b      	lsls	r3, r3, #26
 80072da:	431a      	orrs	r2, r3
 80072dc:	4914      	ldr	r1, [pc, #80]	@ (8007330 <HAL_OSPIM_Config+0x9d8>)
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	440b      	add	r3, r1
 80072f0:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80072f2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d005      	beq.n	800730a <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80072fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007334 <HAL_OSPIM_Config+0x9dc>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a0c      	ldr	r2, [pc, #48]	@ (8007334 <HAL_OSPIM_Config+0x9dc>)
 8007304:	f043 0301 	orr.w	r3, r3, #1
 8007308:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800730a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d005      	beq.n	8007322 <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007316:	4b08      	ldr	r3, [pc, #32]	@ (8007338 <HAL_OSPIM_Config+0x9e0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a07      	ldr	r2, [pc, #28]	@ (8007338 <HAL_OSPIM_Config+0x9e0>)
 800731c:	f043 0301 	orr.w	r3, r3, #1
 8007320:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007322:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8007326:	4618      	mov	r0, r3
 8007328:	3750      	adds	r7, #80	@ 0x50
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	420c4000 	.word	0x420c4000
 8007334:	420d1400 	.word	0x420d1400
 8007338:	420d2400 	.word	0x420d2400

0800733c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	4613      	mov	r3, r2
 800734a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800734c:	e022      	b.n	8007394 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007354:	d01e      	beq.n	8007394 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007356:	f7fb fea7 	bl	80030a8 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	429a      	cmp	r2, r3
 8007364:	d302      	bcc.n	800736c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d113      	bne.n	8007394 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6a1a      	ldr	r2, [r3, #32]
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	401a      	ands	r2, r3
 8007376:	79fb      	ldrb	r3, [r7, #7]
 8007378:	429a      	cmp	r2, r3
 800737a:	d00b      	beq.n	8007394 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007382:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007388:	f043 0201 	orr.w	r2, r3, #1
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e00e      	b.n	80073b2 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6a1a      	ldr	r2, [r3, #32]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	4013      	ands	r3, r2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bf14      	ite	ne
 80073a2:	2301      	movne	r3, #1
 80073a4:	2300      	moveq	r3, #0
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	461a      	mov	r2, r3
 80073aa:	79fb      	ldrb	r3, [r7, #7]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d1ce      	bne.n	800734e <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
	...

080073bc <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	4603      	mov	r3, r0
 80073c4:	6039      	str	r1, [r7, #0]
 80073c6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d005      	beq.n	80073e2 <OSPIM_GetConfig+0x26>
 80073d6:	79fb      	ldrb	r3, [r7, #7]
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d802      	bhi.n	80073e2 <OSPIM_GetConfig+0x26>
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d102      	bne.n	80073e8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	75fb      	strb	r3, [r7, #23]
 80073e6:	e098      	b.n	800751a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2200      	movs	r2, #0
 80073f2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2200      	movs	r2, #0
 80073f8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2200      	movs	r2, #0
 80073fe:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2200      	movs	r2, #0
 8007404:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8007406:	79fb      	ldrb	r3, [r7, #7]
 8007408:	2b02      	cmp	r3, #2
 800740a:	d10b      	bne.n	8007424 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800740c:	4b46      	ldr	r3, [pc, #280]	@ (8007528 <OSPIM_GetConfig+0x16c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b00      	cmp	r3, #0
 8007416:	d102      	bne.n	800741e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007418:	4b44      	ldr	r3, [pc, #272]	@ (800752c <OSPIM_GetConfig+0x170>)
 800741a:	613b      	str	r3, [r7, #16]
 800741c:	e002      	b.n	8007424 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800741e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007422:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007424:	2300      	movs	r3, #0
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	e074      	b.n	8007514 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800742a:	4a3f      	ldr	r2, [pc, #252]	@ (8007528 <OSPIM_GetConfig+0x16c>)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00a      	beq.n	8007456 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	4053      	eors	r3, r2
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d103      	bne.n	8007456 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f003 0310 	and.w	r3, r3, #16
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00a      	beq.n	8007476 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	4053      	eors	r3, r2
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	2b00      	cmp	r3, #0
 800746c:	d103      	bne.n	8007476 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00a      	beq.n	8007496 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	4053      	eors	r3, r2
 8007486:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800748a:	2b00      	cmp	r3, #0
 800748c:	d103      	bne.n	8007496 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d018      	beq.n	80074d2 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	4053      	eors	r3, r2
 80074a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d111      	bne.n	80074d2 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d106      	bne.n	80074c6 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	3301      	adds	r3, #1
 80074bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	60da      	str	r2, [r3, #12]
 80074c4:	e005      	b.n	80074d2 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3301      	adds	r3, #1
 80074ca:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d018      	beq.n	800750e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	4053      	eors	r3, r2
 80074e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d111      	bne.n	800750e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d106      	bne.n	8007502 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	3301      	adds	r3, #1
 80074f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	611a      	str	r2, [r3, #16]
 8007500:	e005      	b.n	800750e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	3301      	adds	r3, #1
 8007506:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3301      	adds	r3, #1
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d987      	bls.n	800742a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800751a:	7dfb      	ldrb	r3, [r7, #23]
}
 800751c:	4618      	mov	r0, r3
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	420c4000 	.word	0x420c4000
 800752c:	04040222 	.word	0x04040222

08007530 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f042 0202 	orr.w	r2, r2, #2
 800754c:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2208      	movs	r2, #8
 8007552:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a15      	ldr	r2, [pc, #84]	@ (80075b0 <HAL_OSPI_DLYB_SetConfig+0x80>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d109      	bne.n	8007572 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800755e:	4815      	ldr	r0, [pc, #84]	@ (80075b4 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007560:	f7ff f86a 	bl	8006638 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	4813      	ldr	r0, [pc, #76]	@ (80075b4 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007568:	f006 f9b6 	bl	800d8d8 <LL_DLYB_SetDelay>
    status = HAL_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	73fb      	strb	r3, [r7, #15]
 8007570:	e00d      	b.n	800758e <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a10      	ldr	r2, [pc, #64]	@ (80075b8 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d108      	bne.n	800758e <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 800757c:	480f      	ldr	r0, [pc, #60]	@ (80075bc <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800757e:	f7ff f85b 	bl	8006638 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	480d      	ldr	r0, [pc, #52]	@ (80075bc <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8007586:	f006 f9a7 	bl	800d8d8 <LL_DLYB_SetDelay>
    status = HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff f95d 	bl	800684e <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689a      	ldr	r2, [r3, #8]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 0202 	bic.w	r2, r2, #2
 80075a2:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	420d1400 	.word	0x420d1400
 80075b4:	420cf000 	.word	0x420cf000
 80075b8:	420d2400 	.word	0x420d2400
 80075bc:	420cf400 	.word	0x420cf400

080075c0 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80075c0:	b480      	push	{r7}
 80075c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80075c4:	4b05      	ldr	r3, [pc, #20]	@ (80075dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80075c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c8:	4a04      	ldr	r2, [pc, #16]	@ (80075dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80075ca:	f043 0301 	orr.w	r3, r3, #1
 80075ce:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80075d0:	bf00      	nop
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	46020800 	.word	0x46020800

080075e0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80075e8:	4b39      	ldr	r3, [pc, #228]	@ (80076d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80075ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80075f0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d10b      	bne.n	8007612 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007600:	d905      	bls.n	800760e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007602:	4b33      	ldr	r3, [pc, #204]	@ (80076d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	4a32      	ldr	r2, [pc, #200]	@ (80076d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800760c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	e057      	b.n	80076c2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007618:	d90a      	bls.n	8007630 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800761a:	4b2d      	ldr	r3, [pc, #180]	@ (80076d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4313      	orrs	r3, r2
 8007626:	4a2a      	ldr	r2, [pc, #168]	@ (80076d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800762c:	60d3      	str	r3, [r2, #12]
 800762e:	e007      	b.n	8007640 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8007630:	4b27      	ldr	r3, [pc, #156]	@ (80076d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007638:	4925      	ldr	r1, [pc, #148]	@ (80076d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4313      	orrs	r3, r2
 800763e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007640:	4b24      	ldr	r3, [pc, #144]	@ (80076d4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a24      	ldr	r2, [pc, #144]	@ (80076d8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007646:	fba2 2303 	umull	r2, r3, r2, r3
 800764a:	099b      	lsrs	r3, r3, #6
 800764c:	2232      	movs	r2, #50	@ 0x32
 800764e:	fb02 f303 	mul.w	r3, r2, r3
 8007652:	4a21      	ldr	r2, [pc, #132]	@ (80076d8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007654:	fba2 2303 	umull	r2, r3, r2, r3
 8007658:	099b      	lsrs	r3, r3, #6
 800765a:	3301      	adds	r3, #1
 800765c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800765e:	e002      	b.n	8007666 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	3b01      	subs	r3, #1
 8007664:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007666:	4b1a      	ldr	r3, [pc, #104]	@ (80076d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d102      	bne.n	8007678 <HAL_PWREx_ControlVoltageScaling+0x98>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1f3      	bne.n	8007660 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d01b      	beq.n	80076b6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800767e:	4b15      	ldr	r3, [pc, #84]	@ (80076d4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a15      	ldr	r2, [pc, #84]	@ (80076d8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007684:	fba2 2303 	umull	r2, r3, r2, r3
 8007688:	099b      	lsrs	r3, r3, #6
 800768a:	2232      	movs	r2, #50	@ 0x32
 800768c:	fb02 f303 	mul.w	r3, r2, r3
 8007690:	4a11      	ldr	r2, [pc, #68]	@ (80076d8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007692:	fba2 2303 	umull	r2, r3, r2, r3
 8007696:	099b      	lsrs	r3, r3, #6
 8007698:	3301      	adds	r3, #1
 800769a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800769c:	e002      	b.n	80076a4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3b01      	subs	r3, #1
 80076a2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80076a4:	4b0a      	ldr	r3, [pc, #40]	@ (80076d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80076a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d102      	bne.n	80076b6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1f3      	bne.n	800769e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e000      	b.n	80076c2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	46020800 	.word	0x46020800
 80076d4:	20000d00 	.word	0x20000d00
 80076d8:	10624dd3 	.word	0x10624dd3

080076dc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80076dc:	b480      	push	{r7}
 80076de:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80076e0:	4b04      	ldr	r3, [pc, #16]	@ (80076f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80076e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	46020800 	.word	0x46020800

080076f8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007700:	4b22      	ldr	r3, [pc, #136]	@ (800778c <HAL_PWREx_ConfigSupply+0x94>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a22      	ldr	r2, [pc, #136]	@ (8007790 <HAL_PWREx_ConfigSupply+0x98>)
 8007706:	fba2 2303 	umull	r2, r3, r2, r3
 800770a:	099b      	lsrs	r3, r3, #6
 800770c:	2232      	movs	r2, #50	@ 0x32
 800770e:	fb02 f303 	mul.w	r3, r2, r3
 8007712:	4a1f      	ldr	r2, [pc, #124]	@ (8007790 <HAL_PWREx_ConfigSupply+0x98>)
 8007714:	fba2 2303 	umull	r2, r3, r2, r3
 8007718:	099b      	lsrs	r3, r3, #6
 800771a:	3301      	adds	r3, #1
 800771c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d113      	bne.n	800774c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007724:	4b1b      	ldr	r3, [pc, #108]	@ (8007794 <HAL_PWREx_ConfigSupply+0x9c>)
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	4a1a      	ldr	r2, [pc, #104]	@ (8007794 <HAL_PWREx_ConfigSupply+0x9c>)
 800772a:	f023 0302 	bic.w	r3, r3, #2
 800772e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007730:	e002      	b.n	8007738 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3b01      	subs	r3, #1
 8007736:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007738:	4b16      	ldr	r3, [pc, #88]	@ (8007794 <HAL_PWREx_ConfigSupply+0x9c>)
 800773a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b02      	cmp	r3, #2
 8007742:	d116      	bne.n	8007772 <HAL_PWREx_ConfigSupply+0x7a>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1f3      	bne.n	8007732 <HAL_PWREx_ConfigSupply+0x3a>
 800774a:	e012      	b.n	8007772 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800774c:	4b11      	ldr	r3, [pc, #68]	@ (8007794 <HAL_PWREx_ConfigSupply+0x9c>)
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	4a10      	ldr	r2, [pc, #64]	@ (8007794 <HAL_PWREx_ConfigSupply+0x9c>)
 8007752:	f043 0302 	orr.w	r3, r3, #2
 8007756:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007758:	e002      	b.n	8007760 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3b01      	subs	r3, #1
 800775e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007760:	4b0c      	ldr	r3, [pc, #48]	@ (8007794 <HAL_PWREx_ConfigSupply+0x9c>)
 8007762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007764:	f003 0302 	and.w	r3, r3, #2
 8007768:	2b00      	cmp	r3, #0
 800776a:	d102      	bne.n	8007772 <HAL_PWREx_ConfigSupply+0x7a>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1f3      	bne.n	800775a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e000      	b.n	800777e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	20000d00 	.word	0x20000d00
 8007790:	10624dd3 	.word	0x10624dd3
 8007794:	46020800 	.word	0x46020800

08007798 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800779c:	4b05      	ldr	r3, [pc, #20]	@ (80077b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	4a04      	ldr	r2, [pc, #16]	@ (80077b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80077a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80077a6:	6113      	str	r3, [r2, #16]
}
 80077a8:	bf00      	nop
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	46020800 	.word	0x46020800

080077b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08e      	sub	sp, #56	@ 0x38
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80077c0:	2300      	movs	r3, #0
 80077c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d102      	bne.n	80077d2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	f000 bec8 	b.w	8008562 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077d2:	4b99      	ldr	r3, [pc, #612]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	f003 030c 	and.w	r3, r3, #12
 80077da:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077dc:	4b96      	ldr	r3, [pc, #600]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 80077de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e0:	f003 0303 	and.w	r3, r3, #3
 80077e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0310 	and.w	r3, r3, #16
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f000 816c 	beq.w	8007acc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80077f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d007      	beq.n	800780a <HAL_RCC_OscConfig+0x52>
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	2b0c      	cmp	r3, #12
 80077fe:	f040 80de 	bne.w	80079be <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007804:	2b01      	cmp	r3, #1
 8007806:	f040 80da 	bne.w	80079be <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d102      	bne.n	8007818 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	f000 bea5 	b.w	8008562 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800781c:	4b86      	ldr	r3, [pc, #536]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d004      	beq.n	8007832 <HAL_RCC_OscConfig+0x7a>
 8007828:	4b83      	ldr	r3, [pc, #524]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007830:	e005      	b.n	800783e <HAL_RCC_OscConfig+0x86>
 8007832:	4b81      	ldr	r3, [pc, #516]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007834:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007838:	041b      	lsls	r3, r3, #16
 800783a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800783e:	4293      	cmp	r3, r2
 8007840:	d255      	bcs.n	80078ee <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10a      	bne.n	800785e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784c:	4618      	mov	r0, r3
 800784e:	f001 fa3d 	bl	8008ccc <RCC_SetFlashLatencyFromMSIRange>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	f000 be82 	b.w	8008562 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800785e:	4b76      	ldr	r3, [pc, #472]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	4a75      	ldr	r2, [pc, #468]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007864:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007868:	6093      	str	r3, [r2, #8]
 800786a:	4b73      	ldr	r3, [pc, #460]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007876:	4970      	ldr	r1, [pc, #448]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007878:	4313      	orrs	r3, r2
 800787a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007880:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007884:	d309      	bcc.n	800789a <HAL_RCC_OscConfig+0xe2>
 8007886:	4b6c      	ldr	r3, [pc, #432]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	f023 021f 	bic.w	r2, r3, #31
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	4969      	ldr	r1, [pc, #420]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007894:	4313      	orrs	r3, r2
 8007896:	60cb      	str	r3, [r1, #12]
 8007898:	e07e      	b.n	8007998 <HAL_RCC_OscConfig+0x1e0>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800789e:	2b00      	cmp	r3, #0
 80078a0:	da0a      	bge.n	80078b8 <HAL_RCC_OscConfig+0x100>
 80078a2:	4b65      	ldr	r3, [pc, #404]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	015b      	lsls	r3, r3, #5
 80078b0:	4961      	ldr	r1, [pc, #388]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	60cb      	str	r3, [r1, #12]
 80078b6:	e06f      	b.n	8007998 <HAL_RCC_OscConfig+0x1e0>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078c0:	d30a      	bcc.n	80078d8 <HAL_RCC_OscConfig+0x120>
 80078c2:	4b5d      	ldr	r3, [pc, #372]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	029b      	lsls	r3, r3, #10
 80078d0:	4959      	ldr	r1, [pc, #356]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	60cb      	str	r3, [r1, #12]
 80078d6:	e05f      	b.n	8007998 <HAL_RCC_OscConfig+0x1e0>
 80078d8:	4b57      	ldr	r3, [pc, #348]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	03db      	lsls	r3, r3, #15
 80078e6:	4954      	ldr	r1, [pc, #336]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	60cb      	str	r3, [r1, #12]
 80078ec:	e054      	b.n	8007998 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80078ee:	4b52      	ldr	r3, [pc, #328]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	4a51      	ldr	r2, [pc, #324]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 80078f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80078f8:	6093      	str	r3, [r2, #8]
 80078fa:	4b4f      	ldr	r3, [pc, #316]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007906:	494c      	ldr	r1, [pc, #304]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007908:	4313      	orrs	r3, r2
 800790a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007910:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007914:	d309      	bcc.n	800792a <HAL_RCC_OscConfig+0x172>
 8007916:	4b48      	ldr	r3, [pc, #288]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f023 021f 	bic.w	r2, r3, #31
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	4945      	ldr	r1, [pc, #276]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007924:	4313      	orrs	r3, r2
 8007926:	60cb      	str	r3, [r1, #12]
 8007928:	e028      	b.n	800797c <HAL_RCC_OscConfig+0x1c4>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792e:	2b00      	cmp	r3, #0
 8007930:	da0a      	bge.n	8007948 <HAL_RCC_OscConfig+0x190>
 8007932:	4b41      	ldr	r3, [pc, #260]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	015b      	lsls	r3, r3, #5
 8007940:	493d      	ldr	r1, [pc, #244]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007942:	4313      	orrs	r3, r2
 8007944:	60cb      	str	r3, [r1, #12]
 8007946:	e019      	b.n	800797c <HAL_RCC_OscConfig+0x1c4>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007950:	d30a      	bcc.n	8007968 <HAL_RCC_OscConfig+0x1b0>
 8007952:	4b39      	ldr	r3, [pc, #228]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	029b      	lsls	r3, r3, #10
 8007960:	4935      	ldr	r1, [pc, #212]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007962:	4313      	orrs	r3, r2
 8007964:	60cb      	str	r3, [r1, #12]
 8007966:	e009      	b.n	800797c <HAL_RCC_OscConfig+0x1c4>
 8007968:	4b33      	ldr	r3, [pc, #204]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a1b      	ldr	r3, [r3, #32]
 8007974:	03db      	lsls	r3, r3, #15
 8007976:	4930      	ldr	r1, [pc, #192]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007978:	4313      	orrs	r3, r2
 800797a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800797c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10a      	bne.n	8007998 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007986:	4618      	mov	r0, r3
 8007988:	f001 f9a0 	bl	8008ccc <RCC_SetFlashLatencyFromMSIRange>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d002      	beq.n	8007998 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	f000 bde5 	b.w	8008562 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8007998:	f001 f8de 	bl	8008b58 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800799c:	4b27      	ldr	r3, [pc, #156]	@ (8007a3c <HAL_RCC_OscConfig+0x284>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fb f9f5 	bl	8002d90 <HAL_InitTick>
 80079a6:	4603      	mov	r3, r0
 80079a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80079ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 808a 	beq.w	8007aca <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80079b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079ba:	f000 bdd2 	b.w	8008562 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d066      	beq.n	8007a94 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80079c6:	4b1c      	ldr	r3, [pc, #112]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a1b      	ldr	r2, [pc, #108]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 80079cc:	f043 0301 	orr.w	r3, r3, #1
 80079d0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80079d2:	f7fb fb69 	bl	80030a8 <HAL_GetTick>
 80079d6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80079d8:	e009      	b.n	80079ee <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80079da:	f7fb fb65 	bl	80030a8 <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d902      	bls.n	80079ee <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	f000 bdba 	b.w	8008562 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80079ee:	4b12      	ldr	r3, [pc, #72]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0304 	and.w	r3, r3, #4
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d0ef      	beq.n	80079da <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80079fa:	4b0f      	ldr	r3, [pc, #60]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	4a0e      	ldr	r2, [pc, #56]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007a00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007a04:	6093      	str	r3, [r2, #8]
 8007a06:	4b0c      	ldr	r3, [pc, #48]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a12:	4909      	ldr	r1, [pc, #36]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007a20:	d30e      	bcc.n	8007a40 <HAL_RCC_OscConfig+0x288>
 8007a22:	4b05      	ldr	r3, [pc, #20]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f023 021f 	bic.w	r2, r3, #31
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	4902      	ldr	r1, [pc, #8]	@ (8007a38 <HAL_RCC_OscConfig+0x280>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	60cb      	str	r3, [r1, #12]
 8007a34:	e04a      	b.n	8007acc <HAL_RCC_OscConfig+0x314>
 8007a36:	bf00      	nop
 8007a38:	46020c00 	.word	0x46020c00
 8007a3c:	20000d04 	.word	0x20000d04
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	da0a      	bge.n	8007a5e <HAL_RCC_OscConfig+0x2a6>
 8007a48:	4b98      	ldr	r3, [pc, #608]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	015b      	lsls	r3, r3, #5
 8007a56:	4995      	ldr	r1, [pc, #596]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60cb      	str	r3, [r1, #12]
 8007a5c:	e036      	b.n	8007acc <HAL_RCC_OscConfig+0x314>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a66:	d30a      	bcc.n	8007a7e <HAL_RCC_OscConfig+0x2c6>
 8007a68:	4b90      	ldr	r3, [pc, #576]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	029b      	lsls	r3, r3, #10
 8007a76:	498d      	ldr	r1, [pc, #564]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	60cb      	str	r3, [r1, #12]
 8007a7c:	e026      	b.n	8007acc <HAL_RCC_OscConfig+0x314>
 8007a7e:	4b8b      	ldr	r3, [pc, #556]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	03db      	lsls	r3, r3, #15
 8007a8c:	4987      	ldr	r1, [pc, #540]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60cb      	str	r3, [r1, #12]
 8007a92:	e01b      	b.n	8007acc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8007a94:	4b85      	ldr	r3, [pc, #532]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a84      	ldr	r2, [pc, #528]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007a9a:	f023 0301 	bic.w	r3, r3, #1
 8007a9e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007aa0:	f7fb fb02 	bl	80030a8 <HAL_GetTick>
 8007aa4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007aa6:	e009      	b.n	8007abc <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007aa8:	f7fb fafe 	bl	80030a8 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d902      	bls.n	8007abc <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	f000 bd53 	b.w	8008562 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007abc:	4b7b      	ldr	r3, [pc, #492]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0304 	and.w	r3, r3, #4
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1ef      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x2f0>
 8007ac8:	e000      	b.n	8007acc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007aca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 808b 	beq.w	8007bf0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007adc:	2b08      	cmp	r3, #8
 8007ade:	d005      	beq.n	8007aec <HAL_RCC_OscConfig+0x334>
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae2:	2b0c      	cmp	r3, #12
 8007ae4:	d109      	bne.n	8007afa <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d106      	bne.n	8007afa <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d17d      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	f000 bd34 	b.w	8008562 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b02:	d106      	bne.n	8007b12 <HAL_RCC_OscConfig+0x35a>
 8007b04:	4b69      	ldr	r3, [pc, #420]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a68      	ldr	r2, [pc, #416]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b0e:	6013      	str	r3, [r2, #0]
 8007b10:	e041      	b.n	8007b96 <HAL_RCC_OscConfig+0x3de>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b1a:	d112      	bne.n	8007b42 <HAL_RCC_OscConfig+0x38a>
 8007b1c:	4b63      	ldr	r3, [pc, #396]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a62      	ldr	r2, [pc, #392]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	4b60      	ldr	r3, [pc, #384]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a5f      	ldr	r2, [pc, #380]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b2e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007b32:	6013      	str	r3, [r2, #0]
 8007b34:	4b5d      	ldr	r3, [pc, #372]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a5c      	ldr	r2, [pc, #368]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	e029      	b.n	8007b96 <HAL_RCC_OscConfig+0x3de>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8007b4a:	d112      	bne.n	8007b72 <HAL_RCC_OscConfig+0x3ba>
 8007b4c:	4b57      	ldr	r3, [pc, #348]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a56      	ldr	r2, [pc, #344]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	4b54      	ldr	r3, [pc, #336]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a53      	ldr	r2, [pc, #332]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	4b51      	ldr	r3, [pc, #324]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a50      	ldr	r2, [pc, #320]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	e011      	b.n	8007b96 <HAL_RCC_OscConfig+0x3de>
 8007b72:	4b4e      	ldr	r3, [pc, #312]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a4d      	ldr	r2, [pc, #308]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b7c:	6013      	str	r3, [r2, #0]
 8007b7e:	4b4b      	ldr	r3, [pc, #300]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a4a      	ldr	r2, [pc, #296]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b88:	6013      	str	r3, [r2, #0]
 8007b8a:	4b48      	ldr	r3, [pc, #288]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a47      	ldr	r2, [pc, #284]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007b90:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007b94:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d014      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8007b9e:	f7fb fa83 	bl	80030a8 <HAL_GetTick>
 8007ba2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ba4:	e009      	b.n	8007bba <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ba6:	f7fb fa7f 	bl	80030a8 <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	2b64      	cmp	r3, #100	@ 0x64
 8007bb2:	d902      	bls.n	8007bba <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	f000 bcd4 	b.w	8008562 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007bba:	4b3c      	ldr	r3, [pc, #240]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d0ef      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x3ee>
 8007bc6:	e013      	b.n	8007bf0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8007bc8:	f7fb fa6e 	bl	80030a8 <HAL_GetTick>
 8007bcc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007bce:	e009      	b.n	8007be4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bd0:	f7fb fa6a 	bl	80030a8 <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	2b64      	cmp	r3, #100	@ 0x64
 8007bdc:	d902      	bls.n	8007be4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	f000 bcbf 	b.w	8008562 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007be4:	4b31      	ldr	r3, [pc, #196]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1ef      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0302 	and.w	r3, r3, #2
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d05f      	beq.n	8007cbc <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	d005      	beq.n	8007c0e <HAL_RCC_OscConfig+0x456>
 8007c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c04:	2b0c      	cmp	r3, #12
 8007c06:	d114      	bne.n	8007c32 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d111      	bne.n	8007c32 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d102      	bne.n	8007c1c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	f000 bca3 	b.w	8008562 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007c1c:	4b23      	ldr	r3, [pc, #140]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	041b      	lsls	r3, r3, #16
 8007c2a:	4920      	ldr	r1, [pc, #128]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007c30:	e044      	b.n	8007cbc <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d024      	beq.n	8007c84 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8007c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c44:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007c46:	f7fb fa2f 	bl	80030a8 <HAL_GetTick>
 8007c4a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c4c:	e009      	b.n	8007c62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c4e:	f7fb fa2b 	bl	80030a8 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d902      	bls.n	8007c62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	f000 bc80 	b.w	8008562 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c62:	4b12      	ldr	r3, [pc, #72]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0ef      	beq.n	8007c4e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	041b      	lsls	r3, r3, #16
 8007c7c:	490b      	ldr	r1, [pc, #44]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	610b      	str	r3, [r1, #16]
 8007c82:	e01b      	b.n	8007cbc <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8007c84:	4b09      	ldr	r3, [pc, #36]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a08      	ldr	r2, [pc, #32]	@ (8007cac <HAL_RCC_OscConfig+0x4f4>)
 8007c8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c8e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007c90:	f7fb fa0a 	bl	80030a8 <HAL_GetTick>
 8007c94:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c96:	e00b      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c98:	f7fb fa06 	bl	80030a8 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d904      	bls.n	8007cb0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	f000 bc5b 	b.w	8008562 <HAL_RCC_OscConfig+0xdaa>
 8007cac:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007cb0:	4baf      	ldr	r3, [pc, #700]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1ed      	bne.n	8007c98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0308 	and.w	r3, r3, #8
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 80c8 	beq.w	8007e5a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cd0:	4ba7      	ldr	r3, [pc, #668]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cd6:	f003 0304 	and.w	r3, r3, #4
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d111      	bne.n	8007d02 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cde:	4ba4      	ldr	r3, [pc, #656]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ce4:	4aa2      	ldr	r2, [pc, #648]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007ce6:	f043 0304 	orr.w	r3, r3, #4
 8007cea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007cee:	4ba0      	ldr	r3, [pc, #640]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cf4:	f003 0304 	and.w	r3, r3, #4
 8007cf8:	617b      	str	r3, [r7, #20]
 8007cfa:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007d02:	4b9c      	ldr	r3, [pc, #624]	@ (8007f74 <HAL_RCC_OscConfig+0x7bc>)
 8007d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d119      	bne.n	8007d42 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007d0e:	4b99      	ldr	r3, [pc, #612]	@ (8007f74 <HAL_RCC_OscConfig+0x7bc>)
 8007d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d12:	4a98      	ldr	r2, [pc, #608]	@ (8007f74 <HAL_RCC_OscConfig+0x7bc>)
 8007d14:	f043 0301 	orr.w	r3, r3, #1
 8007d18:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d1a:	f7fb f9c5 	bl	80030a8 <HAL_GetTick>
 8007d1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007d20:	e009      	b.n	8007d36 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d22:	f7fb f9c1 	bl	80030a8 <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d902      	bls.n	8007d36 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	f000 bc16 	b.w	8008562 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007d36:	4b8f      	ldr	r3, [pc, #572]	@ (8007f74 <HAL_RCC_OscConfig+0x7bc>)
 8007d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0ef      	beq.n	8007d22 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d05f      	beq.n	8007e0a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8007d4a:	4b89      	ldr	r3, [pc, #548]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d50:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	699a      	ldr	r2, [r3, #24]
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d037      	beq.n	8007dd0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d006      	beq.n	8007d78 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d101      	bne.n	8007d78 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e3f4      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8007d78:	6a3b      	ldr	r3, [r7, #32]
 8007d7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d01b      	beq.n	8007dba <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8007d82:	4b7b      	ldr	r3, [pc, #492]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d88:	4a79      	ldr	r2, [pc, #484]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007d8a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8007d8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8007d92:	f7fb f989 	bl	80030a8 <HAL_GetTick>
 8007d96:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007d98:	e008      	b.n	8007dac <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d9a:	f7fb f985 	bl	80030a8 <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	2b05      	cmp	r3, #5
 8007da6:	d901      	bls.n	8007dac <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e3da      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007dac:	4b70      	ldr	r3, [pc, #448]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007dae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007db2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1ef      	bne.n	8007d9a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8007dba:	4b6d      	ldr	r3, [pc, #436]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dc0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	4969      	ldr	r1, [pc, #420]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8007dd0:	4b67      	ldr	r3, [pc, #412]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007dd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dd6:	4a66      	ldr	r2, [pc, #408]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007dd8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ddc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8007de0:	f7fb f962 	bl	80030a8 <HAL_GetTick>
 8007de4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007de6:	e008      	b.n	8007dfa <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007de8:	f7fb f95e 	bl	80030a8 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	2b05      	cmp	r3, #5
 8007df4:	d901      	bls.n	8007dfa <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e3b3      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007dfa:	4b5d      	ldr	r3, [pc, #372]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0ef      	beq.n	8007de8 <HAL_RCC_OscConfig+0x630>
 8007e08:	e01b      	b.n	8007e42 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8007e0a:	4b59      	ldr	r3, [pc, #356]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007e0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e10:	4a57      	ldr	r2, [pc, #348]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007e12:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8007e16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8007e1a:	f7fb f945 	bl	80030a8 <HAL_GetTick>
 8007e1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007e20:	e008      	b.n	8007e34 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e22:	f7fb f941 	bl	80030a8 <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	2b05      	cmp	r3, #5
 8007e2e:	d901      	bls.n	8007e34 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e396      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007e34:	4b4e      	ldr	r3, [pc, #312]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007e36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1ef      	bne.n	8007e22 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e42:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d107      	bne.n	8007e5a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e4a:	4b49      	ldr	r3, [pc, #292]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e50:	4a47      	ldr	r2, [pc, #284]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007e52:	f023 0304 	bic.w	r3, r3, #4
 8007e56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0304 	and.w	r3, r3, #4
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 8111 	beq.w	800808a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e6e:	4b40      	ldr	r3, [pc, #256]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e74:	f003 0304 	and.w	r3, r3, #4
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d111      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e7c:	4b3c      	ldr	r3, [pc, #240]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e82:	4a3b      	ldr	r2, [pc, #236]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007e84:	f043 0304 	orr.w	r3, r3, #4
 8007e88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007e8c:	4b38      	ldr	r3, [pc, #224]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e92:	f003 0304 	and.w	r3, r3, #4
 8007e96:	613b      	str	r3, [r7, #16]
 8007e98:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007ea0:	4b34      	ldr	r3, [pc, #208]	@ (8007f74 <HAL_RCC_OscConfig+0x7bc>)
 8007ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d118      	bne.n	8007ede <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007eac:	4b31      	ldr	r3, [pc, #196]	@ (8007f74 <HAL_RCC_OscConfig+0x7bc>)
 8007eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb0:	4a30      	ldr	r2, [pc, #192]	@ (8007f74 <HAL_RCC_OscConfig+0x7bc>)
 8007eb2:	f043 0301 	orr.w	r3, r3, #1
 8007eb6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007eb8:	f7fb f8f6 	bl	80030a8 <HAL_GetTick>
 8007ebc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ec0:	f7fb f8f2 	bl	80030a8 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e347      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007ed2:	4b28      	ldr	r3, [pc, #160]	@ (8007f74 <HAL_RCC_OscConfig+0x7bc>)
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0f0      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d01f      	beq.n	8007f2a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f003 0304 	and.w	r3, r3, #4
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d010      	beq.n	8007f18 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007efc:	4a1c      	ldr	r2, [pc, #112]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007efe:	f043 0304 	orr.w	r3, r3, #4
 8007f02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007f06:	4b1a      	ldr	r3, [pc, #104]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f0c:	4a18      	ldr	r2, [pc, #96]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007f0e:	f043 0301 	orr.w	r3, r3, #1
 8007f12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007f16:	e018      	b.n	8007f4a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007f18:	4b15      	ldr	r3, [pc, #84]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007f1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f1e:	4a14      	ldr	r2, [pc, #80]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007f20:	f043 0301 	orr.w	r3, r3, #1
 8007f24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007f28:	e00f      	b.n	8007f4a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007f2a:	4b11      	ldr	r3, [pc, #68]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f30:	4a0f      	ldr	r2, [pc, #60]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007f32:	f023 0301 	bic.w	r3, r3, #1
 8007f36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f40:	4a0b      	ldr	r2, [pc, #44]	@ (8007f70 <HAL_RCC_OscConfig+0x7b8>)
 8007f42:	f023 0304 	bic.w	r3, r3, #4
 8007f46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d057      	beq.n	8008002 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8007f52:	f7fb f8a9 	bl	80030a8 <HAL_GetTick>
 8007f56:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f58:	e00e      	b.n	8007f78 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f5a:	f7fb f8a5 	bl	80030a8 <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d905      	bls.n	8007f78 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e2f8      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
 8007f70:	46020c00 	.word	0x46020c00
 8007f74:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f78:	4b9c      	ldr	r3, [pc, #624]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 8007f7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d0e9      	beq.n	8007f5a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d01b      	beq.n	8007fca <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007f92:	4b96      	ldr	r3, [pc, #600]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 8007f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f98:	4a94      	ldr	r2, [pc, #592]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 8007f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007fa2:	e00a      	b.n	8007fba <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fa4:	f7fb f880 	bl	80030a8 <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d901      	bls.n	8007fba <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e2d3      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007fba:	4b8c      	ldr	r3, [pc, #560]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 8007fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d0ed      	beq.n	8007fa4 <HAL_RCC_OscConfig+0x7ec>
 8007fc8:	e053      	b.n	8008072 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007fca:	4b88      	ldr	r3, [pc, #544]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 8007fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fd0:	4a86      	ldr	r2, [pc, #536]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 8007fd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007fda:	e00a      	b.n	8007ff2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fdc:	f7fb f864 	bl	80030a8 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d901      	bls.n	8007ff2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e2b7      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007ff2:	4b7e      	ldr	r3, [pc, #504]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 8007ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ff8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1ed      	bne.n	8007fdc <HAL_RCC_OscConfig+0x824>
 8008000:	e037      	b.n	8008072 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8008002:	f7fb f851 	bl	80030a8 <HAL_GetTick>
 8008006:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008008:	e00a      	b.n	8008020 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800800a:	f7fb f84d 	bl	80030a8 <HAL_GetTick>
 800800e:	4602      	mov	r2, r0
 8008010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008018:	4293      	cmp	r3, r2
 800801a:	d901      	bls.n	8008020 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e2a0      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008020:	4b72      	ldr	r3, [pc, #456]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 8008022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008026:	f003 0302 	and.w	r3, r3, #2
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1ed      	bne.n	800800a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800802e:	4b6f      	ldr	r3, [pc, #444]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 8008030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008038:	2b00      	cmp	r3, #0
 800803a:	d01a      	beq.n	8008072 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800803c:	4b6b      	ldr	r3, [pc, #428]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 800803e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008042:	4a6a      	ldr	r2, [pc, #424]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 8008044:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008048:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800804c:	e00a      	b.n	8008064 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800804e:	f7fb f82b 	bl	80030a8 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800805c:	4293      	cmp	r3, r2
 800805e:	d901      	bls.n	8008064 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e27e      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008064:	4b61      	ldr	r3, [pc, #388]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 8008066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800806a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1ed      	bne.n	800804e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008072:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008076:	2b01      	cmp	r3, #1
 8008078:	d107      	bne.n	800808a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800807a:	4b5c      	ldr	r3, [pc, #368]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 800807c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008080:	4a5a      	ldr	r2, [pc, #360]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 8008082:	f023 0304 	bic.w	r3, r3, #4
 8008086:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0320 	and.w	r3, r3, #32
 8008092:	2b00      	cmp	r3, #0
 8008094:	d036      	beq.n	8008104 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809a:	2b00      	cmp	r3, #0
 800809c:	d019      	beq.n	80080d2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800809e:	4b53      	ldr	r3, [pc, #332]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a52      	ldr	r2, [pc, #328]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 80080a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80080a8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80080aa:	f7fa fffd 	bl	80030a8 <HAL_GetTick>
 80080ae:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80080b0:	e008      	b.n	80080c4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080b2:	f7fa fff9 	bl	80030a8 <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d901      	bls.n	80080c4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e24e      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80080c4:	4b49      	ldr	r3, [pc, #292]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d0f0      	beq.n	80080b2 <HAL_RCC_OscConfig+0x8fa>
 80080d0:	e018      	b.n	8008104 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80080d2:	4b46      	ldr	r3, [pc, #280]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a45      	ldr	r2, [pc, #276]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 80080d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080dc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80080de:	f7fa ffe3 	bl	80030a8 <HAL_GetTick>
 80080e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80080e4:	e008      	b.n	80080f8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080e6:	f7fa ffdf 	bl	80030a8 <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d901      	bls.n	80080f8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e234      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80080f8:	4b3c      	ldr	r3, [pc, #240]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1f0      	bne.n	80080e6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800810c:	2b00      	cmp	r3, #0
 800810e:	d036      	beq.n	800817e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008114:	2b00      	cmp	r3, #0
 8008116:	d019      	beq.n	800814c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8008118:	4b34      	ldr	r3, [pc, #208]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a33      	ldr	r2, [pc, #204]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 800811e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008122:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008124:	f7fa ffc0 	bl	80030a8 <HAL_GetTick>
 8008128:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800812a:	e008      	b.n	800813e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800812c:	f7fa ffbc 	bl	80030a8 <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	2b02      	cmp	r3, #2
 8008138:	d901      	bls.n	800813e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e211      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800813e:	4b2b      	ldr	r3, [pc, #172]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0f0      	beq.n	800812c <HAL_RCC_OscConfig+0x974>
 800814a:	e018      	b.n	800817e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800814c:	4b27      	ldr	r3, [pc, #156]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a26      	ldr	r2, [pc, #152]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 8008152:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008156:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008158:	f7fa ffa6 	bl	80030a8 <HAL_GetTick>
 800815c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800815e:	e008      	b.n	8008172 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008160:	f7fa ffa2 	bl	80030a8 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	2b02      	cmp	r3, #2
 800816c:	d901      	bls.n	8008172 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e1f7      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008172:	4b1e      	ldr	r3, [pc, #120]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1f0      	bne.n	8008160 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008186:	2b00      	cmp	r3, #0
 8008188:	d07f      	beq.n	800828a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800818e:	2b00      	cmp	r3, #0
 8008190:	d062      	beq.n	8008258 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8008192:	4b16      	ldr	r3, [pc, #88]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	4a15      	ldr	r2, [pc, #84]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 8008198:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800819c:	6093      	str	r3, [r2, #8]
 800819e:	4b13      	ldr	r3, [pc, #76]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081aa:	4910      	ldr	r1, [pc, #64]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80081b8:	d309      	bcc.n	80081ce <HAL_RCC_OscConfig+0xa16>
 80081ba:	4b0c      	ldr	r3, [pc, #48]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	f023 021f 	bic.w	r2, r3, #31
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	4909      	ldr	r1, [pc, #36]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	60cb      	str	r3, [r1, #12]
 80081cc:	e02a      	b.n	8008224 <HAL_RCC_OscConfig+0xa6c>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	da0c      	bge.n	80081f0 <HAL_RCC_OscConfig+0xa38>
 80081d6:	4b05      	ldr	r3, [pc, #20]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	015b      	lsls	r3, r3, #5
 80081e4:	4901      	ldr	r1, [pc, #4]	@ (80081ec <HAL_RCC_OscConfig+0xa34>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60cb      	str	r3, [r1, #12]
 80081ea:	e01b      	b.n	8008224 <HAL_RCC_OscConfig+0xa6c>
 80081ec:	46020c00 	.word	0x46020c00
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081f8:	d30a      	bcc.n	8008210 <HAL_RCC_OscConfig+0xa58>
 80081fa:	4ba1      	ldr	r3, [pc, #644]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	029b      	lsls	r3, r3, #10
 8008208:	499d      	ldr	r1, [pc, #628]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 800820a:	4313      	orrs	r3, r2
 800820c:	60cb      	str	r3, [r1, #12]
 800820e:	e009      	b.n	8008224 <HAL_RCC_OscConfig+0xa6c>
 8008210:	4b9b      	ldr	r3, [pc, #620]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	03db      	lsls	r3, r3, #15
 800821e:	4998      	ldr	r1, [pc, #608]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 8008220:	4313      	orrs	r3, r2
 8008222:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8008224:	4b96      	ldr	r3, [pc, #600]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a95      	ldr	r2, [pc, #596]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 800822a:	f043 0310 	orr.w	r3, r3, #16
 800822e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008230:	f7fa ff3a 	bl	80030a8 <HAL_GetTick>
 8008234:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008236:	e008      	b.n	800824a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008238:	f7fa ff36 	bl	80030a8 <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	2b02      	cmp	r3, #2
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e18b      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800824a:	4b8d      	ldr	r3, [pc, #564]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0f0      	beq.n	8008238 <HAL_RCC_OscConfig+0xa80>
 8008256:	e018      	b.n	800828a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8008258:	4b89      	ldr	r3, [pc, #548]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a88      	ldr	r2, [pc, #544]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 800825e:	f023 0310 	bic.w	r3, r3, #16
 8008262:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008264:	f7fa ff20 	bl	80030a8 <HAL_GetTick>
 8008268:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800826a:	e008      	b.n	800827e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800826c:	f7fa ff1c 	bl	80030a8 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	2b02      	cmp	r3, #2
 8008278:	d901      	bls.n	800827e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e171      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800827e:	4b80      	ldr	r3, [pc, #512]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0320 	and.w	r3, r3, #32
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1f0      	bne.n	800826c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 8166 	beq.w	8008560 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008294:	2300      	movs	r3, #0
 8008296:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800829a:	4b79      	ldr	r3, [pc, #484]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	f003 030c 	and.w	r3, r3, #12
 80082a2:	2b0c      	cmp	r3, #12
 80082a4:	f000 80f2 	beq.w	800848c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	f040 80c5 	bne.w	800843c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80082b2:	4b73      	ldr	r3, [pc, #460]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a72      	ldr	r2, [pc, #456]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 80082b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082bc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80082be:	f7fa fef3 	bl	80030a8 <HAL_GetTick>
 80082c2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80082c4:	e008      	b.n	80082d8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082c6:	f7fa feef 	bl	80030a8 <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d901      	bls.n	80082d8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e144      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80082d8:	4b69      	ldr	r3, [pc, #420]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1f0      	bne.n	80082c6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082e4:	4b66      	ldr	r3, [pc, #408]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 80082e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082ea:	f003 0304 	and.w	r3, r3, #4
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d111      	bne.n	8008316 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80082f2:	4b63      	ldr	r3, [pc, #396]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 80082f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082f8:	4a61      	ldr	r2, [pc, #388]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 80082fa:	f043 0304 	orr.w	r3, r3, #4
 80082fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008302:	4b5f      	ldr	r3, [pc, #380]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 8008304:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008308:	f003 0304 	and.w	r3, r3, #4
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8008310:	2301      	movs	r3, #1
 8008312:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8008316:	4b5b      	ldr	r3, [pc, #364]	@ (8008484 <HAL_RCC_OscConfig+0xccc>)
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800831e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008322:	d102      	bne.n	800832a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8008324:	2301      	movs	r3, #1
 8008326:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800832a:	4b56      	ldr	r3, [pc, #344]	@ (8008484 <HAL_RCC_OscConfig+0xccc>)
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	4a55      	ldr	r2, [pc, #340]	@ (8008484 <HAL_RCC_OscConfig+0xccc>)
 8008330:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008334:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8008336:	4b52      	ldr	r3, [pc, #328]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 8008338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800833a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800833e:	f023 0303 	bic.w	r3, r3, #3
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800834a:	3a01      	subs	r2, #1
 800834c:	0212      	lsls	r2, r2, #8
 800834e:	4311      	orrs	r1, r2
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008354:	430a      	orrs	r2, r1
 8008356:	494a      	ldr	r1, [pc, #296]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 8008358:	4313      	orrs	r3, r2
 800835a:	628b      	str	r3, [r1, #40]	@ 0x28
 800835c:	4b48      	ldr	r3, [pc, #288]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 800835e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008360:	4b49      	ldr	r3, [pc, #292]	@ (8008488 <HAL_RCC_OscConfig+0xcd0>)
 8008362:	4013      	ands	r3, r2
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008368:	3a01      	subs	r2, #1
 800836a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008372:	3a01      	subs	r2, #1
 8008374:	0252      	lsls	r2, r2, #9
 8008376:	b292      	uxth	r2, r2
 8008378:	4311      	orrs	r1, r2
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800837e:	3a01      	subs	r2, #1
 8008380:	0412      	lsls	r2, r2, #16
 8008382:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008386:	4311      	orrs	r1, r2
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800838c:	3a01      	subs	r2, #1
 800838e:	0612      	lsls	r2, r2, #24
 8008390:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008394:	430a      	orrs	r2, r1
 8008396:	493a      	ldr	r1, [pc, #232]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 8008398:	4313      	orrs	r3, r2
 800839a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800839c:	4b38      	ldr	r3, [pc, #224]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 800839e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a0:	4a37      	ldr	r2, [pc, #220]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 80083a2:	f023 0310 	bic.w	r3, r3, #16
 80083a6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083ac:	4a34      	ldr	r2, [pc, #208]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 80083ae:	00db      	lsls	r3, r3, #3
 80083b0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80083b2:	4b33      	ldr	r3, [pc, #204]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 80083b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b6:	4a32      	ldr	r2, [pc, #200]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 80083b8:	f043 0310 	orr.w	r3, r3, #16
 80083bc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80083be:	4b30      	ldr	r3, [pc, #192]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 80083c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c2:	f023 020c 	bic.w	r2, r3, #12
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ca:	492d      	ldr	r1, [pc, #180]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80083d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d105      	bne.n	80083e4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80083d8:	4b2a      	ldr	r3, [pc, #168]	@ (8008484 <HAL_RCC_OscConfig+0xccc>)
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	4a29      	ldr	r2, [pc, #164]	@ (8008484 <HAL_RCC_OscConfig+0xccc>)
 80083de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083e2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80083e4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d107      	bne.n	80083fc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80083ec:	4b24      	ldr	r3, [pc, #144]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 80083ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083f2:	4a23      	ldr	r2, [pc, #140]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 80083f4:	f023 0304 	bic.w	r3, r3, #4
 80083f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80083fc:	4b20      	ldr	r3, [pc, #128]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 80083fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008400:	4a1f      	ldr	r2, [pc, #124]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 8008402:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008406:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8008408:	4b1d      	ldr	r3, [pc, #116]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a1c      	ldr	r2, [pc, #112]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 800840e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008412:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008414:	f7fa fe48 	bl	80030a8 <HAL_GetTick>
 8008418:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800841a:	e008      	b.n	800842e <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800841c:	f7fa fe44 	bl	80030a8 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	2b02      	cmp	r3, #2
 8008428:	d901      	bls.n	800842e <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e099      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800842e:	4b14      	ldr	r3, [pc, #80]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d0f0      	beq.n	800841c <HAL_RCC_OscConfig+0xc64>
 800843a:	e091      	b.n	8008560 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800843c:	4b10      	ldr	r3, [pc, #64]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a0f      	ldr	r2, [pc, #60]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 8008442:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008446:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008448:	f7fa fe2e 	bl	80030a8 <HAL_GetTick>
 800844c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800844e:	e008      	b.n	8008462 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008450:	f7fa fe2a 	bl	80030a8 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e07f      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008462:	4b07      	ldr	r3, [pc, #28]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1f0      	bne.n	8008450 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800846e:	4b04      	ldr	r3, [pc, #16]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 8008470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008472:	4a03      	ldr	r2, [pc, #12]	@ (8008480 <HAL_RCC_OscConfig+0xcc8>)
 8008474:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8008478:	f023 0303 	bic.w	r3, r3, #3
 800847c:	6293      	str	r3, [r2, #40]	@ 0x28
 800847e:	e06f      	b.n	8008560 <HAL_RCC_OscConfig+0xda8>
 8008480:	46020c00 	.word	0x46020c00
 8008484:	46020800 	.word	0x46020800
 8008488:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800848c:	4b37      	ldr	r3, [pc, #220]	@ (800856c <HAL_RCC_OscConfig+0xdb4>)
 800848e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008490:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008492:	4b36      	ldr	r3, [pc, #216]	@ (800856c <HAL_RCC_OscConfig+0xdb4>)
 8008494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008496:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800849c:	2b01      	cmp	r3, #1
 800849e:	d039      	beq.n	8008514 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	f003 0203 	and.w	r2, r3, #3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d132      	bne.n	8008514 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	0a1b      	lsrs	r3, r3, #8
 80084b2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ba:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80084bc:	429a      	cmp	r2, r3
 80084be:	d129      	bne.n	8008514 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d122      	bne.n	8008514 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084d8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80084da:	429a      	cmp	r2, r3
 80084dc:	d11a      	bne.n	8008514 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	0a5b      	lsrs	r3, r3, #9
 80084e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d111      	bne.n	8008514 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	0c1b      	lsrs	r3, r3, #16
 80084f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084fc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084fe:	429a      	cmp	r2, r3
 8008500:	d108      	bne.n	8008514 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	0e1b      	lsrs	r3, r3, #24
 8008506:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800850e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008510:	429a      	cmp	r2, r3
 8008512:	d001      	beq.n	8008518 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e024      	b.n	8008562 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008518:	4b14      	ldr	r3, [pc, #80]	@ (800856c <HAL_RCC_OscConfig+0xdb4>)
 800851a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800851c:	08db      	lsrs	r3, r3, #3
 800851e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008526:	429a      	cmp	r2, r3
 8008528:	d01a      	beq.n	8008560 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800852a:	4b10      	ldr	r3, [pc, #64]	@ (800856c <HAL_RCC_OscConfig+0xdb4>)
 800852c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852e:	4a0f      	ldr	r2, [pc, #60]	@ (800856c <HAL_RCC_OscConfig+0xdb4>)
 8008530:	f023 0310 	bic.w	r3, r3, #16
 8008534:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008536:	f7fa fdb7 	bl	80030a8 <HAL_GetTick>
 800853a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800853c:	bf00      	nop
 800853e:	f7fa fdb3 	bl	80030a8 <HAL_GetTick>
 8008542:	4602      	mov	r2, r0
 8008544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008546:	4293      	cmp	r3, r2
 8008548:	d0f9      	beq.n	800853e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800854e:	4a07      	ldr	r2, [pc, #28]	@ (800856c <HAL_RCC_OscConfig+0xdb4>)
 8008550:	00db      	lsls	r3, r3, #3
 8008552:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008554:	4b05      	ldr	r3, [pc, #20]	@ (800856c <HAL_RCC_OscConfig+0xdb4>)
 8008556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008558:	4a04      	ldr	r2, [pc, #16]	@ (800856c <HAL_RCC_OscConfig+0xdb4>)
 800855a:	f043 0310 	orr.w	r3, r3, #16
 800855e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3738      	adds	r7, #56	@ 0x38
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	46020c00 	.word	0x46020c00

08008570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e1d9      	b.n	8008938 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008584:	4b9b      	ldr	r3, [pc, #620]	@ (80087f4 <HAL_RCC_ClockConfig+0x284>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 030f 	and.w	r3, r3, #15
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	429a      	cmp	r2, r3
 8008590:	d910      	bls.n	80085b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008592:	4b98      	ldr	r3, [pc, #608]	@ (80087f4 <HAL_RCC_ClockConfig+0x284>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f023 020f 	bic.w	r2, r3, #15
 800859a:	4996      	ldr	r1, [pc, #600]	@ (80087f4 <HAL_RCC_ClockConfig+0x284>)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	4313      	orrs	r3, r2
 80085a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085a2:	4b94      	ldr	r3, [pc, #592]	@ (80087f4 <HAL_RCC_ClockConfig+0x284>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 030f 	and.w	r3, r3, #15
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d001      	beq.n	80085b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e1c1      	b.n	8008938 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0310 	and.w	r3, r3, #16
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d010      	beq.n	80085e2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	695a      	ldr	r2, [r3, #20]
 80085c4:	4b8c      	ldr	r3, [pc, #560]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 80085c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d908      	bls.n	80085e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80085d0:	4b89      	ldr	r3, [pc, #548]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 80085d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	4986      	ldr	r1, [pc, #536]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0308 	and.w	r3, r3, #8
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d012      	beq.n	8008614 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691a      	ldr	r2, [r3, #16]
 80085f2:	4b81      	ldr	r3, [pc, #516]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	091b      	lsrs	r3, r3, #4
 80085f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d909      	bls.n	8008614 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8008600:	4b7d      	ldr	r3, [pc, #500]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 8008602:	6a1b      	ldr	r3, [r3, #32]
 8008604:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	011b      	lsls	r3, r3, #4
 800860e:	497a      	ldr	r1, [pc, #488]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 8008610:	4313      	orrs	r3, r2
 8008612:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b00      	cmp	r3, #0
 800861e:	d010      	beq.n	8008642 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	4b74      	ldr	r3, [pc, #464]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 8008626:	6a1b      	ldr	r3, [r3, #32]
 8008628:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800862c:	429a      	cmp	r2, r3
 800862e:	d908      	bls.n	8008642 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008630:	4b71      	ldr	r3, [pc, #452]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 8008632:	6a1b      	ldr	r3, [r3, #32]
 8008634:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	496e      	ldr	r1, [pc, #440]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 800863e:	4313      	orrs	r3, r2
 8008640:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b00      	cmp	r3, #0
 800864c:	d010      	beq.n	8008670 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	689a      	ldr	r2, [r3, #8]
 8008652:	4b69      	ldr	r3, [pc, #420]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 8008654:	6a1b      	ldr	r3, [r3, #32]
 8008656:	f003 030f 	and.w	r3, r3, #15
 800865a:	429a      	cmp	r2, r3
 800865c:	d908      	bls.n	8008670 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800865e:	4b66      	ldr	r3, [pc, #408]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	f023 020f 	bic.w	r2, r3, #15
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	4963      	ldr	r1, [pc, #396]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 800866c:	4313      	orrs	r3, r2
 800866e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	2b00      	cmp	r3, #0
 800867a:	f000 80d2 	beq.w	8008822 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800867e:	2300      	movs	r3, #0
 8008680:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	2b03      	cmp	r3, #3
 8008688:	d143      	bne.n	8008712 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800868a:	4b5b      	ldr	r3, [pc, #364]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 800868c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008690:	f003 0304 	and.w	r3, r3, #4
 8008694:	2b00      	cmp	r3, #0
 8008696:	d110      	bne.n	80086ba <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008698:	4b57      	ldr	r3, [pc, #348]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 800869a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800869e:	4a56      	ldr	r2, [pc, #344]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 80086a0:	f043 0304 	orr.w	r3, r3, #4
 80086a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80086a8:	4b53      	ldr	r3, [pc, #332]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 80086aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086ae:	f003 0304 	and.w	r3, r3, #4
 80086b2:	60bb      	str	r3, [r7, #8]
 80086b4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80086b6:	2301      	movs	r3, #1
 80086b8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80086ba:	f7fa fcf5 	bl	80030a8 <HAL_GetTick>
 80086be:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80086c0:	4b4e      	ldr	r3, [pc, #312]	@ (80087fc <HAL_RCC_ClockConfig+0x28c>)
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00f      	beq.n	80086ec <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80086cc:	e008      	b.n	80086e0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80086ce:	f7fa fceb 	bl	80030a8 <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d901      	bls.n	80086e0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e12b      	b.n	8008938 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80086e0:	4b46      	ldr	r3, [pc, #280]	@ (80087fc <HAL_RCC_ClockConfig+0x28c>)
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d0f0      	beq.n	80086ce <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80086ec:	7dfb      	ldrb	r3, [r7, #23]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d107      	bne.n	8008702 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80086f2:	4b41      	ldr	r3, [pc, #260]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 80086f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086f8:	4a3f      	ldr	r2, [pc, #252]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 80086fa:	f023 0304 	bic.w	r3, r3, #4
 80086fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008702:	4b3d      	ldr	r3, [pc, #244]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d121      	bne.n	8008752 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e112      	b.n	8008938 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	2b02      	cmp	r3, #2
 8008718:	d107      	bne.n	800872a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800871a:	4b37      	ldr	r3, [pc, #220]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d115      	bne.n	8008752 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e106      	b.n	8008938 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d107      	bne.n	8008742 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008732:	4b31      	ldr	r3, [pc, #196]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0304 	and.w	r3, r3, #4
 800873a:	2b00      	cmp	r3, #0
 800873c:	d109      	bne.n	8008752 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e0fa      	b.n	8008938 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008742:	4b2d      	ldr	r3, [pc, #180]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e0f2      	b.n	8008938 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8008752:	4b29      	ldr	r3, [pc, #164]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	f023 0203 	bic.w	r2, r3, #3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	4926      	ldr	r1, [pc, #152]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 8008760:	4313      	orrs	r3, r2
 8008762:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8008764:	f7fa fca0 	bl	80030a8 <HAL_GetTick>
 8008768:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	2b03      	cmp	r3, #3
 8008770:	d112      	bne.n	8008798 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008772:	e00a      	b.n	800878a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008774:	f7fa fc98 	bl	80030a8 <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008782:	4293      	cmp	r3, r2
 8008784:	d901      	bls.n	800878a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e0d6      	b.n	8008938 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800878a:	4b1b      	ldr	r3, [pc, #108]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	f003 030c 	and.w	r3, r3, #12
 8008792:	2b0c      	cmp	r3, #12
 8008794:	d1ee      	bne.n	8008774 <HAL_RCC_ClockConfig+0x204>
 8008796:	e044      	b.n	8008822 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	2b02      	cmp	r3, #2
 800879e:	d112      	bne.n	80087c6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80087a0:	e00a      	b.n	80087b8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087a2:	f7fa fc81 	bl	80030a8 <HAL_GetTick>
 80087a6:	4602      	mov	r2, r0
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d901      	bls.n	80087b8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e0bf      	b.n	8008938 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80087b8:	4b0f      	ldr	r3, [pc, #60]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 80087ba:	69db      	ldr	r3, [r3, #28]
 80087bc:	f003 030c 	and.w	r3, r3, #12
 80087c0:	2b08      	cmp	r3, #8
 80087c2:	d1ee      	bne.n	80087a2 <HAL_RCC_ClockConfig+0x232>
 80087c4:	e02d      	b.n	8008822 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d123      	bne.n	8008816 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80087ce:	e00a      	b.n	80087e6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087d0:	f7fa fc6a 	bl	80030a8 <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087de:	4293      	cmp	r3, r2
 80087e0:	d901      	bls.n	80087e6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e0a8      	b.n	8008938 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80087e6:	4b04      	ldr	r3, [pc, #16]	@ (80087f8 <HAL_RCC_ClockConfig+0x288>)
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	f003 030c 	and.w	r3, r3, #12
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1ee      	bne.n	80087d0 <HAL_RCC_ClockConfig+0x260>
 80087f2:	e016      	b.n	8008822 <HAL_RCC_ClockConfig+0x2b2>
 80087f4:	40022000 	.word	0x40022000
 80087f8:	46020c00 	.word	0x46020c00
 80087fc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008800:	f7fa fc52 	bl	80030a8 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800880e:	4293      	cmp	r3, r2
 8008810:	d901      	bls.n	8008816 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e090      	b.n	8008938 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008816:	4b4a      	ldr	r3, [pc, #296]	@ (8008940 <HAL_RCC_ClockConfig+0x3d0>)
 8008818:	69db      	ldr	r3, [r3, #28]
 800881a:	f003 030c 	and.w	r3, r3, #12
 800881e:	2b04      	cmp	r3, #4
 8008820:	d1ee      	bne.n	8008800 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0302 	and.w	r3, r3, #2
 800882a:	2b00      	cmp	r3, #0
 800882c:	d010      	beq.n	8008850 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	689a      	ldr	r2, [r3, #8]
 8008832:	4b43      	ldr	r3, [pc, #268]	@ (8008940 <HAL_RCC_ClockConfig+0x3d0>)
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	f003 030f 	and.w	r3, r3, #15
 800883a:	429a      	cmp	r2, r3
 800883c:	d208      	bcs.n	8008850 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800883e:	4b40      	ldr	r3, [pc, #256]	@ (8008940 <HAL_RCC_ClockConfig+0x3d0>)
 8008840:	6a1b      	ldr	r3, [r3, #32]
 8008842:	f023 020f 	bic.w	r2, r3, #15
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	493d      	ldr	r1, [pc, #244]	@ (8008940 <HAL_RCC_ClockConfig+0x3d0>)
 800884c:	4313      	orrs	r3, r2
 800884e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008850:	4b3c      	ldr	r3, [pc, #240]	@ (8008944 <HAL_RCC_ClockConfig+0x3d4>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 030f 	and.w	r3, r3, #15
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	429a      	cmp	r2, r3
 800885c:	d210      	bcs.n	8008880 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800885e:	4b39      	ldr	r3, [pc, #228]	@ (8008944 <HAL_RCC_ClockConfig+0x3d4>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f023 020f 	bic.w	r2, r3, #15
 8008866:	4937      	ldr	r1, [pc, #220]	@ (8008944 <HAL_RCC_ClockConfig+0x3d4>)
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	4313      	orrs	r3, r2
 800886c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800886e:	4b35      	ldr	r3, [pc, #212]	@ (8008944 <HAL_RCC_ClockConfig+0x3d4>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 030f 	and.w	r3, r3, #15
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	429a      	cmp	r2, r3
 800887a:	d001      	beq.n	8008880 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e05b      	b.n	8008938 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0304 	and.w	r3, r3, #4
 8008888:	2b00      	cmp	r3, #0
 800888a:	d010      	beq.n	80088ae <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	68da      	ldr	r2, [r3, #12]
 8008890:	4b2b      	ldr	r3, [pc, #172]	@ (8008940 <HAL_RCC_ClockConfig+0x3d0>)
 8008892:	6a1b      	ldr	r3, [r3, #32]
 8008894:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008898:	429a      	cmp	r2, r3
 800889a:	d208      	bcs.n	80088ae <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800889c:	4b28      	ldr	r3, [pc, #160]	@ (8008940 <HAL_RCC_ClockConfig+0x3d0>)
 800889e:	6a1b      	ldr	r3, [r3, #32]
 80088a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	4925      	ldr	r1, [pc, #148]	@ (8008940 <HAL_RCC_ClockConfig+0x3d0>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0308 	and.w	r3, r3, #8
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d012      	beq.n	80088e0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	691a      	ldr	r2, [r3, #16]
 80088be:	4b20      	ldr	r3, [pc, #128]	@ (8008940 <HAL_RCC_ClockConfig+0x3d0>)
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	091b      	lsrs	r3, r3, #4
 80088c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d209      	bcs.n	80088e0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80088cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008940 <HAL_RCC_ClockConfig+0x3d0>)
 80088ce:	6a1b      	ldr	r3, [r3, #32]
 80088d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	011b      	lsls	r3, r3, #4
 80088da:	4919      	ldr	r1, [pc, #100]	@ (8008940 <HAL_RCC_ClockConfig+0x3d0>)
 80088dc:	4313      	orrs	r3, r2
 80088de:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0310 	and.w	r3, r3, #16
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d010      	beq.n	800890e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	695a      	ldr	r2, [r3, #20]
 80088f0:	4b13      	ldr	r3, [pc, #76]	@ (8008940 <HAL_RCC_ClockConfig+0x3d0>)
 80088f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d208      	bcs.n	800890e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80088fc:	4b10      	ldr	r3, [pc, #64]	@ (8008940 <HAL_RCC_ClockConfig+0x3d0>)
 80088fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008900:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	695b      	ldr	r3, [r3, #20]
 8008908:	490d      	ldr	r1, [pc, #52]	@ (8008940 <HAL_RCC_ClockConfig+0x3d0>)
 800890a:	4313      	orrs	r3, r2
 800890c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800890e:	f000 f821 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 8008912:	4602      	mov	r2, r0
 8008914:	4b0a      	ldr	r3, [pc, #40]	@ (8008940 <HAL_RCC_ClockConfig+0x3d0>)
 8008916:	6a1b      	ldr	r3, [r3, #32]
 8008918:	f003 030f 	and.w	r3, r3, #15
 800891c:	490a      	ldr	r1, [pc, #40]	@ (8008948 <HAL_RCC_ClockConfig+0x3d8>)
 800891e:	5ccb      	ldrb	r3, [r1, r3]
 8008920:	fa22 f303 	lsr.w	r3, r2, r3
 8008924:	4a09      	ldr	r2, [pc, #36]	@ (800894c <HAL_RCC_ClockConfig+0x3dc>)
 8008926:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008928:	4b09      	ldr	r3, [pc, #36]	@ (8008950 <HAL_RCC_ClockConfig+0x3e0>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4618      	mov	r0, r3
 800892e:	f7fa fa2f 	bl	8002d90 <HAL_InitTick>
 8008932:	4603      	mov	r3, r0
 8008934:	73fb      	strb	r3, [r7, #15]

  return status;
 8008936:	7bfb      	ldrb	r3, [r7, #15]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	46020c00 	.word	0x46020c00
 8008944:	40022000 	.word	0x40022000
 8008948:	0800d988 	.word	0x0800d988
 800894c:	20000d00 	.word	0x20000d00
 8008950:	20000d04 	.word	0x20000d04

08008954 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008954:	b480      	push	{r7}
 8008956:	b08b      	sub	sp, #44	@ 0x2c
 8008958:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800895e:	2300      	movs	r3, #0
 8008960:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008962:	4b78      	ldr	r3, [pc, #480]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	f003 030c 	and.w	r3, r3, #12
 800896a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800896c:	4b75      	ldr	r3, [pc, #468]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800896e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008970:	f003 0303 	and.w	r3, r3, #3
 8008974:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d005      	beq.n	8008988 <HAL_RCC_GetSysClockFreq+0x34>
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	2b0c      	cmp	r3, #12
 8008980:	d121      	bne.n	80089c6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d11e      	bne.n	80089c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8008988:	4b6e      	ldr	r3, [pc, #440]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d107      	bne.n	80089a4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8008994:	4b6b      	ldr	r3, [pc, #428]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008996:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800899a:	0b1b      	lsrs	r3, r3, #12
 800899c:	f003 030f 	and.w	r3, r3, #15
 80089a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80089a2:	e005      	b.n	80089b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80089a4:	4b67      	ldr	r3, [pc, #412]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	0f1b      	lsrs	r3, r3, #28
 80089aa:	f003 030f 	and.w	r3, r3, #15
 80089ae:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80089b0:	4a65      	ldr	r2, [pc, #404]	@ (8008b48 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80089b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089b8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d110      	bne.n	80089e2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80089c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80089c4:	e00d      	b.n	80089e2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80089c6:	4b5f      	ldr	r3, [pc, #380]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	f003 030c 	and.w	r3, r3, #12
 80089ce:	2b04      	cmp	r3, #4
 80089d0:	d102      	bne.n	80089d8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80089d2:	4b5e      	ldr	r3, [pc, #376]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80089d4:	623b      	str	r3, [r7, #32]
 80089d6:	e004      	b.n	80089e2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	2b08      	cmp	r3, #8
 80089dc:	d101      	bne.n	80089e2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80089de:	4b5b      	ldr	r3, [pc, #364]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80089e0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	2b0c      	cmp	r3, #12
 80089e6:	f040 80a5 	bne.w	8008b34 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80089ea:	4b56      	ldr	r3, [pc, #344]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80089ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ee:	f003 0303 	and.w	r3, r3, #3
 80089f2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80089f4:	4b53      	ldr	r3, [pc, #332]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80089f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f8:	0a1b      	lsrs	r3, r3, #8
 80089fa:	f003 030f 	and.w	r3, r3, #15
 80089fe:	3301      	adds	r3, #1
 8008a00:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008a02:	4b50      	ldr	r3, [pc, #320]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a06:	091b      	lsrs	r3, r3, #4
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008a0e:	4b4d      	ldr	r3, [pc, #308]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a12:	08db      	lsrs	r3, r3, #3
 8008a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	fb02 f303 	mul.w	r3, r2, r3
 8008a1e:	ee07 3a90 	vmov	s15, r3
 8008a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a26:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d003      	beq.n	8008a38 <HAL_RCC_GetSysClockFreq+0xe4>
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d022      	beq.n	8008a7c <HAL_RCC_GetSysClockFreq+0x128>
 8008a36:	e043      	b.n	8008ac0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	ee07 3a90 	vmov	s15, r3
 8008a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a42:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8008b50 <HAL_RCC_GetSysClockFreq+0x1fc>
 8008a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a4a:	4b3e      	ldr	r3, [pc, #248]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a52:	ee07 3a90 	vmov	s15, r3
 8008a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008a5a:	ed97 6a01 	vldr	s12, [r7, #4]
 8008a5e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8008b54 <HAL_RCC_GetSysClockFreq+0x200>
 8008a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a7a:	e046      	b.n	8008b0a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	ee07 3a90 	vmov	s15, r3
 8008a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a86:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8008b50 <HAL_RCC_GetSysClockFreq+0x1fc>
 8008a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a96:	ee07 3a90 	vmov	s15, r3
 8008a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008a9e:	ed97 6a01 	vldr	s12, [r7, #4]
 8008aa2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8008b54 <HAL_RCC_GetSysClockFreq+0x200>
 8008aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008abe:	e024      	b.n	8008b0a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	ee07 3a90 	vmov	s15, r3
 8008ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae0:	ee07 3a90 	vmov	s15, r3
 8008ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008ae8:	ed97 6a01 	vldr	s12, [r7, #4]
 8008aec:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8008b54 <HAL_RCC_GetSysClockFreq+0x200>
 8008af0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008af4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008af8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008afc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b08:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8008b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b0e:	0e1b      	lsrs	r3, r3, #24
 8008b10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b14:	3301      	adds	r3, #1
 8008b16:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	ee07 3a90 	vmov	s15, r3
 8008b1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b22:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b2e:	ee17 3a90 	vmov	r3, s15
 8008b32:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8008b34:	6a3b      	ldr	r3, [r7, #32]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	372c      	adds	r7, #44	@ 0x2c
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	46020c00 	.word	0x46020c00
 8008b48:	0800d9a0 	.word	0x0800d9a0
 8008b4c:	00f42400 	.word	0x00f42400
 8008b50:	4b742400 	.word	0x4b742400
 8008b54:	46000000 	.word	0x46000000

08008b58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008b5c:	f7ff fefa 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 8008b60:	4602      	mov	r2, r0
 8008b62:	4b07      	ldr	r3, [pc, #28]	@ (8008b80 <HAL_RCC_GetHCLKFreq+0x28>)
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	f003 030f 	and.w	r3, r3, #15
 8008b6a:	4906      	ldr	r1, [pc, #24]	@ (8008b84 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008b6c:	5ccb      	ldrb	r3, [r1, r3]
 8008b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b72:	4a05      	ldr	r2, [pc, #20]	@ (8008b88 <HAL_RCC_GetHCLKFreq+0x30>)
 8008b74:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8008b76:	4b04      	ldr	r3, [pc, #16]	@ (8008b88 <HAL_RCC_GetHCLKFreq+0x30>)
 8008b78:	681b      	ldr	r3, [r3, #0]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	46020c00 	.word	0x46020c00
 8008b84:	0800d988 	.word	0x0800d988
 8008b88:	20000d00 	.word	0x20000d00

08008b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8008b90:	f7ff ffe2 	bl	8008b58 <HAL_RCC_GetHCLKFreq>
 8008b94:	4602      	mov	r2, r0
 8008b96:	4b05      	ldr	r3, [pc, #20]	@ (8008bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	091b      	lsrs	r3, r3, #4
 8008b9c:	f003 0307 	and.w	r3, r3, #7
 8008ba0:	4903      	ldr	r1, [pc, #12]	@ (8008bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ba2:	5ccb      	ldrb	r3, [r1, r3]
 8008ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	46020c00 	.word	0x46020c00
 8008bb0:	0800d998 	.word	0x0800d998

08008bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8008bb8:	f7ff ffce 	bl	8008b58 <HAL_RCC_GetHCLKFreq>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	4b05      	ldr	r3, [pc, #20]	@ (8008bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	0a1b      	lsrs	r3, r3, #8
 8008bc4:	f003 0307 	and.w	r3, r3, #7
 8008bc8:	4903      	ldr	r1, [pc, #12]	@ (8008bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bca:	5ccb      	ldrb	r3, [r1, r3]
 8008bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	46020c00 	.word	0x46020c00
 8008bd8:	0800d998 	.word	0x0800d998

08008bdc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8008be0:	f7ff ffba 	bl	8008b58 <HAL_RCC_GetHCLKFreq>
 8008be4:	4602      	mov	r2, r0
 8008be6:	4b05      	ldr	r3, [pc, #20]	@ (8008bfc <HAL_RCC_GetPCLK3Freq+0x20>)
 8008be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bea:	091b      	lsrs	r3, r3, #4
 8008bec:	f003 0307 	and.w	r3, r3, #7
 8008bf0:	4903      	ldr	r1, [pc, #12]	@ (8008c00 <HAL_RCC_GetPCLK3Freq+0x24>)
 8008bf2:	5ccb      	ldrb	r3, [r1, r3]
 8008bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	46020c00 	.word	0x46020c00
 8008c00:	0800d998 	.word	0x0800d998

08008c04 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	221f      	movs	r2, #31
 8008c12:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8008c14:	4b15      	ldr	r3, [pc, #84]	@ (8008c6c <HAL_RCC_GetClockConfig+0x68>)
 8008c16:	69db      	ldr	r3, [r3, #28]
 8008c18:	f003 0203 	and.w	r2, r3, #3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8008c20:	4b12      	ldr	r3, [pc, #72]	@ (8008c6c <HAL_RCC_GetClockConfig+0x68>)
 8008c22:	6a1b      	ldr	r3, [r3, #32]
 8008c24:	f003 020f 	and.w	r2, r3, #15
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8008c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8008c6c <HAL_RCC_GetClockConfig+0x68>)
 8008c2e:	6a1b      	ldr	r3, [r3, #32]
 8008c30:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8008c38:	4b0c      	ldr	r3, [pc, #48]	@ (8008c6c <HAL_RCC_GetClockConfig+0x68>)
 8008c3a:	6a1b      	ldr	r3, [r3, #32]
 8008c3c:	091b      	lsrs	r3, r3, #4
 8008c3e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8008c46:	4b09      	ldr	r3, [pc, #36]	@ (8008c6c <HAL_RCC_GetClockConfig+0x68>)
 8008c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c4a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008c52:	4b07      	ldr	r3, [pc, #28]	@ (8008c70 <HAL_RCC_GetClockConfig+0x6c>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 020f 	and.w	r2, r3, #15
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	601a      	str	r2, [r3, #0]
}
 8008c5e:	bf00      	nop
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	46020c00 	.word	0x46020c00
 8008c70:	40022000 	.word	0x40022000

08008c74 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008c74:	b480      	push	{r7}
 8008c76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8008c78:	4b05      	ldr	r3, [pc, #20]	@ (8008c90 <HAL_RCC_EnableCSS+0x1c>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a04      	ldr	r2, [pc, #16]	@ (8008c90 <HAL_RCC_EnableCSS+0x1c>)
 8008c7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c82:	6013      	str	r3, [r2, #0]
}
 8008c84:	bf00      	nop
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	46020c00 	.word	0x46020c00

08008c94 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008c98:	4b07      	ldr	r3, [pc, #28]	@ (8008cb8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ca4:	d105      	bne.n	8008cb2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008ca6:	f000 f809 	bl	8008cbc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008caa:	4b03      	ldr	r3, [pc, #12]	@ (8008cb8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008cac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008cb0:	659a      	str	r2, [r3, #88]	@ 0x58
  }
}
 8008cb2:	bf00      	nop
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	46020c00 	.word	0x46020c00

08008cbc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
	...

08008ccc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008cd4:	4b3e      	ldr	r3, [pc, #248]	@ (8008dd0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cda:	f003 0304 	and.w	r3, r3, #4
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008ce2:	f7fe fcfb 	bl	80076dc <HAL_PWREx_GetVoltageRange>
 8008ce6:	6178      	str	r0, [r7, #20]
 8008ce8:	e019      	b.n	8008d1e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008cea:	4b39      	ldr	r3, [pc, #228]	@ (8008dd0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cf0:	4a37      	ldr	r2, [pc, #220]	@ (8008dd0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008cf2:	f043 0304 	orr.w	r3, r3, #4
 8008cf6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008cfa:	4b35      	ldr	r3, [pc, #212]	@ (8008dd0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	60fb      	str	r3, [r7, #12]
 8008d06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008d08:	f7fe fce8 	bl	80076dc <HAL_PWREx_GetVoltageRange>
 8008d0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008d0e:	4b30      	ldr	r3, [pc, #192]	@ (8008dd0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d14:	4a2e      	ldr	r2, [pc, #184]	@ (8008dd0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008d16:	f023 0304 	bic.w	r3, r3, #4
 8008d1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008d24:	d003      	beq.n	8008d2e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d2c:	d109      	bne.n	8008d42 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d34:	d202      	bcs.n	8008d3c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8008d36:	2301      	movs	r3, #1
 8008d38:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008d3a:	e033      	b.n	8008da4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008d40:	e030      	b.n	8008da4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d48:	d208      	bcs.n	8008d5c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d50:	d102      	bne.n	8008d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8008d52:	2303      	movs	r3, #3
 8008d54:	613b      	str	r3, [r7, #16]
 8008d56:	e025      	b.n	8008da4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e035      	b.n	8008dc8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d62:	d90f      	bls.n	8008d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d109      	bne.n	8008d7e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d70:	d902      	bls.n	8008d78 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8008d72:	2300      	movs	r3, #0
 8008d74:	613b      	str	r3, [r7, #16]
 8008d76:	e015      	b.n	8008da4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8008d78:	2301      	movs	r3, #1
 8008d7a:	613b      	str	r3, [r7, #16]
 8008d7c:	e012      	b.n	8008da4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8008d7e:	2300      	movs	r3, #0
 8008d80:	613b      	str	r3, [r7, #16]
 8008d82:	e00f      	b.n	8008da4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d8a:	d109      	bne.n	8008da0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d92:	d102      	bne.n	8008d9a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8008d94:	2301      	movs	r3, #1
 8008d96:	613b      	str	r3, [r7, #16]
 8008d98:	e004      	b.n	8008da4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	613b      	str	r3, [r7, #16]
 8008d9e:	e001      	b.n	8008da4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8008da0:	2301      	movs	r3, #1
 8008da2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008da4:	4b0b      	ldr	r3, [pc, #44]	@ (8008dd4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f023 020f 	bic.w	r2, r3, #15
 8008dac:	4909      	ldr	r1, [pc, #36]	@ (8008dd4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8008db4:	4b07      	ldr	r3, [pc, #28]	@ (8008dd4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 030f 	and.w	r3, r3, #15
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d001      	beq.n	8008dc6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e000      	b.n	8008dc8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	46020c00 	.word	0x46020c00
 8008dd4:	40022000 	.word	0x40022000

08008dd8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ddc:	b0c8      	sub	sp, #288	@ 0x120
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008de4:	2300      	movs	r3, #0
 8008de6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008dea:	2300      	movs	r3, #0
 8008dec:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df8:	f002 0401 	and.w	r4, r2, #1
 8008dfc:	2500      	movs	r5, #0
 8008dfe:	ea54 0305 	orrs.w	r3, r4, r5
 8008e02:	d00b      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008e04:	4bd5      	ldr	r3, [pc, #852]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e0a:	f023 0103 	bic.w	r1, r3, #3
 8008e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e14:	4ad1      	ldr	r2, [pc, #836]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e16:	430b      	orrs	r3, r1
 8008e18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e24:	f002 0802 	and.w	r8, r2, #2
 8008e28:	f04f 0900 	mov.w	r9, #0
 8008e2c:	ea58 0309 	orrs.w	r3, r8, r9
 8008e30:	d00b      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8008e32:	4bca      	ldr	r3, [pc, #808]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e38:	f023 010c 	bic.w	r1, r3, #12
 8008e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e42:	4ac6      	ldr	r2, [pc, #792]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e44:	430b      	orrs	r3, r1
 8008e46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	f002 0a04 	and.w	sl, r2, #4
 8008e56:	f04f 0b00 	mov.w	fp, #0
 8008e5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8008e5e:	d00b      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8008e60:	4bbe      	ldr	r3, [pc, #760]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e66:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e70:	4aba      	ldr	r2, [pc, #744]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e72:	430b      	orrs	r3, r1
 8008e74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e80:	f002 0308 	and.w	r3, r2, #8
 8008e84:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008e8e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008e92:	460b      	mov	r3, r1
 8008e94:	4313      	orrs	r3, r2
 8008e96:	d00b      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8008e98:	4bb0      	ldr	r3, [pc, #704]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ea8:	4aac      	ldr	r2, [pc, #688]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008eaa:	430b      	orrs	r3, r1
 8008eac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb8:	f002 0310 	and.w	r3, r2, #16
 8008ebc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008ec6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	d00b      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8008ed0:	4ba2      	ldr	r3, [pc, #648]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ed6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ee0:	4a9e      	ldr	r2, [pc, #632]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008ee2:	430b      	orrs	r3, r1
 8008ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008ef4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008efe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008f02:	460b      	mov	r3, r1
 8008f04:	4313      	orrs	r3, r2
 8008f06:	d00b      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8008f08:	4b94      	ldr	r3, [pc, #592]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008f0e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f18:	4a90      	ldr	r2, [pc, #576]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f1a:	430b      	orrs	r3, r1
 8008f1c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f28:	f002 0320 	and.w	r3, r2, #32
 8008f2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008f30:	2300      	movs	r3, #0
 8008f32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008f36:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	d00b      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008f40:	4b86      	ldr	r3, [pc, #536]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f46:	f023 0107 	bic.w	r1, r3, #7
 8008f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f50:	4a82      	ldr	r2, [pc, #520]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f52:	430b      	orrs	r3, r1
 8008f54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f60:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008f64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008f68:	2300      	movs	r3, #0
 8008f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008f6e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008f72:	460b      	mov	r3, r1
 8008f74:	4313      	orrs	r3, r2
 8008f76:	d00b      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008f78:	4b78      	ldr	r3, [pc, #480]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f7e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8008f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f88:	4a74      	ldr	r2, [pc, #464]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f8a:	430b      	orrs	r3, r1
 8008f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f98:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008fa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008faa:	460b      	mov	r3, r1
 8008fac:	4313      	orrs	r3, r2
 8008fae:	d00b      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8008fb0:	4b6a      	ldr	r3, [pc, #424]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008fb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fc0:	4a66      	ldr	r2, [pc, #408]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008fc2:	430b      	orrs	r3, r1
 8008fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8008fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008fde:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	d00b      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8008fe8:	4b5c      	ldr	r3, [pc, #368]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008fee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ff8:	4a58      	ldr	r2, [pc, #352]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008ffa:	430b      	orrs	r3, r1
 8008ffc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009000:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009008:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800900c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009010:	2300      	movs	r3, #0
 8009012:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009016:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800901a:	460b      	mov	r3, r1
 800901c:	4313      	orrs	r3, r2
 800901e:	d00b      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8009020:	4b4e      	ldr	r3, [pc, #312]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009026:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800902a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800902e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009030:	4a4a      	ldr	r2, [pc, #296]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009032:	430b      	orrs	r3, r1
 8009034:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8009038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800903c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009040:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009044:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009048:	2300      	movs	r3, #0
 800904a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800904e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009052:	460b      	mov	r3, r1
 8009054:	4313      	orrs	r3, r2
 8009056:	d00b      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8009058:	4b40      	ldr	r3, [pc, #256]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800905a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800905e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8009062:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009066:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009068:	4a3c      	ldr	r2, [pc, #240]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800906a:	430b      	orrs	r3, r1
 800906c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8009070:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009078:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800907c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009080:	2300      	movs	r3, #0
 8009082:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009086:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800908a:	460b      	mov	r3, r1
 800908c:	4313      	orrs	r3, r2
 800908e:	d00c      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8009090:	4b32      	ldr	r3, [pc, #200]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009092:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009096:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800909a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800909e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090a2:	4a2e      	ldr	r2, [pc, #184]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80090a4:	430b      	orrs	r3, r1
 80090a6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80090aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b2:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80090b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090ba:	2300      	movs	r3, #0
 80090bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090c0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80090c4:	460b      	mov	r3, r1
 80090c6:	4313      	orrs	r3, r2
 80090c8:	d00c      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80090ca:	4b24      	ldr	r3, [pc, #144]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80090cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090d0:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80090d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090dc:	4a1f      	ldr	r2, [pc, #124]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80090de:	430b      	orrs	r3, r1
 80090e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80090e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80090f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80090f4:	2300      	movs	r3, #0
 80090f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80090fa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80090fe:	460b      	mov	r3, r1
 8009100:	4313      	orrs	r3, r2
 8009102:	d00c      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8009104:	4b15      	ldr	r3, [pc, #84]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800910a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800910e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009116:	4a11      	ldr	r2, [pc, #68]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009118:	430b      	orrs	r3, r1
 800911a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800911e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009126:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800912a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800912e:	2300      	movs	r3, #0
 8009130:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009134:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009138:	460b      	mov	r3, r1
 800913a:	4313      	orrs	r3, r2
 800913c:	d010      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800913e:	4b07      	ldr	r3, [pc, #28]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009144:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009148:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800914c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009150:	4a02      	ldr	r2, [pc, #8]	@ (800915c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009152:	430b      	orrs	r3, r1
 8009154:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009158:	e002      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800915a:	bf00      	nop
 800915c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800916c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009170:	2300      	movs	r3, #0
 8009172:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009176:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800917a:	460b      	mov	r3, r1
 800917c:	4313      	orrs	r3, r2
 800917e:	d04c      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009184:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009188:	2b80      	cmp	r3, #128	@ 0x80
 800918a:	d02d      	beq.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800918c:	2b80      	cmp	r3, #128	@ 0x80
 800918e:	d827      	bhi.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009190:	2b60      	cmp	r3, #96	@ 0x60
 8009192:	d02b      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009194:	2b60      	cmp	r3, #96	@ 0x60
 8009196:	d823      	bhi.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009198:	2b40      	cmp	r3, #64	@ 0x40
 800919a:	d006      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800919c:	2b40      	cmp	r3, #64	@ 0x40
 800919e:	d81f      	bhi.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d009      	beq.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80091a4:	2b20      	cmp	r3, #32
 80091a6:	d011      	beq.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80091a8:	e01a      	b.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80091aa:	4bc0      	ldr	r3, [pc, #768]	@ (80094ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80091ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ae:	4abf      	ldr	r2, [pc, #764]	@ (80094ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80091b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091b4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80091b6:	e01a      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80091b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091bc:	3308      	adds	r3, #8
 80091be:	4618      	mov	r0, r3
 80091c0:	f002 fce8 	bl	800bb94 <RCCEx_PLL2_Config>
 80091c4:	4603      	mov	r3, r0
 80091c6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80091ca:	e010      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80091cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091d0:	332c      	adds	r3, #44	@ 0x2c
 80091d2:	4618      	mov	r0, r3
 80091d4:	f002 fd76 	bl	800bcc4 <RCCEx_PLL3_Config>
 80091d8:	4603      	mov	r3, r0
 80091da:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80091de:	e006      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80091e6:	e002      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80091e8:	bf00      	nop
 80091ea:	e000      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80091ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091ee:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10d      	bne.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80091f6:	4bad      	ldr	r3, [pc, #692]	@ (80094ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80091f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80091fc:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8009200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009204:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009208:	4aa8      	ldr	r2, [pc, #672]	@ (80094ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800920a:	430b      	orrs	r3, r1
 800920c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009210:	e003      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009212:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009216:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800921a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800921e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009222:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009226:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800922a:	2300      	movs	r3, #0
 800922c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009230:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009234:	460b      	mov	r3, r1
 8009236:	4313      	orrs	r3, r2
 8009238:	d053      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800923a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800923e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009246:	d033      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8009248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800924c:	d82c      	bhi.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800924e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009252:	d02f      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8009254:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009258:	d826      	bhi.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800925a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800925e:	d008      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8009260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009264:	d820      	bhi.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00a      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800926a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800926e:	d011      	beq.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009270:	e01a      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009272:	4b8e      	ldr	r3, [pc, #568]	@ (80094ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009276:	4a8d      	ldr	r2, [pc, #564]	@ (80094ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800927c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800927e:	e01a      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009280:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009284:	3308      	adds	r3, #8
 8009286:	4618      	mov	r0, r3
 8009288:	f002 fc84 	bl	800bb94 <RCCEx_PLL2_Config>
 800928c:	4603      	mov	r3, r0
 800928e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009292:	e010      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009294:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009298:	332c      	adds	r3, #44	@ 0x2c
 800929a:	4618      	mov	r0, r3
 800929c:	f002 fd12 	bl	800bcc4 <RCCEx_PLL3_Config>
 80092a0:	4603      	mov	r3, r0
 80092a2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80092a6:	e006      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80092ae:	e002      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80092b0:	bf00      	nop
 80092b2:	e000      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80092b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092b6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10d      	bne.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80092be:	4b7b      	ldr	r3, [pc, #492]	@ (80094ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80092c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80092c4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80092c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80092d0:	4a76      	ldr	r2, [pc, #472]	@ (80094ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80092d2:	430b      	orrs	r3, r1
 80092d4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80092d8:	e003      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092da:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80092de:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80092e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ea:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80092ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80092f2:	2300      	movs	r3, #0
 80092f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80092f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80092fc:	460b      	mov	r3, r1
 80092fe:	4313      	orrs	r3, r2
 8009300:	d046      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8009302:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009306:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800930a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800930e:	d028      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009310:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009314:	d821      	bhi.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009316:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800931a:	d022      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800931c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009320:	d81b      	bhi.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009322:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009326:	d01c      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009328:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800932c:	d815      	bhi.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800932e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009332:	d008      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8009334:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009338:	d80f      	bhi.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800933a:	2b00      	cmp	r3, #0
 800933c:	d011      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800933e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009342:	d00e      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009344:	e009      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009346:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800934a:	3308      	adds	r3, #8
 800934c:	4618      	mov	r0, r3
 800934e:	f002 fc21 	bl	800bb94 <RCCEx_PLL2_Config>
 8009352:	4603      	mov	r3, r0
 8009354:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009358:	e004      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009360:	e000      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8009362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009364:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10d      	bne.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800936c:	4b4f      	ldr	r3, [pc, #316]	@ (80094ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800936e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009372:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800937a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800937e:	4a4b      	ldr	r2, [pc, #300]	@ (80094ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009380:	430b      	orrs	r3, r1
 8009382:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009386:	e003      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009388:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800938c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800939c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093a0:	2300      	movs	r3, #0
 80093a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80093aa:	460b      	mov	r3, r1
 80093ac:	4313      	orrs	r3, r2
 80093ae:	d03f      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80093b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80093b8:	2b04      	cmp	r3, #4
 80093ba:	d81e      	bhi.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x622>
 80093bc:	a201      	add	r2, pc, #4	@ (adr r2, 80093c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80093be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c2:	bf00      	nop
 80093c4:	08009403 	.word	0x08009403
 80093c8:	080093d9 	.word	0x080093d9
 80093cc:	080093e7 	.word	0x080093e7
 80093d0:	08009403 	.word	0x08009403
 80093d4:	08009403 	.word	0x08009403
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80093d8:	4b34      	ldr	r3, [pc, #208]	@ (80094ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80093da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093dc:	4a33      	ldr	r2, [pc, #204]	@ (80094ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80093de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093e2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80093e4:	e00e      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80093e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093ea:	332c      	adds	r3, #44	@ 0x2c
 80093ec:	4618      	mov	r0, r3
 80093ee:	f002 fc69 	bl	800bcc4 <RCCEx_PLL3_Config>
 80093f2:	4603      	mov	r3, r0
 80093f4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80093f8:	e004      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009400:	e000      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 8009402:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009404:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10d      	bne.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800940c:	4b27      	ldr	r3, [pc, #156]	@ (80094ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800940e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009412:	f023 0107 	bic.w	r1, r3, #7
 8009416:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800941a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800941e:	4a23      	ldr	r2, [pc, #140]	@ (80094ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009420:	430b      	orrs	r3, r1
 8009422:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009426:	e003      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009428:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800942c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8009430:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009438:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800943c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800943e:	2300      	movs	r3, #0
 8009440:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009442:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009446:	460b      	mov	r3, r1
 8009448:	4313      	orrs	r3, r2
 800944a:	d04c      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800944c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009450:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009454:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009458:	d02a      	beq.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800945a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800945e:	d821      	bhi.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009460:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009464:	d026      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8009466:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800946a:	d81b      	bhi.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800946c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009470:	d00e      	beq.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009472:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009476:	d815      	bhi.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009478:	2b00      	cmp	r3, #0
 800947a:	d01d      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800947c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009480:	d110      	bne.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009482:	4b0a      	ldr	r3, [pc, #40]	@ (80094ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009486:	4a09      	ldr	r2, [pc, #36]	@ (80094ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800948c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800948e:	e014      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009490:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009494:	332c      	adds	r3, #44	@ 0x2c
 8009496:	4618      	mov	r0, r3
 8009498:	f002 fc14 	bl	800bcc4 <RCCEx_PLL3_Config>
 800949c:	4603      	mov	r3, r0
 800949e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80094a2:	e00a      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80094aa:	e006      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80094ac:	46020c00 	.word	0x46020c00
        break;
 80094b0:	bf00      	nop
 80094b2:	e002      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 80094b4:	bf00      	nop
 80094b6:	e000      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 80094b8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80094ba:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10d      	bne.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80094c2:	4baf      	ldr	r3, [pc, #700]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80094c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80094c8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80094cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80094d4:	4aaa      	ldr	r2, [pc, #680]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80094d6:	430b      	orrs	r3, r1
 80094d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80094dc:	e003      	b.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094de:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80094e2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80094e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80094f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80094f4:	2300      	movs	r3, #0
 80094f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80094f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80094fc:	460b      	mov	r3, r1
 80094fe:	4313      	orrs	r3, r2
 8009500:	f000 80b5 	beq.w	800966e <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009504:	2300      	movs	r3, #0
 8009506:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800950a:	4b9d      	ldr	r3, [pc, #628]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800950c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b00      	cmp	r3, #0
 8009516:	d113      	bne.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009518:	4b99      	ldr	r3, [pc, #612]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800951a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800951e:	4a98      	ldr	r2, [pc, #608]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009520:	f043 0304 	orr.w	r3, r3, #4
 8009524:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009528:	4b95      	ldr	r3, [pc, #596]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800952a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800952e:	f003 0304 	and.w	r3, r3, #4
 8009532:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8009536:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800953a:	2301      	movs	r3, #1
 800953c:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009540:	4b90      	ldr	r3, [pc, #576]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009544:	4a8f      	ldr	r2, [pc, #572]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009546:	f043 0301 	orr.w	r3, r3, #1
 800954a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800954c:	f7f9 fdac 	bl	80030a8 <HAL_GetTick>
 8009550:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009554:	e00b      	b.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009556:	f7f9 fda7 	bl	80030a8 <HAL_GetTick>
 800955a:	4602      	mov	r2, r0
 800955c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	2b02      	cmp	r3, #2
 8009564:	d903      	bls.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800956c:	e005      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800956e:	4b85      	ldr	r3, [pc, #532]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	2b00      	cmp	r3, #0
 8009578:	d0ed      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800957a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800957e:	2b00      	cmp	r3, #0
 8009580:	d165      	bne.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009582:	4b7f      	ldr	r3, [pc, #508]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009588:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800958c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009590:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009594:	2b00      	cmp	r3, #0
 8009596:	d023      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8009598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800959c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80095a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d01b      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80095a8:	4b75      	ldr	r3, [pc, #468]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80095aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80095b6:	4b72      	ldr	r3, [pc, #456]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80095b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095bc:	4a70      	ldr	r2, [pc, #448]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80095be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80095c6:	4b6e      	ldr	r3, [pc, #440]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80095c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095cc:	4a6c      	ldr	r2, [pc, #432]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80095ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80095d6:	4a6a      	ldr	r2, [pc, #424]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80095d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80095dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80095e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d019      	beq.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095ec:	f7f9 fd5c 	bl	80030a8 <HAL_GetTick>
 80095f0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095f4:	e00d      	b.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095f6:	f7f9 fd57 	bl	80030a8 <HAL_GetTick>
 80095fa:	4602      	mov	r2, r0
 80095fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009600:	1ad2      	subs	r2, r2, r3
 8009602:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009606:	429a      	cmp	r2, r3
 8009608:	d903      	bls.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 8009610:	e006      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009612:	4b5b      	ldr	r3, [pc, #364]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009618:	f003 0302 	and.w	r3, r3, #2
 800961c:	2b00      	cmp	r3, #0
 800961e:	d0ea      	beq.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 8009620:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10d      	bne.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8009628:	4b55      	ldr	r3, [pc, #340]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800962a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800962e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009636:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800963a:	4a51      	ldr	r2, [pc, #324]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800963c:	430b      	orrs	r3, r1
 800963e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009642:	e008      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009644:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009648:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800964c:	e003      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800964e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009652:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009656:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800965a:	2b01      	cmp	r3, #1
 800965c:	d107      	bne.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800965e:	4b48      	ldr	r3, [pc, #288]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009660:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009664:	4a46      	ldr	r2, [pc, #280]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009666:	f023 0304 	bic.w	r3, r3, #4
 800966a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800966e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009676:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800967a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800967c:	2300      	movs	r3, #0
 800967e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009680:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009684:	460b      	mov	r3, r1
 8009686:	4313      	orrs	r3, r2
 8009688:	d042      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800968a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800968e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009692:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009696:	d022      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x906>
 8009698:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800969c:	d81b      	bhi.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800969e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096a2:	d011      	beq.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80096a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096a8:	d815      	bhi.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d019      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80096ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80096b2:	d110      	bne.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80096b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096b8:	3308      	adds	r3, #8
 80096ba:	4618      	mov	r0, r3
 80096bc:	f002 fa6a 	bl	800bb94 <RCCEx_PLL2_Config>
 80096c0:	4603      	mov	r3, r0
 80096c2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80096c6:	e00d      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096c8:	4b2d      	ldr	r3, [pc, #180]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80096ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096cc:	4a2c      	ldr	r2, [pc, #176]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80096ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096d2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80096d4:	e006      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80096dc:	e002      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 80096de:	bf00      	nop
 80096e0:	e000      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 80096e2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80096e4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10d      	bne.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80096ec:	4b24      	ldr	r3, [pc, #144]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80096ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80096f2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80096f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80096fe:	4a20      	ldr	r2, [pc, #128]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009700:	430b      	orrs	r3, r1
 8009702:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009706:	e003      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009708:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800970c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009710:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800971c:	663b      	str	r3, [r7, #96]	@ 0x60
 800971e:	2300      	movs	r3, #0
 8009720:	667b      	str	r3, [r7, #100]	@ 0x64
 8009722:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009726:	460b      	mov	r3, r1
 8009728:	4313      	orrs	r3, r2
 800972a:	d031      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800972c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009730:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009738:	d00b      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800973a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800973e:	d804      	bhi.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8009740:	2b00      	cmp	r3, #0
 8009742:	d008      	beq.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8009744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009748:	d007      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009750:	e004      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8009752:	bf00      	nop
 8009754:	e002      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8009756:	bf00      	nop
 8009758:	e000      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800975a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800975c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009760:	2b00      	cmp	r3, #0
 8009762:	d111      	bne.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009764:	4b06      	ldr	r3, [pc, #24]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009766:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800976a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800976e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009772:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009776:	4a02      	ldr	r2, [pc, #8]	@ (8009780 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009778:	430b      	orrs	r3, r1
 800977a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800977e:	e007      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8009780:	46020c00 	.word	0x46020c00
 8009784:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009788:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800978c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8009790:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800979c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800979e:	2300      	movs	r3, #0
 80097a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80097a6:	460b      	mov	r3, r1
 80097a8:	4313      	orrs	r3, r2
 80097aa:	d00c      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80097ac:	4bb2      	ldr	r3, [pc, #712]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80097ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80097b2:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80097b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80097be:	4aae      	ldr	r2, [pc, #696]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80097c0:	430b      	orrs	r3, r1
 80097c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80097c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ce:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80097d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80097d4:	2300      	movs	r3, #0
 80097d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80097d8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80097dc:	460b      	mov	r3, r1
 80097de:	4313      	orrs	r3, r2
 80097e0:	d019      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80097e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80097ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097ee:	d105      	bne.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80097f0:	4ba1      	ldr	r3, [pc, #644]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80097f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f4:	4aa0      	ldr	r2, [pc, #640]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80097f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097fa:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80097fc:	4b9e      	ldr	r3, [pc, #632]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80097fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009802:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009806:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800980a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800980e:	4a9a      	ldr	r2, [pc, #616]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009810:	430b      	orrs	r3, r1
 8009812:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009816:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800981a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009822:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009824:	2300      	movs	r3, #0
 8009826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009828:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800982c:	460b      	mov	r3, r1
 800982e:	4313      	orrs	r3, r2
 8009830:	d00c      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8009832:	4b91      	ldr	r3, [pc, #580]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009838:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800983c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009840:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009844:	4a8c      	ldr	r2, [pc, #560]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009846:	430b      	orrs	r3, r1
 8009848:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800984c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009854:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009858:	643b      	str	r3, [r7, #64]	@ 0x40
 800985a:	2300      	movs	r3, #0
 800985c:	647b      	str	r3, [r7, #68]	@ 0x44
 800985e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009862:	460b      	mov	r3, r1
 8009864:	4313      	orrs	r3, r2
 8009866:	d00c      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8009868:	4b83      	ldr	r3, [pc, #524]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800986a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800986e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009872:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009876:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800987a:	4a7f      	ldr	r2, [pc, #508]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800987c:	430b      	orrs	r3, r1
 800987e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009882:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800988e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009890:	2300      	movs	r3, #0
 8009892:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009894:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009898:	460b      	mov	r3, r1
 800989a:	4313      	orrs	r3, r2
 800989c:	d00c      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800989e:	4b76      	ldr	r3, [pc, #472]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80098a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80098a4:	f023 0118 	bic.w	r1, r3, #24
 80098a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ac:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80098b0:	4a71      	ldr	r2, [pc, #452]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80098b2:	430b      	orrs	r3, r1
 80098b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80098b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80098c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80098c6:	2300      	movs	r3, #0
 80098c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80098ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80098ce:	460b      	mov	r3, r1
 80098d0:	4313      	orrs	r3, r2
 80098d2:	d032      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80098d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80098dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098e0:	d105      	bne.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098e2:	4b65      	ldr	r3, [pc, #404]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80098e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e6:	4a64      	ldr	r2, [pc, #400]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80098e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098ec:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80098ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80098f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80098fa:	d108      	bne.n	800990e <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80098fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009900:	3308      	adds	r3, #8
 8009902:	4618      	mov	r0, r3
 8009904:	f002 f946 	bl	800bb94 <RCCEx_PLL2_Config>
 8009908:	4603      	mov	r3, r0
 800990a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800990e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10d      	bne.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8009916:	4b58      	ldr	r3, [pc, #352]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009918:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800991c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009920:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009924:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009928:	4a53      	ldr	r2, [pc, #332]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800992a:	430b      	orrs	r3, r1
 800992c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009930:	e003      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009932:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009936:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800993a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800993e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009942:	2100      	movs	r1, #0
 8009944:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009946:	f003 0301 	and.w	r3, r3, #1
 800994a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800994c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009950:	460b      	mov	r3, r1
 8009952:	4313      	orrs	r3, r2
 8009954:	d04a      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8009956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800995a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800995e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009962:	d01e      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8009964:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009968:	d825      	bhi.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800996a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800996e:	d00e      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 8009970:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009974:	d81f      	bhi.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8009976:	2b00      	cmp	r3, #0
 8009978:	d021      	beq.n	80099be <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800997a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800997e:	d11a      	bne.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009980:	4b3d      	ldr	r3, [pc, #244]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009984:	4a3c      	ldr	r2, [pc, #240]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800998a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800998c:	e018      	b.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800998e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009992:	3308      	adds	r3, #8
 8009994:	4618      	mov	r0, r3
 8009996:	f002 f8fd 	bl	800bb94 <RCCEx_PLL2_Config>
 800999a:	4603      	mov	r3, r0
 800999c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80099a0:	e00e      	b.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80099a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099a6:	332c      	adds	r3, #44	@ 0x2c
 80099a8:	4618      	mov	r0, r3
 80099aa:	f002 f98b 	bl	800bcc4 <RCCEx_PLL3_Config>
 80099ae:	4603      	mov	r3, r0
 80099b0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80099b4:	e004      	b.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80099bc:	e000      	b.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 80099be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099c0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10d      	bne.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80099c8:	4b2b      	ldr	r3, [pc, #172]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80099ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80099ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80099d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099d6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80099da:	4927      	ldr	r1, [pc, #156]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80099dc:	4313      	orrs	r3, r2
 80099de:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80099e2:	e003      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099e4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80099e8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80099ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80099f8:	623b      	str	r3, [r7, #32]
 80099fa:	2300      	movs	r3, #0
 80099fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80099fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009a02:	460b      	mov	r3, r1
 8009a04:	4313      	orrs	r3, r2
 8009a06:	d03d      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8009a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a14:	d00e      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8009a16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a1a:	d815      	bhi.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d017      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a24:	d110      	bne.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a26:	4b14      	ldr	r3, [pc, #80]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a2a:	4a13      	ldr	r2, [pc, #76]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a30:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009a32:	e00e      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a38:	3308      	adds	r3, #8
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f002 f8aa 	bl	800bb94 <RCCEx_PLL2_Config>
 8009a40:	4603      	mov	r3, r0
 8009a42:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009a46:	e004      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009a4e:	e000      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009a50:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009a52:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d110      	bne.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8009a5a:	4b07      	ldr	r3, [pc, #28]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a60:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a6c:	4902      	ldr	r1, [pc, #8]	@ (8009a78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8009a74:	e006      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8009a76:	bf00      	nop
 8009a78:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a7c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009a80:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8009a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009a90:	61bb      	str	r3, [r7, #24]
 8009a92:	2300      	movs	r3, #0
 8009a94:	61fb      	str	r3, [r7, #28]
 8009a96:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	d00c      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8009aa0:	4b68      	ldr	r3, [pc, #416]	@ (8009c44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009aa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009aa6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8009aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009ab2:	4964      	ldr	r1, [pc, #400]	@ (8009c44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	6139      	str	r1, [r7, #16]
 8009ac6:	f003 0302 	and.w	r3, r3, #2
 8009aca:	617b      	str	r3, [r7, #20]
 8009acc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	d036      	beq.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 8009ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ada:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00c      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8009ae2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ae6:	d113      	bne.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aec:	3308      	adds	r3, #8
 8009aee:	4618      	mov	r0, r3
 8009af0:	f002 f850 	bl	800bb94 <RCCEx_PLL2_Config>
 8009af4:	4603      	mov	r3, r0
 8009af6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8009afa:	e00d      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b00:	332c      	adds	r3, #44	@ 0x2c
 8009b02:	4618      	mov	r0, r3
 8009b04:	f002 f8de 	bl	800bcc4 <RCCEx_PLL3_Config>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8009b0e:	e003      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b18:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10d      	bne.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 8009b20:	4b48      	ldr	r3, [pc, #288]	@ (8009c44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009b22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009b26:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8009b32:	4944      	ldr	r1, [pc, #272]	@ (8009c44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009b34:	4313      	orrs	r3, r2
 8009b36:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8009b3a:	e003      	b.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b3c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009b40:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8009b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	60b9      	str	r1, [r7, #8]
 8009b50:	f003 0304 	and.w	r3, r3, #4
 8009b54:	60fb      	str	r3, [r7, #12]
 8009b56:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	d024      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 8009b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d108      	bne.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b70:	332c      	adds	r3, #44	@ 0x2c
 8009b72:	4618      	mov	r0, r3
 8009b74:	f002 f8a6 	bl	800bcc4 <RCCEx_PLL3_Config>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 8009b7e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10d      	bne.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 8009b86:	4b2f      	ldr	r3, [pc, #188]	@ (8009c44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009b88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009b8c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8009b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009b98:	492a      	ldr	r1, [pc, #168]	@ (8009c44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8009ba0:	e003      	b.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009ba6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8009baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	6039      	str	r1, [r7, #0]
 8009bb6:	f003 0308 	and.w	r3, r3, #8
 8009bba:	607b      	str	r3, [r7, #4]
 8009bbc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	d036      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8009bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009bce:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009bd2:	d00d      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8009bd4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009bd8:	d811      	bhi.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8009bda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bde:	d012      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8009be0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009be4:	d80b      	bhi.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00d      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8009bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bee:	d106      	bne.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009bf0:	4b14      	ldr	r3, [pc, #80]	@ (8009c44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf4:	4a13      	ldr	r2, [pc, #76]	@ (8009c44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009bf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009bfa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8009bfc:	e004      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009c04:	e000      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 8009c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c08:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10d      	bne.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8009c10:	4b0c      	ldr	r3, [pc, #48]	@ (8009c44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009c12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009c16:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009c22:	4908      	ldr	r1, [pc, #32]	@ (8009c44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009c24:	4313      	orrs	r3, r2
 8009c26:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8009c2a:	e003      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c2c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009c30:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8009c34:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c44:	46020c00 	.word	0x46020c00

08009c48 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b089      	sub	sp, #36	@ 0x24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8009c50:	4ba6      	ldr	r3, [pc, #664]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c58:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009c5a:	4ba4      	ldr	r3, [pc, #656]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c5e:	f003 0303 	and.w	r3, r3, #3
 8009c62:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009c64:	4ba1      	ldr	r3, [pc, #644]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c68:	0a1b      	lsrs	r3, r3, #8
 8009c6a:	f003 030f 	and.w	r3, r3, #15
 8009c6e:	3301      	adds	r3, #1
 8009c70:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009c72:	4b9e      	ldr	r3, [pc, #632]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c76:	091b      	lsrs	r3, r3, #4
 8009c78:	f003 0301 	and.w	r3, r3, #1
 8009c7c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009c7e:	4b9b      	ldr	r3, [pc, #620]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c82:	08db      	lsrs	r3, r3, #3
 8009c84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	fb02 f303 	mul.w	r3, r2, r3
 8009c8e:	ee07 3a90 	vmov	s15, r3
 8009c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c96:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	2b03      	cmp	r3, #3
 8009c9e:	d062      	beq.n	8009d66 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	2b03      	cmp	r3, #3
 8009ca4:	f200 8081 	bhi.w	8009daa <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d024      	beq.n	8009cf8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d17a      	bne.n	8009daa <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	ee07 3a90 	vmov	s15, r3
 8009cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cbe:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8009ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cc6:	4b89      	ldr	r3, [pc, #548]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cce:	ee07 3a90 	vmov	s15, r3
 8009cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cda:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8009ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cf6:	e08f      	b.n	8009e18 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009cf8:	4b7c      	ldr	r3, [pc, #496]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d005      	beq.n	8009d10 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8009d04:	4b79      	ldr	r3, [pc, #484]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	0f1b      	lsrs	r3, r3, #28
 8009d0a:	f003 030f 	and.w	r3, r3, #15
 8009d0e:	e006      	b.n	8009d1e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8009d10:	4b76      	ldr	r3, [pc, #472]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009d16:	041b      	lsls	r3, r3, #16
 8009d18:	0f1b      	lsrs	r3, r3, #28
 8009d1a:	f003 030f 	and.w	r3, r3, #15
 8009d1e:	4a76      	ldr	r2, [pc, #472]	@ (8009ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d24:	ee07 3a90 	vmov	s15, r3
 8009d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	ee07 3a90 	vmov	s15, r3
 8009d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	ee07 3a90 	vmov	s15, r3
 8009d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d44:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d48:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8009ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009d4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d58:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d64:	e058      	b.n	8009e18 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	ee07 3a90 	vmov	s15, r3
 8009d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d70:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d78:	4b5c      	ldr	r3, [pc, #368]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d80:	ee07 3a90 	vmov	s15, r3
 8009d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d88:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d8c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009d90:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d94:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009da4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009da8:	e036      	b.n	8009e18 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009daa:	4b50      	ldr	r3, [pc, #320]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d005      	beq.n	8009dc2 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8009db6:	4b4d      	ldr	r3, [pc, #308]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	0f1b      	lsrs	r3, r3, #28
 8009dbc:	f003 030f 	and.w	r3, r3, #15
 8009dc0:	e006      	b.n	8009dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8009dc2:	4b4a      	ldr	r3, [pc, #296]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009dc8:	041b      	lsls	r3, r3, #16
 8009dca:	0f1b      	lsrs	r3, r3, #28
 8009dcc:	f003 030f 	and.w	r3, r3, #15
 8009dd0:	4a49      	ldr	r2, [pc, #292]	@ (8009ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dd6:	ee07 3a90 	vmov	s15, r3
 8009dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	ee07 3a90 	vmov	s15, r3
 8009de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	ee07 3a90 	vmov	s15, r3
 8009df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009df6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009dfa:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8009ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e16:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8009e18:	4b34      	ldr	r3, [pc, #208]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d017      	beq.n	8009e54 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009e24:	4b31      	ldr	r3, [pc, #196]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e28:	0a5b      	lsrs	r3, r3, #9
 8009e2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e2e:	ee07 3a90 	vmov	s15, r3
 8009e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8009e36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e3a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009e3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e4a:	ee17 2a90 	vmov	r2, s15
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	601a      	str	r2, [r3, #0]
 8009e52:	e002      	b.n	8009e5a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8009e5a:	4b24      	ldr	r3, [pc, #144]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d017      	beq.n	8009e96 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009e66:	4b21      	ldr	r3, [pc, #132]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e6a:	0c1b      	lsrs	r3, r3, #16
 8009e6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e70:	ee07 3a90 	vmov	s15, r3
 8009e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8009e78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e7c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009e80:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e8c:	ee17 2a90 	vmov	r2, s15
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	605a      	str	r2, [r3, #4]
 8009e94:	e002      	b.n	8009e9c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8009e9c:	4b13      	ldr	r3, [pc, #76]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d017      	beq.n	8009ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009ea8:	4b10      	ldr	r3, [pc, #64]	@ (8009eec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eac:	0e1b      	lsrs	r3, r3, #24
 8009eae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eb2:	ee07 3a90 	vmov	s15, r3
 8009eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8009eba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ebe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009ec2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ece:	ee17 2a90 	vmov	r2, s15
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009ed6:	e002      	b.n	8009ede <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	609a      	str	r2, [r3, #8]
}
 8009ede:	bf00      	nop
 8009ee0:	3724      	adds	r7, #36	@ 0x24
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop
 8009eec:	46020c00 	.word	0x46020c00
 8009ef0:	4b742400 	.word	0x4b742400
 8009ef4:	46000000 	.word	0x46000000
 8009ef8:	0800d9a0 	.word	0x0800d9a0

08009efc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b089      	sub	sp, #36	@ 0x24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8009f04:	4ba6      	ldr	r3, [pc, #664]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f0c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009f0e:	4ba4      	ldr	r3, [pc, #656]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f12:	f003 0303 	and.w	r3, r3, #3
 8009f16:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8009f18:	4ba1      	ldr	r3, [pc, #644]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f1c:	0a1b      	lsrs	r3, r3, #8
 8009f1e:	f003 030f 	and.w	r3, r3, #15
 8009f22:	3301      	adds	r3, #1
 8009f24:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8009f26:	4b9e      	ldr	r3, [pc, #632]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f2a:	091b      	lsrs	r3, r3, #4
 8009f2c:	f003 0301 	and.w	r3, r3, #1
 8009f30:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8009f32:	4b9b      	ldr	r3, [pc, #620]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f36:	08db      	lsrs	r3, r3, #3
 8009f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	fb02 f303 	mul.w	r3, r2, r3
 8009f42:	ee07 3a90 	vmov	s15, r3
 8009f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f4a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	2b03      	cmp	r3, #3
 8009f52:	d062      	beq.n	800a01a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	f200 8081 	bhi.w	800a05e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d024      	beq.n	8009fac <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d17a      	bne.n	800a05e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	ee07 3a90 	vmov	s15, r3
 8009f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f72:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8009f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f7a:	4b89      	ldr	r3, [pc, #548]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f82:	ee07 3a90 	vmov	s15, r3
 8009f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f8e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009faa:	e08f      	b.n	800a0cc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009fac:	4b7c      	ldr	r3, [pc, #496]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d005      	beq.n	8009fc4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8009fb8:	4b79      	ldr	r3, [pc, #484]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	0f1b      	lsrs	r3, r3, #28
 8009fbe:	f003 030f 	and.w	r3, r3, #15
 8009fc2:	e006      	b.n	8009fd2 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8009fc4:	4b76      	ldr	r3, [pc, #472]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009fc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009fca:	041b      	lsls	r3, r3, #16
 8009fcc:	0f1b      	lsrs	r3, r3, #28
 8009fce:	f003 030f 	and.w	r3, r3, #15
 8009fd2:	4a76      	ldr	r2, [pc, #472]	@ (800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fd8:	ee07 3a90 	vmov	s15, r3
 8009fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	ee07 3a90 	vmov	s15, r3
 8009fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	ee07 3a90 	vmov	s15, r3
 8009ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff8:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ffc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a008:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a00c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800a010:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a014:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a018:	e058      	b.n	800a0cc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	ee07 3a90 	vmov	s15, r3
 800a020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a024:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a02c:	4b5c      	ldr	r3, [pc, #368]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a02e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a034:	ee07 3a90 	vmov	s15, r3
 800a038:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a03c:	ed97 6a02 	vldr	s12, [r7, #8]
 800a040:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a044:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a048:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a04c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a050:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a054:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a058:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a05c:	e036      	b.n	800a0cc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800a05e:	4b50      	ldr	r3, [pc, #320]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a066:	2b00      	cmp	r3, #0
 800a068:	d005      	beq.n	800a076 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800a06a:	4b4d      	ldr	r3, [pc, #308]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	0f1b      	lsrs	r3, r3, #28
 800a070:	f003 030f 	and.w	r3, r3, #15
 800a074:	e006      	b.n	800a084 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800a076:	4b4a      	ldr	r3, [pc, #296]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a078:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a07c:	041b      	lsls	r3, r3, #16
 800a07e:	0f1b      	lsrs	r3, r3, #28
 800a080:	f003 030f 	and.w	r3, r3, #15
 800a084:	4a49      	ldr	r2, [pc, #292]	@ (800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800a086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a08a:	ee07 3a90 	vmov	s15, r3
 800a08e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	ee07 3a90 	vmov	s15, r3
 800a098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a09c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	ee07 3a90 	vmov	s15, r3
 800a0a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0ae:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a0b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0be:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800a0c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0ca:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800a0cc:	4b34      	ldr	r3, [pc, #208]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d017      	beq.n	800a108 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a0d8:	4b31      	ldr	r3, [pc, #196]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a0da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0dc:	0a5b      	lsrs	r3, r3, #9
 800a0de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0e2:	ee07 3a90 	vmov	s15, r3
 800a0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800a0ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0ee:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a0f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0fe:	ee17 2a90 	vmov	r2, s15
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	601a      	str	r2, [r3, #0]
 800a106:	e002      	b.n	800a10e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800a10e:	4b24      	ldr	r3, [pc, #144]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a116:	2b00      	cmp	r3, #0
 800a118:	d017      	beq.n	800a14a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a11a:	4b21      	ldr	r3, [pc, #132]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a11c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a11e:	0c1b      	lsrs	r3, r3, #16
 800a120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a124:	ee07 3a90 	vmov	s15, r3
 800a128:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800a12c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a130:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a134:	edd7 6a07 	vldr	s13, [r7, #28]
 800a138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a13c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a140:	ee17 2a90 	vmov	r2, s15
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	605a      	str	r2, [r3, #4]
 800a148:	e002      	b.n	800a150 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800a150:	4b13      	ldr	r3, [pc, #76]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a154:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d017      	beq.n	800a18c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a15c:	4b10      	ldr	r3, [pc, #64]	@ (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a15e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a160:	0e1b      	lsrs	r3, r3, #24
 800a162:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a166:	ee07 3a90 	vmov	s15, r3
 800a16a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800a16e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a172:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a176:	edd7 6a07 	vldr	s13, [r7, #28]
 800a17a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a17e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a182:	ee17 2a90 	vmov	r2, s15
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a18a:	e002      	b.n	800a192 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	609a      	str	r2, [r3, #8]
}
 800a192:	bf00      	nop
 800a194:	3724      	adds	r7, #36	@ 0x24
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	46020c00 	.word	0x46020c00
 800a1a4:	4b742400 	.word	0x4b742400
 800a1a8:	46000000 	.word	0x46000000
 800a1ac:	0800d9a0 	.word	0x0800d9a0

0800a1b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b089      	sub	sp, #36	@ 0x24
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800a1b8:	4ba6      	ldr	r3, [pc, #664]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1c0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800a1c2:	4ba4      	ldr	r3, [pc, #656]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1c6:	f003 0303 	and.w	r3, r3, #3
 800a1ca:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800a1cc:	4ba1      	ldr	r3, [pc, #644]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1d0:	0a1b      	lsrs	r3, r3, #8
 800a1d2:	f003 030f 	and.w	r3, r3, #15
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800a1da:	4b9e      	ldr	r3, [pc, #632]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1de:	091b      	lsrs	r3, r3, #4
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800a1e6:	4b9b      	ldr	r3, [pc, #620]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1ea:	08db      	lsrs	r3, r3, #3
 800a1ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	fb02 f303 	mul.w	r3, r2, r3
 800a1f6:	ee07 3a90 	vmov	s15, r3
 800a1fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1fe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	2b03      	cmp	r3, #3
 800a206:	d062      	beq.n	800a2ce <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	f200 8081 	bhi.w	800a312 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	2b01      	cmp	r3, #1
 800a214:	d024      	beq.n	800a260 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d17a      	bne.n	800a312 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	ee07 3a90 	vmov	s15, r3
 800a222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a226:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a22a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a22e:	4b89      	ldr	r3, [pc, #548]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a236:	ee07 3a90 	vmov	s15, r3
 800a23a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a23e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a242:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a45c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a246:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a24a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a24e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a252:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a25a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800a25e:	e08f      	b.n	800a380 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a260:	4b7c      	ldr	r3, [pc, #496]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d005      	beq.n	800a278 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800a26c:	4b79      	ldr	r3, [pc, #484]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	0f1b      	lsrs	r3, r3, #28
 800a272:	f003 030f 	and.w	r3, r3, #15
 800a276:	e006      	b.n	800a286 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800a278:	4b76      	ldr	r3, [pc, #472]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a27a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a27e:	041b      	lsls	r3, r3, #16
 800a280:	0f1b      	lsrs	r3, r3, #28
 800a282:	f003 030f 	and.w	r3, r3, #15
 800a286:	4a76      	ldr	r2, [pc, #472]	@ (800a460 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a28c:	ee07 3a90 	vmov	s15, r3
 800a290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	ee07 3a90 	vmov	s15, r3
 800a29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a29e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	ee07 3a90 	vmov	s15, r3
 800a2a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ac:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2b0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a45c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a2b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a2c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2cc:	e058      	b.n	800a380 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	ee07 3a90 	vmov	s15, r3
 800a2d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a2dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2e0:	4b5c      	ldr	r3, [pc, #368]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a2e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e8:	ee07 3a90 	vmov	s15, r3
 800a2ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a2f0:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2f4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a45c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a2f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a2fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a300:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a304:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a30c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a310:	e036      	b.n	800a380 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a312:	4b50      	ldr	r3, [pc, #320]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d005      	beq.n	800a32a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800a31e:	4b4d      	ldr	r3, [pc, #308]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	0f1b      	lsrs	r3, r3, #28
 800a324:	f003 030f 	and.w	r3, r3, #15
 800a328:	e006      	b.n	800a338 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800a32a:	4b4a      	ldr	r3, [pc, #296]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a32c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a330:	041b      	lsls	r3, r3, #16
 800a332:	0f1b      	lsrs	r3, r3, #28
 800a334:	f003 030f 	and.w	r3, r3, #15
 800a338:	4a49      	ldr	r2, [pc, #292]	@ (800a460 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a33e:	ee07 3a90 	vmov	s15, r3
 800a342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	ee07 3a90 	vmov	s15, r3
 800a34c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	ee07 3a90 	vmov	s15, r3
 800a35a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a35e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a362:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a45c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a36a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a36e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a372:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a37a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a37e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800a380:	4b34      	ldr	r3, [pc, #208]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d017      	beq.n	800a3bc <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a38c:	4b31      	ldr	r3, [pc, #196]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a38e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a390:	0a5b      	lsrs	r3, r3, #9
 800a392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a396:	ee07 3a90 	vmov	s15, r3
 800a39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800a39e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3a2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a3a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3b2:	ee17 2a90 	vmov	r2, s15
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	601a      	str	r2, [r3, #0]
 800a3ba:	e002      	b.n	800a3c2 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800a3c2:	4b24      	ldr	r3, [pc, #144]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a3c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d017      	beq.n	800a3fe <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a3ce:	4b21      	ldr	r3, [pc, #132]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a3d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3d2:	0c1b      	lsrs	r3, r3, #16
 800a3d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3d8:	ee07 3a90 	vmov	s15, r3
 800a3dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800a3e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3e4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a3e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3f4:	ee17 2a90 	vmov	r2, s15
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	605a      	str	r2, [r3, #4]
 800a3fc:	e002      	b.n	800a404 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800a404:	4b13      	ldr	r3, [pc, #76]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a408:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d017      	beq.n	800a440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a410:	4b10      	ldr	r3, [pc, #64]	@ (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a414:	0e1b      	lsrs	r3, r3, #24
 800a416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a41a:	ee07 3a90 	vmov	s15, r3
 800a41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800a422:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a426:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a42a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a42e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a436:	ee17 2a90 	vmov	r2, s15
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a43e:	e002      	b.n	800a446 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	609a      	str	r2, [r3, #8]
}
 800a446:	bf00      	nop
 800a448:	3724      	adds	r7, #36	@ 0x24
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	46020c00 	.word	0x46020c00
 800a458:	4b742400 	.word	0x4b742400
 800a45c:	46000000 	.word	0x46000000
 800a460:	0800d9a0 	.word	0x0800d9a0

0800a464 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b08e      	sub	sp, #56	@ 0x38
 800a468:	af00      	add	r7, sp, #0
 800a46a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a46e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a472:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800a476:	430b      	orrs	r3, r1
 800a478:	d145      	bne.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a47a:	4ba7      	ldr	r3, [pc, #668]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a47c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a480:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a484:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800a486:	4ba4      	ldr	r3, [pc, #656]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a48c:	f003 0302 	and.w	r3, r3, #2
 800a490:	2b02      	cmp	r3, #2
 800a492:	d108      	bne.n	800a4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800a494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a49a:	d104      	bne.n	800a4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800a49c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4a2:	f001 bb5a 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800a4a6:	4b9c      	ldr	r3, [pc, #624]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a4a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a4ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4b4:	d114      	bne.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800a4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4bc:	d110      	bne.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a4be:	4b96      	ldr	r3, [pc, #600]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a4c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a4c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a4c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4cc:	d103      	bne.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800a4ce:	23fa      	movs	r3, #250	@ 0xfa
 800a4d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a4d2:	f001 bb42 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800a4d6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a4da:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a4dc:	f001 bb3d 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800a4e0:	4b8d      	ldr	r3, [pc, #564]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4ec:	d107      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4f4:	d103      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800a4f6:	4b89      	ldr	r3, [pc, #548]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a4f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4fa:	f001 bb2e 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800a4fe:	2300      	movs	r3, #0
 800a500:	637b      	str	r3, [r7, #52]	@ 0x34
 800a502:	f001 bb2a 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a50a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a50e:	430b      	orrs	r3, r1
 800a510:	d151      	bne.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a512:	4b81      	ldr	r3, [pc, #516]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a514:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a518:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a51c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a520:	2b80      	cmp	r3, #128	@ 0x80
 800a522:	d035      	beq.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800a524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a526:	2b80      	cmp	r3, #128	@ 0x80
 800a528:	d841      	bhi.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52c:	2b60      	cmp	r3, #96	@ 0x60
 800a52e:	d02a      	beq.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800a530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a532:	2b60      	cmp	r3, #96	@ 0x60
 800a534:	d83b      	bhi.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a538:	2b40      	cmp	r3, #64	@ 0x40
 800a53a:	d009      	beq.n	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a53e:	2b40      	cmp	r3, #64	@ 0x40
 800a540:	d835      	bhi.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00c      	beq.n	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800a548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54a:	2b20      	cmp	r3, #32
 800a54c:	d012      	beq.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a54e:	e02e      	b.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a550:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a554:	4618      	mov	r0, r3
 800a556:	f7ff fb77 	bl	8009c48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a55e:	f001 bafc 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a562:	f107 0318 	add.w	r3, r7, #24
 800a566:	4618      	mov	r0, r3
 800a568:	f7ff fcc8 	bl	8009efc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a570:	f001 baf3 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a574:	f107 030c 	add.w	r3, r7, #12
 800a578:	4618      	mov	r0, r3
 800a57a:	f7ff fe19 	bl	800a1b0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a582:	f001 baea 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a586:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a58a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a58c:	f001 bae5 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a590:	4b61      	ldr	r3, [pc, #388]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a59c:	d103      	bne.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800a59e:	4b60      	ldr	r3, [pc, #384]	@ (800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a5a0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a5a2:	f001 bada 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a5aa:	f001 bad6 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a5b2:	f001 bad2 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800a5b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5ba:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a5be:	430b      	orrs	r3, r1
 800a5c0:	d158      	bne.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a5c2:	4b55      	ldr	r3, [pc, #340]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a5c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a5c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a5cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5d4:	d03b      	beq.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5dc:	d846      	bhi.n	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5e4:	d02e      	beq.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5ec:	d83e      	bhi.n	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5f4:	d00b      	beq.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5fc:	d836      	bhi.n	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00d      	beq.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800a604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a60a:	d012      	beq.n	800a632 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800a60c:	e02e      	b.n	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a60e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a612:	4618      	mov	r0, r3
 800a614:	f7ff fb18 	bl	8009c48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a61c:	f001 ba9d 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a620:	f107 0318 	add.w	r3, r7, #24
 800a624:	4618      	mov	r0, r3
 800a626:	f7ff fc69 	bl	8009efc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a62e:	f001 ba94 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a632:	f107 030c 	add.w	r3, r7, #12
 800a636:	4618      	mov	r0, r3
 800a638:	f7ff fdba 	bl	800a1b0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a640:	f001 ba8b 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a644:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a648:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a64a:	f001 ba86 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a64e:	4b32      	ldr	r3, [pc, #200]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a65a:	d103      	bne.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800a65c:	4b30      	ldr	r3, [pc, #192]	@ (800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a65e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a660:	f001 ba7b 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a664:	2300      	movs	r3, #0
 800a666:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a668:	f001 ba77 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800a66c:	2300      	movs	r3, #0
 800a66e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a670:	f001 ba73 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800a674:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a678:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a67c:	430b      	orrs	r3, r1
 800a67e:	d126      	bne.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800a680:	4b25      	ldr	r3, [pc, #148]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a682:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a686:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a68a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800a68c:	4b22      	ldr	r3, [pc, #136]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a698:	d106      	bne.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d103      	bne.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800a6a0:	4b1f      	ldr	r3, [pc, #124]	@ (800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a6a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6a4:	f001 ba59 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800a6a8:	4b1b      	ldr	r3, [pc, #108]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6b4:	d107      	bne.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6bc:	d103      	bne.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800a6be:	4b19      	ldr	r3, [pc, #100]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a6c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6c2:	f001 ba4a 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ca:	f001 ba46 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800a6ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6d2:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800a6d6:	430b      	orrs	r3, r1
 800a6d8:	d16e      	bne.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a6da:	4b0f      	ldr	r3, [pc, #60]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a6dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a6e0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a6e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a6ec:	d03d      	beq.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a6f4:	d85c      	bhi.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6fc:	d014      	beq.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a700:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a704:	d854      	bhi.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d01f      	beq.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800a70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a712:	d012      	beq.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800a714:	e04c      	b.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a716:	bf00      	nop
 800a718:	46020c00 	.word	0x46020c00
 800a71c:	0007a120 	.word	0x0007a120
 800a720:	00f42400 	.word	0x00f42400
 800a724:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a728:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7ff fa8b 	bl	8009c48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a734:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a736:	f001 ba10 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a73a:	f107 0318 	add.w	r3, r7, #24
 800a73e:	4618      	mov	r0, r3
 800a740:	f7ff fbdc 	bl	8009efc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a748:	f001 ba07 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a74c:	4ba7      	ldr	r3, [pc, #668]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a754:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a758:	d103      	bne.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800a75a:	4ba5      	ldr	r3, [pc, #660]	@ (800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a75c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a75e:	f001 b9fc 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a762:	2300      	movs	r3, #0
 800a764:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a766:	f001 b9f8 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a76a:	4ba0      	ldr	r3, [pc, #640]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 0320 	and.w	r3, r3, #32
 800a772:	2b20      	cmp	r3, #32
 800a774:	d118      	bne.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a776:	4b9d      	ldr	r3, [pc, #628]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d005      	beq.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a782:	4b9a      	ldr	r3, [pc, #616]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	0e1b      	lsrs	r3, r3, #24
 800a788:	f003 030f 	and.w	r3, r3, #15
 800a78c:	e006      	b.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a78e:	4b97      	ldr	r3, [pc, #604]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a790:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a794:	041b      	lsls	r3, r3, #16
 800a796:	0e1b      	lsrs	r3, r3, #24
 800a798:	f003 030f 	and.w	r3, r3, #15
 800a79c:	4a95      	ldr	r2, [pc, #596]	@ (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a79e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a7a4:	f001 b9d9 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7ac:	f001 b9d5 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7b4:	f001 b9d1 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a7b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7bc:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800a7c0:	430b      	orrs	r3, r1
 800a7c2:	d17f      	bne.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a7c4:	4b89      	ldr	r3, [pc, #548]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a7c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a7ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a7ce:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d165      	bne.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a7d6:	4b85      	ldr	r3, [pc, #532]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a7d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a7dc:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a7e0:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a7e8:	d034      	beq.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ec:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a7f0:	d853      	bhi.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7f8:	d00b      	beq.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a800:	d84b      	bhi.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800a802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a804:	2b00      	cmp	r3, #0
 800a806:	d016      	beq.n	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800a808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a80e:	d009      	beq.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a810:	e043      	b.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a816:	4618      	mov	r0, r3
 800a818:	f7ff fa16 	bl	8009c48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a81e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a820:	f001 b99b 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a824:	f107 0318 	add.w	r3, r7, #24
 800a828:	4618      	mov	r0, r3
 800a82a:	f7ff fb67 	bl	8009efc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a832:	f001 b992 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a836:	4b6d      	ldr	r3, [pc, #436]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a83e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a842:	d103      	bne.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800a844:	4b6a      	ldr	r3, [pc, #424]	@ (800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a846:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a848:	f001 b987 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800a84c:	2300      	movs	r3, #0
 800a84e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a850:	f001 b983 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a854:	4b65      	ldr	r3, [pc, #404]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 0320 	and.w	r3, r3, #32
 800a85c:	2b20      	cmp	r3, #32
 800a85e:	d118      	bne.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a860:	4b62      	ldr	r3, [pc, #392]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d005      	beq.n	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800a86c:	4b5f      	ldr	r3, [pc, #380]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	0e1b      	lsrs	r3, r3, #24
 800a872:	f003 030f 	and.w	r3, r3, #15
 800a876:	e006      	b.n	800a886 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a878:	4b5c      	ldr	r3, [pc, #368]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a87a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a87e:	041b      	lsls	r3, r3, #16
 800a880:	0e1b      	lsrs	r3, r3, #24
 800a882:	f003 030f 	and.w	r3, r3, #15
 800a886:	4a5b      	ldr	r2, [pc, #364]	@ (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a88c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a88e:	f001 b964 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800a892:	2300      	movs	r3, #0
 800a894:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a896:	f001 b960 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800a89a:	2300      	movs	r3, #0
 800a89c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a89e:	f001 b95c 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800a8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8a8:	d108      	bne.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7ff f9ca 	bl	8009c48 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8b8:	f001 b94f 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8c0:	f001 b94b 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800a8c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8c8:	1e51      	subs	r1, r2, #1
 800a8ca:	430b      	orrs	r3, r1
 800a8cc:	d136      	bne.n	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a8ce:	4b47      	ldr	r3, [pc, #284]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a8d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a8d4:	f003 0303 	and.w	r3, r3, #3
 800a8d8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800a8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d104      	bne.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800a8e0:	f7fe f968 	bl	8008bb4 <HAL_RCC_GetPCLK2Freq>
 800a8e4:	6378      	str	r0, [r7, #52]	@ 0x34
 800a8e6:	f001 b938 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800a8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d104      	bne.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a8f0:	f7fe f830 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800a8f4:	6378      	str	r0, [r7, #52]	@ 0x34
 800a8f6:	f001 b930 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800a8fa:	4b3c      	ldr	r3, [pc, #240]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a906:	d106      	bne.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800a908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	d103      	bne.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800a90e:	4b3a      	ldr	r3, [pc, #232]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a910:	637b      	str	r3, [r7, #52]	@ 0x34
 800a912:	f001 b922 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800a916:	4b35      	ldr	r3, [pc, #212]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a91c:	f003 0302 	and.w	r3, r3, #2
 800a920:	2b02      	cmp	r3, #2
 800a922:	d107      	bne.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a926:	2b03      	cmp	r3, #3
 800a928:	d104      	bne.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800a92a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a92e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a930:	f001 b913 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800a934:	2300      	movs	r3, #0
 800a936:	637b      	str	r3, [r7, #52]	@ 0x34
 800a938:	f001 b90f 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800a93c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a940:	1e91      	subs	r1, r2, #2
 800a942:	430b      	orrs	r3, r1
 800a944:	d136      	bne.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a946:	4b29      	ldr	r3, [pc, #164]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a94c:	f003 030c 	and.w	r3, r3, #12
 800a950:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800a952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a954:	2b00      	cmp	r3, #0
 800a956:	d104      	bne.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a958:	f7fe f918 	bl	8008b8c <HAL_RCC_GetPCLK1Freq>
 800a95c:	6378      	str	r0, [r7, #52]	@ 0x34
 800a95e:	f001 b8fc 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800a962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a964:	2b04      	cmp	r3, #4
 800a966:	d104      	bne.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a968:	f7fd fff4 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800a96c:	6378      	str	r0, [r7, #52]	@ 0x34
 800a96e:	f001 b8f4 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800a972:	4b1e      	ldr	r3, [pc, #120]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a97a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a97e:	d106      	bne.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a982:	2b08      	cmp	r3, #8
 800a984:	d103      	bne.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800a986:	4b1c      	ldr	r3, [pc, #112]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a988:	637b      	str	r3, [r7, #52]	@ 0x34
 800a98a:	f001 b8e6 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800a98e:	4b17      	ldr	r3, [pc, #92]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a994:	f003 0302 	and.w	r3, r3, #2
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d107      	bne.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800a99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a99e:	2b0c      	cmp	r3, #12
 800a9a0:	d104      	bne.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800a9a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9a8:	f001 b8d7 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9b0:	f001 b8d3 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800a9b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9b8:	1f11      	subs	r1, r2, #4
 800a9ba:	430b      	orrs	r3, r1
 800a9bc:	d13f      	bne.n	800aa3e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a9be:	4b0b      	ldr	r3, [pc, #44]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a9c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a9c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a9c8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800a9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d104      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a9d0:	f7fe f8dc 	bl	8008b8c <HAL_RCC_GetPCLK1Freq>
 800a9d4:	6378      	str	r0, [r7, #52]	@ 0x34
 800a9d6:	f001 b8c0 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800a9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9dc:	2b10      	cmp	r3, #16
 800a9de:	d10d      	bne.n	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a9e0:	f7fd ffb8 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800a9e4:	6378      	str	r0, [r7, #52]	@ 0x34
 800a9e6:	f001 b8b8 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a9ea:	bf00      	nop
 800a9ec:	46020c00 	.word	0x46020c00
 800a9f0:	02dc6c00 	.word	0x02dc6c00
 800a9f4:	0800d9a0 	.word	0x0800d9a0
 800a9f8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800a9fc:	4ba8      	ldr	r3, [pc, #672]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa08:	d106      	bne.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0c:	2b20      	cmp	r3, #32
 800aa0e:	d103      	bne.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800aa10:	4ba4      	ldr	r3, [pc, #656]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800aa12:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa14:	f001 b8a1 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800aa18:	4ba1      	ldr	r3, [pc, #644]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa1e:	f003 0302 	and.w	r3, r3, #2
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d107      	bne.n	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800aa26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa28:	2b30      	cmp	r3, #48	@ 0x30
 800aa2a:	d104      	bne.n	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800aa2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa30:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa32:	f001 b892 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800aa36:	2300      	movs	r3, #0
 800aa38:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa3a:	f001 b88e 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800aa3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa42:	f1a2 0108 	sub.w	r1, r2, #8
 800aa46:	430b      	orrs	r3, r1
 800aa48:	d136      	bne.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800aa4a:	4b95      	ldr	r3, [pc, #596]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aa50:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800aa54:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800aa56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d104      	bne.n	800aa66 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800aa5c:	f7fe f896 	bl	8008b8c <HAL_RCC_GetPCLK1Freq>
 800aa60:	6378      	str	r0, [r7, #52]	@ 0x34
 800aa62:	f001 b87a 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800aa66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa68:	2b40      	cmp	r3, #64	@ 0x40
 800aa6a:	d104      	bne.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aa6c:	f7fd ff72 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800aa70:	6378      	str	r0, [r7, #52]	@ 0x34
 800aa72:	f001 b872 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800aa76:	4b8a      	ldr	r3, [pc, #552]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa82:	d106      	bne.n	800aa92 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800aa84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa86:	2b80      	cmp	r3, #128	@ 0x80
 800aa88:	d103      	bne.n	800aa92 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800aa8a:	4b86      	ldr	r3, [pc, #536]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800aa8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa8e:	f001 b864 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800aa92:	4b83      	ldr	r3, [pc, #524]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa98:	f003 0302 	and.w	r3, r3, #2
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	d107      	bne.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800aaa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa2:	2bc0      	cmp	r3, #192	@ 0xc0
 800aaa4:	d104      	bne.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800aaa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aaaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaac:	f001 b855 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800aab0:	2300      	movs	r3, #0
 800aab2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aab4:	f001 b851 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800aab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aabc:	f1a2 0110 	sub.w	r1, r2, #16
 800aac0:	430b      	orrs	r3, r1
 800aac2:	d139      	bne.n	800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800aac4:	4b76      	ldr	r3, [pc, #472]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aaca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aace:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800aad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d104      	bne.n	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800aad6:	f7fe f859 	bl	8008b8c <HAL_RCC_GetPCLK1Freq>
 800aada:	6378      	str	r0, [r7, #52]	@ 0x34
 800aadc:	f001 b83d 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800aae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aae6:	d104      	bne.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aae8:	f7fd ff34 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800aaec:	6378      	str	r0, [r7, #52]	@ 0x34
 800aaee:	f001 b834 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800aaf2:	4b6b      	ldr	r3, [pc, #428]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aafa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aafe:	d107      	bne.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800ab00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab06:	d103      	bne.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800ab08:	4b66      	ldr	r3, [pc, #408]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ab0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab0c:	f001 b825 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800ab10:	4b63      	ldr	r3, [pc, #396]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ab12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab16:	f003 0302 	and.w	r3, r3, #2
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	d108      	bne.n	800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab24:	d104      	bne.n	800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800ab26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab2c:	f001 b815 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800ab30:	2300      	movs	r3, #0
 800ab32:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab34:	f001 b811 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800ab38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab3c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800ab40:	430b      	orrs	r3, r1
 800ab42:	d139      	bne.n	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800ab44:	4b56      	ldr	r3, [pc, #344]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ab46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ab4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ab4e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800ab50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d104      	bne.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ab56:	f7fe f819 	bl	8008b8c <HAL_RCC_GetPCLK1Freq>
 800ab5a:	6378      	str	r0, [r7, #52]	@ 0x34
 800ab5c:	f000 bffd 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800ab60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab66:	d104      	bne.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ab68:	f7fd fef4 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800ab6c:	6378      	str	r0, [r7, #52]	@ 0x34
 800ab6e:	f000 bff4 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800ab72:	4b4b      	ldr	r3, [pc, #300]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab7e:	d107      	bne.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800ab80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab86:	d103      	bne.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800ab88:	4b46      	ldr	r3, [pc, #280]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ab8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab8c:	f000 bfe5 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800ab90:	4b43      	ldr	r3, [pc, #268]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ab92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab96:	f003 0302 	and.w	r3, r3, #2
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d108      	bne.n	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aba4:	d104      	bne.n	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800aba6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800abac:	f000 bfd5 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800abb0:	2300      	movs	r3, #0
 800abb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800abb4:	f000 bfd1 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800abb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abbc:	f1a2 0120 	sub.w	r1, r2, #32
 800abc0:	430b      	orrs	r3, r1
 800abc2:	d158      	bne.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800abc4:	4b36      	ldr	r3, [pc, #216]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800abc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800abca:	f003 0307 	and.w	r3, r3, #7
 800abce:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800abd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d104      	bne.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800abd6:	f7fe f801 	bl	8008bdc <HAL_RCC_GetPCLK3Freq>
 800abda:	6378      	str	r0, [r7, #52]	@ 0x34
 800abdc:	f000 bfbd 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800abe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d104      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800abe6:	f7fd feb5 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800abea:	6378      	str	r0, [r7, #52]	@ 0x34
 800abec:	f000 bfb5 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800abf0:	4b2b      	ldr	r3, [pc, #172]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800abf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abfc:	d106      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800abfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d103      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800ac04:	4b27      	ldr	r3, [pc, #156]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ac06:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac08:	f000 bfa7 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800ac0c:	4b24      	ldr	r3, [pc, #144]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac12:	f003 0302 	and.w	r3, r3, #2
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d107      	bne.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1c:	2b03      	cmp	r3, #3
 800ac1e:	d104      	bne.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800ac20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac24:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac26:	f000 bf98 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800ac2a:	4b1d      	ldr	r3, [pc, #116]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 0320 	and.w	r3, r3, #32
 800ac32:	2b20      	cmp	r3, #32
 800ac34:	d11b      	bne.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800ac36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac38:	2b04      	cmp	r3, #4
 800ac3a:	d118      	bne.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ac3c:	4b18      	ldr	r3, [pc, #96]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d005      	beq.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800ac48:	4b15      	ldr	r3, [pc, #84]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	0e1b      	lsrs	r3, r3, #24
 800ac4e:	f003 030f 	and.w	r3, r3, #15
 800ac52:	e006      	b.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800ac54:	4b12      	ldr	r3, [pc, #72]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ac5a:	041b      	lsls	r3, r3, #16
 800ac5c:	0e1b      	lsrs	r3, r3, #24
 800ac5e:	f003 030f 	and.w	r3, r3, #15
 800ac62:	4a11      	ldr	r2, [pc, #68]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ac64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac68:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac6a:	f000 bf76 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac72:	f000 bf72 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800ac76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac7a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ac7e:	430b      	orrs	r3, r1
 800ac80:	d172      	bne.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800ac82:	4b07      	ldr	r3, [pc, #28]	@ (800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ac88:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ac8c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800ac8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac94:	d10a      	bne.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ac96:	f7fd fe5d 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800ac9a:	6378      	str	r0, [r7, #52]	@ 0x34
 800ac9c:	f000 bf5d 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800aca0:	46020c00 	.word	0x46020c00
 800aca4:	00f42400 	.word	0x00f42400
 800aca8:	0800d9a0 	.word	0x0800d9a0
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800acac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acb2:	d108      	bne.n	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acb4:	f107 0318 	add.w	r3, r7, #24
 800acb8:	4618      	mov	r0, r3
 800acba:	f7ff f91f 	bl	8009efc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800acbe:	6a3b      	ldr	r3, [r7, #32]
 800acc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800acc2:	f000 bf4a 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800acc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d104      	bne.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800accc:	f7fd ff44 	bl	8008b58 <HAL_RCC_GetHCLKFreq>
 800acd0:	6378      	str	r0, [r7, #52]	@ 0x34
 800acd2:	f000 bf42 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800acd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800acdc:	d122      	bne.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800acde:	4bb0      	ldr	r3, [pc, #704]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 0320 	and.w	r3, r3, #32
 800ace6:	2b20      	cmp	r3, #32
 800ace8:	d118      	bne.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800acea:	4bad      	ldr	r3, [pc, #692]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d005      	beq.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800acf6:	4baa      	ldr	r3, [pc, #680]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	0e1b      	lsrs	r3, r3, #24
 800acfc:	f003 030f 	and.w	r3, r3, #15
 800ad00:	e006      	b.n	800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800ad02:	4ba7      	ldr	r3, [pc, #668]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ad08:	041b      	lsls	r3, r3, #16
 800ad0a:	0e1b      	lsrs	r3, r3, #24
 800ad0c:	f003 030f 	and.w	r3, r3, #15
 800ad10:	4aa4      	ldr	r2, [pc, #656]	@ (800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ad12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad16:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad18:	f000 bf1f 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad20:	f000 bf1b 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800ad24:	4b9e      	ldr	r3, [pc, #632]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad30:	d107      	bne.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800ad32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad38:	d103      	bne.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800ad3a:	4b9b      	ldr	r3, [pc, #620]	@ (800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ad3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad3e:	f000 bf0c 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800ad42:	4b97      	ldr	r3, [pc, #604]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad4e:	d107      	bne.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800ad50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad56:	d103      	bne.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800ad58:	4b93      	ldr	r3, [pc, #588]	@ (800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ad5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad5c:	f000 befd 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800ad60:	2300      	movs	r3, #0
 800ad62:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad64:	f000 bef9 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800ad68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad6c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ad70:	430b      	orrs	r3, r1
 800ad72:	d158      	bne.n	800ae26 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800ad74:	4b8a      	ldr	r3, [pc, #552]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ad7a:	f003 0307 	and.w	r3, r3, #7
 800ad7e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ad80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad82:	2b04      	cmp	r3, #4
 800ad84:	d84b      	bhi.n	800ae1e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800ad86:	a201      	add	r2, pc, #4	@ (adr r2, 800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800ad88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad8c:	0800adc5 	.word	0x0800adc5
 800ad90:	0800ada1 	.word	0x0800ada1
 800ad94:	0800adb3 	.word	0x0800adb3
 800ad98:	0800adcf 	.word	0x0800adcf
 800ad9c:	0800add9 	.word	0x0800add9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ada0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7fe ff4f 	bl	8009c48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800adaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800adae:	f000 bed4 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adb2:	f107 030c 	add.w	r3, r7, #12
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7ff f9fa 	bl	800a1b0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800adc0:	f000 becb 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800adc4:	f7fd fec8 	bl	8008b58 <HAL_RCC_GetHCLKFreq>
 800adc8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800adca:	f000 bec6 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800adce:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800add2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800add4:	f000 bec1 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800add8:	4b71      	ldr	r3, [pc, #452]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0320 	and.w	r3, r3, #32
 800ade0:	2b20      	cmp	r3, #32
 800ade2:	d118      	bne.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ade4:	4b6e      	ldr	r3, [pc, #440]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800adec:	2b00      	cmp	r3, #0
 800adee:	d005      	beq.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800adf0:	4b6b      	ldr	r3, [pc, #428]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	0e1b      	lsrs	r3, r3, #24
 800adf6:	f003 030f 	and.w	r3, r3, #15
 800adfa:	e006      	b.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800adfc:	4b68      	ldr	r3, [pc, #416]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800adfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ae02:	041b      	lsls	r3, r3, #16
 800ae04:	0e1b      	lsrs	r3, r3, #24
 800ae06:	f003 030f 	and.w	r3, r3, #15
 800ae0a:	4a66      	ldr	r2, [pc, #408]	@ (800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ae0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae10:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ae12:	f000 bea2 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ae16:	2300      	movs	r3, #0
 800ae18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae1a:	f000 be9e 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae22:	f000 be9a 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800ae26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae2a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800ae2e:	430b      	orrs	r3, r1
 800ae30:	d167      	bne.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800ae32:	4b5b      	ldr	r3, [pc, #364]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ae34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ae38:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ae3c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ae44:	d036      	beq.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800ae46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ae4c:	d855      	bhi.n	800aefa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae54:	d029      	beq.n	800aeaa <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800ae56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae5c:	d84d      	bhi.n	800aefa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae64:	d013      	beq.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800ae66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae6c:	d845      	bhi.n	800aefa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d015      	beq.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800ae74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae7a:	d13e      	bne.n	800aefa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fe fee1 	bl	8009c48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ae86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae8a:	f000 be66 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae8e:	f107 030c 	add.w	r3, r7, #12
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7ff f98c 	bl	800a1b0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae9c:	f000 be5d 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800aea0:	f7fd fe5a 	bl	8008b58 <HAL_RCC_GetHCLKFreq>
 800aea4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800aea6:	f000 be58 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800aeaa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800aeae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aeb0:	f000 be53 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800aeb4:	4b3a      	ldr	r3, [pc, #232]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 0320 	and.w	r3, r3, #32
 800aebc:	2b20      	cmp	r3, #32
 800aebe:	d118      	bne.n	800aef2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aec0:	4b37      	ldr	r3, [pc, #220]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d005      	beq.n	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800aecc:	4b34      	ldr	r3, [pc, #208]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	0e1b      	lsrs	r3, r3, #24
 800aed2:	f003 030f 	and.w	r3, r3, #15
 800aed6:	e006      	b.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800aed8:	4b31      	ldr	r3, [pc, #196]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aeda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aede:	041b      	lsls	r3, r3, #16
 800aee0:	0e1b      	lsrs	r3, r3, #24
 800aee2:	f003 030f 	and.w	r3, r3, #15
 800aee6:	4a2f      	ldr	r2, [pc, #188]	@ (800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800aee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aeec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aeee:	f000 be34 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800aef2:	2300      	movs	r3, #0
 800aef4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aef6:	f000 be30 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800aefa:	2300      	movs	r3, #0
 800aefc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aefe:	f000 be2c 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800af02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af06:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800af0a:	430b      	orrs	r3, r1
 800af0c:	d152      	bne.n	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800af0e:	4b24      	ldr	r3, [pc, #144]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800af10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800af18:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800af1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d104      	bne.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800af20:	f7fd fe34 	bl	8008b8c <HAL_RCC_GetPCLK1Freq>
 800af24:	6378      	str	r0, [r7, #52]	@ 0x34
 800af26:	f000 be18 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800af2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af30:	d104      	bne.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800af32:	f7fd fd0f 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800af36:	6378      	str	r0, [r7, #52]	@ 0x34
 800af38:	f000 be0f 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800af3c:	4b18      	ldr	r3, [pc, #96]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af48:	d107      	bne.n	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800af4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af50:	d103      	bne.n	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800af52:	4b15      	ldr	r3, [pc, #84]	@ (800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800af54:	637b      	str	r3, [r7, #52]	@ 0x34
 800af56:	f000 be00 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800af5a:	4b11      	ldr	r3, [pc, #68]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f003 0320 	and.w	r3, r3, #32
 800af62:	2b20      	cmp	r3, #32
 800af64:	d122      	bne.n	800afac <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800af66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af6c:	d11e      	bne.n	800afac <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800af6e:	4b0c      	ldr	r3, [pc, #48]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af76:	2b00      	cmp	r3, #0
 800af78:	d005      	beq.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800af7a:	4b09      	ldr	r3, [pc, #36]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	0e1b      	lsrs	r3, r3, #24
 800af80:	f003 030f 	and.w	r3, r3, #15
 800af84:	e006      	b.n	800af94 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800af86:	4b06      	ldr	r3, [pc, #24]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800af88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800af8c:	041b      	lsls	r3, r3, #16
 800af8e:	0e1b      	lsrs	r3, r3, #24
 800af90:	f003 030f 	and.w	r3, r3, #15
 800af94:	4a03      	ldr	r2, [pc, #12]	@ (800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800af96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800af9c:	f000 bddd 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800afa0:	46020c00 	.word	0x46020c00
 800afa4:	0800d9a0 	.word	0x0800d9a0
 800afa8:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800afac:	2300      	movs	r3, #0
 800afae:	637b      	str	r3, [r7, #52]	@ 0x34
 800afb0:	f000 bdd3 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800afb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afb8:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800afbc:	430b      	orrs	r3, r1
 800afbe:	d14c      	bne.n	800b05a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800afc0:	4ba8      	ldr	r3, [pc, #672]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800afc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afc6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800afca:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800afcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d104      	bne.n	800afdc <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800afd2:	f7fd fddb 	bl	8008b8c <HAL_RCC_GetPCLK1Freq>
 800afd6:	6378      	str	r0, [r7, #52]	@ 0x34
 800afd8:	f000 bdbf 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800afdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afe2:	d104      	bne.n	800afee <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800afe4:	f7fd fcb6 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800afe8:	6378      	str	r0, [r7, #52]	@ 0x34
 800afea:	f000 bdb6 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800afee:	4b9d      	ldr	r3, [pc, #628]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800affa:	d107      	bne.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800affc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b002:	d103      	bne.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800b004:	4b98      	ldr	r3, [pc, #608]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b006:	637b      	str	r3, [r7, #52]	@ 0x34
 800b008:	f000 bda7 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800b00c:	4b95      	ldr	r3, [pc, #596]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f003 0320 	and.w	r3, r3, #32
 800b014:	2b20      	cmp	r3, #32
 800b016:	d11c      	bne.n	800b052 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800b018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b01e:	d118      	bne.n	800b052 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b020:	4b90      	ldr	r3, [pc, #576]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d005      	beq.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800b02c:	4b8d      	ldr	r3, [pc, #564]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	0e1b      	lsrs	r3, r3, #24
 800b032:	f003 030f 	and.w	r3, r3, #15
 800b036:	e006      	b.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800b038:	4b8a      	ldr	r3, [pc, #552]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b03a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b03e:	041b      	lsls	r3, r3, #16
 800b040:	0e1b      	lsrs	r3, r3, #24
 800b042:	f003 030f 	and.w	r3, r3, #15
 800b046:	4a89      	ldr	r2, [pc, #548]	@ (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b04c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b04e:	f000 bd84 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800b052:	2300      	movs	r3, #0
 800b054:	637b      	str	r3, [r7, #52]	@ 0x34
 800b056:	f000 bd80 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800b05a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b05e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b062:	430b      	orrs	r3, r1
 800b064:	d158      	bne.n	800b118 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b066:	4b7f      	ldr	r3, [pc, #508]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b06c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b070:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b074:	2bc0      	cmp	r3, #192	@ 0xc0
 800b076:	d028      	beq.n	800b0ca <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800b078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b07a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b07c:	d848      	bhi.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800b07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b080:	2b80      	cmp	r3, #128	@ 0x80
 800b082:	d00e      	beq.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800b084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b086:	2b80      	cmp	r3, #128	@ 0x80
 800b088:	d842      	bhi.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800b08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d003      	beq.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800b090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b092:	2b40      	cmp	r3, #64	@ 0x40
 800b094:	d014      	beq.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800b096:	e03b      	b.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800b098:	f7fd fda0 	bl	8008bdc <HAL_RCC_GetPCLK3Freq>
 800b09c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b09e:	f000 bd5c 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0a2:	4b70      	ldr	r3, [pc, #448]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b0aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0ae:	d103      	bne.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800b0b0:	4b6d      	ldr	r3, [pc, #436]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b0b2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b0b4:	f000 bd51 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0bc:	f000 bd4d 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800b0c0:	f7fd fc48 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800b0c4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b0c6:	f000 bd48 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b0ca:	4b66      	ldr	r3, [pc, #408]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 0320 	and.w	r3, r3, #32
 800b0d2:	2b20      	cmp	r3, #32
 800b0d4:	d118      	bne.n	800b108 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b0d6:	4b63      	ldr	r3, [pc, #396]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d005      	beq.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800b0e2:	4b60      	ldr	r3, [pc, #384]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	0e1b      	lsrs	r3, r3, #24
 800b0e8:	f003 030f 	and.w	r3, r3, #15
 800b0ec:	e006      	b.n	800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800b0ee:	4b5d      	ldr	r3, [pc, #372]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b0f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b0f4:	041b      	lsls	r3, r3, #16
 800b0f6:	0e1b      	lsrs	r3, r3, #24
 800b0f8:	f003 030f 	and.w	r3, r3, #15
 800b0fc:	4a5b      	ldr	r2, [pc, #364]	@ (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b0fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b102:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b104:	f000 bd29 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b108:	2300      	movs	r3, #0
 800b10a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b10c:	f000 bd25 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800b110:	2300      	movs	r3, #0
 800b112:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b114:	f000 bd21 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800b118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b11c:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800b120:	430b      	orrs	r3, r1
 800b122:	d14c      	bne.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b124:	4b4f      	ldr	r3, [pc, #316]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b12a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b12e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800b130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b132:	2b00      	cmp	r3, #0
 800b134:	d104      	bne.n	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b136:	f7fd fd29 	bl	8008b8c <HAL_RCC_GetPCLK1Freq>
 800b13a:	6378      	str	r0, [r7, #52]	@ 0x34
 800b13c:	f000 bd0d 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800b140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b142:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b146:	d104      	bne.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b148:	f7fd fc04 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800b14c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b14e:	f000 bd04 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800b152:	4b44      	ldr	r3, [pc, #272]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b15a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b15e:	d107      	bne.n	800b170 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800b160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b162:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b166:	d103      	bne.n	800b170 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800b168:	4b3f      	ldr	r3, [pc, #252]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b16a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b16c:	f000 bcf5 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800b170:	4b3c      	ldr	r3, [pc, #240]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f003 0320 	and.w	r3, r3, #32
 800b178:	2b20      	cmp	r3, #32
 800b17a:	d11c      	bne.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800b17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b17e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b182:	d118      	bne.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b184:	4b37      	ldr	r3, [pc, #220]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d005      	beq.n	800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800b190:	4b34      	ldr	r3, [pc, #208]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	0e1b      	lsrs	r3, r3, #24
 800b196:	f003 030f 	and.w	r3, r3, #15
 800b19a:	e006      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800b19c:	4b31      	ldr	r3, [pc, #196]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b19e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b1a2:	041b      	lsls	r3, r3, #16
 800b1a4:	0e1b      	lsrs	r3, r3, #24
 800b1a6:	f003 030f 	and.w	r3, r3, #15
 800b1aa:	4a30      	ldr	r2, [pc, #192]	@ (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1b2:	f000 bcd2 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1ba:	f000 bcce 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800b1be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1c2:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800b1c6:	430b      	orrs	r3, r1
 800b1c8:	d152      	bne.n	800b270 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800b1ca:	4b26      	ldr	r3, [pc, #152]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b1cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b1d0:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800b1d4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800b1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d104      	bne.n	800b1e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b1dc:	f7fd fcd6 	bl	8008b8c <HAL_RCC_GetPCLK1Freq>
 800b1e0:	6378      	str	r0, [r7, #52]	@ 0x34
 800b1e2:	f000 bcba 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800b1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b1ec:	d104      	bne.n	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b1ee:	f7fd fbb1 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800b1f2:	6378      	str	r0, [r7, #52]	@ 0x34
 800b1f4:	f000 bcb1 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800b1f8:	4b1a      	ldr	r3, [pc, #104]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b204:	d107      	bne.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800b206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b208:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b20c:	d103      	bne.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800b20e:	4b16      	ldr	r3, [pc, #88]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b210:	637b      	str	r3, [r7, #52]	@ 0x34
 800b212:	f000 bca2 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800b216:	4b13      	ldr	r3, [pc, #76]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 0320 	and.w	r3, r3, #32
 800b21e:	2b20      	cmp	r3, #32
 800b220:	d11c      	bne.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800b222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b224:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b228:	d118      	bne.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b22a:	4b0e      	ldr	r3, [pc, #56]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b232:	2b00      	cmp	r3, #0
 800b234:	d005      	beq.n	800b242 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800b236:	4b0b      	ldr	r3, [pc, #44]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	0e1b      	lsrs	r3, r3, #24
 800b23c:	f003 030f 	and.w	r3, r3, #15
 800b240:	e006      	b.n	800b250 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800b242:	4b08      	ldr	r3, [pc, #32]	@ (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b244:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b248:	041b      	lsls	r3, r3, #16
 800b24a:	0e1b      	lsrs	r3, r3, #24
 800b24c:	f003 030f 	and.w	r3, r3, #15
 800b250:	4a06      	ldr	r2, [pc, #24]	@ (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b256:	637b      	str	r3, [r7, #52]	@ 0x34
 800b258:	f000 bc7f 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800b25c:	2300      	movs	r3, #0
 800b25e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b260:	f000 bc7b 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b264:	46020c00 	.word	0x46020c00
 800b268:	00f42400 	.word	0x00f42400
 800b26c:	0800d9a0 	.word	0x0800d9a0
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800b270:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b274:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800b278:	430b      	orrs	r3, r1
 800b27a:	d14c      	bne.n	800b316 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800b27c:	4ba6      	ldr	r3, [pc, #664]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b27e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b282:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800b286:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800b288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d104      	bne.n	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b28e:	f7fd fc7d 	bl	8008b8c <HAL_RCC_GetPCLK1Freq>
 800b292:	6378      	str	r0, [r7, #52]	@ 0x34
 800b294:	f000 bc61 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800b298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b29e:	d104      	bne.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b2a0:	f7fd fb58 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800b2a4:	6378      	str	r0, [r7, #52]	@ 0x34
 800b2a6:	f000 bc58 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800b2aa:	4b9b      	ldr	r3, [pc, #620]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2b6:	d107      	bne.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800b2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2be:	d103      	bne.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800b2c0:	4b96      	ldr	r3, [pc, #600]	@ (800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b2c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2c4:	f000 bc49 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800b2c8:	4b93      	ldr	r3, [pc, #588]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 0320 	and.w	r3, r3, #32
 800b2d0:	2b20      	cmp	r3, #32
 800b2d2:	d11c      	bne.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b2da:	d118      	bne.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b2dc:	4b8e      	ldr	r3, [pc, #568]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d005      	beq.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800b2e8:	4b8b      	ldr	r3, [pc, #556]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	0e1b      	lsrs	r3, r3, #24
 800b2ee:	f003 030f 	and.w	r3, r3, #15
 800b2f2:	e006      	b.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800b2f4:	4b88      	ldr	r3, [pc, #544]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b2f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b2fa:	041b      	lsls	r3, r3, #16
 800b2fc:	0e1b      	lsrs	r3, r3, #24
 800b2fe:	f003 030f 	and.w	r3, r3, #15
 800b302:	4a87      	ldr	r2, [pc, #540]	@ (800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b308:	637b      	str	r3, [r7, #52]	@ 0x34
 800b30a:	f000 bc26 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800b30e:	2300      	movs	r3, #0
 800b310:	637b      	str	r3, [r7, #52]	@ 0x34
 800b312:	f000 bc22 	b.w	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800b316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b31a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b31e:	430b      	orrs	r3, r1
 800b320:	d164      	bne.n	800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800b322:	4b7d      	ldr	r3, [pc, #500]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b328:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b32c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800b32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b330:	2b00      	cmp	r3, #0
 800b332:	d120      	bne.n	800b376 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b334:	4b78      	ldr	r3, [pc, #480]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f003 0320 	and.w	r3, r3, #32
 800b33c:	2b20      	cmp	r3, #32
 800b33e:	d117      	bne.n	800b370 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b340:	4b75      	ldr	r3, [pc, #468]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d005      	beq.n	800b358 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800b34c:	4b72      	ldr	r3, [pc, #456]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	0e1b      	lsrs	r3, r3, #24
 800b352:	f003 030f 	and.w	r3, r3, #15
 800b356:	e006      	b.n	800b366 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800b358:	4b6f      	ldr	r3, [pc, #444]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b35a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b35e:	041b      	lsls	r3, r3, #16
 800b360:	0e1b      	lsrs	r3, r3, #24
 800b362:	f003 030f 	and.w	r3, r3, #15
 800b366:	4a6e      	ldr	r2, [pc, #440]	@ (800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b36c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b36e:	e3f4      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b370:	2300      	movs	r3, #0
 800b372:	637b      	str	r3, [r7, #52]	@ 0x34
 800b374:	e3f1      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800b376:	4b68      	ldr	r3, [pc, #416]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b37c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b380:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b384:	d112      	bne.n	800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800b386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b388:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b38c:	d10e      	bne.n	800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b38e:	4b62      	ldr	r3, [pc, #392]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b398:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b39c:	d102      	bne.n	800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800b39e:	23fa      	movs	r3, #250	@ 0xfa
 800b3a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b3a2:	e3da      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b3a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b3a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b3aa:	e3d6      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800b3ac:	4b5a      	ldr	r3, [pc, #360]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3b8:	d106      	bne.n	800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800b3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3c0:	d102      	bne.n	800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800b3c2:	4b56      	ldr	r3, [pc, #344]	@ (800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b3c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3c6:	e3c8      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800b3c8:	4b53      	ldr	r3, [pc, #332]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b3ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b3ce:	f003 0302 	and.w	r3, r3, #2
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d107      	bne.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b3dc:	d103      	bne.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800b3de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3e4:	e3b9      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3ea:	e3b6      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800b3ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3f0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b3f4:	430b      	orrs	r3, r1
 800b3f6:	d164      	bne.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b3f8:	4b47      	ldr	r3, [pc, #284]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b3fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b3fe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b402:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800b404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b406:	2b00      	cmp	r3, #0
 800b408:	d120      	bne.n	800b44c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b40a:	4b43      	ldr	r3, [pc, #268]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f003 0320 	and.w	r3, r3, #32
 800b412:	2b20      	cmp	r3, #32
 800b414:	d117      	bne.n	800b446 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b416:	4b40      	ldr	r3, [pc, #256]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d005      	beq.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800b422:	4b3d      	ldr	r3, [pc, #244]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	0e1b      	lsrs	r3, r3, #24
 800b428:	f003 030f 	and.w	r3, r3, #15
 800b42c:	e006      	b.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800b42e:	4b3a      	ldr	r3, [pc, #232]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b434:	041b      	lsls	r3, r3, #16
 800b436:	0e1b      	lsrs	r3, r3, #24
 800b438:	f003 030f 	and.w	r3, r3, #15
 800b43c:	4a38      	ldr	r2, [pc, #224]	@ (800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b43e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b442:	637b      	str	r3, [r7, #52]	@ 0x34
 800b444:	e389      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b446:	2300      	movs	r3, #0
 800b448:	637b      	str	r3, [r7, #52]	@ 0x34
 800b44a:	e386      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800b44c:	4b32      	ldr	r3, [pc, #200]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b44e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b452:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b456:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b45a:	d112      	bne.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800b45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b462:	d10e      	bne.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b464:	4b2c      	ldr	r3, [pc, #176]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b466:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b46a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b46e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b472:	d102      	bne.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800b474:	23fa      	movs	r3, #250	@ 0xfa
 800b476:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b478:	e36f      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b47a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b47e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b480:	e36b      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800b482:	4b25      	ldr	r3, [pc, #148]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b48a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b48e:	d106      	bne.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800b490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b492:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b496:	d102      	bne.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800b498:	4b20      	ldr	r3, [pc, #128]	@ (800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b49a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b49c:	e35d      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800b49e:	4b1e      	ldr	r3, [pc, #120]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b4a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b4a4:	f003 0302 	and.w	r3, r3, #2
 800b4a8:	2b02      	cmp	r3, #2
 800b4aa:	d107      	bne.n	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800b4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b4b2:	d103      	bne.n	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800b4b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4ba:	e34e      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4c0:	e34b      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800b4c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4c6:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b4ca:	430b      	orrs	r3, r1
 800b4cc:	d14e      	bne.n	800b56c <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b4ce:	4b12      	ldr	r3, [pc, #72]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b4d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b4d4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800b4d8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800b4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d103      	bne.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b4e0:	f7fd fb54 	bl	8008b8c <HAL_RCC_GetPCLK1Freq>
 800b4e4:	6378      	str	r0, [r7, #52]	@ 0x34
 800b4e6:	e338      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800b4e8:	4b0b      	ldr	r3, [pc, #44]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b4ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b4ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4f6:	d119      	bne.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800b4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b4fe:	d115      	bne.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b500:	4b05      	ldr	r3, [pc, #20]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b50a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b50e:	d109      	bne.n	800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800b510:	23fa      	movs	r3, #250	@ 0xfa
 800b512:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b514:	e321      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b516:	bf00      	nop
 800b518:	46020c00 	.word	0x46020c00
 800b51c:	00f42400 	.word	0x00f42400
 800b520:	0800d9a0 	.word	0x0800d9a0
      }
      else
      {
        frequency = LSI_VALUE;
 800b524:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b528:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b52a:	e316      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800b52c:	4ba8      	ldr	r3, [pc, #672]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b538:	d106      	bne.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800b53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b53c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b540:	d102      	bne.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800b542:	4ba4      	ldr	r3, [pc, #656]	@ (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b544:	637b      	str	r3, [r7, #52]	@ 0x34
 800b546:	e308      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800b548:	4ba1      	ldr	r3, [pc, #644]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b54a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b54e:	f003 0302 	and.w	r3, r3, #2
 800b552:	2b02      	cmp	r3, #2
 800b554:	d107      	bne.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800b556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b558:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b55c:	d103      	bne.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800b55e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b562:	637b      	str	r3, [r7, #52]	@ 0x34
 800b564:	e2f9      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800b566:	2300      	movs	r3, #0
 800b568:	637b      	str	r3, [r7, #52]	@ 0x34
 800b56a:	e2f6      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800b56c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b570:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800b574:	430b      	orrs	r3, r1
 800b576:	d12d      	bne.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800b578:	4b95      	ldr	r3, [pc, #596]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b57a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b57e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800b582:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800b584:	4b92      	ldr	r3, [pc, #584]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b58c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b590:	d105      	bne.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800b592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b594:	2b00      	cmp	r3, #0
 800b596:	d102      	bne.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800b598:	4b8e      	ldr	r3, [pc, #568]	@ (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b59a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b59c:	e2dd      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800b59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5a4:	d107      	bne.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fe fb4c 	bl	8009c48 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5b4:	e2d1      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5bc:	d107      	bne.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5be:	f107 0318 	add.w	r3, r7, #24
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fe fc9a 	bl	8009efc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5cc:	e2c5      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5d2:	e2c2      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800b5d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5d8:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800b5dc:	430b      	orrs	r3, r1
 800b5de:	d156      	bne.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b5e0:	4b7b      	ldr	r3, [pc, #492]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b5e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b5e6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b5ea:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b5f2:	d028      	beq.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800b5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b5fa:	d845      	bhi.n	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800b5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b602:	d013      	beq.n	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800b604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b606:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b60a:	d83d      	bhi.n	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800b60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d004      	beq.n	800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800b612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b614:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b618:	d004      	beq.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800b61a:	e035      	b.n	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800b61c:	f7fd faca 	bl	8008bb4 <HAL_RCC_GetPCLK2Freq>
 800b620:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b622:	e29a      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b624:	f7fd f996 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800b628:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b62a:	e296      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b62c:	4b68      	ldr	r3, [pc, #416]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b638:	d102      	bne.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800b63a:	4b66      	ldr	r3, [pc, #408]	@ (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b63c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b63e:	e28c      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b640:	2300      	movs	r3, #0
 800b642:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b644:	e289      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b646:	4b62      	ldr	r3, [pc, #392]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f003 0320 	and.w	r3, r3, #32
 800b64e:	2b20      	cmp	r3, #32
 800b650:	d117      	bne.n	800b682 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b652:	4b5f      	ldr	r3, [pc, #380]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d005      	beq.n	800b66a <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800b65e:	4b5c      	ldr	r3, [pc, #368]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	0e1b      	lsrs	r3, r3, #24
 800b664:	f003 030f 	and.w	r3, r3, #15
 800b668:	e006      	b.n	800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800b66a:	4b59      	ldr	r3, [pc, #356]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b66c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b670:	041b      	lsls	r3, r3, #16
 800b672:	0e1b      	lsrs	r3, r3, #24
 800b674:	f003 030f 	and.w	r3, r3, #15
 800b678:	4a57      	ldr	r2, [pc, #348]	@ (800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800b67a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b67e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b680:	e26b      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b682:	2300      	movs	r3, #0
 800b684:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b686:	e268      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b688:	2300      	movs	r3, #0
 800b68a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b68c:	e265      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800b68e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b692:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800b696:	430b      	orrs	r3, r1
 800b698:	d156      	bne.n	800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b69a:	4b4d      	ldr	r3, [pc, #308]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b69c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b6a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b6a4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b6ac:	d028      	beq.n	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b6b4:	d845      	bhi.n	800b742 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6bc:	d013      	beq.n	800b6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800b6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6c4:	d83d      	bhi.n	800b742 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800b6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d004      	beq.n	800b6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6d2:	d004      	beq.n	800b6de <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800b6d4:	e035      	b.n	800b742 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800b6d6:	f7fd fa59 	bl	8008b8c <HAL_RCC_GetPCLK1Freq>
 800b6da:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b6dc:	e23d      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b6de:	f7fd f939 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800b6e2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b6e4:	e239      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b6e6:	4b3a      	ldr	r3, [pc, #232]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b6ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6f2:	d102      	bne.n	800b6fa <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800b6f4:	4b37      	ldr	r3, [pc, #220]	@ (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b6f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b6f8:	e22f      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b6fe:	e22c      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b700:	4b33      	ldr	r3, [pc, #204]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 0320 	and.w	r3, r3, #32
 800b708:	2b20      	cmp	r3, #32
 800b70a:	d117      	bne.n	800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b70c:	4b30      	ldr	r3, [pc, #192]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b714:	2b00      	cmp	r3, #0
 800b716:	d005      	beq.n	800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800b718:	4b2d      	ldr	r3, [pc, #180]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	0e1b      	lsrs	r3, r3, #24
 800b71e:	f003 030f 	and.w	r3, r3, #15
 800b722:	e006      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800b724:	4b2a      	ldr	r3, [pc, #168]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b726:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b72a:	041b      	lsls	r3, r3, #16
 800b72c:	0e1b      	lsrs	r3, r3, #24
 800b72e:	f003 030f 	and.w	r3, r3, #15
 800b732:	4a29      	ldr	r2, [pc, #164]	@ (800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800b734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b738:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b73a:	e20e      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b73c:	2300      	movs	r3, #0
 800b73e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b740:	e20b      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b742:	2300      	movs	r3, #0
 800b744:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b746:	e208      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800b748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b74c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800b750:	430b      	orrs	r3, r1
 800b752:	d17c      	bne.n	800b84e <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800b754:	4b1e      	ldr	r3, [pc, #120]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b756:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b75a:	f003 0318 	and.w	r3, r3, #24
 800b75e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b762:	2b18      	cmp	r3, #24
 800b764:	d870      	bhi.n	800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800b766:	a201      	add	r2, pc, #4	@ (adr r2, 800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800b768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b76c:	0800b7dd 	.word	0x0800b7dd
 800b770:	0800b849 	.word	0x0800b849
 800b774:	0800b849 	.word	0x0800b849
 800b778:	0800b849 	.word	0x0800b849
 800b77c:	0800b849 	.word	0x0800b849
 800b780:	0800b849 	.word	0x0800b849
 800b784:	0800b849 	.word	0x0800b849
 800b788:	0800b849 	.word	0x0800b849
 800b78c:	0800b7e5 	.word	0x0800b7e5
 800b790:	0800b849 	.word	0x0800b849
 800b794:	0800b849 	.word	0x0800b849
 800b798:	0800b849 	.word	0x0800b849
 800b79c:	0800b849 	.word	0x0800b849
 800b7a0:	0800b849 	.word	0x0800b849
 800b7a4:	0800b849 	.word	0x0800b849
 800b7a8:	0800b849 	.word	0x0800b849
 800b7ac:	0800b7ed 	.word	0x0800b7ed
 800b7b0:	0800b849 	.word	0x0800b849
 800b7b4:	0800b849 	.word	0x0800b849
 800b7b8:	0800b849 	.word	0x0800b849
 800b7bc:	0800b849 	.word	0x0800b849
 800b7c0:	0800b849 	.word	0x0800b849
 800b7c4:	0800b849 	.word	0x0800b849
 800b7c8:	0800b849 	.word	0x0800b849
 800b7cc:	0800b807 	.word	0x0800b807
 800b7d0:	46020c00 	.word	0x46020c00
 800b7d4:	00f42400 	.word	0x00f42400
 800b7d8:	0800d9a0 	.word	0x0800d9a0
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800b7dc:	f7fd f9fe 	bl	8008bdc <HAL_RCC_GetPCLK3Freq>
 800b7e0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b7e2:	e1ba      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b7e4:	f7fd f8b6 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800b7e8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b7ea:	e1b6      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b7ec:	4b9f      	ldr	r3, [pc, #636]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b7f8:	d102      	bne.n	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800b7fa:	4b9d      	ldr	r3, [pc, #628]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b7fc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b7fe:	e1ac      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b800:	2300      	movs	r3, #0
 800b802:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b804:	e1a9      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b806:	4b99      	ldr	r3, [pc, #612]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f003 0320 	and.w	r3, r3, #32
 800b80e:	2b20      	cmp	r3, #32
 800b810:	d117      	bne.n	800b842 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b812:	4b96      	ldr	r3, [pc, #600]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d005      	beq.n	800b82a <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800b81e:	4b93      	ldr	r3, [pc, #588]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	0e1b      	lsrs	r3, r3, #24
 800b824:	f003 030f 	and.w	r3, r3, #15
 800b828:	e006      	b.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800b82a:	4b90      	ldr	r3, [pc, #576]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b82c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b830:	041b      	lsls	r3, r3, #16
 800b832:	0e1b      	lsrs	r3, r3, #24
 800b834:	f003 030f 	and.w	r3, r3, #15
 800b838:	4a8e      	ldr	r2, [pc, #568]	@ (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800b83a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b83e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b840:	e18b      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b842:	2300      	movs	r3, #0
 800b844:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b846:	e188      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b848:	2300      	movs	r3, #0
 800b84a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b84c:	e185      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800b84e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b852:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800b856:	430b      	orrs	r3, r1
 800b858:	d155      	bne.n	800b906 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b85a:	4b84      	ldr	r3, [pc, #528]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b85c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b860:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b864:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b868:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b86c:	d013      	beq.n	800b896 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800b86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b870:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b874:	d844      	bhi.n	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800b876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b878:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b87c:	d013      	beq.n	800b8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800b87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b880:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b884:	d83c      	bhi.n	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800b886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d014      	beq.n	800b8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800b88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b88e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b892:	d014      	beq.n	800b8be <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800b894:	e034      	b.n	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b896:	f107 0318 	add.w	r3, r7, #24
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fe fb2e 	bl	8009efc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b8a4:	e159      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fe f9cc 	bl	8009c48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b8b4:	e151      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b8b6:	f7fd f84d 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800b8ba:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b8bc:	e14d      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b8be:	4b6b      	ldr	r3, [pc, #428]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f003 0320 	and.w	r3, r3, #32
 800b8c6:	2b20      	cmp	r3, #32
 800b8c8:	d117      	bne.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b8ca:	4b68      	ldr	r3, [pc, #416]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d005      	beq.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800b8d6:	4b65      	ldr	r3, [pc, #404]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	0e1b      	lsrs	r3, r3, #24
 800b8dc:	f003 030f 	and.w	r3, r3, #15
 800b8e0:	e006      	b.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800b8e2:	4b62      	ldr	r3, [pc, #392]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b8e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b8e8:	041b      	lsls	r3, r3, #16
 800b8ea:	0e1b      	lsrs	r3, r3, #24
 800b8ec:	f003 030f 	and.w	r3, r3, #15
 800b8f0:	4a60      	ldr	r2, [pc, #384]	@ (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800b8f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b8f8:	e12f      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b8fe:	e12c      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b900:	2300      	movs	r3, #0
 800b902:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b904:	e129      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800b906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b90a:	1e59      	subs	r1, r3, #1
 800b90c:	ea52 0301 	orrs.w	r3, r2, r1
 800b910:	d13c      	bne.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800b912:	4b56      	ldr	r3, [pc, #344]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b914:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b918:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b91c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b920:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b924:	d027      	beq.n	800b976 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800b926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b928:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b92c:	d82b      	bhi.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800b92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b930:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b934:	d017      	beq.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800b936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b938:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b93c:	d823      	bhi.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800b93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b940:	2b00      	cmp	r3, #0
 800b942:	d004      	beq.n	800b94e <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800b944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b94a:	d004      	beq.n	800b956 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800b94c:	e01b      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b94e:	f7fd f801 	bl	8008954 <HAL_RCC_GetSysClockFreq>
 800b952:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b954:	e101      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b956:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7fe f974 	bl	8009c48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b962:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b964:	e0f9      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b966:	f107 0318 	add.w	r3, r7, #24
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fe fac6 	bl	8009efc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b974:	e0f1      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b976:	f107 030c 	add.w	r3, r7, #12
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7fe fc18 	bl	800a1b0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b984:	e0e9      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b986:	2300      	movs	r3, #0
 800b988:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b98a:	e0e6      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800b98c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b990:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800b994:	430b      	orrs	r3, r1
 800b996:	d131      	bne.n	800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800b998:	4b34      	ldr	r3, [pc, #208]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b99a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b99e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b9a2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800b9a4:	4b31      	ldr	r3, [pc, #196]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b9a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b9aa:	f003 0302 	and.w	r3, r3, #2
 800b9ae:	2b02      	cmp	r3, #2
 800b9b0:	d106      	bne.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d103      	bne.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800b9b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b9bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9be:	e0cc      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800b9c0:	4b2a      	ldr	r3, [pc, #168]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b9c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b9c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9ce:	d112      	bne.n	800b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800b9d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b9d6:	d10e      	bne.n	800b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b9d8:	4b24      	ldr	r3, [pc, #144]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b9da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b9de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b9e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9e6:	d102      	bne.n	800b9ee <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800b9e8:	23fa      	movs	r3, #250	@ 0xfa
 800b9ea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b9ec:	e0b5      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b9ee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b9f2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b9f4:	e0b1      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9fa:	e0ae      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800b9fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba00:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ba04:	430b      	orrs	r3, r1
 800ba06:	d13b      	bne.n	800ba80 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800ba08:	4b18      	ldr	r3, [pc, #96]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ba0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ba0e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ba12:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800ba14:	4b15      	ldr	r3, [pc, #84]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba20:	d105      	bne.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800ba22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d102      	bne.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800ba28:	4b13      	ldr	r3, [pc, #76]	@ (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800ba2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba2c:	e095      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800ba2e:	4b0f      	ldr	r3, [pc, #60]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba3a:	d106      	bne.n	800ba4a <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800ba3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba42:	d102      	bne.n	800ba4a <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800ba44:	4b0d      	ldr	r3, [pc, #52]	@ (800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800ba46:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba48:	e087      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800ba4a:	4b08      	ldr	r3, [pc, #32]	@ (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba56:	d106      	bne.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800ba58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba5e:	d102      	bne.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800ba60:	4b03      	ldr	r3, [pc, #12]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800ba62:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba64:	e079      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800ba66:	2300      	movs	r3, #0
 800ba68:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba6a:	e076      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ba6c:	46020c00 	.word	0x46020c00
 800ba70:	00f42400 	.word	0x00f42400
 800ba74:	0800d9a0 	.word	0x0800d9a0
 800ba78:	02dc6c00 	.word	0x02dc6c00
 800ba7c:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800ba80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba84:	1e99      	subs	r1, r3, #2
 800ba86:	ea52 0301 	orrs.w	r3, r2, r1
 800ba8a:	d120      	bne.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800ba8c:	4b35      	ldr	r3, [pc, #212]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800ba8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ba92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ba96:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ba98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d004      	beq.n	800baa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baa0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800baa4:	d008      	beq.n	800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800baa6:	e00f      	b.n	800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baa8:	f107 030c 	add.w	r3, r7, #12
 800baac:	4618      	mov	r0, r3
 800baae:	f7fe fb7f 	bl	800a1b0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bab6:	e050      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bab8:	f107 0318 	add.w	r3, r7, #24
 800babc:	4618      	mov	r0, r3
 800babe:	f7fe fa1d 	bl	8009efc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800bac2:	6a3b      	ldr	r3, [r7, #32]
 800bac4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bac6:	e048      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bac8:	2300      	movs	r3, #0
 800baca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bacc:	e045      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800bace:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bad2:	f1a3 0108 	sub.w	r1, r3, #8
 800bad6:	ea52 0301 	orrs.w	r3, r2, r1
 800bada:	d13c      	bne.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800badc:	4b21      	ldr	r3, [pc, #132]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800bade:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bae2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bae6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800bae8:	4b1e      	ldr	r3, [pc, #120]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800baf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800baf4:	d105      	bne.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800baf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d102      	bne.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800bafc:	4b1a      	ldr	r3, [pc, #104]	@ (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800bafe:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb00:	e02b      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800bb02:	4b18      	ldr	r3, [pc, #96]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb0e:	d106      	bne.n	800bb1e <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800bb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb16:	d102      	bne.n	800bb1e <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800bb18:	4b14      	ldr	r3, [pc, #80]	@ (800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800bb1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb1c:	e01d      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb24:	d107      	bne.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fe f88c 	bl	8009c48 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800bb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb32:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb34:	e011      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800bb36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb38:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bb3c:	d108      	bne.n	800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fe f880 	bl	8009c48 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800bb48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4a:	085b      	lsrs	r3, r3, #1
 800bb4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb4e:	e004      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800bb50:	2300      	movs	r3, #0
 800bb52:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb54:	e001      	b.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800bb56:	2300      	movs	r3, #0
 800bb58:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800bb5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3738      	adds	r7, #56	@ 0x38
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	46020c00 	.word	0x46020c00
 800bb68:	00f42400 	.word	0x00f42400
 800bb6c:	007a1200 	.word	0x007a1200

0800bb70 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800bb70:	b480      	push	{r7}
 800bb72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800bb74:	4b06      	ldr	r3, [pc, #24]	@ (800bb90 <HAL_RCCEx_EnableLSECSS+0x20>)
 800bb76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bb7a:	4a05      	ldr	r2, [pc, #20]	@ (800bb90 <HAL_RCCEx_EnableLSECSS+0x20>)
 800bb7c:	f043 0320 	orr.w	r3, r3, #32
 800bb80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 800bb84:	bf00      	nop
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop
 800bb90:	46020c00 	.word	0x46020c00

0800bb94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800bb9c:	4b47      	ldr	r3, [pc, #284]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a46      	ldr	r2, [pc, #280]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bba2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bba6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bba8:	f7f7 fa7e 	bl	80030a8 <HAL_GetTick>
 800bbac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bbae:	e008      	b.n	800bbc2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bbb0:	f7f7 fa7a 	bl	80030a8 <HAL_GetTick>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	1ad3      	subs	r3, r2, r3
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	d901      	bls.n	800bbc2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800bbbe:	2303      	movs	r3, #3
 800bbc0:	e077      	b.n	800bcb2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bbc2:	4b3e      	ldr	r3, [pc, #248]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d1f0      	bne.n	800bbb0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800bbce:	4b3b      	ldr	r3, [pc, #236]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bbd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbd2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800bbd6:	f023 0303 	bic.w	r3, r3, #3
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	6811      	ldr	r1, [r2, #0]
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	6852      	ldr	r2, [r2, #4]
 800bbe2:	3a01      	subs	r2, #1
 800bbe4:	0212      	lsls	r2, r2, #8
 800bbe6:	430a      	orrs	r2, r1
 800bbe8:	4934      	ldr	r1, [pc, #208]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bbea:	4313      	orrs	r3, r2
 800bbec:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800bbee:	4b33      	ldr	r3, [pc, #204]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bbf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bbf2:	4b33      	ldr	r3, [pc, #204]	@ (800bcc0 <RCCEx_PLL2_Config+0x12c>)
 800bbf4:	4013      	ands	r3, r2
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	6892      	ldr	r2, [r2, #8]
 800bbfa:	3a01      	subs	r2, #1
 800bbfc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	68d2      	ldr	r2, [r2, #12]
 800bc04:	3a01      	subs	r2, #1
 800bc06:	0252      	lsls	r2, r2, #9
 800bc08:	b292      	uxth	r2, r2
 800bc0a:	4311      	orrs	r1, r2
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	6912      	ldr	r2, [r2, #16]
 800bc10:	3a01      	subs	r2, #1
 800bc12:	0412      	lsls	r2, r2, #16
 800bc14:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800bc18:	4311      	orrs	r1, r2
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	6952      	ldr	r2, [r2, #20]
 800bc1e:	3a01      	subs	r2, #1
 800bc20:	0612      	lsls	r2, r2, #24
 800bc22:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800bc26:	430a      	orrs	r2, r1
 800bc28:	4924      	ldr	r1, [pc, #144]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800bc2e:	4b23      	ldr	r3, [pc, #140]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bc30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc32:	f023 020c 	bic.w	r2, r3, #12
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	699b      	ldr	r3, [r3, #24]
 800bc3a:	4920      	ldr	r1, [pc, #128]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800bc40:	4b1e      	ldr	r3, [pc, #120]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bc42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a1b      	ldr	r3, [r3, #32]
 800bc48:	491c      	ldr	r1, [pc, #112]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800bc4e:	4b1b      	ldr	r3, [pc, #108]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bc50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc52:	4a1a      	ldr	r2, [pc, #104]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bc54:	f023 0310 	bic.w	r3, r3, #16
 800bc58:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bc5a:	4b18      	ldr	r3, [pc, #96]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bc5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc62:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	69d2      	ldr	r2, [r2, #28]
 800bc6a:	00d2      	lsls	r2, r2, #3
 800bc6c:	4913      	ldr	r1, [pc, #76]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800bc72:	4b12      	ldr	r3, [pc, #72]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bc74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc76:	4a11      	ldr	r2, [pc, #68]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bc78:	f043 0310 	orr.w	r3, r3, #16
 800bc7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800bc7e:	4b0f      	ldr	r3, [pc, #60]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a0e      	ldr	r2, [pc, #56]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bc84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bc88:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bc8a:	f7f7 fa0d 	bl	80030a8 <HAL_GetTick>
 800bc8e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc90:	e008      	b.n	800bca4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bc92:	f7f7 fa09 	bl	80030a8 <HAL_GetTick>
 800bc96:	4602      	mov	r2, r0
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	1ad3      	subs	r3, r2, r3
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	d901      	bls.n	800bca4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800bca0:	2303      	movs	r3, #3
 800bca2:	e006      	b.n	800bcb2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bca4:	4b05      	ldr	r3, [pc, #20]	@ (800bcbc <RCCEx_PLL2_Config+0x128>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d0f0      	beq.n	800bc92 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800bcb0:	2300      	movs	r3, #0

}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3710      	adds	r7, #16
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	46020c00 	.word	0x46020c00
 800bcc0:	80800000 	.word	0x80800000

0800bcc4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800bccc:	4b47      	ldr	r3, [pc, #284]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a46      	ldr	r2, [pc, #280]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bcd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bcd6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bcd8:	f7f7 f9e6 	bl	80030a8 <HAL_GetTick>
 800bcdc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcde:	e008      	b.n	800bcf2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bce0:	f7f7 f9e2 	bl	80030a8 <HAL_GetTick>
 800bce4:	4602      	mov	r2, r0
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	1ad3      	subs	r3, r2, r3
 800bcea:	2b02      	cmp	r3, #2
 800bcec:	d901      	bls.n	800bcf2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800bcee:	2303      	movs	r3, #3
 800bcf0:	e077      	b.n	800bde2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcf2:	4b3e      	ldr	r3, [pc, #248]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1f0      	bne.n	800bce0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800bcfe:	4b3b      	ldr	r3, [pc, #236]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bd00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800bd06:	f023 0303 	bic.w	r3, r3, #3
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	6811      	ldr	r1, [r2, #0]
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	6852      	ldr	r2, [r2, #4]
 800bd12:	3a01      	subs	r2, #1
 800bd14:	0212      	lsls	r2, r2, #8
 800bd16:	430a      	orrs	r2, r1
 800bd18:	4934      	ldr	r1, [pc, #208]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	630b      	str	r3, [r1, #48]	@ 0x30
 800bd1e:	4b33      	ldr	r3, [pc, #204]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bd20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd22:	4b33      	ldr	r3, [pc, #204]	@ (800bdf0 <RCCEx_PLL3_Config+0x12c>)
 800bd24:	4013      	ands	r3, r2
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	6892      	ldr	r2, [r2, #8]
 800bd2a:	3a01      	subs	r2, #1
 800bd2c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	68d2      	ldr	r2, [r2, #12]
 800bd34:	3a01      	subs	r2, #1
 800bd36:	0252      	lsls	r2, r2, #9
 800bd38:	b292      	uxth	r2, r2
 800bd3a:	4311      	orrs	r1, r2
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	6912      	ldr	r2, [r2, #16]
 800bd40:	3a01      	subs	r2, #1
 800bd42:	0412      	lsls	r2, r2, #16
 800bd44:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800bd48:	4311      	orrs	r1, r2
 800bd4a:	687a      	ldr	r2, [r7, #4]
 800bd4c:	6952      	ldr	r2, [r2, #20]
 800bd4e:	3a01      	subs	r2, #1
 800bd50:	0612      	lsls	r2, r2, #24
 800bd52:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800bd56:	430a      	orrs	r2, r1
 800bd58:	4924      	ldr	r1, [pc, #144]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800bd5e:	4b23      	ldr	r3, [pc, #140]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bd60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd62:	f023 020c 	bic.w	r2, r3, #12
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	699b      	ldr	r3, [r3, #24]
 800bd6a:	4920      	ldr	r1, [pc, #128]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800bd70:	4b1e      	ldr	r3, [pc, #120]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bd72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6a1b      	ldr	r3, [r3, #32]
 800bd78:	491c      	ldr	r1, [pc, #112]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800bd7e:	4b1b      	ldr	r3, [pc, #108]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bd80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd82:	4a1a      	ldr	r2, [pc, #104]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bd84:	f023 0310 	bic.w	r3, r3, #16
 800bd88:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bd8a:	4b18      	ldr	r3, [pc, #96]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bd8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bd92:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	69d2      	ldr	r2, [r2, #28]
 800bd9a:	00d2      	lsls	r2, r2, #3
 800bd9c:	4913      	ldr	r1, [pc, #76]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800bda2:	4b12      	ldr	r3, [pc, #72]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bda4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bda6:	4a11      	ldr	r2, [pc, #68]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bda8:	f043 0310 	orr.w	r3, r3, #16
 800bdac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800bdae:	4b0f      	ldr	r3, [pc, #60]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a0e      	ldr	r2, [pc, #56]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bdb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bdb8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bdba:	f7f7 f975 	bl	80030a8 <HAL_GetTick>
 800bdbe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bdc0:	e008      	b.n	800bdd4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bdc2:	f7f7 f971 	bl	80030a8 <HAL_GetTick>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	2b02      	cmp	r3, #2
 800bdce:	d901      	bls.n	800bdd4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800bdd0:	2303      	movs	r3, #3
 800bdd2:	e006      	b.n	800bde2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bdd4:	4b05      	ldr	r3, [pc, #20]	@ (800bdec <RCCEx_PLL3_Config+0x128>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d0f0      	beq.n	800bdc2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800bde0:	2300      	movs	r3, #0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	46020c00 	.word	0x46020c00
 800bdf0:	80800000 	.word	0x80800000

0800bdf4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d071      	beq.n	800beea <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d106      	bne.n	800be20 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f7f6 fec4 	bl	8002ba8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2202      	movs	r2, #2
 800be24:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800be28:	4b32      	ldr	r3, [pc, #200]	@ (800bef4 <HAL_RTC_Init+0x100>)
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	f003 0310 	and.w	r3, r3, #16
 800be30:	2b10      	cmp	r3, #16
 800be32:	d051      	beq.n	800bed8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be34:	4b2f      	ldr	r3, [pc, #188]	@ (800bef4 <HAL_RTC_Init+0x100>)
 800be36:	22ca      	movs	r2, #202	@ 0xca
 800be38:	625a      	str	r2, [r3, #36]	@ 0x24
 800be3a:	4b2e      	ldr	r3, [pc, #184]	@ (800bef4 <HAL_RTC_Init+0x100>)
 800be3c:	2253      	movs	r2, #83	@ 0x53
 800be3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 f9ad 	bl	800c1a0 <RTC_EnterInitMode>
 800be46:	4603      	mov	r3, r0
 800be48:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d13f      	bne.n	800bed0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800be50:	4b28      	ldr	r3, [pc, #160]	@ (800bef4 <HAL_RTC_Init+0x100>)
 800be52:	699b      	ldr	r3, [r3, #24]
 800be54:	4a27      	ldr	r2, [pc, #156]	@ (800bef4 <HAL_RTC_Init+0x100>)
 800be56:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800be5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be5e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800be60:	4b24      	ldr	r3, [pc, #144]	@ (800bef4 <HAL_RTC_Init+0x100>)
 800be62:	699a      	ldr	r2, [r3, #24]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6859      	ldr	r1, [r3, #4]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	4319      	orrs	r1, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	699b      	ldr	r3, [r3, #24]
 800be72:	430b      	orrs	r3, r1
 800be74:	491f      	ldr	r1, [pc, #124]	@ (800bef4 <HAL_RTC_Init+0x100>)
 800be76:	4313      	orrs	r3, r2
 800be78:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	68da      	ldr	r2, [r3, #12]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	041b      	lsls	r3, r3, #16
 800be84:	491b      	ldr	r1, [pc, #108]	@ (800bef4 <HAL_RTC_Init+0x100>)
 800be86:	4313      	orrs	r3, r2
 800be88:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800be8a:	4b1a      	ldr	r3, [pc, #104]	@ (800bef4 <HAL_RTC_Init+0x100>)
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be9a:	430b      	orrs	r3, r1
 800be9c:	4915      	ldr	r1, [pc, #84]	@ (800bef4 <HAL_RTC_Init+0x100>)
 800be9e:	4313      	orrs	r3, r2
 800bea0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f9b8 	bl	800c218 <RTC_ExitInitMode>
 800bea8:	4603      	mov	r3, r0
 800beaa:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800beac:	7bfb      	ldrb	r3, [r7, #15]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d10e      	bne.n	800bed0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800beb2:	4b10      	ldr	r3, [pc, #64]	@ (800bef4 <HAL_RTC_Init+0x100>)
 800beb4:	699b      	ldr	r3, [r3, #24]
 800beb6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a19      	ldr	r1, [r3, #32]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	69db      	ldr	r3, [r3, #28]
 800bec2:	4319      	orrs	r1, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	695b      	ldr	r3, [r3, #20]
 800bec8:	430b      	orrs	r3, r1
 800beca:	490a      	ldr	r1, [pc, #40]	@ (800bef4 <HAL_RTC_Init+0x100>)
 800becc:	4313      	orrs	r3, r2
 800bece:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bed0:	4b08      	ldr	r3, [pc, #32]	@ (800bef4 <HAL_RTC_Init+0x100>)
 800bed2:	22ff      	movs	r2, #255	@ 0xff
 800bed4:	625a      	str	r2, [r3, #36]	@ 0x24
 800bed6:	e001      	b.n	800bedc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800bed8:	2300      	movs	r3, #0
 800beda:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d103      	bne.n	800beea <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2201      	movs	r2, #1
 800bee6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800beea:	7bfb      	ldrb	r3, [r7, #15]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	46007800 	.word	0x46007800

0800bef8 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bef8:	b590      	push	{r4, r7, lr}
 800befa:	b087      	sub	sp, #28
 800befc:	af00      	add	r7, sp, #0
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d101      	bne.n	800bf12 <HAL_RTC_SetTime+0x1a>
 800bf0e:	2302      	movs	r3, #2
 800bf10:	e088      	b.n	800c024 <HAL_RTC_SetTime+0x12c>
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2201      	movs	r2, #1
 800bf16:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2202      	movs	r2, #2
 800bf1e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bf22:	4b42      	ldr	r3, [pc, #264]	@ (800c02c <HAL_RTC_SetTime+0x134>)
 800bf24:	22ca      	movs	r2, #202	@ 0xca
 800bf26:	625a      	str	r2, [r3, #36]	@ 0x24
 800bf28:	4b40      	ldr	r3, [pc, #256]	@ (800c02c <HAL_RTC_SetTime+0x134>)
 800bf2a:	2253      	movs	r2, #83	@ 0x53
 800bf2c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f000 f936 	bl	800c1a0 <RTC_EnterInitMode>
 800bf34:	4603      	mov	r3, r0
 800bf36:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800bf38:	7cfb      	ldrb	r3, [r7, #19]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d163      	bne.n	800c006 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800bf3e:	4b3b      	ldr	r3, [pc, #236]	@ (800c02c <HAL_RTC_SetTime+0x134>)
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf4a:	d057      	beq.n	800bffc <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d125      	bne.n	800bf9e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800bf52:	4b36      	ldr	r3, [pc, #216]	@ (800c02c <HAL_RTC_SetTime+0x134>)
 800bf54:	699b      	ldr	r3, [r3, #24]
 800bf56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d102      	bne.n	800bf64 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	2200      	movs	r2, #0
 800bf62:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f000 f993 	bl	800c294 <RTC_ByteToBcd2>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	785b      	ldrb	r3, [r3, #1]
 800bf76:	4618      	mov	r0, r3
 800bf78:	f000 f98c 	bl	800c294 <RTC_ByteToBcd2>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bf80:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	789b      	ldrb	r3, [r3, #2]
 800bf86:	4618      	mov	r0, r3
 800bf88:	f000 f984 	bl	800c294 <RTC_ByteToBcd2>
 800bf8c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bf8e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	78db      	ldrb	r3, [r3, #3]
 800bf96:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	617b      	str	r3, [r7, #20]
 800bf9c:	e017      	b.n	800bfce <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800bf9e:	4b23      	ldr	r3, [pc, #140]	@ (800c02c <HAL_RTC_SetTime+0x134>)
 800bfa0:	699b      	ldr	r3, [r3, #24]
 800bfa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d102      	bne.n	800bfb0 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	2200      	movs	r2, #0
 800bfae:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	785b      	ldrb	r3, [r3, #1]
 800bfba:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bfbc:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bfbe:	68ba      	ldr	r2, [r7, #8]
 800bfc0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bfc2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	78db      	ldrb	r3, [r3, #3]
 800bfc8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800bfce:	4a17      	ldr	r2, [pc, #92]	@ (800c02c <HAL_RTC_SetTime+0x134>)
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800bfd6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800bfda:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800bfdc:	4b13      	ldr	r3, [pc, #76]	@ (800c02c <HAL_RTC_SetTime+0x134>)
 800bfde:	699b      	ldr	r3, [r3, #24]
 800bfe0:	4a12      	ldr	r2, [pc, #72]	@ (800c02c <HAL_RTC_SetTime+0x134>)
 800bfe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bfe6:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800bfe8:	4b10      	ldr	r3, [pc, #64]	@ (800c02c <HAL_RTC_SetTime+0x134>)
 800bfea:	699a      	ldr	r2, [r3, #24]
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	68d9      	ldr	r1, [r3, #12]
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	691b      	ldr	r3, [r3, #16]
 800bff4:	430b      	orrs	r3, r1
 800bff6:	490d      	ldr	r1, [pc, #52]	@ (800c02c <HAL_RTC_SetTime+0x134>)
 800bff8:	4313      	orrs	r3, r2
 800bffa:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f000 f90b 	bl	800c218 <RTC_ExitInitMode>
 800c002:	4603      	mov	r3, r0
 800c004:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c006:	4b09      	ldr	r3, [pc, #36]	@ (800c02c <HAL_RTC_SetTime+0x134>)
 800c008:	22ff      	movs	r2, #255	@ 0xff
 800c00a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800c00c:	7cfb      	ldrb	r3, [r7, #19]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d103      	bne.n	800c01a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2201      	movs	r2, #1
 800c016:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2200      	movs	r2, #0
 800c01e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800c022:	7cfb      	ldrb	r3, [r7, #19]
}
 800c024:	4618      	mov	r0, r3
 800c026:	371c      	adds	r7, #28
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd90      	pop	{r4, r7, pc}
 800c02c:	46007800 	.word	0x46007800

0800c030 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c030:	b590      	push	{r4, r7, lr}
 800c032:	b087      	sub	sp, #28
 800c034:	af00      	add	r7, sp, #0
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c042:	2b01      	cmp	r3, #1
 800c044:	d101      	bne.n	800c04a <HAL_RTC_SetDate+0x1a>
 800c046:	2302      	movs	r3, #2
 800c048:	e071      	b.n	800c12e <HAL_RTC_SetDate+0xfe>
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2201      	movs	r2, #1
 800c04e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2202      	movs	r2, #2
 800c056:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d10e      	bne.n	800c07e <HAL_RTC_SetDate+0x4e>
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	785b      	ldrb	r3, [r3, #1]
 800c064:	f003 0310 	and.w	r3, r3, #16
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d008      	beq.n	800c07e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	785b      	ldrb	r3, [r3, #1]
 800c070:	f023 0310 	bic.w	r3, r3, #16
 800c074:	b2db      	uxtb	r3, r3
 800c076:	330a      	adds	r3, #10
 800c078:	b2da      	uxtb	r2, r3
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d11c      	bne.n	800c0be <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	78db      	ldrb	r3, [r3, #3]
 800c088:	4618      	mov	r0, r3
 800c08a:	f000 f903 	bl	800c294 <RTC_ByteToBcd2>
 800c08e:	4603      	mov	r3, r0
 800c090:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	785b      	ldrb	r3, [r3, #1]
 800c096:	4618      	mov	r0, r3
 800c098:	f000 f8fc 	bl	800c294 <RTC_ByteToBcd2>
 800c09c:	4603      	mov	r3, r0
 800c09e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c0a0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	789b      	ldrb	r3, [r3, #2]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f000 f8f4 	bl	800c294 <RTC_ByteToBcd2>
 800c0ac:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c0ae:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	617b      	str	r3, [r7, #20]
 800c0bc:	e00e      	b.n	800c0dc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	78db      	ldrb	r3, [r3, #3]
 800c0c2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	785b      	ldrb	r3, [r3, #1]
 800c0c8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c0ca:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c0d0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c0dc:	4b16      	ldr	r3, [pc, #88]	@ (800c138 <HAL_RTC_SetDate+0x108>)
 800c0de:	22ca      	movs	r2, #202	@ 0xca
 800c0e0:	625a      	str	r2, [r3, #36]	@ 0x24
 800c0e2:	4b15      	ldr	r3, [pc, #84]	@ (800c138 <HAL_RTC_SetDate+0x108>)
 800c0e4:	2253      	movs	r2, #83	@ 0x53
 800c0e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c0e8:	68f8      	ldr	r0, [r7, #12]
 800c0ea:	f000 f859 	bl	800c1a0 <RTC_EnterInitMode>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c0f2:	7cfb      	ldrb	r3, [r7, #19]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d10b      	bne.n	800c110 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800c0f8:	4a0f      	ldr	r2, [pc, #60]	@ (800c138 <HAL_RTC_SetDate+0x108>)
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c100:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c104:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c106:	68f8      	ldr	r0, [r7, #12]
 800c108:	f000 f886 	bl	800c218 <RTC_ExitInitMode>
 800c10c:	4603      	mov	r3, r0
 800c10e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c110:	4b09      	ldr	r3, [pc, #36]	@ (800c138 <HAL_RTC_SetDate+0x108>)
 800c112:	22ff      	movs	r2, #255	@ 0xff
 800c114:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800c116:	7cfb      	ldrb	r3, [r7, #19]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d103      	bne.n	800c124 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2201      	movs	r2, #1
 800c120:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2200      	movs	r2, #0
 800c128:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800c12c:	7cfb      	ldrb	r3, [r7, #19]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	371c      	adds	r7, #28
 800c132:	46bd      	mov	sp, r7
 800c134:	bd90      	pop	{r4, r7, pc}
 800c136:	bf00      	nop
 800c138:	46007800 	.word	0x46007800

0800c13c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800c144:	4b15      	ldr	r3, [pc, #84]	@ (800c19c <HAL_RTC_WaitForSynchro+0x60>)
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	4a14      	ldr	r2, [pc, #80]	@ (800c19c <HAL_RTC_WaitForSynchro+0x60>)
 800c14a:	f023 0320 	bic.w	r3, r3, #32
 800c14e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800c150:	f7f6 ffaa 	bl	80030a8 <HAL_GetTick>
 800c154:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c156:	e013      	b.n	800c180 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c158:	f7f6 ffa6 	bl	80030a8 <HAL_GetTick>
 800c15c:	4602      	mov	r2, r0
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	1ad3      	subs	r3, r2, r3
 800c162:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c166:	d90b      	bls.n	800c180 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c168:	4b0c      	ldr	r3, [pc, #48]	@ (800c19c <HAL_RTC_WaitForSynchro+0x60>)
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	f003 0320 	and.w	r3, r3, #32
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10c      	bne.n	800c18e <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2203      	movs	r2, #3
 800c178:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800c17c:	2303      	movs	r3, #3
 800c17e:	e008      	b.n	800c192 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c180:	4b06      	ldr	r3, [pc, #24]	@ (800c19c <HAL_RTC_WaitForSynchro+0x60>)
 800c182:	68db      	ldr	r3, [r3, #12]
 800c184:	f003 0320 	and.w	r3, r3, #32
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d0e5      	beq.n	800c158 <HAL_RTC_WaitForSynchro+0x1c>
 800c18c:	e000      	b.n	800c190 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800c18e:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	46007800 	.word	0x46007800

0800c1a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c1ac:	4b19      	ldr	r3, [pc, #100]	@ (800c214 <RTC_EnterInitMode+0x74>)
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d128      	bne.n	800c20a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c1b8:	4b16      	ldr	r3, [pc, #88]	@ (800c214 <RTC_EnterInitMode+0x74>)
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	4a15      	ldr	r2, [pc, #84]	@ (800c214 <RTC_EnterInitMode+0x74>)
 800c1be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1c2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800c1c4:	f7f6 ff70 	bl	80030a8 <HAL_GetTick>
 800c1c8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c1ca:	e013      	b.n	800c1f4 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c1cc:	f7f6 ff6c 	bl	80030a8 <HAL_GetTick>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	1ad3      	subs	r3, r2, r3
 800c1d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c1da:	d90b      	bls.n	800c1f4 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c1dc:	4b0d      	ldr	r3, [pc, #52]	@ (800c214 <RTC_EnterInitMode+0x74>)
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d10f      	bne.n	800c208 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800c1e8:	2303      	movs	r3, #3
 800c1ea:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2203      	movs	r2, #3
 800c1f0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c1f4:	4b07      	ldr	r3, [pc, #28]	@ (800c214 <RTC_EnterInitMode+0x74>)
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d104      	bne.n	800c20a <RTC_EnterInitMode+0x6a>
 800c200:	7bfb      	ldrb	r3, [r7, #15]
 800c202:	2b03      	cmp	r3, #3
 800c204:	d1e2      	bne.n	800c1cc <RTC_EnterInitMode+0x2c>
 800c206:	e000      	b.n	800c20a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800c208:	bf00      	nop
        }
      }
    }
  }

  return status;
 800c20a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	46007800 	.word	0x46007800

0800c218 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c220:	2300      	movs	r3, #0
 800c222:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c224:	4b1a      	ldr	r3, [pc, #104]	@ (800c290 <RTC_ExitInitMode+0x78>)
 800c226:	68db      	ldr	r3, [r3, #12]
 800c228:	4a19      	ldr	r2, [pc, #100]	@ (800c290 <RTC_ExitInitMode+0x78>)
 800c22a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c22e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c230:	4b17      	ldr	r3, [pc, #92]	@ (800c290 <RTC_ExitInitMode+0x78>)
 800c232:	699b      	ldr	r3, [r3, #24]
 800c234:	f003 0320 	and.w	r3, r3, #32
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d10c      	bne.n	800c256 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f7ff ff7d 	bl	800c13c <HAL_RTC_WaitForSynchro>
 800c242:	4603      	mov	r3, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d01e      	beq.n	800c286 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2203      	movs	r2, #3
 800c24c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800c250:	2303      	movs	r3, #3
 800c252:	73fb      	strb	r3, [r7, #15]
 800c254:	e017      	b.n	800c286 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c256:	4b0e      	ldr	r3, [pc, #56]	@ (800c290 <RTC_ExitInitMode+0x78>)
 800c258:	699b      	ldr	r3, [r3, #24]
 800c25a:	4a0d      	ldr	r2, [pc, #52]	@ (800c290 <RTC_ExitInitMode+0x78>)
 800c25c:	f023 0320 	bic.w	r3, r3, #32
 800c260:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7ff ff6a 	bl	800c13c <HAL_RTC_WaitForSynchro>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d005      	beq.n	800c27a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2203      	movs	r2, #3
 800c272:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800c276:	2303      	movs	r3, #3
 800c278:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c27a:	4b05      	ldr	r3, [pc, #20]	@ (800c290 <RTC_ExitInitMode+0x78>)
 800c27c:	699b      	ldr	r3, [r3, #24]
 800c27e:	4a04      	ldr	r2, [pc, #16]	@ (800c290 <RTC_ExitInitMode+0x78>)
 800c280:	f043 0320 	orr.w	r3, r3, #32
 800c284:	6193      	str	r3, [r2, #24]
  }
  return status;
 800c286:	7bfb      	ldrb	r3, [r7, #15]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	46007800 	.word	0x46007800

0800c294 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c294:	b480      	push	{r7}
 800c296:	b085      	sub	sp, #20
 800c298:	af00      	add	r7, sp, #0
 800c29a:	4603      	mov	r3, r0
 800c29c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800c2a2:	79fb      	ldrb	r3, [r7, #7]
 800c2a4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800c2a6:	e005      	b.n	800c2b4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800c2ae:	7afb      	ldrb	r3, [r7, #11]
 800c2b0:	3b0a      	subs	r3, #10
 800c2b2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800c2b4:	7afb      	ldrb	r3, [r7, #11]
 800c2b6:	2b09      	cmp	r3, #9
 800c2b8:	d8f6      	bhi.n	800c2a8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	011b      	lsls	r3, r3, #4
 800c2c0:	b2da      	uxtb	r2, r3
 800c2c2:	7afb      	ldrb	r3, [r7, #11]
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	b2db      	uxtb	r3, r3
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3714      	adds	r7, #20
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	4910      	ldr	r1, [pc, #64]	@ (800c328 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	689a      	ldr	r2, [r3, #8]
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	431a      	orrs	r2, r3
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	699b      	ldr	r3, [r3, #24]
 800c2fa:	490c      	ldr	r1, [pc, #48]	@ (800c32c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800c300:	4b0a      	ldr	r3, [pc, #40]	@ (800c32c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c302:	6a1b      	ldr	r3, [r3, #32]
 800c304:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	6919      	ldr	r1, [r3, #16]
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	695b      	ldr	r3, [r3, #20]
 800c310:	041b      	lsls	r3, r3, #16
 800c312:	430b      	orrs	r3, r1
 800c314:	4905      	ldr	r1, [pc, #20]	@ (800c32c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c316:	4313      	orrs	r3, r2
 800c318:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr
 800c328:	46007800 	.word	0x46007800
 800c32c:	46007c00 	.word	0x46007c00

0800c330 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d101      	bne.n	800c342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c33e:	2301      	movs	r3, #1
 800c340:	e0fb      	b.n	800c53a <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a7f      	ldr	r2, [pc, #508]	@ (800c544 <HAL_SPI_Init+0x214>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d004      	beq.n	800c356 <HAL_SPI_Init+0x26>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a7d      	ldr	r2, [pc, #500]	@ (800c548 <HAL_SPI_Init+0x218>)
 800c352:	4293      	cmp	r3, r2
 800c354:	e000      	b.n	800c358 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800c356:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2200      	movs	r2, #0
 800c35c:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4a78      	ldr	r2, [pc, #480]	@ (800c544 <HAL_SPI_Init+0x214>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d004      	beq.n	800c372 <HAL_SPI_Init+0x42>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a76      	ldr	r2, [pc, #472]	@ (800c548 <HAL_SPI_Init+0x218>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d105      	bne.n	800c37e <HAL_SPI_Init+0x4e>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	2b0f      	cmp	r3, #15
 800c378:	d901      	bls.n	800c37e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800c37a:	2301      	movs	r3, #1
 800c37c:	e0dd      	b.n	800c53a <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 f8ec 	bl	800c55c <SPI_GetPacketSize>
 800c384:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a6e      	ldr	r2, [pc, #440]	@ (800c544 <HAL_SPI_Init+0x214>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d004      	beq.n	800c39a <HAL_SPI_Init+0x6a>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a6c      	ldr	r2, [pc, #432]	@ (800c548 <HAL_SPI_Init+0x218>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d102      	bne.n	800c3a0 <HAL_SPI_Init+0x70>
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2b08      	cmp	r3, #8
 800c39e:	d816      	bhi.n	800c3ce <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c3a4:	4a69      	ldr	r2, [pc, #420]	@ (800c54c <HAL_SPI_Init+0x21c>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d00e      	beq.n	800c3c8 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a68      	ldr	r2, [pc, #416]	@ (800c550 <HAL_SPI_Init+0x220>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d009      	beq.n	800c3c8 <HAL_SPI_Init+0x98>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4a66      	ldr	r2, [pc, #408]	@ (800c554 <HAL_SPI_Init+0x224>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d004      	beq.n	800c3c8 <HAL_SPI_Init+0x98>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a65      	ldr	r2, [pc, #404]	@ (800c558 <HAL_SPI_Init+0x228>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d104      	bne.n	800c3d2 <HAL_SPI_Init+0xa2>
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2b10      	cmp	r3, #16
 800c3cc:	d901      	bls.n	800c3d2 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e0b3      	b.n	800c53a <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d106      	bne.n	800c3ec <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7f6 fc2a 	bl	8002c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2202      	movs	r2, #2
 800c3f0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f022 0201 	bic.w	r2, r2, #1
 800c402:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	689b      	ldr	r3, [r3, #8]
 800c40a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c40e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	699b      	ldr	r3, [r3, #24]
 800c414:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c418:	d119      	bne.n	800c44e <HAL_SPI_Init+0x11e>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c422:	d103      	bne.n	800c42c <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d008      	beq.n	800c43e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c430:	2b00      	cmp	r3, #0
 800c432:	d10c      	bne.n	800c44e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c438:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c43c:	d107      	bne.n	800c44e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	681a      	ldr	r2, [r3, #0]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c44c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c456:	2b00      	cmp	r3, #0
 800c458:	d00f      	beq.n	800c47a <HAL_SPI_Init+0x14a>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	2b06      	cmp	r3, #6
 800c460:	d90b      	bls.n	800c47a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	430a      	orrs	r2, r1
 800c476:	601a      	str	r2, [r3, #0]
 800c478:	e007      	b.n	800c48a <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c488:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	69da      	ldr	r2, [r3, #28]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c492:	431a      	orrs	r2, r3
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	431a      	orrs	r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c49c:	ea42 0103 	orr.w	r1, r2, r3
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	68da      	ldr	r2, [r3, #12]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	430a      	orrs	r2, r1
 800c4aa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4b4:	431a      	orrs	r2, r3
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4ba:	431a      	orrs	r2, r3
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	699b      	ldr	r3, [r3, #24]
 800c4c0:	431a      	orrs	r2, r3
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	691b      	ldr	r3, [r3, #16]
 800c4c6:	431a      	orrs	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	695b      	ldr	r3, [r3, #20]
 800c4cc:	431a      	orrs	r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6a1b      	ldr	r3, [r3, #32]
 800c4d2:	431a      	orrs	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	431a      	orrs	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4de:	431a      	orrs	r2, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	431a      	orrs	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4ea:	431a      	orrs	r2, r3
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4f0:	431a      	orrs	r2, r3
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4f6:	ea42 0103 	orr.w	r1, r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	430a      	orrs	r2, r1
 800c504:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00a      	beq.n	800c528 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	430a      	orrs	r2, r1
 800c526:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2200      	movs	r2, #0
 800c52c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2201      	movs	r2, #1
 800c534:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	46002000 	.word	0x46002000
 800c548:	56002000 	.word	0x56002000
 800c54c:	40013000 	.word	0x40013000
 800c550:	50013000 	.word	0x50013000
 800c554:	40003800 	.word	0x40003800
 800c558:	50003800 	.word	0x50003800

0800c55c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b085      	sub	sp, #20
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c568:	095b      	lsrs	r3, r3, #5
 800c56a:	3301      	adds	r3, #1
 800c56c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	3301      	adds	r3, #1
 800c574:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	3307      	adds	r3, #7
 800c57a:	08db      	lsrs	r3, r3, #3
 800c57c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	fb02 f303 	mul.w	r3, r2, r3
}
 800c586:	4618      	mov	r0, r3
 800c588:	3714      	adds	r7, #20
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr

0800c592 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800c592:	b480      	push	{r7}
 800c594:	b083      	sub	sp, #12
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
 800c59a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d12e      	bne.n	800c606 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d101      	bne.n	800c5b6 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800c5b2:	2302      	movs	r3, #2
 800c5b4:	e028      	b.n	800c608 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2202      	movs	r2, #2
 800c5c2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f022 0201 	bic.w	r2, r2, #1
 800c5d4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800c5e2:	ea42 0103 	orr.w	r1, r2, r3
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	689a      	ldr	r2, [r3, #8]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	430a      	orrs	r2, r1
 800c5f0:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c602:	2300      	movs	r3, #0
 800c604:	e000      	b.n	800c608 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800c606:	2301      	movs	r3, #1
  }
}
 800c608:	4618      	mov	r0, r3
 800c60a:	370c      	adds	r7, #12
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d101      	bne.n	800c626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	e049      	b.n	800c6ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d106      	bne.n	800c640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2200      	movs	r2, #0
 800c636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 f841 	bl	800c6c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2202      	movs	r2, #2
 800c644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	3304      	adds	r3, #4
 800c650:	4619      	mov	r1, r3
 800c652:	4610      	mov	r0, r2
 800c654:	f000 fa58 	bl	800cb08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2201      	movs	r2, #1
 800c65c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2201      	movs	r2, #1
 800c674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2201      	movs	r2, #1
 800c68c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2201      	movs	r2, #1
 800c694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c6c2:	b480      	push	{r7}
 800c6c4:	b083      	sub	sp, #12
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c6ca:	bf00      	nop
 800c6cc:	370c      	adds	r7, #12
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
	...

0800c6d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b085      	sub	sp, #20
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d001      	beq.n	800c6f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	e072      	b.n	800c7d6 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2202      	movs	r2, #2
 800c6f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	68da      	ldr	r2, [r3, #12]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f042 0201 	orr.w	r2, r2, #1
 800c706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a35      	ldr	r2, [pc, #212]	@ (800c7e4 <HAL_TIM_Base_Start_IT+0x10c>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d040      	beq.n	800c794 <HAL_TIM_Base_Start_IT+0xbc>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a34      	ldr	r2, [pc, #208]	@ (800c7e8 <HAL_TIM_Base_Start_IT+0x110>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d03b      	beq.n	800c794 <HAL_TIM_Base_Start_IT+0xbc>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c724:	d036      	beq.n	800c794 <HAL_TIM_Base_Start_IT+0xbc>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c72e:	d031      	beq.n	800c794 <HAL_TIM_Base_Start_IT+0xbc>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a2d      	ldr	r2, [pc, #180]	@ (800c7ec <HAL_TIM_Base_Start_IT+0x114>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d02c      	beq.n	800c794 <HAL_TIM_Base_Start_IT+0xbc>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a2c      	ldr	r2, [pc, #176]	@ (800c7f0 <HAL_TIM_Base_Start_IT+0x118>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d027      	beq.n	800c794 <HAL_TIM_Base_Start_IT+0xbc>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a2a      	ldr	r2, [pc, #168]	@ (800c7f4 <HAL_TIM_Base_Start_IT+0x11c>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d022      	beq.n	800c794 <HAL_TIM_Base_Start_IT+0xbc>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a29      	ldr	r2, [pc, #164]	@ (800c7f8 <HAL_TIM_Base_Start_IT+0x120>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d01d      	beq.n	800c794 <HAL_TIM_Base_Start_IT+0xbc>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a27      	ldr	r2, [pc, #156]	@ (800c7fc <HAL_TIM_Base_Start_IT+0x124>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d018      	beq.n	800c794 <HAL_TIM_Base_Start_IT+0xbc>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a26      	ldr	r2, [pc, #152]	@ (800c800 <HAL_TIM_Base_Start_IT+0x128>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d013      	beq.n	800c794 <HAL_TIM_Base_Start_IT+0xbc>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a24      	ldr	r2, [pc, #144]	@ (800c804 <HAL_TIM_Base_Start_IT+0x12c>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d00e      	beq.n	800c794 <HAL_TIM_Base_Start_IT+0xbc>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a23      	ldr	r2, [pc, #140]	@ (800c808 <HAL_TIM_Base_Start_IT+0x130>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d009      	beq.n	800c794 <HAL_TIM_Base_Start_IT+0xbc>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4a21      	ldr	r2, [pc, #132]	@ (800c80c <HAL_TIM_Base_Start_IT+0x134>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d004      	beq.n	800c794 <HAL_TIM_Base_Start_IT+0xbc>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a20      	ldr	r2, [pc, #128]	@ (800c810 <HAL_TIM_Base_Start_IT+0x138>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d115      	bne.n	800c7c0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	689a      	ldr	r2, [r3, #8]
 800c79a:	4b1e      	ldr	r3, [pc, #120]	@ (800c814 <HAL_TIM_Base_Start_IT+0x13c>)
 800c79c:	4013      	ands	r3, r2
 800c79e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2b06      	cmp	r3, #6
 800c7a4:	d015      	beq.n	800c7d2 <HAL_TIM_Base_Start_IT+0xfa>
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7ac:	d011      	beq.n	800c7d2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f042 0201 	orr.w	r2, r2, #1
 800c7bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7be:	e008      	b.n	800c7d2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f042 0201 	orr.w	r2, r2, #1
 800c7ce:	601a      	str	r2, [r3, #0]
 800c7d0:	e000      	b.n	800c7d4 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7d4:	2300      	movs	r3, #0
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3714      	adds	r7, #20
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	40012c00 	.word	0x40012c00
 800c7e8:	50012c00 	.word	0x50012c00
 800c7ec:	40000400 	.word	0x40000400
 800c7f0:	50000400 	.word	0x50000400
 800c7f4:	40000800 	.word	0x40000800
 800c7f8:	50000800 	.word	0x50000800
 800c7fc:	40000c00 	.word	0x40000c00
 800c800:	50000c00 	.word	0x50000c00
 800c804:	40013400 	.word	0x40013400
 800c808:	50013400 	.word	0x50013400
 800c80c:	40014000 	.word	0x40014000
 800c810:	50014000 	.word	0x50014000
 800c814:	00010007 	.word	0x00010007

0800c818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	f003 0302 	and.w	r3, r3, #2
 800c836:	2b00      	cmp	r3, #0
 800c838:	d020      	beq.n	800c87c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f003 0302 	and.w	r3, r3, #2
 800c840:	2b00      	cmp	r3, #0
 800c842:	d01b      	beq.n	800c87c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f06f 0202 	mvn.w	r2, #2
 800c84c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2201      	movs	r2, #1
 800c852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	699b      	ldr	r3, [r3, #24]
 800c85a:	f003 0303 	and.w	r3, r3, #3
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d003      	beq.n	800c86a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 f931 	bl	800caca <HAL_TIM_IC_CaptureCallback>
 800c868:	e005      	b.n	800c876 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 f923 	bl	800cab6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f000 f934 	bl	800cade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2200      	movs	r2, #0
 800c87a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	f003 0304 	and.w	r3, r3, #4
 800c882:	2b00      	cmp	r3, #0
 800c884:	d020      	beq.n	800c8c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f003 0304 	and.w	r3, r3, #4
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d01b      	beq.n	800c8c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f06f 0204 	mvn.w	r2, #4
 800c898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2202      	movs	r2, #2
 800c89e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	699b      	ldr	r3, [r3, #24]
 800c8a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d003      	beq.n	800c8b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 f90b 	bl	800caca <HAL_TIM_IC_CaptureCallback>
 800c8b4:	e005      	b.n	800c8c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 f8fd 	bl	800cab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 f90e 	bl	800cade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	f003 0308 	and.w	r3, r3, #8
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d020      	beq.n	800c914 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f003 0308 	and.w	r3, r3, #8
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d01b      	beq.n	800c914 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f06f 0208 	mvn.w	r2, #8
 800c8e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2204      	movs	r2, #4
 800c8ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	69db      	ldr	r3, [r3, #28]
 800c8f2:	f003 0303 	and.w	r3, r3, #3
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d003      	beq.n	800c902 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 f8e5 	bl	800caca <HAL_TIM_IC_CaptureCallback>
 800c900:	e005      	b.n	800c90e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 f8d7 	bl	800cab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 f8e8 	bl	800cade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	f003 0310 	and.w	r3, r3, #16
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d020      	beq.n	800c960 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f003 0310 	and.w	r3, r3, #16
 800c924:	2b00      	cmp	r3, #0
 800c926:	d01b      	beq.n	800c960 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f06f 0210 	mvn.w	r2, #16
 800c930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2208      	movs	r2, #8
 800c936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	69db      	ldr	r3, [r3, #28]
 800c93e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c942:	2b00      	cmp	r3, #0
 800c944:	d003      	beq.n	800c94e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 f8bf 	bl	800caca <HAL_TIM_IC_CaptureCallback>
 800c94c:	e005      	b.n	800c95a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 f8b1 	bl	800cab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 f8c2 	bl	800cade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2200      	movs	r2, #0
 800c95e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	f003 0301 	and.w	r3, r3, #1
 800c966:	2b00      	cmp	r3, #0
 800c968:	d00c      	beq.n	800c984 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f003 0301 	and.w	r3, r3, #1
 800c970:	2b00      	cmp	r3, #0
 800c972:	d007      	beq.n	800c984 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f06f 0201 	mvn.w	r2, #1
 800c97c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f7f5 f914 	bl	8001bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d104      	bne.n	800c998 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00c      	beq.n	800c9b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d007      	beq.n	800c9b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c9aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 f9af 	bl	800cd10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d00c      	beq.n	800c9d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d007      	beq.n	800c9d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c9ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 f9a7 	bl	800cd24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d00c      	beq.n	800c9fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d007      	beq.n	800c9fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c9f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 f87c 	bl	800caf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	f003 0320 	and.w	r3, r3, #32
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d00c      	beq.n	800ca1e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f003 0320 	and.w	r3, r3, #32
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d007      	beq.n	800ca1e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f06f 0220 	mvn.w	r2, #32
 800ca16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 f96f 	bl	800ccfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d00c      	beq.n	800ca42 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d007      	beq.n	800ca42 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800ca3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 f97b 	bl	800cd38 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d00c      	beq.n	800ca66 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d007      	beq.n	800ca66 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800ca5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f000 f973 	bl	800cd4c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d00c      	beq.n	800ca8a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d007      	beq.n	800ca8a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800ca82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 f96b 	bl	800cd60 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d00c      	beq.n	800caae <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d007      	beq.n	800caae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800caa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 f963 	bl	800cd74 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800caae:	bf00      	nop
 800cab0:	3710      	adds	r7, #16
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}

0800cab6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cab6:	b480      	push	{r7}
 800cab8:	b083      	sub	sp, #12
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cabe:	bf00      	nop
 800cac0:	370c      	adds	r7, #12
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr

0800caca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800caca:	b480      	push	{r7}
 800cacc:	b083      	sub	sp, #12
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cad2:	bf00      	nop
 800cad4:	370c      	adds	r7, #12
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr

0800cade <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cade:	b480      	push	{r7}
 800cae0:	b083      	sub	sp, #12
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cae6:	bf00      	nop
 800cae8:	370c      	adds	r7, #12
 800caea:	46bd      	mov	sp, r7
 800caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf0:	4770      	bx	lr

0800caf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800caf2:	b480      	push	{r7}
 800caf4:	b083      	sub	sp, #12
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cafa:	bf00      	nop
 800cafc:	370c      	adds	r7, #12
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr
	...

0800cb08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b085      	sub	sp, #20
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	4a68      	ldr	r2, [pc, #416]	@ (800ccbc <TIM_Base_SetConfig+0x1b4>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d02b      	beq.n	800cb78 <TIM_Base_SetConfig+0x70>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	4a67      	ldr	r2, [pc, #412]	@ (800ccc0 <TIM_Base_SetConfig+0x1b8>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d027      	beq.n	800cb78 <TIM_Base_SetConfig+0x70>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb2e:	d023      	beq.n	800cb78 <TIM_Base_SetConfig+0x70>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cb36:	d01f      	beq.n	800cb78 <TIM_Base_SetConfig+0x70>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4a62      	ldr	r2, [pc, #392]	@ (800ccc4 <TIM_Base_SetConfig+0x1bc>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d01b      	beq.n	800cb78 <TIM_Base_SetConfig+0x70>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	4a61      	ldr	r2, [pc, #388]	@ (800ccc8 <TIM_Base_SetConfig+0x1c0>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d017      	beq.n	800cb78 <TIM_Base_SetConfig+0x70>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4a60      	ldr	r2, [pc, #384]	@ (800cccc <TIM_Base_SetConfig+0x1c4>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d013      	beq.n	800cb78 <TIM_Base_SetConfig+0x70>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	4a5f      	ldr	r2, [pc, #380]	@ (800ccd0 <TIM_Base_SetConfig+0x1c8>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d00f      	beq.n	800cb78 <TIM_Base_SetConfig+0x70>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	4a5e      	ldr	r2, [pc, #376]	@ (800ccd4 <TIM_Base_SetConfig+0x1cc>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d00b      	beq.n	800cb78 <TIM_Base_SetConfig+0x70>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	4a5d      	ldr	r2, [pc, #372]	@ (800ccd8 <TIM_Base_SetConfig+0x1d0>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d007      	beq.n	800cb78 <TIM_Base_SetConfig+0x70>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4a5c      	ldr	r2, [pc, #368]	@ (800ccdc <TIM_Base_SetConfig+0x1d4>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d003      	beq.n	800cb78 <TIM_Base_SetConfig+0x70>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	4a5b      	ldr	r2, [pc, #364]	@ (800cce0 <TIM_Base_SetConfig+0x1d8>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d108      	bne.n	800cb8a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	4313      	orrs	r3, r2
 800cb88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	4a4b      	ldr	r2, [pc, #300]	@ (800ccbc <TIM_Base_SetConfig+0x1b4>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d043      	beq.n	800cc1a <TIM_Base_SetConfig+0x112>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	4a4a      	ldr	r2, [pc, #296]	@ (800ccc0 <TIM_Base_SetConfig+0x1b8>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d03f      	beq.n	800cc1a <TIM_Base_SetConfig+0x112>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cba0:	d03b      	beq.n	800cc1a <TIM_Base_SetConfig+0x112>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cba8:	d037      	beq.n	800cc1a <TIM_Base_SetConfig+0x112>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	4a45      	ldr	r2, [pc, #276]	@ (800ccc4 <TIM_Base_SetConfig+0x1bc>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d033      	beq.n	800cc1a <TIM_Base_SetConfig+0x112>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4a44      	ldr	r2, [pc, #272]	@ (800ccc8 <TIM_Base_SetConfig+0x1c0>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d02f      	beq.n	800cc1a <TIM_Base_SetConfig+0x112>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4a43      	ldr	r2, [pc, #268]	@ (800cccc <TIM_Base_SetConfig+0x1c4>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d02b      	beq.n	800cc1a <TIM_Base_SetConfig+0x112>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4a42      	ldr	r2, [pc, #264]	@ (800ccd0 <TIM_Base_SetConfig+0x1c8>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d027      	beq.n	800cc1a <TIM_Base_SetConfig+0x112>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4a41      	ldr	r2, [pc, #260]	@ (800ccd4 <TIM_Base_SetConfig+0x1cc>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d023      	beq.n	800cc1a <TIM_Base_SetConfig+0x112>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	4a40      	ldr	r2, [pc, #256]	@ (800ccd8 <TIM_Base_SetConfig+0x1d0>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d01f      	beq.n	800cc1a <TIM_Base_SetConfig+0x112>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	4a3f      	ldr	r2, [pc, #252]	@ (800ccdc <TIM_Base_SetConfig+0x1d4>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d01b      	beq.n	800cc1a <TIM_Base_SetConfig+0x112>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4a3e      	ldr	r2, [pc, #248]	@ (800cce0 <TIM_Base_SetConfig+0x1d8>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d017      	beq.n	800cc1a <TIM_Base_SetConfig+0x112>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4a3d      	ldr	r2, [pc, #244]	@ (800cce4 <TIM_Base_SetConfig+0x1dc>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d013      	beq.n	800cc1a <TIM_Base_SetConfig+0x112>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4a3c      	ldr	r2, [pc, #240]	@ (800cce8 <TIM_Base_SetConfig+0x1e0>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d00f      	beq.n	800cc1a <TIM_Base_SetConfig+0x112>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4a3b      	ldr	r2, [pc, #236]	@ (800ccec <TIM_Base_SetConfig+0x1e4>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d00b      	beq.n	800cc1a <TIM_Base_SetConfig+0x112>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4a3a      	ldr	r2, [pc, #232]	@ (800ccf0 <TIM_Base_SetConfig+0x1e8>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d007      	beq.n	800cc1a <TIM_Base_SetConfig+0x112>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4a39      	ldr	r2, [pc, #228]	@ (800ccf4 <TIM_Base_SetConfig+0x1ec>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d003      	beq.n	800cc1a <TIM_Base_SetConfig+0x112>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4a38      	ldr	r2, [pc, #224]	@ (800ccf8 <TIM_Base_SetConfig+0x1f0>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d108      	bne.n	800cc2c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cc20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	695b      	ldr	r3, [r3, #20]
 800cc36:	4313      	orrs	r3, r2
 800cc38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	68fa      	ldr	r2, [r7, #12]
 800cc3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	689a      	ldr	r2, [r3, #8]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	4a1a      	ldr	r2, [pc, #104]	@ (800ccbc <TIM_Base_SetConfig+0x1b4>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d023      	beq.n	800cca0 <TIM_Base_SetConfig+0x198>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	4a19      	ldr	r2, [pc, #100]	@ (800ccc0 <TIM_Base_SetConfig+0x1b8>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d01f      	beq.n	800cca0 <TIM_Base_SetConfig+0x198>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	4a1e      	ldr	r2, [pc, #120]	@ (800ccdc <TIM_Base_SetConfig+0x1d4>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d01b      	beq.n	800cca0 <TIM_Base_SetConfig+0x198>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	4a1d      	ldr	r2, [pc, #116]	@ (800cce0 <TIM_Base_SetConfig+0x1d8>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d017      	beq.n	800cca0 <TIM_Base_SetConfig+0x198>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	4a1c      	ldr	r2, [pc, #112]	@ (800cce4 <TIM_Base_SetConfig+0x1dc>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d013      	beq.n	800cca0 <TIM_Base_SetConfig+0x198>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	4a1b      	ldr	r2, [pc, #108]	@ (800cce8 <TIM_Base_SetConfig+0x1e0>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d00f      	beq.n	800cca0 <TIM_Base_SetConfig+0x198>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	4a1a      	ldr	r2, [pc, #104]	@ (800ccec <TIM_Base_SetConfig+0x1e4>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d00b      	beq.n	800cca0 <TIM_Base_SetConfig+0x198>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	4a19      	ldr	r2, [pc, #100]	@ (800ccf0 <TIM_Base_SetConfig+0x1e8>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d007      	beq.n	800cca0 <TIM_Base_SetConfig+0x198>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4a18      	ldr	r2, [pc, #96]	@ (800ccf4 <TIM_Base_SetConfig+0x1ec>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d003      	beq.n	800cca0 <TIM_Base_SetConfig+0x198>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4a17      	ldr	r2, [pc, #92]	@ (800ccf8 <TIM_Base_SetConfig+0x1f0>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d103      	bne.n	800cca8 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	691a      	ldr	r2, [r3, #16]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2201      	movs	r2, #1
 800ccac:	615a      	str	r2, [r3, #20]
}
 800ccae:	bf00      	nop
 800ccb0:	3714      	adds	r7, #20
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr
 800ccba:	bf00      	nop
 800ccbc:	40012c00 	.word	0x40012c00
 800ccc0:	50012c00 	.word	0x50012c00
 800ccc4:	40000400 	.word	0x40000400
 800ccc8:	50000400 	.word	0x50000400
 800cccc:	40000800 	.word	0x40000800
 800ccd0:	50000800 	.word	0x50000800
 800ccd4:	40000c00 	.word	0x40000c00
 800ccd8:	50000c00 	.word	0x50000c00
 800ccdc:	40013400 	.word	0x40013400
 800cce0:	50013400 	.word	0x50013400
 800cce4:	40014000 	.word	0x40014000
 800cce8:	50014000 	.word	0x50014000
 800ccec:	40014400 	.word	0x40014400
 800ccf0:	50014400 	.word	0x50014400
 800ccf4:	40014800 	.word	0x40014800
 800ccf8:	50014800 	.word	0x50014800

0800ccfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cd04:	bf00      	nop
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cd18:	bf00      	nop
 800cd1a:	370c      	adds	r7, #12
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cd2c:	bf00      	nop
 800cd2e:	370c      	adds	r7, #12
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cd40:	bf00      	nop
 800cd42:	370c      	adds	r7, #12
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b083      	sub	sp, #12
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800cd54:	bf00      	nop
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800cd68:	bf00      	nop
 800cd6a:	370c      	adds	r7, #12
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr

0800cd74 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800cd7c:	bf00      	nop
 800cd7e:	370c      	adds	r7, #12
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d101      	bne.n	800cd9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd96:	2301      	movs	r3, #1
 800cd98:	e042      	b.n	800ce20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d106      	bne.n	800cdb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7f5 fb57 	bl	8002460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2224      	movs	r2, #36	@ 0x24
 800cdb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	681a      	ldr	r2, [r3, #0]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f022 0201 	bic.w	r2, r2, #1
 800cdc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d002      	beq.n	800cdd8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 fa64 	bl	800d2a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 f8b3 	bl	800cf44 <UART_SetConfig>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d101      	bne.n	800cde8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cde4:	2301      	movs	r3, #1
 800cde6:	e01b      	b.n	800ce20 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	685a      	ldr	r2, [r3, #4]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cdf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	689a      	ldr	r2, [r3, #8]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ce06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	681a      	ldr	r2, [r3, #0]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f042 0201 	orr.w	r2, r2, #1
 800ce16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 fae3 	bl	800d3e4 <UART_CheckIdleState>
 800ce1e:	4603      	mov	r3, r0
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b08a      	sub	sp, #40	@ 0x28
 800ce2c:	af02      	add	r7, sp, #8
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	603b      	str	r3, [r7, #0]
 800ce34:	4613      	mov	r3, r2
 800ce36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce3e:	2b20      	cmp	r3, #32
 800ce40:	d17b      	bne.n	800cf3a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d002      	beq.n	800ce4e <HAL_UART_Transmit+0x26>
 800ce48:	88fb      	ldrh	r3, [r7, #6]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d101      	bne.n	800ce52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e074      	b.n	800cf3c <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2200      	movs	r2, #0
 800ce56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2221      	movs	r2, #33	@ 0x21
 800ce5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ce62:	f7f6 f921 	bl	80030a8 <HAL_GetTick>
 800ce66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	88fa      	ldrh	r2, [r7, #6]
 800ce6c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	88fa      	ldrh	r2, [r7, #6]
 800ce74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	689b      	ldr	r3, [r3, #8]
 800ce7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce80:	d108      	bne.n	800ce94 <HAL_UART_Transmit+0x6c>
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d104      	bne.n	800ce94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	61bb      	str	r3, [r7, #24]
 800ce92:	e003      	b.n	800ce9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ce9c:	e030      	b.n	800cf00 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	9300      	str	r3, [sp, #0]
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	2200      	movs	r2, #0
 800cea6:	2180      	movs	r1, #128	@ 0x80
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f000 fb45 	bl	800d538 <UART_WaitOnFlagUntilTimeout>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d005      	beq.n	800cec0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2220      	movs	r2, #32
 800ceb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cebc:	2303      	movs	r3, #3
 800cebe:	e03d      	b.n	800cf3c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d10b      	bne.n	800cede <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	881b      	ldrh	r3, [r3, #0]
 800ceca:	461a      	mov	r2, r3
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ced4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	3302      	adds	r3, #2
 800ceda:	61bb      	str	r3, [r7, #24]
 800cedc:	e007      	b.n	800ceee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	781a      	ldrb	r2, [r3, #0]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	3301      	adds	r3, #1
 800ceec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	3b01      	subs	r3, #1
 800cef8:	b29a      	uxth	r2, r3
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d1c8      	bne.n	800ce9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	9300      	str	r3, [sp, #0]
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	2200      	movs	r2, #0
 800cf14:	2140      	movs	r1, #64	@ 0x40
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f000 fb0e 	bl	800d538 <UART_WaitOnFlagUntilTimeout>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d005      	beq.n	800cf2e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2220      	movs	r2, #32
 800cf26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cf2a:	2303      	movs	r3, #3
 800cf2c:	e006      	b.n	800cf3c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2220      	movs	r2, #32
 800cf32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cf36:	2300      	movs	r3, #0
 800cf38:	e000      	b.n	800cf3c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cf3a:	2302      	movs	r3, #2
  }
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3720      	adds	r7, #32
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf48:	b094      	sub	sp, #80	@ 0x50
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800cf54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	4b83      	ldr	r3, [pc, #524]	@ (800d168 <UART_SetConfig+0x224>)
 800cf5a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf5e:	689a      	ldr	r2, [r3, #8]
 800cf60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf62:	691b      	ldr	r3, [r3, #16]
 800cf64:	431a      	orrs	r2, r3
 800cf66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf68:	695b      	ldr	r3, [r3, #20]
 800cf6a:	431a      	orrs	r2, r3
 800cf6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf6e:	69db      	ldr	r3, [r3, #28]
 800cf70:	4313      	orrs	r3, r2
 800cf72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	497c      	ldr	r1, [pc, #496]	@ (800d16c <UART_SetConfig+0x228>)
 800cf7c:	4019      	ands	r1, r3
 800cf7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf84:	430b      	orrs	r3, r1
 800cf86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800cf92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf94:	68d9      	ldr	r1, [r3, #12]
 800cf96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	ea40 0301 	orr.w	r3, r0, r1
 800cf9e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cfa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfa2:	699b      	ldr	r3, [r3, #24]
 800cfa4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cfa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	4b6f      	ldr	r3, [pc, #444]	@ (800d168 <UART_SetConfig+0x224>)
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d009      	beq.n	800cfc4 <UART_SetConfig+0x80>
 800cfb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	4b6e      	ldr	r3, [pc, #440]	@ (800d170 <UART_SetConfig+0x22c>)
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d004      	beq.n	800cfc4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cfba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfbc:	6a1a      	ldr	r2, [r3, #32]
 800cfbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cfc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800cfce:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800cfd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfd8:	430b      	orrs	r3, r1
 800cfda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cfdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfe2:	f023 000f 	bic.w	r0, r3, #15
 800cfe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfe8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800cfea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	ea40 0301 	orr.w	r3, r0, r1
 800cff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	4b5e      	ldr	r3, [pc, #376]	@ (800d174 <UART_SetConfig+0x230>)
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d102      	bne.n	800d004 <UART_SetConfig+0xc0>
 800cffe:	2301      	movs	r3, #1
 800d000:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d002:	e032      	b.n	800d06a <UART_SetConfig+0x126>
 800d004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d006:	681a      	ldr	r2, [r3, #0]
 800d008:	4b5b      	ldr	r3, [pc, #364]	@ (800d178 <UART_SetConfig+0x234>)
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d102      	bne.n	800d014 <UART_SetConfig+0xd0>
 800d00e:	2302      	movs	r3, #2
 800d010:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d012:	e02a      	b.n	800d06a <UART_SetConfig+0x126>
 800d014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	4b58      	ldr	r3, [pc, #352]	@ (800d17c <UART_SetConfig+0x238>)
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d102      	bne.n	800d024 <UART_SetConfig+0xe0>
 800d01e:	2304      	movs	r3, #4
 800d020:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d022:	e022      	b.n	800d06a <UART_SetConfig+0x126>
 800d024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	4b55      	ldr	r3, [pc, #340]	@ (800d180 <UART_SetConfig+0x23c>)
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d102      	bne.n	800d034 <UART_SetConfig+0xf0>
 800d02e:	2308      	movs	r3, #8
 800d030:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d032:	e01a      	b.n	800d06a <UART_SetConfig+0x126>
 800d034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	4b52      	ldr	r3, [pc, #328]	@ (800d184 <UART_SetConfig+0x240>)
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d102      	bne.n	800d044 <UART_SetConfig+0x100>
 800d03e:	2310      	movs	r3, #16
 800d040:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d042:	e012      	b.n	800d06a <UART_SetConfig+0x126>
 800d044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d046:	681a      	ldr	r2, [r3, #0]
 800d048:	4b4f      	ldr	r3, [pc, #316]	@ (800d188 <UART_SetConfig+0x244>)
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d103      	bne.n	800d056 <UART_SetConfig+0x112>
 800d04e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800d052:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d054:	e009      	b.n	800d06a <UART_SetConfig+0x126>
 800d056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	4b43      	ldr	r3, [pc, #268]	@ (800d168 <UART_SetConfig+0x224>)
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d102      	bne.n	800d066 <UART_SetConfig+0x122>
 800d060:	2320      	movs	r3, #32
 800d062:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d064:	e001      	b.n	800d06a <UART_SetConfig+0x126>
 800d066:	2300      	movs	r3, #0
 800d068:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d06a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d06c:	681a      	ldr	r2, [r3, #0]
 800d06e:	4b3e      	ldr	r3, [pc, #248]	@ (800d168 <UART_SetConfig+0x224>)
 800d070:	429a      	cmp	r2, r3
 800d072:	d005      	beq.n	800d080 <UART_SetConfig+0x13c>
 800d074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	4b3d      	ldr	r3, [pc, #244]	@ (800d170 <UART_SetConfig+0x22c>)
 800d07a:	429a      	cmp	r2, r3
 800d07c:	f040 8088 	bne.w	800d190 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d080:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d082:	2200      	movs	r2, #0
 800d084:	623b      	str	r3, [r7, #32]
 800d086:	627a      	str	r2, [r7, #36]	@ 0x24
 800d088:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d08c:	f7fd f9ea 	bl	800a464 <HAL_RCCEx_GetPeriphCLKFreq>
 800d090:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d094:	2b00      	cmp	r3, #0
 800d096:	f000 80eb 	beq.w	800d270 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d09e:	4a3b      	ldr	r2, [pc, #236]	@ (800d18c <UART_SetConfig+0x248>)
 800d0a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0ac:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b0:	685a      	ldr	r2, [r3, #4]
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	005b      	lsls	r3, r3, #1
 800d0b6:	4413      	add	r3, r2
 800d0b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d305      	bcc.n	800d0ca <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d903      	bls.n	800d0d2 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d0d0:	e048      	b.n	800d164 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	61bb      	str	r3, [r7, #24]
 800d0d8:	61fa      	str	r2, [r7, #28]
 800d0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0de:	4a2b      	ldr	r2, [pc, #172]	@ (800d18c <UART_SetConfig+0x248>)
 800d0e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	613b      	str	r3, [r7, #16]
 800d0ea:	617a      	str	r2, [r7, #20]
 800d0ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d0f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d0f4:	f7f3 f8da 	bl	80002ac <__aeabi_uldivmod>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	4610      	mov	r0, r2
 800d0fe:	4619      	mov	r1, r3
 800d100:	f04f 0200 	mov.w	r2, #0
 800d104:	f04f 0300 	mov.w	r3, #0
 800d108:	020b      	lsls	r3, r1, #8
 800d10a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d10e:	0202      	lsls	r2, r0, #8
 800d110:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d112:	6849      	ldr	r1, [r1, #4]
 800d114:	0849      	lsrs	r1, r1, #1
 800d116:	2000      	movs	r0, #0
 800d118:	460c      	mov	r4, r1
 800d11a:	4605      	mov	r5, r0
 800d11c:	eb12 0804 	adds.w	r8, r2, r4
 800d120:	eb43 0905 	adc.w	r9, r3, r5
 800d124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	60bb      	str	r3, [r7, #8]
 800d12c:	60fa      	str	r2, [r7, #12]
 800d12e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d132:	4640      	mov	r0, r8
 800d134:	4649      	mov	r1, r9
 800d136:	f7f3 f8b9 	bl	80002ac <__aeabi_uldivmod>
 800d13a:	4602      	mov	r2, r0
 800d13c:	460b      	mov	r3, r1
 800d13e:	4613      	mov	r3, r2
 800d140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d144:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d148:	d308      	bcc.n	800d15c <UART_SetConfig+0x218>
 800d14a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d14c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d150:	d204      	bcs.n	800d15c <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800d152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d158:	60da      	str	r2, [r3, #12]
 800d15a:	e003      	b.n	800d164 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800d15c:	2301      	movs	r3, #1
 800d15e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800d162:	e085      	b.n	800d270 <UART_SetConfig+0x32c>
 800d164:	e084      	b.n	800d270 <UART_SetConfig+0x32c>
 800d166:	bf00      	nop
 800d168:	46002400 	.word	0x46002400
 800d16c:	cfff69f3 	.word	0xcfff69f3
 800d170:	56002400 	.word	0x56002400
 800d174:	40013800 	.word	0x40013800
 800d178:	40004400 	.word	0x40004400
 800d17c:	40004800 	.word	0x40004800
 800d180:	40004c00 	.word	0x40004c00
 800d184:	40005000 	.word	0x40005000
 800d188:	40006400 	.word	0x40006400
 800d18c:	0800da60 	.word	0x0800da60
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d192:	69db      	ldr	r3, [r3, #28]
 800d194:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d198:	d13c      	bne.n	800d214 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d19a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d19c:	2200      	movs	r2, #0
 800d19e:	603b      	str	r3, [r7, #0]
 800d1a0:	607a      	str	r2, [r7, #4]
 800d1a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1a6:	f7fd f95d 	bl	800a464 <HAL_RCCEx_GetPeriphCLKFreq>
 800d1aa:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d1ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d05e      	beq.n	800d270 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1b6:	4a39      	ldr	r2, [pc, #228]	@ (800d29c <UART_SetConfig+0x358>)
 800d1b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1bc:	461a      	mov	r2, r3
 800d1be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1c4:	005a      	lsls	r2, r3, #1
 800d1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	085b      	lsrs	r3, r3, #1
 800d1cc:	441a      	add	r2, r3
 800d1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1da:	2b0f      	cmp	r3, #15
 800d1dc:	d916      	bls.n	800d20c <UART_SetConfig+0x2c8>
 800d1de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1e4:	d212      	bcs.n	800d20c <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d1e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	f023 030f 	bic.w	r3, r3, #15
 800d1ee:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d1f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1f2:	085b      	lsrs	r3, r3, #1
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	f003 0307 	and.w	r3, r3, #7
 800d1fa:	b29a      	uxth	r2, r3
 800d1fc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d1fe:	4313      	orrs	r3, r2
 800d200:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800d202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d208:	60da      	str	r2, [r3, #12]
 800d20a:	e031      	b.n	800d270 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d20c:	2301      	movs	r3, #1
 800d20e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d212:	e02d      	b.n	800d270 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d214:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d216:	2200      	movs	r2, #0
 800d218:	469a      	mov	sl, r3
 800d21a:	4693      	mov	fp, r2
 800d21c:	4650      	mov	r0, sl
 800d21e:	4659      	mov	r1, fp
 800d220:	f7fd f920 	bl	800a464 <HAL_RCCEx_GetPeriphCLKFreq>
 800d224:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800d226:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d021      	beq.n	800d270 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d230:	4a1a      	ldr	r2, [pc, #104]	@ (800d29c <UART_SetConfig+0x358>)
 800d232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d236:	461a      	mov	r2, r3
 800d238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d23a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	085b      	lsrs	r3, r3, #1
 800d244:	441a      	add	r2, r3
 800d246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d24e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d252:	2b0f      	cmp	r3, #15
 800d254:	d909      	bls.n	800d26a <UART_SetConfig+0x326>
 800d256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d25c:	d205      	bcs.n	800d26a <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d25e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d260:	b29a      	uxth	r2, r3
 800d262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	60da      	str	r2, [r3, #12]
 800d268:	e002      	b.n	800d270 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d26a:	2301      	movs	r3, #1
 800d26c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d272:	2201      	movs	r2, #1
 800d274:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d27a:	2201      	movs	r2, #1
 800d27c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d282:	2200      	movs	r2, #0
 800d284:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d288:	2200      	movs	r2, #0
 800d28a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d28c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d290:	4618      	mov	r0, r3
 800d292:	3750      	adds	r7, #80	@ 0x50
 800d294:	46bd      	mov	sp, r7
 800d296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d29a:	bf00      	nop
 800d29c:	0800da60 	.word	0x0800da60

0800d2a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ac:	f003 0308 	and.w	r3, r3, #8
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d00a      	beq.n	800d2ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	430a      	orrs	r2, r1
 800d2c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ce:	f003 0301 	and.w	r3, r3, #1
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00a      	beq.n	800d2ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	430a      	orrs	r2, r1
 800d2ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2f0:	f003 0302 	and.w	r3, r3, #2
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d00a      	beq.n	800d30e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	430a      	orrs	r2, r1
 800d30c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d312:	f003 0304 	and.w	r3, r3, #4
 800d316:	2b00      	cmp	r3, #0
 800d318:	d00a      	beq.n	800d330 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	430a      	orrs	r2, r1
 800d32e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d334:	f003 0310 	and.w	r3, r3, #16
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00a      	beq.n	800d352 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	430a      	orrs	r2, r1
 800d350:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d356:	f003 0320 	and.w	r3, r3, #32
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00a      	beq.n	800d374 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	689b      	ldr	r3, [r3, #8]
 800d364:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	430a      	orrs	r2, r1
 800d372:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d01a      	beq.n	800d3b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	685b      	ldr	r3, [r3, #4]
 800d386:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	430a      	orrs	r2, r1
 800d394:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d39a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d39e:	d10a      	bne.n	800d3b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	430a      	orrs	r2, r1
 800d3b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d00a      	beq.n	800d3d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	430a      	orrs	r2, r1
 800d3d6:	605a      	str	r2, [r3, #4]
  }
}
 800d3d8:	bf00      	nop
 800d3da:	370c      	adds	r7, #12
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b098      	sub	sp, #96	@ 0x60
 800d3e8:	af02      	add	r7, sp, #8
 800d3ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d3f4:	f7f5 fe58 	bl	80030a8 <HAL_GetTick>
 800d3f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f003 0308 	and.w	r3, r3, #8
 800d404:	2b08      	cmp	r3, #8
 800d406:	d12f      	bne.n	800d468 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d408:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d40c:	9300      	str	r3, [sp, #0]
 800d40e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d410:	2200      	movs	r2, #0
 800d412:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f000 f88e 	bl	800d538 <UART_WaitOnFlagUntilTimeout>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d022      	beq.n	800d468 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d42a:	e853 3f00 	ldrex	r3, [r3]
 800d42e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d436:	653b      	str	r3, [r7, #80]	@ 0x50
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	461a      	mov	r2, r3
 800d43e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d440:	647b      	str	r3, [r7, #68]	@ 0x44
 800d442:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d444:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d446:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d448:	e841 2300 	strex	r3, r2, [r1]
 800d44c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d44e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1e6      	bne.n	800d422 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2220      	movs	r2, #32
 800d458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2200      	movs	r2, #0
 800d460:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d464:	2303      	movs	r3, #3
 800d466:	e063      	b.n	800d530 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f003 0304 	and.w	r3, r3, #4
 800d472:	2b04      	cmp	r3, #4
 800d474:	d149      	bne.n	800d50a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d476:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d47a:	9300      	str	r3, [sp, #0]
 800d47c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d47e:	2200      	movs	r2, #0
 800d480:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 f857 	bl	800d538 <UART_WaitOnFlagUntilTimeout>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d03c      	beq.n	800d50a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d498:	e853 3f00 	ldrex	r3, [r3]
 800d49c:	623b      	str	r3, [r7, #32]
   return(result);
 800d49e:	6a3b      	ldr	r3, [r7, #32]
 800d4a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d4a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4b6:	e841 2300 	strex	r3, r2, [r1]
 800d4ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d1e6      	bne.n	800d490 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	3308      	adds	r3, #8
 800d4c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	e853 3f00 	ldrex	r3, [r3]
 800d4d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f023 0301 	bic.w	r3, r3, #1
 800d4d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	3308      	adds	r3, #8
 800d4e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d4e2:	61fa      	str	r2, [r7, #28]
 800d4e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e6:	69b9      	ldr	r1, [r7, #24]
 800d4e8:	69fa      	ldr	r2, [r7, #28]
 800d4ea:	e841 2300 	strex	r3, r2, [r1]
 800d4ee:	617b      	str	r3, [r7, #20]
   return(result);
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d1e5      	bne.n	800d4c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2220      	movs	r2, #32
 800d4fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2200      	movs	r2, #0
 800d502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d506:	2303      	movs	r3, #3
 800d508:	e012      	b.n	800d530 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2220      	movs	r2, #32
 800d50e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2220      	movs	r2, #32
 800d516:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2200      	movs	r2, #0
 800d51e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2200      	movs	r2, #0
 800d524:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2200      	movs	r2, #0
 800d52a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3758      	adds	r7, #88	@ 0x58
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	603b      	str	r3, [r7, #0]
 800d544:	4613      	mov	r3, r2
 800d546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d548:	e049      	b.n	800d5de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d54a:	69bb      	ldr	r3, [r7, #24]
 800d54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d550:	d045      	beq.n	800d5de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d552:	f7f5 fda9 	bl	80030a8 <HAL_GetTick>
 800d556:	4602      	mov	r2, r0
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	1ad3      	subs	r3, r2, r3
 800d55c:	69ba      	ldr	r2, [r7, #24]
 800d55e:	429a      	cmp	r2, r3
 800d560:	d302      	bcc.n	800d568 <UART_WaitOnFlagUntilTimeout+0x30>
 800d562:	69bb      	ldr	r3, [r7, #24]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d101      	bne.n	800d56c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d568:	2303      	movs	r3, #3
 800d56a:	e048      	b.n	800d5fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f003 0304 	and.w	r3, r3, #4
 800d576:	2b00      	cmp	r3, #0
 800d578:	d031      	beq.n	800d5de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	69db      	ldr	r3, [r3, #28]
 800d580:	f003 0308 	and.w	r3, r3, #8
 800d584:	2b08      	cmp	r3, #8
 800d586:	d110      	bne.n	800d5aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	2208      	movs	r2, #8
 800d58e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d590:	68f8      	ldr	r0, [r7, #12]
 800d592:	f000 f838 	bl	800d606 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2208      	movs	r2, #8
 800d59a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	e029      	b.n	800d5fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	69db      	ldr	r3, [r3, #28]
 800d5b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d5b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d5b8:	d111      	bne.n	800d5de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d5c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f000 f81e 	bl	800d606 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2220      	movs	r2, #32
 800d5ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d5da:	2303      	movs	r3, #3
 800d5dc:	e00f      	b.n	800d5fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	69da      	ldr	r2, [r3, #28]
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	4013      	ands	r3, r2
 800d5e8:	68ba      	ldr	r2, [r7, #8]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	bf0c      	ite	eq
 800d5ee:	2301      	moveq	r3, #1
 800d5f0:	2300      	movne	r3, #0
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	79fb      	ldrb	r3, [r7, #7]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d0a6      	beq.n	800d54a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d5fc:	2300      	movs	r3, #0
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3710      	adds	r7, #16
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}

0800d606 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d606:	b480      	push	{r7}
 800d608:	b095      	sub	sp, #84	@ 0x54
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d616:	e853 3f00 	ldrex	r3, [r3]
 800d61a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d61e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	461a      	mov	r2, r3
 800d62a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d62c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d62e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d630:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d632:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d634:	e841 2300 	strex	r3, r2, [r1]
 800d638:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d1e6      	bne.n	800d60e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	3308      	adds	r3, #8
 800d646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d648:	6a3b      	ldr	r3, [r7, #32]
 800d64a:	e853 3f00 	ldrex	r3, [r3]
 800d64e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d656:	f023 0301 	bic.w	r3, r3, #1
 800d65a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	3308      	adds	r3, #8
 800d662:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d664:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d666:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d668:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d66a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d66c:	e841 2300 	strex	r3, r2, [r1]
 800d670:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d674:	2b00      	cmp	r3, #0
 800d676:	d1e3      	bne.n	800d640 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	d118      	bne.n	800d6b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	e853 3f00 	ldrex	r3, [r3]
 800d68c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	f023 0310 	bic.w	r3, r3, #16
 800d694:	647b      	str	r3, [r7, #68]	@ 0x44
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	461a      	mov	r2, r3
 800d69c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d69e:	61bb      	str	r3, [r7, #24]
 800d6a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a2:	6979      	ldr	r1, [r7, #20]
 800d6a4:	69ba      	ldr	r2, [r7, #24]
 800d6a6:	e841 2300 	strex	r3, r2, [r1]
 800d6aa:	613b      	str	r3, [r7, #16]
   return(result);
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1e6      	bne.n	800d680 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2220      	movs	r2, #32
 800d6b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d6c6:	bf00      	nop
 800d6c8:	3754      	adds	r7, #84	@ 0x54
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr

0800d6d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d6d2:	b480      	push	{r7}
 800d6d4:	b085      	sub	sp, #20
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	d101      	bne.n	800d6e8 <HAL_UARTEx_DisableFifoMode+0x16>
 800d6e4:	2302      	movs	r3, #2
 800d6e6:	e027      	b.n	800d738 <HAL_UARTEx_DisableFifoMode+0x66>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2224      	movs	r2, #36	@ 0x24
 800d6f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f022 0201 	bic.w	r2, r2, #1
 800d70e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d716:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2200      	movs	r2, #0
 800d71c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	68fa      	ldr	r2, [r7, #12]
 800d724:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2220      	movs	r2, #32
 800d72a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2200      	movs	r2, #0
 800d732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d736:	2300      	movs	r3, #0
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3714      	adds	r7, #20
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr

0800d744 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d754:	2b01      	cmp	r3, #1
 800d756:	d101      	bne.n	800d75c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d758:	2302      	movs	r3, #2
 800d75a:	e02d      	b.n	800d7b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2201      	movs	r2, #1
 800d760:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2224      	movs	r2, #36	@ 0x24
 800d768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f022 0201 	bic.w	r2, r2, #1
 800d782:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	689b      	ldr	r3, [r3, #8]
 800d78a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	683a      	ldr	r2, [r7, #0]
 800d794:	430a      	orrs	r2, r1
 800d796:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f000 f84f 	bl	800d83c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	68fa      	ldr	r2, [r7, #12]
 800d7a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2220      	movs	r2, #32
 800d7aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d7b6:	2300      	movs	r3, #0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3710      	adds	r7, #16
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b084      	sub	sp, #16
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d101      	bne.n	800d7d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d7d4:	2302      	movs	r3, #2
 800d7d6:	e02d      	b.n	800d834 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2201      	movs	r2, #1
 800d7dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2224      	movs	r2, #36	@ 0x24
 800d7e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f022 0201 	bic.w	r2, r2, #1
 800d7fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	689b      	ldr	r3, [r3, #8]
 800d806:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	683a      	ldr	r2, [r7, #0]
 800d810:	430a      	orrs	r2, r1
 800d812:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 f811 	bl	800d83c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	68fa      	ldr	r2, [r7, #12]
 800d820:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2220      	movs	r2, #32
 800d826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d832:	2300      	movs	r3, #0
}
 800d834:	4618      	mov	r0, r3
 800d836:	3710      	adds	r7, #16
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d83c:	b480      	push	{r7}
 800d83e:	b085      	sub	sp, #20
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d108      	bne.n	800d85e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2201      	movs	r2, #1
 800d850:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2201      	movs	r2, #1
 800d858:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d85c:	e031      	b.n	800d8c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d85e:	2308      	movs	r3, #8
 800d860:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d862:	2308      	movs	r3, #8
 800d864:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	689b      	ldr	r3, [r3, #8]
 800d86c:	0e5b      	lsrs	r3, r3, #25
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	f003 0307 	and.w	r3, r3, #7
 800d874:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	0f5b      	lsrs	r3, r3, #29
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	f003 0307 	and.w	r3, r3, #7
 800d884:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d886:	7bbb      	ldrb	r3, [r7, #14]
 800d888:	7b3a      	ldrb	r2, [r7, #12]
 800d88a:	4911      	ldr	r1, [pc, #68]	@ (800d8d0 <UARTEx_SetNbDataToProcess+0x94>)
 800d88c:	5c8a      	ldrb	r2, [r1, r2]
 800d88e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d892:	7b3a      	ldrb	r2, [r7, #12]
 800d894:	490f      	ldr	r1, [pc, #60]	@ (800d8d4 <UARTEx_SetNbDataToProcess+0x98>)
 800d896:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d898:	fb93 f3f2 	sdiv	r3, r3, r2
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d8a4:	7bfb      	ldrb	r3, [r7, #15]
 800d8a6:	7b7a      	ldrb	r2, [r7, #13]
 800d8a8:	4909      	ldr	r1, [pc, #36]	@ (800d8d0 <UARTEx_SetNbDataToProcess+0x94>)
 800d8aa:	5c8a      	ldrb	r2, [r1, r2]
 800d8ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d8b0:	7b7a      	ldrb	r2, [r7, #13]
 800d8b2:	4908      	ldr	r1, [pc, #32]	@ (800d8d4 <UARTEx_SetNbDataToProcess+0x98>)
 800d8b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d8b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d8ba:	b29a      	uxth	r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d8c2:	bf00      	nop
 800d8c4:	3714      	adds	r7, #20
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8cc:	4770      	bx	lr
 800d8ce:	bf00      	nop
 800d8d0:	0800da78 	.word	0x0800da78
 800d8d4:	0800da80 	.word	0x0800da80

0800d8d8 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b083      	sub	sp, #12
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f043 0202 	orr.w	r2, r3, #2
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	685a      	ldr	r2, [r3, #4]
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	021b      	lsls	r3, r3, #8
 800d8f8:	431a      	orrs	r2, r3
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f023 0202 	bic.w	r2, r3, #2
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	601a      	str	r2, [r3, #0]
}
 800d90a:	bf00      	nop
 800d90c:	370c      	adds	r7, #12
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr

0800d916 <memset>:
 800d916:	4402      	add	r2, r0
 800d918:	4603      	mov	r3, r0
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d100      	bne.n	800d920 <memset+0xa>
 800d91e:	4770      	bx	lr
 800d920:	f803 1b01 	strb.w	r1, [r3], #1
 800d924:	e7f9      	b.n	800d91a <memset+0x4>
	...

0800d928 <__libc_init_array>:
 800d928:	b570      	push	{r4, r5, r6, lr}
 800d92a:	4d0d      	ldr	r5, [pc, #52]	@ (800d960 <__libc_init_array+0x38>)
 800d92c:	2600      	movs	r6, #0
 800d92e:	4c0d      	ldr	r4, [pc, #52]	@ (800d964 <__libc_init_array+0x3c>)
 800d930:	1b64      	subs	r4, r4, r5
 800d932:	10a4      	asrs	r4, r4, #2
 800d934:	42a6      	cmp	r6, r4
 800d936:	d109      	bne.n	800d94c <__libc_init_array+0x24>
 800d938:	4d0b      	ldr	r5, [pc, #44]	@ (800d968 <__libc_init_array+0x40>)
 800d93a:	2600      	movs	r6, #0
 800d93c:	4c0b      	ldr	r4, [pc, #44]	@ (800d96c <__libc_init_array+0x44>)
 800d93e:	f000 f817 	bl	800d970 <_init>
 800d942:	1b64      	subs	r4, r4, r5
 800d944:	10a4      	asrs	r4, r4, #2
 800d946:	42a6      	cmp	r6, r4
 800d948:	d105      	bne.n	800d956 <__libc_init_array+0x2e>
 800d94a:	bd70      	pop	{r4, r5, r6, pc}
 800d94c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d950:	3601      	adds	r6, #1
 800d952:	4798      	blx	r3
 800d954:	e7ee      	b.n	800d934 <__libc_init_array+0xc>
 800d956:	f855 3b04 	ldr.w	r3, [r5], #4
 800d95a:	3601      	adds	r6, #1
 800d95c:	4798      	blx	r3
 800d95e:	e7f2      	b.n	800d946 <__libc_init_array+0x1e>
 800d960:	0800da90 	.word	0x0800da90
 800d964:	0800da90 	.word	0x0800da90
 800d968:	0800da90 	.word	0x0800da90
 800d96c:	0800da94 	.word	0x0800da94

0800d970 <_init>:
 800d970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d972:	bf00      	nop
 800d974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d976:	bc08      	pop	{r3}
 800d978:	469e      	mov	lr, r3
 800d97a:	4770      	bx	lr

0800d97c <_fini>:
 800d97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d97e:	bf00      	nop
 800d980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d982:	bc08      	pop	{r3}
 800d984:	469e      	mov	lr, r3
 800d986:	4770      	bx	lr
