
M24256X_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5f0  0800026c  0800026c  0001026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800d85c  0800d85c  0001d85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d95c  0800d95c  0001d95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d964  0800d964  0001d964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d968  0800d968  0001d968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000d09  20000000  0800d96c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007d8  20000d0c  0800e675  00020d0c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200014e4  0800e675  000214e4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020d09  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020d3f  2**0
                  CONTENTS, READONLY
 11 .debug_info   000309b1  00000000  00000000  00020d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000520a  00000000  00000000  00051733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002800  00000000  00000000  00056940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001f2b  00000000  00000000  00059140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00044e90  00000000  00000000  0005b06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003598c  00000000  00000000  0009fefb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a1ae3  00000000  00000000  000d5887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000ae84  00000000  00000000  0027736c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008d  00000000  00000000  002821f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800026c <__do_global_dtors_aux>:
 800026c:	b510      	push	{r4, lr}
 800026e:	4c05      	ldr	r4, [pc, #20]	; (8000284 <__do_global_dtors_aux+0x18>)
 8000270:	7823      	ldrb	r3, [r4, #0]
 8000272:	b933      	cbnz	r3, 8000282 <__do_global_dtors_aux+0x16>
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <__do_global_dtors_aux+0x1c>)
 8000276:	b113      	cbz	r3, 800027e <__do_global_dtors_aux+0x12>
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <__do_global_dtors_aux+0x20>)
 800027a:	f3af 8000 	nop.w
 800027e:	2301      	movs	r3, #1
 8000280:	7023      	strb	r3, [r4, #0]
 8000282:	bd10      	pop	{r4, pc}
 8000284:	20000d0c 	.word	0x20000d0c
 8000288:	00000000 	.word	0x00000000
 800028c:	0800d844 	.word	0x0800d844

08000290 <frame_dummy>:
 8000290:	b508      	push	{r3, lr}
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <frame_dummy+0x10>)
 8000294:	b11b      	cbz	r3, 800029e <frame_dummy+0xe>
 8000296:	4903      	ldr	r1, [pc, #12]	; (80002a4 <frame_dummy+0x14>)
 8000298:	4803      	ldr	r0, [pc, #12]	; (80002a8 <frame_dummy+0x18>)
 800029a:	f3af 8000 	nop.w
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	00000000 	.word	0x00000000
 80002a4:	20000d10 	.word	0x20000d10
 80002a8:	0800d844 	.word	0x0800d844

080002ac <__aeabi_uldivmod>:
 80002ac:	b953      	cbnz	r3, 80002c4 <__aeabi_uldivmod+0x18>
 80002ae:	b94a      	cbnz	r2, 80002c4 <__aeabi_uldivmod+0x18>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	bf08      	it	eq
 80002b4:	2800      	cmpeq	r0, #0
 80002b6:	bf1c      	itt	ne
 80002b8:	f04f 31ff 	movne.w	r1, #4294967295
 80002bc:	f04f 30ff 	movne.w	r0, #4294967295
 80002c0:	f000 b982 	b.w	80005c8 <__aeabi_idiv0>
 80002c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002cc:	f000 f806 	bl	80002dc <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4770      	bx	lr

080002dc <__udivmoddi4>:
 80002dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002e2:	460d      	mov	r5, r1
 80002e4:	4604      	mov	r4, r0
 80002e6:	460f      	mov	r7, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d146      	bne.n	800037a <__udivmoddi4+0x9e>
 80002ec:	428a      	cmp	r2, r1
 80002ee:	4694      	mov	ip, r2
 80002f0:	d95e      	bls.n	80003b0 <__udivmoddi4+0xd4>
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	b143      	cbz	r3, 800030a <__udivmoddi4+0x2e>
 80002f8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002fc:	f1c3 0220 	rsb	r2, r3, #32
 8000300:	409f      	lsls	r7, r3
 8000302:	409c      	lsls	r4, r3
 8000304:	fa20 f202 	lsr.w	r2, r0, r2
 8000308:	4317      	orrs	r7, r2
 800030a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800030e:	fa1f f58c 	uxth.w	r5, ip
 8000312:	0c22      	lsrs	r2, r4, #16
 8000314:	fbb7 f1fe 	udiv	r1, r7, lr
 8000318:	fb0e 7711 	mls	r7, lr, r1, r7
 800031c:	fb01 f005 	mul.w	r0, r1, r5
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	4290      	cmp	r0, r2
 8000326:	d908      	bls.n	800033a <__udivmoddi4+0x5e>
 8000328:	eb1c 0202 	adds.w	r2, ip, r2
 800032c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x5c>
 8000332:	4290      	cmp	r0, r2
 8000334:	f200 8134 	bhi.w	80005a0 <__udivmoddi4+0x2c4>
 8000338:	4639      	mov	r1, r7
 800033a:	1a12      	subs	r2, r2, r0
 800033c:	b2a4      	uxth	r4, r4
 800033e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000342:	fb0e 2210 	mls	r2, lr, r0, r2
 8000346:	fb00 f505 	mul.w	r5, r0, r5
 800034a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034e:	42a5      	cmp	r5, r4
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x88>
 8000352:	eb1c 0404 	adds.w	r4, ip, r4
 8000356:	f100 32ff 	add.w	r2, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x86>
 800035c:	42a5      	cmp	r5, r4
 800035e:	f200 8119 	bhi.w	8000594 <__udivmoddi4+0x2b8>
 8000362:	4610      	mov	r0, r2
 8000364:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	2100      	movs	r1, #0
 800036c:	b11e      	cbz	r6, 8000376 <__udivmoddi4+0x9a>
 800036e:	40dc      	lsrs	r4, r3
 8000370:	2300      	movs	r3, #0
 8000372:	e9c6 4300 	strd	r4, r3, [r6]
 8000376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0xb4>
 800037e:	2e00      	cmp	r6, #0
 8000380:	f000 80fc 	beq.w	800057c <__udivmoddi4+0x2a0>
 8000384:	2100      	movs	r1, #0
 8000386:	e9c6 0500 	strd	r0, r5, [r6]
 800038a:	4608      	mov	r0, r1
 800038c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000390:	fab3 f183 	clz	r1, r3
 8000394:	2900      	cmp	r1, #0
 8000396:	d14c      	bne.n	8000432 <__udivmoddi4+0x156>
 8000398:	42ab      	cmp	r3, r5
 800039a:	f0c0 80f2 	bcc.w	8000582 <__udivmoddi4+0x2a6>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f240 80ef 	bls.w	8000582 <__udivmoddi4+0x2a6>
 80003a4:	4608      	mov	r0, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d0e5      	beq.n	8000376 <__udivmoddi4+0x9a>
 80003aa:	e9c6 4700 	strd	r4, r7, [r6]
 80003ae:	e7e2      	b.n	8000376 <__udivmoddi4+0x9a>
 80003b0:	b902      	cbnz	r2, 80003b4 <__udivmoddi4+0xd8>
 80003b2:	deff      	udf	#255	; 0xff
 80003b4:	fab2 f382 	clz	r3, r2
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	f040 809f 	bne.w	80004fc <__udivmoddi4+0x220>
 80003be:	1a8a      	subs	r2, r1, r2
 80003c0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c4:	fa1f f78c 	uxth.w	r7, ip
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ce:	fb0e 2015 	mls	r0, lr, r5, r2
 80003d2:	0c22      	lsrs	r2, r4, #16
 80003d4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003d8:	fb07 f005 	mul.w	r0, r7, r5
 80003dc:	4290      	cmp	r0, r2
 80003de:	d90f      	bls.n	8000400 <__udivmoddi4+0x124>
 80003e0:	eb1c 0202 	adds.w	r2, ip, r2
 80003e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003e8:	bf2c      	ite	cs
 80003ea:	f04f 0901 	movcs.w	r9, #1
 80003ee:	f04f 0900 	movcc.w	r9, #0
 80003f2:	4290      	cmp	r0, r2
 80003f4:	d903      	bls.n	80003fe <__udivmoddi4+0x122>
 80003f6:	f1b9 0f00 	cmp.w	r9, #0
 80003fa:	f000 80ce 	beq.w	800059a <__udivmoddi4+0x2be>
 80003fe:	4645      	mov	r5, r8
 8000400:	1a12      	subs	r2, r2, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb2 f0fe 	udiv	r0, r2, lr
 8000408:	fb0e 2210 	mls	r2, lr, r0, r2
 800040c:	fb00 f707 	mul.w	r7, r0, r7
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	42a7      	cmp	r7, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x14e>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x14c>
 8000422:	42a7      	cmp	r7, r4
 8000424:	f200 80b3 	bhi.w	800058e <__udivmoddi4+0x2b2>
 8000428:	4610      	mov	r0, r2
 800042a:	1be4      	subs	r4, r4, r7
 800042c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000430:	e79c      	b.n	800036c <__udivmoddi4+0x90>
 8000432:	f1c1 0420 	rsb	r4, r1, #32
 8000436:	408b      	lsls	r3, r1
 8000438:	fa05 fc01 	lsl.w	ip, r5, r1
 800043c:	fa22 f704 	lsr.w	r7, r2, r4
 8000440:	40e5      	lsrs	r5, r4
 8000442:	408a      	lsls	r2, r1
 8000444:	431f      	orrs	r7, r3
 8000446:	fa20 f304 	lsr.w	r3, r0, r4
 800044a:	4088      	lsls	r0, r1
 800044c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000450:	ea43 030c 	orr.w	r3, r3, ip
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800045c:	fbb5 fef8 	udiv	lr, r5, r8
 8000460:	fb08 551e 	mls	r5, r8, lr, r5
 8000464:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000468:	fb0e f90c 	mul.w	r9, lr, ip
 800046c:	45a9      	cmp	r9, r5
 800046e:	d90e      	bls.n	800048e <__udivmoddi4+0x1b2>
 8000470:	197d      	adds	r5, r7, r5
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	bf2c      	ite	cs
 8000478:	f04f 0b01 	movcs.w	fp, #1
 800047c:	f04f 0b00 	movcc.w	fp, #0
 8000480:	45a9      	cmp	r9, r5
 8000482:	d903      	bls.n	800048c <__udivmoddi4+0x1b0>
 8000484:	f1bb 0f00 	cmp.w	fp, #0
 8000488:	f000 808d 	beq.w	80005a6 <__udivmoddi4+0x2ca>
 800048c:	46d6      	mov	lr, sl
 800048e:	eba5 0509 	sub.w	r5, r5, r9
 8000492:	fa1f f983 	uxth.w	r9, r3
 8000496:	fbb5 f3f8 	udiv	r3, r5, r8
 800049a:	fb08 5513 	mls	r5, r8, r3, r5
 800049e:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a2:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80004a6:	45ac      	cmp	ip, r5
 80004a8:	d906      	bls.n	80004b8 <__udivmoddi4+0x1dc>
 80004aa:	197d      	adds	r5, r7, r5
 80004ac:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x1da>
 80004b2:	45ac      	cmp	ip, r5
 80004b4:	d87e      	bhi.n	80005b4 <__udivmoddi4+0x2d8>
 80004b6:	4643      	mov	r3, r8
 80004b8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004bc:	eba5 050c 	sub.w	r5, r5, ip
 80004c0:	fba3 9802 	umull	r9, r8, r3, r2
 80004c4:	4545      	cmp	r5, r8
 80004c6:	46ce      	mov	lr, r9
 80004c8:	46c4      	mov	ip, r8
 80004ca:	d302      	bcc.n	80004d2 <__udivmoddi4+0x1f6>
 80004cc:	d106      	bne.n	80004dc <__udivmoddi4+0x200>
 80004ce:	4548      	cmp	r0, r9
 80004d0:	d204      	bcs.n	80004dc <__udivmoddi4+0x200>
 80004d2:	3b01      	subs	r3, #1
 80004d4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004dc:	2e00      	cmp	r6, #0
 80004de:	d06f      	beq.n	80005c0 <__udivmoddi4+0x2e4>
 80004e0:	ebb0 020e 	subs.w	r2, r0, lr
 80004e4:	eb65 050c 	sbc.w	r5, r5, ip
 80004e8:	40ca      	lsrs	r2, r1
 80004ea:	fa05 f404 	lsl.w	r4, r5, r4
 80004ee:	40cd      	lsrs	r5, r1
 80004f0:	4618      	mov	r0, r3
 80004f2:	4314      	orrs	r4, r2
 80004f4:	2100      	movs	r1, #0
 80004f6:	e9c6 4500 	strd	r4, r5, [r6]
 80004fa:	e73c      	b.n	8000376 <__udivmoddi4+0x9a>
 80004fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000500:	f1c3 0220 	rsb	r2, r3, #32
 8000504:	4099      	lsls	r1, r3
 8000506:	409c      	lsls	r4, r3
 8000508:	40d5      	lsrs	r5, r2
 800050a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800050e:	fa20 f202 	lsr.w	r2, r0, r2
 8000512:	fa1f f78c 	uxth.w	r7, ip
 8000516:	fbb5 f0fe 	udiv	r0, r5, lr
 800051a:	430a      	orrs	r2, r1
 800051c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000520:	0c11      	lsrs	r1, r2, #16
 8000522:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000526:	fb00 f507 	mul.w	r5, r0, r7
 800052a:	428d      	cmp	r5, r1
 800052c:	d90e      	bls.n	800054c <__udivmoddi4+0x270>
 800052e:	eb1c 0101 	adds.w	r1, ip, r1
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	bf2c      	ite	cs
 8000538:	f04f 0901 	movcs.w	r9, #1
 800053c:	f04f 0900 	movcc.w	r9, #0
 8000540:	428d      	cmp	r5, r1
 8000542:	d902      	bls.n	800054a <__udivmoddi4+0x26e>
 8000544:	f1b9 0f00 	cmp.w	r9, #0
 8000548:	d031      	beq.n	80005ae <__udivmoddi4+0x2d2>
 800054a:	4640      	mov	r0, r8
 800054c:	1b49      	subs	r1, r1, r5
 800054e:	b292      	uxth	r2, r2
 8000550:	fbb1 f5fe 	udiv	r5, r1, lr
 8000554:	fb0e 1115 	mls	r1, lr, r5, r1
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	fb05 f107 	mul.w	r1, r5, r7
 8000560:	4291      	cmp	r1, r2
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x298>
 8000564:	eb1c 0202 	adds.w	r2, ip, r2
 8000568:	f105 38ff 	add.w	r8, r5, #4294967295
 800056c:	d201      	bcs.n	8000572 <__udivmoddi4+0x296>
 800056e:	4291      	cmp	r1, r2
 8000570:	d823      	bhi.n	80005ba <__udivmoddi4+0x2de>
 8000572:	4645      	mov	r5, r8
 8000574:	1a52      	subs	r2, r2, r1
 8000576:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800057a:	e726      	b.n	80003ca <__udivmoddi4+0xee>
 800057c:	4631      	mov	r1, r6
 800057e:	4630      	mov	r0, r6
 8000580:	e6f9      	b.n	8000376 <__udivmoddi4+0x9a>
 8000582:	1a84      	subs	r4, r0, r2
 8000584:	eb65 0203 	sbc.w	r2, r5, r3
 8000588:	2001      	movs	r0, #1
 800058a:	4617      	mov	r7, r2
 800058c:	e70b      	b.n	80003a6 <__udivmoddi4+0xca>
 800058e:	4464      	add	r4, ip
 8000590:	3802      	subs	r0, #2
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14e>
 8000594:	4464      	add	r4, ip
 8000596:	3802      	subs	r0, #2
 8000598:	e6e4      	b.n	8000364 <__udivmoddi4+0x88>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e72f      	b.n	8000400 <__udivmoddi4+0x124>
 80005a0:	3902      	subs	r1, #2
 80005a2:	4462      	add	r2, ip
 80005a4:	e6c9      	b.n	800033a <__udivmoddi4+0x5e>
 80005a6:	f1ae 0e02 	sub.w	lr, lr, #2
 80005aa:	443d      	add	r5, r7
 80005ac:	e76f      	b.n	800048e <__udivmoddi4+0x1b2>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	e7cb      	b.n	800054c <__udivmoddi4+0x270>
 80005b4:	3b02      	subs	r3, #2
 80005b6:	443d      	add	r5, r7
 80005b8:	e77e      	b.n	80004b8 <__udivmoddi4+0x1dc>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	e7d9      	b.n	8000574 <__udivmoddi4+0x298>
 80005c0:	4618      	mov	r0, r3
 80005c2:	4631      	mov	r1, r6
 80005c4:	e6d7      	b.n	8000376 <__udivmoddi4+0x9a>
 80005c6:	bf00      	nop

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <M24256X_Init>:
 *      Author: bens1
 */

#include "M24256X.h"

M24256X_StatusTypeDef M24256X_Init(M24256X_HandleTypeDef *dev, I2C_HandleTypeDef *i2cHandle){
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]

	M24256X_StatusTypeDef status = M24256X_OK;
 80005d6:	2300      	movs	r3, #0
 80005d8:	73fb      	strb	r3, [r7, #15]

	dev->i2cHandle = i2cHandle;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	601a      	str	r2, [r3, #0]

	return status;
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <M24256X_ReadMemoryByte>:

M24256X_StatusTypeDef M24256X_ReadMemoryByte(M24256X_HandleTypeDef *dev, uint8_t *data, uint16_t address){
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b08a      	sub	sp, #40	; 0x28
 80005f2:	af04      	add	r7, sp, #16
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	4613      	mov	r3, r2
 80005fa:	80fb      	strh	r3, [r7, #6]

	M24256X_StatusTypeDef status = M24256X_OK;
 80005fc:	2300      	movs	r3, #0
 80005fe:	75fb      	strb	r3, [r7, #23]
	uint8_t attempts_remaining = M24256X_MAX_ATTEMPTS;
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	75bb      	strb	r3, [r7, #22]

	while (attempts_remaining > 0){
 8000604:	e01b      	b.n	800063e <M24256X_ReadMemoryByte+0x50>
		status = HAL_I2C_Mem_Read(dev->i2cHandle, M24256X_MEM_DEV_ADDR, (address & 0x7FFF), I2C_MEMADD_SIZE_16BIT, data, 1, HAL_MAX_DELAY);
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6818      	ldr	r0, [r3, #0]
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000610:	b29a      	uxth	r2, r3
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	9302      	str	r3, [sp, #8]
 8000618:	2301      	movs	r3, #1
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2302      	movs	r3, #2
 8000622:	21a0      	movs	r1, #160	; 0xa0
 8000624:	f004 fd72 	bl	800510c <HAL_I2C_Mem_Read>
 8000628:	4603      	mov	r3, r0
 800062a:	75fb      	strb	r3, [r7, #23]

		if (status == M24256X_OK){
 800062c:	7dfb      	ldrb	r3, [r7, #23]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d102      	bne.n	8000638 <M24256X_ReadMemoryByte+0x4a>
			attempts_remaining = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	75bb      	strb	r3, [r7, #22]
 8000636:	e002      	b.n	800063e <M24256X_ReadMemoryByte+0x50>
		}
		else{
			attempts_remaining--;
 8000638:	7dbb      	ldrb	r3, [r7, #22]
 800063a:	3b01      	subs	r3, #1
 800063c:	75bb      	strb	r3, [r7, #22]
	while (attempts_remaining > 0){
 800063e:	7dbb      	ldrb	r3, [r7, #22]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1e0      	bne.n	8000606 <M24256X_ReadMemoryByte+0x18>
		}
	}

	return status;
 8000644:	7dfb      	ldrb	r3, [r7, #23]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3718      	adds	r7, #24
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <M24256X_WriteMemoryByte>:

M24256X_StatusTypeDef M24256X_WriteMemoryByte(M24256X_HandleTypeDef *dev, uint8_t *data, uint16_t address){
 800064e:	b580      	push	{r7, lr}
 8000650:	b08a      	sub	sp, #40	; 0x28
 8000652:	af04      	add	r7, sp, #16
 8000654:	60f8      	str	r0, [r7, #12]
 8000656:	60b9      	str	r1, [r7, #8]
 8000658:	4613      	mov	r3, r2
 800065a:	80fb      	strh	r3, [r7, #6]

	M24256X_StatusTypeDef status = M24256X_OK;
 800065c:	2300      	movs	r3, #0
 800065e:	75fb      	strb	r3, [r7, #23]
	uint8_t attempts_remaining = M24256X_MAX_ATTEMPTS;
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	75bb      	strb	r3, [r7, #22]

	while (attempts_remaining > 0){
 8000664:	e01b      	b.n	800069e <M24256X_WriteMemoryByte+0x50>
		status = HAL_I2C_Mem_Write(dev->i2cHandle, M24256X_MEM_DEV_ADDR, (address & 0x7FFF), I2C_MEMADD_SIZE_16BIT, data, 1, HAL_MAX_DELAY);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6818      	ldr	r0, [r3, #0]
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000670:	b29a      	uxth	r2, r3
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	9302      	str	r3, [sp, #8]
 8000678:	2301      	movs	r3, #1
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2302      	movs	r3, #2
 8000682:	21a0      	movs	r1, #160	; 0xa0
 8000684:	f004 fc2e 	bl	8004ee4 <HAL_I2C_Mem_Write>
 8000688:	4603      	mov	r3, r0
 800068a:	75fb      	strb	r3, [r7, #23]

		if (status == M24256X_OK){
 800068c:	7dfb      	ldrb	r3, [r7, #23]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d102      	bne.n	8000698 <M24256X_WriteMemoryByte+0x4a>
			attempts_remaining = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	75bb      	strb	r3, [r7, #22]
 8000696:	e002      	b.n	800069e <M24256X_WriteMemoryByte+0x50>
		}
		else{
			attempts_remaining--;
 8000698:	7dbb      	ldrb	r3, [r7, #22]
 800069a:	3b01      	subs	r3, #1
 800069c:	75bb      	strb	r3, [r7, #22]
	while (attempts_remaining > 0){
 800069e:	7dbb      	ldrb	r3, [r7, #22]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1e0      	bne.n	8000666 <M24256X_WriteMemoryByte+0x18>
		}
	}

	return status;
 80006a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f002 fc21 	bl	8002efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f867 	bl	800078c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80006be:	f000 f8cf 	bl	8000860 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f000 ffd1 	bl	8001668 <MX_GPIO_Init>
  MX_DCACHE1_Init();
 80006c6:	f000 f949 	bl	800095c <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 80006ca:	f000 f95d 	bl	8000988 <MX_DCACHE2_Init>
  MX_ICACHE_Init();
 80006ce:	f000 fc0f 	bl	8000ef0 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80006d2:	f000 fc3f 	bl	8000f54 <MX_LPUART1_UART_Init>
  MX_OCTOSPI1_Init();
 80006d6:	f000 fda5 	bl	8001224 <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 80006da:	f000 f91d 	bl	8000918 <MX_CRC_Init>
  MX_DMA2D_Init();
 80006de:	f000 f969 	bl	80009b4 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80006e2:	f000 f9a5 	bl	8000a30 <MX_DSIHOST_DSI_Init>
  MX_GFXMMU_Init();
 80006e6:	f000 fa9f 	bl	8000c28 <MX_GFXMMU_Init>
  MX_GPU2D_Init();
 80006ea:	f000 faed 	bl	8000cc8 <MX_GPU2D_Init>
  MX_LTDC_Init();
 80006ee:	f000 fd15 	bl	800111c <MX_LTDC_Init>
  MX_RTC_Init();
 80006f2:	f000 fec9 	bl	8001488 <MX_RTC_Init>
  MX_OCTOSPI2_Init();
 80006f6:	f000 fe2f 	bl	8001358 <MX_OCTOSPI2_Init>
  MX_ADF1_Init();
 80006fa:	f000 f8bf 	bl	800087c <MX_ADF1_Init>
  MX_I2C1_Init();
 80006fe:	f000 faf7 	bl	8000cf0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000702:	f000 fb35 	bl	8000d70 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000706:	f000 fb73 	bl	8000df0 <MX_I2C4_Init>
  MX_I2C6_Init();
 800070a:	f000 fbb1 	bl	8000e70 <MX_I2C6_Init>
  MX_USART1_UART_Init();
 800070e:	f000 fc6d 	bl	8000fec <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000712:	f000 fcb7 	bl	8001084 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8000716:	f000 ff39 	bl	800158c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  M24256X_Init(&hm24256x, &hi2c4);
 800071a:	4919      	ldr	r1, [pc, #100]	; (8000780 <main+0xd0>)
 800071c:	4819      	ldr	r0, [pc, #100]	; (8000784 <main+0xd4>)
 800071e:	f7ff ff55 	bl	80005cc <M24256X_Init>
  uint8_t testWrite = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	71fb      	strb	r3, [r7, #7]
  uint8_t testRead	= 0;
 8000726:	2300      	movs	r3, #0
 8000728:	71bb      	strb	r3, [r7, #6]
  uint8_t status = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	717b      	strb	r3, [r7, #5]

  status = M24256X_WriteMemoryByte(&hm24256x, &testWrite, 0x0800);
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000734:	4619      	mov	r1, r3
 8000736:	4813      	ldr	r0, [pc, #76]	; (8000784 <main+0xd4>)
 8000738:	f7ff ff89 	bl	800064e <M24256X_WriteMemoryByte>
 800073c:	4603      	mov	r3, r0
 800073e:	717b      	strb	r3, [r7, #5]
  HAL_UART_Transmit(&huart6, &status, 1, HAL_MAX_DELAY);
 8000740:	1d79      	adds	r1, r7, #5
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	2201      	movs	r2, #1
 8000748:	480f      	ldr	r0, [pc, #60]	; (8000788 <main+0xd8>)
 800074a:	f00c fad7 	bl	800ccfc <HAL_UART_Transmit>
  status = M24256X_ReadMemoryByte(&hm24256x, &testRead, 0x0800);
 800074e:	1dbb      	adds	r3, r7, #6
 8000750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000754:	4619      	mov	r1, r3
 8000756:	480b      	ldr	r0, [pc, #44]	; (8000784 <main+0xd4>)
 8000758:	f7ff ff49 	bl	80005ee <M24256X_ReadMemoryByte>
 800075c:	4603      	mov	r3, r0
 800075e:	717b      	strb	r3, [r7, #5]
  HAL_UART_Transmit(&huart6, &status, 1, HAL_MAX_DELAY);
 8000760:	1d79      	adds	r1, r7, #5
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	2201      	movs	r2, #1
 8000768:	4807      	ldr	r0, [pc, #28]	; (8000788 <main+0xd8>)
 800076a:	f00c fac7 	bl	800ccfc <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart6, &testRead, 1, HAL_MAX_DELAY);
 800076e:	1db9      	adds	r1, r7, #6
 8000770:	f04f 33ff 	mov.w	r3, #4294967295
 8000774:	2201      	movs	r2, #1
 8000776:	4804      	ldr	r0, [pc, #16]	; (8000788 <main+0xd8>)
 8000778:	f00c fac0 	bl	800ccfc <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800077c:	e7fe      	b.n	800077c <main+0xcc>
 800077e:	bf00      	nop
 8000780:	20000fe4 	.word	0x20000fe4
 8000784:	20001468 	.word	0x20001468
 8000788:	200011b4 	.word	0x200011b4

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b09e      	sub	sp, #120	; 0x78
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	2260      	movs	r2, #96	; 0x60
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f00d f825 	bl	800d7ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	463b      	mov	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
 80007ae:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007b0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80007b4:	f006 fe7e 	bl	80074b4 <HAL_PWREx_ControlVoltageScaling>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80007be:	f001 f9dd 	bl	8001b7c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007c2:	f006 fe67 	bl	8007494 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007c6:	4b25      	ldr	r3, [pc, #148]	; (800085c <SystemClock_Config+0xd0>)
 80007c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007cc:	4a23      	ldr	r2, [pc, #140]	; (800085c <SystemClock_Config+0xd0>)
 80007ce:	f023 0318 	bic.w	r3, r3, #24
 80007d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80007d6:	2305      	movs	r3, #5
 80007d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007e0:	2381      	movs	r3, #129	; 0x81
 80007e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e8:	2303      	movs	r3, #3
 80007ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007f4:	230a      	movs	r3, #10
 80007f6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000800:	2301      	movs	r3, #1
 8000802:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000804:	230c      	movs	r3, #12
 8000806:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0318 	add.w	r3, r7, #24
 8000810:	4618      	mov	r0, r3
 8000812:	f006 ff3b 	bl	800768c <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800081c:	f001 f9ae 	bl	8001b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	231f      	movs	r3, #31
 8000822:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2303      	movs	r3, #3
 8000826:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000838:	463b      	mov	r3, r7
 800083a:	2104      	movs	r1, #4
 800083c:	4618      	mov	r0, r3
 800083e:	f007 fe01 	bl	8008444 <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000848:	f001 f998 	bl	8001b7c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800084c:	f008 f97c 	bl	8008b48 <HAL_RCC_EnableCSS>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8000850:	f00b f8f8 	bl	800ba44 <HAL_RCCEx_EnableLSECSS>
}
 8000854:	bf00      	nop
 8000856:	3778      	adds	r7, #120	; 0x78
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	46020c00 	.word	0x46020c00

08000860 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000864:	f006 ff02 	bl	800766c <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000868:	2002      	movs	r0, #2
 800086a:	f006 feaf 	bl	80075cc <HAL_PWREx_ConfigSupply>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000874:	f001 f982 	bl	8001b7c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}

0800087c <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 8000880:	4b22      	ldr	r3, [pc, #136]	; (800090c <MX_ADF1_Init+0x90>)
 8000882:	4a23      	ldr	r2, [pc, #140]	; (8000910 <MX_ADF1_Init+0x94>)
 8000884:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 8000886:	4b21      	ldr	r3, [pc, #132]	; (800090c <MX_ADF1_Init+0x90>)
 8000888:	2201      	movs	r2, #1
 800088a:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <MX_ADF1_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 8000892:	4b1e      	ldr	r3, [pc, #120]	; (800090c <MX_ADF1_Init+0x90>)
 8000894:	2201      	movs	r2, #1
 8000896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <MX_ADF1_Init+0x90>)
 800089c:	2210      	movs	r2, #16
 800089e:	629a      	str	r2, [r3, #40]	; 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_ADF1_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <MX_ADF1_Init+0x90>)
 80008a8:	2204      	movs	r2, #4
 80008aa:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_ADF1_Init+0x90>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 80008b2:	4816      	ldr	r0, [pc, #88]	; (800090c <MX_ADF1_Init+0x90>)
 80008b4:	f005 fc8e 	bl	80061d4 <HAL_MDF_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADF1_Init+0x46>
  {
    Error_Handler();
 80008be:	f001 f95d 	bl	8001b7c <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_ADF1_Init+0x98>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_ADF1_Init+0x98>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_ADF1_Init+0x98>)
 80008d0:	2240      	movs	r2, #64	; 0x40
 80008d2:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_ADF1_Init+0x98>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_ADF1_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_ADF1_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_ADF1_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_ADF1_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <MX_ADF1_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <MX_ADF1_Init+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <MX_ADF1_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000d28 	.word	0x20000d28
 8000910:	46024080 	.word	0x46024080
 8000914:	20000d6c 	.word	0x20000d6c

08000918 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MX_CRC_Init+0x3c>)
 800091e:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <MX_CRC_Init+0x40>)
 8000920:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_CRC_Init+0x3c>)
 8000924:	2200      	movs	r2, #0
 8000926:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_CRC_Init+0x3c>)
 800092a:	2200      	movs	r2, #0
 800092c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_CRC_Init+0x3c>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_CRC_Init+0x3c>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_CRC_Init+0x3c>)
 800093c:	2201      	movs	r2, #1
 800093e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_CRC_Init+0x3c>)
 8000942:	f002 fc2d 	bl	80031a0 <HAL_CRC_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800094c:	f001 f916 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000de8 	.word	0x20000de8
 8000958:	40023000 	.word	0x40023000

0800095c <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <MX_DCACHE1_Init+0x24>)
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <MX_DCACHE1_Init+0x28>)
 8000964:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_DCACHE1_Init+0x24>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_DCACHE1_Init+0x24>)
 800096e:	f002 fd09 	bl	8003384 <HAL_DCACHE_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 8000978:	f001 f900 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000e0c 	.word	0x20000e0c
 8000984:	40031400 	.word	0x40031400

08000988 <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <MX_DCACHE2_Init+0x24>)
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <MX_DCACHE2_Init+0x28>)
 8000990:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_DCACHE2_Init+0x24>)
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_DCACHE2_Init+0x24>)
 800099a:	f002 fcf3 	bl	8003384 <HAL_DCACHE_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_DCACHE2_Init+0x20>
  {
    Error_Handler();
 80009a4:	f001 f8ea 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000e38 	.word	0x20000e38
 80009b0:	40031800 	.word	0x40031800

080009b4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_DMA2D_Init+0x74>)
 80009ba:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <MX_DMA2D_Init+0x78>)
 80009bc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_DMA2D_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_DMA2D_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 608;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_DMA2D_Init+0x74>)
 80009cc:	f44f 7218 	mov.w	r2, #608	; 0x260
 80009d0:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_DMA2D_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_DMA2D_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_DMA2D_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_DMA2D_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_DMA2D_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <MX_DMA2D_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_DMA2D_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <MX_DMA2D_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a02:	4809      	ldr	r0, [pc, #36]	; (8000a28 <MX_DMA2D_Init+0x74>)
 8000a04:	f002 fde5 	bl	80035d2 <HAL_DMA2D_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 8000a0e:	f001 f8b5 	bl	8001b7c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a12:	2101      	movs	r1, #1
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_DMA2D_Init+0x74>)
 8000a16:	f002 ff4d 	bl	80038b4 <HAL_DMA2D_ConfigLayer>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 8000a20:	f001 f8ac 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000e64 	.word	0x20000e64
 8000a2c:	4002b000 	.word	0x4002b000

08000a30 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0ae      	sub	sp, #184	; 0xb8
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000a36:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
 8000a46:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000a48:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a4c:	2224      	movs	r2, #36	; 0x24
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f00c feca 	bl	800d7ea <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000a56:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]
 8000a66:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000a68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a6c:	2234      	movs	r2, #52	; 0x34
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f00c feba 	bl	800d7ea <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	222c      	movs	r2, #44	; 0x2c
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f00c feb4 	bl	800d7ea <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000a82:	4b67      	ldr	r3, [pc, #412]	; (8000c20 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a84:	4a67      	ldr	r2, [pc, #412]	; (8000c24 <MX_DSIHOST_DSI_Init+0x1f4>)
 8000a86:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000a88:	4b65      	ldr	r3, [pc, #404]	; (8000c20 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000a8e:	4b64      	ldr	r3, [pc, #400]	; (8000c20 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a90:	2204      	movs	r2, #4
 8000a92:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000a94:	4b62      	ldr	r3, [pc, #392]	; (8000c20 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 8000a9a:	4b61      	ldr	r3, [pc, #388]	; (8000c20 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a9c:	2208      	movs	r2, #8
 8000a9e:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 8000aa0:	4b5f      	ldr	r3, [pc, #380]	; (8000c20 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 8000aa6:	237d      	movs	r3, #125	; 0x7d
 8000aa8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 8000aac:	2304      	movs	r3, #4
 8000aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000aca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4853      	ldr	r0, [pc, #332]	; (8000c20 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000ad2:	f003 f897 	bl	8003c04 <HAL_DSI_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 8000adc:	f001 f84e 	bl	8001b7c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.LowPowerReadTimeout = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.BTATimeout = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000b14:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4841      	ldr	r0, [pc, #260]	; (8000c20 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000b1c:	f003 fd22 	bl	8004564 <HAL_DSI_ConfigHostTimeouts>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_DSIHOST_DSI_Init+0xfa>
  {
    Error_Handler();
 8000b26:	f001 f829 	bl	8001b7c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 10;
 8000b2a:	230a      	movs	r3, #10
 8000b2c:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.ClockLaneLP2HSTime = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneHS2LPTime = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneLP2HSTime = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.DataLaneMaxReadTime = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.StopWaitTime = 10;
 8000b3e:	230a      	movs	r3, #10
 8000b40:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000b42:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b46:	4619      	mov	r1, r3
 8000b48:	4835      	ldr	r0, [pc, #212]	; (8000c20 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000b4a:	f003 fc75 	bl	8004438 <HAL_DSI_ConfigPhyTimer>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000b54:	f001 f812 	bl	8001b7c <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000b58:	2104      	movs	r1, #4
 8000b5a:	4831      	ldr	r0, [pc, #196]	; (8000c20 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000b5c:	f003 fc44 	bl	80043e8 <HAL_DSI_ConfigFlowControl>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000b66:	f001 f809 	bl	8001b7c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	482c      	ldr	r0, [pc, #176]	; (8000c20 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000b6e:	f003 f91d 	bl	8003dac <HAL_DSI_ConfigErrorMonitor>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 8000b78:	f001 f800 	bl	8001b7c <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	65fb      	str	r3, [r7, #92]	; 0x5c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000bb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	481a      	ldr	r0, [pc, #104]	; (8000c20 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000bb8:	f003 fbb8 	bl	800432c <HAL_DSI_ConfigCommand>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_DSIHOST_DSI_Init+0x196>
  {
    Error_Handler();
 8000bc2:	f000 ffdb 	bl	8001b7c <Error_Handler>
  }
  CmdCfg.ColorCoding = DSI_RGB888;
 8000bc6:	2305      	movs	r3, #5
 8000bc8:	60bb      	str	r3, [r7, #8]
  CmdCfg.CommandSize = 416;
 8000bca:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8000bce:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000bd0:	2310      	movs	r3, #16
 8000bd2:	613b      	str	r3, [r7, #16]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000be8:	2340      	movs	r3, #64	; 0x40
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480a      	ldr	r0, [pc, #40]	; (8000c20 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000bf6:	f003 fac2 	bl	800417e <HAL_DSI_ConfigAdaptedCommandMode>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 8000c00:	f000 ffbc 	bl	8001b7c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	4806      	ldr	r0, [pc, #24]	; (8000c20 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000c08:	f003 fa8e 	bl	8004128 <HAL_DSI_SetGenericVCID>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 8000c12:	f000 ffb3 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	37b8      	adds	r7, #184	; 0xb8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000ec4 	.word	0x20000ec4
 8000c24:	40016c00 	.word	0x40016c00

08000c28 <MX_GFXMMU_Init>:
  * @brief GFXMMU Initialization Function
  * @param None
  * @retval None
  */
static void MX_GFXMMU_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END GFXMMU_Init 0 */

  /* USER CODE BEGIN GFXMMU_Init 1 */

  /* USER CODE END GFXMMU_Init 1 */
  hgfxmmu.Instance = GFXMMU;
 8000c2c:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <MX_GFXMMU_Init+0x94>)
 8000c2e:	4a24      	ldr	r2, [pc, #144]	; (8000cc0 <MX_GFXMMU_Init+0x98>)
 8000c30:	601a      	str	r2, [r3, #0]
  hgfxmmu.Init.BlocksPerLine = GFXMMU_256BLOCKS;
 8000c32:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <MX_GFXMMU_Init+0x94>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	605a      	str	r2, [r3, #4]
  hgfxmmu.Init.DefaultValue = 0;
 8000c38:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <MX_GFXMMU_Init+0x94>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  hgfxmmu.Init.Buffers.Buf0Address = 0;
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <MX_GFXMMU_Init+0x94>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
  hgfxmmu.Init.Buffers.Buf1Address = 0;
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <MX_GFXMMU_Init+0x94>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  hgfxmmu.Init.Buffers.Buf2Address = 0;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <MX_GFXMMU_Init+0x94>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
  hgfxmmu.Init.Buffers.Buf3Address = 0;
 8000c50:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_GFXMMU_Init+0x94>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  hgfxmmu.Init.CachePrefetch.Activation = ENABLE;
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <MX_GFXMMU_Init+0x94>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	771a      	strb	r2, [r3, #28]
  hgfxmmu.Init.CachePrefetch.CacheLock = GFXMMU_CACHE_LOCK_ENABLE;
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <MX_GFXMMU_Init+0x94>)
 8000c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c62:	621a      	str	r2, [r3, #32]
  hgfxmmu.Init.CachePrefetch.CacheLockBuffer = GFXMMU_CACHE_LOCK_BUFFER0;
 8000c64:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <MX_GFXMMU_Init+0x94>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24
  hgfxmmu.Init.CachePrefetch.CacheForce = GFXMMU_CACHE_FORCE_ENABLE;
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_GFXMMU_Init+0x94>)
 8000c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c70:	629a      	str	r2, [r3, #40]	; 0x28
  hgfxmmu.Init.CachePrefetch.OutterBufferability = GFXMMU_OUTTER_BUFFERABILITY_ENABLE;
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <MX_GFXMMU_Init+0x94>)
 8000c74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c78:	62da      	str	r2, [r3, #44]	; 0x2c
  hgfxmmu.Init.CachePrefetch.OutterCachability = GFXMMU_OUTTER_CACHABILITY_ENABLE;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <MX_GFXMMU_Init+0x94>)
 8000c7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c80:	631a      	str	r2, [r3, #48]	; 0x30
  hgfxmmu.Init.CachePrefetch.Prefetch = GFXMMU_PREFETCH_ENABLE;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_GFXMMU_Init+0x94>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	635a      	str	r2, [r3, #52]	; 0x34
  hgfxmmu.Init.Interrupts.Activation = ENABLE;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_GFXMMU_Init+0x94>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_GFXMMU_Init(&hgfxmmu) != HAL_OK)
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <MX_GFXMMU_Init+0x94>)
 8000c92:	f003 fd2d 	bl	80046f0 <HAL_GFXMMU_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_GFXMMU_Init+0x78>
  {
    Error_Handler();
 8000c9c:	f000 ff6e 	bl	8001b7c <Error_Handler>
  }
  if (HAL_GFXMMU_ConfigLut(&hgfxmmu, GFXMMU_LUT_FIRST, GFXMMU_LUT_SIZE, (uint32_t)gfxmmu_lut_config) != HAL_OK)
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <MX_GFXMMU_Init+0x9c>)
 8000ca2:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_GFXMMU_Init+0x94>)
 8000caa:	f003 fda1 	bl	80047f0 <HAL_GFXMMU_ConfigLut>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_GFXMMU_Init+0x90>
  {
    Error_Handler();
 8000cb4:	f000 ff62 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN GFXMMU_Init 2 */

  /* USER CODE END GFXMMU_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000ee8 	.word	0x20000ee8
 8000cc0:	4002c000 	.word	0x4002c000
 8000cc4:	20000000 	.word	0x20000000

08000cc8 <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_GPU2D_Init+0x20>)
 8000cce:	4a07      	ldr	r2, [pc, #28]	; (8000cec <MX_GPU2D_Init+0x24>)
 8000cd0:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_GPU2D_Init+0x20>)
 8000cd4:	f004 f800 	bl	8004cd8 <HAL_GPU2D_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 8000cde:	f000 ff4d 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000f30 	.word	0x20000f30
 8000cec:	4002f000 	.word	0x4002f000

08000cf0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <MX_I2C1_Init+0x74>)
 8000cf6:	4a1c      	ldr	r2, [pc, #112]	; (8000d68 <MX_I2C1_Init+0x78>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <MX_I2C1_Init+0x74>)
 8000cfc:	4a1b      	ldr	r2, [pc, #108]	; (8000d6c <MX_I2C1_Init+0x7c>)
 8000cfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <MX_I2C1_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_I2C1_Init+0x74>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_I2C1_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <MX_I2C1_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_I2C1_Init+0x74>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_I2C1_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_I2C1_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d2a:	480e      	ldr	r0, [pc, #56]	; (8000d64 <MX_I2C1_Init+0x74>)
 8000d2c:	f004 f83f 	bl	8004dae <HAL_I2C_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d36:	f000 ff21 	bl	8001b7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4809      	ldr	r0, [pc, #36]	; (8000d64 <MX_I2C1_Init+0x74>)
 8000d3e:	f004 fdb7 	bl	80058b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d48:	f000 ff18 	bl	8001b7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_I2C1_Init+0x74>)
 8000d50:	f004 fdf9 	bl	8005946 <HAL_I2CEx_ConfigDigitalFilter>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d5a:	f000 ff0f 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000f3c 	.word	0x20000f3c
 8000d68:	40005400 	.word	0x40005400
 8000d6c:	30909dec 	.word	0x30909dec

08000d70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <MX_I2C2_Init+0x74>)
 8000d76:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <MX_I2C2_Init+0x78>)
 8000d78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_I2C2_Init+0x74>)
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <MX_I2C2_Init+0x7c>)
 8000d7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_I2C2_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_I2C2_Init+0x74>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <MX_I2C2_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_I2C2_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_I2C2_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_I2C2_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_I2C2_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000daa:	480e      	ldr	r0, [pc, #56]	; (8000de4 <MX_I2C2_Init+0x74>)
 8000dac:	f003 ffff 	bl	8004dae <HAL_I2C_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000db6:	f000 fee1 	bl	8001b7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <MX_I2C2_Init+0x74>)
 8000dbe:	f004 fd77 	bl	80058b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000dc8:	f000 fed8 	bl	8001b7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_I2C2_Init+0x74>)
 8000dd0:	f004 fdb9 	bl	8005946 <HAL_I2CEx_ConfigDigitalFilter>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dda:	f000 fecf 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000f90 	.word	0x20000f90
 8000de8:	40005800 	.word	0x40005800
 8000dec:	30909dec 	.word	0x30909dec

08000df0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <MX_I2C4_Init+0x74>)
 8000df6:	4a1c      	ldr	r2, [pc, #112]	; (8000e68 <MX_I2C4_Init+0x78>)
 8000df8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30909DEC;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_I2C4_Init+0x74>)
 8000dfc:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <MX_I2C4_Init+0x7c>)
 8000dfe:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000e00:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_I2C4_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <MX_I2C4_Init+0x74>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <MX_I2C4_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_I2C4_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <MX_I2C4_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_I2C4_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_I2C4_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000e2a:	480e      	ldr	r0, [pc, #56]	; (8000e64 <MX_I2C4_Init+0x74>)
 8000e2c:	f003 ffbf 	bl	8004dae <HAL_I2C_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000e36:	f000 fea1 	bl	8001b7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4809      	ldr	r0, [pc, #36]	; (8000e64 <MX_I2C4_Init+0x74>)
 8000e3e:	f004 fd37 	bl	80058b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000e48:	f000 fe98 	bl	8001b7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_I2C4_Init+0x74>)
 8000e50:	f004 fd79 	bl	8005946 <HAL_I2CEx_ConfigDigitalFilter>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000e5a:	f000 fe8f 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000fe4 	.word	0x20000fe4
 8000e68:	40008400 	.word	0x40008400
 8000e6c:	30909dec 	.word	0x30909dec

08000e70 <MX_I2C6_Init>:
  * @brief I2C6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C6_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C6_Init 0 */

  /* USER CODE BEGIN I2C6_Init 1 */

  /* USER CODE END I2C6_Init 1 */
  hi2c6.Instance = I2C6;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_I2C6_Init+0x74>)
 8000e76:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <MX_I2C6_Init+0x78>)
 8000e78:	601a      	str	r2, [r3, #0]
  hi2c6.Init.Timing = 0x30909DEC;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_I2C6_Init+0x74>)
 8000e7c:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <MX_I2C6_Init+0x7c>)
 8000e7e:	605a      	str	r2, [r3, #4]
  hi2c6.Init.OwnAddress1 = 0;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_I2C6_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  hi2c6.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_I2C6_Init+0x74>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	60da      	str	r2, [r3, #12]
  hi2c6.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_I2C6_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  hi2c6.Init.OwnAddress2 = 0;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_I2C6_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
  hi2c6.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_I2C6_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  hi2c6.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_I2C6_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	61da      	str	r2, [r3, #28]
  hi2c6.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_I2C6_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c6) != HAL_OK)
 8000eaa:	480e      	ldr	r0, [pc, #56]	; (8000ee4 <MX_I2C6_Init+0x74>)
 8000eac:	f003 ff7f 	bl	8004dae <HAL_I2C_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_I2C6_Init+0x4a>
  {
    Error_Handler();
 8000eb6:	f000 fe61 	bl	8001b7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c6, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <MX_I2C6_Init+0x74>)
 8000ebe:	f004 fcf7 	bl	80058b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_I2C6_Init+0x5c>
  {
    Error_Handler();
 8000ec8:	f000 fe58 	bl	8001b7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c6, 0) != HAL_OK)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_I2C6_Init+0x74>)
 8000ed0:	f004 fd39 	bl	8005946 <HAL_I2CEx_ConfigDigitalFilter>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_I2C6_Init+0x6e>
  {
    Error_Handler();
 8000eda:	f000 fe4f 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C6_Init 2 */

  /* USER CODE END I2C6_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20001038 	.word	0x20001038
 8000ee8:	40009c00 	.word	0x40009c00
 8000eec:	30909dec 	.word	0x30909dec

08000ef0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8000f04:	f004 fd7c 	bl	8005a00 <HAL_ICACHE_Disable>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000f0e:	f000 fe35 	bl	8001b7c <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 8000f12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f16:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8000f18:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000f1c:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f004 fd96 	bl	8005a60 <HAL_ICACHE_EnableRemapRegion>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 8000f3a:	f000 fe1f 	bl	8001b7c <Error_Handler>
  }

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000f3e:	f004 fd4f 	bl	80059e0 <HAL_ICACHE_Enable>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ICACHE_Init+0x5c>
  {
    Error_Handler();
 8000f48:	f000 fe18 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f58:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <MX_LPUART1_UART_Init+0x8c>)
 8000f5a:	4a22      	ldr	r2, [pc, #136]	; (8000fe4 <MX_LPUART1_UART_Init+0x90>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000f5e:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <MX_LPUART1_UART_Init+0x8c>)
 8000f60:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <MX_LPUART1_UART_Init+0x94>)
 8000f62:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <MX_LPUART1_UART_Init+0x8c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <MX_LPUART1_UART_Init+0x8c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_LPUART1_UART_Init+0x8c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <MX_LPUART1_UART_Init+0x8c>)
 8000f78:	220c      	movs	r2, #12
 8000f7a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000f7c:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <MX_LPUART1_UART_Init+0x8c>)
 8000f7e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f82:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <MX_LPUART1_UART_Init+0x8c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <MX_LPUART1_UART_Init+0x8c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <MX_LPUART1_UART_Init+0x8c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f96:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <MX_LPUART1_UART_Init+0x8c>)
 8000f98:	f00b fe60 	bl	800cc5c <HAL_UART_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fa2:	f000 fdeb 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <MX_LPUART1_UART_Init+0x8c>)
 8000faa:	f00c fb35 	bl	800d618 <HAL_UARTEx_SetTxFifoThreshold>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000fb4:	f000 fde2 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <MX_LPUART1_UART_Init+0x8c>)
 8000fbc:	f00c fb6a 	bl	800d694 <HAL_UARTEx_SetRxFifoThreshold>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000fc6:	f000 fdd9 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_LPUART1_UART_Init+0x8c>)
 8000fcc:	f00c faeb 	bl	800d5a6 <HAL_UARTEx_DisableFifoMode>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000fd6:	f000 fdd1 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2000108c 	.word	0x2000108c
 8000fe4:	46002400 	.word	0x46002400
 8000fe8:	00033324 	.word	0x00033324

08000fec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ff0:	4b22      	ldr	r3, [pc, #136]	; (800107c <MX_USART1_UART_Init+0x90>)
 8000ff2:	4a23      	ldr	r2, [pc, #140]	; (8001080 <MX_USART1_UART_Init+0x94>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ff6:	4b21      	ldr	r3, [pc, #132]	; (800107c <MX_USART1_UART_Init+0x90>)
 8000ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ffc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <MX_USART1_UART_Init+0x90>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <MX_USART1_UART_Init+0x90>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <MX_USART1_UART_Init+0x90>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <MX_USART1_UART_Init+0x90>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <MX_USART1_UART_Init+0x90>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <MX_USART1_UART_Init+0x90>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <MX_USART1_UART_Init+0x90>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_USART1_UART_Init+0x90>)
 800102a:	2200      	movs	r2, #0
 800102c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <MX_USART1_UART_Init+0x90>)
 8001030:	2200      	movs	r2, #0
 8001032:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001034:	4811      	ldr	r0, [pc, #68]	; (800107c <MX_USART1_UART_Init+0x90>)
 8001036:	f00b fe11 	bl	800cc5c <HAL_UART_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001040:	f000 fd9c 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001044:	2100      	movs	r1, #0
 8001046:	480d      	ldr	r0, [pc, #52]	; (800107c <MX_USART1_UART_Init+0x90>)
 8001048:	f00c fae6 	bl	800d618 <HAL_UARTEx_SetTxFifoThreshold>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001052:	f000 fd93 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001056:	2100      	movs	r1, #0
 8001058:	4808      	ldr	r0, [pc, #32]	; (800107c <MX_USART1_UART_Init+0x90>)
 800105a:	f00c fb1b 	bl	800d694 <HAL_UARTEx_SetRxFifoThreshold>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001064:	f000 fd8a 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <MX_USART1_UART_Init+0x90>)
 800106a:	f00c fa9c 	bl	800d5a6 <HAL_UARTEx_DisableFifoMode>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001074:	f000 fd82 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20001120 	.word	0x20001120
 8001080:	40013800 	.word	0x40013800

08001084 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <MX_USART6_UART_Init+0x90>)
 800108a:	4a23      	ldr	r2, [pc, #140]	; (8001118 <MX_USART6_UART_Init+0x94>)
 800108c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <MX_USART6_UART_Init+0x90>)
 8001090:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001094:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001096:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <MX_USART6_UART_Init+0x90>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MX_USART6_UART_Init+0x90>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <MX_USART6_UART_Init+0x90>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_USART6_UART_Init+0x90>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <MX_USART6_UART_Init+0x90>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_USART6_UART_Init+0x90>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <MX_USART6_UART_Init+0x90>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_USART6_UART_Init+0x90>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_USART6_UART_Init+0x90>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010cc:	4811      	ldr	r0, [pc, #68]	; (8001114 <MX_USART6_UART_Init+0x90>)
 80010ce:	f00b fdc5 	bl	800cc5c <HAL_UART_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80010d8:	f000 fd50 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010dc:	2100      	movs	r1, #0
 80010de:	480d      	ldr	r0, [pc, #52]	; (8001114 <MX_USART6_UART_Init+0x90>)
 80010e0:	f00c fa9a 	bl	800d618 <HAL_UARTEx_SetTxFifoThreshold>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80010ea:	f000 fd47 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ee:	2100      	movs	r1, #0
 80010f0:	4808      	ldr	r0, [pc, #32]	; (8001114 <MX_USART6_UART_Init+0x90>)
 80010f2:	f00c facf 	bl	800d694 <HAL_UARTEx_SetRxFifoThreshold>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80010fc:	f000 fd3e 	bl	8001b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <MX_USART6_UART_Init+0x90>)
 8001102:	f00c fa50 	bl	800d5a6 <HAL_UARTEx_DisableFifoMode>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800110c:	f000 fd36 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200011b4 	.word	0x200011b4
 8001118:	40006400 	.word	0x40006400

0800111c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08e      	sub	sp, #56	; 0x38
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2234      	movs	r2, #52	; 0x34
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f00c fb5e 	bl	800d7ea <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800112e:	4b3b      	ldr	r3, [pc, #236]	; (800121c <MX_LTDC_Init+0x100>)
 8001130:	4a3b      	ldr	r2, [pc, #236]	; (8001220 <MX_LTDC_Init+0x104>)
 8001132:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8001134:	4b39      	ldr	r3, [pc, #228]	; (800121c <MX_LTDC_Init+0x100>)
 8001136:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800113a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 800113c:	4b37      	ldr	r3, [pc, #220]	; (800121c <MX_LTDC_Init+0x100>)
 800113e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001142:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001144:	4b35      	ldr	r3, [pc, #212]	; (800121c <MX_LTDC_Init+0x100>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800114a:	4b34      	ldr	r3, [pc, #208]	; (800121c <MX_LTDC_Init+0x100>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001150:	4b32      	ldr	r3, [pc, #200]	; (800121c <MX_LTDC_Init+0x100>)
 8001152:	2200      	movs	r2, #0
 8001154:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8001156:	4b31      	ldr	r3, [pc, #196]	; (800121c <MX_LTDC_Init+0x100>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 0;
 800115c:	4b2f      	ldr	r3, [pc, #188]	; (800121c <MX_LTDC_Init+0x100>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 0;
 8001162:	4b2e      	ldr	r3, [pc, #184]	; (800121c <MX_LTDC_Init+0x100>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 416;
 8001168:	4b2c      	ldr	r3, [pc, #176]	; (800121c <MX_LTDC_Init+0x100>)
 800116a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800116e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 416;
 8001170:	4b2a      	ldr	r3, [pc, #168]	; (800121c <MX_LTDC_Init+0x100>)
 8001172:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 416;
 8001178:	4b28      	ldr	r3, [pc, #160]	; (800121c <MX_LTDC_Init+0x100>)
 800117a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 416;
 8001180:	4b26      	ldr	r3, [pc, #152]	; (800121c <MX_LTDC_Init+0x100>)
 8001182:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001186:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <MX_LTDC_Init+0x100>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <MX_LTDC_Init+0x100>)
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001198:	4b20      	ldr	r3, [pc, #128]	; (800121c <MX_LTDC_Init+0x100>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011a0:	481e      	ldr	r0, [pc, #120]	; (800121c <MX_LTDC_Init+0x100>)
 80011a2:	f004 fcaf 	bl	8005b04 <HAL_LTDC_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 80011ac:	f000 fce6 	bl	8001b7c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 416;
 80011b4:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 80011b8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 416;
 80011be:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 80011c2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80011c8:	23ff      	movs	r3, #255	; 0xff
 80011ca:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80011d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80011d6:	2305      	movs	r3, #5
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = GFXMMU_VIRTUAL_BUFFER0_BASE;
 80011da:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 416;
 80011e0:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 416;
 80011e6:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_LTDC_Init+0x100>)
 8001206:	f004 fe0f 	bl	8005e28 <HAL_LTDC_ConfigLayer>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8001210:	f000 fcb4 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	3738      	adds	r7, #56	; 0x38
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20001248 	.word	0x20001248
 8001220:	40016800 	.word	0x40016800

08001224 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	; 0x30
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800122a:	f107 0318 	add.w	r3, r7, #24
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]
 800123a:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 800124a:	463b      	mov	r3, r7
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001252:	4b3d      	ldr	r3, [pc, #244]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 8001254:	4a3d      	ldr	r2, [pc, #244]	; (800134c <MX_OCTOSPI1_Init+0x128>)
 8001256:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001258:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 800125a:	2201      	movs	r2, #1
 800125c:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800125e:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8001264:	4b38      	ldr	r3, [pc, #224]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 8001266:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800126a:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 800126c:	4b36      	ldr	r3, [pc, #216]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 800126e:	221a      	movs	r2, #26
 8001270:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001272:	4b35      	ldr	r3, [pc, #212]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 8001274:	2201      	movs	r2, #1
 8001276:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001278:	4b33      	ldr	r3, [pc, #204]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800127e:	4b32      	ldr	r3, [pc, #200]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 8001280:	2200      	movs	r2, #0
 8001282:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_64_BYTES;
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 8001286:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800128a:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 16;
 800128c:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 800128e:	2210      	movs	r2, #16
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001292:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 8001294:	2200      	movs	r2, #0
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001298:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 800129a:	2200      	movs	r2, #0
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 80012a6:	2208      	movs	r2, #8
 80012a8:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 16;
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 80012ac:	2210      	movs	r2, #16
 80012ae:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80012b6:	4824      	ldr	r0, [pc, #144]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 80012b8:	f005 f938 	bl	800652c <HAL_OSPI_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_OCTOSPI1_Init+0xa2>
  {
    Error_Handler();
 80012c2:	f000 fc5b 	bl	8001b7c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 80012ca:	2301      	movs	r3, #1
 80012cc:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 1;
 80012ce:	2301      	movs	r3, #1
 80012d0:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 80012d2:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <MX_OCTOSPI1_Init+0x12c>)
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_OCTOSPI1_Init+0x130>)
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 80012da:	2301      	movs	r3, #1
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012de:	f107 0318 	add.w	r3, r7, #24
 80012e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e6:	4619      	mov	r1, r3
 80012e8:	4817      	ldr	r0, [pc, #92]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 80012ea:	f005 fa9f 	bl	800682c <HAL_OSPIM_Config>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_OCTOSPI1_Init+0xd4>
  {
    Error_Handler();
 80012f4:	f000 fc42 	bl	8001b7c <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001300:	2302      	movs	r3, #2
 8001302:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi1, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001310:	4619      	mov	r1, r3
 8001312:	480d      	ldr	r0, [pc, #52]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 8001314:	f005 f9c6 	bl	80066a4 <HAL_OSPI_HyperbusCfg>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_OCTOSPI1_Init+0xfe>
  {
    Error_Handler();
 800131e:	f000 fc2d 	bl	8001b7c <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 800132a:	463b      	mov	r3, r7
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	; (8001348 <MX_OCTOSPI1_Init+0x124>)
 8001330:	f006 f868 	bl	8007404 <HAL_OSPI_DLYB_SetConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_OCTOSPI1_Init+0x11a>
  {
    Error_Handler();
 800133a:	f000 fc1f 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	3730      	adds	r7, #48	; 0x30
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200012f0 	.word	0x200012f0
 800134c:	420d1400 	.word	0x420d1400
 8001350:	00010002 	.word	0x00010002
 8001354:	01000002 	.word	0x01000002

08001358 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08c      	sub	sp, #48	; 0x30
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]
 800136e:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 800137e:	463b      	mov	r3, r7
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8001386:	4b3c      	ldr	r3, [pc, #240]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 8001388:	4a3c      	ldr	r2, [pc, #240]	; (800147c <MX_OCTOSPI2_Init+0x124>)
 800138a:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 800138c:	4b3a      	ldr	r3, [pc, #232]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 800138e:	2201      	movs	r2, #1
 8001390:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001392:	4b39      	ldr	r3, [pc, #228]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8001398:	4b37      	ldr	r3, [pc, #220]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 800139a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800139e:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 80013a0:	4b35      	ldr	r3, [pc, #212]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 80013a2:	2220      	movs	r2, #32
 80013a4:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 80013a6:	4b34      	ldr	r3, [pc, #208]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80013ac:	4b32      	ldr	r3, [pc, #200]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80013b2:	4b31      	ldr	r3, [pc, #196]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80013b8:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 80013be:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80013c4:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80013ca:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 80013d0:	4b29      	ldr	r3, [pc, #164]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80013d6:	4b28      	ldr	r3, [pc, #160]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 80013d8:	2208      	movs	r2, #8
 80013da:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.MaxTran = 0;
 80013dc:	4b26      	ldr	r3, [pc, #152]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 80013de:	2200      	movs	r2, #0
 80013e0:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.Refresh = 0;
 80013e2:	4b25      	ldr	r3, [pc, #148]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 80013e8:	4823      	ldr	r0, [pc, #140]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 80013ea:	f005 f89f 	bl	800652c <HAL_OSPI_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_OCTOSPI2_Init+0xa0>
  {
    Error_Handler();
 80013f4:	f000 fbc2 	bl	8001b7c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 2;
 8001400:	2302      	movs	r3, #2
 8001402:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <MX_OCTOSPI2_Init+0x128>)
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001408:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <MX_OCTOSPI2_Init+0x12c>)
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 800140c:	2301      	movs	r3, #1
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	f241 3288 	movw	r2, #5000	; 0x1388
 8001418:	4619      	mov	r1, r3
 800141a:	4817      	ldr	r0, [pc, #92]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 800141c:	f005 fa06 	bl	800682c <HAL_OSPIM_Config>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_OCTOSPI2_Init+0xd2>
  {
    Error_Handler();
 8001426:	f000 fba9 	bl	8001b7c <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001432:	2302      	movs	r3, #2
 8001434:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001442:	4619      	mov	r1, r3
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 8001446:	f005 f92d 	bl	80066a4 <HAL_OSPI_HyperbusCfg>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_OCTOSPI2_Init+0xfc>
  {
    Error_Handler();
 8001450:	f000 fb94 	bl	8001b7c <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_OCTOSPI2_Init+0x120>)
 8001462:	f005 ffcf 	bl	8007404 <HAL_OSPI_DLYB_SetConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_OCTOSPI2_Init+0x118>
  {
    Error_Handler();
 800146c:	f000 fb86 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3730      	adds	r7, #48	; 0x30
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	2000134c 	.word	0x2000134c
 800147c:	420d2400 	.word	0x420d2400
 8001480:	00010002 	.word	0x00010002
 8001484:	01000002 	.word	0x01000002

08001488 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	; 0x38
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]
 800149e:	615a      	str	r2, [r3, #20]
 80014a0:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014b6:	4b33      	ldr	r3, [pc, #204]	; (8001584 <MX_RTC_Init+0xfc>)
 80014b8:	4a33      	ldr	r2, [pc, #204]	; (8001588 <MX_RTC_Init+0x100>)
 80014ba:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014bc:	4b31      	ldr	r3, [pc, #196]	; (8001584 <MX_RTC_Init+0xfc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014c2:	4b30      	ldr	r3, [pc, #192]	; (8001584 <MX_RTC_Init+0xfc>)
 80014c4:	227f      	movs	r2, #127	; 0x7f
 80014c6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <MX_RTC_Init+0xfc>)
 80014ca:	22ff      	movs	r2, #255	; 0xff
 80014cc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014ce:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <MX_RTC_Init+0xfc>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80014d4:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <MX_RTC_Init+0xfc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014da:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <MX_RTC_Init+0xfc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014e0:	4b28      	ldr	r3, [pc, #160]	; (8001584 <MX_RTC_Init+0xfc>)
 80014e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80014e8:	4b26      	ldr	r3, [pc, #152]	; (8001584 <MX_RTC_Init+0xfc>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80014ee:	4b25      	ldr	r3, [pc, #148]	; (8001584 <MX_RTC_Init+0xfc>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014f4:	4823      	ldr	r0, [pc, #140]	; (8001584 <MX_RTC_Init+0xfc>)
 80014f6:	f00a fbe7 	bl	800bcc8 <HAL_RTC_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001500:	f000 fb3c 	bl	8001b7c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001508:	2300      	movs	r3, #0
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001510:	2300      	movs	r3, #0
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	481a      	ldr	r0, [pc, #104]	; (8001584 <MX_RTC_Init+0xfc>)
 800151c:	f00a fe44 	bl	800c1a8 <HAL_RTCEx_PrivilegeModeSet>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001526:	f000 fb29 	bl	8001b7c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800152a:	2300      	movs	r3, #0
 800152c:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 800152e:	2300      	movs	r3, #0
 8001530:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8001532:	2300      	movs	r3, #0
 8001534:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	2201      	movs	r2, #1
 8001544:	4619      	mov	r1, r3
 8001546:	480f      	ldr	r0, [pc, #60]	; (8001584 <MX_RTC_Init+0xfc>)
 8001548:	f00a fc40 	bl	800bdcc <HAL_RTC_SetTime>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001552:	f000 fb13 	bl	8001b7c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001556:	2301      	movs	r3, #1
 8001558:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 800155a:	2301      	movs	r3, #1
 800155c:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 800155e:	2301      	movs	r3, #1
 8001560:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8001562:	2300      	movs	r3, #0
 8001564:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	2201      	movs	r2, #1
 800156a:	4619      	mov	r1, r3
 800156c:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_RTC_Init+0xfc>)
 800156e:	f00a fcc9 	bl	800bf04 <HAL_RTC_SetDate>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8001578:	f000 fb00 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	3738      	adds	r7, #56	; 0x38
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200013a8 	.word	0x200013a8
 8001588:	46007800 	.word	0x46007800

0800158c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800159c:	4b30      	ldr	r3, [pc, #192]	; (8001660 <MX_SPI1_Init+0xd4>)
 800159e:	4a31      	ldr	r2, [pc, #196]	; (8001664 <MX_SPI1_Init+0xd8>)
 80015a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015a2:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <MX_SPI1_Init+0xd4>)
 80015a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80015a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015aa:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <MX_SPI1_Init+0xd4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80015b0:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <MX_SPI1_Init+0xd4>)
 80015b2:	2203      	movs	r2, #3
 80015b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b6:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <MX_SPI1_Init+0xd4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <MX_SPI1_Init+0xd4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80015c2:	4b27      	ldr	r3, [pc, #156]	; (8001660 <MX_SPI1_Init+0xd4>)
 80015c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ca:	4b25      	ldr	r3, [pc, #148]	; (8001660 <MX_SPI1_Init+0xd4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015d0:	4b23      	ldr	r3, [pc, #140]	; (8001660 <MX_SPI1_Init+0xd4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d6:	4b22      	ldr	r3, [pc, #136]	; (8001660 <MX_SPI1_Init+0xd4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015dc:	4b20      	ldr	r3, [pc, #128]	; (8001660 <MX_SPI1_Init+0xd4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <MX_SPI1_Init+0xd4>)
 80015e4:	2207      	movs	r2, #7
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <MX_SPI1_Init+0xd4>)
 80015ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ee:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <MX_SPI1_Init+0xd4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <MX_SPI1_Init+0xd4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <MX_SPI1_Init+0xd4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <MX_SPI1_Init+0xd4>)
 8001604:	2200      	movs	r2, #0
 8001606:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <MX_SPI1_Init+0xd4>)
 800160a:	2200      	movs	r2, #0
 800160c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_SPI1_Init+0xd4>)
 8001610:	2200      	movs	r2, #0
 8001612:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <MX_SPI1_Init+0xd4>)
 8001616:	2200      	movs	r2, #0
 8001618:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_SPI1_Init+0xd4>)
 800161c:	2200      	movs	r2, #0
 800161e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_SPI1_Init+0xd4>)
 8001622:	2200      	movs	r2, #0
 8001624:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001626:	480e      	ldr	r0, [pc, #56]	; (8001660 <MX_SPI1_Init+0xd4>)
 8001628:	f00a fdec 	bl	800c204 <HAL_SPI_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8001632:	f000 faa3 	bl	8001b7c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800163a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800163e:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_SPI1_Init+0xd4>)
 800164a:	f00a ff0c 	bl	800c466 <HAL_SPIEx_SetConfigAutonomousMode>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8001654:	f000 fa92 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200013d8 	.word	0x200013d8
 8001664:	40013000 	.word	0x40013000

08001668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b090      	sub	sp, #64	; 0x40
 800166c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	4bbf      	ldr	r3, [pc, #764]	; (800197c <MX_GPIO_Init+0x314>)
 8001680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001684:	4abd      	ldr	r2, [pc, #756]	; (800197c <MX_GPIO_Init+0x314>)
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800168e:	4bbb      	ldr	r3, [pc, #748]	; (800197c <MX_GPIO_Init+0x314>)
 8001690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
 800169a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800169c:	4bb7      	ldr	r3, [pc, #732]	; (800197c <MX_GPIO_Init+0x314>)
 800169e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016a2:	4ab6      	ldr	r2, [pc, #728]	; (800197c <MX_GPIO_Init+0x314>)
 80016a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016ac:	4bb3      	ldr	r3, [pc, #716]	; (800197c <MX_GPIO_Init+0x314>)
 80016ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ba:	4bb0      	ldr	r3, [pc, #704]	; (800197c <MX_GPIO_Init+0x314>)
 80016bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016c0:	4aae      	ldr	r2, [pc, #696]	; (800197c <MX_GPIO_Init+0x314>)
 80016c2:	f043 0308 	orr.w	r3, r3, #8
 80016c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016ca:	4bac      	ldr	r3, [pc, #688]	; (800197c <MX_GPIO_Init+0x314>)
 80016cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	623b      	str	r3, [r7, #32]
 80016d6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d8:	4ba8      	ldr	r3, [pc, #672]	; (800197c <MX_GPIO_Init+0x314>)
 80016da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016de:	4aa7      	ldr	r2, [pc, #668]	; (800197c <MX_GPIO_Init+0x314>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016e8:	4ba4      	ldr	r3, [pc, #656]	; (800197c <MX_GPIO_Init+0x314>)
 80016ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	4ba1      	ldr	r3, [pc, #644]	; (800197c <MX_GPIO_Init+0x314>)
 80016f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016fc:	4a9f      	ldr	r2, [pc, #636]	; (800197c <MX_GPIO_Init+0x314>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001706:	4b9d      	ldr	r3, [pc, #628]	; (800197c <MX_GPIO_Init+0x314>)
 8001708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	61bb      	str	r3, [r7, #24]
 8001712:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001714:	4b99      	ldr	r3, [pc, #612]	; (800197c <MX_GPIO_Init+0x314>)
 8001716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800171a:	4a98      	ldr	r2, [pc, #608]	; (800197c <MX_GPIO_Init+0x314>)
 800171c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001720:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001724:	4b95      	ldr	r3, [pc, #596]	; (800197c <MX_GPIO_Init+0x314>)
 8001726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800172a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001732:	4b92      	ldr	r3, [pc, #584]	; (800197c <MX_GPIO_Init+0x314>)
 8001734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001738:	4a90      	ldr	r2, [pc, #576]	; (800197c <MX_GPIO_Init+0x314>)
 800173a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800173e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001742:	4b8e      	ldr	r3, [pc, #568]	; (800197c <MX_GPIO_Init+0x314>)
 8001744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001750:	4b8a      	ldr	r3, [pc, #552]	; (800197c <MX_GPIO_Init+0x314>)
 8001752:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001756:	4a89      	ldr	r2, [pc, #548]	; (800197c <MX_GPIO_Init+0x314>)
 8001758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001760:	4b86      	ldr	r3, [pc, #536]	; (800197c <MX_GPIO_Init+0x314>)
 8001762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800176e:	4b83      	ldr	r3, [pc, #524]	; (800197c <MX_GPIO_Init+0x314>)
 8001770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001774:	4a81      	ldr	r2, [pc, #516]	; (800197c <MX_GPIO_Init+0x314>)
 8001776:	f043 0320 	orr.w	r3, r3, #32
 800177a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800177e:	4b7f      	ldr	r3, [pc, #508]	; (800197c <MX_GPIO_Init+0x314>)
 8001780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001784:	f003 0320 	and.w	r3, r3, #32
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800178c:	4b7b      	ldr	r3, [pc, #492]	; (800197c <MX_GPIO_Init+0x314>)
 800178e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001792:	4a7a      	ldr	r2, [pc, #488]	; (800197c <MX_GPIO_Init+0x314>)
 8001794:	f043 0310 	orr.w	r3, r3, #16
 8001798:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800179c:	4b77      	ldr	r3, [pc, #476]	; (800197c <MX_GPIO_Init+0x314>)
 800179e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b0:	4873      	ldr	r0, [pc, #460]	; (8001980 <MX_GPIO_Init+0x318>)
 80017b2:	f003 fa79 	bl	8004ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SDMMC_EN_Pin|LRA_EN_Pin, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80017bc:	4871      	ldr	r0, [pc, #452]	; (8001984 <MX_GPIO_Init+0x31c>)
 80017be:	f003 fa73 	bl	8004ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO3_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	f248 0120 	movw	r1, #32800	; 0x8020
 80017c8:	486f      	ldr	r0, [pc, #444]	; (8001988 <MX_GPIO_Init+0x320>)
 80017ca:	f003 fa6d 	bl	8004ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GNSS_RST_Pin|TP_RST_Pin|GNSS_WAKEUP_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	21c8      	movs	r1, #200	; 0xc8
 80017d2:	486e      	ldr	r0, [pc, #440]	; (800198c <MX_GPIO_Init+0x324>)
 80017d4:	f003 fa68 	bl	8004ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_RST_GPIO_Port, FLASH_RST_Pin, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017de:	486c      	ldr	r0, [pc, #432]	; (8001990 <MX_GPIO_Init+0x328>)
 80017e0:	f003 fa62 	bl	8004ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	486a      	ldr	r0, [pc, #424]	; (8001994 <MX_GPIO_Init+0x32c>)
 80017ea:	f003 fa5d 	bl	8004ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f4:	4868      	ldr	r0, [pc, #416]	; (8001998 <MX_GPIO_Init+0x330>)
 80017f6:	f003 fa57 	bl	8004ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPLAY_SWIRE_IN_Pin DISPLAY_SWIRE_OUT_Pin */
  GPIO_InitStruct.Pin = DISPLAY_SWIRE_IN_Pin|DISPLAY_SWIRE_OUT_Pin;
 80017fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001800:	2300      	movs	r3, #0
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001808:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800180c:	4619      	mov	r1, r3
 800180e:	485c      	ldr	r0, [pc, #368]	; (8001980 <MX_GPIO_Init+0x318>)
 8001810:	f003 f872 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : AVDDEN_Pin */
  GPIO_InitStruct.Pin = AVDDEN_Pin;
 8001814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181a:	2301      	movs	r3, #1
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800181e:	2302      	movs	r3, #2
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(AVDDEN_GPIO_Port, &GPIO_InitStruct);
 8001826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182a:	4619      	mov	r1, r3
 800182c:	4854      	ldr	r0, [pc, #336]	; (8001980 <MX_GPIO_Init+0x318>)
 800182e:	f003 f863 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_EN_Pin */
  GPIO_InitStruct.Pin = SDMMC_EN_Pin;
 8001832:	2310      	movs	r3, #16
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001836:	2301      	movs	r3, #1
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SDMMC_EN_GPIO_Port, &GPIO_InitStruct);
 8001842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001846:	4619      	mov	r1, r3
 8001848:	484e      	ldr	r0, [pc, #312]	; (8001984 <MX_GPIO_Init+0x31c>)
 800184a:	f003 f855 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_CD_Pin PWR_INT_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|PWR_INT_Pin;
 800184e:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001854:	2300      	movs	r3, #0
 8001856:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001858:	2301      	movs	r3, #1
 800185a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001860:	4619      	mov	r1, r3
 8001862:	4848      	ldr	r0, [pc, #288]	; (8001984 <MX_GPIO_Init+0x31c>)
 8001864:	f003 f848 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC8 PC11 PC12
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
 8001868:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001876:	2302      	movs	r3, #2
 8001878:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800187a:	230c      	movs	r3, #12
 800187c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001882:	4619      	mov	r1, r3
 8001884:	4845      	ldr	r0, [pc, #276]	; (800199c <MX_GPIO_Init+0x334>)
 8001886:	f003 f837 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|PWR_ENCHG_Pin;
 800188a:	f248 0320 	movw	r3, #32800	; 0x8020
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001890:	2301      	movs	r3, #1
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001894:	2302      	movs	r3, #2
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a0:	4619      	mov	r1, r3
 80018a2:	4839      	ldr	r0, [pc, #228]	; (8001988 <MX_GPIO_Init+0x320>)
 80018a4:	f003 f828 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018a8:	2304      	movs	r3, #4
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b4:	2302      	movs	r3, #2
 80018b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018b8:	230c      	movs	r3, #12
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c0:	4619      	mov	r1, r3
 80018c2:	4830      	ldr	r0, [pc, #192]	; (8001984 <MX_GPIO_Init+0x31c>)
 80018c4:	f003 f818 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80018c8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018de:	4619      	mov	r1, r3
 80018e0:	482f      	ldr	r0, [pc, #188]	; (80019a0 <MX_GPIO_Init+0x338>)
 80018e2:	f003 f809 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT2_Pin */
  GPIO_InitStruct.Pin = BT_INT2_Pin;
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ea:	2300      	movs	r3, #0
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ee:	2302      	movs	r3, #2
 80018f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BT_INT2_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f6:	4619      	mov	r1, r3
 80018f8:	4828      	ldr	r0, [pc, #160]	; (800199c <MX_GPIO_Init+0x334>)
 80018fa:	f002 fffd 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800190c:	2302      	movs	r3, #2
 800190e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001910:	2308      	movs	r3, #8
 8001912:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001918:	4619      	mov	r1, r3
 800191a:	481b      	ldr	r0, [pc, #108]	; (8001988 <MX_GPIO_Init+0x320>)
 800191c:	f002 ffec 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_Pin GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO1_Pin;
 8001920:	2303      	movs	r3, #3
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001924:	2300      	movs	r3, #0
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001928:	2302      	movs	r3, #2
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800192c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001930:	4619      	mov	r1, r3
 8001932:	4814      	ldr	r0, [pc, #80]	; (8001984 <MX_GPIO_Init+0x31c>)
 8001934:	f002 ffe0 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT1_Pin */
  GPIO_InitStruct.Pin = BT_INT1_Pin;
 8001938:	2340      	movs	r3, #64	; 0x40
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <MX_GPIO_Init+0x33c>)
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001940:	2302      	movs	r3, #2
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BT_INT1_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001948:	4619      	mov	r1, r3
 800194a:	4814      	ldr	r0, [pc, #80]	; (800199c <MX_GPIO_Init+0x334>)
 800194c:	f002 ffd4 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin|TP_RST_Pin;
 8001950:	2388      	movs	r3, #136	; 0x88
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2301      	movs	r3, #1
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001958:	2301      	movs	r3, #1
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001964:	4619      	mov	r1, r3
 8001966:	4809      	ldr	r0, [pc, #36]	; (800198c <MX_GPIO_Init+0x324>)
 8001968:	f002 ffc6 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_PPS_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin;
 800196c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_GPIO_Init+0x33c>)
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
 800197a:	e015      	b.n	80019a8 <MX_GPIO_Init+0x340>
 800197c:	46020c00 	.word	0x46020c00
 8001980:	42021800 	.word	0x42021800
 8001984:	42020c00 	.word	0x42020c00
 8001988:	42020400 	.word	0x42020400
 800198c:	42022400 	.word	0x42022400
 8001990:	42022000 	.word	0x42022000
 8001994:	42021400 	.word	0x42021400
 8001998:	42021000 	.word	0x42021000
 800199c:	42020800 	.word	0x42020800
 80019a0:	42020000 	.word	0x42020000
 80019a4:	10110000 	.word	0x10110000
  HAL_GPIO_Init(GNSS_PPS_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ac:	4619      	mov	r1, r3
 80019ae:	4860      	ldr	r0, [pc, #384]	; (8001b30 <MX_GPIO_Init+0x4c8>)
 80019b0:	f002 ffa2 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_WAKEUP_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin;
 80019b4:	2340      	movs	r3, #64	; 0x40
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GNSS_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c8:	4619      	mov	r1, r3
 80019ca:	485a      	ldr	r0, [pc, #360]	; (8001b34 <MX_GPIO_Init+0x4cc>)
 80019cc:	f002 ff94 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 80019d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019d6:	4b58      	ldr	r3, [pc, #352]	; (8001b38 <MX_GPIO_Init+0x4d0>)
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019da:	2301      	movs	r3, #1
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e2:	4619      	mov	r1, r3
 80019e4:	4853      	ldr	r0, [pc, #332]	; (8001b34 <MX_GPIO_Init+0x4cc>)
 80019e6:	f002 ff87 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RST_Pin */
  GPIO_InitStruct.Pin = FLASH_RST_Pin;
 80019ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FLASH_RST_GPIO_Port, &GPIO_InitStruct);
 80019fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a00:	4619      	mov	r1, r3
 8001a02:	484e      	ldr	r0, [pc, #312]	; (8001b3c <MX_GPIO_Init+0x4d4>)
 8001a04:	f002 ff78 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_INT_Pin */
  GPIO_InitStruct.Pin = FLASH_INT_Pin;
 8001a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a0e:	4b4a      	ldr	r3, [pc, #296]	; (8001b38 <MX_GPIO_Init+0x4d0>)
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(FLASH_INT_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4847      	ldr	r0, [pc, #284]	; (8001b3c <MX_GPIO_Init+0x4d4>)
 8001a1e:	f002 ff6b 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RSTO_Pin */
  GPIO_InitStruct.Pin = FLASH_RSTO_Pin;
 8001a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(FLASH_RSTO_GPIO_Port, &GPIO_InitStruct);
 8001a30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a34:	4619      	mov	r1, r3
 8001a36:	4841      	ldr	r0, [pc, #260]	; (8001b3c <MX_GPIO_Init+0x4d4>)
 8001a38:	f002 ff5e 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin;
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a40:	2301      	movs	r3, #1
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DISPLAY_RST_GPIO_Port, &GPIO_InitStruct);
 8001a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a50:	4619      	mov	r1, r3
 8001a52:	483b      	ldr	r0, [pc, #236]	; (8001b40 <MX_GPIO_Init+0x4d8>)
 8001a54:	f002 ff50 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALS_INT_Pin */
  GPIO_InitStruct.Pin = ALS_INT_Pin;
 8001a58:	2340      	movs	r3, #64	; 0x40
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a60:	2301      	movs	r3, #1
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ALS_INT_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4835      	ldr	r0, [pc, #212]	; (8001b40 <MX_GPIO_Init+0x4d8>)
 8001a6c:	f002 ff44 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a74:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <MX_GPIO_Init+0x4d0>)
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a80:	4619      	mov	r1, r3
 8001a82:	4830      	ldr	r0, [pc, #192]	; (8001b44 <MX_GPIO_Init+0x4dc>)
 8001a84:	f002 ff38 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8001a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a92:	2301      	movs	r3, #1
 8001a94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2300      	movs	r3, #0
 8001a98:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4828      	ldr	r0, [pc, #160]	; (8001b44 <MX_GPIO_Init+0x4dc>)
 8001aa2:	f002 ff29 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HR_INT_Pin */
  GPIO_InitStruct.Pin = HR_INT_Pin;
 8001aa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aac:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <MX_GPIO_Init+0x4d0>)
 8001aae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HR_INT_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4823      	ldr	r0, [pc, #140]	; (8001b48 <MX_GPIO_Init+0x4e0>)
 8001abc:	f002 ff1c 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LRA_EN_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin;
 8001ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aca:	2302      	movs	r3, #2
 8001acc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LRA_EN_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	481b      	ldr	r0, [pc, #108]	; (8001b48 <MX_GPIO_Init+0x4e0>)
 8001ada:	f002 ff0d 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_INT_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin;
 8001ade:	2310      	movs	r3, #16
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <MX_GPIO_Init+0x4d0>)
 8001ae4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MAG_INT_GPIO_Port, &GPIO_InitStruct);
 8001aea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aee:	4619      	mov	r1, r3
 8001af0:	4816      	ldr	r0, [pc, #88]	; (8001b4c <MX_GPIO_Init+0x4e4>)
 8001af2:	f002 ff01 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 8001af6:	2304      	movs	r3, #4
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <MX_GPIO_Init+0x4e8>)
 8001afc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b06:	4619      	mov	r1, r3
 8001b08:	4812      	ldr	r0, [pc, #72]	; (8001b54 <MX_GPIO_Init+0x4ec>)
 8001b0a:	f002 fef5 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin;
 8001b0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b14:	2300      	movs	r3, #0
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IMU_INT2_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b20:	4619      	mov	r1, r3
 8001b22:	4807      	ldr	r0, [pc, #28]	; (8001b40 <MX_GPIO_Init+0x4d8>)
 8001b24:	f002 fee8 	bl	80048f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b28:	bf00      	nop
 8001b2a:	3740      	adds	r7, #64	; 0x40
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	42020000 	.word	0x42020000
 8001b34:	42022400 	.word	0x42022400
 8001b38:	10210000 	.word	0x10210000
 8001b3c:	42022000 	.word	0x42022000
 8001b40:	42021400 	.word	0x42021400
 8001b44:	42021000 	.word	0x42021000
 8001b48:	42020c00 	.word	0x42020c00
 8001b4c:	42020800 	.word	0x42020800
 8001b50:	10110000 	.word	0x10110000
 8001b54:	42020400 	.word	0x42020400

08001b58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b6a:	f001 f9f5 	bl	8002f58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40001000 	.word	0x40001000

08001b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <Error_Handler+0x8>
	...

08001b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_MspInit+0x30>)
 8001b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b94:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <HAL_MspInit+0x30>)
 8001b96:	f043 0304 	orr.w	r3, r3, #4
 8001b9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_MspInit+0x30>)
 8001ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	46020c00 	.word	0x46020c00

08001bbc <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b0c2      	sub	sp, #264	; 0x108
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001bca:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	22e0      	movs	r2, #224	; 0xe0
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f00b fe00 	bl	800d7ea <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8001bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a2b      	ldr	r2, [pc, #172]	; (8001ca4 <HAL_MDF_MspInit+0xe8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d14e      	bne.n	8001c9a <HAL_MDF_MspInit+0xde>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001bfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c0e:	f107 0310 	add.w	r3, r7, #16
 8001c12:	4618      	mov	r0, r3
 8001c14:	f007 f84a 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_MDF_MspInit+0x66>
    {
      Error_Handler();
 8001c1e:	f7ff ffad 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_MDF_MspInit+0xec>)
 8001c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c28:	4a1f      	ldr	r2, [pc, #124]	; (8001ca8 <HAL_MDF_MspInit+0xec>)
 8001c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001c32:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_MDF_MspInit+0xec>)
 8001c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c40:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_MDF_MspInit+0xec>)
 8001c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c46:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <HAL_MDF_MspInit+0xec>)
 8001c48:	f043 0310 	orr.w	r3, r3, #16
 8001c4c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c50:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <HAL_MDF_MspInit+0xec>)
 8001c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c56:	f003 0210 	and.w	r2, r3, #16
 8001c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c5e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c68:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c6c:	681b      	ldr	r3, [r3, #0]
    /**ADF1 GPIO Configuration
    PE9     ------> ADF1_CCK0
    PE10     ------> ADF1_SDI0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c8e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4805      	ldr	r0, [pc, #20]	; (8001cac <HAL_MDF_MspInit+0xf0>)
 8001c96:	f002 fe2f 	bl	80048f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 8001c9a:	bf00      	nop
 8001c9c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	46024080 	.word	0x46024080
 8001ca8:	46020c00 	.word	0x46020c00
 8001cac:	42021000 	.word	0x42021000

08001cb0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <HAL_CRC_MspInit+0x3c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_CRC_MspInit+0x40>)
 8001cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc8:	4a09      	ldr	r2, [pc, #36]	; (8001cf0 <HAL_CRC_MspInit+0x40>)
 8001cca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <HAL_CRC_MspInit+0x40>)
 8001cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	40023000 	.word	0x40023000
 8001cf0:	46020c00 	.word	0x46020c00

08001cf4 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a16      	ldr	r2, [pc, #88]	; (8001d5c <HAL_DCACHE_MspInit+0x68>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d10f      	bne.n	8001d26 <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <HAL_DCACHE_MspInit+0x6c>)
 8001d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <HAL_DCACHE_MspInit+0x6c>)
 8001d0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_DCACHE_MspInit+0x6c>)
 8001d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 8001d24:	e013      	b.n	8001d4e <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <HAL_DCACHE_MspInit+0x70>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d10e      	bne.n	8001d4e <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_DCACHE_MspInit+0x6c>)
 8001d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <HAL_DCACHE_MspInit+0x6c>)
 8001d38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001d40:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <HAL_DCACHE_MspInit+0x6c>)
 8001d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40031400 	.word	0x40031400
 8001d60:	46020c00 	.word	0x46020c00
 8001d64:	40031800 	.word	0x40031800

08001d68 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <HAL_DMA2D_MspInit+0x48>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d116      	bne.n	8001da8 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <HAL_DMA2D_MspInit+0x4c>)
 8001d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d80:	4a0c      	ldr	r2, [pc, #48]	; (8001db4 <HAL_DMA2D_MspInit+0x4c>)
 8001d82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_DMA2D_MspInit+0x4c>)
 8001d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2076      	movs	r0, #118	; 0x76
 8001d9e:	f001 f9d7 	bl	8003150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001da2:	2076      	movs	r0, #118	; 0x76
 8001da4:	f001 f9ee 	bl	8003184 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	4002b000 	.word	0x4002b000
 8001db4:	46020c00 	.word	0x46020c00

08001db8 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b0c2      	sub	sp, #264	; 0x108
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001dc6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd8:	f107 0310 	add.w	r3, r7, #16
 8001ddc:	22e0      	movs	r2, #224	; 0xe0
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f00b fd02 	bl	800d7ea <memset>
  if(hdsi->Instance==DSI)
 8001de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a30      	ldr	r2, [pc, #192]	; (8001eb4 <HAL_DSI_MspInit+0xfc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d157      	bne.n	8001ea8 <HAL_DSI_MspInit+0xf0>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	f04f 0304 	mov.w	r3, #4
 8001e00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 8001e04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	4618      	mov	r0, r3
 8001e12:	f006 ff4b 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_DSI_MspInit+0x68>
    {
      Error_Handler();
 8001e1c:	f7ff feae 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001e20:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <HAL_DSI_MspInit+0x100>)
 8001e22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e26:	4a24      	ldr	r2, [pc, #144]	; (8001eb8 <HAL_DSI_MspInit+0x100>)
 8001e28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e2c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001e30:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <HAL_DSI_MspInit+0x100>)
 8001e32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e3e:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <HAL_DSI_MspInit+0x100>)
 8001e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e44:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <HAL_DSI_MspInit+0x100>)
 8001e46:	f043 0320 	orr.w	r3, r3, #32
 8001e4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e4e:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <HAL_DSI_MspInit+0x100>)
 8001e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e54:	f003 0220 	and.w	r2, r3, #32
 8001e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e5c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e66:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e6a:	681b      	ldr	r3, [r3, #0]
    DSI_CKN     ------> DSIHOST_CKN
    DSI_D1N     ------> DSIHOST_D1N
    DSI_D1P     ------> DSIHOST_D1P
    PF10     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8001e86:	230b      	movs	r3, #11
 8001e88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e8c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e90:	4619      	mov	r1, r3
 8001e92:	480a      	ldr	r0, [pc, #40]	; (8001ebc <HAL_DSI_MspInit+0x104>)
 8001e94:	f002 fd30 	bl	80048f8 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	2089      	movs	r0, #137	; 0x89
 8001e9e:	f001 f957 	bl	8003150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001ea2:	2089      	movs	r0, #137	; 0x89
 8001ea4:	f001 f96e 	bl	8003184 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001ea8:	bf00      	nop
 8001eaa:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40016c00 	.word	0x40016c00
 8001eb8:	46020c00 	.word	0x46020c00
 8001ebc:	42021400 	.word	0x42021400

08001ec0 <HAL_GFXMMU_MspInit>:
* This function configures the hardware resources used in this example
* @param hgfxmmu: GFXMMU handle pointer
* @retval None
*/
void HAL_GFXMMU_MspInit(GFXMMU_HandleTypeDef* hgfxmmu)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if(hgfxmmu->Instance==GFXMMU)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <HAL_GFXMMU_MspInit+0x48>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d116      	bne.n	8001f00 <HAL_GFXMMU_MspInit+0x40>
  {
  /* USER CODE BEGIN GFXMMU_MspInit 0 */

  /* USER CODE END GFXMMU_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GFXMMU_CLK_ENABLE();
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_GFXMMU_MspInit+0x4c>)
 8001ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed8:	4a0c      	ldr	r2, [pc, #48]	; (8001f0c <HAL_GFXMMU_MspInit+0x4c>)
 8001eda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ede:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_GFXMMU_MspInit+0x4c>)
 8001ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
    /* GFXMMU interrupt Init */
    HAL_NVIC_SetPriority(GFXMMU_IRQn, 0, 0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	2086      	movs	r0, #134	; 0x86
 8001ef6:	f001 f92b 	bl	8003150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GFXMMU_IRQn);
 8001efa:	2086      	movs	r0, #134	; 0x86
 8001efc:	f001 f942 	bl	8003184 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GFXMMU_MspInit 1 */

  /* USER CODE END GFXMMU_MspInit 1 */
  }

}
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	4002c000 	.word	0x4002c000
 8001f0c:	46020c00 	.word	0x46020c00

08001f10 <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1a      	ldr	r2, [pc, #104]	; (8001f88 <HAL_GPU2D_MspInit+0x78>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d12d      	bne.n	8001f7e <HAL_GPU2D_MspInit+0x6e>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 8001f22:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <HAL_GPU2D_MspInit+0x7c>)
 8001f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f28:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <HAL_GPU2D_MspInit+0x7c>)
 8001f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <HAL_GPU2D_MspInit+0x7c>)
 8001f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_GPU2D_MspInit+0x7c>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <HAL_GPU2D_MspInit+0x7c>)
 8001f48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_GPU2D_MspInit+0x7c>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	2084      	movs	r0, #132	; 0x84
 8001f64:	f001 f8f4 	bl	8003150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 8001f68:	2084      	movs	r0, #132	; 0x84
 8001f6a:	f001 f90b 	bl	8003184 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	2085      	movs	r0, #133	; 0x85
 8001f74:	f001 f8ec 	bl	8003150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 8001f78:	2085      	movs	r0, #133	; 0x85
 8001f7a:	f001 f903 	bl	8003184 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */

  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	4002f000 	.word	0x4002f000
 8001f8c:	46020c00 	.word	0x46020c00

08001f90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b0ca      	sub	sp, #296	; 0x128
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f9a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f9e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fb4:	22e0      	movs	r2, #224	; 0xe0
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f00b fc16 	bl	800d7ea <memset>
  if(hi2c->Instance==I2C1)
 8001fbe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001fc2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4ad3      	ldr	r2, [pc, #844]	; (8002318 <HAL_I2C_MspInit+0x388>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d14f      	bne.n	8002070 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fd0:	f04f 0240 	mov.w	r2, #64	; 0x40
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fe2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f006 fe60 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001ff2:	f7ff fdc3 	bl	8001b7c <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ff6:	4bc9      	ldr	r3, [pc, #804]	; (800231c <HAL_I2C_MspInit+0x38c>)
 8001ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ffc:	4ac7      	ldr	r2, [pc, #796]	; (800231c <HAL_I2C_MspInit+0x38c>)
 8001ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002002:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002006:	4bc5      	ldr	r3, [pc, #788]	; (800231c <HAL_I2C_MspInit+0x38c>)
 8002008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800200c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002014:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002018:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800201c:	2312      	movs	r3, #18
 800201e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800202e:	2304      	movs	r3, #4
 8002030:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002034:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002038:	4619      	mov	r1, r3
 800203a:	48b9      	ldr	r0, [pc, #740]	; (8002320 <HAL_I2C_MspInit+0x390>)
 800203c:	f002 fc5c 	bl	80048f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002040:	4bb6      	ldr	r3, [pc, #728]	; (800231c <HAL_I2C_MspInit+0x38c>)
 8002042:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002046:	4ab5      	ldr	r2, [pc, #724]	; (800231c <HAL_I2C_MspInit+0x38c>)
 8002048:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800204c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002050:	4bb2      	ldr	r3, [pc, #712]	; (800231c <HAL_I2C_MspInit+0x38c>)
 8002052:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002056:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800205a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800205e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002068:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800206c:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C6_MspInit 1 */

  /* USER CODE END I2C6_MspInit 1 */
  }

}
 800206e:	e14e      	b.n	800230e <HAL_I2C_MspInit+0x37e>
  else if(hi2c->Instance==I2C2)
 8002070:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002074:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4aa9      	ldr	r2, [pc, #676]	; (8002324 <HAL_I2C_MspInit+0x394>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d157      	bne.n	8002132 <HAL_I2C_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002082:	f04f 0280 	mov.w	r2, #128	; 0x80
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002094:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002098:	4618      	mov	r0, r3
 800209a:	f006 fe07 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 80020a4:	f7ff fd6a 	bl	8001b7c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a8:	4b9c      	ldr	r3, [pc, #624]	; (800231c <HAL_I2C_MspInit+0x38c>)
 80020aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ae:	4a9b      	ldr	r2, [pc, #620]	; (800231c <HAL_I2C_MspInit+0x38c>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020b8:	4b98      	ldr	r3, [pc, #608]	; (800231c <HAL_I2C_MspInit+0x38c>)
 80020ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020be:	f003 0202 	and.w	r2, r3, #2
 80020c2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80020c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80020d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020d4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80020d6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80020da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020de:	2312      	movs	r3, #18
 80020e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020f0:	2304      	movs	r3, #4
 80020f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80020fa:	4619      	mov	r1, r3
 80020fc:	488a      	ldr	r0, [pc, #552]	; (8002328 <HAL_I2C_MspInit+0x398>)
 80020fe:	f002 fbfb 	bl	80048f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002102:	4b86      	ldr	r3, [pc, #536]	; (800231c <HAL_I2C_MspInit+0x38c>)
 8002104:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002108:	4a84      	ldr	r2, [pc, #528]	; (800231c <HAL_I2C_MspInit+0x38c>)
 800210a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800210e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002112:	4b82      	ldr	r3, [pc, #520]	; (800231c <HAL_I2C_MspInit+0x38c>)
 8002114:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002118:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800211c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800212a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	e0ed      	b.n	800230e <HAL_I2C_MspInit+0x37e>
  else if(hi2c->Instance==I2C4)
 8002132:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002136:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a7b      	ldr	r2, [pc, #492]	; (800232c <HAL_I2C_MspInit+0x39c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d157      	bne.n	80021f4 <HAL_I2C_MspInit+0x264>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002144:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002150:	2300      	movs	r3, #0
 8002152:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002156:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800215a:	4618      	mov	r0, r3
 800215c:	f006 fda6 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_MspInit+0x1da>
      Error_Handler();
 8002166:	f7ff fd09 	bl	8001b7c <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800216a:	4b6c      	ldr	r3, [pc, #432]	; (800231c <HAL_I2C_MspInit+0x38c>)
 800216c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002170:	4a6a      	ldr	r2, [pc, #424]	; (800231c <HAL_I2C_MspInit+0x38c>)
 8002172:	f043 0308 	orr.w	r3, r3, #8
 8002176:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800217a:	4b68      	ldr	r3, [pc, #416]	; (800231c <HAL_I2C_MspInit+0x38c>)
 800217c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002180:	f003 0208 	and.w	r2, r3, #8
 8002184:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002188:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002192:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002196:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002198:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800219c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a0:	2312      	movs	r3, #18
 80021a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80021b2:	2304      	movs	r3, #4
 80021b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021b8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80021bc:	4619      	mov	r1, r3
 80021be:	485c      	ldr	r0, [pc, #368]	; (8002330 <HAL_I2C_MspInit+0x3a0>)
 80021c0:	f002 fb9a 	bl	80048f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80021c4:	4b55      	ldr	r3, [pc, #340]	; (800231c <HAL_I2C_MspInit+0x38c>)
 80021c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80021ca:	4a54      	ldr	r2, [pc, #336]	; (800231c <HAL_I2C_MspInit+0x38c>)
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80021d4:	4b51      	ldr	r3, [pc, #324]	; (800231c <HAL_I2C_MspInit+0x38c>)
 80021d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80021da:	f003 0202 	and.w	r2, r3, #2
 80021de:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80021e2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80021ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021f0:	681b      	ldr	r3, [r3, #0]
}
 80021f2:	e08c      	b.n	800230e <HAL_I2C_MspInit+0x37e>
  else if(hi2c->Instance==I2C6)
 80021f4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80021f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a4c      	ldr	r2, [pc, #304]	; (8002334 <HAL_I2C_MspInit+0x3a4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	f040 8083 	bne.w	800230e <HAL_I2C_MspInit+0x37e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C6;
 8002208:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c6ClockSelection = RCC_I2C6CLKSOURCE_PCLK1;
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800221a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800221e:	4618      	mov	r0, r3
 8002220:	f006 fd44 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_I2C_MspInit+0x29e>
      Error_Handler();
 800222a:	f7ff fca7 	bl	8001b7c <Error_Handler>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800222e:	4b3b      	ldr	r3, [pc, #236]	; (800231c <HAL_I2C_MspInit+0x38c>)
 8002230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002234:	4a39      	ldr	r2, [pc, #228]	; (800231c <HAL_I2C_MspInit+0x38c>)
 8002236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800223a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800223e:	4b37      	ldr	r3, [pc, #220]	; (800231c <HAL_I2C_MspInit+0x38c>)
 8002240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002244:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002248:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800224c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002256:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800225a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800225c:	4b2f      	ldr	r3, [pc, #188]	; (800231c <HAL_I2C_MspInit+0x38c>)
 800225e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002262:	4a2e      	ldr	r2, [pc, #184]	; (800231c <HAL_I2C_MspInit+0x38c>)
 8002264:	f043 0320 	orr.w	r3, r3, #32
 8002268:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800226c:	4b2b      	ldr	r3, [pc, #172]	; (800231c <HAL_I2C_MspInit+0x38c>)
 800226e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002272:	f003 0220 	and.w	r2, r3, #32
 8002276:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800227a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002284:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002288:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800228a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800228e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002292:	2312      	movs	r3, #18
 8002294:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 80022a4:	2302      	movs	r3, #2
 80022a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80022aa:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80022ae:	4619      	mov	r1, r3
 80022b0:	4821      	ldr	r0, [pc, #132]	; (8002338 <HAL_I2C_MspInit+0x3a8>)
 80022b2:	f002 fb21 	bl	80048f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022b6:	2301      	movs	r3, #1
 80022b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022bc:	2312      	movs	r3, #18
 80022be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 80022ce:	2302      	movs	r3, #2
 80022d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022d4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80022d8:	4619      	mov	r1, r3
 80022da:	4818      	ldr	r0, [pc, #96]	; (800233c <HAL_I2C_MspInit+0x3ac>)
 80022dc:	f002 fb0c 	bl	80048f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C6_CLK_ENABLE();
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <HAL_I2C_MspInit+0x38c>)
 80022e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80022e6:	4a0d      	ldr	r2, [pc, #52]	; (800231c <HAL_I2C_MspInit+0x38c>)
 80022e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ec:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_I2C_MspInit+0x38c>)
 80022f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80022f6:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80022fa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80022fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002308:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800230c:	681b      	ldr	r3, [r3, #0]
}
 800230e:	bf00      	nop
 8002310:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40005400 	.word	0x40005400
 800231c:	46020c00 	.word	0x46020c00
 8002320:	42021800 	.word	0x42021800
 8002324:	40005800 	.word	0x40005800
 8002328:	42020400 	.word	0x42020400
 800232c:	40008400 	.word	0x40008400
 8002330:	42020c00 	.word	0x42020c00
 8002334:	40009c00 	.word	0x40009c00
 8002338:	42022400 	.word	0x42022400
 800233c:	42021400 	.word	0x42021400

08002340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b0c8      	sub	sp, #288	; 0x120
 8002344:	af00      	add	r7, sp, #0
 8002346:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800234a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800234e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002360:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002364:	22e0      	movs	r2, #224	; 0xe0
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f00b fa3e 	bl	800d7ea <memset>
  if(huart->Instance==LPUART1)
 800236e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002372:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4aa1      	ldr	r2, [pc, #644]	; (8002600 <HAL_UART_MspInit+0x2c0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d17b      	bne.n	8002478 <HAL_UART_MspInit+0x138>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002380:	f04f 0220 	mov.w	r2, #32
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 800238c:	2300      	movs	r3, #0
 800238e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002396:	4618      	mov	r0, r3
 8002398:	f006 fc88 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80023a2:	f7ff fbeb 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80023a6:	4b97      	ldr	r3, [pc, #604]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 80023a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80023ac:	4a95      	ldr	r2, [pc, #596]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 80023ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023b2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80023b6:	4b93      	ldr	r3, [pc, #588]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 80023b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80023bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023c4:	4b8f      	ldr	r3, [pc, #572]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 80023c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023ca:	4a8e      	ldr	r2, [pc, #568]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 80023cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80023d4:	4b8b      	ldr	r3, [pc, #556]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 80023d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023da:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80023de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80023e2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80023ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023f0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f2:	4b84      	ldr	r3, [pc, #528]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 80023f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023f8:	4a82      	ldr	r2, [pc, #520]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 80023fa:	f043 0302 	orr.w	r3, r3, #2
 80023fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002402:	4b80      	ldr	r3, [pc, #512]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 8002404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002408:	f003 0202 	and.w	r2, r3, #2
 800240c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800241a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800241e:	681b      	ldr	r3, [r3, #0]
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    PG5     ------> LPUART1_CTS
    PB1     ------> LPUART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_5;
 8002420:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8002424:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002428:	2302      	movs	r3, #2
 800242a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800243a:	2308      	movs	r3, #8
 800243c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002440:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002444:	4619      	mov	r1, r3
 8002446:	4870      	ldr	r0, [pc, #448]	; (8002608 <HAL_UART_MspInit+0x2c8>)
 8002448:	f002 fa56 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800244c:	2302      	movs	r3, #2
 800244e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002452:	2302      	movs	r3, #2
 8002454:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002464:	2308      	movs	r3, #8
 8002466:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800246e:	4619      	mov	r1, r3
 8002470:	4866      	ldr	r0, [pc, #408]	; (800260c <HAL_UART_MspInit+0x2cc>)
 8002472:	f002 fa41 	bl	80048f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002476:	e0bd      	b.n	80025f4 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART1)
 8002478:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800247c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a62      	ldr	r2, [pc, #392]	; (8002610 <HAL_UART_MspInit+0x2d0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d155      	bne.n	8002536 <HAL_UART_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800248a:	f04f 0201 	mov.w	r2, #1
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002496:	2300      	movs	r3, #0
 8002498:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800249a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800249e:	4618      	mov	r0, r3
 80024a0:	f006 fc04 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_UART_MspInit+0x16e>
      Error_Handler();
 80024aa:	f7ff fb67 	bl	8001b7c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ae:	4b55      	ldr	r3, [pc, #340]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 80024b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80024b4:	4a53      	ldr	r2, [pc, #332]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 80024b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ba:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80024be:	4b51      	ldr	r3, [pc, #324]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 80024c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80024c4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80024c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80024cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80024d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024da:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024dc:	4b49      	ldr	r3, [pc, #292]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 80024de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024e2:	4a48      	ldr	r2, [pc, #288]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024ec:	4b45      	ldr	r3, [pc, #276]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 80024ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024f2:	f003 0202 	and.w	r2, r3, #2
 80024f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80024fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002504:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002508:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800250a:	23c0      	movs	r3, #192	; 0xc0
 800250c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002510:	2302      	movs	r3, #2
 8002512:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002522:	2307      	movs	r3, #7
 8002524:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002528:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800252c:	4619      	mov	r1, r3
 800252e:	4837      	ldr	r0, [pc, #220]	; (800260c <HAL_UART_MspInit+0x2cc>)
 8002530:	f002 f9e2 	bl	80048f8 <HAL_GPIO_Init>
}
 8002534:	e05e      	b.n	80025f4 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART6)
 8002536:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800253a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a34      	ldr	r2, [pc, #208]	; (8002614 <HAL_UART_MspInit+0x2d4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d155      	bne.n	80025f4 <HAL_UART_MspInit+0x2b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002548:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800255a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800255e:	4618      	mov	r0, r3
 8002560:	f006 fba4 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_UART_MspInit+0x22e>
      Error_Handler();
 800256a:	f7ff fb07 	bl	8001b7c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800256e:	4b25      	ldr	r3, [pc, #148]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 8002570:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002574:	4a23      	ldr	r2, [pc, #140]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 8002576:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800257a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800257e:	4b21      	ldr	r3, [pc, #132]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 8002580:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002584:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002588:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800258c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002596:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800259a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 800259e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025a2:	4a18      	ldr	r2, [pc, #96]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 80025a4:	f043 0304 	orr.w	r3, r3, #4
 80025a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80025ac:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_UART_MspInit+0x2c4>)
 80025ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025b2:	f003 0204 	and.w	r2, r3, #4
 80025b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80025ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80025c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025c8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80025ca:	230c      	movs	r3, #12
 80025cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025dc:	2300      	movs	r3, #0
 80025de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80025e2:	2307      	movs	r3, #7
 80025e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80025ec:	4619      	mov	r1, r3
 80025ee:	480a      	ldr	r0, [pc, #40]	; (8002618 <HAL_UART_MspInit+0x2d8>)
 80025f0:	f002 f982 	bl	80048f8 <HAL_GPIO_Init>
}
 80025f4:	bf00      	nop
 80025f6:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	46002400 	.word	0x46002400
 8002604:	46020c00 	.word	0x46020c00
 8002608:	42021800 	.word	0x42021800
 800260c:	42020400 	.word	0x42020400
 8002610:	40013800 	.word	0x40013800
 8002614:	40006400 	.word	0x40006400
 8002618:	42020800 	.word	0x42020800

0800261c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b0bc      	sub	sp, #240	; 0xf0
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002624:	f107 0310 	add.w	r3, r7, #16
 8002628:	22e0      	movs	r2, #224	; 0xe0
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f00b f8dc 	bl	800d7ea <memset>
  if(hltdc->Instance==LTDC)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a22      	ldr	r2, [pc, #136]	; (80026c0 <HAL_LTDC_MspInit+0xa4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d13d      	bne.n	80026b8 <HAL_LTDC_MspInit+0x9c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0302 	mov.w	r3, #2
 8002644:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 8002648:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800264c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8002650:	2303      	movs	r3, #3
 8002652:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLL2.PLL2M = 1;
 8002654:	2301      	movs	r3, #1
 8002656:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLL2.PLL2N = 20;
 8002658:	2314      	movs	r3, #20
 800265a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2P = 2;
 800265c:	2302      	movs	r3, #2
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLL2.PLL2Q = 2;
 8002660:	2302      	movs	r3, #2
 8002662:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLL2.PLL2R = 2;
 8002664:	2302      	movs	r3, #2
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8002668:	230c      	movs	r3, #12
 800266a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8002670:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002674:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002676:	f107 0310 	add.w	r3, r7, #16
 800267a:	4618      	mov	r0, r3
 800267c:	f006 fb16 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8002686:	f7ff fa79 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_LTDC_MspInit+0xa8>)
 800268c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002690:	4a0c      	ldr	r2, [pc, #48]	; (80026c4 <HAL_LTDC_MspInit+0xa8>)
 8002692:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002696:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <HAL_LTDC_MspInit+0xa8>)
 800269c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80026a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80026a8:	2200      	movs	r2, #0
 80026aa:	2100      	movs	r1, #0
 80026ac:	2087      	movs	r0, #135	; 0x87
 80026ae:	f000 fd4f 	bl	8003150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80026b2:	2087      	movs	r0, #135	; 0x87
 80026b4:	f000 fd66 	bl	8003184 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80026b8:	bf00      	nop
 80026ba:	37f0      	adds	r7, #240	; 0xf0
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40016800 	.word	0x40016800
 80026c4:	46020c00 	.word	0x46020c00

080026c8 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b0ca      	sub	sp, #296	; 0x128
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80026d2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026d6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026ec:	22e0      	movs	r2, #224	; 0xe0
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f00b f87a 	bl	800d7ea <memset>
  if(hospi->Instance==OCTOSPI1)
 80026f6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80026fa:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a93      	ldr	r2, [pc, #588]	; (8002950 <HAL_OSPI_MspInit+0x288>)
 8002704:	4293      	cmp	r3, r2
 8002706:	f040 8133 	bne.w	8002970 <HAL_OSPI_MspInit+0x2a8>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800270a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002716:	2300      	movs	r3, #0
 8002718:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800271c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002720:	4618      	mov	r0, r3
 8002722:	f006 fac3 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 800272c:	f7ff fa26 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8002730:	4b88      	ldr	r3, [pc, #544]	; (8002954 <HAL_OSPI_MspInit+0x28c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3301      	adds	r3, #1
 8002736:	4a87      	ldr	r2, [pc, #540]	; (8002954 <HAL_OSPI_MspInit+0x28c>)
 8002738:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 800273a:	4b86      	ldr	r3, [pc, #536]	; (8002954 <HAL_OSPI_MspInit+0x28c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d10e      	bne.n	8002760 <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8002742:	4b85      	ldr	r3, [pc, #532]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 8002744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002748:	4a83      	ldr	r2, [pc, #524]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 800274a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800274e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002752:	4b81      	ldr	r3, [pc, #516]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 8002754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002760:	4b7d      	ldr	r3, [pc, #500]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 8002762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002766:	4a7c      	ldr	r2, [pc, #496]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 8002768:	f043 0310 	orr.w	r3, r3, #16
 800276c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002770:	4b79      	ldr	r3, [pc, #484]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002776:	f003 0210 	and.w	r2, r3, #16
 800277a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800277e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002788:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800278c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800278e:	4b72      	ldr	r3, [pc, #456]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 8002790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002794:	4a70      	ldr	r2, [pc, #448]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 8002796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800279a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800279e:	4b6e      	ldr	r3, [pc, #440]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 80027a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027a4:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80027a8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80027ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80027b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027ba:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027bc:	4b66      	ldr	r3, [pc, #408]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 80027be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027c2:	4a65      	ldr	r2, [pc, #404]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 80027c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027cc:	4b62      	ldr	r3, [pc, #392]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 80027ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027d2:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80027d6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80027da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80027e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027e8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80027ea:	4b5b      	ldr	r3, [pc, #364]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 80027ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f0:	4a59      	ldr	r2, [pc, #356]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 80027f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027fa:	4b57      	ldr	r3, [pc, #348]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 80027fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002800:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002804:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002808:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002812:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002816:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002818:	4b4f      	ldr	r3, [pc, #316]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 800281a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800281e:	4a4e      	ldr	r2, [pc, #312]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002828:	4b4b      	ldr	r3, [pc, #300]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 800282a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800282e:	f003 0202 	and.w	r2, r3, #2
 8002832:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002836:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002840:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002844:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002846:	4b44      	ldr	r3, [pc, #272]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 8002848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800284c:	4a42      	ldr	r2, [pc, #264]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 800284e:	f043 0310 	orr.w	r3, r3, #16
 8002852:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002856:	4b40      	ldr	r3, [pc, #256]	; (8002958 <HAL_OSPI_MspInit+0x290>)
 8002858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800285c:	f003 0210 	and.w	r2, r3, #16
 8002860:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002864:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800286e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002872:	681b      	ldr	r3, [r3, #0]
    PH9     ------> OCTOSPIM_P2_IO4
    PH12     ------> OCTOSPIM_P2_IO7
    PB10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9
 8002874:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002878:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002888:	2303      	movs	r3, #3
 800288a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800288e:	2305      	movs	r3, #5
 8002890:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002894:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002898:	4619      	mov	r1, r3
 800289a:	4830      	ldr	r0, [pc, #192]	; (800295c <HAL_OSPI_MspInit+0x294>)
 800289c:	f002 f82c 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028a0:	2340      	movs	r3, #64	; 0x40
 80028a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b2:	2303      	movs	r3, #3
 80028b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80028b8:	2303      	movs	r3, #3
 80028ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028be:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80028c2:	4619      	mov	r1, r3
 80028c4:	4826      	ldr	r0, [pc, #152]	; (8002960 <HAL_OSPI_MspInit+0x298>)
 80028c6:	f002 f817 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80028ca:	230e      	movs	r3, #14
 80028cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028dc:	2303      	movs	r3, #3
 80028de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPI2;
 80028e2:	2306      	movs	r3, #6
 80028e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80028e8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80028ec:	4619      	mov	r1, r3
 80028ee:	481d      	ldr	r0, [pc, #116]	; (8002964 <HAL_OSPI_MspInit+0x29c>)
 80028f0:	f002 f802 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 80028f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fc:	2302      	movs	r3, #2
 80028fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002908:	2303      	movs	r3, #3
 800290a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800290e:	230a      	movs	r3, #10
 8002910:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002914:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002918:	4619      	mov	r1, r3
 800291a:	4813      	ldr	r0, [pc, #76]	; (8002968 <HAL_OSPI_MspInit+0x2a0>)
 800291c:	f001 ffec 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002920:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002924:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002928:	2302      	movs	r3, #2
 800292a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002934:	2303      	movs	r3, #3
 8002936:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800293a:	230a      	movs	r3, #10
 800293c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002940:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002944:	4619      	mov	r1, r3
 8002946:	4809      	ldr	r0, [pc, #36]	; (800296c <HAL_OSPI_MspInit+0x2a4>)
 8002948:	f001 ffd6 	bl	80048f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 800294c:	e08f      	b.n	8002a6e <HAL_OSPI_MspInit+0x3a6>
 800294e:	bf00      	nop
 8002950:	420d1400 	.word	0x420d1400
 8002954:	2000146c 	.word	0x2000146c
 8002958:	46020c00 	.word	0x46020c00
 800295c:	42021c00 	.word	0x42021c00
 8002960:	42021800 	.word	0x42021800
 8002964:	42022000 	.word	0x42022000
 8002968:	42020400 	.word	0x42020400
 800296c:	42021000 	.word	0x42021000
  else if(hospi->Instance==OCTOSPI2)
 8002970:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002974:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a3e      	ldr	r2, [pc, #248]	; (8002a78 <HAL_OSPI_MspInit+0x3b0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d175      	bne.n	8002a6e <HAL_OSPI_MspInit+0x3a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002982:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002994:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002998:	4618      	mov	r0, r3
 800299a:	f006 f987 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_OSPI_MspInit+0x2e0>
      Error_Handler();
 80029a4:	f7ff f8ea 	bl	8001b7c <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 80029a8:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <HAL_OSPI_MspInit+0x3b4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3301      	adds	r3, #1
 80029ae:	4a33      	ldr	r2, [pc, #204]	; (8002a7c <HAL_OSPI_MspInit+0x3b4>)
 80029b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 80029b2:	4b32      	ldr	r3, [pc, #200]	; (8002a7c <HAL_OSPI_MspInit+0x3b4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d116      	bne.n	80029e8 <HAL_OSPI_MspInit+0x320>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 80029ba:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <HAL_OSPI_MspInit+0x3b8>)
 80029bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c0:	4a2f      	ldr	r2, [pc, #188]	; (8002a80 <HAL_OSPI_MspInit+0x3b8>)
 80029c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029ca:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_OSPI_MspInit+0x3b8>)
 80029cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029d0:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80029d4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80029d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80029e2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80029e6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <HAL_OSPI_MspInit+0x3b8>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	4a24      	ldr	r2, [pc, #144]	; (8002a80 <HAL_OSPI_MspInit+0x3b8>)
 80029f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029f8:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <HAL_OSPI_MspInit+0x3b8>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fe:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002a02:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a06:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a14:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a16:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <HAL_OSPI_MspInit+0x3b8>)
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	4a18      	ldr	r2, [pc, #96]	; (8002a80 <HAL_OSPI_MspInit+0x3b8>)
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a26:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <HAL_OSPI_MspInit+0x3b8>)
 8002a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a2c:	f003 0201 	and.w	r2, r3, #1
 8002a30:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a34:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a42:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a56:	2303      	movs	r3, #3
 8002a58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI2;
 8002a5c:	230a      	movs	r3, #10
 8002a5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a62:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002a66:	4619      	mov	r1, r3
 8002a68:	4806      	ldr	r0, [pc, #24]	; (8002a84 <HAL_OSPI_MspInit+0x3bc>)
 8002a6a:	f001 ff45 	bl	80048f8 <HAL_GPIO_Init>
}
 8002a6e:	bf00      	nop
 8002a70:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	420d2400 	.word	0x420d2400
 8002a7c:	2000146c 	.word	0x2000146c
 8002a80:	46020c00 	.word	0x46020c00
 8002a84:	42020000 	.word	0x42020000

08002a88 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b0bc      	sub	sp, #240	; 0xf0
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a90:	f107 0310 	add.w	r3, r7, #16
 8002a94:	22e0      	movs	r2, #224	; 0xe0
 8002a96:	2100      	movs	r1, #0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f00a fea6 	bl	800d7ea <memset>
  if(hrtc->Instance==RTC)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1d      	ldr	r2, [pc, #116]	; (8002b18 <HAL_RTC_MspInit+0x90>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d132      	bne.n	8002b0e <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002aa8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002abc:	f107 0310 	add.w	r3, r7, #16
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f006 f8f3 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002acc:	f7ff f856 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ad0:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_RTC_MspInit+0x94>)
 8002ad2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ad6:	4a11      	ldr	r2, [pc, #68]	; (8002b1c <HAL_RTC_MspInit+0x94>)
 8002ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002adc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <HAL_RTC_MspInit+0x94>)
 8002ae2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ae6:	4a0d      	ldr	r2, [pc, #52]	; (8002b1c <HAL_RTC_MspInit+0x94>)
 8002ae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002aec:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002af0:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <HAL_RTC_MspInit+0x94>)
 8002af2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002afe:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <HAL_RTC_MspInit+0x94>)
 8002b00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b04:	4a05      	ldr	r2, [pc, #20]	; (8002b1c <HAL_RTC_MspInit+0x94>)
 8002b06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b0e:	bf00      	nop
 8002b10:	37f0      	adds	r7, #240	; 0xf0
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	46007800 	.word	0x46007800
 8002b1c:	46020c00 	.word	0x46020c00

08002b20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b0c4      	sub	sp, #272	; 0x110
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b2e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b40:	f107 0318 	add.w	r3, r7, #24
 8002b44:	22e0      	movs	r2, #224	; 0xe0
 8002b46:	2100      	movs	r1, #0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f00a fe4e 	bl	800d7ea <memset>
  if(hspi->Instance==SPI1)
 8002b4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a41      	ldr	r2, [pc, #260]	; (8002c60 <HAL_SPI_MspInit+0x140>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d17a      	bne.n	8002c56 <HAL_SPI_MspInit+0x136>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002b60:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8002b6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b74:	f107 0318 	add.w	r3, r7, #24
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f006 f897 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8002b84:	f7fe fffa 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b88:	4b36      	ldr	r3, [pc, #216]	; (8002c64 <HAL_SPI_MspInit+0x144>)
 8002b8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b8e:	4a35      	ldr	r2, [pc, #212]	; (8002c64 <HAL_SPI_MspInit+0x144>)
 8002b90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b94:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002b98:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <HAL_SPI_MspInit+0x144>)
 8002b9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba6:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <HAL_SPI_MspInit+0x144>)
 8002ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bac:	4a2d      	ldr	r2, [pc, #180]	; (8002c64 <HAL_SPI_MspInit+0x144>)
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002bb6:	4b2b      	ldr	r3, [pc, #172]	; (8002c64 <HAL_SPI_MspInit+0x144>)
 8002bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bbc:	f003 0202 	and.w	r2, r3, #2
 8002bc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bc4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bce:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002bd2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd4:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <HAL_SPI_MspInit+0x144>)
 8002bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bda:	4a22      	ldr	r2, [pc, #136]	; (8002c64 <HAL_SPI_MspInit+0x144>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002be4:	4b1f      	ldr	r3, [pc, #124]	; (8002c64 <HAL_SPI_MspInit+0x144>)
 8002be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bea:	f003 0201 	and.w	r2, r3, #1
 8002bee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c00:	681b      	ldr	r3, [r3, #0]
    PB0     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c1a:	2305      	movs	r3, #5
 8002c1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c20:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002c24:	4619      	mov	r1, r3
 8002c26:	4810      	ldr	r0, [pc, #64]	; (8002c68 <HAL_SPI_MspInit+0x148>)
 8002c28:	f001 fe66 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 8002c2c:	23e0      	movs	r3, #224	; 0xe0
 8002c2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c44:	2305      	movs	r3, #5
 8002c46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4806      	ldr	r0, [pc, #24]	; (8002c6c <HAL_SPI_MspInit+0x14c>)
 8002c52:	f001 fe51 	bl	80048f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c56:	bf00      	nop
 8002c58:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40013000 	.word	0x40013000
 8002c64:	46020c00 	.word	0x46020c00
 8002c68:	42020400 	.word	0x42020400
 8002c6c:	42020000 	.word	0x42020000

08002c70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08e      	sub	sp, #56	; 0x38
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c80:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <HAL_InitTick+0xcc>)
 8002c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c86:	4a2d      	ldr	r2, [pc, #180]	; (8002d3c <HAL_InitTick+0xcc>)
 8002c88:	f043 0310 	orr.w	r3, r3, #16
 8002c8c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002c90:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <HAL_InitTick+0xcc>)
 8002c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c9e:	f107 0210 	add.w	r2, r7, #16
 8002ca2:	f107 0314 	add.w	r3, r7, #20
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f005 ff15 	bl	8008ad8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002cae:	f005 fed7 	bl	8008a60 <HAL_RCC_GetPCLK1Freq>
 8002cb2:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb6:	4a22      	ldr	r2, [pc, #136]	; (8002d40 <HAL_InitTick+0xd0>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	0c9b      	lsrs	r3, r3, #18
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002cc2:	4b20      	ldr	r3, [pc, #128]	; (8002d44 <HAL_InitTick+0xd4>)
 8002cc4:	4a20      	ldr	r2, [pc, #128]	; (8002d48 <HAL_InitTick+0xd8>)
 8002cc6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002cc8:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <HAL_InitTick+0xd4>)
 8002cca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002cd0:	4a1c      	ldr	r2, [pc, #112]	; (8002d44 <HAL_InitTick+0xd4>)
 8002cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <HAL_InitTick+0xd4>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cdc:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_InitTick+0xd4>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002ce2:	4818      	ldr	r0, [pc, #96]	; (8002d44 <HAL_InitTick+0xd4>)
 8002ce4:	f009 fc00 	bl	800c4e8 <HAL_TIM_Base_Init>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8002cee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d118      	bne.n	8002d28 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002cf6:	4813      	ldr	r0, [pc, #76]	; (8002d44 <HAL_InitTick+0xd4>)
 8002cf8:	f009 fc58 	bl	800c5ac <HAL_TIM_Base_Start_IT>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8002d02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10e      	bne.n	8002d28 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b0f      	cmp	r3, #15
 8002d0e:	d808      	bhi.n	8002d22 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8002d10:	2200      	movs	r2, #0
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	2031      	movs	r0, #49	; 0x31
 8002d16:	f000 fa1b 	bl	8003150 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d1a:	4a0c      	ldr	r2, [pc, #48]	; (8002d4c <HAL_InitTick+0xdc>)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	e002      	b.n	8002d28 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002d28:	2031      	movs	r0, #49	; 0x31
 8002d2a:	f000 fa2b 	bl	8003184 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8002d2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3738      	adds	r7, #56	; 0x38
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	46020c00 	.word	0x46020c00
 8002d40:	431bde83 	.word	0x431bde83
 8002d44:	20001470 	.word	0x20001470
 8002d48:	40001000 	.word	0x40001000
 8002d4c:	20000d04 	.word	0x20000d04

08002d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002d54:	f005 ff08 	bl	8008b68 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d58:	e7fe      	b.n	8002d58 <NMI_Handler+0x8>

08002d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d5e:	e7fe      	b.n	8002d5e <HardFault_Handler+0x4>

08002d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d64:	e7fe      	b.n	8002d64 <MemManage_Handler+0x4>

08002d66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d6a:	e7fe      	b.n	8002d6a <BusFault_Handler+0x4>

08002d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d70:	e7fe      	b.n	8002d70 <UsageFault_Handler+0x4>

08002d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002db0:	4802      	ldr	r0, [pc, #8]	; (8002dbc <TIM6_IRQHandler+0x10>)
 8002db2:	f009 fc9b 	bl	800c6ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20001470 	.word	0x20001470

08002dc0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002dc4:	4802      	ldr	r0, [pc, #8]	; (8002dd0 <DMA2D_IRQHandler+0x10>)
 8002dc6:	f000 fc65 	bl	8003694 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000e64 	.word	0x20000e64

08002dd4 <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 8002dd8:	4802      	ldr	r0, [pc, #8]	; (8002de4 <GPU2D_IRQHandler+0x10>)
 8002dda:	f001 ffa7 	bl	8004d2c <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000f30 	.word	0x20000f30

08002de8 <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 8002dec:	4802      	ldr	r0, [pc, #8]	; (8002df8 <GPU2D_ER_IRQHandler+0x10>)
 8002dee:	f001 ffc3 	bl	8004d78 <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000f30 	.word	0x20000f30

08002dfc <GFXMMU_IRQHandler>:

/**
  * @brief This function handles GFXMMU global interrupt.
  */
void GFXMMU_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GFXMMU_IRQn 0 */

  /* USER CODE END GFXMMU_IRQn 0 */
  HAL_GFXMMU_IRQHandler(&hgfxmmu);
 8002e00:	4802      	ldr	r0, [pc, #8]	; (8002e0c <GFXMMU_IRQHandler+0x10>)
 8002e02:	f001 fd49 	bl	8004898 <HAL_GFXMMU_IRQHandler>
  /* USER CODE BEGIN GFXMMU_IRQn 1 */

  /* USER CODE END GFXMMU_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000ee8 	.word	0x20000ee8

08002e10 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002e14:	4802      	ldr	r0, [pc, #8]	; (8002e20 <LTDC_IRQHandler+0x10>)
 8002e16:	f002 ff45 	bl	8005ca4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20001248 	.word	0x20001248

08002e24 <DSI_IRQHandler>:

/**
  * @brief This function handles DSIHOST global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002e28:	4802      	ldr	r0, [pc, #8]	; (8002e34 <DSI_IRQHandler+0x10>)
 8002e2a:	f001 f88b 	bl	8003f44 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000ec4 	.word	0x20000ec4

08002e38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e3c:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <SystemInit+0x68>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e42:	4a17      	ldr	r2, [pc, #92]	; (8002ea0 <SystemInit+0x68>)
 8002e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002e4c:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <SystemInit+0x6c>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002e52:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <SystemInit+0x6c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002e58:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <SystemInit+0x6c>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <SystemInit+0x6c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <SystemInit+0x6c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a0e      	ldr	r2, [pc, #56]	; (8002ea4 <SystemInit+0x6c>)
 8002e6a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002e6e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002e72:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <SystemInit+0x6c>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <SystemInit+0x6c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <SystemInit+0x6c>)
 8002e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e84:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002e86:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <SystemInit+0x6c>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <SystemInit+0x68>)
 8002e8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e92:	609a      	str	r2, [r3, #8]
  #endif
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	e000ed00 	.word	0xe000ed00
 8002ea4:	46020c00 	.word	0x46020c00

08002ea8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ee0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002eac:	f7ff ffc4 	bl	8002e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002eb0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002eb2:	e003      	b.n	8002ebc <LoopCopyDataInit>

08002eb4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002eb6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002eb8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002eba:	3104      	adds	r1, #4

08002ebc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ebc:	480a      	ldr	r0, [pc, #40]	; (8002ee8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <LoopForever+0xe>)
	adds	r2, r0, r1
 8002ec0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002ec2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002ec4:	d3f6      	bcc.n	8002eb4 <CopyDataInit>
	ldr	r2, =_sbss
 8002ec6:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ec8:	e002      	b.n	8002ed0 <LoopFillZerobss>

08002eca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002eca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ecc:	f842 3b04 	str.w	r3, [r2], #4

08002ed0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <LoopForever+0x16>)
	cmp	r2, r3
 8002ed2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002ed4:	d3f9      	bcc.n	8002eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ed6:	f00a fc91 	bl	800d7fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002eda:	f7fd fbe9 	bl	80006b0 <main>

08002ede <LoopForever>:

LoopForever:
    b LoopForever
 8002ede:	e7fe      	b.n	8002ede <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002ee0:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8002ee4:	0800d96c 	.word	0x0800d96c
	ldr	r0, =_sdata
 8002ee8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002eec:	20000d09 	.word	0x20000d09
	ldr	r2, =_sbss
 8002ef0:	20000d0c 	.word	0x20000d0c
	ldr	r3, = _ebss
 8002ef4:	200014e4 	.word	0x200014e4

08002ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ef8:	e7fe      	b.n	8002ef8 <ADC1_2_IRQHandler>
	...

08002efc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <HAL_Init+0x4c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a10      	ldr	r2, [pc, #64]	; (8002f48 <HAL_Init+0x4c>)
 8002f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f0c:	2003      	movs	r0, #3
 8002f0e:	f000 f914 	bl	800313a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002f12:	f005 fc89 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 8002f16:	4602      	mov	r2, r0
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <HAL_Init+0x50>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	490b      	ldr	r1, [pc, #44]	; (8002f50 <HAL_Init+0x54>)
 8002f22:	5ccb      	ldrb	r3, [r1, r3]
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
 8002f28:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <HAL_Init+0x58>)
 8002f2a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f2c:	200f      	movs	r0, #15
 8002f2e:	f7ff fe9f 	bl	8002c70 <HAL_InitTick>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e002      	b.n	8002f42 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f3c:	f7fe fe24 	bl	8001b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40022000 	.word	0x40022000
 8002f4c:	46020c00 	.word	0x46020c00
 8002f50:	0800d85c 	.word	0x0800d85c
 8002f54:	20000d00 	.word	0x20000d00

08002f58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_IncTick+0x20>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_IncTick+0x24>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4413      	add	r3, r2
 8002f68:	4a04      	ldr	r2, [pc, #16]	; (8002f7c <HAL_IncTick+0x24>)
 8002f6a:	6013      	str	r3, [r2, #0]
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	20000d08 	.word	0x20000d08
 8002f7c:	200014bc 	.word	0x200014bc

08002f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return uwTick;
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <HAL_GetTick+0x14>)
 8002f86:	681b      	ldr	r3, [r3, #0]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	200014bc 	.word	0x200014bc

08002f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fa0:	f7ff ffee 	bl	8002f80 <HAL_GetTick>
 8002fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d005      	beq.n	8002fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <HAL_Delay+0x44>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4413      	add	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fbe:	bf00      	nop
 8002fc0:	f7ff ffde 	bl	8002f80 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d8f7      	bhi.n	8002fc0 <HAL_Delay+0x28>
  {
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000d08 	.word	0x20000d08

08002fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800300c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003012:	4a04      	ldr	r2, [pc, #16]	; (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	60d3      	str	r3, [r2, #12]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <__NVIC_GetPriorityGrouping+0x18>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	0a1b      	lsrs	r3, r3, #8
 8003032:	f003 0307 	and.w	r3, r3, #7
}
 8003036:	4618      	mov	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800304e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003052:	2b00      	cmp	r3, #0
 8003054:	db0b      	blt.n	800306e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	f003 021f 	and.w	r2, r3, #31
 800305c:	4907      	ldr	r1, [pc, #28]	; (800307c <__NVIC_EnableIRQ+0x38>)
 800305e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	2001      	movs	r0, #1
 8003066:	fa00 f202 	lsl.w	r2, r0, r2
 800306a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	e000e100 	.word	0xe000e100

08003080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	6039      	str	r1, [r7, #0]
 800308a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800308c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003090:	2b00      	cmp	r3, #0
 8003092:	db0a      	blt.n	80030aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	490c      	ldr	r1, [pc, #48]	; (80030cc <__NVIC_SetPriority+0x4c>)
 800309a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800309e:	0112      	lsls	r2, r2, #4
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	440b      	add	r3, r1
 80030a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a8:	e00a      	b.n	80030c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4908      	ldr	r1, [pc, #32]	; (80030d0 <__NVIC_SetPriority+0x50>)
 80030b0:	88fb      	ldrh	r3, [r7, #6]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	3b04      	subs	r3, #4
 80030b8:	0112      	lsls	r2, r2, #4
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	440b      	add	r3, r1
 80030be:	761a      	strb	r2, [r3, #24]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000e100 	.word	0xe000e100
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	; 0x24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f1c3 0307 	rsb	r3, r3, #7
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	bf28      	it	cs
 80030f2:	2304      	movcs	r3, #4
 80030f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3304      	adds	r3, #4
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d902      	bls.n	8003104 <NVIC_EncodePriority+0x30>
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3b03      	subs	r3, #3
 8003102:	e000      	b.n	8003106 <NVIC_EncodePriority+0x32>
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	f04f 32ff 	mov.w	r2, #4294967295
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	401a      	ands	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800311c:	f04f 31ff 	mov.w	r1, #4294967295
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	43d9      	mvns	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	4313      	orrs	r3, r2
         );
}
 800312e:	4618      	mov	r0, r3
 8003130:	3724      	adds	r7, #36	; 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff ff4c 	bl	8002fe0 <__NVIC_SetPriorityGrouping>
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800315e:	f7ff ff63 	bl	8003028 <__NVIC_GetPriorityGrouping>
 8003162:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	68b9      	ldr	r1, [r7, #8]
 8003168:	6978      	ldr	r0, [r7, #20]
 800316a:	f7ff ffb3 	bl	80030d4 <NVIC_EncodePriority>
 800316e:	4602      	mov	r2, r0
 8003170:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003174:	4611      	mov	r1, r2
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff ff82 	bl	8003080 <__NVIC_SetPriority>
}
 800317c:	bf00      	nop
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800318e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff ff56 	bl	8003044 <__NVIC_EnableIRQ>
}
 8003198:	bf00      	nop
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e054      	b.n	800325c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7f5b      	ldrb	r3, [r3, #29]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fe fd74 	bl	8001cb0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	791b      	ldrb	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10c      	bne.n	80031f0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a22      	ldr	r2, [pc, #136]	; (8003264 <HAL_CRC_Init+0xc4>)
 80031dc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0218 	bic.w	r2, r2, #24
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	e00c      	b.n	800320a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6899      	ldr	r1, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	461a      	mov	r2, r3
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f834 	bl	8003268 <HAL_CRCEx_Polynomial_Set>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e028      	b.n	800325c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	795b      	ldrb	r3, [r3, #5]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d105      	bne.n	800321e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f04f 32ff 	mov.w	r2, #4294967295
 800321a:	611a      	str	r2, [r3, #16]
 800321c:	e004      	b.n	8003228 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6912      	ldr	r2, [r2, #16]
 8003226:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699a      	ldr	r2, [r3, #24]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	04c11db7 	.word	0x04c11db7

08003268 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003278:	231f      	movs	r3, #31
 800327a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d102      	bne.n	800328c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
 800328a:	e063      	b.n	8003354 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800328c:	bf00      	nop
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1e5a      	subs	r2, r3, #1
 8003292:	613a      	str	r2, [r7, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <HAL_CRCEx_Polynomial_Set+0x44>
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f003 031f 	and.w	r3, r3, #31
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	fa22 f303 	lsr.w	r3, r2, r3
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b18      	cmp	r3, #24
 80032b0:	d846      	bhi.n	8003340 <HAL_CRCEx_Polynomial_Set+0xd8>
 80032b2:	a201      	add	r2, pc, #4	; (adr r2, 80032b8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80032b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b8:	08003347 	.word	0x08003347
 80032bc:	08003341 	.word	0x08003341
 80032c0:	08003341 	.word	0x08003341
 80032c4:	08003341 	.word	0x08003341
 80032c8:	08003341 	.word	0x08003341
 80032cc:	08003341 	.word	0x08003341
 80032d0:	08003341 	.word	0x08003341
 80032d4:	08003341 	.word	0x08003341
 80032d8:	08003335 	.word	0x08003335
 80032dc:	08003341 	.word	0x08003341
 80032e0:	08003341 	.word	0x08003341
 80032e4:	08003341 	.word	0x08003341
 80032e8:	08003341 	.word	0x08003341
 80032ec:	08003341 	.word	0x08003341
 80032f0:	08003341 	.word	0x08003341
 80032f4:	08003341 	.word	0x08003341
 80032f8:	08003329 	.word	0x08003329
 80032fc:	08003341 	.word	0x08003341
 8003300:	08003341 	.word	0x08003341
 8003304:	08003341 	.word	0x08003341
 8003308:	08003341 	.word	0x08003341
 800330c:	08003341 	.word	0x08003341
 8003310:	08003341 	.word	0x08003341
 8003314:	08003341 	.word	0x08003341
 8003318:	0800331d 	.word	0x0800331d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	2b06      	cmp	r3, #6
 8003320:	d913      	bls.n	800334a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003326:	e010      	b.n	800334a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	2b07      	cmp	r3, #7
 800332c:	d90f      	bls.n	800334e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003332:	e00c      	b.n	800334e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b0f      	cmp	r3, #15
 8003338:	d90b      	bls.n	8003352 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800333e:	e008      	b.n	8003352 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	75fb      	strb	r3, [r7, #23]
        break;
 8003344:	e006      	b.n	8003354 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003346:	bf00      	nop
 8003348:	e004      	b.n	8003354 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800334a:	bf00      	nop
 800334c:	e002      	b.n	8003354 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800334e:	bf00      	nop
 8003350:	e000      	b.n	8003354 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003352:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003354:	7dfb      	ldrb	r3, [r7, #23]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10d      	bne.n	8003376 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f023 0118 	bic.w	r1, r3, #24
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	430a      	orrs	r2, r1
 8003374:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003376:	7dfb      	ldrb	r3, [r7, #23]
}
 8003378:	4618      	mov	r0, r3
 800337a:	371c      	adds	r7, #28
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e037      	b.n	8003406 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d119      	bne.n	80033d6 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a1a      	ldr	r2, [pc, #104]	; (8003410 <HAL_DCACHE_Init+0x8c>)
 80033a6:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a1a      	ldr	r2, [pc, #104]	; (8003414 <HAL_DCACHE_Init+0x90>)
 80033ac:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a19      	ldr	r2, [pc, #100]	; (8003418 <HAL_DCACHE_Init+0x94>)
 80033b2:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a19      	ldr	r2, [pc, #100]	; (800341c <HAL_DCACHE_Init+0x98>)
 80033b8:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a18      	ldr	r2, [pc, #96]	; (8003420 <HAL_DCACHE_Init+0x9c>)
 80033be:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a16      	ldr	r2, [pc, #88]	; (8003424 <HAL_DCACHE_Init+0xa0>)
 80033cc:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f814 	bl	8003428 <HAL_DCACHE_Enable>
 8003400:	4603      	mov	r3, r0
 8003402:	73fb      	strb	r3, [r7, #15]

  return status;
 8003404:	7bfb      	ldrb	r3, [r7, #15]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	080034c7 	.word	0x080034c7
 8003414:	08003477 	.word	0x08003477
 8003418:	0800348b 	.word	0x0800348b
 800341c:	080034b3 	.word	0x080034b3
 8003420:	0800349f 	.word	0x0800349f
 8003424:	08001cf5 	.word	0x08001cf5

08003428 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e015      	b.n	800346a <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0309 	and.w	r3, r3, #9
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 800344c:	2302      	movs	r3, #2
 800344e:	73fb      	strb	r3, [r7, #15]
 8003450:	e00a      	b.n	8003468 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]
  }

  return status;
 8003468:	7bfb      	ldrb	r3, [r7, #15]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80034e2:	f7ff fd4d 	bl	8002f80 <HAL_GetTick>
 80034e6:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e06b      	b.n	80035ca <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d008      	beq.n	8003510 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e05c      	b.n	80035ca <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0204 	orr.w	r2, r2, #4
 800351e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2205      	movs	r2, #5
 8003524:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003528:	e020      	b.n	800356c <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800352a:	f7ff fd29 	bl	8002f80 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b05      	cmp	r3, #5
 8003536:	d919      	bls.n	800356c <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	f043 0210 	orr.w	r2, r3, #16
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2203      	movs	r2, #3
 8003548:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355c:	2201      	movs	r2, #1
 800355e:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e02e      	b.n	80035ca <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0d7      	beq.n	800352a <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0202 	orr.w	r2, r2, #2
 8003588:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2204      	movs	r2, #4
 800358e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800359a:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d007      	beq.n	80035c0 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b4:	2201      	movs	r2, #1
 80035b6:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2200      	movs	r2, #0
 80035be:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e053      	b.n	800368c <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d106      	bne.n	80035fe <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7fe fbb5 	bl	8001d68 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6851      	ldr	r1, [r2, #4]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	69d2      	ldr	r2, [r2, #28]
 800361c:	4311      	orrs	r1, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	430b      	orrs	r3, r1
 8003624:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362c:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6891      	ldr	r1, [r2, #8]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6992      	ldr	r2, [r2, #24]
 800363c:	4311      	orrs	r1, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	430b      	orrs	r3, r1
 8003644:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	0c1b      	lsrs	r3, r3, #16
 800364e:	041b      	lsls	r3, r3, #16
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	68d1      	ldr	r1, [r2, #12]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	430b      	orrs	r3, r1
 800365a:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003662:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	051a      	lsls	r2, r3, #20
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	055b      	lsls	r3, r3, #21
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d026      	beq.n	8003704 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d021      	beq.n	8003704 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ce:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	f043 0201 	orr.w	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2201      	movs	r2, #1
 80036e2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2204      	movs	r2, #4
 80036e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d026      	beq.n	800375c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d021      	beq.n	800375c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003726:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2220      	movs	r2, #32
 800372e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003734:	f043 0202 	orr.w	r2, r3, #2
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2204      	movs	r2, #4
 8003740:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d026      	beq.n	80037b4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800376c:	2b00      	cmp	r3, #0
 800376e:	d021      	beq.n	80037b4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2208      	movs	r2, #8
 8003786:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378c:	f043 0204 	orr.w	r2, r3, #4
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2204      	movs	r2, #4
 8003798:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d013      	beq.n	80037e6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00e      	beq.n	80037e6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2204      	movs	r2, #4
 80037de:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f853 	bl	800388c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d024      	beq.n	800383a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d01f      	beq.n	800383a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003808:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2202      	movs	r2, #2
 8003810:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferCpltCallback != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01f      	beq.n	8003884 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01a      	beq.n	8003884 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800385c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2210      	movs	r2, #16
 8003864:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f80e 	bl	80038a0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003884:	bf00      	nop
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_DMA2D_ConfigLayer+0x20>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e084      	b.n	80039de <HAL_DMA2D_ConfigLayer+0x12a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	4613      	mov	r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	4413      	add	r3, r2
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	3328      	adds	r3, #40	; 0x28
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	4413      	add	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	041b      	lsls	r3, r3, #16
 8003900:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003908:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003914:	4b35      	ldr	r3, [pc, #212]	; (80039ec <HAL_DMA2D_ConfigLayer+0x138>)
 8003916:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b0a      	cmp	r3, #10
 800391e:	d003      	beq.n	8003928 <HAL_DMA2D_ConfigLayer+0x74>
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b09      	cmp	r3, #9
 8003926:	d107      	bne.n	8003938 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	4313      	orrs	r3, r2
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e005      	b.n	8003944 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	061b      	lsls	r3, r3, #24
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d120      	bne.n	800398c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	43db      	mvns	r3, r3
 8003954:	ea02 0103 	and.w	r1, r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	430a      	orrs	r2, r1
 8003960:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b0a      	cmp	r3, #10
 8003972:	d003      	beq.n	800397c <HAL_DMA2D_ConfigLayer+0xc8>
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b09      	cmp	r3, #9
 800397a:	d127      	bne.n	80039cc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003988:	629a      	str	r2, [r3, #40]	; 0x28
 800398a:	e01f      	b.n	80039cc <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69da      	ldr	r2, [r3, #28]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	43db      	mvns	r3, r3
 8003996:	ea02 0103 	and.w	r1, r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b0a      	cmp	r3, #10
 80039b4:	d003      	beq.n	80039be <HAL_DMA2D_ConfigLayer+0x10a>
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b09      	cmp	r3, #9
 80039bc:	d106      	bne.n	80039cc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80039ca:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	ff33000f 	.word	0xff33000f

080039f0 <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003a08:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	; 0xc04
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	00da      	lsls	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	220e      	movs	r2, #14
 8003a2a:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	; 0xc70
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 021f 	bic.w	r2, r2, #31
 8003a3e:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6912      	ldr	r2, [r2, #16]
 8003a4a:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	220e      	movs	r2, #14
 8003a54:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	; 0xd08
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 021f 	bic.w	r2, r2, #31
 8003a68:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6912      	ldr	r2, [r2, #16]
 8003a74:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	220e      	movs	r2, #14
 8003a7e:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	; 0xc5c
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003a92:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003aa6:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d007      	beq.n	8003ac2 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d003      	beq.n	8003ac2 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8003abe:	2b05      	cmp	r3, #5
 8003ac0:	d10a      	bne.n	8003ad8 <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8003ad6:	e02c      	b.n	8003b32 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00b      	beq.n	8003af8 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d007      	beq.n	8003af8 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d003      	beq.n	8003af8 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8003af4:	2b06      	cmp	r3, #6
 8003af6:	d10a      	bne.n	8003b0e <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2210      	movs	r2, #16
 8003afe:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2210      	movs	r2, #16
 8003b08:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8003b0c:	e011      	b.n	8003b32 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	2b07      	cmp	r3, #7
 8003b14:	d003      	beq.n	8003b1e <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d109      	bne.n	8003b32 <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	; 0xc60
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 020f 	bic.w	r2, r2, #15
 8003b42:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	; 0xcf8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 020f 	bic.w	r2, r2, #15
 8003b56:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6952      	ldr	r2, [r2, #20]
 8003b62:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6952      	ldr	r2, [r2, #20]
 8003b6e:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003b98:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	075a      	lsls	r2, r3, #29
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003bc4:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	031a      	lsls	r2, r3, #12
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	021a      	lsls	r2, r3, #8
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0c3      	b.n	8003da0 <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	7e5b      	ldrb	r3, [r3, #25]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d102      	bne.n	8003c28 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fe f8c8 	bl	8001db8 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c3e:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 8003c42:	2002      	movs	r0, #2
 8003c44:	f7ff f9a8 	bl	8002f98 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	4b54      	ldr	r3, [pc, #336]	; (8003da8 <HAL_DSI_Init+0x1a4>)
 8003c56:	400b      	ands	r3, r1
 8003c58:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003c70:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003c78:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff feb3 	bl	80039f0 <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 8003c8a:	6839      	ldr	r1, [r7, #0]
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ff76 	bl	8003b7e <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003c92:	2300      	movs	r3, #0
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f7ff f96c 	bl	8002f98 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cc0:	f7ff f95e 	bl	8002f80 <HAL_GetTick>
 8003cc4:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003cc6:	e008      	b.n	8003cda <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003cc8:	f7ff f95a 	bl	8002f80 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	; 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e062      	b.n	8003da0 <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0ee      	beq.n	8003cc8 <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0206 	orr.w	r2, r2, #6
 8003cfa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0203 	bic.w	r2, r2, #3
 8003d0e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0201 	orr.w	r2, r2, #1
 8003d28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0203 	bic.w	r2, r2, #3
 8003d3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d64:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6899      	ldr	r1, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	e0000003 	.word	0xe0000003

08003dac <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	7e1b      	ldrb	r3, [r3, #24]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_DSI_ConfigErrorMonitor+0x16>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e0ba      	b.n	8003f38 <HAL_DSI_ConfigErrorMonitor+0x18c>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00b      	beq.n	8003e04 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003dfc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003e00:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003e1e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d009      	beq.n	8003e40 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0201 	orr.w	r2, r2, #1
 8003e3c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d009      	beq.n	8003e5e <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0202 	orr.w	r2, r2, #2
 8003e5a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d009      	beq.n	8003e7c <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 020c 	orr.w	r2, r2, #12
 8003e78:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0210 	orr.w	r2, r2, #16
 8003e96:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d009      	beq.n	8003eb8 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0220 	orr.w	r2, r2, #32
 8003eb4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d009      	beq.n	8003ef4 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ef0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d009      	beq.n	8003f12 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003f0e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d009      	beq.n	8003f30 <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003f2c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00f      	beq.n	8003f7c <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f8b8 	bl	80040ec <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00f      	beq.n	8003fac <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d007      	beq.n	8003fac <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f8aa 	bl	8004100 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8097 	beq.w	80040e4 <HAL_DSI_IRQHandler+0x1a0>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003fbe:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003fd6:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f043 0201 	orr.w	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	f043 0202 	orr.w	r2, r3, #2
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f043 0204 	orr.w	r2, r3, #4
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	f043 0208 	orr.w	r2, r3, #8
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f003 030c 	and.w	r3, r3, #12
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f043 0210 	orr.w	r2, r3, #16
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	f043 0220 	orr.w	r2, r3, #32
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d005      	beq.n	800407e <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PBU_MASK) != 0U)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_DSI_IRQHandler+0x192>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PBU;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	61da      	str	r2, [r3, #28]
    }
    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_DSI_IRQHandler+0x1a0>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f818 	bl	8004114 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80040e4:	bf00      	nop
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	7e1b      	ldrb	r3, [r3, #24]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_DSI_SetGenericVCID+0x16>
 800413a:	2302      	movs	r3, #2
 800413c:	e019      	b.n	8004172 <HAL_DSI_SetGenericVCID+0x4a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
 8004152:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6b19      	ldr	r1, [r3, #48]	; 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	7e1b      	ldrb	r3, [r3, #24]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004190:	2302      	movs	r3, #2
 8004192:	e0c5      	b.n	8004320 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0201 	orr.w	r2, r2, #1
 80041a8:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0201 	bic.w	r2, r2, #1
 80041ba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0203 	bic.w	r2, r2, #3
 80041e0:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68d9      	ldr	r1, [r3, #12]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0207 	bic.w	r2, r2, #7
 8004202:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6959      	ldr	r1, [r3, #20]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	431a      	orrs	r2, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 020f 	bic.w	r2, r2, #15
 8004230:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6919      	ldr	r1, [r3, #16]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 020e 	bic.w	r2, r2, #14
 8004254:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	005a      	lsls	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	0c1b      	lsrs	r3, r3, #16
 800427c:	041b      	lsls	r3, r3, #16
 800427e:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80042a2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0201 	bic.w	r2, r2, #1
 80042dc:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0201 	orr.w	r2, r2, #1
 8004300:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0202 	orr.w	r2, r2, #2
 8004314:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	7e1b      	ldrb	r3, [r3, #24]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_DSI_ConfigCommand+0x16>
 800433e:	2302      	movs	r3, #2
 8004340:	e049      	b.n	80043d6 <HAL_DSI_ConfigCommand+0xaa>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	4b24      	ldr	r3, [pc, #144]	; (80043e4 <HAL_DSI_ConfigCommand+0xb8>)
 8004354:	400b      	ands	r3, r1
 8004356:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004366:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 800436c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004372:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004378:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800437e:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004384:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800438a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004390:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004396:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 800439c:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80043a2:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0202 	bic.w	r2, r2, #2
 80043ba:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	fef080ff 	.word	0xfef080ff

080043e8 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	7e1b      	ldrb	r3, [r3, #24]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_DSI_ConfigFlowControl+0x16>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e016      	b.n	800442c <HAL_DSI_ConfigFlowControl+0x44>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004412:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	7e1b      	ldrb	r3, [r3, #24]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <HAL_DSI_ConfigPhyTimer+0x16>
 800444a:	2302      	movs	r3, #2
 800444c:	e084      	b.n	8004558 <HAL_DSI_ConfigPhyTimer+0x120>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	441a      	add	r2, r3
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6859      	ldr	r1, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695a      	ldr	r2, [r3, #20]
 800446a:	4613      	mov	r3, r2
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	4413      	add	r3, r2
 8004470:	18ca      	adds	r2, r1, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	441a      	add	r2, r3
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	4293      	cmp	r3, r2
 8004490:	bf38      	it	cc
 8004492:	4613      	movcc	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80044a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	041a      	lsls	r2, r3, #16
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80044d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	041b      	lsls	r3, r3, #16
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004506:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800450a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004534:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	021a      	lsls	r2, r3, #8
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	7e1b      	ldrb	r3, [r3, #24]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_DSI_ConfigHostTimeouts+0x16>
 8004576:	2302      	movs	r3, #2
 8004578:	e0b4      	b.n	80046e4 <HAL_DSI_ConfigHostTimeouts+0x180>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800458e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6899      	ldr	r1, [r3, #8]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	021a      	lsls	r2, r3, #8
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	b292      	uxth	r2, r2
 80045b0:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	041a      	lsls	r2, r3, #16
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	0c1b      	lsrs	r3, r3, #16
 80045d2:	041b      	lsls	r3, r3, #16
 80045d4:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6812      	ldr	r2, [r2, #0]
 80045f2:	0c1b      	lsrs	r3, r3, #16
 80045f4:	041b      	lsls	r3, r3, #16
 80045f6:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	0c1b      	lsrs	r3, r3, #16
 8004618:	041b      	lsls	r3, r3, #16
 800461a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	0c1b      	lsrs	r3, r3, #16
 8004642:	041b      	lsls	r3, r3, #16
 8004644:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	695a      	ldr	r2, [r3, #20]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800466e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	0c1b      	lsrs	r3, r3, #16
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	0c1b      	lsrs	r3, r3, #16
 80046c0:	041b      	lsls	r3, r3, #16
 80046c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6a1a      	ldr	r2, [r3, #32]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_GFXMMU_Init>:
  *         GFXMMU_InitTypeDef structure and initialize the associated handle.
  * @param  hgfxmmu GFXMMU handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GFXMMU_Init(GFXMMU_HandleTypeDef *hgfxmmu)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	73fb      	strb	r3, [r7, #15]

  /* Check GFXMMU handle */
  if (hgfxmmu == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d102      	bne.n	8004708 <HAL_GFXMMU_Init+0x18>
  {
    status = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
 8004706:	e06e      	b.n	80047e6 <HAL_GFXMMU_Init+0xf6>
      hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
    }
    hgfxmmu->MspInitCallback(hgfxmmu);
#else
    /* Call GFXMMU MSP init function */
    HAL_GFXMMU_MspInit(hgfxmmu);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7fd fbd9 	bl	8001ec0 <HAL_GFXMMU_MspInit>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */

    /* Configure GFXMMU_CR register */
    hgfxmmu->Instance->CR = 0U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
    hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlocksPerLine);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6819      	ldr	r1, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]
#if defined(GFXMMU_CR_CE)
    if (hgfxmmu->Init.CachePrefetch.Activation == ENABLE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	7f1b      	ldrb	r3, [r3, #28]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d12c      	bne.n	800478a <HAL_GFXMMU_Init+0x9a>
    {
      assert_param(IS_GFXMMU_CACHE_LOCK(hgfxmmu->Init.CachePrefetch.CacheLock));
      assert_param(IS_GFXMMU_PREFETCH(hgfxmmu->Init.CachePrefetch.Prefetch));
      assert_param(IS_GFXMMU_OUTTER_BUFFERABILITY(hgfxmmu->Init.CachePrefetch.OutterBufferability));
      assert_param(IS_GFXMMU_OUTTER_CACHABILITY(hgfxmmu->Init.CachePrefetch.OutterCachability));
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a19      	ldr	r1, [r3, #32]
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 800473e:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 8004744:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterCachability);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 800474a:	430b      	orrs	r3, r1
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004756:	601a      	str	r2, [r3, #0]
      if (hgfxmmu->Init.CachePrefetch.CacheLock == GFXMMU_CACHE_LOCK_ENABLE)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004760:	d10b      	bne.n	800477a <HAL_GFXMMU_Init+0x8a>
      {
        assert_param(IS_GFXMMU_CACHE_LOCK_BUFFER(hgfxmmu->Init.CachePrefetch.CacheLockBuffer));
        assert_param(IS_GFXMMU_CACHE_FORCE(hgfxmmu->Init.CachePrefetch.CacheForce));
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6819      	ldr	r1, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                  hgfxmmu->Init.CachePrefetch.CacheForce);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	601a      	str	r2, [r3, #0]
      }

      /* Force invalidate cache if cache is enabled */
      hgfxmmu->Instance->CCR |= GFXMMU_CACHE_FORCE_INVALIDATE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0202 	orr.w	r2, r2, #2
 8004788:	60da      	str	r2, [r3, #12]
      assert_param(IS_GFXMMU_ADDRESSCACHE_LOCK_BUFFER(hgfxmmu->Init.AddressCache.AddressCacheLockBuffer));
      hgfxmmu->Instance->CR |= GFXMMU_CR_ACE |
                               hgfxmmu->Init.AddressCache.AddressCacheLockBuffer;
    }
#endif /* GFXMMU_CR_ACE */
    if (hgfxmmu->Init.Interrupts.Activation == ENABLE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004790:	2b01      	cmp	r3, #1
 8004792:	d108      	bne.n	80047a6 <HAL_GFXMMU_Init+0xb6>
    {
      assert_param(IS_GFXMMU_INTERRUPTS(hgfxmmu->Init.Interrupts.UsedInterrupts));
      hgfxmmu->Instance->CR |= hgfxmmu->Init.Interrupts.UsedInterrupts;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6819      	ldr	r1, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	601a      	str	r2, [r3, #0]
    }

    /* Configure default value on GFXMMU_DVR register */
    hgfxmmu->Instance->DVR = hgfxmmu->Init.DefaultValue;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6892      	ldr	r2, [r2, #8]
 80047ae:	611a      	str	r2, [r3, #16]

    /* Configure physical buffer addresses on GFXMMU_BxCR registers */
    hgfxmmu->Instance->B0CR = hgfxmmu->Init.Buffers.Buf0Address;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	68d2      	ldr	r2, [r2, #12]
 80047b8:	621a      	str	r2, [r3, #32]
    hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6912      	ldr	r2, [r2, #16]
 80047c2:	625a      	str	r2, [r3, #36]	; 0x24
    hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6952      	ldr	r2, [r2, #20]
 80047cc:	629a      	str	r2, [r3, #40]	; 0x28
    hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6992      	ldr	r2, [r2, #24]
 80047d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Reset GFXMMU error code */
    hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set GFXMMU to ready state */
    hgfxmmu->State = HAL_GFXMMU_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }
  /* Return function status */
  return status;
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_GFXMMU_ConfigLut>:
  */
HAL_StatusTypeDef HAL_GFXMMU_ConfigLut(GFXMMU_HandleTypeDef *hgfxmmu,
                                       uint32_t FirstLine,
                                       uint32_t LinesNumber,
                                       uint32_t Address)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b08b      	sub	sp, #44	; 0x2c
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
  assert_param(IS_GFXMMU_LUT_LINE(FirstLine));
  assert_param(IS_GFXMMU_LUT_LINES_NUMBER(LinesNumber));

  /* Check GFXMMU state and coherent parameters */
  if ((hgfxmmu->State != HAL_GFXMMU_STATE_READY) || ((FirstLine + LinesNumber) > 1024U))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800480a:	2b01      	cmp	r3, #1
 800480c:	d105      	bne.n	800481a <HAL_GFXMMU_ConfigLut+0x2a>
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4413      	add	r3, r2
 8004814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004818:	d903      	bls.n	8004822 <HAL_GFXMMU_ConfigLut+0x32>
  {
    status = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004820:	e032      	b.n	8004888 <HAL_GFXMMU_ConfigLut+0x98>
    uint32_t current_line;
    uint32_t lutxl_address;
    uint32_t lutxh_address;

    /* Initialize local variables */
    current_address = Address;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	623b      	str	r3, [r7, #32]
    current_line    = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
    lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
    lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * FirstLine) + 1U]);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	3301      	adds	r3, #1
 8004846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

    /* Copy LUT from flash to look up RAM */
    while (current_line < LinesNumber)
 8004850:	e016      	b.n	8004880 <HAL_GFXMMU_ConfigLut+0x90>
    {
      *((uint32_t *)lutxl_address) = *((uint32_t *)current_address);
 8004852:	6a3a      	ldr	r2, [r7, #32]
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	3304      	adds	r3, #4
 800485e:	623b      	str	r3, [r7, #32]
      *((uint32_t *)lutxh_address) = *((uint32_t *)current_address);
 8004860:	6a3a      	ldr	r2, [r7, #32]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	6812      	ldr	r2, [r2, #0]
 8004866:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	3304      	adds	r3, #4
 800486c:	623b      	str	r3, [r7, #32]
      lutxl_address += 8U;
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	3308      	adds	r3, #8
 8004872:	61bb      	str	r3, [r7, #24]
      lutxh_address += 8U;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	3308      	adds	r3, #8
 8004878:	617b      	str	r3, [r7, #20]
      current_line++;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3301      	adds	r3, #1
 800487e:	61fb      	str	r3, [r7, #28]
    while (current_line < LinesNumber)
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	429a      	cmp	r2, r3
 8004886:	d3e4      	bcc.n	8004852 <HAL_GFXMMU_ConfigLut+0x62>
    }
  }
  /* Return function status */
  return status;
 8004888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800488c:	4618      	mov	r0, r3
 800488e:	372c      	adds	r7, #44	; 0x2c
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_GFXMMU_IRQHandler>:
  * @brief  This function handles the GFXMMU interrupts.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
void HAL_GFXMMU_IRQHandler(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t flags, interrupts, error;

  /* Read current flags and interrupts and determine which error occurs */
  flags = hgfxmmu->Instance->SR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	617b      	str	r3, [r7, #20]
  interrupts = (hgfxmmu->Instance->CR & GFXMMU_CR_ITS_MASK);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	613b      	str	r3, [r7, #16]
  error = (flags & interrupts);
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4013      	ands	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]

  if (error != 0U)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00c      	beq.n	80048dc <HAL_GFXMMU_IRQHandler+0x44>
  {
    /* Clear flags on GFXMMU_FCR register */
    hgfxmmu->Instance->FCR = error;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	609a      	str	r2, [r3, #8]

    /* Update GFXMMU error code */
    hgfxmmu->ErrorCode |= error;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Call GFXMMU error callback */
#if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
    hgfxmmu->ErrorCallback(hgfxmmu);
#else
    HAL_GFXMMU_ErrorCallback(hgfxmmu);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f804 	bl	80048e4 <HAL_GFXMMU_ErrorCallback>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
  }
}
 80048dc:	bf00      	nop
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_GFXMMU_ErrorCallback>:
  * @brief  Error callback.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
__weak void HAL_GFXMMU_ErrorCallback(GFXMMU_HandleTypeDef *hgfxmmu)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(hgfxmmu);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_GFXMMU_ErrorCallback could be implemented in the user file.
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b089      	sub	sp, #36	; 0x24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800490a:	e1ba      	b.n	8004c82 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	2101      	movs	r1, #1
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	fa01 f303 	lsl.w	r3, r1, r3
 8004918:	4013      	ands	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 81aa 	beq.w	8004c7c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a55      	ldr	r2, [pc, #340]	; (8004a80 <HAL_GPIO_Init+0x188>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d15d      	bne.n	80049ec <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004936:	2201      	movs	r2, #1
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43db      	mvns	r3, r3
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	4013      	ands	r3, r2
 8004944:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f003 0201 	and.w	r2, r3, #1
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	69fa      	ldr	r2, [r7, #28]
 8004956:	4313      	orrs	r3, r2
 8004958:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004960:	4a48      	ldr	r2, [pc, #288]	; (8004a84 <HAL_GPIO_Init+0x18c>)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004968:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800496a:	4a46      	ldr	r2, [pc, #280]	; (8004a84 <HAL_GPIO_Init+0x18c>)
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	4413      	add	r3, r2
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	08da      	lsrs	r2, r3, #3
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	3208      	adds	r2, #8
 800497e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004982:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	220f      	movs	r2, #15
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	69fa      	ldr	r2, [r7, #28]
 8004996:	4013      	ands	r3, r2
 8004998:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	220b      	movs	r2, #11
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	69fa      	ldr	r2, [r7, #28]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	08da      	lsrs	r2, r3, #3
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	3208      	adds	r2, #8
 80049b6:	69f9      	ldr	r1, [r7, #28]
 80049b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	2203      	movs	r2, #3
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	43db      	mvns	r3, r3
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	4013      	ands	r3, r2
 80049d2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	2202      	movs	r2, #2
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e067      	b.n	8004abc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d003      	beq.n	80049fc <HAL_GPIO_Init+0x104>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b12      	cmp	r3, #18
 80049fa:	d145      	bne.n	8004a88 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	08da      	lsrs	r2, r3, #3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3208      	adds	r2, #8
 8004a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a08:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	220f      	movs	r2, #15
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f003 020f 	and.w	r2, r3, #15
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	08da      	lsrs	r2, r3, #3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3208      	adds	r2, #8
 8004a42:	69f9      	ldr	r1, [r7, #28]
 8004a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	2203      	movs	r2, #3
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f003 0203 	and.w	r2, r3, #3
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e01e      	b.n	8004abc <HAL_GPIO_Init+0x1c4>
 8004a7e:	bf00      	nop
 8004a80:	46020000 	.word	0x46020000
 8004a84:	0800d8b4 	.word	0x0800d8b4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	2203      	movs	r2, #3
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f003 0203 	and.w	r2, r3, #3
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	69fa      	ldr	r2, [r7, #28]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d00b      	beq.n	8004adc <HAL_GPIO_Init+0x1e4>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d007      	beq.n	8004adc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ad0:	2b11      	cmp	r3, #17
 8004ad2:	d003      	beq.n	8004adc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b12      	cmp	r3, #18
 8004ada:	d130      	bne.n	8004b3e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	2203      	movs	r2, #3
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	4013      	ands	r3, r2
 8004af2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004b12:	2201      	movs	r2, #1
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69fa      	ldr	r2, [r7, #28]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	091b      	lsrs	r3, r3, #4
 8004b28:	f003 0201 	and.w	r2, r3, #1
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d017      	beq.n	8004b76 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	2203      	movs	r2, #3
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43db      	mvns	r3, r3
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d07c      	beq.n	8004c7c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004b82:	4a47      	ldr	r2, [pc, #284]	; (8004ca0 <HAL_GPIO_Init+0x3a8>)
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	089b      	lsrs	r3, r3, #2
 8004b88:	3318      	adds	r3, #24
 8004b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b8e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	220f      	movs	r2, #15
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	43db      	mvns	r3, r3
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0a9a      	lsrs	r2, r3, #10
 8004baa:	4b3e      	ldr	r3, [pc, #248]	; (8004ca4 <HAL_GPIO_Init+0x3ac>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	f002 0203 	and.w	r2, r2, #3
 8004bb4:	00d2      	lsls	r2, r2, #3
 8004bb6:	4093      	lsls	r3, r2
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004bbe:	4938      	ldr	r1, [pc, #224]	; (8004ca0 <HAL_GPIO_Init+0x3a8>)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	089b      	lsrs	r3, r3, #2
 8004bc4:	3318      	adds	r3, #24
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004bcc:	4b34      	ldr	r3, [pc, #208]	; (8004ca0 <HAL_GPIO_Init+0x3a8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004bf0:	4a2b      	ldr	r2, [pc, #172]	; (8004ca0 <HAL_GPIO_Init+0x3a8>)
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004bf6:	4b2a      	ldr	r3, [pc, #168]	; (8004ca0 <HAL_GPIO_Init+0x3a8>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	69fa      	ldr	r2, [r7, #28]
 8004c02:	4013      	ands	r3, r2
 8004c04:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004c1a:	4a21      	ldr	r2, [pc, #132]	; (8004ca0 <HAL_GPIO_Init+0x3a8>)
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004c20:	4b1f      	ldr	r3, [pc, #124]	; (8004ca0 <HAL_GPIO_Init+0x3a8>)
 8004c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c26:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004c3e:	69fa      	ldr	r2, [r7, #28]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004c46:	4a16      	ldr	r2, [pc, #88]	; (8004ca0 <HAL_GPIO_Init+0x3a8>)
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8004c4e:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <HAL_GPIO_Init+0x3a8>)
 8004c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c54:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	69fa      	ldr	r2, [r7, #28]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004c74:	4a0a      	ldr	r2, [pc, #40]	; (8004ca0 <HAL_GPIO_Init+0x3a8>)
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f47f ae3d 	bne.w	800490c <HAL_GPIO_Init+0x14>
  }
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	3724      	adds	r7, #36	; 0x24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	46022000 	.word	0x46022000
 8004ca4:	002f7f7f 	.word	0x002f7f7f

08004ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	807b      	strh	r3, [r7, #2]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cb8:	787b      	ldrb	r3, [r7, #1]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004cbe:	887a      	ldrh	r2, [r7, #2]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004cc4:	e002      	b.n	8004ccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004cc6:	887a      	ldrh	r2, [r7, #2]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e01c      	b.n	8004d24 <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	795b      	ldrb	r3, [r3, #5]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d105      	bne.n	8004cfe <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fd f90c 	bl	8001f10 <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	791b      	ldrb	r3, [r3, #4]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <HAL_GPU2D_Init+0x32>
 8004d06:	2302      	movs	r3, #2
 8004d08:	e00c      	b.n	8004d24 <HAL_GPU2D_Init+0x4c>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	33f8      	adds	r3, #248	; 0xf8
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d013      	beq.n	8004d70 <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	33f8      	adds	r3, #248	; 0xf8
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f023 0201 	bic.w	r2, r3, #1
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 8004d68:	68f9      	ldr	r1, [r7, #12]
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f80f 	bl	8004d8e <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 8004d70:	bf00      	nop
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f80f 	bl	8004da4 <HAL_GPU2D_ErrorCallback>
}
 8004d86:	bf00      	nop
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_GPU2D_CommandListCpltCallback>:
  *                the configuration information for the GPU2D.
  * @param  CmdListID Command list ID that got completed.
  * @retval None
  */
__weak void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	6039      	str	r1, [r7, #0]
  UNUSED(CmdListID);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_GPU2D_CommandListCpltCallback can be implemented in the user file.
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 8004dac:	e7fe      	b.n	8004dac <HAL_GPU2D_ErrorCallback+0x8>

08004dae <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e08d      	b.n	8004edc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d106      	bne.n	8004dda <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7fd f8db 	bl	8001f90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2224      	movs	r2, #36	; 0x24
 8004dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0201 	bic.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004dfe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e0e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d107      	bne.n	8004e28 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e24:	609a      	str	r2, [r3, #8]
 8004e26:	e006      	b.n	8004e36 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e34:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d108      	bne.n	8004e50 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e4c:	605a      	str	r2, [r3, #4]
 8004e4e:	e007      	b.n	8004e60 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e5e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6812      	ldr	r2, [r2, #0]
 8004e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e72:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e82:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69d9      	ldr	r1, [r3, #28]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1a      	ldr	r2, [r3, #32]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f042 0201 	orr.w	r2, r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	4608      	mov	r0, r1
 8004eee:	4611      	mov	r1, r2
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	817b      	strh	r3, [r7, #10]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	813b      	strh	r3, [r7, #8]
 8004efa:	4613      	mov	r3, r2
 8004efc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	f040 80f9 	bne.w	80050fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <HAL_I2C_Mem_Write+0x34>
 8004f12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d105      	bne.n	8004f24 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e0ed      	b.n	8005100 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_I2C_Mem_Write+0x4e>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e0e6      	b.n	8005100 <HAL_I2C_Mem_Write+0x21c>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f3a:	f7fe f821 	bl	8002f80 <HAL_GetTick>
 8004f3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	2319      	movs	r3, #25
 8004f46:	2201      	movs	r2, #1
 8004f48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 fac3 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0d1      	b.n	8005100 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2221      	movs	r2, #33	; 0x21
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2240      	movs	r2, #64	; 0x40
 8004f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a3a      	ldr	r2, [r7, #32]
 8004f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f84:	88f8      	ldrh	r0, [r7, #6]
 8004f86:	893a      	ldrh	r2, [r7, #8]
 8004f88:	8979      	ldrh	r1, [r7, #10]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	4603      	mov	r3, r0
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f9d3 	bl	8005340 <I2C_RequestMemoryWrite>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e0a9      	b.n	8005100 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2bff      	cmp	r3, #255	; 0xff
 8004fb4:	d90e      	bls.n	8004fd4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	22ff      	movs	r2, #255	; 0xff
 8004fba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	8979      	ldrh	r1, [r7, #10]
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 fc3d 	bl	800584c <I2C_TransferConfig>
 8004fd2:	e00f      	b.n	8004ff4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	8979      	ldrh	r1, [r7, #10]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 fc2c 	bl	800584c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 fabc 	bl	8005576 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e07b      	b.n	8005100 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	781a      	ldrb	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005022:	b29b      	uxth	r3, r3
 8005024:	3b01      	subs	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503c:	b29b      	uxth	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d034      	beq.n	80050ac <HAL_I2C_Mem_Write+0x1c8>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005046:	2b00      	cmp	r3, #0
 8005048:	d130      	bne.n	80050ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	2200      	movs	r2, #0
 8005052:	2180      	movs	r1, #128	; 0x80
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 fa3f 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e04d      	b.n	8005100 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	2bff      	cmp	r3, #255	; 0xff
 800506c:	d90e      	bls.n	800508c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	22ff      	movs	r2, #255	; 0xff
 8005072:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005078:	b2da      	uxtb	r2, r3
 800507a:	8979      	ldrh	r1, [r7, #10]
 800507c:	2300      	movs	r3, #0
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 fbe1 	bl	800584c <I2C_TransferConfig>
 800508a:	e00f      	b.n	80050ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509a:	b2da      	uxtb	r2, r3
 800509c:	8979      	ldrh	r1, [r7, #10]
 800509e:	2300      	movs	r3, #0
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 fbd0 	bl	800584c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d19e      	bne.n	8004ff4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 faa2 	bl	8005604 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e01a      	b.n	8005100 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2220      	movs	r2, #32
 80050d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6859      	ldr	r1, [r3, #4]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <HAL_I2C_Mem_Write+0x224>)
 80050de:	400b      	ands	r3, r1
 80050e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	e000      	b.n	8005100 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80050fe:	2302      	movs	r3, #2
  }
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	fe00e800 	.word	0xfe00e800

0800510c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	4608      	mov	r0, r1
 8005116:	4611      	mov	r1, r2
 8005118:	461a      	mov	r2, r3
 800511a:	4603      	mov	r3, r0
 800511c:	817b      	strh	r3, [r7, #10]
 800511e:	460b      	mov	r3, r1
 8005120:	813b      	strh	r3, [r7, #8]
 8005122:	4613      	mov	r3, r2
 8005124:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b20      	cmp	r3, #32
 8005130:	f040 80fd 	bne.w	800532e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <HAL_I2C_Mem_Read+0x34>
 800513a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	d105      	bne.n	800514c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005146:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e0f1      	b.n	8005330 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_I2C_Mem_Read+0x4e>
 8005156:	2302      	movs	r3, #2
 8005158:	e0ea      	b.n	8005330 <HAL_I2C_Mem_Read+0x224>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005162:	f7fd ff0d 	bl	8002f80 <HAL_GetTick>
 8005166:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	2319      	movs	r3, #25
 800516e:	2201      	movs	r2, #1
 8005170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 f9af 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0d5      	b.n	8005330 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2222      	movs	r2, #34	; 0x22
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2240      	movs	r2, #64	; 0x40
 8005190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a3a      	ldr	r2, [r7, #32]
 800519e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80051a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051ac:	88f8      	ldrh	r0, [r7, #6]
 80051ae:	893a      	ldrh	r2, [r7, #8]
 80051b0:	8979      	ldrh	r1, [r7, #10]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	4603      	mov	r3, r0
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f913 	bl	80053e8 <I2C_RequestMemoryRead>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0ad      	b.n	8005330 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2bff      	cmp	r3, #255	; 0xff
 80051dc:	d90e      	bls.n	80051fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	22ff      	movs	r2, #255	; 0xff
 80051e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	8979      	ldrh	r1, [r7, #10]
 80051ec:	4b52      	ldr	r3, [pc, #328]	; (8005338 <HAL_I2C_Mem_Read+0x22c>)
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 fb29 	bl	800584c <I2C_TransferConfig>
 80051fa:	e00f      	b.n	800521c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	b2da      	uxtb	r2, r3
 800520c:	8979      	ldrh	r1, [r7, #10]
 800520e:	4b4a      	ldr	r3, [pc, #296]	; (8005338 <HAL_I2C_Mem_Read+0x22c>)
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 fb18 	bl	800584c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	2200      	movs	r2, #0
 8005224:	2104      	movs	r1, #4
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 f956 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e07c      	b.n	8005330 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d034      	beq.n	80052dc <HAL_I2C_Mem_Read+0x1d0>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005276:	2b00      	cmp	r3, #0
 8005278:	d130      	bne.n	80052dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005280:	2200      	movs	r2, #0
 8005282:	2180      	movs	r1, #128	; 0x80
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f927 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e04d      	b.n	8005330 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005298:	b29b      	uxth	r3, r3
 800529a:	2bff      	cmp	r3, #255	; 0xff
 800529c:	d90e      	bls.n	80052bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	22ff      	movs	r2, #255	; 0xff
 80052a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	8979      	ldrh	r1, [r7, #10]
 80052ac:	2300      	movs	r3, #0
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 fac9 	bl	800584c <I2C_TransferConfig>
 80052ba:	e00f      	b.n	80052dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	8979      	ldrh	r1, [r7, #10]
 80052ce:	2300      	movs	r3, #0
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 fab8 	bl	800584c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d19a      	bne.n	800521c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f98a 	bl	8005604 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e01a      	b.n	8005330 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2220      	movs	r2, #32
 8005300:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6859      	ldr	r1, [r3, #4]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	4b0b      	ldr	r3, [pc, #44]	; (800533c <HAL_I2C_Mem_Read+0x230>)
 800530e:	400b      	ands	r3, r1
 8005310:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2220      	movs	r2, #32
 8005316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	e000      	b.n	8005330 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800532e:	2302      	movs	r3, #2
  }
}
 8005330:	4618      	mov	r0, r3
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	80002400 	.word	0x80002400
 800533c:	fe00e800 	.word	0xfe00e800

08005340 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af02      	add	r7, sp, #8
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	4608      	mov	r0, r1
 800534a:	4611      	mov	r1, r2
 800534c:	461a      	mov	r2, r3
 800534e:	4603      	mov	r3, r0
 8005350:	817b      	strh	r3, [r7, #10]
 8005352:	460b      	mov	r3, r1
 8005354:	813b      	strh	r3, [r7, #8]
 8005356:	4613      	mov	r3, r2
 8005358:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800535a:	88fb      	ldrh	r3, [r7, #6]
 800535c:	b2da      	uxtb	r2, r3
 800535e:	8979      	ldrh	r1, [r7, #10]
 8005360:	4b20      	ldr	r3, [pc, #128]	; (80053e4 <I2C_RequestMemoryWrite+0xa4>)
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 fa6f 	bl	800584c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	69b9      	ldr	r1, [r7, #24]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 f8ff 	bl	8005576 <I2C_WaitOnTXISFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e02c      	b.n	80053dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005382:	88fb      	ldrh	r3, [r7, #6]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d105      	bne.n	8005394 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005388:	893b      	ldrh	r3, [r7, #8]
 800538a:	b2da      	uxtb	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	629a      	str	r2, [r3, #40]	; 0x28
 8005392:	e015      	b.n	80053c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005394:	893b      	ldrh	r3, [r7, #8]
 8005396:	0a1b      	lsrs	r3, r3, #8
 8005398:	b29b      	uxth	r3, r3
 800539a:	b2da      	uxtb	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	69b9      	ldr	r1, [r7, #24]
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 f8e5 	bl	8005576 <I2C_WaitOnTXISFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e012      	b.n	80053dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053b6:	893b      	ldrh	r3, [r7, #8]
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	2200      	movs	r2, #0
 80053c8:	2180      	movs	r1, #128	; 0x80
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 f884 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	80002000 	.word	0x80002000

080053e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	4608      	mov	r0, r1
 80053f2:	4611      	mov	r1, r2
 80053f4:	461a      	mov	r2, r3
 80053f6:	4603      	mov	r3, r0
 80053f8:	817b      	strh	r3, [r7, #10]
 80053fa:	460b      	mov	r3, r1
 80053fc:	813b      	strh	r3, [r7, #8]
 80053fe:	4613      	mov	r3, r2
 8005400:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005402:	88fb      	ldrh	r3, [r7, #6]
 8005404:	b2da      	uxtb	r2, r3
 8005406:	8979      	ldrh	r1, [r7, #10]
 8005408:	4b20      	ldr	r3, [pc, #128]	; (800548c <I2C_RequestMemoryRead+0xa4>)
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	2300      	movs	r3, #0
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 fa1c 	bl	800584c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	69b9      	ldr	r1, [r7, #24]
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f8ac 	bl	8005576 <I2C_WaitOnTXISFlagUntilTimeout>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e02c      	b.n	8005482 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005428:	88fb      	ldrh	r3, [r7, #6]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d105      	bne.n	800543a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800542e:	893b      	ldrh	r3, [r7, #8]
 8005430:	b2da      	uxtb	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	629a      	str	r2, [r3, #40]	; 0x28
 8005438:	e015      	b.n	8005466 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800543a:	893b      	ldrh	r3, [r7, #8]
 800543c:	0a1b      	lsrs	r3, r3, #8
 800543e:	b29b      	uxth	r3, r3
 8005440:	b2da      	uxtb	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	69b9      	ldr	r1, [r7, #24]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f892 	bl	8005576 <I2C_WaitOnTXISFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e012      	b.n	8005482 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800545c:	893b      	ldrh	r3, [r7, #8]
 800545e:	b2da      	uxtb	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2200      	movs	r2, #0
 800546e:	2140      	movs	r1, #64	; 0x40
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f831 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e000      	b.n	8005482 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	80002000 	.word	0x80002000

08005490 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d103      	bne.n	80054ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2200      	movs	r2, #0
 80054ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d007      	beq.n	80054cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0201 	orr.w	r2, r2, #1
 80054ca:	619a      	str	r2, [r3, #24]
  }
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	4613      	mov	r3, r2
 80054e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054e8:	e031      	b.n	800554e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f0:	d02d      	beq.n	800554e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f2:	f7fd fd45 	bl	8002f80 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d302      	bcc.n	8005508 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d122      	bne.n	800554e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	4013      	ands	r3, r2
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	429a      	cmp	r2, r3
 8005516:	bf0c      	ite	eq
 8005518:	2301      	moveq	r3, #1
 800551a:	2300      	movne	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	461a      	mov	r2, r3
 8005520:	79fb      	ldrb	r3, [r7, #7]
 8005522:	429a      	cmp	r2, r3
 8005524:	d113      	bne.n	800554e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552a:	f043 0220 	orr.w	r2, r3, #32
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e00f      	b.n	800556e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699a      	ldr	r2, [r3, #24]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4013      	ands	r3, r2
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	429a      	cmp	r2, r3
 800555c:	bf0c      	ite	eq
 800555e:	2301      	moveq	r3, #1
 8005560:	2300      	movne	r3, #0
 8005562:	b2db      	uxtb	r3, r3
 8005564:	461a      	mov	r2, r3
 8005566:	79fb      	ldrb	r3, [r7, #7]
 8005568:	429a      	cmp	r2, r3
 800556a:	d0be      	beq.n	80054ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b084      	sub	sp, #16
 800557a:	af00      	add	r7, sp, #0
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005582:	e033      	b.n	80055ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 f87f 	bl	800568c <I2C_IsErrorOccurred>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e031      	b.n	80055fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559e:	d025      	beq.n	80055ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a0:	f7fd fcee 	bl	8002f80 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d302      	bcc.n	80055b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d11a      	bne.n	80055ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d013      	beq.n	80055ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c8:	f043 0220 	orr.w	r2, r3, #32
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e007      	b.n	80055fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d1c4      	bne.n	8005584 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005610:	e02f      	b.n	8005672 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 f838 	bl	800568c <I2C_IsErrorOccurred>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e02d      	b.n	8005682 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005626:	f7fd fcab 	bl	8002f80 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	429a      	cmp	r2, r3
 8005634:	d302      	bcc.n	800563c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d11a      	bne.n	8005672 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b20      	cmp	r3, #32
 8005648:	d013      	beq.n	8005672 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564e:	f043 0220 	orr.w	r2, r3, #32
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e007      	b.n	8005682 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b20      	cmp	r3, #32
 800567e:	d1c8      	bne.n	8005612 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08a      	sub	sp, #40	; 0x28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d068      	beq.n	800578a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2210      	movs	r2, #16
 80056be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056c0:	e049      	b.n	8005756 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c8:	d045      	beq.n	8005756 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056ca:	f7fd fc59 	bl	8002f80 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d302      	bcc.n	80056e0 <I2C_IsErrorOccurred+0x54>
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d13a      	bne.n	8005756 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005702:	d121      	bne.n	8005748 <I2C_IsErrorOccurred+0xbc>
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800570a:	d01d      	beq.n	8005748 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800570c:	7cfb      	ldrb	r3, [r7, #19]
 800570e:	2b20      	cmp	r3, #32
 8005710:	d01a      	beq.n	8005748 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005720:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005722:	f7fd fc2d 	bl	8002f80 <HAL_GetTick>
 8005726:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005728:	e00e      	b.n	8005748 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800572a:	f7fd fc29 	bl	8002f80 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b19      	cmp	r3, #25
 8005736:	d907      	bls.n	8005748 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	f043 0320 	orr.w	r3, r3, #32
 800573e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005746:	e006      	b.n	8005756 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	f003 0320 	and.w	r3, r3, #32
 8005752:	2b20      	cmp	r3, #32
 8005754:	d1e9      	bne.n	800572a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b20      	cmp	r3, #32
 8005762:	d003      	beq.n	800576c <I2C_IsErrorOccurred+0xe0>
 8005764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0aa      	beq.n	80056c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800576c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005770:	2b00      	cmp	r3, #0
 8005772:	d103      	bne.n	800577c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2220      	movs	r2, #32
 800577a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	f043 0304 	orr.w	r3, r3, #4
 8005782:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00b      	beq.n	80057b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00b      	beq.n	80057d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	f043 0308 	orr.w	r3, r3, #8
 80057c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00b      	beq.n	80057f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	f043 0302 	orr.w	r3, r3, #2
 80057e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80057f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d01c      	beq.n	800583a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff fe45 	bl	8005490 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6859      	ldr	r1, [r3, #4]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	4b0d      	ldr	r3, [pc, #52]	; (8005848 <I2C_IsErrorOccurred+0x1bc>)
 8005812:	400b      	ands	r3, r1
 8005814:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	431a      	orrs	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2220      	movs	r2, #32
 8005826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800583a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800583e:	4618      	mov	r0, r3
 8005840:	3728      	adds	r7, #40	; 0x28
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	fe00e800 	.word	0xfe00e800

0800584c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	607b      	str	r3, [r7, #4]
 8005856:	460b      	mov	r3, r1
 8005858:	817b      	strh	r3, [r7, #10]
 800585a:	4613      	mov	r3, r2
 800585c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800585e:	897b      	ldrh	r3, [r7, #10]
 8005860:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005864:	7a7b      	ldrb	r3, [r7, #9]
 8005866:	041b      	lsls	r3, r3, #16
 8005868:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800586c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	4313      	orrs	r3, r2
 8005876:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800587a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	0d5b      	lsrs	r3, r3, #21
 8005886:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800588a:	4b08      	ldr	r3, [pc, #32]	; (80058ac <I2C_TransferConfig+0x60>)
 800588c:	430b      	orrs	r3, r1
 800588e:	43db      	mvns	r3, r3
 8005890:	ea02 0103 	and.w	r1, r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800589e:	bf00      	nop
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	03ff63ff 	.word	0x03ff63ff

080058b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	d138      	bne.n	8005938 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e032      	b.n	800593a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2224      	movs	r2, #36	; 0x24
 80058e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0201 	bic.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005902:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6819      	ldr	r1, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0201 	orr.w	r2, r2, #1
 8005922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	e000      	b.n	800593a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005938:	2302      	movs	r3, #2
  }
}
 800593a:	4618      	mov	r0, r3
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005946:	b480      	push	{r7}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b20      	cmp	r3, #32
 800595a:	d139      	bne.n	80059d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005966:	2302      	movs	r3, #2
 8005968:	e033      	b.n	80059d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2224      	movs	r2, #36	; 0x24
 8005976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0201 	bic.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005998:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0201 	orr.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	e000      	b.n	80059d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80059d0:	2302      	movs	r3, #2
  }
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
	...

080059e0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80059e0:	b480      	push	{r7}
 80059e2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80059e4:	4b05      	ldr	r3, [pc, #20]	; (80059fc <HAL_ICACHE_Enable+0x1c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a04      	ldr	r2, [pc, #16]	; (80059fc <HAL_ICACHE_Enable+0x1c>)
 80059ea:	f043 0301 	orr.w	r3, r3, #1
 80059ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	40030400 	.word	0x40030400

08005a00 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8005a0a:	4b14      	ldr	r3, [pc, #80]	; (8005a5c <HAL_ICACHE_Disable+0x5c>)
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005a10:	4b12      	ldr	r3, [pc, #72]	; (8005a5c <HAL_ICACHE_Disable+0x5c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a11      	ldr	r2, [pc, #68]	; (8005a5c <HAL_ICACHE_Disable+0x5c>)
 8005a16:	f023 0301 	bic.w	r3, r3, #1
 8005a1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a1c:	f7fd fab0 	bl	8002f80 <HAL_GetTick>
 8005a20:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005a22:	e00f      	b.n	8005a44 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8005a24:	f7fd faac 	bl	8002f80 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d908      	bls.n	8005a44 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005a32:	4b0a      	ldr	r3, [pc, #40]	; (8005a5c <HAL_ICACHE_Disable+0x5c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	71fb      	strb	r3, [r7, #7]
        break;
 8005a42:	e005      	b.n	8005a50 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <HAL_ICACHE_Disable+0x5c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e9      	bne.n	8005a24 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8005a50:	79fb      	ldrb	r3, [r7, #7]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40030400 	.word	0x40030400

08005a60 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005a6e:	4b22      	ldr	r3, [pc, #136]	; (8005af8 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	75fb      	strb	r3, [r7, #23]
 8005a7e:	e034      	b.n	8005aea <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	009a      	lsls	r2, r3, #2
 8005a84:	4b1d      	ldr	r3, [pc, #116]	; (8005afc <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8005a86:	4413      	add	r3, r2
 8005a88:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	75fb      	strb	r3, [r7, #23]
 8005a9a:	e026      	b.n	8005aea <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	425b      	negs	r3, r3
 8005aba:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8005abc:	401a      	ands	r2, r3
 8005abe:	4b10      	ldr	r3, [pc, #64]	; (8005b00 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	025a      	lsls	r2, r3, #9
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8005aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	371c      	adds	r7, #28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	40030400 	.word	0x40030400
 8005afc:	40030420 	.word	0x40030420
 8005b00:	07ff0000 	.word	0x07ff0000

08005b04 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e0bf      	b.n	8005c96 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fc fd76 	bl	800261c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005b46:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6999      	ldr	r1, [r3, #24]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b5c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6899      	ldr	r1, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4b4a      	ldr	r3, [pc, #296]	; (8005ca0 <HAL_LTDC_Init+0x19c>)
 8005b78:	400b      	ands	r3, r1
 8005b7a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	041b      	lsls	r3, r3, #16
 8005b82:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6899      	ldr	r1, [r3, #8]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68d9      	ldr	r1, [r3, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	4b3e      	ldr	r3, [pc, #248]	; (8005ca0 <HAL_LTDC_Init+0x19c>)
 8005ba6:	400b      	ands	r3, r1
 8005ba8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	041b      	lsls	r3, r3, #16
 8005bb0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68d9      	ldr	r1, [r3, #12]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a1a      	ldr	r2, [r3, #32]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6919      	ldr	r1, [r3, #16]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4b33      	ldr	r3, [pc, #204]	; (8005ca0 <HAL_LTDC_Init+0x19c>)
 8005bd4:	400b      	ands	r3, r1
 8005bd6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	041b      	lsls	r3, r3, #16
 8005bde:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6919      	ldr	r1, [r3, #16]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6959      	ldr	r1, [r3, #20]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	4b27      	ldr	r3, [pc, #156]	; (8005ca0 <HAL_LTDC_Init+0x19c>)
 8005c02:	400b      	ands	r3, r1
 8005c04:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	041b      	lsls	r3, r3, #16
 8005c0c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6959      	ldr	r1, [r3, #20]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005c34:	041b      	lsls	r3, r3, #16
 8005c36:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0206 	orr.w	r2, r2, #6
 8005c72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699a      	ldr	r2, [r3, #24]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0201 	orr.w	r2, r2, #1
 8005c82:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	f000f800 	.word	0xf000f800

08005ca4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d023      	beq.n	8005d0e <HAL_LTDC_IRQHandler+0x6a>
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d01e      	beq.n	8005d0e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0204 	bic.w	r2, r2, #4
 8005cde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2204      	movs	r2, #4
 8005ce6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cee:	f043 0201 	orr.w	r2, r3, #1
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2204      	movs	r2, #4
 8005cfc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f86f 	bl	8005dec <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d023      	beq.n	8005d60 <HAL_LTDC_IRQHandler+0xbc>
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d01e      	beq.n	8005d60 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0202 	bic.w	r2, r2, #2
 8005d30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2202      	movs	r2, #2
 8005d38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d40:	f043 0202 	orr.w	r2, r3, #2
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2204      	movs	r2, #4
 8005d4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f846 	bl	8005dec <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d01b      	beq.n	8005da2 <HAL_LTDC_IRQHandler+0xfe>
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d016      	beq.n	8005da2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0201 	bic.w	r2, r2, #1
 8005d82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f82f 	bl	8005e00 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f003 0308 	and.w	r3, r3, #8
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d01b      	beq.n	8005de4 <HAL_LTDC_IRQHandler+0x140>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d016      	beq.n	8005de4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0208 	bic.w	r2, r2, #8
 8005dc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2208      	movs	r2, #8
 8005dcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f818 	bl	8005e14 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005de4:	bf00      	nop
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e28:	b5b0      	push	{r4, r5, r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d101      	bne.n	8005e42 <HAL_LTDC_ConfigLayer+0x1a>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	e02c      	b.n	8005e9c <HAL_LTDC_ConfigLayer+0x74>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2134      	movs	r1, #52	; 0x34
 8005e58:	fb01 f303 	mul.w	r3, r1, r3
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	4614      	mov	r4, r2
 8005e66:	461d      	mov	r5, r3
 8005e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 f811 	bl	8005ea4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2201      	movs	r2, #1
 8005e88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bdb0      	pop	{r4, r5, r7, pc}

08005ea4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b089      	sub	sp, #36	; 0x24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	0c1b      	lsrs	r3, r3, #16
 8005ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ec0:	4413      	add	r3, r2
 8005ec2:	041b      	lsls	r3, r3, #16
 8005ec4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	01db      	lsls	r3, r3, #7
 8005ed0:	4413      	add	r3, r2
 8005ed2:	3384      	adds	r3, #132	; 0x84
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	6812      	ldr	r2, [r2, #0]
 8005eda:	4611      	mov	r1, r2
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	01d2      	lsls	r2, r2, #7
 8005ee0:	440a      	add	r2, r1
 8005ee2:	3284      	adds	r2, #132	; 0x84
 8005ee4:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8005ee8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	0c1b      	lsrs	r3, r3, #16
 8005ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005efa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005efc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4619      	mov	r1, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	01db      	lsls	r3, r3, #7
 8005f08:	440b      	add	r3, r1
 8005f0a:	3384      	adds	r3, #132	; 0x84
 8005f0c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005f12:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f22:	4413      	add	r3, r2
 8005f24:	041b      	lsls	r3, r3, #16
 8005f26:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	01db      	lsls	r3, r3, #7
 8005f32:	4413      	add	r3, r2
 8005f34:	3384      	adds	r3, #132	; 0x84
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	6812      	ldr	r2, [r2, #0]
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	01d2      	lsls	r2, r2, #7
 8005f42:	440a      	add	r2, r1
 8005f44:	3284      	adds	r2, #132	; 0x84
 8005f46:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8005f4a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f5a:	4413      	add	r3, r2
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4619      	mov	r1, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	01db      	lsls	r3, r3, #7
 8005f68:	440b      	add	r3, r1
 8005f6a:	3384      	adds	r3, #132	; 0x84
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	01db      	lsls	r3, r3, #7
 8005f7e:	4413      	add	r3, r2
 8005f80:	3384      	adds	r3, #132	; 0x84
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	6812      	ldr	r2, [r2, #0]
 8005f88:	4611      	mov	r1, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	01d2      	lsls	r2, r2, #7
 8005f8e:	440a      	add	r2, r1
 8005f90:	3284      	adds	r2, #132	; 0x84
 8005f92:	f023 0307 	bic.w	r3, r3, #7
 8005f96:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	01db      	lsls	r3, r3, #7
 8005fa2:	4413      	add	r3, r2
 8005fa4:	3384      	adds	r3, #132	; 0x84
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005fb4:	021b      	lsls	r3, r3, #8
 8005fb6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005fbe:	041b      	lsls	r3, r3, #16
 8005fc0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	061b      	lsls	r3, r3, #24
 8005fc8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	01db      	lsls	r3, r3, #7
 8005fd4:	4413      	add	r3, r2
 8005fd6:	3384      	adds	r3, #132	; 0x84
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	01db      	lsls	r3, r3, #7
 8005fe4:	4413      	add	r3, r2
 8005fe6:	3384      	adds	r3, #132	; 0x84
 8005fe8:	461a      	mov	r2, r3
 8005fea:	2300      	movs	r3, #0
 8005fec:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4619      	mov	r1, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	01db      	lsls	r3, r3, #7
 8006008:	440b      	add	r3, r1
 800600a:	3384      	adds	r3, #132	; 0x84
 800600c:	4619      	mov	r1, r3
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	01db      	lsls	r3, r3, #7
 800601e:	4413      	add	r3, r2
 8006020:	3384      	adds	r3, #132	; 0x84
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	6812      	ldr	r2, [r2, #0]
 8006028:	4611      	mov	r1, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	01d2      	lsls	r2, r2, #7
 800602e:	440a      	add	r2, r1
 8006030:	3284      	adds	r2, #132	; 0x84
 8006032:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006036:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	01db      	lsls	r3, r3, #7
 8006042:	4413      	add	r3, r2
 8006044:	3384      	adds	r3, #132	; 0x84
 8006046:	461a      	mov	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	01db      	lsls	r3, r3, #7
 8006058:	4413      	add	r3, r2
 800605a:	3384      	adds	r3, #132	; 0x84
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	6812      	ldr	r2, [r2, #0]
 8006062:	4611      	mov	r1, r2
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	01d2      	lsls	r2, r2, #7
 8006068:	440a      	add	r2, r1
 800606a:	3284      	adds	r2, #132	; 0x84
 800606c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006070:	f023 0307 	bic.w	r3, r3, #7
 8006074:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	69da      	ldr	r2, [r3, #28]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	68f9      	ldr	r1, [r7, #12]
 8006080:	6809      	ldr	r1, [r1, #0]
 8006082:	4608      	mov	r0, r1
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	01c9      	lsls	r1, r1, #7
 8006088:	4401      	add	r1, r0
 800608a:	3184      	adds	r1, #132	; 0x84
 800608c:	4313      	orrs	r3, r2
 800608e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	01db      	lsls	r3, r3, #7
 800609a:	4413      	add	r3, r2
 800609c:	3384      	adds	r3, #132	; 0x84
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	461a      	mov	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	01db      	lsls	r3, r3, #7
 80060aa:	4413      	add	r3, r2
 80060ac:	3384      	adds	r3, #132	; 0x84
 80060ae:	461a      	mov	r2, r3
 80060b0:	2300      	movs	r3, #0
 80060b2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	461a      	mov	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	01db      	lsls	r3, r3, #7
 80060be:	4413      	add	r3, r2
 80060c0:	3384      	adds	r3, #132	; 0x84
 80060c2:	461a      	mov	r2, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d102      	bne.n	80060d8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80060d2:	2304      	movs	r3, #4
 80060d4:	61fb      	str	r3, [r7, #28]
 80060d6:	e01b      	b.n	8006110 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d102      	bne.n	80060e6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80060e0:	2303      	movs	r3, #3
 80060e2:	61fb      	str	r3, [r7, #28]
 80060e4:	e014      	b.n	8006110 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d00b      	beq.n	8006106 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d007      	beq.n	8006106 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d003      	beq.n	8006106 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006102:	2b07      	cmp	r3, #7
 8006104:	d102      	bne.n	800610c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006106:	2302      	movs	r3, #2
 8006108:	61fb      	str	r3, [r7, #28]
 800610a:	e001      	b.n	8006110 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800610c:	2301      	movs	r3, #1
 800610e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	01db      	lsls	r3, r3, #7
 800611a:	4413      	add	r3, r2
 800611c:	3384      	adds	r3, #132	; 0x84
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	4611      	mov	r1, r2
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	01d2      	lsls	r2, r2, #7
 800612a:	440a      	add	r2, r1
 800612c:	3284      	adds	r2, #132	; 0x84
 800612e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006132:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	fb02 f303 	mul.w	r3, r2, r3
 800613e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6859      	ldr	r1, [r3, #4]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	1acb      	subs	r3, r1, r3
 800614a:	69f9      	ldr	r1, [r7, #28]
 800614c:	fb01 f303 	mul.w	r3, r1, r3
 8006150:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006152:	68f9      	ldr	r1, [r7, #12]
 8006154:	6809      	ldr	r1, [r1, #0]
 8006156:	4608      	mov	r0, r1
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	01c9      	lsls	r1, r1, #7
 800615c:	4401      	add	r1, r0
 800615e:	3184      	adds	r1, #132	; 0x84
 8006160:	4313      	orrs	r3, r2
 8006162:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	01db      	lsls	r3, r3, #7
 800616e:	4413      	add	r3, r2
 8006170:	3384      	adds	r3, #132	; 0x84
 8006172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	6812      	ldr	r2, [r2, #0]
 8006178:	4611      	mov	r1, r2
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	01d2      	lsls	r2, r2, #7
 800617e:	440a      	add	r2, r1
 8006180:	3284      	adds	r2, #132	; 0x84
 8006182:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006186:	f023 0307 	bic.w	r3, r3, #7
 800618a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	461a      	mov	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	01db      	lsls	r3, r3, #7
 8006196:	4413      	add	r3, r2
 8006198:	3384      	adds	r3, #132	; 0x84
 800619a:	461a      	mov	r2, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	01db      	lsls	r3, r3, #7
 80061ac:	4413      	add	r3, r2
 80061ae:	3384      	adds	r3, #132	; 0x84
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	6812      	ldr	r2, [r2, #0]
 80061b6:	4611      	mov	r1, r2
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	01d2      	lsls	r2, r2, #7
 80061bc:	440a      	add	r2, r1
 80061be:	3284      	adds	r2, #132	; 0x84
 80061c0:	f043 0301 	orr.w	r3, r3, #1
 80061c4:	6013      	str	r3, [r2, #0]
}
 80061c6:	bf00      	nop
 80061c8:	3724      	adds	r7, #36	; 0x24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
	...

080061d4 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	73fb      	strb	r3, [r7, #15]
 80061ea:	e141      	b.n	8006470 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 f947 	bl	8006484 <MDF_GetHandleNumberFromInstance>
 80061f6:	4603      	mov	r3, r0
 80061f8:	4a86      	ldr	r2, [pc, #536]	; (8006414 <HAL_MDF_Init+0x240>)
 80061fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d002      	beq.n	8006208 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	73fb      	strb	r3, [r7, #15]
 8006206:	e133      	b.n	8006470 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7fb fcd7 	bl	8001bbc <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 800620e:	4b82      	ldr	r3, [pc, #520]	; (8006418 <HAL_MDF_Init+0x244>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d11d      	bne.n	8006252 <HAL_MDF_Init+0x7e>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a80      	ldr	r2, [pc, #512]	; (800641c <HAL_MDF_Init+0x248>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d023      	beq.n	8006268 <HAL_MDF_Init+0x94>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a7e      	ldr	r2, [pc, #504]	; (8006420 <HAL_MDF_Init+0x24c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d01e      	beq.n	8006268 <HAL_MDF_Init+0x94>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a7d      	ldr	r2, [pc, #500]	; (8006424 <HAL_MDF_Init+0x250>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d019      	beq.n	8006268 <HAL_MDF_Init+0x94>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a7b      	ldr	r2, [pc, #492]	; (8006428 <HAL_MDF_Init+0x254>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d014      	beq.n	8006268 <HAL_MDF_Init+0x94>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a7a      	ldr	r2, [pc, #488]	; (800642c <HAL_MDF_Init+0x258>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d00f      	beq.n	8006268 <HAL_MDF_Init+0x94>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a78      	ldr	r2, [pc, #480]	; (8006430 <HAL_MDF_Init+0x25c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00a      	beq.n	8006268 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8006252:	4b78      	ldr	r3, [pc, #480]	; (8006434 <HAL_MDF_Init+0x260>)
 8006254:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8006256:	2b00      	cmp	r3, #0
 8006258:	f040 8090 	bne.w	800637c <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a75      	ldr	r2, [pc, #468]	; (8006438 <HAL_MDF_Init+0x264>)
 8006262:	4293      	cmp	r3, r2
 8006264:	f040 808a 	bne.w	800637c <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a72      	ldr	r2, [pc, #456]	; (8006438 <HAL_MDF_Init+0x264>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d101      	bne.n	8006276 <HAL_MDF_Init+0xa2>
 8006272:	4b72      	ldr	r3, [pc, #456]	; (800643c <HAL_MDF_Init+0x268>)
 8006274:	e000      	b.n	8006278 <HAL_MDF_Init+0xa4>
 8006276:	4b72      	ldr	r3, [pc, #456]	; (8006440 <HAL_MDF_Init+0x26c>)
 8006278:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	da02      	bge.n	8006288 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	73fb      	strb	r3, [r7, #15]
 8006286:	e079      	b.n	800637c <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a63      	ldr	r2, [pc, #396]	; (800641c <HAL_MDF_Init+0x248>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d018      	beq.n	80062c4 <HAL_MDF_Init+0xf0>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a62      	ldr	r2, [pc, #392]	; (8006420 <HAL_MDF_Init+0x24c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d013      	beq.n	80062c4 <HAL_MDF_Init+0xf0>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a60      	ldr	r2, [pc, #384]	; (8006424 <HAL_MDF_Init+0x250>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00e      	beq.n	80062c4 <HAL_MDF_Init+0xf0>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a5f      	ldr	r2, [pc, #380]	; (8006428 <HAL_MDF_Init+0x254>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d009      	beq.n	80062c4 <HAL_MDF_Init+0xf0>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a5d      	ldr	r2, [pc, #372]	; (800642c <HAL_MDF_Init+0x258>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d004      	beq.n	80062c4 <HAL_MDF_Init+0xf0>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a5c      	ldr	r2, [pc, #368]	; (8006430 <HAL_MDF_Init+0x25c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d10d      	bne.n	80062e0 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	431a      	orrs	r2, r3
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2200      	movs	r2, #0
 80062e4:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	061b      	lsls	r3, r3, #24
 80062f2:	431a      	orrs	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	7b1b      	ldrb	r3, [r3, #12]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d137      	bne.n	8006370 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	3b01      	subs	r3, #1
 800630a:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006310:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8006318:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 800631a:	431a      	orrs	r2, r3
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	7e1b      	ldrb	r3, [r3, #24]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d123      	bne.n	8006370 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a3b      	ldr	r2, [pc, #236]	; (800641c <HAL_MDF_Init+0x248>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d012      	beq.n	8006358 <HAL_MDF_Init+0x184>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a3a      	ldr	r2, [pc, #232]	; (8006420 <HAL_MDF_Init+0x24c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00d      	beq.n	8006358 <HAL_MDF_Init+0x184>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a38      	ldr	r2, [pc, #224]	; (8006424 <HAL_MDF_Init+0x250>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d008      	beq.n	8006358 <HAL_MDF_Init+0x184>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a37      	ldr	r2, [pc, #220]	; (8006428 <HAL_MDF_Init+0x254>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <HAL_MDF_Init+0x184>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a35      	ldr	r2, [pc, #212]	; (800642c <HAL_MDF_Init+0x258>)
 8006356:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006364:	430b      	orrs	r3, r1
 8006366:	4313      	orrs	r3, r2
 8006368:	f043 0210 	orr.w	r2, r3, #16
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f043 0201 	orr.w	r2, r3, #1
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d128      	bne.n	80063d4 <HAL_MDF_Init+0x200>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006388:	2b01      	cmp	r3, #1
 800638a:	d123      	bne.n	80063d4 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	da02      	bge.n	800639c <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	73fb      	strb	r3, [r7, #15]
 800639a:	e01b      	b.n	80063d4 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6819      	ldr	r1, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ae:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80063b4:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ba:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d14a      	bne.n	8006470 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 021f 	bic.w	r2, r2, #31
 80063e8:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6859      	ldr	r1, [r3, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a0d      	ldr	r2, [pc, #52]	; (8006438 <HAL_MDF_Init+0x264>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d11e      	bne.n	8006444 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8006406:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <HAL_MDF_Init+0x260>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3301      	adds	r3, #1
 800640c:	4a09      	ldr	r2, [pc, #36]	; (8006434 <HAL_MDF_Init+0x260>)
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	e01d      	b.n	800644e <HAL_MDF_Init+0x27a>
 8006412:	bf00      	nop
 8006414:	200014c8 	.word	0x200014c8
 8006418:	200014c0 	.word	0x200014c0
 800641c:	40025080 	.word	0x40025080
 8006420:	40025100 	.word	0x40025100
 8006424:	40025180 	.word	0x40025180
 8006428:	40025200 	.word	0x40025200
 800642c:	40025280 	.word	0x40025280
 8006430:	40025300 	.word	0x40025300
 8006434:	200014c4 	.word	0x200014c4
 8006438:	46024080 	.word	0x46024080
 800643c:	46024000 	.word	0x46024000
 8006440:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8006444:	4b0d      	ldr	r3, [pc, #52]	; (800647c <HAL_MDF_Init+0x2a8>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3301      	adds	r3, #1
 800644a:	4a0c      	ldr	r2, [pc, #48]	; (800647c <HAL_MDF_Init+0x2a8>)
 800644c:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f000 f816 	bl	8006484 <MDF_GetHandleNumberFromInstance>
 8006458:	4602      	mov	r2, r0
 800645a:	4909      	ldr	r1, [pc, #36]	; (8006480 <HAL_MDF_Init+0x2ac>)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	200014c0 	.word	0x200014c0
 8006480:	200014c8 	.word	0x200014c8

08006484 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a19      	ldr	r2, [pc, #100]	; (80064f4 <MDF_GetHandleNumberFromInstance+0x70>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d102      	bne.n	800649a <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	e024      	b.n	80064e4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a16      	ldr	r2, [pc, #88]	; (80064f8 <MDF_GetHandleNumberFromInstance+0x74>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d102      	bne.n	80064a8 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 80064a2:	2301      	movs	r3, #1
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	e01d      	b.n	80064e4 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a14      	ldr	r2, [pc, #80]	; (80064fc <MDF_GetHandleNumberFromInstance+0x78>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d102      	bne.n	80064b6 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 80064b0:	2302      	movs	r3, #2
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	e016      	b.n	80064e4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a11      	ldr	r2, [pc, #68]	; (8006500 <MDF_GetHandleNumberFromInstance+0x7c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d102      	bne.n	80064c4 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 80064be:	2303      	movs	r3, #3
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	e00f      	b.n	80064e4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a0f      	ldr	r2, [pc, #60]	; (8006504 <MDF_GetHandleNumberFromInstance+0x80>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d102      	bne.n	80064d2 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 80064cc:	2304      	movs	r3, #4
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	e008      	b.n	80064e4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a0c      	ldr	r2, [pc, #48]	; (8006508 <MDF_GetHandleNumberFromInstance+0x84>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d102      	bne.n	80064e0 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 80064da:	2305      	movs	r3, #5
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	e001      	b.n	80064e4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 80064e0:	2306      	movs	r3, #6
 80064e2:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 80064e4:	68fb      	ldr	r3, [r7, #12]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40025080 	.word	0x40025080
 80064f8:	40025100 	.word	0x40025100
 80064fc:	40025180 	.word	0x40025180
 8006500:	40025200 	.word	0x40025200
 8006504:	40025280 	.word	0x40025280
 8006508:	40025300 	.word	0x40025300

0800650c <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f043 0201 	orr.w	r2, r3, #1
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	601a      	str	r2, [r3, #0]
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af02      	add	r7, sp, #8
 8006532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006534:	2300      	movs	r3, #0
 8006536:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006538:	f7fc fd22 	bl	8002f80 <HAL_GetTick>
 800653c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d102      	bne.n	800654a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	73fb      	strb	r3, [r7, #15]
 8006548:	e0a5      	b.n	8006696 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006554:	2b00      	cmp	r3, #0
 8006556:	f040 809e 	bne.w	8006696 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fc f8b4 	bl	80026c8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006560:	f241 3188 	movw	r1, #5000	; 0x1388
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f951 	bl	800680c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	4b4b      	ldr	r3, [pc, #300]	; (80066a0 <HAL_OSPI_Init+0x174>)
 8006572:	4013      	ands	r3, r2
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	68d1      	ldr	r1, [r2, #12]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6912      	ldr	r2, [r2, #16]
 800657c:	3a01      	subs	r2, #1
 800657e:	0412      	lsls	r2, r2, #16
 8006580:	4311      	orrs	r1, r2
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6952      	ldr	r2, [r2, #20]
 8006586:	3a01      	subs	r2, #1
 8006588:	0212      	lsls	r2, r2, #8
 800658a:	4311      	orrs	r1, r2
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006590:	4311      	orrs	r1, r2
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	69d2      	ldr	r2, [r2, #28]
 8006596:	4311      	orrs	r1, r2
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6812      	ldr	r2, [r2, #0]
 800659c:	430b      	orrs	r3, r1
 800659e:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1a      	ldr	r2, [r3, #32]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ba:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80065d0:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	021a      	lsls	r2, r3, #8
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2200      	movs	r2, #0
 80065f6:	2120      	movs	r1, #32
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fe09 	bl	8007210 <OSPI_WaitFlagStateUntilTimeout>
 80065fe:	4603      	mov	r3, r0
 8006600:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d146      	bne.n	8006696 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	1e5a      	subs	r2, r3, #1
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800663e:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f042 0201 	orr.w	r2, r2, #1
 8006664:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	2b02      	cmp	r3, #2
 800666c:	d107      	bne.n	800667e <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f042 0202 	orr.w	r2, r2, #2
 800667c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006686:	d103      	bne.n	8006690 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	651a      	str	r2, [r3, #80]	; 0x50
 800668e:	e002      	b.n	8006696 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8006696:	7bfb      	ldrb	r3, [r7, #15]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	f8e0c0f4 	.word	0xf8e0c0f4

080066a4 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b08a      	sub	sp, #40	; 0x28
 80066a8:	af02      	add	r7, sp, #8
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80066b0:	f7fc fc66 	bl	8002f80 <HAL_GetTick>
 80066b4:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ba:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d002      	beq.n	80066c8 <HAL_OSPI_HyperbusCfg+0x24>
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d122      	bne.n	800670e <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	2200      	movs	r2, #0
 80066d0:	2120      	movs	r1, #32
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 fd9c 	bl	8007210 <OSPI_WaitFlagStateUntilTimeout>
 80066d8:	4603      	mov	r3, r0
 80066da:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80066dc:	7ffb      	ldrb	r3, [r7, #31]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d11a      	bne.n	8006718 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	041a      	lsls	r2, r3, #16
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	431a      	orrs	r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	ea42 0103 	orr.w	r1, r2, r3
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2202      	movs	r2, #2
 800670a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800670c:	e004      	b.n	8006718 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2210      	movs	r2, #16
 8006716:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8006718:	7ffb      	ldrb	r3, [r7, #31]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3720      	adds	r7, #32
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b088      	sub	sp, #32
 8006726:	af02      	add	r7, sp, #8
 8006728:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800672e:	f7fc fc27 	bl	8002f80 <HAL_GetTick>
 8006732:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006738:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f003 0308 	and.w	r3, r3, #8
 8006740:	2b00      	cmp	r3, #0
 8006742:	d104      	bne.n	800674e <HAL_OSPI_Abort+0x2c>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f003 0304 	and.w	r3, r3, #4
 800674a:	2b00      	cmp	r3, #0
 800674c:	d052      	beq.n	80067f4 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b00      	cmp	r3, #0
 800675a:	d014      	beq.n	8006786 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f022 0204 	bic.w	r2, r2, #4
 800676a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006770:	4618      	mov	r0, r3
 8006772:	f7fc feb2 	bl	80034da <HAL_DMA_Abort>
 8006776:	4603      	mov	r3, r0
 8006778:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800677a:	7dfb      	ldrb	r3, [r7, #23]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2204      	movs	r2, #4
 8006784:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	f003 0320 	and.w	r3, r3, #32
 8006790:	2b00      	cmp	r3, #0
 8006792:	d02b      	beq.n	80067ec <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0202 	orr.w	r2, r2, #2
 80067a2:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	2201      	movs	r2, #1
 80067ae:	2102      	movs	r1, #2
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fd2d 	bl	8007210 <OSPI_WaitFlagStateUntilTimeout>
 80067b6:	4603      	mov	r3, r0
 80067b8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80067ba:	7dfb      	ldrb	r3, [r7, #23]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d11f      	bne.n	8006800 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2202      	movs	r2, #2
 80067c6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	2200      	movs	r2, #0
 80067d2:	2120      	movs	r1, #32
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fd1b 	bl	8007210 <OSPI_WaitFlagStateUntilTimeout>
 80067da:	4603      	mov	r3, r0
 80067dc:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80067de:	7dfb      	ldrb	r3, [r7, #23]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10d      	bne.n	8006800 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80067ea:	e009      	b.n	8006800 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80067f2:	e005      	b.n	8006800 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2210      	movs	r2, #16
 80067fc:	655a      	str	r2, [r3, #84]	; 0x54
 80067fe:	e000      	b.n	8006802 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006800:	bf00      	nop
  }

  /* Return function status */
  return status;
 8006802:	7dfb      	ldrb	r3, [r7, #23]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
	...

0800682c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b094      	sub	sp, #80	; 0x50
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a9d      	ldr	r2, [pc, #628]	; (8006ac0 <HAL_OSPIM_Config+0x294>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d105      	bne.n	800685a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8006852:	2301      	movs	r3, #1
 8006854:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8006858:	e004      	b.n	8006864 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800685a:	2301      	movs	r3, #1
 800685c:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006864:	2300      	movs	r3, #0
 8006866:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800686a:	e01d      	b.n	80068a8 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 800686c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006870:	3301      	adds	r3, #1
 8006872:	b2d8      	uxtb	r0, r3
 8006874:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8006878:	f107 0114 	add.w	r1, r7, #20
 800687c:	4613      	mov	r3, r2
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	4413      	add	r3, r2
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	440b      	add	r3, r1
 8006886:	4619      	mov	r1, r3
 8006888:	f000 fd02 	bl	8007290 <OSPIM_GetConfig>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d005      	beq.n	800689e <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2208      	movs	r2, #8
 800689c:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800689e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80068a2:	3301      	adds	r3, #1
 80068a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80068a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d9dd      	bls.n	800686c <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80068b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f040 849e 	bne.w	80071f6 <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80068ba:	4b81      	ldr	r3, [pc, #516]	; (8006ac0 <HAL_OSPIM_Config+0x294>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00b      	beq.n	80068de <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80068c6:	4b7e      	ldr	r3, [pc, #504]	; (8006ac0 <HAL_OSPIM_Config+0x294>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a7d      	ldr	r2, [pc, #500]	; (8006ac0 <HAL_OSPIM_Config+0x294>)
 80068cc:	f023 0301 	bic.w	r3, r3, #1
 80068d0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80068d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80068d6:	f043 0301 	orr.w	r3, r3, #1
 80068da:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80068de:	4b79      	ldr	r3, [pc, #484]	; (8006ac4 <HAL_OSPIM_Config+0x298>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00b      	beq.n	8006902 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80068ea:	4b76      	ldr	r3, [pc, #472]	; (8006ac4 <HAL_OSPIM_Config+0x298>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a75      	ldr	r2, [pc, #468]	; (8006ac4 <HAL_OSPIM_Config+0x298>)
 80068f0:	f023 0301 	bic.w	r3, r3, #1
 80068f4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80068f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80068fa:	f043 0302 	orr.w	r3, r3, #2
 80068fe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006902:	4971      	ldr	r1, [pc, #452]	; (8006ac8 <HAL_OSPIM_Config+0x29c>)
 8006904:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006906:	4613      	mov	r3, r2
 8006908:	005b      	lsls	r3, r3, #1
 800690a:	4413      	add	r3, r2
 800690c:	00db      	lsls	r3, r3, #3
 800690e:	3350      	adds	r3, #80	; 0x50
 8006910:	443b      	add	r3, r7
 8006912:	3b34      	subs	r3, #52	; 0x34
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3b01      	subs	r3, #1
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	440b      	add	r3, r1
 800691c:	6859      	ldr	r1, [r3, #4]
 800691e:	486a      	ldr	r0, [pc, #424]	; (8006ac8 <HAL_OSPIM_Config+0x29c>)
 8006920:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006922:	4613      	mov	r3, r2
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	4413      	add	r3, r2
 8006928:	00db      	lsls	r3, r3, #3
 800692a:	3350      	adds	r3, #80	; 0x50
 800692c:	443b      	add	r3, r7
 800692e:	3b34      	subs	r3, #52	; 0x34
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3b01      	subs	r3, #1
 8006934:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4403      	add	r3, r0
 800693c:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800693e:	4b62      	ldr	r3, [pc, #392]	; (8006ac8 <HAL_OSPIM_Config+0x29c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 80c0 	beq.w	8006acc <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800694c:	4b5e      	ldr	r3, [pc, #376]	; (8006ac8 <HAL_OSPIM_Config+0x29c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a5d      	ldr	r2, [pc, #372]	; (8006ac8 <HAL_OSPIM_Config+0x29c>)
 8006952:	f023 0301 	bic.w	r3, r3, #1
 8006956:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8006958:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800695c:	2b01      	cmp	r3, #1
 800695e:	f040 8162 	bne.w	8006c26 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8006962:	4959      	ldr	r1, [pc, #356]	; (8006ac8 <HAL_OSPIM_Config+0x29c>)
 8006964:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006968:	4613      	mov	r3, r2
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	4413      	add	r3, r2
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	3350      	adds	r3, #80	; 0x50
 8006972:	443b      	add	r3, r7
 8006974:	3b3c      	subs	r3, #60	; 0x3c
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3b01      	subs	r3, #1
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	440b      	add	r3, r1
 800697e:	6859      	ldr	r1, [r3, #4]
 8006980:	4851      	ldr	r0, [pc, #324]	; (8006ac8 <HAL_OSPIM_Config+0x29c>)
 8006982:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006986:	4613      	mov	r3, r2
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	4413      	add	r3, r2
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	3350      	adds	r3, #80	; 0x50
 8006990:	443b      	add	r3, r7
 8006992:	3b3c      	subs	r3, #60	; 0x3c
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3b01      	subs	r3, #1
 8006998:	f041 0202 	orr.w	r2, r1, #2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4403      	add	r3, r0
 80069a0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80069a2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80069a6:	4613      	mov	r3, r2
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	4413      	add	r3, r2
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	3350      	adds	r3, #80	; 0x50
 80069b0:	443b      	add	r3, r7
 80069b2:	3b38      	subs	r3, #56	; 0x38
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d01f      	beq.n	80069fa <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 80069ba:	4943      	ldr	r1, [pc, #268]	; (8006ac8 <HAL_OSPIM_Config+0x29c>)
 80069bc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80069c0:	4613      	mov	r3, r2
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	4413      	add	r3, r2
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	3350      	adds	r3, #80	; 0x50
 80069ca:	443b      	add	r3, r7
 80069cc:	3b38      	subs	r3, #56	; 0x38
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	440b      	add	r3, r1
 80069d6:	6859      	ldr	r1, [r3, #4]
 80069d8:	483b      	ldr	r0, [pc, #236]	; (8006ac8 <HAL_OSPIM_Config+0x29c>)
 80069da:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80069de:	4613      	mov	r3, r2
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	4413      	add	r3, r2
 80069e4:	00db      	lsls	r3, r3, #3
 80069e6:	3350      	adds	r3, #80	; 0x50
 80069e8:	443b      	add	r3, r7
 80069ea:	3b38      	subs	r3, #56	; 0x38
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	f041 0220 	orr.w	r2, r1, #32
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4403      	add	r3, r0
 80069f8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80069fa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80069fe:	4613      	mov	r3, r2
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	4413      	add	r3, r2
 8006a04:	00db      	lsls	r3, r3, #3
 8006a06:	3350      	adds	r3, #80	; 0x50
 8006a08:	443b      	add	r3, r7
 8006a0a:	3b30      	subs	r3, #48	; 0x30
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d023      	beq.n	8006a5a <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006a12:	492d      	ldr	r1, [pc, #180]	; (8006ac8 <HAL_OSPIM_Config+0x29c>)
 8006a14:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a18:	4613      	mov	r3, r2
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	4413      	add	r3, r2
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	3350      	adds	r3, #80	; 0x50
 8006a22:	443b      	add	r3, r7
 8006a24:	3b30      	subs	r3, #48	; 0x30
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	440b      	add	r3, r1
 8006a32:	6859      	ldr	r1, [r3, #4]
 8006a34:	4824      	ldr	r0, [pc, #144]	; (8006ac8 <HAL_OSPIM_Config+0x29c>)
 8006a36:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	4413      	add	r3, r2
 8006a40:	00db      	lsls	r3, r3, #3
 8006a42:	3350      	adds	r3, #80	; 0x50
 8006a44:	443b      	add	r3, r7
 8006a46:	3b30      	subs	r3, #48	; 0x30
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4403      	add	r3, r0
 8006a58:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006a5a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a5e:	4613      	mov	r3, r2
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	4413      	add	r3, r2
 8006a64:	00db      	lsls	r3, r3, #3
 8006a66:	3350      	adds	r3, #80	; 0x50
 8006a68:	443b      	add	r3, r7
 8006a6a:	3b2c      	subs	r3, #44	; 0x2c
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 80d9 	beq.w	8006c26 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006a74:	4914      	ldr	r1, [pc, #80]	; (8006ac8 <HAL_OSPIM_Config+0x29c>)
 8006a76:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	4413      	add	r3, r2
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	3350      	adds	r3, #80	; 0x50
 8006a84:	443b      	add	r3, r7
 8006a86:	3b2c      	subs	r3, #44	; 0x2c
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	440b      	add	r3, r1
 8006a94:	6859      	ldr	r1, [r3, #4]
 8006a96:	480c      	ldr	r0, [pc, #48]	; (8006ac8 <HAL_OSPIM_Config+0x29c>)
 8006a98:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	4413      	add	r3, r2
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	3350      	adds	r3, #80	; 0x50
 8006aa6:	443b      	add	r3, r7
 8006aa8:	3b2c      	subs	r3, #44	; 0x2c
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4403      	add	r3, r0
 8006aba:	605a      	str	r2, [r3, #4]
 8006abc:	e0b3      	b.n	8006c26 <HAL_OSPIM_Config+0x3fa>
 8006abe:	bf00      	nop
 8006ac0:	420d1400 	.word	0x420d1400
 8006ac4:	420d2400 	.word	0x420d2400
 8006ac8:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8006acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ace:	4613      	mov	r3, r2
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	4413      	add	r3, r2
 8006ad4:	00db      	lsls	r3, r3, #3
 8006ad6:	3350      	adds	r3, #80	; 0x50
 8006ad8:	443b      	add	r3, r7
 8006ada:	3b3c      	subs	r3, #60	; 0x3c
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f000 80a1 	beq.w	8006c26 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006ae4:	4993      	ldr	r1, [pc, #588]	; (8006d34 <HAL_OSPIM_Config+0x508>)
 8006ae6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ae8:	4613      	mov	r3, r2
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	4413      	add	r3, r2
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	3350      	adds	r3, #80	; 0x50
 8006af2:	443b      	add	r3, r7
 8006af4:	3b3c      	subs	r3, #60	; 0x3c
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	440b      	add	r3, r1
 8006afe:	6859      	ldr	r1, [r3, #4]
 8006b00:	488c      	ldr	r0, [pc, #560]	; (8006d34 <HAL_OSPIM_Config+0x508>)
 8006b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b04:	4613      	mov	r3, r2
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	4413      	add	r3, r2
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	3350      	adds	r3, #80	; 0x50
 8006b0e:	443b      	add	r3, r7
 8006b10:	3b3c      	subs	r3, #60	; 0x3c
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	f021 0201 	bic.w	r2, r1, #1
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4403      	add	r3, r0
 8006b1e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006b20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b22:	4613      	mov	r3, r2
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	4413      	add	r3, r2
 8006b28:	00db      	lsls	r3, r3, #3
 8006b2a:	3350      	adds	r3, #80	; 0x50
 8006b2c:	443b      	add	r3, r7
 8006b2e:	3b38      	subs	r3, #56	; 0x38
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d01d      	beq.n	8006b72 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006b36:	497f      	ldr	r1, [pc, #508]	; (8006d34 <HAL_OSPIM_Config+0x508>)
 8006b38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	4413      	add	r3, r2
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	3350      	adds	r3, #80	; 0x50
 8006b44:	443b      	add	r3, r7
 8006b46:	3b38      	subs	r3, #56	; 0x38
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	440b      	add	r3, r1
 8006b50:	6859      	ldr	r1, [r3, #4]
 8006b52:	4878      	ldr	r0, [pc, #480]	; (8006d34 <HAL_OSPIM_Config+0x508>)
 8006b54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b56:	4613      	mov	r3, r2
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	4413      	add	r3, r2
 8006b5c:	00db      	lsls	r3, r3, #3
 8006b5e:	3350      	adds	r3, #80	; 0x50
 8006b60:	443b      	add	r3, r7
 8006b62:	3b38      	subs	r3, #56	; 0x38
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	f021 0210 	bic.w	r2, r1, #16
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4403      	add	r3, r0
 8006b70:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006b72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b74:	4613      	mov	r3, r2
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	4413      	add	r3, r2
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	3350      	adds	r3, #80	; 0x50
 8006b7e:	443b      	add	r3, r7
 8006b80:	3b30      	subs	r3, #48	; 0x30
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d021      	beq.n	8006bcc <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006b88:	496a      	ldr	r1, [pc, #424]	; (8006d34 <HAL_OSPIM_Config+0x508>)
 8006b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	005b      	lsls	r3, r3, #1
 8006b90:	4413      	add	r3, r2
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	3350      	adds	r3, #80	; 0x50
 8006b96:	443b      	add	r3, r7
 8006b98:	3b30      	subs	r3, #48	; 0x30
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	440b      	add	r3, r1
 8006ba6:	6859      	ldr	r1, [r3, #4]
 8006ba8:	4862      	ldr	r0, [pc, #392]	; (8006d34 <HAL_OSPIM_Config+0x508>)
 8006baa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bac:	4613      	mov	r3, r2
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	4413      	add	r3, r2
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	3350      	adds	r3, #80	; 0x50
 8006bb6:	443b      	add	r3, r7
 8006bb8:	3b30      	subs	r3, #48	; 0x30
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4403      	add	r3, r0
 8006bca:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bce:	4613      	mov	r3, r2
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	4413      	add	r3, r2
 8006bd4:	00db      	lsls	r3, r3, #3
 8006bd6:	3350      	adds	r3, #80	; 0x50
 8006bd8:	443b      	add	r3, r7
 8006bda:	3b2c      	subs	r3, #44	; 0x2c
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d021      	beq.n	8006c26 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006be2:	4954      	ldr	r1, [pc, #336]	; (8006d34 <HAL_OSPIM_Config+0x508>)
 8006be4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006be6:	4613      	mov	r3, r2
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	4413      	add	r3, r2
 8006bec:	00db      	lsls	r3, r3, #3
 8006bee:	3350      	adds	r3, #80	; 0x50
 8006bf0:	443b      	add	r3, r7
 8006bf2:	3b2c      	subs	r3, #44	; 0x2c
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	440b      	add	r3, r1
 8006c00:	6859      	ldr	r1, [r3, #4]
 8006c02:	484c      	ldr	r0, [pc, #304]	; (8006d34 <HAL_OSPIM_Config+0x508>)
 8006c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c06:	4613      	mov	r3, r2
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	4413      	add	r3, r2
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	3350      	adds	r3, #80	; 0x50
 8006c10:	443b      	add	r3, r7
 8006c12:	3b2c      	subs	r3, #44	; 0x2c
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4403      	add	r3, r0
 8006c24:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	6819      	ldr	r1, [r3, #0]
 8006c2a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006c2e:	4613      	mov	r3, r2
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	4413      	add	r3, r2
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	3350      	adds	r3, #80	; 0x50
 8006c38:	443b      	add	r3, r7
 8006c3a:	3b3c      	subs	r3, #60	; 0x3c
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4299      	cmp	r1, r3
 8006c40:	d038      	beq.n	8006cb4 <HAL_OSPIM_Config+0x488>
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	6859      	ldr	r1, [r3, #4]
 8006c46:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	4413      	add	r3, r2
 8006c50:	00db      	lsls	r3, r3, #3
 8006c52:	3350      	adds	r3, #80	; 0x50
 8006c54:	443b      	add	r3, r7
 8006c56:	3b38      	subs	r3, #56	; 0x38
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4299      	cmp	r1, r3
 8006c5c:	d02a      	beq.n	8006cb4 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	6899      	ldr	r1, [r3, #8]
 8006c62:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006c66:	4613      	mov	r3, r2
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	4413      	add	r3, r2
 8006c6c:	00db      	lsls	r3, r3, #3
 8006c6e:	3350      	adds	r3, #80	; 0x50
 8006c70:	443b      	add	r3, r7
 8006c72:	3b34      	subs	r3, #52	; 0x34
 8006c74:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006c76:	4299      	cmp	r1, r3
 8006c78:	d01c      	beq.n	8006cb4 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	68d9      	ldr	r1, [r3, #12]
 8006c7e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006c82:	4613      	mov	r3, r2
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	4413      	add	r3, r2
 8006c88:	00db      	lsls	r3, r3, #3
 8006c8a:	3350      	adds	r3, #80	; 0x50
 8006c8c:	443b      	add	r3, r7
 8006c8e:	3b30      	subs	r3, #48	; 0x30
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4299      	cmp	r1, r3
 8006c94:	d00e      	beq.n	8006cb4 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6919      	ldr	r1, [r3, #16]
 8006c9a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	4413      	add	r3, r2
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	3350      	adds	r3, #80	; 0x50
 8006ca8:	443b      	add	r3, r7
 8006caa:	3b2c      	subs	r3, #44	; 0x2c
 8006cac:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006cae:	4299      	cmp	r1, r3
 8006cb0:	f040 810e 	bne.w	8006ed0 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	6819      	ldr	r1, [r3, #0]
 8006cb8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	005b      	lsls	r3, r3, #1
 8006cc0:	4413      	add	r3, r2
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	3350      	adds	r3, #80	; 0x50
 8006cc6:	443b      	add	r3, r7
 8006cc8:	3b3c      	subs	r3, #60	; 0x3c
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4299      	cmp	r1, r3
 8006cce:	d133      	bne.n	8006d38 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	6859      	ldr	r1, [r3, #4]
 8006cd4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006cd8:	4613      	mov	r3, r2
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	4413      	add	r3, r2
 8006cde:	00db      	lsls	r3, r3, #3
 8006ce0:	3350      	adds	r3, #80	; 0x50
 8006ce2:	443b      	add	r3, r7
 8006ce4:	3b38      	subs	r3, #56	; 0x38
 8006ce6:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006ce8:	4299      	cmp	r1, r3
 8006cea:	d125      	bne.n	8006d38 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	68d9      	ldr	r1, [r3, #12]
 8006cf0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	4413      	add	r3, r2
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	3350      	adds	r3, #80	; 0x50
 8006cfe:	443b      	add	r3, r7
 8006d00:	3b30      	subs	r3, #48	; 0x30
 8006d02:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006d04:	4299      	cmp	r1, r3
 8006d06:	d117      	bne.n	8006d38 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6919      	ldr	r1, [r3, #16]
 8006d0c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006d10:	4613      	mov	r3, r2
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	4413      	add	r3, r2
 8006d16:	00db      	lsls	r3, r3, #3
 8006d18:	3350      	adds	r3, #80	; 0x50
 8006d1a:	443b      	add	r3, r7
 8006d1c:	3b2c      	subs	r3, #44	; 0x2c
 8006d1e:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006d20:	4299      	cmp	r1, r3
 8006d22:	d109      	bne.n	8006d38 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006d24:	4b03      	ldr	r3, [pc, #12]	; (8006d34 <HAL_OSPIM_Config+0x508>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a02      	ldr	r2, [pc, #8]	; (8006d34 <HAL_OSPIM_Config+0x508>)
 8006d2a:	f043 0301 	orr.w	r3, r3, #1
 8006d2e:	6013      	str	r3, [r2, #0]
 8006d30:	e0ce      	b.n	8006ed0 <HAL_OSPIM_Config+0x6a4>
 8006d32:	bf00      	nop
 8006d34:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006d38:	49a4      	ldr	r1, [pc, #656]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006d3a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006d3e:	4613      	mov	r3, r2
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	4413      	add	r3, r2
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	3350      	adds	r3, #80	; 0x50
 8006d48:	443b      	add	r3, r7
 8006d4a:	3b3c      	subs	r3, #60	; 0x3c
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	440b      	add	r3, r1
 8006d54:	6859      	ldr	r1, [r3, #4]
 8006d56:	489d      	ldr	r0, [pc, #628]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006d58:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	4413      	add	r3, r2
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	3350      	adds	r3, #80	; 0x50
 8006d66:	443b      	add	r3, r7
 8006d68:	3b3c      	subs	r3, #60	; 0x3c
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	f021 0201 	bic.w	r2, r1, #1
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4403      	add	r3, r0
 8006d76:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006d78:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	4413      	add	r3, r2
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	3350      	adds	r3, #80	; 0x50
 8006d86:	443b      	add	r3, r7
 8006d88:	3b38      	subs	r3, #56	; 0x38
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d01f      	beq.n	8006dd0 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006d90:	498e      	ldr	r1, [pc, #568]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006d92:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006d96:	4613      	mov	r3, r2
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	4413      	add	r3, r2
 8006d9c:	00db      	lsls	r3, r3, #3
 8006d9e:	3350      	adds	r3, #80	; 0x50
 8006da0:	443b      	add	r3, r7
 8006da2:	3b38      	subs	r3, #56	; 0x38
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	440b      	add	r3, r1
 8006dac:	6859      	ldr	r1, [r3, #4]
 8006dae:	4887      	ldr	r0, [pc, #540]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006db0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006db4:	4613      	mov	r3, r2
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	4413      	add	r3, r2
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	3350      	adds	r3, #80	; 0x50
 8006dbe:	443b      	add	r3, r7
 8006dc0:	3b38      	subs	r3, #56	; 0x38
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	f021 0210 	bic.w	r2, r1, #16
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4403      	add	r3, r0
 8006dce:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006dd0:	497e      	ldr	r1, [pc, #504]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006dd2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	4413      	add	r3, r2
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	3350      	adds	r3, #80	; 0x50
 8006de0:	443b      	add	r3, r7
 8006de2:	3b34      	subs	r3, #52	; 0x34
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	440b      	add	r3, r1
 8006dec:	6859      	ldr	r1, [r3, #4]
 8006dee:	4877      	ldr	r0, [pc, #476]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006df0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006df4:	4613      	mov	r3, r2
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	4413      	add	r3, r2
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	3350      	adds	r3, #80	; 0x50
 8006dfe:	443b      	add	r3, r7
 8006e00:	3b34      	subs	r3, #52	; 0x34
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4403      	add	r3, r0
 8006e0e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006e10:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e14:	4613      	mov	r3, r2
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	4413      	add	r3, r2
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	3350      	adds	r3, #80	; 0x50
 8006e1e:	443b      	add	r3, r7
 8006e20:	3b30      	subs	r3, #48	; 0x30
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d023      	beq.n	8006e70 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006e28:	4968      	ldr	r1, [pc, #416]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006e2a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e2e:	4613      	mov	r3, r2
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	4413      	add	r3, r2
 8006e34:	00db      	lsls	r3, r3, #3
 8006e36:	3350      	adds	r3, #80	; 0x50
 8006e38:	443b      	add	r3, r7
 8006e3a:	3b30      	subs	r3, #48	; 0x30
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	440b      	add	r3, r1
 8006e48:	6859      	ldr	r1, [r3, #4]
 8006e4a:	4860      	ldr	r0, [pc, #384]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006e4c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e50:	4613      	mov	r3, r2
 8006e52:	005b      	lsls	r3, r3, #1
 8006e54:	4413      	add	r3, r2
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	3350      	adds	r3, #80	; 0x50
 8006e5a:	443b      	add	r3, r7
 8006e5c:	3b30      	subs	r3, #48	; 0x30
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4403      	add	r3, r0
 8006e6e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006e70:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e74:	4613      	mov	r3, r2
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	4413      	add	r3, r2
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	3350      	adds	r3, #80	; 0x50
 8006e7e:	443b      	add	r3, r7
 8006e80:	3b2c      	subs	r3, #44	; 0x2c
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d023      	beq.n	8006ed0 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006e88:	4950      	ldr	r1, [pc, #320]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006e8a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e8e:	4613      	mov	r3, r2
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	4413      	add	r3, r2
 8006e94:	00db      	lsls	r3, r3, #3
 8006e96:	3350      	adds	r3, #80	; 0x50
 8006e98:	443b      	add	r3, r7
 8006e9a:	3b2c      	subs	r3, #44	; 0x2c
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	440b      	add	r3, r1
 8006ea8:	6859      	ldr	r1, [r3, #4]
 8006eaa:	4848      	ldr	r0, [pc, #288]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006eac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	4413      	add	r3, r2
 8006eb6:	00db      	lsls	r3, r3, #3
 8006eb8:	3350      	adds	r3, #80	; 0x50
 8006eba:	443b      	add	r3, r7
 8006ebc:	3b2c      	subs	r3, #44	; 0x2c
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4403      	add	r3, r0
 8006ece:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006ed0:	4a3e      	ldr	r2, [pc, #248]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ee4:	025b      	lsls	r3, r3, #9
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	4938      	ldr	r1, [pc, #224]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	440b      	add	r3, r1
 8006ef8:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d018      	beq.n	8006f34 <HAL_OSPIM_Config+0x708>
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f0a:	d813      	bhi.n	8006f34 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	1e5a      	subs	r2, r3, #1
 8006f12:	4b2e      	ldr	r3, [pc, #184]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	0c1b      	lsrs	r3, r3, #16
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d90a      	bls.n	8006f34 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8006f1e:	4b2b      	ldr	r3, [pc, #172]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	041b      	lsls	r3, r3, #16
 8006f2e:	4927      	ldr	r1, [pc, #156]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006f34:	4b25      	ldr	r3, [pc, #148]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 809a 	beq.w	8007076 <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006f42:	4a22      	ldr	r2, [pc, #136]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f023 0203 	bic.w	r2, r3, #3
 8006f54:	491d      	ldr	r1, [pc, #116]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	f042 0201 	orr.w	r2, r2, #1
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	440b      	add	r3, r1
 8006f64:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d011      	beq.n	8006f92 <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8006f6e:	4a17      	ldr	r2, [pc, #92]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f80:	4912      	ldr	r1, [pc, #72]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	f042 0210 	orr.w	r2, r2, #16
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	440b      	add	r3, r1
 8006f90:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d018      	beq.n	8006fd0 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006f9e:	4a0b      	ldr	r2, [pc, #44]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006fb4:	4905      	ldr	r1, [pc, #20]	; (8006fcc <HAL_OSPIM_Config+0x7a0>)
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	440b      	add	r3, r1
 8006fc8:	605a      	str	r2, [r3, #4]
 8006fca:	e01b      	b.n	8007004 <HAL_OSPIM_Config+0x7d8>
 8006fcc:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d015      	beq.n	8007004 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006fd8:	4a8a      	ldr	r2, [pc, #552]	; (8007204 <HAL_OSPIM_Config+0x9d8>)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006fee:	4985      	ldr	r1, [pc, #532]	; (8007204 <HAL_OSPIM_Config+0x9d8>)
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	440b      	add	r3, r1
 8007002:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d016      	beq.n	800703e <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007010:	4a7c      	ldr	r2, [pc, #496]	; (8007204 <HAL_OSPIM_Config+0x9d8>)
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	3b01      	subs	r3, #1
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007026:	4977      	ldr	r1, [pc, #476]	; (8007204 <HAL_OSPIM_Config+0x9d8>)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	3b01      	subs	r3, #1
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	605a      	str	r2, [r3, #4]
 800703c:	e0c3      	b.n	80071c6 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 80bf 	beq.w	80071c6 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007048:	4a6e      	ldr	r2, [pc, #440]	; (8007204 <HAL_OSPIM_Config+0x9d8>)
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	3b01      	subs	r3, #1
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800705e:	4969      	ldr	r1, [pc, #420]	; (8007204 <HAL_OSPIM_Config+0x9d8>)
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	3b01      	subs	r3, #1
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	440b      	add	r3, r1
 8007072:	605a      	str	r2, [r3, #4]
 8007074:	e0a7      	b.n	80071c6 <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8007076:	4a63      	ldr	r2, [pc, #396]	; (8007204 <HAL_OSPIM_Config+0x9d8>)
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3b01      	subs	r3, #1
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f023 0203 	bic.w	r2, r3, #3
 8007088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800708a:	005b      	lsls	r3, r3, #1
 800708c:	431a      	orrs	r2, r3
 800708e:	495d      	ldr	r1, [pc, #372]	; (8007204 <HAL_OSPIM_Config+0x9d8>)
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3b01      	subs	r3, #1
 8007096:	f042 0201 	orr.w	r2, r2, #1
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	440b      	add	r3, r1
 800709e:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d014      	beq.n	80070d2 <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80070a8:	4a56      	ldr	r2, [pc, #344]	; (8007204 <HAL_OSPIM_Config+0x9d8>)
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070bc:	015b      	lsls	r3, r3, #5
 80070be:	431a      	orrs	r2, r3
 80070c0:	4950      	ldr	r1, [pc, #320]	; (8007204 <HAL_OSPIM_Config+0x9d8>)
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	3b01      	subs	r3, #1
 80070c8:	f042 0210 	orr.w	r2, r2, #16
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	440b      	add	r3, r1
 80070d0:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d019      	beq.n	8007112 <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80070de:	4a49      	ldr	r2, [pc, #292]	; (8007204 <HAL_OSPIM_Config+0x9d8>)
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80070f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070f6:	049b      	lsls	r3, r3, #18
 80070f8:	431a      	orrs	r2, r3
 80070fa:	4942      	ldr	r1, [pc, #264]	; (8007204 <HAL_OSPIM_Config+0x9d8>)
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	3b01      	subs	r3, #1
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	605a      	str	r2, [r3, #4]
 8007110:	e01c      	b.n	800714c <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d018      	beq.n	800714c <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800711a:	4a3a      	ldr	r2, [pc, #232]	; (8007204 <HAL_OSPIM_Config+0x9d8>)
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	3b01      	subs	r3, #1
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007132:	069b      	lsls	r3, r3, #26
 8007134:	431a      	orrs	r2, r3
 8007136:	4933      	ldr	r1, [pc, #204]	; (8007204 <HAL_OSPIM_Config+0x9d8>)
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	3b01      	subs	r3, #1
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	440b      	add	r3, r1
 800714a:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d019      	beq.n	800718c <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007158:	4a2a      	ldr	r2, [pc, #168]	; (8007204 <HAL_OSPIM_Config+0x9d8>)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	3b01      	subs	r3, #1
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800716e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007170:	049b      	lsls	r3, r3, #18
 8007172:	431a      	orrs	r2, r3
 8007174:	4923      	ldr	r1, [pc, #140]	; (8007204 <HAL_OSPIM_Config+0x9d8>)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	3b01      	subs	r3, #1
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	440b      	add	r3, r1
 8007188:	605a      	str	r2, [r3, #4]
 800718a:	e01c      	b.n	80071c6 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d018      	beq.n	80071c6 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007194:	4a1b      	ldr	r2, [pc, #108]	; (8007204 <HAL_OSPIM_Config+0x9d8>)
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	3b01      	subs	r3, #1
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80071aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ac:	069b      	lsls	r3, r3, #26
 80071ae:	431a      	orrs	r2, r3
 80071b0:	4914      	ldr	r1, [pc, #80]	; (8007204 <HAL_OSPIM_Config+0x9d8>)
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	440b      	add	r3, r1
 80071c4:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80071c6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80071d2:	4b0d      	ldr	r3, [pc, #52]	; (8007208 <HAL_OSPIM_Config+0x9dc>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a0c      	ldr	r2, [pc, #48]	; (8007208 <HAL_OSPIM_Config+0x9dc>)
 80071d8:	f043 0301 	orr.w	r3, r3, #1
 80071dc:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80071de:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80071ea:	4b08      	ldr	r3, [pc, #32]	; (800720c <HAL_OSPIM_Config+0x9e0>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a07      	ldr	r2, [pc, #28]	; (800720c <HAL_OSPIM_Config+0x9e0>)
 80071f0:	f043 0301 	orr.w	r3, r3, #1
 80071f4:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80071f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3750      	adds	r7, #80	; 0x50
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	420c4000 	.word	0x420c4000
 8007208:	420d1400 	.word	0x420d1400
 800720c:	420d2400 	.word	0x420d2400

08007210 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	603b      	str	r3, [r7, #0]
 800721c:	4613      	mov	r3, r2
 800721e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007220:	e022      	b.n	8007268 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007228:	d01e      	beq.n	8007268 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800722a:	f7fb fea9 	bl	8002f80 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	429a      	cmp	r2, r3
 8007238:	d302      	bcc.n	8007240 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d113      	bne.n	8007268 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6a1a      	ldr	r2, [r3, #32]
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	401a      	ands	r2, r3
 800724a:	79fb      	ldrb	r3, [r7, #7]
 800724c:	429a      	cmp	r2, r3
 800724e:	d00b      	beq.n	8007268 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007256:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725c:	f043 0201 	orr.w	r2, r3, #1
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e00e      	b.n	8007286 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6a1a      	ldr	r2, [r3, #32]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	4013      	ands	r3, r2
 8007272:	2b00      	cmp	r3, #0
 8007274:	bf14      	ite	ne
 8007276:	2301      	movne	r3, #1
 8007278:	2300      	moveq	r3, #0
 800727a:	b2db      	uxtb	r3, r3
 800727c:	461a      	mov	r2, r3
 800727e:	79fb      	ldrb	r3, [r7, #7]
 8007280:	429a      	cmp	r2, r3
 8007282:	d1ce      	bne.n	8007222 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
	...

08007290 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	4603      	mov	r3, r0
 8007298:	6039      	str	r1, [r7, #0]
 800729a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80072a4:	79fb      	ldrb	r3, [r7, #7]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d005      	beq.n	80072b6 <OSPIM_GetConfig+0x26>
 80072aa:	79fb      	ldrb	r3, [r7, #7]
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d802      	bhi.n	80072b6 <OSPIM_GetConfig+0x26>
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d102      	bne.n	80072bc <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	75fb      	strb	r3, [r7, #23]
 80072ba:	e098      	b.n	80073ee <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2200      	movs	r2, #0
 80072c6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2200      	movs	r2, #0
 80072cc:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2200      	movs	r2, #0
 80072d2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2200      	movs	r2, #0
 80072d8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d10b      	bne.n	80072f8 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80072e0:	4b46      	ldr	r3, [pc, #280]	; (80073fc <OSPIM_GetConfig+0x16c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d102      	bne.n	80072f2 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80072ec:	4b44      	ldr	r3, [pc, #272]	; (8007400 <OSPIM_GetConfig+0x170>)
 80072ee:	613b      	str	r3, [r7, #16]
 80072f0:	e002      	b.n	80072f8 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80072f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072f6:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80072f8:	2300      	movs	r3, #0
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	e074      	b.n	80073e8 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80072fe:	4a3f      	ldr	r2, [pc, #252]	; (80073fc <OSPIM_GetConfig+0x16c>)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00a      	beq.n	800732a <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	4053      	eors	r3, r2
 800731a:	f003 0302 	and.w	r3, r3, #2
 800731e:	2b00      	cmp	r3, #0
 8007320:	d103      	bne.n	800732a <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f003 0310 	and.w	r3, r3, #16
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00a      	beq.n	800734a <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	4053      	eors	r3, r2
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b00      	cmp	r3, #0
 8007340:	d103      	bne.n	800734a <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00a      	beq.n	800736a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	4053      	eors	r3, r2
 800735a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800735e:	2b00      	cmp	r3, #0
 8007360:	d103      	bne.n	800736a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d018      	beq.n	80073a6 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	4053      	eors	r3, r2
 800737a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d111      	bne.n	80073a6 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d106      	bne.n	800739a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3301      	adds	r3, #1
 8007390:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	60da      	str	r2, [r3, #12]
 8007398:	e005      	b.n	80073a6 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3301      	adds	r3, #1
 800739e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d018      	beq.n	80073e2 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	4053      	eors	r3, r2
 80073b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d111      	bne.n	80073e2 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d106      	bne.n	80073d6 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3301      	adds	r3, #1
 80073cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	611a      	str	r2, [r3, #16]
 80073d4:	e005      	b.n	80073e2 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3301      	adds	r3, #1
 80073da:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3301      	adds	r3, #1
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d987      	bls.n	80072fe <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	371c      	adds	r7, #28
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	420c4000 	.word	0x420c4000
 8007400:	04040222 	.word	0x04040222

08007404 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f042 0202 	orr.w	r2, r2, #2
 8007420:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2208      	movs	r2, #8
 8007426:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a15      	ldr	r2, [pc, #84]	; (8007484 <HAL_OSPI_DLYB_SetConfig+0x80>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d109      	bne.n	8007446 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8007432:	4815      	ldr	r0, [pc, #84]	; (8007488 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007434:	f7ff f86a 	bl	800650c <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	4813      	ldr	r0, [pc, #76]	; (8007488 <HAL_OSPI_DLYB_SetConfig+0x84>)
 800743c:	f006 f9b6 	bl	800d7ac <LL_DLYB_SetDelay>
    status = HAL_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	73fb      	strb	r3, [r7, #15]
 8007444:	e00d      	b.n	8007462 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a10      	ldr	r2, [pc, #64]	; (800748c <HAL_OSPI_DLYB_SetConfig+0x88>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d108      	bne.n	8007462 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8007450:	480f      	ldr	r0, [pc, #60]	; (8007490 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8007452:	f7ff f85b 	bl	800650c <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	480d      	ldr	r0, [pc, #52]	; (8007490 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800745a:	f006 f9a7 	bl	800d7ac <LL_DLYB_SetDelay>
    status = HAL_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7ff f95d 	bl	8006722 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689a      	ldr	r2, [r3, #8]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f022 0202 	bic.w	r2, r2, #2
 8007476:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8007478:	7bfb      	ldrb	r3, [r7, #15]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	420d1400 	.word	0x420d1400
 8007488:	420cf000 	.word	0x420cf000
 800748c:	420d2400 	.word	0x420d2400
 8007490:	420cf400 	.word	0x420cf400

08007494 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007494:	b480      	push	{r7}
 8007496:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007498:	4b05      	ldr	r3, [pc, #20]	; (80074b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800749a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749c:	4a04      	ldr	r2, [pc, #16]	; (80074b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800749e:	f043 0301 	orr.w	r3, r3, #1
 80074a2:	6293      	str	r3, [r2, #40]	; 0x28
}
 80074a4:	bf00      	nop
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	46020800 	.word	0x46020800

080074b4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80074bc:	4b39      	ldr	r3, [pc, #228]	; (80075a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80074be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80074c4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d10b      	bne.n	80074e6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074d4:	d905      	bls.n	80074e2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80074d6:	4b33      	ldr	r3, [pc, #204]	; (80075a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	4a32      	ldr	r2, [pc, #200]	; (80075a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80074dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074e0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	e057      	b.n	8007596 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ec:	d90a      	bls.n	8007504 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80074ee:	4b2d      	ldr	r3, [pc, #180]	; (80075a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	4a2a      	ldr	r2, [pc, #168]	; (80075a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80074fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007500:	60d3      	str	r3, [r2, #12]
 8007502:	e007      	b.n	8007514 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8007504:	4b27      	ldr	r3, [pc, #156]	; (80075a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800750c:	4925      	ldr	r1, [pc, #148]	; (80075a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4313      	orrs	r3, r2
 8007512:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007514:	4b24      	ldr	r3, [pc, #144]	; (80075a8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a24      	ldr	r2, [pc, #144]	; (80075ac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800751a:	fba2 2303 	umull	r2, r3, r2, r3
 800751e:	099b      	lsrs	r3, r3, #6
 8007520:	2232      	movs	r2, #50	; 0x32
 8007522:	fb02 f303 	mul.w	r3, r2, r3
 8007526:	4a21      	ldr	r2, [pc, #132]	; (80075ac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007528:	fba2 2303 	umull	r2, r3, r2, r3
 800752c:	099b      	lsrs	r3, r3, #6
 800752e:	3301      	adds	r3, #1
 8007530:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007532:	e002      	b.n	800753a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	3b01      	subs	r3, #1
 8007538:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800753a:	4b1a      	ldr	r3, [pc, #104]	; (80075a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d102      	bne.n	800754c <HAL_PWREx_ControlVoltageScaling+0x98>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1f3      	bne.n	8007534 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d01b      	beq.n	800758a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007552:	4b15      	ldr	r3, [pc, #84]	; (80075a8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a15      	ldr	r2, [pc, #84]	; (80075ac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007558:	fba2 2303 	umull	r2, r3, r2, r3
 800755c:	099b      	lsrs	r3, r3, #6
 800755e:	2232      	movs	r2, #50	; 0x32
 8007560:	fb02 f303 	mul.w	r3, r2, r3
 8007564:	4a11      	ldr	r2, [pc, #68]	; (80075ac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007566:	fba2 2303 	umull	r2, r3, r2, r3
 800756a:	099b      	lsrs	r3, r3, #6
 800756c:	3301      	adds	r3, #1
 800756e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007570:	e002      	b.n	8007578 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3b01      	subs	r3, #1
 8007576:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007578:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800757a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d102      	bne.n	800758a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1f3      	bne.n	8007572 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e000      	b.n	8007596 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	46020800 	.word	0x46020800
 80075a8:	20000d00 	.word	0x20000d00
 80075ac:	10624dd3 	.word	0x10624dd3

080075b0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80075b0:	b480      	push	{r7}
 80075b2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80075b4:	4b04      	ldr	r3, [pc, #16]	; (80075c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80075b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80075bc:	4618      	mov	r0, r3
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	46020800 	.word	0x46020800

080075cc <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80075d4:	4b22      	ldr	r3, [pc, #136]	; (8007660 <HAL_PWREx_ConfigSupply+0x94>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a22      	ldr	r2, [pc, #136]	; (8007664 <HAL_PWREx_ConfigSupply+0x98>)
 80075da:	fba2 2303 	umull	r2, r3, r2, r3
 80075de:	099b      	lsrs	r3, r3, #6
 80075e0:	2232      	movs	r2, #50	; 0x32
 80075e2:	fb02 f303 	mul.w	r3, r2, r3
 80075e6:	4a1f      	ldr	r2, [pc, #124]	; (8007664 <HAL_PWREx_ConfigSupply+0x98>)
 80075e8:	fba2 2303 	umull	r2, r3, r2, r3
 80075ec:	099b      	lsrs	r3, r3, #6
 80075ee:	3301      	adds	r3, #1
 80075f0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d113      	bne.n	8007620 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80075f8:	4b1b      	ldr	r3, [pc, #108]	; (8007668 <HAL_PWREx_ConfigSupply+0x9c>)
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	4a1a      	ldr	r2, [pc, #104]	; (8007668 <HAL_PWREx_ConfigSupply+0x9c>)
 80075fe:	f023 0302 	bic.w	r3, r3, #2
 8007602:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007604:	e002      	b.n	800760c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3b01      	subs	r3, #1
 800760a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800760c:	4b16      	ldr	r3, [pc, #88]	; (8007668 <HAL_PWREx_ConfigSupply+0x9c>)
 800760e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b02      	cmp	r3, #2
 8007616:	d116      	bne.n	8007646 <HAL_PWREx_ConfigSupply+0x7a>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1f3      	bne.n	8007606 <HAL_PWREx_ConfigSupply+0x3a>
 800761e:	e012      	b.n	8007646 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007620:	4b11      	ldr	r3, [pc, #68]	; (8007668 <HAL_PWREx_ConfigSupply+0x9c>)
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	4a10      	ldr	r2, [pc, #64]	; (8007668 <HAL_PWREx_ConfigSupply+0x9c>)
 8007626:	f043 0302 	orr.w	r3, r3, #2
 800762a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800762c:	e002      	b.n	8007634 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3b01      	subs	r3, #1
 8007632:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007634:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <HAL_PWREx_ConfigSupply+0x9c>)
 8007636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d102      	bne.n	8007646 <HAL_PWREx_ConfigSupply+0x7a>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f3      	bne.n	800762e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e000      	b.n	8007652 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	20000d00 	.word	0x20000d00
 8007664:	10624dd3 	.word	0x10624dd3
 8007668:	46020800 	.word	0x46020800

0800766c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800766c:	b480      	push	{r7}
 800766e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8007670:	4b05      	ldr	r3, [pc, #20]	; (8007688 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	4a04      	ldr	r2, [pc, #16]	; (8007688 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007676:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800767a:	6113      	str	r3, [r2, #16]
}
 800767c:	bf00      	nop
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	46020800 	.word	0x46020800

0800768c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08e      	sub	sp, #56	; 0x38
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8007694:	2300      	movs	r3, #0
 8007696:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d102      	bne.n	80076a6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	f000 bec8 	b.w	8008436 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076a6:	4b99      	ldr	r3, [pc, #612]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	f003 030c 	and.w	r3, r3, #12
 80076ae:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076b0:	4b96      	ldr	r3, [pc, #600]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80076b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b4:	f003 0303 	and.w	r3, r3, #3
 80076b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0310 	and.w	r3, r3, #16
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 816c 	beq.w	80079a0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d007      	beq.n	80076de <HAL_RCC_OscConfig+0x52>
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	2b0c      	cmp	r3, #12
 80076d2:	f040 80de 	bne.w	8007892 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80076d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d8:	2b01      	cmp	r3, #1
 80076da:	f040 80da 	bne.w	8007892 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d102      	bne.n	80076ec <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	f000 bea5 	b.w	8008436 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076f0:	4b86      	ldr	r3, [pc, #536]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d004      	beq.n	8007706 <HAL_RCC_OscConfig+0x7a>
 80076fc:	4b83      	ldr	r3, [pc, #524]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007704:	e005      	b.n	8007712 <HAL_RCC_OscConfig+0x86>
 8007706:	4b81      	ldr	r3, [pc, #516]	; (800790c <HAL_RCC_OscConfig+0x280>)
 8007708:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800770c:	041b      	lsls	r3, r3, #16
 800770e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007712:	4293      	cmp	r3, r2
 8007714:	d255      	bcs.n	80077c2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	4618      	mov	r0, r3
 8007722:	f001 fa3d 	bl	8008ba0 <RCC_SetFlashLatencyFromMSIRange>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	f000 be82 	b.w	8008436 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007732:	4b76      	ldr	r3, [pc, #472]	; (800790c <HAL_RCC_OscConfig+0x280>)
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	4a75      	ldr	r2, [pc, #468]	; (800790c <HAL_RCC_OscConfig+0x280>)
 8007738:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800773c:	6093      	str	r3, [r2, #8]
 800773e:	4b73      	ldr	r3, [pc, #460]	; (800790c <HAL_RCC_OscConfig+0x280>)
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	4970      	ldr	r1, [pc, #448]	; (800790c <HAL_RCC_OscConfig+0x280>)
 800774c:	4313      	orrs	r3, r2
 800774e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007758:	d309      	bcc.n	800776e <HAL_RCC_OscConfig+0xe2>
 800775a:	4b6c      	ldr	r3, [pc, #432]	; (800790c <HAL_RCC_OscConfig+0x280>)
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f023 021f 	bic.w	r2, r3, #31
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	4969      	ldr	r1, [pc, #420]	; (800790c <HAL_RCC_OscConfig+0x280>)
 8007768:	4313      	orrs	r3, r2
 800776a:	60cb      	str	r3, [r1, #12]
 800776c:	e07e      	b.n	800786c <HAL_RCC_OscConfig+0x1e0>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007772:	2b00      	cmp	r3, #0
 8007774:	da0a      	bge.n	800778c <HAL_RCC_OscConfig+0x100>
 8007776:	4b65      	ldr	r3, [pc, #404]	; (800790c <HAL_RCC_OscConfig+0x280>)
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	015b      	lsls	r3, r3, #5
 8007784:	4961      	ldr	r1, [pc, #388]	; (800790c <HAL_RCC_OscConfig+0x280>)
 8007786:	4313      	orrs	r3, r2
 8007788:	60cb      	str	r3, [r1, #12]
 800778a:	e06f      	b.n	800786c <HAL_RCC_OscConfig+0x1e0>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007794:	d30a      	bcc.n	80077ac <HAL_RCC_OscConfig+0x120>
 8007796:	4b5d      	ldr	r3, [pc, #372]	; (800790c <HAL_RCC_OscConfig+0x280>)
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	029b      	lsls	r3, r3, #10
 80077a4:	4959      	ldr	r1, [pc, #356]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60cb      	str	r3, [r1, #12]
 80077aa:	e05f      	b.n	800786c <HAL_RCC_OscConfig+0x1e0>
 80077ac:	4b57      	ldr	r3, [pc, #348]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	03db      	lsls	r3, r3, #15
 80077ba:	4954      	ldr	r1, [pc, #336]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	60cb      	str	r3, [r1, #12]
 80077c0:	e054      	b.n	800786c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80077c2:	4b52      	ldr	r3, [pc, #328]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	4a51      	ldr	r2, [pc, #324]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80077c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077cc:	6093      	str	r3, [r2, #8]
 80077ce:	4b4f      	ldr	r3, [pc, #316]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	494c      	ldr	r1, [pc, #304]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80077e8:	d309      	bcc.n	80077fe <HAL_RCC_OscConfig+0x172>
 80077ea:	4b48      	ldr	r3, [pc, #288]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f023 021f 	bic.w	r2, r3, #31
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	4945      	ldr	r1, [pc, #276]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60cb      	str	r3, [r1, #12]
 80077fc:	e028      	b.n	8007850 <HAL_RCC_OscConfig+0x1c4>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	2b00      	cmp	r3, #0
 8007804:	da0a      	bge.n	800781c <HAL_RCC_OscConfig+0x190>
 8007806:	4b41      	ldr	r3, [pc, #260]	; (800790c <HAL_RCC_OscConfig+0x280>)
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	015b      	lsls	r3, r3, #5
 8007814:	493d      	ldr	r1, [pc, #244]	; (800790c <HAL_RCC_OscConfig+0x280>)
 8007816:	4313      	orrs	r3, r2
 8007818:	60cb      	str	r3, [r1, #12]
 800781a:	e019      	b.n	8007850 <HAL_RCC_OscConfig+0x1c4>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007824:	d30a      	bcc.n	800783c <HAL_RCC_OscConfig+0x1b0>
 8007826:	4b39      	ldr	r3, [pc, #228]	; (800790c <HAL_RCC_OscConfig+0x280>)
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	029b      	lsls	r3, r3, #10
 8007834:	4935      	ldr	r1, [pc, #212]	; (800790c <HAL_RCC_OscConfig+0x280>)
 8007836:	4313      	orrs	r3, r2
 8007838:	60cb      	str	r3, [r1, #12]
 800783a:	e009      	b.n	8007850 <HAL_RCC_OscConfig+0x1c4>
 800783c:	4b33      	ldr	r3, [pc, #204]	; (800790c <HAL_RCC_OscConfig+0x280>)
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	03db      	lsls	r3, r3, #15
 800784a:	4930      	ldr	r1, [pc, #192]	; (800790c <HAL_RCC_OscConfig+0x280>)
 800784c:	4313      	orrs	r3, r2
 800784e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10a      	bne.n	800786c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785a:	4618      	mov	r0, r3
 800785c:	f001 f9a0 	bl	8008ba0 <RCC_SetFlashLatencyFromMSIRange>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	f000 bde5 	b.w	8008436 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800786c:	f001 f8de 	bl	8008a2c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007870:	4b27      	ldr	r3, [pc, #156]	; (8007910 <HAL_RCC_OscConfig+0x284>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4618      	mov	r0, r3
 8007876:	f7fb f9fb 	bl	8002c70 <HAL_InitTick>
 800787a:	4603      	mov	r3, r0
 800787c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8007880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 808a 	beq.w	800799e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800788a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800788e:	f000 bdd2 	b.w	8008436 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d066      	beq.n	8007968 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800789a:	4b1c      	ldr	r3, [pc, #112]	; (800790c <HAL_RCC_OscConfig+0x280>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a1b      	ldr	r2, [pc, #108]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80078a0:	f043 0301 	orr.w	r3, r3, #1
 80078a4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80078a6:	f7fb fb6b 	bl	8002f80 <HAL_GetTick>
 80078aa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80078ac:	e009      	b.n	80078c2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80078ae:	f7fb fb67 	bl	8002f80 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d902      	bls.n	80078c2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	f000 bdba 	b.w	8008436 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80078c2:	4b12      	ldr	r3, [pc, #72]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0ef      	beq.n	80078ae <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80078ce:	4b0f      	ldr	r3, [pc, #60]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	4a0e      	ldr	r2, [pc, #56]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80078d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078d8:	6093      	str	r3, [r2, #8]
 80078da:	4b0c      	ldr	r3, [pc, #48]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e6:	4909      	ldr	r1, [pc, #36]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80078f4:	d30e      	bcc.n	8007914 <HAL_RCC_OscConfig+0x288>
 80078f6:	4b05      	ldr	r3, [pc, #20]	; (800790c <HAL_RCC_OscConfig+0x280>)
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f023 021f 	bic.w	r2, r3, #31
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	4902      	ldr	r1, [pc, #8]	; (800790c <HAL_RCC_OscConfig+0x280>)
 8007904:	4313      	orrs	r3, r2
 8007906:	60cb      	str	r3, [r1, #12]
 8007908:	e04a      	b.n	80079a0 <HAL_RCC_OscConfig+0x314>
 800790a:	bf00      	nop
 800790c:	46020c00 	.word	0x46020c00
 8007910:	20000d04 	.word	0x20000d04
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	2b00      	cmp	r3, #0
 800791a:	da0a      	bge.n	8007932 <HAL_RCC_OscConfig+0x2a6>
 800791c:	4b98      	ldr	r3, [pc, #608]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	015b      	lsls	r3, r3, #5
 800792a:	4995      	ldr	r1, [pc, #596]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 800792c:	4313      	orrs	r3, r2
 800792e:	60cb      	str	r3, [r1, #12]
 8007930:	e036      	b.n	80079a0 <HAL_RCC_OscConfig+0x314>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800793a:	d30a      	bcc.n	8007952 <HAL_RCC_OscConfig+0x2c6>
 800793c:	4b90      	ldr	r3, [pc, #576]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	029b      	lsls	r3, r3, #10
 800794a:	498d      	ldr	r1, [pc, #564]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 800794c:	4313      	orrs	r3, r2
 800794e:	60cb      	str	r3, [r1, #12]
 8007950:	e026      	b.n	80079a0 <HAL_RCC_OscConfig+0x314>
 8007952:	4b8b      	ldr	r3, [pc, #556]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	03db      	lsls	r3, r3, #15
 8007960:	4987      	ldr	r1, [pc, #540]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007962:	4313      	orrs	r3, r2
 8007964:	60cb      	str	r3, [r1, #12]
 8007966:	e01b      	b.n	80079a0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8007968:	4b85      	ldr	r3, [pc, #532]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a84      	ldr	r2, [pc, #528]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 800796e:	f023 0301 	bic.w	r3, r3, #1
 8007972:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007974:	f7fb fb04 	bl	8002f80 <HAL_GetTick>
 8007978:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800797a:	e009      	b.n	8007990 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800797c:	f7fb fb00 	bl	8002f80 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	2b02      	cmp	r3, #2
 8007988:	d902      	bls.n	8007990 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	f000 bd53 	b.w	8008436 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007990:	4b7b      	ldr	r3, [pc, #492]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1ef      	bne.n	800797c <HAL_RCC_OscConfig+0x2f0>
 800799c:	e000      	b.n	80079a0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800799e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 808b 	beq.w	8007ac4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d005      	beq.n	80079c0 <HAL_RCC_OscConfig+0x334>
 80079b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b6:	2b0c      	cmp	r3, #12
 80079b8:	d109      	bne.n	80079ce <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80079ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d106      	bne.n	80079ce <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d17d      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	f000 bd34 	b.w	8008436 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079d6:	d106      	bne.n	80079e6 <HAL_RCC_OscConfig+0x35a>
 80079d8:	4b69      	ldr	r3, [pc, #420]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a68      	ldr	r2, [pc, #416]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 80079de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	e041      	b.n	8007a6a <HAL_RCC_OscConfig+0x3de>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079ee:	d112      	bne.n	8007a16 <HAL_RCC_OscConfig+0x38a>
 80079f0:	4b63      	ldr	r3, [pc, #396]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a62      	ldr	r2, [pc, #392]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 80079f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079fa:	6013      	str	r3, [r2, #0]
 80079fc:	4b60      	ldr	r3, [pc, #384]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a5f      	ldr	r2, [pc, #380]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007a02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007a06:	6013      	str	r3, [r2, #0]
 8007a08:	4b5d      	ldr	r3, [pc, #372]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a5c      	ldr	r2, [pc, #368]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a12:	6013      	str	r3, [r2, #0]
 8007a14:	e029      	b.n	8007a6a <HAL_RCC_OscConfig+0x3de>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8007a1e:	d112      	bne.n	8007a46 <HAL_RCC_OscConfig+0x3ba>
 8007a20:	4b57      	ldr	r3, [pc, #348]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a56      	ldr	r2, [pc, #344]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007a26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a2a:	6013      	str	r3, [r2, #0]
 8007a2c:	4b54      	ldr	r3, [pc, #336]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a53      	ldr	r2, [pc, #332]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	4b51      	ldr	r3, [pc, #324]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a50      	ldr	r2, [pc, #320]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a42:	6013      	str	r3, [r2, #0]
 8007a44:	e011      	b.n	8007a6a <HAL_RCC_OscConfig+0x3de>
 8007a46:	4b4e      	ldr	r3, [pc, #312]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a4d      	ldr	r2, [pc, #308]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a50:	6013      	str	r3, [r2, #0]
 8007a52:	4b4b      	ldr	r3, [pc, #300]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a4a      	ldr	r2, [pc, #296]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	4b48      	ldr	r3, [pc, #288]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a47      	ldr	r2, [pc, #284]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007a64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007a68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d014      	beq.n	8007a9c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8007a72:	f7fb fa85 	bl	8002f80 <HAL_GetTick>
 8007a76:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a78:	e009      	b.n	8007a8e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a7a:	f7fb fa81 	bl	8002f80 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	2b64      	cmp	r3, #100	; 0x64
 8007a86:	d902      	bls.n	8007a8e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	f000 bcd4 	b.w	8008436 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a8e:	4b3c      	ldr	r3, [pc, #240]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0ef      	beq.n	8007a7a <HAL_RCC_OscConfig+0x3ee>
 8007a9a:	e013      	b.n	8007ac4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8007a9c:	f7fb fa70 	bl	8002f80 <HAL_GetTick>
 8007aa0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007aa2:	e009      	b.n	8007ab8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007aa4:	f7fb fa6c 	bl	8002f80 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b64      	cmp	r3, #100	; 0x64
 8007ab0:	d902      	bls.n	8007ab8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	f000 bcbf 	b.w	8008436 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ab8:	4b31      	ldr	r3, [pc, #196]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1ef      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0302 	and.w	r3, r3, #2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d05f      	beq.n	8007b90 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad2:	2b04      	cmp	r3, #4
 8007ad4:	d005      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x456>
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	2b0c      	cmp	r3, #12
 8007ada:	d114      	bne.n	8007b06 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d111      	bne.n	8007b06 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d102      	bne.n	8007af0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	f000 bca3 	b.w	8008436 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007af0:	4b23      	ldr	r3, [pc, #140]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	041b      	lsls	r3, r3, #16
 8007afe:	4920      	ldr	r1, [pc, #128]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007b04:	e044      	b.n	8007b90 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d024      	beq.n	8007b58 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8007b0e:	4b1c      	ldr	r3, [pc, #112]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a1b      	ldr	r2, [pc, #108]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b18:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007b1a:	f7fb fa31 	bl	8002f80 <HAL_GetTick>
 8007b1e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b20:	e009      	b.n	8007b36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b22:	f7fb fa2d 	bl	8002f80 <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d902      	bls.n	8007b36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	f000 bc80 	b.w	8008436 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b36:	4b12      	ldr	r3, [pc, #72]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0ef      	beq.n	8007b22 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007b42:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	041b      	lsls	r3, r3, #16
 8007b50:	490b      	ldr	r1, [pc, #44]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	610b      	str	r3, [r1, #16]
 8007b56:	e01b      	b.n	8007b90 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8007b58:	4b09      	ldr	r3, [pc, #36]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a08      	ldr	r2, [pc, #32]	; (8007b80 <HAL_RCC_OscConfig+0x4f4>)
 8007b5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b62:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007b64:	f7fb fa0c 	bl	8002f80 <HAL_GetTick>
 8007b68:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b6a:	e00b      	b.n	8007b84 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b6c:	f7fb fa08 	bl	8002f80 <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d904      	bls.n	8007b84 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	f000 bc5b 	b.w	8008436 <HAL_RCC_OscConfig+0xdaa>
 8007b80:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b84:	4baf      	ldr	r3, [pc, #700]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1ed      	bne.n	8007b6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0308 	and.w	r3, r3, #8
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 80c8 	beq.w	8007d2e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ba4:	4ba7      	ldr	r3, [pc, #668]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007baa:	f003 0304 	and.w	r3, r3, #4
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d111      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bb2:	4ba4      	ldr	r3, [pc, #656]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bb8:	4aa2      	ldr	r2, [pc, #648]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007bba:	f043 0304 	orr.w	r3, r3, #4
 8007bbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007bc2:	4ba0      	ldr	r3, [pc, #640]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bc8:	f003 0304 	and.w	r3, r3, #4
 8007bcc:	617b      	str	r3, [r7, #20]
 8007bce:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007bd6:	4b9c      	ldr	r3, [pc, #624]	; (8007e48 <HAL_RCC_OscConfig+0x7bc>)
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d119      	bne.n	8007c16 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007be2:	4b99      	ldr	r3, [pc, #612]	; (8007e48 <HAL_RCC_OscConfig+0x7bc>)
 8007be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be6:	4a98      	ldr	r2, [pc, #608]	; (8007e48 <HAL_RCC_OscConfig+0x7bc>)
 8007be8:	f043 0301 	orr.w	r3, r3, #1
 8007bec:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bee:	f7fb f9c7 	bl	8002f80 <HAL_GetTick>
 8007bf2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007bf4:	e009      	b.n	8007c0a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bf6:	f7fb f9c3 	bl	8002f80 <HAL_GetTick>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d902      	bls.n	8007c0a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	f000 bc16 	b.w	8008436 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007c0a:	4b8f      	ldr	r3, [pc, #572]	; (8007e48 <HAL_RCC_OscConfig+0x7bc>)
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d0ef      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d05f      	beq.n	8007cde <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8007c1e:	4b89      	ldr	r3, [pc, #548]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c24:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	699a      	ldr	r2, [r3, #24]
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d037      	beq.n	8007ca4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d006      	beq.n	8007c4c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e3f4      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8007c4c:	6a3b      	ldr	r3, [r7, #32]
 8007c4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d01b      	beq.n	8007c8e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8007c56:	4b7b      	ldr	r3, [pc, #492]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c5c:	4a79      	ldr	r2, [pc, #484]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007c5e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8007c62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8007c66:	f7fb f98b 	bl	8002f80 <HAL_GetTick>
 8007c6a:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007c6c:	e008      	b.n	8007c80 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c6e:	f7fb f987 	bl	8002f80 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	2b05      	cmp	r3, #5
 8007c7a:	d901      	bls.n	8007c80 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e3da      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007c80:	4b70      	ldr	r3, [pc, #448]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007c82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1ef      	bne.n	8007c6e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8007c8e:	4b6d      	ldr	r3, [pc, #436]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c94:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	4969      	ldr	r1, [pc, #420]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8007ca4:	4b67      	ldr	r3, [pc, #412]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007ca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007caa:	4a66      	ldr	r2, [pc, #408]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007cac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007cb0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8007cb4:	f7fb f964 	bl	8002f80 <HAL_GetTick>
 8007cb8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007cba:	e008      	b.n	8007cce <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cbc:	f7fb f960 	bl	8002f80 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	2b05      	cmp	r3, #5
 8007cc8:	d901      	bls.n	8007cce <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e3b3      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007cce:	4b5d      	ldr	r3, [pc, #372]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d0ef      	beq.n	8007cbc <HAL_RCC_OscConfig+0x630>
 8007cdc:	e01b      	b.n	8007d16 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8007cde:	4b59      	ldr	r3, [pc, #356]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ce4:	4a57      	ldr	r2, [pc, #348]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007ce6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8007cea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8007cee:	f7fb f947 	bl	8002f80 <HAL_GetTick>
 8007cf2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007cf4:	e008      	b.n	8007d08 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cf6:	f7fb f943 	bl	8002f80 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	2b05      	cmp	r3, #5
 8007d02:	d901      	bls.n	8007d08 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e396      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007d08:	4b4e      	ldr	r3, [pc, #312]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007d0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1ef      	bne.n	8007cf6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d16:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d107      	bne.n	8007d2e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d1e:	4b49      	ldr	r3, [pc, #292]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d24:	4a47      	ldr	r2, [pc, #284]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007d26:	f023 0304 	bic.w	r3, r3, #4
 8007d2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0304 	and.w	r3, r3, #4
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 8111 	beq.w	8007f5e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d42:	4b40      	ldr	r3, [pc, #256]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d48:	f003 0304 	and.w	r3, r3, #4
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d111      	bne.n	8007d74 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d50:	4b3c      	ldr	r3, [pc, #240]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d56:	4a3b      	ldr	r2, [pc, #236]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007d58:	f043 0304 	orr.w	r3, r3, #4
 8007d5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007d60:	4b38      	ldr	r3, [pc, #224]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d66:	f003 0304 	and.w	r3, r3, #4
 8007d6a:	613b      	str	r3, [r7, #16]
 8007d6c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007d74:	4b34      	ldr	r3, [pc, #208]	; (8007e48 <HAL_RCC_OscConfig+0x7bc>)
 8007d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d118      	bne.n	8007db2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007d80:	4b31      	ldr	r3, [pc, #196]	; (8007e48 <HAL_RCC_OscConfig+0x7bc>)
 8007d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d84:	4a30      	ldr	r2, [pc, #192]	; (8007e48 <HAL_RCC_OscConfig+0x7bc>)
 8007d86:	f043 0301 	orr.w	r3, r3, #1
 8007d8a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d8c:	f7fb f8f8 	bl	8002f80 <HAL_GetTick>
 8007d90:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007d92:	e008      	b.n	8007da6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d94:	f7fb f8f4 	bl	8002f80 <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d901      	bls.n	8007da6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e347      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007da6:	4b28      	ldr	r3, [pc, #160]	; (8007e48 <HAL_RCC_OscConfig+0x7bc>)
 8007da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d0f0      	beq.n	8007d94 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d01f      	beq.n	8007dfe <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f003 0304 	and.w	r3, r3, #4
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d010      	beq.n	8007dec <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007dca:	4b1e      	ldr	r3, [pc, #120]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dd0:	4a1c      	ldr	r2, [pc, #112]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007dd2:	f043 0304 	orr.w	r3, r3, #4
 8007dd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007dda:	4b1a      	ldr	r3, [pc, #104]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007ddc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007de0:	4a18      	ldr	r2, [pc, #96]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007de2:	f043 0301 	orr.w	r3, r3, #1
 8007de6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007dea:	e018      	b.n	8007e1e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007dec:	4b15      	ldr	r3, [pc, #84]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007dee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007df2:	4a14      	ldr	r2, [pc, #80]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007df4:	f043 0301 	orr.w	r3, r3, #1
 8007df8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007dfc:	e00f      	b.n	8007e1e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007dfe:	4b11      	ldr	r3, [pc, #68]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e04:	4a0f      	ldr	r2, [pc, #60]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007e06:	f023 0301 	bic.w	r3, r3, #1
 8007e0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007e0e:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e14:	4a0b      	ldr	r2, [pc, #44]	; (8007e44 <HAL_RCC_OscConfig+0x7b8>)
 8007e16:	f023 0304 	bic.w	r3, r3, #4
 8007e1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d057      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8007e26:	f7fb f8ab 	bl	8002f80 <HAL_GetTick>
 8007e2a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e2c:	e00e      	b.n	8007e4c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e2e:	f7fb f8a7 	bl	8002f80 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d905      	bls.n	8007e4c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e2f8      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
 8007e44:	46020c00 	.word	0x46020c00
 8007e48:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e4c:	4b9c      	ldr	r3, [pc, #624]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0e9      	beq.n	8007e2e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d01b      	beq.n	8007e9e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007e66:	4b96      	ldr	r3, [pc, #600]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e6c:	4a94      	ldr	r2, [pc, #592]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007e76:	e00a      	b.n	8007e8e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e78:	f7fb f882 	bl	8002f80 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d901      	bls.n	8007e8e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e2d3      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007e8e:	4b8c      	ldr	r3, [pc, #560]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0ed      	beq.n	8007e78 <HAL_RCC_OscConfig+0x7ec>
 8007e9c:	e053      	b.n	8007f46 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007e9e:	4b88      	ldr	r3, [pc, #544]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ea4:	4a86      	ldr	r2, [pc, #536]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eaa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007eae:	e00a      	b.n	8007ec6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eb0:	f7fb f866 	bl	8002f80 <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e2b7      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007ec6:	4b7e      	ldr	r3, [pc, #504]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1ed      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x824>
 8007ed4:	e037      	b.n	8007f46 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8007ed6:	f7fb f853 	bl	8002f80 <HAL_GetTick>
 8007eda:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007edc:	e00a      	b.n	8007ef4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ede:	f7fb f84f 	bl	8002f80 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d901      	bls.n	8007ef4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e2a0      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007ef4:	4b72      	ldr	r3, [pc, #456]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1ed      	bne.n	8007ede <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8007f02:	4b6f      	ldr	r3, [pc, #444]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d01a      	beq.n	8007f46 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007f10:	4b6b      	ldr	r3, [pc, #428]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007f12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f16:	4a6a      	ldr	r2, [pc, #424]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007f20:	e00a      	b.n	8007f38 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f22:	f7fb f82d 	bl	8002f80 <HAL_GetTick>
 8007f26:	4602      	mov	r2, r0
 8007f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d901      	bls.n	8007f38 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e27e      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007f38:	4b61      	ldr	r3, [pc, #388]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1ed      	bne.n	8007f22 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f46:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d107      	bne.n	8007f5e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f4e:	4b5c      	ldr	r3, [pc, #368]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f54:	4a5a      	ldr	r2, [pc, #360]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007f56:	f023 0304 	bic.w	r3, r3, #4
 8007f5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0320 	and.w	r3, r3, #32
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d036      	beq.n	8007fd8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d019      	beq.n	8007fa6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8007f72:	4b53      	ldr	r3, [pc, #332]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a52      	ldr	r2, [pc, #328]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007f78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f7c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007f7e:	f7fa ffff 	bl	8002f80 <HAL_GetTick>
 8007f82:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007f84:	e008      	b.n	8007f98 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f86:	f7fa fffb 	bl	8002f80 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d901      	bls.n	8007f98 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e24e      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007f98:	4b49      	ldr	r3, [pc, #292]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d0f0      	beq.n	8007f86 <HAL_RCC_OscConfig+0x8fa>
 8007fa4:	e018      	b.n	8007fd8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8007fa6:	4b46      	ldr	r3, [pc, #280]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a45      	ldr	r2, [pc, #276]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007fac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fb0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007fb2:	f7fa ffe5 	bl	8002f80 <HAL_GetTick>
 8007fb6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007fb8:	e008      	b.n	8007fcc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fba:	f7fa ffe1 	bl	8002f80 <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d901      	bls.n	8007fcc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e234      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007fcc:	4b3c      	ldr	r3, [pc, #240]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1f0      	bne.n	8007fba <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d036      	beq.n	8008052 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d019      	beq.n	8008020 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8007fec:	4b34      	ldr	r3, [pc, #208]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a33      	ldr	r2, [pc, #204]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8007ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ff6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007ff8:	f7fa ffc2 	bl	8002f80 <HAL_GetTick>
 8007ffc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007ffe:	e008      	b.n	8008012 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008000:	f7fa ffbe 	bl	8002f80 <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	2b02      	cmp	r3, #2
 800800c:	d901      	bls.n	8008012 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e211      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008012:	4b2b      	ldr	r3, [pc, #172]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d0f0      	beq.n	8008000 <HAL_RCC_OscConfig+0x974>
 800801e:	e018      	b.n	8008052 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8008020:	4b27      	ldr	r3, [pc, #156]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a26      	ldr	r2, [pc, #152]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8008026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800802a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800802c:	f7fa ffa8 	bl	8002f80 <HAL_GetTick>
 8008030:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008032:	e008      	b.n	8008046 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008034:	f7fa ffa4 	bl	8002f80 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b02      	cmp	r3, #2
 8008040:	d901      	bls.n	8008046 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e1f7      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008046:	4b1e      	ldr	r3, [pc, #120]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1f0      	bne.n	8008034 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805a:	2b00      	cmp	r3, #0
 800805c:	d07f      	beq.n	800815e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008062:	2b00      	cmp	r3, #0
 8008064:	d062      	beq.n	800812c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8008066:	4b16      	ldr	r3, [pc, #88]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	4a15      	ldr	r2, [pc, #84]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 800806c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008070:	6093      	str	r3, [r2, #8]
 8008072:	4b13      	ldr	r3, [pc, #76]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807e:	4910      	ldr	r1, [pc, #64]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8008080:	4313      	orrs	r3, r2
 8008082:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800808c:	d309      	bcc.n	80080a2 <HAL_RCC_OscConfig+0xa16>
 800808e:	4b0c      	ldr	r3, [pc, #48]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	f023 021f 	bic.w	r2, r3, #31
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	4909      	ldr	r1, [pc, #36]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 800809c:	4313      	orrs	r3, r2
 800809e:	60cb      	str	r3, [r1, #12]
 80080a0:	e02a      	b.n	80080f8 <HAL_RCC_OscConfig+0xa6c>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	da0c      	bge.n	80080c4 <HAL_RCC_OscConfig+0xa38>
 80080aa:	4b05      	ldr	r3, [pc, #20]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	015b      	lsls	r3, r3, #5
 80080b8:	4901      	ldr	r1, [pc, #4]	; (80080c0 <HAL_RCC_OscConfig+0xa34>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	60cb      	str	r3, [r1, #12]
 80080be:	e01b      	b.n	80080f8 <HAL_RCC_OscConfig+0xa6c>
 80080c0:	46020c00 	.word	0x46020c00
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080cc:	d30a      	bcc.n	80080e4 <HAL_RCC_OscConfig+0xa58>
 80080ce:	4ba1      	ldr	r3, [pc, #644]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	029b      	lsls	r3, r3, #10
 80080dc:	499d      	ldr	r1, [pc, #628]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	60cb      	str	r3, [r1, #12]
 80080e2:	e009      	b.n	80080f8 <HAL_RCC_OscConfig+0xa6c>
 80080e4:	4b9b      	ldr	r3, [pc, #620]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	03db      	lsls	r3, r3, #15
 80080f2:	4998      	ldr	r1, [pc, #608]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80080f8:	4b96      	ldr	r3, [pc, #600]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a95      	ldr	r2, [pc, #596]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 80080fe:	f043 0310 	orr.w	r3, r3, #16
 8008102:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008104:	f7fa ff3c 	bl	8002f80 <HAL_GetTick>
 8008108:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800810a:	e008      	b.n	800811e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800810c:	f7fa ff38 	bl	8002f80 <HAL_GetTick>
 8008110:	4602      	mov	r2, r0
 8008112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	2b02      	cmp	r3, #2
 8008118:	d901      	bls.n	800811e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e18b      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800811e:	4b8d      	ldr	r3, [pc, #564]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b00      	cmp	r3, #0
 8008128:	d0f0      	beq.n	800810c <HAL_RCC_OscConfig+0xa80>
 800812a:	e018      	b.n	800815e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800812c:	4b89      	ldr	r3, [pc, #548]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a88      	ldr	r2, [pc, #544]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 8008132:	f023 0310 	bic.w	r3, r3, #16
 8008136:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008138:	f7fa ff22 	bl	8002f80 <HAL_GetTick>
 800813c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800813e:	e008      	b.n	8008152 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008140:	f7fa ff1e 	bl	8002f80 <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	2b02      	cmp	r3, #2
 800814c:	d901      	bls.n	8008152 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e171      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008152:	4b80      	ldr	r3, [pc, #512]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1f0      	bne.n	8008140 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 8166 	beq.w	8008434 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008168:	2300      	movs	r3, #0
 800816a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800816e:	4b79      	ldr	r3, [pc, #484]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	f003 030c 	and.w	r3, r3, #12
 8008176:	2b0c      	cmp	r3, #12
 8008178:	f000 80f2 	beq.w	8008360 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008180:	2b02      	cmp	r3, #2
 8008182:	f040 80c5 	bne.w	8008310 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008186:	4b73      	ldr	r3, [pc, #460]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a72      	ldr	r2, [pc, #456]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 800818c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008190:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008192:	f7fa fef5 	bl	8002f80 <HAL_GetTick>
 8008196:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008198:	e008      	b.n	80081ac <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800819a:	f7fa fef1 	bl	8002f80 <HAL_GetTick>
 800819e:	4602      	mov	r2, r0
 80081a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d901      	bls.n	80081ac <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e144      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80081ac:	4b69      	ldr	r3, [pc, #420]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1f0      	bne.n	800819a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081b8:	4b66      	ldr	r3, [pc, #408]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 80081ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081be:	f003 0304 	and.w	r3, r3, #4
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d111      	bne.n	80081ea <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80081c6:	4b63      	ldr	r3, [pc, #396]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 80081c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081cc:	4a61      	ldr	r2, [pc, #388]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 80081ce:	f043 0304 	orr.w	r3, r3, #4
 80081d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80081d6:	4b5f      	ldr	r3, [pc, #380]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 80081d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081dc:	f003 0304 	and.w	r3, r3, #4
 80081e0:	60fb      	str	r3, [r7, #12]
 80081e2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80081e4:	2301      	movs	r3, #1
 80081e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80081ea:	4b5b      	ldr	r3, [pc, #364]	; (8008358 <HAL_RCC_OscConfig+0xccc>)
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081f6:	d102      	bne.n	80081fe <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80081f8:	2301      	movs	r3, #1
 80081fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80081fe:	4b56      	ldr	r3, [pc, #344]	; (8008358 <HAL_RCC_OscConfig+0xccc>)
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	4a55      	ldr	r2, [pc, #340]	; (8008358 <HAL_RCC_OscConfig+0xccc>)
 8008204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008208:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800820a:	4b52      	ldr	r3, [pc, #328]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 800820c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008212:	f023 0303 	bic.w	r3, r3, #3
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800821e:	3a01      	subs	r2, #1
 8008220:	0212      	lsls	r2, r2, #8
 8008222:	4311      	orrs	r1, r2
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008228:	430a      	orrs	r2, r1
 800822a:	494a      	ldr	r1, [pc, #296]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 800822c:	4313      	orrs	r3, r2
 800822e:	628b      	str	r3, [r1, #40]	; 0x28
 8008230:	4b48      	ldr	r3, [pc, #288]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 8008232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008234:	4b49      	ldr	r3, [pc, #292]	; (800835c <HAL_RCC_OscConfig+0xcd0>)
 8008236:	4013      	ands	r3, r2
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800823c:	3a01      	subs	r2, #1
 800823e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008246:	3a01      	subs	r2, #1
 8008248:	0252      	lsls	r2, r2, #9
 800824a:	b292      	uxth	r2, r2
 800824c:	4311      	orrs	r1, r2
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008252:	3a01      	subs	r2, #1
 8008254:	0412      	lsls	r2, r2, #16
 8008256:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800825a:	4311      	orrs	r1, r2
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008260:	3a01      	subs	r2, #1
 8008262:	0612      	lsls	r2, r2, #24
 8008264:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008268:	430a      	orrs	r2, r1
 800826a:	493a      	ldr	r1, [pc, #232]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 800826c:	4313      	orrs	r3, r2
 800826e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008270:	4b38      	ldr	r3, [pc, #224]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 8008272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008274:	4a37      	ldr	r2, [pc, #220]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 8008276:	f023 0310 	bic.w	r3, r3, #16
 800827a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008280:	4a34      	ldr	r2, [pc, #208]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008286:	4b33      	ldr	r3, [pc, #204]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 8008288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828a:	4a32      	ldr	r2, [pc, #200]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 800828c:	f043 0310 	orr.w	r3, r3, #16
 8008290:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8008292:	4b30      	ldr	r3, [pc, #192]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 8008294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008296:	f023 020c 	bic.w	r2, r3, #12
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800829e:	492d      	ldr	r1, [pc, #180]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80082a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d105      	bne.n	80082b8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80082ac:	4b2a      	ldr	r3, [pc, #168]	; (8008358 <HAL_RCC_OscConfig+0xccc>)
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	4a29      	ldr	r2, [pc, #164]	; (8008358 <HAL_RCC_OscConfig+0xccc>)
 80082b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082b6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80082b8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d107      	bne.n	80082d0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80082c0:	4b24      	ldr	r3, [pc, #144]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 80082c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082c6:	4a23      	ldr	r2, [pc, #140]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 80082c8:	f023 0304 	bic.w	r3, r3, #4
 80082cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80082d0:	4b20      	ldr	r3, [pc, #128]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 80082d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d4:	4a1f      	ldr	r2, [pc, #124]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 80082d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082da:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80082dc:	4b1d      	ldr	r3, [pc, #116]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a1c      	ldr	r2, [pc, #112]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 80082e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082e6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80082e8:	f7fa fe4a 	bl	8002f80 <HAL_GetTick>
 80082ec:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80082ee:	e008      	b.n	8008302 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082f0:	f7fa fe46 	bl	8002f80 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d901      	bls.n	8008302 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e099      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008302:	4b14      	ldr	r3, [pc, #80]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d0f0      	beq.n	80082f0 <HAL_RCC_OscConfig+0xc64>
 800830e:	e091      	b.n	8008434 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008310:	4b10      	ldr	r3, [pc, #64]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a0f      	ldr	r2, [pc, #60]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 8008316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800831a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800831c:	f7fa fe30 	bl	8002f80 <HAL_GetTick>
 8008320:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008322:	e008      	b.n	8008336 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008324:	f7fa fe2c 	bl	8002f80 <HAL_GetTick>
 8008328:	4602      	mov	r2, r0
 800832a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	2b02      	cmp	r3, #2
 8008330:	d901      	bls.n	8008336 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e07f      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008336:	4b07      	ldr	r3, [pc, #28]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1f0      	bne.n	8008324 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8008342:	4b04      	ldr	r3, [pc, #16]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 8008344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008346:	4a03      	ldr	r2, [pc, #12]	; (8008354 <HAL_RCC_OscConfig+0xcc8>)
 8008348:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800834c:	f023 0303 	bic.w	r3, r3, #3
 8008350:	6293      	str	r3, [r2, #40]	; 0x28
 8008352:	e06f      	b.n	8008434 <HAL_RCC_OscConfig+0xda8>
 8008354:	46020c00 	.word	0x46020c00
 8008358:	46020800 	.word	0x46020800
 800835c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008360:	4b37      	ldr	r3, [pc, #220]	; (8008440 <HAL_RCC_OscConfig+0xdb4>)
 8008362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008364:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008366:	4b36      	ldr	r3, [pc, #216]	; (8008440 <HAL_RCC_OscConfig+0xdb4>)
 8008368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008370:	2b01      	cmp	r3, #1
 8008372:	d039      	beq.n	80083e8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	f003 0203 	and.w	r2, r3, #3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800837e:	429a      	cmp	r2, r3
 8008380:	d132      	bne.n	80083e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	0a1b      	lsrs	r3, r3, #8
 8008386:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008390:	429a      	cmp	r2, r3
 8008392:	d129      	bne.n	80083e8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800839e:	429a      	cmp	r2, r3
 80083a0:	d122      	bne.n	80083e8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ac:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d11a      	bne.n	80083e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	0a5b      	lsrs	r3, r3, #9
 80083b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d111      	bne.n	80083e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	0c1b      	lsrs	r3, r3, #16
 80083c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d108      	bne.n	80083e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	0e1b      	lsrs	r3, r3, #24
 80083da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d001      	beq.n	80083ec <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e024      	b.n	8008436 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80083ec:	4b14      	ldr	r3, [pc, #80]	; (8008440 <HAL_RCC_OscConfig+0xdb4>)
 80083ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f0:	08db      	lsrs	r3, r3, #3
 80083f2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d01a      	beq.n	8008434 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80083fe:	4b10      	ldr	r3, [pc, #64]	; (8008440 <HAL_RCC_OscConfig+0xdb4>)
 8008400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008402:	4a0f      	ldr	r2, [pc, #60]	; (8008440 <HAL_RCC_OscConfig+0xdb4>)
 8008404:	f023 0310 	bic.w	r3, r3, #16
 8008408:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800840a:	f7fa fdb9 	bl	8002f80 <HAL_GetTick>
 800840e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8008410:	bf00      	nop
 8008412:	f7fa fdb5 	bl	8002f80 <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841a:	4293      	cmp	r3, r2
 800841c:	d0f9      	beq.n	8008412 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008422:	4a07      	ldr	r2, [pc, #28]	; (8008440 <HAL_RCC_OscConfig+0xdb4>)
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008428:	4b05      	ldr	r3, [pc, #20]	; (8008440 <HAL_RCC_OscConfig+0xdb4>)
 800842a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842c:	4a04      	ldr	r2, [pc, #16]	; (8008440 <HAL_RCC_OscConfig+0xdb4>)
 800842e:	f043 0310 	orr.w	r3, r3, #16
 8008432:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3738      	adds	r7, #56	; 0x38
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	46020c00 	.word	0x46020c00

08008444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e1d9      	b.n	800880c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008458:	4b9b      	ldr	r3, [pc, #620]	; (80086c8 <HAL_RCC_ClockConfig+0x284>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 030f 	and.w	r3, r3, #15
 8008460:	683a      	ldr	r2, [r7, #0]
 8008462:	429a      	cmp	r2, r3
 8008464:	d910      	bls.n	8008488 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008466:	4b98      	ldr	r3, [pc, #608]	; (80086c8 <HAL_RCC_ClockConfig+0x284>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f023 020f 	bic.w	r2, r3, #15
 800846e:	4996      	ldr	r1, [pc, #600]	; (80086c8 <HAL_RCC_ClockConfig+0x284>)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	4313      	orrs	r3, r2
 8008474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008476:	4b94      	ldr	r3, [pc, #592]	; (80086c8 <HAL_RCC_ClockConfig+0x284>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 030f 	and.w	r3, r3, #15
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	429a      	cmp	r2, r3
 8008482:	d001      	beq.n	8008488 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e1c1      	b.n	800880c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0310 	and.w	r3, r3, #16
 8008490:	2b00      	cmp	r3, #0
 8008492:	d010      	beq.n	80084b6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	695a      	ldr	r2, [r3, #20]
 8008498:	4b8c      	ldr	r3, [pc, #560]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d908      	bls.n	80084b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80084a4:	4b89      	ldr	r3, [pc, #548]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 80084a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	4986      	ldr	r1, [pc, #536]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 0308 	and.w	r3, r3, #8
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d012      	beq.n	80084e8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	691a      	ldr	r2, [r3, #16]
 80084c6:	4b81      	ldr	r3, [pc, #516]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	091b      	lsrs	r3, r3, #4
 80084cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d909      	bls.n	80084e8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80084d4:	4b7d      	ldr	r3, [pc, #500]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 80084d6:	6a1b      	ldr	r3, [r3, #32]
 80084d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	011b      	lsls	r3, r3, #4
 80084e2:	497a      	ldr	r1, [pc, #488]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0304 	and.w	r3, r3, #4
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d010      	beq.n	8008516 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	4b74      	ldr	r3, [pc, #464]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008500:	429a      	cmp	r2, r3
 8008502:	d908      	bls.n	8008516 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008504:	4b71      	ldr	r3, [pc, #452]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	496e      	ldr	r1, [pc, #440]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 8008512:	4313      	orrs	r3, r2
 8008514:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 0302 	and.w	r3, r3, #2
 800851e:	2b00      	cmp	r3, #0
 8008520:	d010      	beq.n	8008544 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689a      	ldr	r2, [r3, #8]
 8008526:	4b69      	ldr	r3, [pc, #420]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	f003 030f 	and.w	r3, r3, #15
 800852e:	429a      	cmp	r2, r3
 8008530:	d908      	bls.n	8008544 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8008532:	4b66      	ldr	r3, [pc, #408]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	f023 020f 	bic.w	r2, r3, #15
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	4963      	ldr	r1, [pc, #396]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 8008540:	4313      	orrs	r3, r2
 8008542:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 80d2 	beq.w	80086f6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8008552:	2300      	movs	r3, #0
 8008554:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	2b03      	cmp	r3, #3
 800855c:	d143      	bne.n	80085e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800855e:	4b5b      	ldr	r3, [pc, #364]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 8008560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008564:	f003 0304 	and.w	r3, r3, #4
 8008568:	2b00      	cmp	r3, #0
 800856a:	d110      	bne.n	800858e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800856c:	4b57      	ldr	r3, [pc, #348]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 800856e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008572:	4a56      	ldr	r2, [pc, #344]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 8008574:	f043 0304 	orr.w	r3, r3, #4
 8008578:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800857c:	4b53      	ldr	r3, [pc, #332]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 800857e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008582:	f003 0304 	and.w	r3, r3, #4
 8008586:	60bb      	str	r3, [r7, #8]
 8008588:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800858a:	2301      	movs	r3, #1
 800858c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800858e:	f7fa fcf7 	bl	8002f80 <HAL_GetTick>
 8008592:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8008594:	4b4e      	ldr	r3, [pc, #312]	; (80086d0 <HAL_RCC_ClockConfig+0x28c>)
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00f      	beq.n	80085c0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80085a0:	e008      	b.n	80085b4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80085a2:	f7fa fced 	bl	8002f80 <HAL_GetTick>
 80085a6:	4602      	mov	r2, r0
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d901      	bls.n	80085b4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e12b      	b.n	800880c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80085b4:	4b46      	ldr	r3, [pc, #280]	; (80086d0 <HAL_RCC_ClockConfig+0x28c>)
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d0f0      	beq.n	80085a2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80085c0:	7dfb      	ldrb	r3, [r7, #23]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d107      	bne.n	80085d6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80085c6:	4b41      	ldr	r3, [pc, #260]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 80085c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085cc:	4a3f      	ldr	r2, [pc, #252]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 80085ce:	f023 0304 	bic.w	r3, r3, #4
 80085d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80085d6:	4b3d      	ldr	r3, [pc, #244]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d121      	bne.n	8008626 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e112      	b.n	800880c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d107      	bne.n	80085fe <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80085ee:	4b37      	ldr	r3, [pc, #220]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d115      	bne.n	8008626 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e106      	b.n	800880c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d107      	bne.n	8008616 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008606:	4b31      	ldr	r3, [pc, #196]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0304 	and.w	r3, r3, #4
 800860e:	2b00      	cmp	r3, #0
 8008610:	d109      	bne.n	8008626 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e0fa      	b.n	800880c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008616:	4b2d      	ldr	r3, [pc, #180]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e0f2      	b.n	800880c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8008626:	4b29      	ldr	r3, [pc, #164]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 8008628:	69db      	ldr	r3, [r3, #28]
 800862a:	f023 0203 	bic.w	r2, r3, #3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	4926      	ldr	r1, [pc, #152]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 8008634:	4313      	orrs	r3, r2
 8008636:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8008638:	f7fa fca2 	bl	8002f80 <HAL_GetTick>
 800863c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	2b03      	cmp	r3, #3
 8008644:	d112      	bne.n	800866c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008646:	e00a      	b.n	800865e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008648:	f7fa fc9a 	bl	8002f80 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	f241 3288 	movw	r2, #5000	; 0x1388
 8008656:	4293      	cmp	r3, r2
 8008658:	d901      	bls.n	800865e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e0d6      	b.n	800880c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800865e:	4b1b      	ldr	r3, [pc, #108]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	f003 030c 	and.w	r3, r3, #12
 8008666:	2b0c      	cmp	r3, #12
 8008668:	d1ee      	bne.n	8008648 <HAL_RCC_ClockConfig+0x204>
 800866a:	e044      	b.n	80086f6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	2b02      	cmp	r3, #2
 8008672:	d112      	bne.n	800869a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008674:	e00a      	b.n	800868c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008676:	f7fa fc83 	bl	8002f80 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	f241 3288 	movw	r2, #5000	; 0x1388
 8008684:	4293      	cmp	r3, r2
 8008686:	d901      	bls.n	800868c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e0bf      	b.n	800880c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800868c:	4b0f      	ldr	r3, [pc, #60]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	f003 030c 	and.w	r3, r3, #12
 8008694:	2b08      	cmp	r3, #8
 8008696:	d1ee      	bne.n	8008676 <HAL_RCC_ClockConfig+0x232>
 8008698:	e02d      	b.n	80086f6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d123      	bne.n	80086ea <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80086a2:	e00a      	b.n	80086ba <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086a4:	f7fa fc6c 	bl	8002f80 <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d901      	bls.n	80086ba <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e0a8      	b.n	800880c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80086ba:	4b04      	ldr	r3, [pc, #16]	; (80086cc <HAL_RCC_ClockConfig+0x288>)
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	f003 030c 	and.w	r3, r3, #12
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1ee      	bne.n	80086a4 <HAL_RCC_ClockConfig+0x260>
 80086c6:	e016      	b.n	80086f6 <HAL_RCC_ClockConfig+0x2b2>
 80086c8:	40022000 	.word	0x40022000
 80086cc:	46020c00 	.word	0x46020c00
 80086d0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086d4:	f7fa fc54 	bl	8002f80 <HAL_GetTick>
 80086d8:	4602      	mov	r2, r0
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	f241 3288 	movw	r2, #5000	; 0x1388
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d901      	bls.n	80086ea <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e090      	b.n	800880c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80086ea:	4b4a      	ldr	r3, [pc, #296]	; (8008814 <HAL_RCC_ClockConfig+0x3d0>)
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	f003 030c 	and.w	r3, r3, #12
 80086f2:	2b04      	cmp	r3, #4
 80086f4:	d1ee      	bne.n	80086d4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d010      	beq.n	8008724 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	689a      	ldr	r2, [r3, #8]
 8008706:	4b43      	ldr	r3, [pc, #268]	; (8008814 <HAL_RCC_ClockConfig+0x3d0>)
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	f003 030f 	and.w	r3, r3, #15
 800870e:	429a      	cmp	r2, r3
 8008710:	d208      	bcs.n	8008724 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8008712:	4b40      	ldr	r3, [pc, #256]	; (8008814 <HAL_RCC_ClockConfig+0x3d0>)
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	f023 020f 	bic.w	r2, r3, #15
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	493d      	ldr	r1, [pc, #244]	; (8008814 <HAL_RCC_ClockConfig+0x3d0>)
 8008720:	4313      	orrs	r3, r2
 8008722:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008724:	4b3c      	ldr	r3, [pc, #240]	; (8008818 <HAL_RCC_ClockConfig+0x3d4>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 030f 	and.w	r3, r3, #15
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	429a      	cmp	r2, r3
 8008730:	d210      	bcs.n	8008754 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008732:	4b39      	ldr	r3, [pc, #228]	; (8008818 <HAL_RCC_ClockConfig+0x3d4>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f023 020f 	bic.w	r2, r3, #15
 800873a:	4937      	ldr	r1, [pc, #220]	; (8008818 <HAL_RCC_ClockConfig+0x3d4>)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	4313      	orrs	r3, r2
 8008740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008742:	4b35      	ldr	r3, [pc, #212]	; (8008818 <HAL_RCC_ClockConfig+0x3d4>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 030f 	and.w	r3, r3, #15
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	429a      	cmp	r2, r3
 800874e:	d001      	beq.n	8008754 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e05b      	b.n	800880c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	2b00      	cmp	r3, #0
 800875e:	d010      	beq.n	8008782 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68da      	ldr	r2, [r3, #12]
 8008764:	4b2b      	ldr	r3, [pc, #172]	; (8008814 <HAL_RCC_ClockConfig+0x3d0>)
 8008766:	6a1b      	ldr	r3, [r3, #32]
 8008768:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800876c:	429a      	cmp	r2, r3
 800876e:	d208      	bcs.n	8008782 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008770:	4b28      	ldr	r3, [pc, #160]	; (8008814 <HAL_RCC_ClockConfig+0x3d0>)
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	4925      	ldr	r1, [pc, #148]	; (8008814 <HAL_RCC_ClockConfig+0x3d0>)
 800877e:	4313      	orrs	r3, r2
 8008780:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0308 	and.w	r3, r3, #8
 800878a:	2b00      	cmp	r3, #0
 800878c:	d012      	beq.n	80087b4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	691a      	ldr	r2, [r3, #16]
 8008792:	4b20      	ldr	r3, [pc, #128]	; (8008814 <HAL_RCC_ClockConfig+0x3d0>)
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	091b      	lsrs	r3, r3, #4
 8008798:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800879c:	429a      	cmp	r2, r3
 800879e:	d209      	bcs.n	80087b4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80087a0:	4b1c      	ldr	r3, [pc, #112]	; (8008814 <HAL_RCC_ClockConfig+0x3d0>)
 80087a2:	6a1b      	ldr	r3, [r3, #32]
 80087a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	011b      	lsls	r3, r3, #4
 80087ae:	4919      	ldr	r1, [pc, #100]	; (8008814 <HAL_RCC_ClockConfig+0x3d0>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0310 	and.w	r3, r3, #16
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d010      	beq.n	80087e2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	695a      	ldr	r2, [r3, #20]
 80087c4:	4b13      	ldr	r3, [pc, #76]	; (8008814 <HAL_RCC_ClockConfig+0x3d0>)
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d208      	bcs.n	80087e2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80087d0:	4b10      	ldr	r3, [pc, #64]	; (8008814 <HAL_RCC_ClockConfig+0x3d0>)
 80087d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	695b      	ldr	r3, [r3, #20]
 80087dc:	490d      	ldr	r1, [pc, #52]	; (8008814 <HAL_RCC_ClockConfig+0x3d0>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80087e2:	f000 f821 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 80087e6:	4602      	mov	r2, r0
 80087e8:	4b0a      	ldr	r3, [pc, #40]	; (8008814 <HAL_RCC_ClockConfig+0x3d0>)
 80087ea:	6a1b      	ldr	r3, [r3, #32]
 80087ec:	f003 030f 	and.w	r3, r3, #15
 80087f0:	490a      	ldr	r1, [pc, #40]	; (800881c <HAL_RCC_ClockConfig+0x3d8>)
 80087f2:	5ccb      	ldrb	r3, [r1, r3]
 80087f4:	fa22 f303 	lsr.w	r3, r2, r3
 80087f8:	4a09      	ldr	r2, [pc, #36]	; (8008820 <HAL_RCC_ClockConfig+0x3dc>)
 80087fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80087fc:	4b09      	ldr	r3, [pc, #36]	; (8008824 <HAL_RCC_ClockConfig+0x3e0>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4618      	mov	r0, r3
 8008802:	f7fa fa35 	bl	8002c70 <HAL_InitTick>
 8008806:	4603      	mov	r3, r0
 8008808:	73fb      	strb	r3, [r7, #15]

  return status;
 800880a:	7bfb      	ldrb	r3, [r7, #15]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	46020c00 	.word	0x46020c00
 8008818:	40022000 	.word	0x40022000
 800881c:	0800d85c 	.word	0x0800d85c
 8008820:	20000d00 	.word	0x20000d00
 8008824:	20000d04 	.word	0x20000d04

08008828 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008828:	b480      	push	{r7}
 800882a:	b08b      	sub	sp, #44	; 0x2c
 800882c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800882e:	2300      	movs	r3, #0
 8008830:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008836:	4b78      	ldr	r3, [pc, #480]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	f003 030c 	and.w	r3, r3, #12
 800883e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008840:	4b75      	ldr	r3, [pc, #468]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008844:	f003 0303 	and.w	r3, r3, #3
 8008848:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d005      	beq.n	800885c <HAL_RCC_GetSysClockFreq+0x34>
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	2b0c      	cmp	r3, #12
 8008854:	d121      	bne.n	800889a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d11e      	bne.n	800889a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800885c:	4b6e      	ldr	r3, [pc, #440]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d107      	bne.n	8008878 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8008868:	4b6b      	ldr	r3, [pc, #428]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800886a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800886e:	0b1b      	lsrs	r3, r3, #12
 8008870:	f003 030f 	and.w	r3, r3, #15
 8008874:	627b      	str	r3, [r7, #36]	; 0x24
 8008876:	e005      	b.n	8008884 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8008878:	4b67      	ldr	r3, [pc, #412]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	0f1b      	lsrs	r3, r3, #28
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008884:	4a65      	ldr	r2, [pc, #404]	; (8008a1c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8008886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800888c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d110      	bne.n	80088b6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008898:	e00d      	b.n	80088b6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800889a:	4b5f      	ldr	r3, [pc, #380]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800889c:	69db      	ldr	r3, [r3, #28]
 800889e:	f003 030c 	and.w	r3, r3, #12
 80088a2:	2b04      	cmp	r3, #4
 80088a4:	d102      	bne.n	80088ac <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80088a6:	4b5e      	ldr	r3, [pc, #376]	; (8008a20 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80088a8:	623b      	str	r3, [r7, #32]
 80088aa:	e004      	b.n	80088b6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	2b08      	cmp	r3, #8
 80088b0:	d101      	bne.n	80088b6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80088b2:	4b5b      	ldr	r3, [pc, #364]	; (8008a20 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80088b4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	2b0c      	cmp	r3, #12
 80088ba:	f040 80a5 	bne.w	8008a08 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80088be:	4b56      	ldr	r3, [pc, #344]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80088c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c2:	f003 0303 	and.w	r3, r3, #3
 80088c6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80088c8:	4b53      	ldr	r3, [pc, #332]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	0a1b      	lsrs	r3, r3, #8
 80088ce:	f003 030f 	and.w	r3, r3, #15
 80088d2:	3301      	adds	r3, #1
 80088d4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80088d6:	4b50      	ldr	r3, [pc, #320]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80088d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088da:	091b      	lsrs	r3, r3, #4
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80088e2:	4b4d      	ldr	r3, [pc, #308]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80088e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e6:	08db      	lsrs	r3, r3, #3
 80088e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	fb02 f303 	mul.w	r3, r2, r3
 80088f2:	ee07 3a90 	vmov	s15, r3
 80088f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088fa:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	2b02      	cmp	r3, #2
 8008902:	d003      	beq.n	800890c <HAL_RCC_GetSysClockFreq+0xe4>
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	2b03      	cmp	r3, #3
 8008908:	d022      	beq.n	8008950 <HAL_RCC_GetSysClockFreq+0x128>
 800890a:	e043      	b.n	8008994 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	ee07 3a90 	vmov	s15, r3
 8008912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008916:	eddf 6a43 	vldr	s13, [pc, #268]	; 8008a24 <HAL_RCC_GetSysClockFreq+0x1fc>
 800891a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800891e:	4b3e      	ldr	r3, [pc, #248]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008926:	ee07 3a90 	vmov	s15, r3
 800892a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800892e:	ed97 6a01 	vldr	s12, [r7, #4]
 8008932:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8008a28 <HAL_RCC_GetSysClockFreq+0x200>
 8008936:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800893a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800893e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008942:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800894a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800894e:	e046      	b.n	80089de <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	ee07 3a90 	vmov	s15, r3
 8008956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800895a:	eddf 6a32 	vldr	s13, [pc, #200]	; 8008a24 <HAL_RCC_GetSysClockFreq+0x1fc>
 800895e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008962:	4b2d      	ldr	r3, [pc, #180]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800896a:	ee07 3a90 	vmov	s15, r3
 800896e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008972:	ed97 6a01 	vldr	s12, [r7, #4]
 8008976:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8008a28 <HAL_RCC_GetSysClockFreq+0x200>
 800897a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800897e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008986:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800898a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800898e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008992:	e024      	b.n	80089de <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	ee07 3a90 	vmov	s15, r3
 800899a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	ee07 3a90 	vmov	s15, r3
 80089a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ac:	4b1a      	ldr	r3, [pc, #104]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80089ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089b4:	ee07 3a90 	vmov	s15, r3
 80089b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80089bc:	ed97 6a01 	vldr	s12, [r7, #4]
 80089c0:	eddf 5a19 	vldr	s11, [pc, #100]	; 8008a28 <HAL_RCC_GetSysClockFreq+0x200>
 80089c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80089c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80089cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80089d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089dc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80089de:	4b0e      	ldr	r3, [pc, #56]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80089e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e2:	0e1b      	lsrs	r3, r3, #24
 80089e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e8:	3301      	adds	r3, #1
 80089ea:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80089f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80089fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a02:	ee17 3a90 	vmov	r3, s15
 8008a06:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8008a08:	6a3b      	ldr	r3, [r7, #32]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	372c      	adds	r7, #44	; 0x2c
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	46020c00 	.word	0x46020c00
 8008a1c:	0800d874 	.word	0x0800d874
 8008a20:	00f42400 	.word	0x00f42400
 8008a24:	4b742400 	.word	0x4b742400
 8008a28:	46000000 	.word	0x46000000

08008a2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008a30:	f7ff fefa 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 8008a34:	4602      	mov	r2, r0
 8008a36:	4b07      	ldr	r3, [pc, #28]	; (8008a54 <HAL_RCC_GetHCLKFreq+0x28>)
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	f003 030f 	and.w	r3, r3, #15
 8008a3e:	4906      	ldr	r1, [pc, #24]	; (8008a58 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008a40:	5ccb      	ldrb	r3, [r1, r3]
 8008a42:	fa22 f303 	lsr.w	r3, r2, r3
 8008a46:	4a05      	ldr	r2, [pc, #20]	; (8008a5c <HAL_RCC_GetHCLKFreq+0x30>)
 8008a48:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8008a4a:	4b04      	ldr	r3, [pc, #16]	; (8008a5c <HAL_RCC_GetHCLKFreq+0x30>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	46020c00 	.word	0x46020c00
 8008a58:	0800d85c 	.word	0x0800d85c
 8008a5c:	20000d00 	.word	0x20000d00

08008a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8008a64:	f7ff ffe2 	bl	8008a2c <HAL_RCC_GetHCLKFreq>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	4b05      	ldr	r3, [pc, #20]	; (8008a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	091b      	lsrs	r3, r3, #4
 8008a70:	f003 0307 	and.w	r3, r3, #7
 8008a74:	4903      	ldr	r1, [pc, #12]	; (8008a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a76:	5ccb      	ldrb	r3, [r1, r3]
 8008a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	46020c00 	.word	0x46020c00
 8008a84:	0800d86c 	.word	0x0800d86c

08008a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8008a8c:	f7ff ffce 	bl	8008a2c <HAL_RCC_GetHCLKFreq>
 8008a90:	4602      	mov	r2, r0
 8008a92:	4b05      	ldr	r3, [pc, #20]	; (8008aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	0a1b      	lsrs	r3, r3, #8
 8008a98:	f003 0307 	and.w	r3, r3, #7
 8008a9c:	4903      	ldr	r1, [pc, #12]	; (8008aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a9e:	5ccb      	ldrb	r3, [r1, r3]
 8008aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	46020c00 	.word	0x46020c00
 8008aac:	0800d86c 	.word	0x0800d86c

08008ab0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8008ab4:	f7ff ffba 	bl	8008a2c <HAL_RCC_GetHCLKFreq>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <HAL_RCC_GetPCLK3Freq+0x20>)
 8008abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abe:	091b      	lsrs	r3, r3, #4
 8008ac0:	f003 0307 	and.w	r3, r3, #7
 8008ac4:	4903      	ldr	r1, [pc, #12]	; (8008ad4 <HAL_RCC_GetPCLK3Freq+0x24>)
 8008ac6:	5ccb      	ldrb	r3, [r1, r3]
 8008ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	46020c00 	.word	0x46020c00
 8008ad4:	0800d86c 	.word	0x0800d86c

08008ad8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	221f      	movs	r2, #31
 8008ae6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8008ae8:	4b15      	ldr	r3, [pc, #84]	; (8008b40 <HAL_RCC_GetClockConfig+0x68>)
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	f003 0203 	and.w	r2, r3, #3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8008af4:	4b12      	ldr	r3, [pc, #72]	; (8008b40 <HAL_RCC_GetClockConfig+0x68>)
 8008af6:	6a1b      	ldr	r3, [r3, #32]
 8008af8:	f003 020f 	and.w	r2, r3, #15
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8008b00:	4b0f      	ldr	r3, [pc, #60]	; (8008b40 <HAL_RCC_GetClockConfig+0x68>)
 8008b02:	6a1b      	ldr	r3, [r3, #32]
 8008b04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8008b0c:	4b0c      	ldr	r3, [pc, #48]	; (8008b40 <HAL_RCC_GetClockConfig+0x68>)
 8008b0e:	6a1b      	ldr	r3, [r3, #32]
 8008b10:	091b      	lsrs	r3, r3, #4
 8008b12:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8008b1a:	4b09      	ldr	r3, [pc, #36]	; (8008b40 <HAL_RCC_GetClockConfig+0x68>)
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008b26:	4b07      	ldr	r3, [pc, #28]	; (8008b44 <HAL_RCC_GetClockConfig+0x6c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 020f 	and.w	r2, r3, #15
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	601a      	str	r2, [r3, #0]
}
 8008b32:	bf00      	nop
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	46020c00 	.word	0x46020c00
 8008b44:	40022000 	.word	0x40022000

08008b48 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8008b4c:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <HAL_RCC_EnableCSS+0x1c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a04      	ldr	r2, [pc, #16]	; (8008b64 <HAL_RCC_EnableCSS+0x1c>)
 8008b52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b56:	6013      	str	r3, [r2, #0]
}
 8008b58:	bf00      	nop
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	46020c00 	.word	0x46020c00

08008b68 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008b6c:	4b07      	ldr	r3, [pc, #28]	; (8008b8c <HAL_RCC_NMI_IRQHandler+0x24>)
 8008b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b78:	d105      	bne.n	8008b86 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008b7a:	f000 f809 	bl	8008b90 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008b7e:	4b03      	ldr	r3, [pc, #12]	; (8008b8c <HAL_RCC_NMI_IRQHandler+0x24>)
 8008b80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b84:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8008b86:	bf00      	nop
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	46020c00 	.word	0x46020c00

08008b90 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8008b94:	bf00      	nop
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
	...

08008ba0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008ba8:	4b3e      	ldr	r3, [pc, #248]	; (8008ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bae:	f003 0304 	and.w	r3, r3, #4
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008bb6:	f7fe fcfb 	bl	80075b0 <HAL_PWREx_GetVoltageRange>
 8008bba:	6178      	str	r0, [r7, #20]
 8008bbc:	e019      	b.n	8008bf2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008bbe:	4b39      	ldr	r3, [pc, #228]	; (8008ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bc4:	4a37      	ldr	r2, [pc, #220]	; (8008ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008bc6:	f043 0304 	orr.w	r3, r3, #4
 8008bca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008bce:	4b35      	ldr	r3, [pc, #212]	; (8008ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bd4:	f003 0304 	and.w	r3, r3, #4
 8008bd8:	60fb      	str	r3, [r7, #12]
 8008bda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008bdc:	f7fe fce8 	bl	80075b0 <HAL_PWREx_GetVoltageRange>
 8008be0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008be2:	4b30      	ldr	r3, [pc, #192]	; (8008ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008be8:	4a2e      	ldr	r2, [pc, #184]	; (8008ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008bea:	f023 0304 	bic.w	r3, r3, #4
 8008bee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008bf8:	d003      	beq.n	8008c02 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c00:	d109      	bne.n	8008c16 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c08:	d202      	bcs.n	8008c10 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008c0e:	e033      	b.n	8008c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8008c10:	2300      	movs	r3, #0
 8008c12:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008c14:	e030      	b.n	8008c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c1c:	d208      	bcs.n	8008c30 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c24:	d102      	bne.n	8008c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8008c26:	2303      	movs	r3, #3
 8008c28:	613b      	str	r3, [r7, #16]
 8008c2a:	e025      	b.n	8008c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e035      	b.n	8008c9c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c36:	d90f      	bls.n	8008c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d109      	bne.n	8008c52 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c44:	d902      	bls.n	8008c4c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8008c46:	2300      	movs	r3, #0
 8008c48:	613b      	str	r3, [r7, #16]
 8008c4a:	e015      	b.n	8008c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	613b      	str	r3, [r7, #16]
 8008c50:	e012      	b.n	8008c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8008c52:	2300      	movs	r3, #0
 8008c54:	613b      	str	r3, [r7, #16]
 8008c56:	e00f      	b.n	8008c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c5e:	d109      	bne.n	8008c74 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c66:	d102      	bne.n	8008c6e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8008c68:	2301      	movs	r3, #1
 8008c6a:	613b      	str	r3, [r7, #16]
 8008c6c:	e004      	b.n	8008c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8008c6e:	2302      	movs	r3, #2
 8008c70:	613b      	str	r3, [r7, #16]
 8008c72:	e001      	b.n	8008c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8008c74:	2301      	movs	r3, #1
 8008c76:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008c78:	4b0b      	ldr	r3, [pc, #44]	; (8008ca8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f023 020f 	bic.w	r2, r3, #15
 8008c80:	4909      	ldr	r1, [pc, #36]	; (8008ca8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8008c88:	4b07      	ldr	r3, [pc, #28]	; (8008ca8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 030f 	and.w	r3, r3, #15
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d001      	beq.n	8008c9a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e000      	b.n	8008c9c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	46020c00 	.word	0x46020c00
 8008ca8:	40022000 	.word	0x40022000

08008cac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cb0:	b0c8      	sub	sp, #288	; 0x120
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	f002 0401 	and.w	r4, r2, #1
 8008cd0:	2500      	movs	r5, #0
 8008cd2:	ea54 0305 	orrs.w	r3, r4, r5
 8008cd6:	d00b      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008cd8:	4bd5      	ldr	r3, [pc, #852]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008cde:	f023 0103 	bic.w	r1, r3, #3
 8008ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce8:	4ad1      	ldr	r2, [pc, #836]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008cea:	430b      	orrs	r3, r1
 8008cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	f002 0802 	and.w	r8, r2, #2
 8008cfc:	f04f 0900 	mov.w	r9, #0
 8008d00:	ea58 0309 	orrs.w	r3, r8, r9
 8008d04:	d00b      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8008d06:	4bca      	ldr	r3, [pc, #808]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d0c:	f023 010c 	bic.w	r1, r3, #12
 8008d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d16:	4ac6      	ldr	r2, [pc, #792]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d18:	430b      	orrs	r3, r1
 8008d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	f002 0a04 	and.w	sl, r2, #4
 8008d2a:	f04f 0b00 	mov.w	fp, #0
 8008d2e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008d32:	d00b      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8008d34:	4bbe      	ldr	r3, [pc, #760]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d3a:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d44:	4aba      	ldr	r2, [pc, #744]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d46:	430b      	orrs	r3, r1
 8008d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f002 0308 	and.w	r3, r2, #8
 8008d58:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008d62:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008d66:	460b      	mov	r3, r1
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	d00b      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8008d6c:	4bb0      	ldr	r3, [pc, #704]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d7c:	4aac      	ldr	r2, [pc, #688]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d7e:	430b      	orrs	r3, r1
 8008d80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8c:	f002 0310 	and.w	r3, r2, #16
 8008d90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008d94:	2300      	movs	r3, #0
 8008d96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008d9e:	460b      	mov	r3, r1
 8008da0:	4313      	orrs	r3, r2
 8008da2:	d00b      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8008da4:	4ba2      	ldr	r3, [pc, #648]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008daa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008db4:	4a9e      	ldr	r2, [pc, #632]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008db6:	430b      	orrs	r3, r1
 8008db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008dc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008dd2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	d00b      	beq.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8008ddc:	4b94      	ldr	r3, [pc, #592]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008dde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008de2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dec:	4a90      	ldr	r2, [pc, #576]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008dee:	430b      	orrs	r3, r1
 8008df0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfc:	f002 0320 	and.w	r3, r2, #32
 8008e00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e04:	2300      	movs	r3, #0
 8008e06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008e0a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008e0e:	460b      	mov	r3, r1
 8008e10:	4313      	orrs	r3, r2
 8008e12:	d00b      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008e14:	4b86      	ldr	r3, [pc, #536]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008e1a:	f023 0107 	bic.w	r1, r3, #7
 8008e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e24:	4a82      	ldr	r2, [pc, #520]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e26:	430b      	orrs	r3, r1
 8008e28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e34:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e42:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	d00b      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008e4c:	4b78      	ldr	r3, [pc, #480]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e52:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8008e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e5c:	4a74      	ldr	r2, [pc, #464]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e5e:	430b      	orrs	r3, r1
 8008e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008e70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e74:	2300      	movs	r3, #0
 8008e76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4313      	orrs	r3, r2
 8008e82:	d00b      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8008e84:	4b6a      	ldr	r3, [pc, #424]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e94:	4a66      	ldr	r2, [pc, #408]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e96:	430b      	orrs	r3, r1
 8008e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8008ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008eac:	2300      	movs	r3, #0
 8008eae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008eb2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	d00b      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8008ebc:	4b5c      	ldr	r3, [pc, #368]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008ebe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008ec2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ecc:	4a58      	ldr	r2, [pc, #352]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008ece:	430b      	orrs	r3, r1
 8008ed0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008ee0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008eea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	d00b      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008ef4:	4b4e      	ldr	r3, [pc, #312]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008efa:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8008efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f04:	4a4a      	ldr	r2, [pc, #296]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f06:	430b      	orrs	r3, r1
 8008f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8008f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008f18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008f22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008f26:	460b      	mov	r3, r1
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	d00b      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8008f2c:	4b40      	ldr	r3, [pc, #256]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008f32:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8008f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f3c:	4a3c      	ldr	r2, [pc, #240]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f3e:	430b      	orrs	r3, r1
 8008f40:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8008f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f54:	2300      	movs	r3, #0
 8008f56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008f5a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008f5e:	460b      	mov	r3, r1
 8008f60:	4313      	orrs	r3, r2
 8008f62:	d00c      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8008f64:	4b32      	ldr	r3, [pc, #200]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008f6a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f76:	4a2e      	ldr	r2, [pc, #184]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f78:	430b      	orrs	r3, r1
 8008f7a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f86:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8008f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f8e:	2300      	movs	r3, #0
 8008f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f94:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	d00c      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8008f9e:	4b24      	ldr	r3, [pc, #144]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008fa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008fa4:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8008fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fb0:	4a1f      	ldr	r2, [pc, #124]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008fb2:	430b      	orrs	r3, r1
 8008fb4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc0:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008fc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008fc8:	2300      	movs	r3, #0
 8008fca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008fce:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	d00c      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008fd8:	4b15      	ldr	r3, [pc, #84]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fde:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8008fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fea:	4a11      	ldr	r2, [pc, #68]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008fec:	430b      	orrs	r3, r1
 8008fee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8008ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009002:	2300      	movs	r3, #0
 8009004:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009008:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800900c:	460b      	mov	r3, r1
 800900e:	4313      	orrs	r3, r2
 8009010:	d010      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8009012:	4b07      	ldr	r3, [pc, #28]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009018:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800901c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009024:	4a02      	ldr	r2, [pc, #8]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009026:	430b      	orrs	r3, r1
 8009028:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800902c:	e002      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800902e:	bf00      	nop
 8009030:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903c:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009044:	2300      	movs	r3, #0
 8009046:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800904a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800904e:	460b      	mov	r3, r1
 8009050:	4313      	orrs	r3, r2
 8009052:	d04c      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009058:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800905c:	2b80      	cmp	r3, #128	; 0x80
 800905e:	d02d      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009060:	2b80      	cmp	r3, #128	; 0x80
 8009062:	d827      	bhi.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009064:	2b60      	cmp	r3, #96	; 0x60
 8009066:	d02b      	beq.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009068:	2b60      	cmp	r3, #96	; 0x60
 800906a:	d823      	bhi.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800906c:	2b40      	cmp	r3, #64	; 0x40
 800906e:	d006      	beq.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8009070:	2b40      	cmp	r3, #64	; 0x40
 8009072:	d81f      	bhi.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009074:	2b00      	cmp	r3, #0
 8009076:	d009      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009078:	2b20      	cmp	r3, #32
 800907a:	d011      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800907c:	e01a      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800907e:	4bc0      	ldr	r3, [pc, #768]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009082:	4abf      	ldr	r2, [pc, #764]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009088:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800908a:	e01a      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800908c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009090:	3308      	adds	r3, #8
 8009092:	4618      	mov	r0, r3
 8009094:	f002 fce8 	bl	800ba68 <RCCEx_PLL2_Config>
 8009098:	4603      	mov	r3, r0
 800909a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800909e:	e010      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80090a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090a4:	332c      	adds	r3, #44	; 0x2c
 80090a6:	4618      	mov	r0, r3
 80090a8:	f002 fd76 	bl	800bb98 <RCCEx_PLL3_Config>
 80090ac:	4603      	mov	r3, r0
 80090ae:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80090b2:	e006      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80090ba:	e002      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80090bc:	bf00      	nop
 80090be:	e000      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80090c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090c2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10d      	bne.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80090ca:	4bad      	ldr	r3, [pc, #692]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80090cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80090d0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80090d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80090dc:	4aa8      	ldr	r2, [pc, #672]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80090de:	430b      	orrs	r3, r1
 80090e0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80090e4:	e003      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80090ea:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80090ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80090fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090fe:	2300      	movs	r3, #0
 8009100:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009104:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009108:	460b      	mov	r3, r1
 800910a:	4313      	orrs	r3, r2
 800910c:	d053      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800910e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009112:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800911a:	d033      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800911c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009120:	d82c      	bhi.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009122:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009126:	d02f      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8009128:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800912c:	d826      	bhi.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800912e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009132:	d008      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8009134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009138:	d820      	bhi.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800913e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009142:	d011      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009144:	e01a      	b.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009146:	4b8e      	ldr	r3, [pc, #568]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914a:	4a8d      	ldr	r2, [pc, #564]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800914c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009150:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009152:	e01a      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009158:	3308      	adds	r3, #8
 800915a:	4618      	mov	r0, r3
 800915c:	f002 fc84 	bl	800ba68 <RCCEx_PLL2_Config>
 8009160:	4603      	mov	r3, r0
 8009162:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009166:	e010      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800916c:	332c      	adds	r3, #44	; 0x2c
 800916e:	4618      	mov	r0, r3
 8009170:	f002 fd12 	bl	800bb98 <RCCEx_PLL3_Config>
 8009174:	4603      	mov	r3, r0
 8009176:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800917a:	e006      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009182:	e002      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009184:	bf00      	nop
 8009186:	e000      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800918a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10d      	bne.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8009192:	4b7b      	ldr	r3, [pc, #492]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009194:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009198:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800919c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80091a4:	4a76      	ldr	r2, [pc, #472]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80091a6:	430b      	orrs	r3, r1
 80091a8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80091ac:	e003      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ae:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80091b2:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80091b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80091c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80091c6:	2300      	movs	r3, #0
 80091c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80091cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80091d0:	460b      	mov	r3, r1
 80091d2:	4313      	orrs	r3, r2
 80091d4:	d046      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80091d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80091de:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80091e2:	d028      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80091e4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80091e8:	d821      	bhi.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x582>
 80091ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091ee:	d022      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80091f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091f4:	d81b      	bhi.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x582>
 80091f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091fa:	d01c      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80091fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009200:	d815      	bhi.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009206:	d008      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8009208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800920c:	d80f      	bhi.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800920e:	2b00      	cmp	r3, #0
 8009210:	d011      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009216:	d00e      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009218:	e009      	b.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800921a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800921e:	3308      	adds	r3, #8
 8009220:	4618      	mov	r0, r3
 8009222:	f002 fc21 	bl	800ba68 <RCCEx_PLL2_Config>
 8009226:	4603      	mov	r3, r0
 8009228:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800922c:	e004      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009234:	e000      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8009236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009238:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10d      	bne.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009240:	4b4f      	ldr	r3, [pc, #316]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009242:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009246:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800924a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800924e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009252:	4a4b      	ldr	r2, [pc, #300]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009254:	430b      	orrs	r3, r1
 8009256:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800925a:	e003      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800925c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009260:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009270:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009274:	2300      	movs	r3, #0
 8009276:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800927a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800927e:	460b      	mov	r3, r1
 8009280:	4313      	orrs	r3, r2
 8009282:	d03f      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8009284:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800928c:	2b04      	cmp	r3, #4
 800928e:	d81e      	bhi.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x622>
 8009290:	a201      	add	r2, pc, #4	; (adr r2, 8009298 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009296:	bf00      	nop
 8009298:	080092d7 	.word	0x080092d7
 800929c:	080092ad 	.word	0x080092ad
 80092a0:	080092bb 	.word	0x080092bb
 80092a4:	080092d7 	.word	0x080092d7
 80092a8:	080092d7 	.word	0x080092d7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80092ac:	4b34      	ldr	r3, [pc, #208]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80092ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b0:	4a33      	ldr	r2, [pc, #204]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80092b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092b6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80092b8:	e00e      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80092ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092be:	332c      	adds	r3, #44	; 0x2c
 80092c0:	4618      	mov	r0, r3
 80092c2:	f002 fc69 	bl	800bb98 <RCCEx_PLL3_Config>
 80092c6:	4603      	mov	r3, r0
 80092c8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80092cc:	e004      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80092d4:	e000      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 80092d6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80092d8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10d      	bne.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80092e0:	4b27      	ldr	r3, [pc, #156]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80092e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80092e6:	f023 0107 	bic.w	r1, r3, #7
 80092ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092f2:	4a23      	ldr	r2, [pc, #140]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80092f4:	430b      	orrs	r3, r1
 80092f6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80092fa:	e003      	b.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092fc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009300:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8009304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930c:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009310:	67bb      	str	r3, [r7, #120]	; 0x78
 8009312:	2300      	movs	r3, #0
 8009314:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009316:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800931a:	460b      	mov	r3, r1
 800931c:	4313      	orrs	r3, r2
 800931e:	d04c      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8009320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009324:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009328:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800932c:	d02a      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800932e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009332:	d821      	bhi.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009334:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009338:	d026      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800933a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800933e:	d81b      	bhi.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009344:	d00e      	beq.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009346:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800934a:	d815      	bhi.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800934c:	2b00      	cmp	r3, #0
 800934e:	d01d      	beq.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8009350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009354:	d110      	bne.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009356:	4b0a      	ldr	r3, [pc, #40]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935a:	4a09      	ldr	r2, [pc, #36]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800935c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009360:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8009362:	e014      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009368:	332c      	adds	r3, #44	; 0x2c
 800936a:	4618      	mov	r0, r3
 800936c:	f002 fc14 	bl	800bb98 <RCCEx_PLL3_Config>
 8009370:	4603      	mov	r3, r0
 8009372:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009376:	e00a      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800937e:	e006      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8009380:	46020c00 	.word	0x46020c00
        break;
 8009384:	bf00      	nop
 8009386:	e002      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8009388:	bf00      	nop
 800938a:	e000      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800938c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800938e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009392:	2b00      	cmp	r3, #0
 8009394:	d10d      	bne.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8009396:	4baf      	ldr	r3, [pc, #700]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800939c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80093a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093a8:	4aaa      	ldr	r2, [pc, #680]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80093aa:	430b      	orrs	r3, r1
 80093ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80093b0:	e003      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80093b6:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80093c6:	673b      	str	r3, [r7, #112]	; 0x70
 80093c8:	2300      	movs	r3, #0
 80093ca:	677b      	str	r3, [r7, #116]	; 0x74
 80093cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80093d0:	460b      	mov	r3, r1
 80093d2:	4313      	orrs	r3, r2
 80093d4:	f000 80b5 	beq.w	8009542 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093d8:	2300      	movs	r3, #0
 80093da:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093de:	4b9d      	ldr	r3, [pc, #628]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80093e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093e4:	f003 0304 	and.w	r3, r3, #4
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d113      	bne.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093ec:	4b99      	ldr	r3, [pc, #612]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80093ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093f2:	4a98      	ldr	r2, [pc, #608]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80093f4:	f043 0304 	orr.w	r3, r3, #4
 80093f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80093fc:	4b95      	ldr	r3, [pc, #596]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80093fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009402:	f003 0304 	and.w	r3, r3, #4
 8009406:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800940a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
      pwrclkchanged = SET;
 800940e:	2301      	movs	r3, #1
 8009410:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009414:	4b90      	ldr	r3, [pc, #576]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009418:	4a8f      	ldr	r2, [pc, #572]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800941a:	f043 0301 	orr.w	r3, r3, #1
 800941e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009420:	f7f9 fdae 	bl	8002f80 <HAL_GetTick>
 8009424:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009428:	e00b      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800942a:	f7f9 fda9 	bl	8002f80 <HAL_GetTick>
 800942e:	4602      	mov	r2, r0
 8009430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	2b02      	cmp	r3, #2
 8009438:	d903      	bls.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009440:	e005      	b.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009442:	4b85      	ldr	r3, [pc, #532]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009446:	f003 0301 	and.w	r3, r3, #1
 800944a:	2b00      	cmp	r3, #0
 800944c:	d0ed      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800944e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009452:	2b00      	cmp	r3, #0
 8009454:	d165      	bne.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009456:	4b7f      	ldr	r3, [pc, #508]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800945c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009460:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009464:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009468:	2b00      	cmp	r3, #0
 800946a:	d023      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800946c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009470:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8009474:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009478:	4293      	cmp	r3, r2
 800947a:	d01b      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800947c:	4b75      	ldr	r3, [pc, #468]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800947e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009486:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800948a:	4b72      	ldr	r3, [pc, #456]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800948c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009490:	4a70      	ldr	r2, [pc, #448]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009496:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800949a:	4b6e      	ldr	r3, [pc, #440]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800949c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80094a0:	4a6c      	ldr	r2, [pc, #432]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80094a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80094aa:	4a6a      	ldr	r2, [pc, #424]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80094ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80094b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80094b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80094b8:	f003 0301 	and.w	r3, r3, #1
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d019      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094c0:	f7f9 fd5e 	bl	8002f80 <HAL_GetTick>
 80094c4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094c8:	e00d      	b.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094ca:	f7f9 fd59 	bl	8002f80 <HAL_GetTick>
 80094ce:	4602      	mov	r2, r0
 80094d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094d4:	1ad2      	subs	r2, r2, r3
 80094d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80094da:	429a      	cmp	r2, r3
 80094dc:	d903      	bls.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
            break;
 80094e4:	e006      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094e6:	4b5b      	ldr	r3, [pc, #364]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80094e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80094ec:	f003 0302 	and.w	r3, r3, #2
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d0ea      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 80094f4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10d      	bne.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80094fc:	4b55      	ldr	r3, [pc, #340]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80094fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009502:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800950a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800950e:	4a51      	ldr	r2, [pc, #324]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009510:	430b      	orrs	r3, r1
 8009512:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009516:	e008      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009518:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800951c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 8009520:	e003      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009522:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009526:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800952a:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 800952e:	2b01      	cmp	r3, #1
 8009530:	d107      	bne.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009532:	4b48      	ldr	r3, [pc, #288]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009538:	4a46      	ldr	r2, [pc, #280]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800953a:	f023 0304 	bic.w	r3, r3, #4
 800953e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8009542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954a:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800954e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009550:	2300      	movs	r3, #0
 8009552:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009554:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009558:	460b      	mov	r3, r1
 800955a:	4313      	orrs	r3, r2
 800955c:	d042      	beq.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800955e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009562:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009566:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800956a:	d022      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800956c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009570:	d81b      	bhi.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8009572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009576:	d011      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8009578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800957c:	d815      	bhi.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800957e:	2b00      	cmp	r3, #0
 8009580:	d019      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8009582:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009586:	d110      	bne.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800958c:	3308      	adds	r3, #8
 800958e:	4618      	mov	r0, r3
 8009590:	f002 fa6a 	bl	800ba68 <RCCEx_PLL2_Config>
 8009594:	4603      	mov	r3, r0
 8009596:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800959a:	e00d      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800959c:	4b2d      	ldr	r3, [pc, #180]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800959e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a0:	4a2c      	ldr	r2, [pc, #176]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80095a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095a6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80095a8:	e006      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80095b0:	e002      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 80095b2:	bf00      	nop
 80095b4:	e000      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 80095b6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80095b8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10d      	bne.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80095c0:	4b24      	ldr	r3, [pc, #144]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80095c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80095c6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80095ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095d2:	4a20      	ldr	r2, [pc, #128]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80095d4:	430b      	orrs	r3, r1
 80095d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80095da:	e003      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095dc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80095e0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80095e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80095f0:	663b      	str	r3, [r7, #96]	; 0x60
 80095f2:	2300      	movs	r3, #0
 80095f4:	667b      	str	r3, [r7, #100]	; 0x64
 80095f6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80095fa:	460b      	mov	r3, r1
 80095fc:	4313      	orrs	r3, r2
 80095fe:	d031      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8009600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009604:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800960c:	d00b      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800960e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009612:	d804      	bhi.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8009614:	2b00      	cmp	r3, #0
 8009616:	d008      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8009618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800961c:	d007      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009624:	e004      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8009626:	bf00      	nop
 8009628:	e002      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800962a:	bf00      	nop
 800962c:	e000      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800962e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009630:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009634:	2b00      	cmp	r3, #0
 8009636:	d111      	bne.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009638:	4b06      	ldr	r3, [pc, #24]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800963a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800963e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009646:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800964a:	4a02      	ldr	r2, [pc, #8]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800964c:	430b      	orrs	r3, r1
 800964e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009652:	e007      	b.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8009654:	46020c00 	.word	0x46020c00
 8009658:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800965c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009660:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8009664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009670:	65bb      	str	r3, [r7, #88]	; 0x58
 8009672:	2300      	movs	r3, #0
 8009674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009676:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800967a:	460b      	mov	r3, r1
 800967c:	4313      	orrs	r3, r2
 800967e:	d00c      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8009680:	4bb2      	ldr	r3, [pc, #712]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009682:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009686:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800968a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800968e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009692:	4aae      	ldr	r2, [pc, #696]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009694:	430b      	orrs	r3, r1
 8009696:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800969a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800969e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80096a6:	653b      	str	r3, [r7, #80]	; 0x50
 80096a8:	2300      	movs	r3, #0
 80096aa:	657b      	str	r3, [r7, #84]	; 0x54
 80096ac:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80096b0:	460b      	mov	r3, r1
 80096b2:	4313      	orrs	r3, r2
 80096b4:	d019      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80096b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096c2:	d105      	bne.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80096c4:	4ba1      	ldr	r3, [pc, #644]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80096c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c8:	4aa0      	ldr	r2, [pc, #640]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80096ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096ce:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80096d0:	4b9e      	ldr	r3, [pc, #632]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80096d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80096d6:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80096da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096e2:	4a9a      	ldr	r2, [pc, #616]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80096e4:	430b      	orrs	r3, r1
 80096e6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80096ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80096f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80096f8:	2300      	movs	r3, #0
 80096fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009700:	460b      	mov	r3, r1
 8009702:	4313      	orrs	r3, r2
 8009704:	d00c      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8009706:	4b91      	ldr	r3, [pc, #580]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800970c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009714:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009718:	4a8c      	ldr	r2, [pc, #560]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800971a:	430b      	orrs	r3, r1
 800971c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009728:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800972c:	643b      	str	r3, [r7, #64]	; 0x40
 800972e:	2300      	movs	r3, #0
 8009730:	647b      	str	r3, [r7, #68]	; 0x44
 8009732:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009736:	460b      	mov	r3, r1
 8009738:	4313      	orrs	r3, r2
 800973a:	d00c      	beq.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800973c:	4b83      	ldr	r3, [pc, #524]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800973e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009742:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800974a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800974e:	4a7f      	ldr	r2, [pc, #508]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009750:	430b      	orrs	r3, r1
 8009752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009762:	63bb      	str	r3, [r7, #56]	; 0x38
 8009764:	2300      	movs	r3, #0
 8009766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009768:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800976c:	460b      	mov	r3, r1
 800976e:	4313      	orrs	r3, r2
 8009770:	d00c      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8009772:	4b76      	ldr	r3, [pc, #472]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009774:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009778:	f023 0118 	bic.w	r1, r3, #24
 800977c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009780:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009784:	4a71      	ldr	r2, [pc, #452]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009786:	430b      	orrs	r3, r1
 8009788:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800978c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009794:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8009798:	633b      	str	r3, [r7, #48]	; 0x30
 800979a:	2300      	movs	r3, #0
 800979c:	637b      	str	r3, [r7, #52]	; 0x34
 800979e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80097a2:	460b      	mov	r3, r1
 80097a4:	4313      	orrs	r3, r2
 80097a6:	d032      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80097a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80097b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097b4:	d105      	bne.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097b6:	4b65      	ldr	r3, [pc, #404]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80097b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ba:	4a64      	ldr	r2, [pc, #400]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80097bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097c0:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80097c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80097ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097ce:	d108      	bne.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80097d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097d4:	3308      	adds	r3, #8
 80097d6:	4618      	mov	r0, r3
 80097d8:	f002 f946 	bl	800ba68 <RCCEx_PLL2_Config>
 80097dc:	4603      	mov	r3, r0
 80097de:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }
    if (ret == HAL_OK)
 80097e2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10d      	bne.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80097ea:	4b58      	ldr	r3, [pc, #352]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80097ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80097f0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80097f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80097fc:	4a53      	ldr	r2, [pc, #332]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80097fe:	430b      	orrs	r3, r1
 8009800:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009804:	e003      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009806:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800980a:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800980e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009816:	2100      	movs	r1, #0
 8009818:	62b9      	str	r1, [r7, #40]	; 0x28
 800981a:	f003 0301 	and.w	r3, r3, #1
 800981e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009820:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009824:	460b      	mov	r3, r1
 8009826:	4313      	orrs	r3, r2
 8009828:	d04a      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800982a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800982e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009832:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009836:	d01e      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8009838:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800983c:	d825      	bhi.n	800988a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800983e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009842:	d00e      	beq.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 8009844:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009848:	d81f      	bhi.n	800988a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d021      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800984e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009852:	d11a      	bne.n	800988a <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009854:	4b3d      	ldr	r3, [pc, #244]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009858:	4a3c      	ldr	r2, [pc, #240]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800985a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800985e:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009860:	e018      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009866:	3308      	adds	r3, #8
 8009868:	4618      	mov	r0, r3
 800986a:	f002 f8fd 	bl	800ba68 <RCCEx_PLL2_Config>
 800986e:	4603      	mov	r3, r0
 8009870:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009874:	e00e      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800987a:	332c      	adds	r3, #44	; 0x2c
 800987c:	4618      	mov	r0, r3
 800987e:	f002 f98b 	bl	800bb98 <RCCEx_PLL3_Config>
 8009882:	4603      	mov	r3, r0
 8009884:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009888:	e004      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009890:	e000      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 8009892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009894:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009898:	2b00      	cmp	r3, #0
 800989a:	d10d      	bne.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800989c:	4b2b      	ldr	r3, [pc, #172]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800989e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80098a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80098a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80098ae:	4927      	ldr	r1, [pc, #156]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80098b0:	4313      	orrs	r3, r2
 80098b2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80098b6:	e003      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098b8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80098bc:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80098c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c8:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80098cc:	623b      	str	r3, [r7, #32]
 80098ce:	2300      	movs	r3, #0
 80098d0:	627b      	str	r3, [r7, #36]	; 0x24
 80098d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80098d6:	460b      	mov	r3, r1
 80098d8:	4313      	orrs	r3, r2
 80098da:	d03d      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80098dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098e8:	d00e      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80098ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098ee:	d815      	bhi.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d017      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80098f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80098f8:	d110      	bne.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098fa:	4b14      	ldr	r3, [pc, #80]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80098fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098fe:	4a13      	ldr	r2, [pc, #76]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009904:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009906:	e00e      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800990c:	3308      	adds	r3, #8
 800990e:	4618      	mov	r0, r3
 8009910:	f002 f8aa 	bl	800ba68 <RCCEx_PLL2_Config>
 8009914:	4603      	mov	r3, r0
 8009916:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800991a:	e004      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009922:	e000      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009924:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009926:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800992a:	2b00      	cmp	r3, #0
 800992c:	d110      	bne.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800992e:	4b07      	ldr	r3, [pc, #28]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009934:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800993c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009940:	4902      	ldr	r1, [pc, #8]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009942:	4313      	orrs	r3, r2
 8009944:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8009948:	e006      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800994a:	bf00      	nop
 800994c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009950:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009954:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8009958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800995c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009960:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009964:	61bb      	str	r3, [r7, #24]
 8009966:	2300      	movs	r3, #0
 8009968:	61fb      	str	r3, [r7, #28]
 800996a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800996e:	460b      	mov	r3, r1
 8009970:	4313      	orrs	r3, r2
 8009972:	d00c      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8009974:	4b68      	ldr	r3, [pc, #416]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009976:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800997a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800997e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009982:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009986:	4964      	ldr	r1, [pc, #400]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009988:	4313      	orrs	r3, r2
 800998a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800998e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009996:	2100      	movs	r1, #0
 8009998:	6139      	str	r1, [r7, #16]
 800999a:	f003 0302 	and.w	r3, r3, #2
 800999e:	617b      	str	r3, [r7, #20]
 80099a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80099a4:	460b      	mov	r3, r1
 80099a6:	4313      	orrs	r3, r2
 80099a8:	d036      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 80099aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00c      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80099b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80099ba:	d113      	bne.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80099bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099c0:	3308      	adds	r3, #8
 80099c2:	4618      	mov	r0, r3
 80099c4:	f002 f850 	bl	800ba68 <RCCEx_PLL2_Config>
 80099c8:	4603      	mov	r3, r0
 80099ca:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 80099ce:	e00d      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80099d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099d4:	332c      	adds	r3, #44	; 0x2c
 80099d6:	4618      	mov	r0, r3
 80099d8:	f002 f8de 	bl	800bb98 <RCCEx_PLL3_Config>
 80099dc:	4603      	mov	r3, r0
 80099de:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 80099e2:	e003      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80099ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ec:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10d      	bne.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 80099f4:	4b48      	ldr	r3, [pc, #288]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80099f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80099fa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80099fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a02:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009a06:	4944      	ldr	r1, [pc, #272]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009a0e:	e003      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a10:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009a14:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8009a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a20:	2100      	movs	r1, #0
 8009a22:	60b9      	str	r1, [r7, #8]
 8009a24:	f003 0304 	and.w	r3, r3, #4
 8009a28:	60fb      	str	r3, [r7, #12]
 8009a2a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009a2e:	460b      	mov	r3, r1
 8009a30:	4313      	orrs	r3, r2
 8009a32:	d024      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 8009a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d108      	bne.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a44:	332c      	adds	r3, #44	; 0x2c
 8009a46:	4618      	mov	r0, r3
 8009a48:	f002 f8a6 	bl	800bb98 <RCCEx_PLL3_Config>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }

    if (ret == HAL_OK)
 8009a52:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d10d      	bne.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 8009a5a:	4b2f      	ldr	r3, [pc, #188]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009a5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009a60:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009a6c:	492a      	ldr	r1, [pc, #168]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009a74:	e003      	b.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a76:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009a7a:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8009a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	2100      	movs	r1, #0
 8009a88:	6039      	str	r1, [r7, #0]
 8009a8a:	f003 0308 	and.w	r3, r3, #8
 8009a8e:	607b      	str	r3, [r7, #4]
 8009a90:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009a94:	460b      	mov	r3, r1
 8009a96:	4313      	orrs	r3, r2
 8009a98:	d036      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8009a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a9e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009aa2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009aa6:	d00d      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8009aa8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009aac:	d811      	bhi.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8009aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ab2:	d012      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8009ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ab8:	d80b      	bhi.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00d      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8009abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ac2:	d106      	bne.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ac4:	4b14      	ldr	r3, [pc, #80]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac8:	4a13      	ldr	r2, [pc, #76]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ace:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8009ad0:	e004      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009ad8:	e000      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 8009ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009adc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10d      	bne.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8009ae4:	4b0c      	ldr	r3, [pc, #48]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009ae6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009aea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009af2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009af6:	4908      	ldr	r1, [pc, #32]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009af8:	4313      	orrs	r3, r2
 8009afa:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009afe:	e003      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b00:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009b04:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8009b08:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8009b12:	46bd      	mov	sp, r7
 8009b14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b18:	46020c00 	.word	0x46020c00

08009b1c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b089      	sub	sp, #36	; 0x24
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8009b24:	4ba6      	ldr	r3, [pc, #664]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b2c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009b2e:	4ba4      	ldr	r3, [pc, #656]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b32:	f003 0303 	and.w	r3, r3, #3
 8009b36:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009b38:	4ba1      	ldr	r3, [pc, #644]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3c:	0a1b      	lsrs	r3, r3, #8
 8009b3e:	f003 030f 	and.w	r3, r3, #15
 8009b42:	3301      	adds	r3, #1
 8009b44:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009b46:	4b9e      	ldr	r3, [pc, #632]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4a:	091b      	lsrs	r3, r3, #4
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009b52:	4b9b      	ldr	r3, [pc, #620]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b56:	08db      	lsrs	r3, r3, #3
 8009b58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	fb02 f303 	mul.w	r3, r2, r3
 8009b62:	ee07 3a90 	vmov	s15, r3
 8009b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b6a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d062      	beq.n	8009c3a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	2b03      	cmp	r3, #3
 8009b78:	f200 8081 	bhi.w	8009c7e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d024      	beq.n	8009bcc <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d17a      	bne.n	8009c7e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	ee07 3a90 	vmov	s15, r3
 8009b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b92:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8009dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b9a:	4b89      	ldr	r3, [pc, #548]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba2:	ee07 3a90 	vmov	s15, r3
 8009ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bae:	eddf 5a86 	vldr	s11, [pc, #536]	; 8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bca:	e08f      	b.n	8009cec <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009bcc:	4b7c      	ldr	r3, [pc, #496]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d005      	beq.n	8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8009bd8:	4b79      	ldr	r3, [pc, #484]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	0f1b      	lsrs	r3, r3, #28
 8009bde:	f003 030f 	and.w	r3, r3, #15
 8009be2:	e006      	b.n	8009bf2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8009be4:	4b76      	ldr	r3, [pc, #472]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009be6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009bea:	041b      	lsls	r3, r3, #16
 8009bec:	0f1b      	lsrs	r3, r3, #28
 8009bee:	f003 030f 	and.w	r3, r3, #15
 8009bf2:	4a76      	ldr	r2, [pc, #472]	; (8009dcc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bf8:	ee07 3a90 	vmov	s15, r3
 8009bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	ee07 3a90 	vmov	s15, r3
 8009c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	ee07 3a90 	vmov	s15, r3
 8009c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c18:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c1c:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009c20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c38:	e058      	b.n	8009cec <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	ee07 3a90 	vmov	s15, r3
 8009c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c44:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009c48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c4c:	4b5c      	ldr	r3, [pc, #368]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c54:	ee07 3a90 	vmov	s15, r3
 8009c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c60:	eddf 5a59 	vldr	s11, [pc, #356]	; 8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009c64:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c68:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c70:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c7c:	e036      	b.n	8009cec <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009c7e:	4b50      	ldr	r3, [pc, #320]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d005      	beq.n	8009c96 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8009c8a:	4b4d      	ldr	r3, [pc, #308]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	0f1b      	lsrs	r3, r3, #28
 8009c90:	f003 030f 	and.w	r3, r3, #15
 8009c94:	e006      	b.n	8009ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8009c96:	4b4a      	ldr	r3, [pc, #296]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c9c:	041b      	lsls	r3, r3, #16
 8009c9e:	0f1b      	lsrs	r3, r3, #28
 8009ca0:	f003 030f 	and.w	r3, r3, #15
 8009ca4:	4a49      	ldr	r2, [pc, #292]	; (8009dcc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009caa:	ee07 3a90 	vmov	s15, r3
 8009cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	ee07 3a90 	vmov	s15, r3
 8009cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	ee07 3a90 	vmov	s15, r3
 8009cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cca:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cce:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cea:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8009cec:	4b34      	ldr	r3, [pc, #208]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d017      	beq.n	8009d28 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009cf8:	4b31      	ldr	r3, [pc, #196]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cfc:	0a5b      	lsrs	r3, r3, #9
 8009cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d02:	ee07 3a90 	vmov	s15, r3
 8009d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8009d0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d0e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009d12:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d1e:	ee17 2a90 	vmov	r2, s15
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	601a      	str	r2, [r3, #0]
 8009d26:	e002      	b.n	8009d2e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8009d2e:	4b24      	ldr	r3, [pc, #144]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d017      	beq.n	8009d6a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009d3a:	4b21      	ldr	r3, [pc, #132]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d3e:	0c1b      	lsrs	r3, r3, #16
 8009d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d44:	ee07 3a90 	vmov	s15, r3
 8009d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8009d4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d50:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009d54:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d60:	ee17 2a90 	vmov	r2, s15
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	605a      	str	r2, [r3, #4]
 8009d68:	e002      	b.n	8009d70 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8009d70:	4b13      	ldr	r3, [pc, #76]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d017      	beq.n	8009dac <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009d7c:	4b10      	ldr	r3, [pc, #64]	; (8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d80:	0e1b      	lsrs	r3, r3, #24
 8009d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d86:	ee07 3a90 	vmov	s15, r3
 8009d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8009d8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d92:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009d96:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009da2:	ee17 2a90 	vmov	r2, s15
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009daa:	e002      	b.n	8009db2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	609a      	str	r2, [r3, #8]
}
 8009db2:	bf00      	nop
 8009db4:	3724      	adds	r7, #36	; 0x24
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	46020c00 	.word	0x46020c00
 8009dc4:	4b742400 	.word	0x4b742400
 8009dc8:	46000000 	.word	0x46000000
 8009dcc:	0800d874 	.word	0x0800d874

08009dd0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b089      	sub	sp, #36	; 0x24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8009dd8:	4ba6      	ldr	r3, [pc, #664]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009de2:	4ba4      	ldr	r3, [pc, #656]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de6:	f003 0303 	and.w	r3, r3, #3
 8009dea:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8009dec:	4ba1      	ldr	r3, [pc, #644]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df0:	0a1b      	lsrs	r3, r3, #8
 8009df2:	f003 030f 	and.w	r3, r3, #15
 8009df6:	3301      	adds	r3, #1
 8009df8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8009dfa:	4b9e      	ldr	r3, [pc, #632]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfe:	091b      	lsrs	r3, r3, #4
 8009e00:	f003 0301 	and.w	r3, r3, #1
 8009e04:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8009e06:	4b9b      	ldr	r3, [pc, #620]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0a:	08db      	lsrs	r3, r3, #3
 8009e0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	fb02 f303 	mul.w	r3, r2, r3
 8009e16:	ee07 3a90 	vmov	s15, r3
 8009e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e1e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	2b03      	cmp	r3, #3
 8009e26:	d062      	beq.n	8009eee <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	2b03      	cmp	r3, #3
 8009e2c:	f200 8081 	bhi.w	8009f32 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d024      	beq.n	8009e80 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d17a      	bne.n	8009f32 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	ee07 3a90 	vmov	s15, r3
 8009e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e46:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800a078 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8009e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e4e:	4b89      	ldr	r3, [pc, #548]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e56:	ee07 3a90 	vmov	s15, r3
 8009e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e62:	eddf 5a86 	vldr	s11, [pc, #536]	; 800a07c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e7e:	e08f      	b.n	8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009e80:	4b7c      	ldr	r3, [pc, #496]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d005      	beq.n	8009e98 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8009e8c:	4b79      	ldr	r3, [pc, #484]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	0f1b      	lsrs	r3, r3, #28
 8009e92:	f003 030f 	and.w	r3, r3, #15
 8009e96:	e006      	b.n	8009ea6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8009e98:	4b76      	ldr	r3, [pc, #472]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009e9e:	041b      	lsls	r3, r3, #16
 8009ea0:	0f1b      	lsrs	r3, r3, #28
 8009ea2:	f003 030f 	and.w	r3, r3, #15
 8009ea6:	4a76      	ldr	r2, [pc, #472]	; (800a080 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009eac:	ee07 3a90 	vmov	s15, r3
 8009eb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	ee07 3a90 	vmov	s15, r3
 8009eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	ee07 3a90 	vmov	s15, r3
 8009ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ecc:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ed0:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800a07c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009ed4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ed8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009edc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ee0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ee8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009eec:	e058      	b.n	8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	ee07 3a90 	vmov	s15, r3
 8009ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef8:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a078 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8009efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f00:	4b5c      	ldr	r3, [pc, #368]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f08:	ee07 3a90 	vmov	s15, r3
 8009f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f10:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f14:	eddf 5a59 	vldr	s11, [pc, #356]	; 800a07c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009f18:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009f1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f24:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f30:	e036      	b.n	8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009f32:	4b50      	ldr	r3, [pc, #320]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d005      	beq.n	8009f4a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8009f3e:	4b4d      	ldr	r3, [pc, #308]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	0f1b      	lsrs	r3, r3, #28
 8009f44:	f003 030f 	and.w	r3, r3, #15
 8009f48:	e006      	b.n	8009f58 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8009f4a:	4b4a      	ldr	r3, [pc, #296]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f50:	041b      	lsls	r3, r3, #16
 8009f52:	0f1b      	lsrs	r3, r3, #28
 8009f54:	f003 030f 	and.w	r3, r3, #15
 8009f58:	4a49      	ldr	r2, [pc, #292]	; (800a080 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f5e:	ee07 3a90 	vmov	s15, r3
 8009f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	ee07 3a90 	vmov	s15, r3
 8009f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	ee07 3a90 	vmov	s15, r3
 8009f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f82:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a07c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f9e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8009fa0:	4b34      	ldr	r3, [pc, #208]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d017      	beq.n	8009fdc <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009fac:	4b31      	ldr	r3, [pc, #196]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fb0:	0a5b      	lsrs	r3, r3, #9
 8009fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fb6:	ee07 3a90 	vmov	s15, r3
 8009fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8009fbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fc2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009fc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fd2:	ee17 2a90 	vmov	r2, s15
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	601a      	str	r2, [r3, #0]
 8009fda:	e002      	b.n	8009fe2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009fe2:	4b24      	ldr	r3, [pc, #144]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d017      	beq.n	800a01e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009fee:	4b21      	ldr	r3, [pc, #132]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff2:	0c1b      	lsrs	r3, r3, #16
 8009ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ff8:	ee07 3a90 	vmov	s15, r3
 8009ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800a000:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a004:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a008:	edd7 6a07 	vldr	s13, [r7, #28]
 800a00c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a014:	ee17 2a90 	vmov	r2, s15
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	605a      	str	r2, [r3, #4]
 800a01c:	e002      	b.n	800a024 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800a024:	4b13      	ldr	r3, [pc, #76]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d017      	beq.n	800a060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a030:	4b10      	ldr	r3, [pc, #64]	; (800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a034:	0e1b      	lsrs	r3, r3, #24
 800a036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a03a:	ee07 3a90 	vmov	s15, r3
 800a03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800a042:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a046:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a04a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a04e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a056:	ee17 2a90 	vmov	r2, s15
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a05e:	e002      	b.n	800a066 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	609a      	str	r2, [r3, #8]
}
 800a066:	bf00      	nop
 800a068:	3724      	adds	r7, #36	; 0x24
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	46020c00 	.word	0x46020c00
 800a078:	4b742400 	.word	0x4b742400
 800a07c:	46000000 	.word	0x46000000
 800a080:	0800d874 	.word	0x0800d874

0800a084 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a084:	b480      	push	{r7}
 800a086:	b089      	sub	sp, #36	; 0x24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800a08c:	4ba6      	ldr	r3, [pc, #664]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a08e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a094:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800a096:	4ba4      	ldr	r3, [pc, #656]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a09a:	f003 0303 	and.w	r3, r3, #3
 800a09e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800a0a0:	4ba1      	ldr	r3, [pc, #644]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a4:	0a1b      	lsrs	r3, r3, #8
 800a0a6:	f003 030f 	and.w	r3, r3, #15
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800a0ae:	4b9e      	ldr	r3, [pc, #632]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b2:	091b      	lsrs	r3, r3, #4
 800a0b4:	f003 0301 	and.w	r3, r3, #1
 800a0b8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800a0ba:	4b9b      	ldr	r3, [pc, #620]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a0bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0be:	08db      	lsrs	r3, r3, #3
 800a0c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	fb02 f303 	mul.w	r3, r2, r3
 800a0ca:	ee07 3a90 	vmov	s15, r3
 800a0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0d2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	2b03      	cmp	r3, #3
 800a0da:	d062      	beq.n	800a1a2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	f200 8081 	bhi.w	800a1e6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d024      	beq.n	800a134 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d17a      	bne.n	800a1e6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	ee07 3a90 	vmov	s15, r3
 800a0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0fa:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800a32c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a0fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a102:	4b89      	ldr	r3, [pc, #548]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a10a:	ee07 3a90 	vmov	s15, r3
 800a10e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a112:	ed97 6a02 	vldr	s12, [r7, #8]
 800a116:	eddf 5a86 	vldr	s11, [pc, #536]	; 800a330 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a11a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a11e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a126:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a12e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800a132:	e08f      	b.n	800a254 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a134:	4b7c      	ldr	r3, [pc, #496]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d005      	beq.n	800a14c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800a140:	4b79      	ldr	r3, [pc, #484]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	0f1b      	lsrs	r3, r3, #28
 800a146:	f003 030f 	and.w	r3, r3, #15
 800a14a:	e006      	b.n	800a15a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800a14c:	4b76      	ldr	r3, [pc, #472]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a14e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a152:	041b      	lsls	r3, r3, #16
 800a154:	0f1b      	lsrs	r3, r3, #28
 800a156:	f003 030f 	and.w	r3, r3, #15
 800a15a:	4a76      	ldr	r2, [pc, #472]	; (800a334 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a15c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a160:	ee07 3a90 	vmov	s15, r3
 800a164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	ee07 3a90 	vmov	s15, r3
 800a16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	ee07 3a90 	vmov	s15, r3
 800a17c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a180:	ed97 6a02 	vldr	s12, [r7, #8]
 800a184:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800a330 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a188:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a18c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a190:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a194:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a19c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1a0:	e058      	b.n	800a254 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	ee07 3a90 	vmov	s15, r3
 800a1a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ac:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a32c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a1b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1b4:	4b5c      	ldr	r3, [pc, #368]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1bc:	ee07 3a90 	vmov	s15, r3
 800a1c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a1c4:	ed97 6a02 	vldr	s12, [r7, #8]
 800a1c8:	eddf 5a59 	vldr	s11, [pc, #356]	; 800a330 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a1cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a1d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a1d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a1dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1e4:	e036      	b.n	800a254 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a1e6:	4b50      	ldr	r3, [pc, #320]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d005      	beq.n	800a1fe <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800a1f2:	4b4d      	ldr	r3, [pc, #308]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	0f1b      	lsrs	r3, r3, #28
 800a1f8:	f003 030f 	and.w	r3, r3, #15
 800a1fc:	e006      	b.n	800a20c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800a1fe:	4b4a      	ldr	r3, [pc, #296]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a200:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a204:	041b      	lsls	r3, r3, #16
 800a206:	0f1b      	lsrs	r3, r3, #28
 800a208:	f003 030f 	and.w	r3, r3, #15
 800a20c:	4a49      	ldr	r2, [pc, #292]	; (800a334 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a20e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a212:	ee07 3a90 	vmov	s15, r3
 800a216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	ee07 3a90 	vmov	s15, r3
 800a220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	ee07 3a90 	vmov	s15, r3
 800a22e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a232:	ed97 6a02 	vldr	s12, [r7, #8]
 800a236:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a330 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a23a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a23e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a246:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a24a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a24e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a252:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800a254:	4b34      	ldr	r3, [pc, #208]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d017      	beq.n	800a290 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a260:	4b31      	ldr	r3, [pc, #196]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a264:	0a5b      	lsrs	r3, r3, #9
 800a266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a26a:	ee07 3a90 	vmov	s15, r3
 800a26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800a272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a276:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a27a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a27e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a286:	ee17 2a90 	vmov	r2, s15
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	e002      	b.n	800a296 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800a296:	4b24      	ldr	r3, [pc, #144]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a29a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d017      	beq.n	800a2d2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a2a2:	4b21      	ldr	r3, [pc, #132]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a6:	0c1b      	lsrs	r3, r3, #16
 800a2a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ac:	ee07 3a90 	vmov	s15, r3
 800a2b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800a2b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2b8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a2bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2c8:	ee17 2a90 	vmov	r2, s15
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	605a      	str	r2, [r3, #4]
 800a2d0:	e002      	b.n	800a2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800a2d8:	4b13      	ldr	r3, [pc, #76]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d017      	beq.n	800a314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a2e4:	4b10      	ldr	r3, [pc, #64]	; (800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a2e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2e8:	0e1b      	lsrs	r3, r3, #24
 800a2ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ee:	ee07 3a90 	vmov	s15, r3
 800a2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800a2f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a2fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800a302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a30a:	ee17 2a90 	vmov	r2, s15
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a312:	e002      	b.n	800a31a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	609a      	str	r2, [r3, #8]
}
 800a31a:	bf00      	nop
 800a31c:	3724      	adds	r7, #36	; 0x24
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	46020c00 	.word	0x46020c00
 800a32c:	4b742400 	.word	0x4b742400
 800a330:	46000000 	.word	0x46000000
 800a334:	0800d874 	.word	0x0800d874

0800a338 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b08e      	sub	sp, #56	; 0x38
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a342:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a346:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800a34a:	430b      	orrs	r3, r1
 800a34c:	d145      	bne.n	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a34e:	4ba7      	ldr	r3, [pc, #668]	; (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a350:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a358:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800a35a:	4ba4      	ldr	r3, [pc, #656]	; (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a35c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a360:	f003 0302 	and.w	r3, r3, #2
 800a364:	2b02      	cmp	r3, #2
 800a366:	d108      	bne.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800a368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a36e:	d104      	bne.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800a370:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a374:	637b      	str	r3, [r7, #52]	; 0x34
 800a376:	f001 bb5a 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800a37a:	4b9c      	ldr	r3, [pc, #624]	; (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a37c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a384:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a388:	d114      	bne.n	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800a38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a390:	d110      	bne.n	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a392:	4b96      	ldr	r3, [pc, #600]	; (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a394:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a39c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3a0:	d103      	bne.n	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800a3a2:	23fa      	movs	r3, #250	; 0xfa
 800a3a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a3a6:	f001 bb42 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800a3aa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a3ae:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a3b0:	f001 bb3d 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800a3b4:	4b8d      	ldr	r3, [pc, #564]	; (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3c0:	d107      	bne.n	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3c8:	d103      	bne.n	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800a3ca:	4b89      	ldr	r3, [pc, #548]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a3cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a3ce:	f001 bb2e 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	637b      	str	r3, [r7, #52]	; 0x34
 800a3d6:	f001 bb2a 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a3da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3de:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a3e2:	430b      	orrs	r3, r1
 800a3e4:	d151      	bne.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a3e6:	4b81      	ldr	r3, [pc, #516]	; (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a3e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a3ec:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a3f0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f4:	2b80      	cmp	r3, #128	; 0x80
 800a3f6:	d035      	beq.n	800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fa:	2b80      	cmp	r3, #128	; 0x80
 800a3fc:	d841      	bhi.n	800a482 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	2b60      	cmp	r3, #96	; 0x60
 800a402:	d02a      	beq.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800a404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a406:	2b60      	cmp	r3, #96	; 0x60
 800a408:	d83b      	bhi.n	800a482 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40c:	2b40      	cmp	r3, #64	; 0x40
 800a40e:	d009      	beq.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a412:	2b40      	cmp	r3, #64	; 0x40
 800a414:	d835      	bhi.n	800a482 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00c      	beq.n	800a436 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800a41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41e:	2b20      	cmp	r3, #32
 800a420:	d012      	beq.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a422:	e02e      	b.n	800a482 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a428:	4618      	mov	r0, r3
 800a42a:	f7ff fb77 	bl	8009b1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a432:	f001 bafc 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a436:	f107 0318 	add.w	r3, r7, #24
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7ff fcc8 	bl	8009dd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a444:	f001 baf3 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a448:	f107 030c 	add.w	r3, r7, #12
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7ff fe19 	bl	800a084 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a456:	f001 baea 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a45a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a45e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a460:	f001 bae5 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a464:	4b61      	ldr	r3, [pc, #388]	; (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a46c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a470:	d103      	bne.n	800a47a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800a472:	4b60      	ldr	r3, [pc, #384]	; (800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a474:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a476:	f001 bada 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a47a:	2300      	movs	r3, #0
 800a47c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a47e:	f001 bad6 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800a482:	2300      	movs	r3, #0
 800a484:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a486:	f001 bad2 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800a48a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a48e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a492:	430b      	orrs	r3, r1
 800a494:	d158      	bne.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a496:	4b55      	ldr	r3, [pc, #340]	; (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a498:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a49c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4a0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4a8:	d03b      	beq.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4b0:	d846      	bhi.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4b8:	d02e      	beq.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4c0:	d83e      	bhi.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4c8:	d00b      	beq.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4d0:	d836      	bhi.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00d      	beq.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800a4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4de:	d012      	beq.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800a4e0:	e02e      	b.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7ff fb18 	bl	8009b1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a4f0:	f001 ba9d 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4f4:	f107 0318 	add.w	r3, r7, #24
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7ff fc69 	bl	8009dd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a502:	f001 ba94 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a506:	f107 030c 	add.w	r3, r7, #12
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7ff fdba 	bl	800a084 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a514:	f001 ba8b 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a518:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a51c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a51e:	f001 ba86 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a522:	4b32      	ldr	r3, [pc, #200]	; (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a52a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a52e:	d103      	bne.n	800a538 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800a530:	4b30      	ldr	r3, [pc, #192]	; (800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a532:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a534:	f001 ba7b 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a538:	2300      	movs	r3, #0
 800a53a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a53c:	f001 ba77 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800a540:	2300      	movs	r3, #0
 800a542:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a544:	f001 ba73 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800a548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a54c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a550:	430b      	orrs	r3, r1
 800a552:	d126      	bne.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800a554:	4b25      	ldr	r3, [pc, #148]	; (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a556:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a55a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a55e:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800a560:	4b22      	ldr	r3, [pc, #136]	; (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a56c:	d106      	bne.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a570:	2b00      	cmp	r3, #0
 800a572:	d103      	bne.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800a574:	4b1f      	ldr	r3, [pc, #124]	; (800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a576:	637b      	str	r3, [r7, #52]	; 0x34
 800a578:	f001 ba59 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800a57c:	4b1b      	ldr	r3, [pc, #108]	; (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a588:	d107      	bne.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a590:	d103      	bne.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800a592:	4b19      	ldr	r3, [pc, #100]	; (800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a594:	637b      	str	r3, [r7, #52]	; 0x34
 800a596:	f001 ba4a 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800a59a:	2300      	movs	r3, #0
 800a59c:	637b      	str	r3, [r7, #52]	; 0x34
 800a59e:	f001 ba46 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800a5a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5a6:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800a5aa:	430b      	orrs	r3, r1
 800a5ac:	d16e      	bne.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a5ae:	4b0f      	ldr	r3, [pc, #60]	; (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a5b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5b4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a5b8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5bc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a5c0:	d03d      	beq.n	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a5c8:	d85c      	bhi.n	800a684 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5d0:	d014      	beq.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5d8:	d854      	bhi.n	800a684 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d01f      	beq.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800a5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a5e6:	d012      	beq.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800a5e8:	e04c      	b.n	800a684 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a5ea:	bf00      	nop
 800a5ec:	46020c00 	.word	0x46020c00
 800a5f0:	0007a120 	.word	0x0007a120
 800a5f4:	00f42400 	.word	0x00f42400
 800a5f8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a600:	4618      	mov	r0, r3
 800a602:	f7ff fa8b 	bl	8009b1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a608:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a60a:	f001 ba10 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a60e:	f107 0318 	add.w	r3, r7, #24
 800a612:	4618      	mov	r0, r3
 800a614:	f7ff fbdc 	bl	8009dd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a61c:	f001 ba07 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a620:	4ba7      	ldr	r3, [pc, #668]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a62c:	d103      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800a62e:	4ba5      	ldr	r3, [pc, #660]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a630:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a632:	f001 b9fc 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a636:	2300      	movs	r3, #0
 800a638:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a63a:	f001 b9f8 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a63e:	4ba0      	ldr	r3, [pc, #640]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f003 0320 	and.w	r3, r3, #32
 800a646:	2b20      	cmp	r3, #32
 800a648:	d118      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a64a:	4b9d      	ldr	r3, [pc, #628]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a652:	2b00      	cmp	r3, #0
 800a654:	d005      	beq.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a656:	4b9a      	ldr	r3, [pc, #616]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	0e1b      	lsrs	r3, r3, #24
 800a65c:	f003 030f 	and.w	r3, r3, #15
 800a660:	e006      	b.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a662:	4b97      	ldr	r3, [pc, #604]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a668:	041b      	lsls	r3, r3, #16
 800a66a:	0e1b      	lsrs	r3, r3, #24
 800a66c:	f003 030f 	and.w	r3, r3, #15
 800a670:	4a95      	ldr	r2, [pc, #596]	; (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a676:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a678:	f001 b9d9 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a67c:	2300      	movs	r3, #0
 800a67e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a680:	f001 b9d5 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800a684:	2300      	movs	r3, #0
 800a686:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a688:	f001 b9d1 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a68c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a690:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800a694:	430b      	orrs	r3, r1
 800a696:	d17f      	bne.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a698:	4b89      	ldr	r3, [pc, #548]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a69a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a69e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6a2:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800a6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d165      	bne.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a6aa:	4b85      	ldr	r3, [pc, #532]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a6ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6b0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a6b4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a6bc:	d034      	beq.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800a6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a6c4:	d853      	bhi.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6cc:	d00b      	beq.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6d4:	d84b      	bhi.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800a6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d016      	beq.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a6e2:	d009      	beq.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a6e4:	e043      	b.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7ff fa16 	bl	8009b1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a6f4:	f001 b99b 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6f8:	f107 0318 	add.w	r3, r7, #24
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7ff fb67 	bl	8009dd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a706:	f001 b992 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a70a:	4b6d      	ldr	r3, [pc, #436]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a716:	d103      	bne.n	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800a718:	4b6a      	ldr	r3, [pc, #424]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a71a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a71c:	f001 b987 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800a720:	2300      	movs	r3, #0
 800a722:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a724:	f001 b983 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a728:	4b65      	ldr	r3, [pc, #404]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 0320 	and.w	r3, r3, #32
 800a730:	2b20      	cmp	r3, #32
 800a732:	d118      	bne.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a734:	4b62      	ldr	r3, [pc, #392]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d005      	beq.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800a740:	4b5f      	ldr	r3, [pc, #380]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	0e1b      	lsrs	r3, r3, #24
 800a746:	f003 030f 	and.w	r3, r3, #15
 800a74a:	e006      	b.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a74c:	4b5c      	ldr	r3, [pc, #368]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a74e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a752:	041b      	lsls	r3, r3, #16
 800a754:	0e1b      	lsrs	r3, r3, #24
 800a756:	f003 030f 	and.w	r3, r3, #15
 800a75a:	4a5b      	ldr	r2, [pc, #364]	; (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a75c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a760:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a762:	f001 b964 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800a766:	2300      	movs	r3, #0
 800a768:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a76a:	f001 b960 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800a76e:	2300      	movs	r3, #0
 800a770:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a772:	f001 b95c 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800a776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a77c:	d108      	bne.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a77e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a782:	4618      	mov	r0, r3
 800a784:	f7ff f9ca 	bl	8009b1c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	637b      	str	r3, [r7, #52]	; 0x34
 800a78c:	f001 b94f 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800a790:	2300      	movs	r3, #0
 800a792:	637b      	str	r3, [r7, #52]	; 0x34
 800a794:	f001 b94b 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800a798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a79c:	1e51      	subs	r1, r2, #1
 800a79e:	430b      	orrs	r3, r1
 800a7a0:	d136      	bne.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a7a2:	4b47      	ldr	r3, [pc, #284]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a7a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7a8:	f003 0303 	and.w	r3, r3, #3
 800a7ac:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d104      	bne.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800a7b4:	f7fe f968 	bl	8008a88 <HAL_RCC_GetPCLK2Freq>
 800a7b8:	6378      	str	r0, [r7, #52]	; 0x34
 800a7ba:	f001 b938 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800a7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d104      	bne.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a7c4:	f7fe f830 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800a7c8:	6378      	str	r0, [r7, #52]	; 0x34
 800a7ca:	f001 b930 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800a7ce:	4b3c      	ldr	r3, [pc, #240]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7da:	d106      	bne.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800a7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	d103      	bne.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800a7e2:	4b3a      	ldr	r3, [pc, #232]	; (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a7e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a7e6:	f001 b922 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800a7ea:	4b35      	ldr	r3, [pc, #212]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a7ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a7f0:	f003 0302 	and.w	r3, r3, #2
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d107      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fa:	2b03      	cmp	r3, #3
 800a7fc:	d104      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800a7fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a802:	637b      	str	r3, [r7, #52]	; 0x34
 800a804:	f001 b913 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800a808:	2300      	movs	r3, #0
 800a80a:	637b      	str	r3, [r7, #52]	; 0x34
 800a80c:	f001 b90f 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800a810:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a814:	1e91      	subs	r1, r2, #2
 800a816:	430b      	orrs	r3, r1
 800a818:	d136      	bne.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a81a:	4b29      	ldr	r3, [pc, #164]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a81c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a820:	f003 030c 	and.w	r3, r3, #12
 800a824:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800a826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d104      	bne.n	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a82c:	f7fe f918 	bl	8008a60 <HAL_RCC_GetPCLK1Freq>
 800a830:	6378      	str	r0, [r7, #52]	; 0x34
 800a832:	f001 b8fc 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	2b04      	cmp	r3, #4
 800a83a:	d104      	bne.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a83c:	f7fd fff4 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800a840:	6378      	str	r0, [r7, #52]	; 0x34
 800a842:	f001 b8f4 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800a846:	4b1e      	ldr	r3, [pc, #120]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a84e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a852:	d106      	bne.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a856:	2b08      	cmp	r3, #8
 800a858:	d103      	bne.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800a85a:	4b1c      	ldr	r3, [pc, #112]	; (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a85c:	637b      	str	r3, [r7, #52]	; 0x34
 800a85e:	f001 b8e6 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800a862:	4b17      	ldr	r3, [pc, #92]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a868:	f003 0302 	and.w	r3, r3, #2
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d107      	bne.n	800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800a870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a872:	2b0c      	cmp	r3, #12
 800a874:	d104      	bne.n	800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800a876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a87a:	637b      	str	r3, [r7, #52]	; 0x34
 800a87c:	f001 b8d7 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800a880:	2300      	movs	r3, #0
 800a882:	637b      	str	r3, [r7, #52]	; 0x34
 800a884:	f001 b8d3 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800a888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a88c:	1f11      	subs	r1, r2, #4
 800a88e:	430b      	orrs	r3, r1
 800a890:	d13f      	bne.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a892:	4b0b      	ldr	r3, [pc, #44]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a898:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a89c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800a89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d104      	bne.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a8a4:	f7fe f8dc 	bl	8008a60 <HAL_RCC_GetPCLK1Freq>
 800a8a8:	6378      	str	r0, [r7, #52]	; 0x34
 800a8aa:	f001 b8c0 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800a8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b0:	2b10      	cmp	r3, #16
 800a8b2:	d10d      	bne.n	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a8b4:	f7fd ffb8 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800a8b8:	6378      	str	r0, [r7, #52]	; 0x34
 800a8ba:	f001 b8b8 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a8be:	bf00      	nop
 800a8c0:	46020c00 	.word	0x46020c00
 800a8c4:	02dc6c00 	.word	0x02dc6c00
 800a8c8:	0800d874 	.word	0x0800d874
 800a8cc:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800a8d0:	4ba8      	ldr	r3, [pc, #672]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8dc:	d106      	bne.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800a8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e0:	2b20      	cmp	r3, #32
 800a8e2:	d103      	bne.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800a8e4:	4ba4      	ldr	r3, [pc, #656]	; (800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a8e6:	637b      	str	r3, [r7, #52]	; 0x34
 800a8e8:	f001 b8a1 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800a8ec:	4ba1      	ldr	r3, [pc, #644]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a8ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a8f2:	f003 0302 	and.w	r3, r3, #2
 800a8f6:	2b02      	cmp	r3, #2
 800a8f8:	d107      	bne.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fc:	2b30      	cmp	r3, #48	; 0x30
 800a8fe:	d104      	bne.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800a900:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a904:	637b      	str	r3, [r7, #52]	; 0x34
 800a906:	f001 b892 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800a90a:	2300      	movs	r3, #0
 800a90c:	637b      	str	r3, [r7, #52]	; 0x34
 800a90e:	f001 b88e 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800a912:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a916:	f1a2 0108 	sub.w	r1, r2, #8
 800a91a:	430b      	orrs	r3, r1
 800a91c:	d136      	bne.n	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a91e:	4b95      	ldr	r3, [pc, #596]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a924:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a928:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800a92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d104      	bne.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a930:	f7fe f896 	bl	8008a60 <HAL_RCC_GetPCLK1Freq>
 800a934:	6378      	str	r0, [r7, #52]	; 0x34
 800a936:	f001 b87a 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800a93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93c:	2b40      	cmp	r3, #64	; 0x40
 800a93e:	d104      	bne.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a940:	f7fd ff72 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800a944:	6378      	str	r0, [r7, #52]	; 0x34
 800a946:	f001 b872 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800a94a:	4b8a      	ldr	r3, [pc, #552]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a956:	d106      	bne.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800a958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95a:	2b80      	cmp	r3, #128	; 0x80
 800a95c:	d103      	bne.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800a95e:	4b86      	ldr	r3, [pc, #536]	; (800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a960:	637b      	str	r3, [r7, #52]	; 0x34
 800a962:	f001 b864 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800a966:	4b83      	ldr	r3, [pc, #524]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a96c:	f003 0302 	and.w	r3, r3, #2
 800a970:	2b02      	cmp	r3, #2
 800a972:	d107      	bne.n	800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a976:	2bc0      	cmp	r3, #192	; 0xc0
 800a978:	d104      	bne.n	800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800a97a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a97e:	637b      	str	r3, [r7, #52]	; 0x34
 800a980:	f001 b855 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800a984:	2300      	movs	r3, #0
 800a986:	637b      	str	r3, [r7, #52]	; 0x34
 800a988:	f001 b851 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800a98c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a990:	f1a2 0110 	sub.w	r1, r2, #16
 800a994:	430b      	orrs	r3, r1
 800a996:	d139      	bne.n	800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a998:	4b76      	ldr	r3, [pc, #472]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a99a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a99e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9a2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d104      	bne.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a9aa:	f7fe f859 	bl	8008a60 <HAL_RCC_GetPCLK1Freq>
 800a9ae:	6378      	str	r0, [r7, #52]	; 0x34
 800a9b0:	f001 b83d 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ba:	d104      	bne.n	800a9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a9bc:	f7fd ff34 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800a9c0:	6378      	str	r0, [r7, #52]	; 0x34
 800a9c2:	f001 b834 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a9c6:	4b6b      	ldr	r3, [pc, #428]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9d2:	d107      	bne.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800a9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9da:	d103      	bne.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800a9dc:	4b66      	ldr	r3, [pc, #408]	; (800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a9de:	637b      	str	r3, [r7, #52]	; 0x34
 800a9e0:	f001 b825 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a9e4:	4b63      	ldr	r3, [pc, #396]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a9e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a9ea:	f003 0302 	and.w	r3, r3, #2
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d108      	bne.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9f8:	d104      	bne.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800a9fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9fe:	637b      	str	r3, [r7, #52]	; 0x34
 800aa00:	f001 b815 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800aa04:	2300      	movs	r3, #0
 800aa06:	637b      	str	r3, [r7, #52]	; 0x34
 800aa08:	f001 b811 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800aa0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa10:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800aa14:	430b      	orrs	r3, r1
 800aa16:	d139      	bne.n	800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800aa18:	4b56      	ldr	r3, [pc, #344]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800aa1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aa22:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800aa24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d104      	bne.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800aa2a:	f7fe f819 	bl	8008a60 <HAL_RCC_GetPCLK1Freq>
 800aa2e:	6378      	str	r0, [r7, #52]	; 0x34
 800aa30:	f000 bffd 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800aa34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa3a:	d104      	bne.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aa3c:	f7fd fef4 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800aa40:	6378      	str	r0, [r7, #52]	; 0x34
 800aa42:	f000 bff4 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800aa46:	4b4b      	ldr	r3, [pc, #300]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa52:	d107      	bne.n	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800aa54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa5a:	d103      	bne.n	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800aa5c:	4b46      	ldr	r3, [pc, #280]	; (800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800aa5e:	637b      	str	r3, [r7, #52]	; 0x34
 800aa60:	f000 bfe5 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800aa64:	4b43      	ldr	r3, [pc, #268]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aa6a:	f003 0302 	and.w	r3, r3, #2
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d108      	bne.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa78:	d104      	bne.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800aa7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa7e:	637b      	str	r3, [r7, #52]	; 0x34
 800aa80:	f000 bfd5 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800aa84:	2300      	movs	r3, #0
 800aa86:	637b      	str	r3, [r7, #52]	; 0x34
 800aa88:	f000 bfd1 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800aa8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa90:	f1a2 0120 	sub.w	r1, r2, #32
 800aa94:	430b      	orrs	r3, r1
 800aa96:	d158      	bne.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800aa98:	4b36      	ldr	r3, [pc, #216]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aa9e:	f003 0307 	and.w	r3, r3, #7
 800aaa2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800aaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d104      	bne.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800aaaa:	f7fe f801 	bl	8008ab0 <HAL_RCC_GetPCLK3Freq>
 800aaae:	6378      	str	r0, [r7, #52]	; 0x34
 800aab0:	f000 bfbd 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800aab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d104      	bne.n	800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aaba:	f7fd feb5 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800aabe:	6378      	str	r0, [r7, #52]	; 0x34
 800aac0:	f000 bfb5 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800aac4:	4b2b      	ldr	r3, [pc, #172]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aacc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aad0:	d106      	bne.n	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	d103      	bne.n	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800aad8:	4b27      	ldr	r3, [pc, #156]	; (800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800aada:	637b      	str	r3, [r7, #52]	; 0x34
 800aadc:	f000 bfa7 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800aae0:	4b24      	ldr	r3, [pc, #144]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aae2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aae6:	f003 0302 	and.w	r3, r3, #2
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d107      	bne.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800aaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf0:	2b03      	cmp	r3, #3
 800aaf2:	d104      	bne.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800aaf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaf8:	637b      	str	r3, [r7, #52]	; 0x34
 800aafa:	f000 bf98 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800aafe:	4b1d      	ldr	r3, [pc, #116]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 0320 	and.w	r3, r3, #32
 800ab06:	2b20      	cmp	r3, #32
 800ab08:	d11b      	bne.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0c:	2b04      	cmp	r3, #4
 800ab0e:	d118      	bne.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ab10:	4b18      	ldr	r3, [pc, #96]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d005      	beq.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800ab1c:	4b15      	ldr	r3, [pc, #84]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	0e1b      	lsrs	r3, r3, #24
 800ab22:	f003 030f 	and.w	r3, r3, #15
 800ab26:	e006      	b.n	800ab36 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800ab28:	4b12      	ldr	r3, [pc, #72]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ab2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ab2e:	041b      	lsls	r3, r3, #16
 800ab30:	0e1b      	lsrs	r3, r3, #24
 800ab32:	f003 030f 	and.w	r3, r3, #15
 800ab36:	4a11      	ldr	r2, [pc, #68]	; (800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ab38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab3c:	637b      	str	r3, [r7, #52]	; 0x34
 800ab3e:	f000 bf76 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800ab42:	2300      	movs	r3, #0
 800ab44:	637b      	str	r3, [r7, #52]	; 0x34
 800ab46:	f000 bf72 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800ab4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab4e:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ab52:	430b      	orrs	r3, r1
 800ab54:	d172      	bne.n	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800ab56:	4b07      	ldr	r3, [pc, #28]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ab58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ab5c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ab60:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800ab62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab68:	d10a      	bne.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ab6a:	f7fd fe5d 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800ab6e:	6378      	str	r0, [r7, #52]	; 0x34
 800ab70:	f000 bf5d 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ab74:	46020c00 	.word	0x46020c00
 800ab78:	00f42400 	.word	0x00f42400
 800ab7c:	0800d874 	.word	0x0800d874
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800ab80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab86:	d108      	bne.n	800ab9a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab88:	f107 0318 	add.w	r3, r7, #24
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7ff f91f 	bl	8009dd0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800ab92:	6a3b      	ldr	r3, [r7, #32]
 800ab94:	637b      	str	r3, [r7, #52]	; 0x34
 800ab96:	f000 bf4a 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d104      	bne.n	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800aba0:	f7fd ff44 	bl	8008a2c <HAL_RCC_GetHCLKFreq>
 800aba4:	6378      	str	r0, [r7, #52]	; 0x34
 800aba6:	f000 bf42 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800abaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abac:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800abb0:	d122      	bne.n	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800abb2:	4bb0      	ldr	r3, [pc, #704]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f003 0320 	and.w	r3, r3, #32
 800abba:	2b20      	cmp	r3, #32
 800abbc:	d118      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800abbe:	4bad      	ldr	r3, [pc, #692]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d005      	beq.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800abca:	4baa      	ldr	r3, [pc, #680]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	0e1b      	lsrs	r3, r3, #24
 800abd0:	f003 030f 	and.w	r3, r3, #15
 800abd4:	e006      	b.n	800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800abd6:	4ba7      	ldr	r3, [pc, #668]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800abd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800abdc:	041b      	lsls	r3, r3, #16
 800abde:	0e1b      	lsrs	r3, r3, #24
 800abe0:	f003 030f 	and.w	r3, r3, #15
 800abe4:	4aa4      	ldr	r2, [pc, #656]	; (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800abe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abea:	637b      	str	r3, [r7, #52]	; 0x34
 800abec:	f000 bf1f 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800abf0:	2300      	movs	r3, #0
 800abf2:	637b      	str	r3, [r7, #52]	; 0x34
 800abf4:	f000 bf1b 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800abf8:	4b9e      	ldr	r3, [pc, #632]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac04:	d107      	bne.n	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800ac06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac0c:	d103      	bne.n	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800ac0e:	4b9b      	ldr	r3, [pc, #620]	; (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ac10:	637b      	str	r3, [r7, #52]	; 0x34
 800ac12:	f000 bf0c 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800ac16:	4b97      	ldr	r3, [pc, #604]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac22:	d107      	bne.n	800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800ac24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac2a:	d103      	bne.n	800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800ac2c:	4b93      	ldr	r3, [pc, #588]	; (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ac2e:	637b      	str	r3, [r7, #52]	; 0x34
 800ac30:	f000 befd 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800ac34:	2300      	movs	r3, #0
 800ac36:	637b      	str	r3, [r7, #52]	; 0x34
 800ac38:	f000 bef9 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800ac3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac40:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ac44:	430b      	orrs	r3, r1
 800ac46:	d158      	bne.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800ac48:	4b8a      	ldr	r3, [pc, #552]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ac4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ac4e:	f003 0307 	and.w	r3, r3, #7
 800ac52:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ac54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac56:	2b04      	cmp	r3, #4
 800ac58:	d84b      	bhi.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800ac5a:	a201      	add	r2, pc, #4	; (adr r2, 800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800ac5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac60:	0800ac99 	.word	0x0800ac99
 800ac64:	0800ac75 	.word	0x0800ac75
 800ac68:	0800ac87 	.word	0x0800ac87
 800ac6c:	0800aca3 	.word	0x0800aca3
 800ac70:	0800acad 	.word	0x0800acad
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7fe ff4f 	bl	8009b1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ac7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac82:	f000 bed4 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac86:	f107 030c 	add.w	r3, r7, #12
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7ff f9fa 	bl	800a084 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac94:	f000 becb 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800ac98:	f7fd fec8 	bl	8008a2c <HAL_RCC_GetHCLKFreq>
 800ac9c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ac9e:	f000 bec6 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800aca2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800aca6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aca8:	f000 bec1 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800acac:	4b71      	ldr	r3, [pc, #452]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f003 0320 	and.w	r3, r3, #32
 800acb4:	2b20      	cmp	r3, #32
 800acb6:	d118      	bne.n	800acea <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800acb8:	4b6e      	ldr	r3, [pc, #440]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d005      	beq.n	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800acc4:	4b6b      	ldr	r3, [pc, #428]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	0e1b      	lsrs	r3, r3, #24
 800acca:	f003 030f 	and.w	r3, r3, #15
 800acce:	e006      	b.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800acd0:	4b68      	ldr	r3, [pc, #416]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800acd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800acd6:	041b      	lsls	r3, r3, #16
 800acd8:	0e1b      	lsrs	r3, r3, #24
 800acda:	f003 030f 	and.w	r3, r3, #15
 800acde:	4a66      	ldr	r2, [pc, #408]	; (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ace0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ace4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ace6:	f000 bea2 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800acea:	2300      	movs	r3, #0
 800acec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800acee:	f000 be9e 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800acf2:	2300      	movs	r3, #0
 800acf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800acf6:	f000 be9a 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800acfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acfe:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800ad02:	430b      	orrs	r3, r1
 800ad04:	d167      	bne.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800ad06:	4b5b      	ldr	r3, [pc, #364]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ad0c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ad10:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ad12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad18:	d036      	beq.n	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800ad1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad20:	d855      	bhi.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ad22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad28:	d029      	beq.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800ad2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad30:	d84d      	bhi.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ad32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad38:	d013      	beq.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad40:	d845      	bhi.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ad42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d015      	beq.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800ad48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad4e:	d13e      	bne.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7fe fee1 	bl	8009b1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad5e:	f000 be66 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad62:	f107 030c 	add.w	r3, r7, #12
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7ff f98c 	bl	800a084 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad70:	f000 be5d 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800ad74:	f7fd fe5a 	bl	8008a2c <HAL_RCC_GetHCLKFreq>
 800ad78:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ad7a:	f000 be58 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ad7e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ad82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad84:	f000 be53 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ad88:	4b3a      	ldr	r3, [pc, #232]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f003 0320 	and.w	r3, r3, #32
 800ad90:	2b20      	cmp	r3, #32
 800ad92:	d118      	bne.n	800adc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ad94:	4b37      	ldr	r3, [pc, #220]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d005      	beq.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800ada0:	4b34      	ldr	r3, [pc, #208]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	0e1b      	lsrs	r3, r3, #24
 800ada6:	f003 030f 	and.w	r3, r3, #15
 800adaa:	e006      	b.n	800adba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800adac:	4b31      	ldr	r3, [pc, #196]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800adae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800adb2:	041b      	lsls	r3, r3, #16
 800adb4:	0e1b      	lsrs	r3, r3, #24
 800adb6:	f003 030f 	and.w	r3, r3, #15
 800adba:	4a2f      	ldr	r2, [pc, #188]	; (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800adbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adc0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800adc2:	f000 be34 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800adc6:	2300      	movs	r3, #0
 800adc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800adca:	f000 be30 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800adce:	2300      	movs	r3, #0
 800add0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800add2:	f000 be2c 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800add6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adda:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800adde:	430b      	orrs	r3, r1
 800ade0:	d152      	bne.n	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800ade2:	4b24      	ldr	r3, [pc, #144]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ade4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ade8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800adec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800adee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d104      	bne.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800adf4:	f7fd fe34 	bl	8008a60 <HAL_RCC_GetPCLK1Freq>
 800adf8:	6378      	str	r0, [r7, #52]	; 0x34
 800adfa:	f000 be18 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800adfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae04:	d104      	bne.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ae06:	f7fd fd0f 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800ae0a:	6378      	str	r0, [r7, #52]	; 0x34
 800ae0c:	f000 be0f 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800ae10:	4b18      	ldr	r3, [pc, #96]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae1c:	d107      	bne.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae24:	d103      	bne.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800ae26:	4b15      	ldr	r3, [pc, #84]	; (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ae28:	637b      	str	r3, [r7, #52]	; 0x34
 800ae2a:	f000 be00 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800ae2e:	4b11      	ldr	r3, [pc, #68]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f003 0320 	and.w	r3, r3, #32
 800ae36:	2b20      	cmp	r3, #32
 800ae38:	d122      	bne.n	800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae40:	d11e      	bne.n	800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ae42:	4b0c      	ldr	r3, [pc, #48]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d005      	beq.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800ae4e:	4b09      	ldr	r3, [pc, #36]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	0e1b      	lsrs	r3, r3, #24
 800ae54:	f003 030f 	and.w	r3, r3, #15
 800ae58:	e006      	b.n	800ae68 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800ae5a:	4b06      	ldr	r3, [pc, #24]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ae5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ae60:	041b      	lsls	r3, r3, #16
 800ae62:	0e1b      	lsrs	r3, r3, #24
 800ae64:	f003 030f 	and.w	r3, r3, #15
 800ae68:	4a03      	ldr	r2, [pc, #12]	; (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ae6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ae70:	f000 bddd 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ae74:	46020c00 	.word	0x46020c00
 800ae78:	0800d874 	.word	0x0800d874
 800ae7c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800ae80:	2300      	movs	r3, #0
 800ae82:	637b      	str	r3, [r7, #52]	; 0x34
 800ae84:	f000 bdd3 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800ae88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae8c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800ae90:	430b      	orrs	r3, r1
 800ae92:	d14c      	bne.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ae94:	4ba8      	ldr	r3, [pc, #672]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ae96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ae9e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800aea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d104      	bne.n	800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800aea6:	f7fd fddb 	bl	8008a60 <HAL_RCC_GetPCLK1Freq>
 800aeaa:	6378      	str	r0, [r7, #52]	; 0x34
 800aeac:	f000 bdbf 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeb6:	d104      	bne.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aeb8:	f7fd fcb6 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800aebc:	6378      	str	r0, [r7, #52]	; 0x34
 800aebe:	f000 bdb6 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800aec2:	4b9d      	ldr	r3, [pc, #628]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aeca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aece:	d107      	bne.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800aed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aed6:	d103      	bne.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800aed8:	4b98      	ldr	r3, [pc, #608]	; (800b13c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800aeda:	637b      	str	r3, [r7, #52]	; 0x34
 800aedc:	f000 bda7 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800aee0:	4b95      	ldr	r3, [pc, #596]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f003 0320 	and.w	r3, r3, #32
 800aee8:	2b20      	cmp	r3, #32
 800aeea:	d11c      	bne.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800aeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aef2:	d118      	bne.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aef4:	4b90      	ldr	r3, [pc, #576]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d005      	beq.n	800af0c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800af00:	4b8d      	ldr	r3, [pc, #564]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	0e1b      	lsrs	r3, r3, #24
 800af06:	f003 030f 	and.w	r3, r3, #15
 800af0a:	e006      	b.n	800af1a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800af0c:	4b8a      	ldr	r3, [pc, #552]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800af0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800af12:	041b      	lsls	r3, r3, #16
 800af14:	0e1b      	lsrs	r3, r3, #24
 800af16:	f003 030f 	and.w	r3, r3, #15
 800af1a:	4a89      	ldr	r2, [pc, #548]	; (800b140 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800af1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af20:	637b      	str	r3, [r7, #52]	; 0x34
 800af22:	f000 bd84 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800af26:	2300      	movs	r3, #0
 800af28:	637b      	str	r3, [r7, #52]	; 0x34
 800af2a:	f000 bd80 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800af2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af32:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800af36:	430b      	orrs	r3, r1
 800af38:	d158      	bne.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800af3a:	4b7f      	ldr	r3, [pc, #508]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800af3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800af40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800af44:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800af46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af48:	2bc0      	cmp	r3, #192	; 0xc0
 800af4a:	d028      	beq.n	800af9e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800af4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4e:	2bc0      	cmp	r3, #192	; 0xc0
 800af50:	d848      	bhi.n	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800af52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af54:	2b80      	cmp	r3, #128	; 0x80
 800af56:	d00e      	beq.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800af58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5a:	2b80      	cmp	r3, #128	; 0x80
 800af5c:	d842      	bhi.n	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800af5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af60:	2b00      	cmp	r3, #0
 800af62:	d003      	beq.n	800af6c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800af64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af66:	2b40      	cmp	r3, #64	; 0x40
 800af68:	d014      	beq.n	800af94 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800af6a:	e03b      	b.n	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800af6c:	f7fd fda0 	bl	8008ab0 <HAL_RCC_GetPCLK3Freq>
 800af70:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800af72:	f000 bd5c 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af76:	4b70      	ldr	r3, [pc, #448]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af82:	d103      	bne.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800af84:	4b6d      	ldr	r3, [pc, #436]	; (800b13c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800af86:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800af88:	f000 bd51 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800af8c:	2300      	movs	r3, #0
 800af8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af90:	f000 bd4d 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800af94:	f7fd fc48 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800af98:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800af9a:	f000 bd48 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800af9e:	4b66      	ldr	r3, [pc, #408]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f003 0320 	and.w	r3, r3, #32
 800afa6:	2b20      	cmp	r3, #32
 800afa8:	d118      	bne.n	800afdc <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800afaa:	4b63      	ldr	r3, [pc, #396]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d005      	beq.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800afb6:	4b60      	ldr	r3, [pc, #384]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	0e1b      	lsrs	r3, r3, #24
 800afbc:	f003 030f 	and.w	r3, r3, #15
 800afc0:	e006      	b.n	800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800afc2:	4b5d      	ldr	r3, [pc, #372]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800afc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800afc8:	041b      	lsls	r3, r3, #16
 800afca:	0e1b      	lsrs	r3, r3, #24
 800afcc:	f003 030f 	and.w	r3, r3, #15
 800afd0:	4a5b      	ldr	r2, [pc, #364]	; (800b140 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800afd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afd6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800afd8:	f000 bd29 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800afdc:	2300      	movs	r3, #0
 800afde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afe0:	f000 bd25 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800afe4:	2300      	movs	r3, #0
 800afe6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afe8:	f000 bd21 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800afec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aff0:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800aff4:	430b      	orrs	r3, r1
 800aff6:	d14c      	bne.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800aff8:	4b4f      	ldr	r3, [pc, #316]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800affa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800affe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b002:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800b004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b006:	2b00      	cmp	r3, #0
 800b008:	d104      	bne.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b00a:	f7fd fd29 	bl	8008a60 <HAL_RCC_GetPCLK1Freq>
 800b00e:	6378      	str	r0, [r7, #52]	; 0x34
 800b010:	f000 bd0d 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800b014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b016:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b01a:	d104      	bne.n	800b026 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b01c:	f7fd fc04 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800b020:	6378      	str	r0, [r7, #52]	; 0x34
 800b022:	f000 bd04 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800b026:	4b44      	ldr	r3, [pc, #272]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b02e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b032:	d107      	bne.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800b034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b03a:	d103      	bne.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800b03c:	4b3f      	ldr	r3, [pc, #252]	; (800b13c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b03e:	637b      	str	r3, [r7, #52]	; 0x34
 800b040:	f000 bcf5 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800b044:	4b3c      	ldr	r3, [pc, #240]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 0320 	and.w	r3, r3, #32
 800b04c:	2b20      	cmp	r3, #32
 800b04e:	d11c      	bne.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800b050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b052:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b056:	d118      	bne.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b058:	4b37      	ldr	r3, [pc, #220]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b060:	2b00      	cmp	r3, #0
 800b062:	d005      	beq.n	800b070 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800b064:	4b34      	ldr	r3, [pc, #208]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	0e1b      	lsrs	r3, r3, #24
 800b06a:	f003 030f 	and.w	r3, r3, #15
 800b06e:	e006      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800b070:	4b31      	ldr	r3, [pc, #196]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b072:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b076:	041b      	lsls	r3, r3, #16
 800b078:	0e1b      	lsrs	r3, r3, #24
 800b07a:	f003 030f 	and.w	r3, r3, #15
 800b07e:	4a30      	ldr	r2, [pc, #192]	; (800b140 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b084:	637b      	str	r3, [r7, #52]	; 0x34
 800b086:	f000 bcd2 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800b08a:	2300      	movs	r3, #0
 800b08c:	637b      	str	r3, [r7, #52]	; 0x34
 800b08e:	f000 bcce 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800b092:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b096:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800b09a:	430b      	orrs	r3, r1
 800b09c:	d152      	bne.n	800b144 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800b09e:	4b26      	ldr	r3, [pc, #152]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b0a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b0a4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800b0a8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800b0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d104      	bne.n	800b0ba <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b0b0:	f7fd fcd6 	bl	8008a60 <HAL_RCC_GetPCLK1Freq>
 800b0b4:	6378      	str	r0, [r7, #52]	; 0x34
 800b0b6:	f000 bcba 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b0c0:	d104      	bne.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b0c2:	f7fd fbb1 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800b0c6:	6378      	str	r0, [r7, #52]	; 0x34
 800b0c8:	f000 bcb1 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800b0cc:	4b1a      	ldr	r3, [pc, #104]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0d8:	d107      	bne.n	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0e0:	d103      	bne.n	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800b0e2:	4b16      	ldr	r3, [pc, #88]	; (800b13c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b0e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b0e6:	f000 bca2 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800b0ea:	4b13      	ldr	r3, [pc, #76]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f003 0320 	and.w	r3, r3, #32
 800b0f2:	2b20      	cmp	r3, #32
 800b0f4:	d11c      	bne.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b0fc:	d118      	bne.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b0fe:	4b0e      	ldr	r3, [pc, #56]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b106:	2b00      	cmp	r3, #0
 800b108:	d005      	beq.n	800b116 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800b10a:	4b0b      	ldr	r3, [pc, #44]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	0e1b      	lsrs	r3, r3, #24
 800b110:	f003 030f 	and.w	r3, r3, #15
 800b114:	e006      	b.n	800b124 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800b116:	4b08      	ldr	r3, [pc, #32]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b11c:	041b      	lsls	r3, r3, #16
 800b11e:	0e1b      	lsrs	r3, r3, #24
 800b120:	f003 030f 	and.w	r3, r3, #15
 800b124:	4a06      	ldr	r2, [pc, #24]	; (800b140 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b12a:	637b      	str	r3, [r7, #52]	; 0x34
 800b12c:	f000 bc7f 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800b130:	2300      	movs	r3, #0
 800b132:	637b      	str	r3, [r7, #52]	; 0x34
 800b134:	f000 bc7b 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b138:	46020c00 	.word	0x46020c00
 800b13c:	00f42400 	.word	0x00f42400
 800b140:	0800d874 	.word	0x0800d874
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800b144:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b148:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800b14c:	430b      	orrs	r3, r1
 800b14e:	d14c      	bne.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800b150:	4ba6      	ldr	r3, [pc, #664]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b152:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b156:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b15a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d104      	bne.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b162:	f7fd fc7d 	bl	8008a60 <HAL_RCC_GetPCLK1Freq>
 800b166:	6378      	str	r0, [r7, #52]	; 0x34
 800b168:	f000 bc61 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800b16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b172:	d104      	bne.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b174:	f7fd fb58 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800b178:	6378      	str	r0, [r7, #52]	; 0x34
 800b17a:	f000 bc58 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800b17e:	4b9b      	ldr	r3, [pc, #620]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b18a:	d107      	bne.n	800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800b18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b192:	d103      	bne.n	800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800b194:	4b96      	ldr	r3, [pc, #600]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b196:	637b      	str	r3, [r7, #52]	; 0x34
 800b198:	f000 bc49 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800b19c:	4b93      	ldr	r3, [pc, #588]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f003 0320 	and.w	r3, r3, #32
 800b1a4:	2b20      	cmp	r3, #32
 800b1a6:	d11c      	bne.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800b1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b1ae:	d118      	bne.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b1b0:	4b8e      	ldr	r3, [pc, #568]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d005      	beq.n	800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800b1bc:	4b8b      	ldr	r3, [pc, #556]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	0e1b      	lsrs	r3, r3, #24
 800b1c2:	f003 030f 	and.w	r3, r3, #15
 800b1c6:	e006      	b.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800b1c8:	4b88      	ldr	r3, [pc, #544]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b1ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b1ce:	041b      	lsls	r3, r3, #16
 800b1d0:	0e1b      	lsrs	r3, r3, #24
 800b1d2:	f003 030f 	and.w	r3, r3, #15
 800b1d6:	4a87      	ldr	r2, [pc, #540]	; (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1dc:	637b      	str	r3, [r7, #52]	; 0x34
 800b1de:	f000 bc26 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b1e6:	f000 bc22 	b.w	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800b1ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1ee:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b1f2:	430b      	orrs	r3, r1
 800b1f4:	d164      	bne.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800b1f6:	4b7d      	ldr	r3, [pc, #500]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b1f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b1fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b200:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800b202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b204:	2b00      	cmp	r3, #0
 800b206:	d120      	bne.n	800b24a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b208:	4b78      	ldr	r3, [pc, #480]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f003 0320 	and.w	r3, r3, #32
 800b210:	2b20      	cmp	r3, #32
 800b212:	d117      	bne.n	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b214:	4b75      	ldr	r3, [pc, #468]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d005      	beq.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800b220:	4b72      	ldr	r3, [pc, #456]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	0e1b      	lsrs	r3, r3, #24
 800b226:	f003 030f 	and.w	r3, r3, #15
 800b22a:	e006      	b.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800b22c:	4b6f      	ldr	r3, [pc, #444]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b22e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b232:	041b      	lsls	r3, r3, #16
 800b234:	0e1b      	lsrs	r3, r3, #24
 800b236:	f003 030f 	and.w	r3, r3, #15
 800b23a:	4a6e      	ldr	r2, [pc, #440]	; (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b23c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b240:	637b      	str	r3, [r7, #52]	; 0x34
 800b242:	e3f4      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b244:	2300      	movs	r3, #0
 800b246:	637b      	str	r3, [r7, #52]	; 0x34
 800b248:	e3f1      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800b24a:	4b68      	ldr	r3, [pc, #416]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b24c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b258:	d112      	bne.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800b25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b260:	d10e      	bne.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b262:	4b62      	ldr	r3, [pc, #392]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b264:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b26c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b270:	d102      	bne.n	800b278 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800b272:	23fa      	movs	r3, #250	; 0xfa
 800b274:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b276:	e3da      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b278:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b27c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b27e:	e3d6      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800b280:	4b5a      	ldr	r3, [pc, #360]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b28c:	d106      	bne.n	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800b28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b294:	d102      	bne.n	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800b296:	4b56      	ldr	r3, [pc, #344]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b298:	637b      	str	r3, [r7, #52]	; 0x34
 800b29a:	e3c8      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800b29c:	4b53      	ldr	r3, [pc, #332]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b29e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b2a2:	f003 0302 	and.w	r3, r3, #2
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d107      	bne.n	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800b2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2b0:	d103      	bne.n	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800b2b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2b6:	637b      	str	r3, [r7, #52]	; 0x34
 800b2b8:	e3b9      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	637b      	str	r3, [r7, #52]	; 0x34
 800b2be:	e3b6      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800b2c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2c4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800b2c8:	430b      	orrs	r3, r1
 800b2ca:	d164      	bne.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b2cc:	4b47      	ldr	r3, [pc, #284]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b2ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b2d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b2d6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800b2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d120      	bne.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b2de:	4b43      	ldr	r3, [pc, #268]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f003 0320 	and.w	r3, r3, #32
 800b2e6:	2b20      	cmp	r3, #32
 800b2e8:	d117      	bne.n	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b2ea:	4b40      	ldr	r3, [pc, #256]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d005      	beq.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800b2f6:	4b3d      	ldr	r3, [pc, #244]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	0e1b      	lsrs	r3, r3, #24
 800b2fc:	f003 030f 	and.w	r3, r3, #15
 800b300:	e006      	b.n	800b310 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800b302:	4b3a      	ldr	r3, [pc, #232]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b304:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b308:	041b      	lsls	r3, r3, #16
 800b30a:	0e1b      	lsrs	r3, r3, #24
 800b30c:	f003 030f 	and.w	r3, r3, #15
 800b310:	4a38      	ldr	r2, [pc, #224]	; (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b316:	637b      	str	r3, [r7, #52]	; 0x34
 800b318:	e389      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b31a:	2300      	movs	r3, #0
 800b31c:	637b      	str	r3, [r7, #52]	; 0x34
 800b31e:	e386      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800b320:	4b32      	ldr	r3, [pc, #200]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b32a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b32e:	d112      	bne.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800b330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b336:	d10e      	bne.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b338:	4b2c      	ldr	r3, [pc, #176]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b33a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b33e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b346:	d102      	bne.n	800b34e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800b348:	23fa      	movs	r3, #250	; 0xfa
 800b34a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b34c:	e36f      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b34e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b352:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b354:	e36b      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800b356:	4b25      	ldr	r3, [pc, #148]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b35e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b362:	d106      	bne.n	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800b364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b36a:	d102      	bne.n	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800b36c:	4b20      	ldr	r3, [pc, #128]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b36e:	637b      	str	r3, [r7, #52]	; 0x34
 800b370:	e35d      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800b372:	4b1e      	ldr	r3, [pc, #120]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b378:	f003 0302 	and.w	r3, r3, #2
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d107      	bne.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800b380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b382:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b386:	d103      	bne.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800b388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b38c:	637b      	str	r3, [r7, #52]	; 0x34
 800b38e:	e34e      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800b390:	2300      	movs	r3, #0
 800b392:	637b      	str	r3, [r7, #52]	; 0x34
 800b394:	e34b      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800b396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b39a:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b39e:	430b      	orrs	r3, r1
 800b3a0:	d14e      	bne.n	800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b3a2:	4b12      	ldr	r3, [pc, #72]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b3a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800b3ac:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800b3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d103      	bne.n	800b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b3b4:	f7fd fb54 	bl	8008a60 <HAL_RCC_GetPCLK1Freq>
 800b3b8:	6378      	str	r0, [r7, #52]	; 0x34
 800b3ba:	e338      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800b3bc:	4b0b      	ldr	r3, [pc, #44]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b3be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b3c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3ca:	d119      	bne.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b3d2:	d115      	bne.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b3d4:	4b05      	ldr	r3, [pc, #20]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b3d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b3da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3e2:	d109      	bne.n	800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800b3e4:	23fa      	movs	r3, #250	; 0xfa
 800b3e6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b3e8:	e321      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b3ea:	bf00      	nop
 800b3ec:	46020c00 	.word	0x46020c00
 800b3f0:	00f42400 	.word	0x00f42400
 800b3f4:	0800d874 	.word	0x0800d874
      }
      else
      {
        frequency = LSI_VALUE;
 800b3f8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b3fc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b3fe:	e316      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800b400:	4ba8      	ldr	r3, [pc, #672]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b40c:	d106      	bne.n	800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800b40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b410:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b414:	d102      	bne.n	800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800b416:	4ba4      	ldr	r3, [pc, #656]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b418:	637b      	str	r3, [r7, #52]	; 0x34
 800b41a:	e308      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800b41c:	4ba1      	ldr	r3, [pc, #644]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b41e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b422:	f003 0302 	and.w	r3, r3, #2
 800b426:	2b02      	cmp	r3, #2
 800b428:	d107      	bne.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800b42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b430:	d103      	bne.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800b432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b436:	637b      	str	r3, [r7, #52]	; 0x34
 800b438:	e2f9      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800b43a:	2300      	movs	r3, #0
 800b43c:	637b      	str	r3, [r7, #52]	; 0x34
 800b43e:	e2f6      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800b440:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b444:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800b448:	430b      	orrs	r3, r1
 800b44a:	d12d      	bne.n	800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800b44c:	4b95      	ldr	r3, [pc, #596]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b44e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b452:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800b456:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800b458:	4b92      	ldr	r3, [pc, #584]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b460:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b464:	d105      	bne.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800b466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d102      	bne.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800b46c:	4b8e      	ldr	r3, [pc, #568]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b46e:	637b      	str	r3, [r7, #52]	; 0x34
 800b470:	e2dd      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800b472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b478:	d107      	bne.n	800b48a <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b47a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fe fb4c 	bl	8009b1c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800b484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b486:	637b      	str	r3, [r7, #52]	; 0x34
 800b488:	e2d1      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800b48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b490:	d107      	bne.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b492:	f107 0318 	add.w	r3, r7, #24
 800b496:	4618      	mov	r0, r3
 800b498:	f7fe fc9a 	bl	8009dd0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	637b      	str	r3, [r7, #52]	; 0x34
 800b4a0:	e2c5      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	637b      	str	r3, [r7, #52]	; 0x34
 800b4a6:	e2c2      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800b4a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4ac:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800b4b0:	430b      	orrs	r3, r1
 800b4b2:	d156      	bne.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b4b4:	4b7b      	ldr	r3, [pc, #492]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b4b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b4ba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b4be:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800b4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b4c6:	d028      	beq.n	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800b4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b4ce:	d845      	bhi.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4d6:	d013      	beq.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800b4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4de:	d83d      	bhi.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800b4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d004      	beq.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4ec:	d004      	beq.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800b4ee:	e035      	b.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800b4f0:	f7fd faca 	bl	8008a88 <HAL_RCC_GetPCLK2Freq>
 800b4f4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b4f6:	e29a      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b4f8:	f7fd f996 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800b4fc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b4fe:	e296      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b500:	4b68      	ldr	r3, [pc, #416]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b50c:	d102      	bne.n	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800b50e:	4b66      	ldr	r3, [pc, #408]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b510:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b512:	e28c      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b514:	2300      	movs	r3, #0
 800b516:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b518:	e289      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b51a:	4b62      	ldr	r3, [pc, #392]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 0320 	and.w	r3, r3, #32
 800b522:	2b20      	cmp	r3, #32
 800b524:	d117      	bne.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b526:	4b5f      	ldr	r3, [pc, #380]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d005      	beq.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800b532:	4b5c      	ldr	r3, [pc, #368]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	0e1b      	lsrs	r3, r3, #24
 800b538:	f003 030f 	and.w	r3, r3, #15
 800b53c:	e006      	b.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800b53e:	4b59      	ldr	r3, [pc, #356]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b540:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b544:	041b      	lsls	r3, r3, #16
 800b546:	0e1b      	lsrs	r3, r3, #24
 800b548:	f003 030f 	and.w	r3, r3, #15
 800b54c:	4a57      	ldr	r2, [pc, #348]	; (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800b54e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b552:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b554:	e26b      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b556:	2300      	movs	r3, #0
 800b558:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b55a:	e268      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b55c:	2300      	movs	r3, #0
 800b55e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b560:	e265      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800b562:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b566:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800b56a:	430b      	orrs	r3, r1
 800b56c:	d156      	bne.n	800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b56e:	4b4d      	ldr	r3, [pc, #308]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b578:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800b57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b580:	d028      	beq.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800b582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b584:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b588:	d845      	bhi.n	800b616 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800b58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b590:	d013      	beq.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800b592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b598:	d83d      	bhi.n	800b616 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800b59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d004      	beq.n	800b5aa <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5a6:	d004      	beq.n	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800b5a8:	e035      	b.n	800b616 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800b5aa:	f7fd fa59 	bl	8008a60 <HAL_RCC_GetPCLK1Freq>
 800b5ae:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b5b0:	e23d      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b5b2:	f7fd f939 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800b5b6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b5b8:	e239      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b5ba:	4b3a      	ldr	r3, [pc, #232]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5c6:	d102      	bne.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800b5c8:	4b37      	ldr	r3, [pc, #220]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b5ca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b5cc:	e22f      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5d2:	e22c      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b5d4:	4b33      	ldr	r3, [pc, #204]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f003 0320 	and.w	r3, r3, #32
 800b5dc:	2b20      	cmp	r3, #32
 800b5de:	d117      	bne.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b5e0:	4b30      	ldr	r3, [pc, #192]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d005      	beq.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800b5ec:	4b2d      	ldr	r3, [pc, #180]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	0e1b      	lsrs	r3, r3, #24
 800b5f2:	f003 030f 	and.w	r3, r3, #15
 800b5f6:	e006      	b.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800b5f8:	4b2a      	ldr	r3, [pc, #168]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b5fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b5fe:	041b      	lsls	r3, r3, #16
 800b600:	0e1b      	lsrs	r3, r3, #24
 800b602:	f003 030f 	and.w	r3, r3, #15
 800b606:	4a29      	ldr	r2, [pc, #164]	; (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800b608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b60c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b60e:	e20e      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b610:	2300      	movs	r3, #0
 800b612:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b614:	e20b      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b616:	2300      	movs	r3, #0
 800b618:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b61a:	e208      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800b61c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b620:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800b624:	430b      	orrs	r3, r1
 800b626:	d17c      	bne.n	800b722 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800b628:	4b1e      	ldr	r3, [pc, #120]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b62a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b62e:	f003 0318 	and.w	r3, r3, #24
 800b632:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800b634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b636:	2b18      	cmp	r3, #24
 800b638:	d870      	bhi.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800b63a:	a201      	add	r2, pc, #4	; (adr r2, 800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800b63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b640:	0800b6b1 	.word	0x0800b6b1
 800b644:	0800b71d 	.word	0x0800b71d
 800b648:	0800b71d 	.word	0x0800b71d
 800b64c:	0800b71d 	.word	0x0800b71d
 800b650:	0800b71d 	.word	0x0800b71d
 800b654:	0800b71d 	.word	0x0800b71d
 800b658:	0800b71d 	.word	0x0800b71d
 800b65c:	0800b71d 	.word	0x0800b71d
 800b660:	0800b6b9 	.word	0x0800b6b9
 800b664:	0800b71d 	.word	0x0800b71d
 800b668:	0800b71d 	.word	0x0800b71d
 800b66c:	0800b71d 	.word	0x0800b71d
 800b670:	0800b71d 	.word	0x0800b71d
 800b674:	0800b71d 	.word	0x0800b71d
 800b678:	0800b71d 	.word	0x0800b71d
 800b67c:	0800b71d 	.word	0x0800b71d
 800b680:	0800b6c1 	.word	0x0800b6c1
 800b684:	0800b71d 	.word	0x0800b71d
 800b688:	0800b71d 	.word	0x0800b71d
 800b68c:	0800b71d 	.word	0x0800b71d
 800b690:	0800b71d 	.word	0x0800b71d
 800b694:	0800b71d 	.word	0x0800b71d
 800b698:	0800b71d 	.word	0x0800b71d
 800b69c:	0800b71d 	.word	0x0800b71d
 800b6a0:	0800b6db 	.word	0x0800b6db
 800b6a4:	46020c00 	.word	0x46020c00
 800b6a8:	00f42400 	.word	0x00f42400
 800b6ac:	0800d874 	.word	0x0800d874
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800b6b0:	f7fd f9fe 	bl	8008ab0 <HAL_RCC_GetPCLK3Freq>
 800b6b4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b6b6:	e1ba      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b6b8:	f7fd f8b6 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800b6bc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b6be:	e1b6      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b6c0:	4b9f      	ldr	r3, [pc, #636]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6cc:	d102      	bne.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800b6ce:	4b9d      	ldr	r3, [pc, #628]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b6d0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b6d2:	e1ac      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6d8:	e1a9      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b6da:	4b99      	ldr	r3, [pc, #612]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f003 0320 	and.w	r3, r3, #32
 800b6e2:	2b20      	cmp	r3, #32
 800b6e4:	d117      	bne.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b6e6:	4b96      	ldr	r3, [pc, #600]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d005      	beq.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800b6f2:	4b93      	ldr	r3, [pc, #588]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	0e1b      	lsrs	r3, r3, #24
 800b6f8:	f003 030f 	and.w	r3, r3, #15
 800b6fc:	e006      	b.n	800b70c <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800b6fe:	4b90      	ldr	r3, [pc, #576]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b700:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b704:	041b      	lsls	r3, r3, #16
 800b706:	0e1b      	lsrs	r3, r3, #24
 800b708:	f003 030f 	and.w	r3, r3, #15
 800b70c:	4a8e      	ldr	r2, [pc, #568]	; (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800b70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b712:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b714:	e18b      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b716:	2300      	movs	r3, #0
 800b718:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b71a:	e188      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b71c:	2300      	movs	r3, #0
 800b71e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b720:	e185      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800b722:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b726:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800b72a:	430b      	orrs	r3, r1
 800b72c:	d155      	bne.n	800b7da <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b72e:	4b84      	ldr	r3, [pc, #528]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b730:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b734:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b738:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b740:	d013      	beq.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800b742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b744:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b748:	d844      	bhi.n	800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b750:	d013      	beq.n	800b77a <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800b752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b754:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b758:	d83c      	bhi.n	800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800b75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d014      	beq.n	800b78a <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800b760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b766:	d014      	beq.n	800b792 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800b768:	e034      	b.n	800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b76a:	f107 0318 	add.w	r3, r7, #24
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fe fb2e 	bl	8009dd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b778:	e159      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b77a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fe f9cc 	bl	8009b1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b786:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b788:	e151      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b78a:	f7fd f84d 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800b78e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b790:	e14d      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b792:	4b6b      	ldr	r3, [pc, #428]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f003 0320 	and.w	r3, r3, #32
 800b79a:	2b20      	cmp	r3, #32
 800b79c:	d117      	bne.n	800b7ce <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b79e:	4b68      	ldr	r3, [pc, #416]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d005      	beq.n	800b7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800b7aa:	4b65      	ldr	r3, [pc, #404]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	0e1b      	lsrs	r3, r3, #24
 800b7b0:	f003 030f 	and.w	r3, r3, #15
 800b7b4:	e006      	b.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800b7b6:	4b62      	ldr	r3, [pc, #392]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b7b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b7bc:	041b      	lsls	r3, r3, #16
 800b7be:	0e1b      	lsrs	r3, r3, #24
 800b7c0:	f003 030f 	and.w	r3, r3, #15
 800b7c4:	4a60      	ldr	r2, [pc, #384]	; (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800b7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7ca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b7cc:	e12f      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b7d2:	e12c      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b7d8:	e129      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800b7da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7de:	1e59      	subs	r1, r3, #1
 800b7e0:	ea52 0301 	orrs.w	r3, r2, r1
 800b7e4:	d13c      	bne.n	800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800b7e6:	4b56      	ldr	r3, [pc, #344]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b7e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b7ec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800b7f0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b7f8:	d027      	beq.n	800b84a <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800b7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b800:	d82b      	bhi.n	800b85a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800b802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b804:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b808:	d017      	beq.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800b80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b810:	d823      	bhi.n	800b85a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800b812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b814:	2b00      	cmp	r3, #0
 800b816:	d004      	beq.n	800b822 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800b818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b81e:	d004      	beq.n	800b82a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800b820:	e01b      	b.n	800b85a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b822:	f7fd f801 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 800b826:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b828:	e101      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b82a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fe f974 	bl	8009b1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b836:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b838:	e0f9      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b83a:	f107 0318 	add.w	r3, r7, #24
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fe fac6 	bl	8009dd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b848:	e0f1      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b84a:	f107 030c 	add.w	r3, r7, #12
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fe fc18 	bl	800a084 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b858:	e0e9      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b85a:	2300      	movs	r3, #0
 800b85c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b85e:	e0e6      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800b860:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b864:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800b868:	430b      	orrs	r3, r1
 800b86a:	d131      	bne.n	800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800b86c:	4b34      	ldr	r3, [pc, #208]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b86e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b876:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800b878:	4b31      	ldr	r3, [pc, #196]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b87a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b87e:	f003 0302 	and.w	r3, r3, #2
 800b882:	2b02      	cmp	r3, #2
 800b884:	d106      	bne.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800b886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d103      	bne.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800b88c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b890:	637b      	str	r3, [r7, #52]	; 0x34
 800b892:	e0cc      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800b894:	4b2a      	ldr	r3, [pc, #168]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b896:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b89a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b89e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8a2:	d112      	bne.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800b8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8aa:	d10e      	bne.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b8ac:	4b24      	ldr	r3, [pc, #144]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b8ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b8b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8ba:	d102      	bne.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800b8bc:	23fa      	movs	r3, #250	; 0xfa
 800b8be:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b8c0:	e0b5      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b8c2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b8c6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b8c8:	e0b1      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b8ce:	e0ae      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800b8d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8d4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b8d8:	430b      	orrs	r3, r1
 800b8da:	d13b      	bne.n	800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800b8dc:	4b18      	ldr	r3, [pc, #96]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b8de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b8e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b8e6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800b8e8:	4b15      	ldr	r3, [pc, #84]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b8f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8f4:	d105      	bne.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800b8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d102      	bne.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800b8fc:	4b13      	ldr	r3, [pc, #76]	; (800b94c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800b8fe:	637b      	str	r3, [r7, #52]	; 0x34
 800b900:	e095      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800b902:	4b0f      	ldr	r3, [pc, #60]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b90a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b90e:	d106      	bne.n	800b91e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800b910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b916:	d102      	bne.n	800b91e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800b918:	4b0d      	ldr	r3, [pc, #52]	; (800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800b91a:	637b      	str	r3, [r7, #52]	; 0x34
 800b91c:	e087      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800b91e:	4b08      	ldr	r3, [pc, #32]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b92a:	d106      	bne.n	800b93a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800b92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b932:	d102      	bne.n	800b93a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800b934:	4b03      	ldr	r3, [pc, #12]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b936:	637b      	str	r3, [r7, #52]	; 0x34
 800b938:	e079      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800b93a:	2300      	movs	r3, #0
 800b93c:	637b      	str	r3, [r7, #52]	; 0x34
 800b93e:	e076      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b940:	46020c00 	.word	0x46020c00
 800b944:	00f42400 	.word	0x00f42400
 800b948:	0800d874 	.word	0x0800d874
 800b94c:	02dc6c00 	.word	0x02dc6c00
 800b950:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800b954:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b958:	1e99      	subs	r1, r3, #2
 800b95a:	ea52 0301 	orrs.w	r3, r2, r1
 800b95e:	d120      	bne.n	800b9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800b960:	4b35      	ldr	r3, [pc, #212]	; (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b962:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b96a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d004      	beq.n	800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b974:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b978:	d008      	beq.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800b97a:	e00f      	b.n	800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b97c:	f107 030c 	add.w	r3, r7, #12
 800b980:	4618      	mov	r0, r3
 800b982:	f7fe fb7f 	bl	800a084 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b98a:	e050      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b98c:	f107 0318 	add.w	r3, r7, #24
 800b990:	4618      	mov	r0, r3
 800b992:	f7fe fa1d 	bl	8009dd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800b996:	6a3b      	ldr	r3, [r7, #32]
 800b998:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b99a:	e048      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b99c:	2300      	movs	r3, #0
 800b99e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9a0:	e045      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800b9a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9a6:	f1a3 0108 	sub.w	r1, r3, #8
 800b9aa:	ea52 0301 	orrs.w	r3, r2, r1
 800b9ae:	d13c      	bne.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800b9b0:	4b21      	ldr	r3, [pc, #132]	; (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b9b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b9b6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b9ba:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800b9bc:	4b1e      	ldr	r3, [pc, #120]	; (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9c8:	d105      	bne.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800b9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d102      	bne.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800b9d0:	4b1a      	ldr	r3, [pc, #104]	; (800ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800b9d2:	637b      	str	r3, [r7, #52]	; 0x34
 800b9d4:	e02b      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800b9d6:	4b18      	ldr	r3, [pc, #96]	; (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9e2:	d106      	bne.n	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800b9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9ea:	d102      	bne.n	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800b9ec:	4b14      	ldr	r3, [pc, #80]	; (800ba40 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800b9ee:	637b      	str	r3, [r7, #52]	; 0x34
 800b9f0:	e01d      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9f8:	d107      	bne.n	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b9fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fe f88c 	bl	8009b1c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba06:	637b      	str	r3, [r7, #52]	; 0x34
 800ba08:	e011      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800ba10:	d108      	bne.n	800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7fe f880 	bl	8009b1c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1e:	085b      	lsrs	r3, r3, #1
 800ba20:	637b      	str	r3, [r7, #52]	; 0x34
 800ba22:	e004      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800ba24:	2300      	movs	r3, #0
 800ba26:	637b      	str	r3, [r7, #52]	; 0x34
 800ba28:	e001      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800ba2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3738      	adds	r7, #56	; 0x38
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	46020c00 	.word	0x46020c00
 800ba3c:	00f42400 	.word	0x00f42400
 800ba40:	007a1200 	.word	0x007a1200

0800ba44 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800ba44:	b480      	push	{r7}
 800ba46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800ba48:	4b06      	ldr	r3, [pc, #24]	; (800ba64 <HAL_RCCEx_EnableLSECSS+0x20>)
 800ba4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ba4e:	4a05      	ldr	r2, [pc, #20]	; (800ba64 <HAL_RCCEx_EnableLSECSS+0x20>)
 800ba50:	f043 0320 	orr.w	r3, r3, #32
 800ba54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 800ba58:	bf00      	nop
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	46020c00 	.word	0x46020c00

0800ba68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800ba70:	4b47      	ldr	r3, [pc, #284]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a46      	ldr	r2, [pc, #280]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800ba76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ba7a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ba7c:	f7f7 fa80 	bl	8002f80 <HAL_GetTick>
 800ba80:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba82:	e008      	b.n	800ba96 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ba84:	f7f7 fa7c 	bl	8002f80 <HAL_GetTick>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	1ad3      	subs	r3, r2, r3
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d901      	bls.n	800ba96 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ba92:	2303      	movs	r3, #3
 800ba94:	e077      	b.n	800bb86 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba96:	4b3e      	ldr	r3, [pc, #248]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d1f0      	bne.n	800ba84 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800baa2:	4b3b      	ldr	r3, [pc, #236]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800baa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800baaa:	f023 0303 	bic.w	r3, r3, #3
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	6811      	ldr	r1, [r2, #0]
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	6852      	ldr	r2, [r2, #4]
 800bab6:	3a01      	subs	r2, #1
 800bab8:	0212      	lsls	r2, r2, #8
 800baba:	430a      	orrs	r2, r1
 800babc:	4934      	ldr	r1, [pc, #208]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800babe:	4313      	orrs	r3, r2
 800bac0:	62cb      	str	r3, [r1, #44]	; 0x2c
 800bac2:	4b33      	ldr	r3, [pc, #204]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800bac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bac6:	4b33      	ldr	r3, [pc, #204]	; (800bb94 <RCCEx_PLL2_Config+0x12c>)
 800bac8:	4013      	ands	r3, r2
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	6892      	ldr	r2, [r2, #8]
 800bace:	3a01      	subs	r2, #1
 800bad0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	68d2      	ldr	r2, [r2, #12]
 800bad8:	3a01      	subs	r2, #1
 800bada:	0252      	lsls	r2, r2, #9
 800badc:	b292      	uxth	r2, r2
 800bade:	4311      	orrs	r1, r2
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	6912      	ldr	r2, [r2, #16]
 800bae4:	3a01      	subs	r2, #1
 800bae6:	0412      	lsls	r2, r2, #16
 800bae8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800baec:	4311      	orrs	r1, r2
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	6952      	ldr	r2, [r2, #20]
 800baf2:	3a01      	subs	r2, #1
 800baf4:	0612      	lsls	r2, r2, #24
 800baf6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800bafa:	430a      	orrs	r2, r1
 800bafc:	4924      	ldr	r1, [pc, #144]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800bafe:	4313      	orrs	r3, r2
 800bb00:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800bb02:	4b23      	ldr	r3, [pc, #140]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800bb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb06:	f023 020c 	bic.w	r2, r3, #12
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	699b      	ldr	r3, [r3, #24]
 800bb0e:	4920      	ldr	r1, [pc, #128]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800bb10:	4313      	orrs	r3, r2
 800bb12:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800bb14:	4b1e      	ldr	r3, [pc, #120]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800bb16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6a1b      	ldr	r3, [r3, #32]
 800bb1c:	491c      	ldr	r1, [pc, #112]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800bb22:	4b1b      	ldr	r3, [pc, #108]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800bb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb26:	4a1a      	ldr	r2, [pc, #104]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800bb28:	f023 0310 	bic.w	r3, r3, #16
 800bb2c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bb2e:	4b18      	ldr	r3, [pc, #96]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800bb30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb36:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	69d2      	ldr	r2, [r2, #28]
 800bb3e:	00d2      	lsls	r2, r2, #3
 800bb40:	4913      	ldr	r1, [pc, #76]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800bb42:	4313      	orrs	r3, r2
 800bb44:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800bb46:	4b12      	ldr	r3, [pc, #72]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800bb48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb4a:	4a11      	ldr	r2, [pc, #68]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800bb4c:	f043 0310 	orr.w	r3, r3, #16
 800bb50:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800bb52:	4b0f      	ldr	r3, [pc, #60]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a0e      	ldr	r2, [pc, #56]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800bb58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bb5c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bb5e:	f7f7 fa0f 	bl	8002f80 <HAL_GetTick>
 800bb62:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb64:	e008      	b.n	800bb78 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bb66:	f7f7 fa0b 	bl	8002f80 <HAL_GetTick>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	1ad3      	subs	r3, r2, r3
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	d901      	bls.n	800bb78 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800bb74:	2303      	movs	r3, #3
 800bb76:	e006      	b.n	800bb86 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb78:	4b05      	ldr	r3, [pc, #20]	; (800bb90 <RCCEx_PLL2_Config+0x128>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d0f0      	beq.n	800bb66 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800bb84:	2300      	movs	r3, #0

}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3710      	adds	r7, #16
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	46020c00 	.word	0x46020c00
 800bb94:	80800000 	.word	0x80800000

0800bb98 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800bba0:	4b47      	ldr	r3, [pc, #284]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a46      	ldr	r2, [pc, #280]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bbaa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bbac:	f7f7 f9e8 	bl	8002f80 <HAL_GetTick>
 800bbb0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bbb2:	e008      	b.n	800bbc6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bbb4:	f7f7 f9e4 	bl	8002f80 <HAL_GetTick>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	1ad3      	subs	r3, r2, r3
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	d901      	bls.n	800bbc6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	e077      	b.n	800bcb6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bbc6:	4b3e      	ldr	r3, [pc, #248]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1f0      	bne.n	800bbb4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800bbd2:	4b3b      	ldr	r3, [pc, #236]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bbd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbd6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bbda:	f023 0303 	bic.w	r3, r3, #3
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	6811      	ldr	r1, [r2, #0]
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	6852      	ldr	r2, [r2, #4]
 800bbe6:	3a01      	subs	r2, #1
 800bbe8:	0212      	lsls	r2, r2, #8
 800bbea:	430a      	orrs	r2, r1
 800bbec:	4934      	ldr	r1, [pc, #208]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	630b      	str	r3, [r1, #48]	; 0x30
 800bbf2:	4b33      	ldr	r3, [pc, #204]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bbf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbf6:	4b33      	ldr	r3, [pc, #204]	; (800bcc4 <RCCEx_PLL3_Config+0x12c>)
 800bbf8:	4013      	ands	r3, r2
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	6892      	ldr	r2, [r2, #8]
 800bbfe:	3a01      	subs	r2, #1
 800bc00:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	68d2      	ldr	r2, [r2, #12]
 800bc08:	3a01      	subs	r2, #1
 800bc0a:	0252      	lsls	r2, r2, #9
 800bc0c:	b292      	uxth	r2, r2
 800bc0e:	4311      	orrs	r1, r2
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	6912      	ldr	r2, [r2, #16]
 800bc14:	3a01      	subs	r2, #1
 800bc16:	0412      	lsls	r2, r2, #16
 800bc18:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800bc1c:	4311      	orrs	r1, r2
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	6952      	ldr	r2, [r2, #20]
 800bc22:	3a01      	subs	r2, #1
 800bc24:	0612      	lsls	r2, r2, #24
 800bc26:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800bc2a:	430a      	orrs	r2, r1
 800bc2c:	4924      	ldr	r1, [pc, #144]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800bc32:	4b23      	ldr	r3, [pc, #140]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bc34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc36:	f023 020c 	bic.w	r2, r3, #12
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	699b      	ldr	r3, [r3, #24]
 800bc3e:	4920      	ldr	r1, [pc, #128]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bc40:	4313      	orrs	r3, r2
 800bc42:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800bc44:	4b1e      	ldr	r3, [pc, #120]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bc46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6a1b      	ldr	r3, [r3, #32]
 800bc4c:	491c      	ldr	r1, [pc, #112]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800bc52:	4b1b      	ldr	r3, [pc, #108]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bc54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc56:	4a1a      	ldr	r2, [pc, #104]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bc58:	f023 0310 	bic.w	r3, r3, #16
 800bc5c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bc5e:	4b18      	ldr	r3, [pc, #96]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bc60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc66:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	69d2      	ldr	r2, [r2, #28]
 800bc6e:	00d2      	lsls	r2, r2, #3
 800bc70:	4913      	ldr	r1, [pc, #76]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bc72:	4313      	orrs	r3, r2
 800bc74:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800bc76:	4b12      	ldr	r3, [pc, #72]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bc78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc7a:	4a11      	ldr	r2, [pc, #68]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bc7c:	f043 0310 	orr.w	r3, r3, #16
 800bc80:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800bc82:	4b0f      	ldr	r3, [pc, #60]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4a0e      	ldr	r2, [pc, #56]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bc88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc8c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bc8e:	f7f7 f977 	bl	8002f80 <HAL_GetTick>
 800bc92:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc94:	e008      	b.n	800bca8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bc96:	f7f7 f973 	bl	8002f80 <HAL_GetTick>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	1ad3      	subs	r3, r2, r3
 800bca0:	2b02      	cmp	r3, #2
 800bca2:	d901      	bls.n	800bca8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800bca4:	2303      	movs	r3, #3
 800bca6:	e006      	b.n	800bcb6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bca8:	4b05      	ldr	r3, [pc, #20]	; (800bcc0 <RCCEx_PLL3_Config+0x128>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d0f0      	beq.n	800bc96 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	46020c00 	.word	0x46020c00
 800bcc4:	80800000 	.word	0x80800000

0800bcc8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d071      	beq.n	800bdbe <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d106      	bne.n	800bcf4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2200      	movs	r2, #0
 800bcea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f7f6 feca 	bl	8002a88 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2202      	movs	r2, #2
 800bcf8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800bcfc:	4b32      	ldr	r3, [pc, #200]	; (800bdc8 <HAL_RTC_Init+0x100>)
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	f003 0310 	and.w	r3, r3, #16
 800bd04:	2b10      	cmp	r3, #16
 800bd06:	d051      	beq.n	800bdac <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd08:	4b2f      	ldr	r3, [pc, #188]	; (800bdc8 <HAL_RTC_Init+0x100>)
 800bd0a:	22ca      	movs	r2, #202	; 0xca
 800bd0c:	625a      	str	r2, [r3, #36]	; 0x24
 800bd0e:	4b2e      	ldr	r3, [pc, #184]	; (800bdc8 <HAL_RTC_Init+0x100>)
 800bd10:	2253      	movs	r2, #83	; 0x53
 800bd12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 f9ad 	bl	800c074 <RTC_EnterInitMode>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d13f      	bne.n	800bda4 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800bd24:	4b28      	ldr	r3, [pc, #160]	; (800bdc8 <HAL_RTC_Init+0x100>)
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	4a27      	ldr	r2, [pc, #156]	; (800bdc8 <HAL_RTC_Init+0x100>)
 800bd2a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800bd2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd32:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800bd34:	4b24      	ldr	r3, [pc, #144]	; (800bdc8 <HAL_RTC_Init+0x100>)
 800bd36:	699a      	ldr	r2, [r3, #24]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6859      	ldr	r1, [r3, #4]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	691b      	ldr	r3, [r3, #16]
 800bd40:	4319      	orrs	r1, r3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	699b      	ldr	r3, [r3, #24]
 800bd46:	430b      	orrs	r3, r1
 800bd48:	491f      	ldr	r1, [pc, #124]	; (800bdc8 <HAL_RTC_Init+0x100>)
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	68da      	ldr	r2, [r3, #12]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	689b      	ldr	r3, [r3, #8]
 800bd56:	041b      	lsls	r3, r3, #16
 800bd58:	491b      	ldr	r1, [pc, #108]	; (800bdc8 <HAL_RTC_Init+0x100>)
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800bd5e:	4b1a      	ldr	r3, [pc, #104]	; (800bdc8 <HAL_RTC_Init+0x100>)
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd6e:	430b      	orrs	r3, r1
 800bd70:	4915      	ldr	r1, [pc, #84]	; (800bdc8 <HAL_RTC_Init+0x100>)
 800bd72:	4313      	orrs	r3, r2
 800bd74:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 f9b8 	bl	800c0ec <RTC_ExitInitMode>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800bd80:	7bfb      	ldrb	r3, [r7, #15]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d10e      	bne.n	800bda4 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800bd86:	4b10      	ldr	r3, [pc, #64]	; (800bdc8 <HAL_RTC_Init+0x100>)
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6a19      	ldr	r1, [r3, #32]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	69db      	ldr	r3, [r3, #28]
 800bd96:	4319      	orrs	r1, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	695b      	ldr	r3, [r3, #20]
 800bd9c:	430b      	orrs	r3, r1
 800bd9e:	490a      	ldr	r1, [pc, #40]	; (800bdc8 <HAL_RTC_Init+0x100>)
 800bda0:	4313      	orrs	r3, r2
 800bda2:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bda4:	4b08      	ldr	r3, [pc, #32]	; (800bdc8 <HAL_RTC_Init+0x100>)
 800bda6:	22ff      	movs	r2, #255	; 0xff
 800bda8:	625a      	str	r2, [r3, #36]	; 0x24
 800bdaa:	e001      	b.n	800bdb0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800bdac:	2300      	movs	r3, #0
 800bdae:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800bdb0:	7bfb      	ldrb	r3, [r7, #15]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d103      	bne.n	800bdbe <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800bdbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3710      	adds	r7, #16
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	46007800 	.word	0x46007800

0800bdcc <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bdcc:	b590      	push	{r4, r7, lr}
 800bdce:	b087      	sub	sp, #28
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d101      	bne.n	800bde6 <HAL_RTC_SetTime+0x1a>
 800bde2:	2302      	movs	r3, #2
 800bde4:	e088      	b.n	800bef8 <HAL_RTC_SetTime+0x12c>
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2201      	movs	r2, #1
 800bdea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2202      	movs	r2, #2
 800bdf2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bdf6:	4b42      	ldr	r3, [pc, #264]	; (800bf00 <HAL_RTC_SetTime+0x134>)
 800bdf8:	22ca      	movs	r2, #202	; 0xca
 800bdfa:	625a      	str	r2, [r3, #36]	; 0x24
 800bdfc:	4b40      	ldr	r3, [pc, #256]	; (800bf00 <HAL_RTC_SetTime+0x134>)
 800bdfe:	2253      	movs	r2, #83	; 0x53
 800be00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f000 f936 	bl	800c074 <RTC_EnterInitMode>
 800be08:	4603      	mov	r3, r0
 800be0a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800be0c:	7cfb      	ldrb	r3, [r7, #19]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d163      	bne.n	800beda <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800be12:	4b3b      	ldr	r3, [pc, #236]	; (800bf00 <HAL_RTC_SetTime+0x134>)
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be1e:	d057      	beq.n	800bed0 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d125      	bne.n	800be72 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800be26:	4b36      	ldr	r3, [pc, #216]	; (800bf00 <HAL_RTC_SetTime+0x134>)
 800be28:	699b      	ldr	r3, [r3, #24]
 800be2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d102      	bne.n	800be38 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	2200      	movs	r2, #0
 800be36:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	4618      	mov	r0, r3
 800be3e:	f000 f993 	bl	800c168 <RTC_ByteToBcd2>
 800be42:	4603      	mov	r3, r0
 800be44:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	785b      	ldrb	r3, [r3, #1]
 800be4a:	4618      	mov	r0, r3
 800be4c:	f000 f98c 	bl	800c168 <RTC_ByteToBcd2>
 800be50:	4603      	mov	r3, r0
 800be52:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800be54:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	789b      	ldrb	r3, [r3, #2]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f000 f984 	bl	800c168 <RTC_ByteToBcd2>
 800be60:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800be62:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	78db      	ldrb	r3, [r3, #3]
 800be6a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800be6c:	4313      	orrs	r3, r2
 800be6e:	617b      	str	r3, [r7, #20]
 800be70:	e017      	b.n	800bea2 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800be72:	4b23      	ldr	r3, [pc, #140]	; (800bf00 <HAL_RTC_SetTime+0x134>)
 800be74:	699b      	ldr	r3, [r3, #24]
 800be76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d102      	bne.n	800be84 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	2200      	movs	r2, #0
 800be82:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	785b      	ldrb	r3, [r3, #1]
 800be8e:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800be90:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800be96:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	78db      	ldrb	r3, [r3, #3]
 800be9c:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800be9e:	4313      	orrs	r3, r2
 800bea0:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800bea2:	4a17      	ldr	r2, [pc, #92]	; (800bf00 <HAL_RTC_SetTime+0x134>)
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800beaa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800beae:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800beb0:	4b13      	ldr	r3, [pc, #76]	; (800bf00 <HAL_RTC_SetTime+0x134>)
 800beb2:	699b      	ldr	r3, [r3, #24]
 800beb4:	4a12      	ldr	r2, [pc, #72]	; (800bf00 <HAL_RTC_SetTime+0x134>)
 800beb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800beba:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800bebc:	4b10      	ldr	r3, [pc, #64]	; (800bf00 <HAL_RTC_SetTime+0x134>)
 800bebe:	699a      	ldr	r2, [r3, #24]
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	68d9      	ldr	r1, [r3, #12]
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	430b      	orrs	r3, r1
 800beca:	490d      	ldr	r1, [pc, #52]	; (800bf00 <HAL_RTC_SetTime+0x134>)
 800becc:	4313      	orrs	r3, r2
 800bece:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	f000 f90b 	bl	800c0ec <RTC_ExitInitMode>
 800bed6:	4603      	mov	r3, r0
 800bed8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800beda:	4b09      	ldr	r3, [pc, #36]	; (800bf00 <HAL_RTC_SetTime+0x134>)
 800bedc:	22ff      	movs	r2, #255	; 0xff
 800bede:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800bee0:	7cfb      	ldrb	r3, [r7, #19]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d103      	bne.n	800beee <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2201      	movs	r2, #1
 800beea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2200      	movs	r2, #0
 800bef2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800bef6:	7cfb      	ldrb	r3, [r7, #19]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	371c      	adds	r7, #28
 800befc:	46bd      	mov	sp, r7
 800befe:	bd90      	pop	{r4, r7, pc}
 800bf00:	46007800 	.word	0x46007800

0800bf04 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bf04:	b590      	push	{r4, r7, lr}
 800bf06:	b087      	sub	sp, #28
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d101      	bne.n	800bf1e <HAL_RTC_SetDate+0x1a>
 800bf1a:	2302      	movs	r3, #2
 800bf1c:	e071      	b.n	800c002 <HAL_RTC_SetDate+0xfe>
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2201      	movs	r2, #1
 800bf22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2202      	movs	r2, #2
 800bf2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d10e      	bne.n	800bf52 <HAL_RTC_SetDate+0x4e>
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	785b      	ldrb	r3, [r3, #1]
 800bf38:	f003 0310 	and.w	r3, r3, #16
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d008      	beq.n	800bf52 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	785b      	ldrb	r3, [r3, #1]
 800bf44:	f023 0310 	bic.w	r3, r3, #16
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	330a      	adds	r3, #10
 800bf4c:	b2da      	uxtb	r2, r3
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d11c      	bne.n	800bf92 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	78db      	ldrb	r3, [r3, #3]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f000 f903 	bl	800c168 <RTC_ByteToBcd2>
 800bf62:	4603      	mov	r3, r0
 800bf64:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	785b      	ldrb	r3, [r3, #1]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f000 f8fc 	bl	800c168 <RTC_ByteToBcd2>
 800bf70:	4603      	mov	r3, r0
 800bf72:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bf74:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	789b      	ldrb	r3, [r3, #2]
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f000 f8f4 	bl	800c168 <RTC_ByteToBcd2>
 800bf80:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bf82:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	617b      	str	r3, [r7, #20]
 800bf90:	e00e      	b.n	800bfb0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	78db      	ldrb	r3, [r3, #3]
 800bf96:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	785b      	ldrb	r3, [r3, #1]
 800bf9c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800bf9e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800bfa4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800bfac:	4313      	orrs	r3, r2
 800bfae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bfb0:	4b16      	ldr	r3, [pc, #88]	; (800c00c <HAL_RTC_SetDate+0x108>)
 800bfb2:	22ca      	movs	r2, #202	; 0xca
 800bfb4:	625a      	str	r2, [r3, #36]	; 0x24
 800bfb6:	4b15      	ldr	r3, [pc, #84]	; (800c00c <HAL_RTC_SetDate+0x108>)
 800bfb8:	2253      	movs	r2, #83	; 0x53
 800bfba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f000 f859 	bl	800c074 <RTC_EnterInitMode>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800bfc6:	7cfb      	ldrb	r3, [r7, #19]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d10b      	bne.n	800bfe4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800bfcc:	4a0f      	ldr	r2, [pc, #60]	; (800c00c <HAL_RTC_SetDate+0x108>)
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bfd4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bfd8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bfda:	68f8      	ldr	r0, [r7, #12]
 800bfdc:	f000 f886 	bl	800c0ec <RTC_ExitInitMode>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bfe4:	4b09      	ldr	r3, [pc, #36]	; (800c00c <HAL_RTC_SetDate+0x108>)
 800bfe6:	22ff      	movs	r2, #255	; 0xff
 800bfe8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800bfea:	7cfb      	ldrb	r3, [r7, #19]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d103      	bne.n	800bff8 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2201      	movs	r2, #1
 800bff4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2200      	movs	r2, #0
 800bffc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800c000:	7cfb      	ldrb	r3, [r7, #19]
}
 800c002:	4618      	mov	r0, r3
 800c004:	371c      	adds	r7, #28
 800c006:	46bd      	mov	sp, r7
 800c008:	bd90      	pop	{r4, r7, pc}
 800c00a:	bf00      	nop
 800c00c:	46007800 	.word	0x46007800

0800c010 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800c018:	4b15      	ldr	r3, [pc, #84]	; (800c070 <HAL_RTC_WaitForSynchro+0x60>)
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	4a14      	ldr	r2, [pc, #80]	; (800c070 <HAL_RTC_WaitForSynchro+0x60>)
 800c01e:	f023 0320 	bic.w	r3, r3, #32
 800c022:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800c024:	f7f6 ffac 	bl	8002f80 <HAL_GetTick>
 800c028:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c02a:	e013      	b.n	800c054 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c02c:	f7f6 ffa8 	bl	8002f80 <HAL_GetTick>
 800c030:	4602      	mov	r2, r0
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c03a:	d90b      	bls.n	800c054 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c03c:	4b0c      	ldr	r3, [pc, #48]	; (800c070 <HAL_RTC_WaitForSynchro+0x60>)
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	f003 0320 	and.w	r3, r3, #32
 800c044:	2b00      	cmp	r3, #0
 800c046:	d10c      	bne.n	800c062 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2203      	movs	r2, #3
 800c04c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 800c050:	2303      	movs	r3, #3
 800c052:	e008      	b.n	800c066 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c054:	4b06      	ldr	r3, [pc, #24]	; (800c070 <HAL_RTC_WaitForSynchro+0x60>)
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	f003 0320 	and.w	r3, r3, #32
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d0e5      	beq.n	800c02c <HAL_RTC_WaitForSynchro+0x1c>
 800c060:	e000      	b.n	800c064 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800c062:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	46007800 	.word	0x46007800

0800c074 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c07c:	2300      	movs	r3, #0
 800c07e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c080:	4b19      	ldr	r3, [pc, #100]	; (800c0e8 <RTC_EnterInitMode+0x74>)
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d128      	bne.n	800c0de <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c08c:	4b16      	ldr	r3, [pc, #88]	; (800c0e8 <RTC_EnterInitMode+0x74>)
 800c08e:	68db      	ldr	r3, [r3, #12]
 800c090:	4a15      	ldr	r2, [pc, #84]	; (800c0e8 <RTC_EnterInitMode+0x74>)
 800c092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c096:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800c098:	f7f6 ff72 	bl	8002f80 <HAL_GetTick>
 800c09c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c09e:	e013      	b.n	800c0c8 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c0a0:	f7f6 ff6e 	bl	8002f80 <HAL_GetTick>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	1ad3      	subs	r3, r2, r3
 800c0aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c0ae:	d90b      	bls.n	800c0c8 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c0b0:	4b0d      	ldr	r3, [pc, #52]	; (800c0e8 <RTC_EnterInitMode+0x74>)
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10f      	bne.n	800c0dc <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800c0bc:	2303      	movs	r3, #3
 800c0be:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2203      	movs	r2, #3
 800c0c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c0c8:	4b07      	ldr	r3, [pc, #28]	; (800c0e8 <RTC_EnterInitMode+0x74>)
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d104      	bne.n	800c0de <RTC_EnterInitMode+0x6a>
 800c0d4:	7bfb      	ldrb	r3, [r7, #15]
 800c0d6:	2b03      	cmp	r3, #3
 800c0d8:	d1e2      	bne.n	800c0a0 <RTC_EnterInitMode+0x2c>
 800c0da:	e000      	b.n	800c0de <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800c0dc:	bf00      	nop
        }
      }
    }
  }

  return status;
 800c0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	46007800 	.word	0x46007800

0800c0ec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c0f8:	4b1a      	ldr	r3, [pc, #104]	; (800c164 <RTC_ExitInitMode+0x78>)
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	4a19      	ldr	r2, [pc, #100]	; (800c164 <RTC_ExitInitMode+0x78>)
 800c0fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c102:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c104:	4b17      	ldr	r3, [pc, #92]	; (800c164 <RTC_ExitInitMode+0x78>)
 800c106:	699b      	ldr	r3, [r3, #24]
 800c108:	f003 0320 	and.w	r3, r3, #32
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d10c      	bne.n	800c12a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f7ff ff7d 	bl	800c010 <HAL_RTC_WaitForSynchro>
 800c116:	4603      	mov	r3, r0
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d01e      	beq.n	800c15a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2203      	movs	r2, #3
 800c120:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800c124:	2303      	movs	r3, #3
 800c126:	73fb      	strb	r3, [r7, #15]
 800c128:	e017      	b.n	800c15a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c12a:	4b0e      	ldr	r3, [pc, #56]	; (800c164 <RTC_ExitInitMode+0x78>)
 800c12c:	699b      	ldr	r3, [r3, #24]
 800c12e:	4a0d      	ldr	r2, [pc, #52]	; (800c164 <RTC_ExitInitMode+0x78>)
 800c130:	f023 0320 	bic.w	r3, r3, #32
 800c134:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f7ff ff6a 	bl	800c010 <HAL_RTC_WaitForSynchro>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d005      	beq.n	800c14e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2203      	movs	r2, #3
 800c146:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800c14a:	2303      	movs	r3, #3
 800c14c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c14e:	4b05      	ldr	r3, [pc, #20]	; (800c164 <RTC_ExitInitMode+0x78>)
 800c150:	699b      	ldr	r3, [r3, #24]
 800c152:	4a04      	ldr	r2, [pc, #16]	; (800c164 <RTC_ExitInitMode+0x78>)
 800c154:	f043 0320 	orr.w	r3, r3, #32
 800c158:	6193      	str	r3, [r2, #24]
  }
  return status;
 800c15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	46007800 	.word	0x46007800

0800c168 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c168:	b480      	push	{r7}
 800c16a:	b085      	sub	sp, #20
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	4603      	mov	r3, r0
 800c170:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c172:	2300      	movs	r3, #0
 800c174:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800c176:	79fb      	ldrb	r3, [r7, #7]
 800c178:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800c17a:	e005      	b.n	800c188 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	3301      	adds	r3, #1
 800c180:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800c182:	7afb      	ldrb	r3, [r7, #11]
 800c184:	3b0a      	subs	r3, #10
 800c186:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800c188:	7afb      	ldrb	r3, [r7, #11]
 800c18a:	2b09      	cmp	r3, #9
 800c18c:	d8f6      	bhi.n	800c17c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	b2db      	uxtb	r3, r3
 800c192:	011b      	lsls	r3, r3, #4
 800c194:	b2da      	uxtb	r2, r3
 800c196:	7afb      	ldrb	r3, [r7, #11]
 800c198:	4313      	orrs	r3, r2
 800c19a:	b2db      	uxtb	r3, r3
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3714      	adds	r7, #20
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	4910      	ldr	r1, [pc, #64]	; (800c1fc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	689a      	ldr	r2, [r3, #8]
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	431a      	orrs	r2, r3
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	490c      	ldr	r1, [pc, #48]	; (800c200 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800c1d4:	4b0a      	ldr	r3, [pc, #40]	; (800c200 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c1d6:	6a1b      	ldr	r3, [r3, #32]
 800c1d8:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	6919      	ldr	r1, [r3, #16]
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	695b      	ldr	r3, [r3, #20]
 800c1e4:	041b      	lsls	r3, r3, #16
 800c1e6:	430b      	orrs	r3, r1
 800c1e8:	4905      	ldr	r1, [pc, #20]	; (800c200 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800c1ee:	2300      	movs	r3, #0
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr
 800c1fc:	46007800 	.word	0x46007800
 800c200:	46007c00 	.word	0x46007c00

0800c204 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d101      	bne.n	800c216 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c212:	2301      	movs	r3, #1
 800c214:	e0fb      	b.n	800c40e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a7f      	ldr	r2, [pc, #508]	; (800c418 <HAL_SPI_Init+0x214>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d004      	beq.n	800c22a <HAL_SPI_Init+0x26>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4a7d      	ldr	r2, [pc, #500]	; (800c41c <HAL_SPI_Init+0x218>)
 800c226:	4293      	cmp	r3, r2
 800c228:	e000      	b.n	800c22c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800c22a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4a78      	ldr	r2, [pc, #480]	; (800c418 <HAL_SPI_Init+0x214>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d004      	beq.n	800c246 <HAL_SPI_Init+0x42>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a76      	ldr	r2, [pc, #472]	; (800c41c <HAL_SPI_Init+0x218>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d105      	bne.n	800c252 <HAL_SPI_Init+0x4e>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	2b0f      	cmp	r3, #15
 800c24c:	d901      	bls.n	800c252 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800c24e:	2301      	movs	r3, #1
 800c250:	e0dd      	b.n	800c40e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 f8ec 	bl	800c430 <SPI_GetPacketSize>
 800c258:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4a6e      	ldr	r2, [pc, #440]	; (800c418 <HAL_SPI_Init+0x214>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d004      	beq.n	800c26e <HAL_SPI_Init+0x6a>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a6c      	ldr	r2, [pc, #432]	; (800c41c <HAL_SPI_Init+0x218>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d102      	bne.n	800c274 <HAL_SPI_Init+0x70>
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2b08      	cmp	r3, #8
 800c272:	d816      	bhi.n	800c2a2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c278:	4a69      	ldr	r2, [pc, #420]	; (800c420 <HAL_SPI_Init+0x21c>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d00e      	beq.n	800c29c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a68      	ldr	r2, [pc, #416]	; (800c424 <HAL_SPI_Init+0x220>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d009      	beq.n	800c29c <HAL_SPI_Init+0x98>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a66      	ldr	r2, [pc, #408]	; (800c428 <HAL_SPI_Init+0x224>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d004      	beq.n	800c29c <HAL_SPI_Init+0x98>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a65      	ldr	r2, [pc, #404]	; (800c42c <HAL_SPI_Init+0x228>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d104      	bne.n	800c2a6 <HAL_SPI_Init+0xa2>
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2b10      	cmp	r3, #16
 800c2a0:	d901      	bls.n	800c2a6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e0b3      	b.n	800c40e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d106      	bne.n	800c2c0 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f7f6 fc30 	bl	8002b20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2202      	movs	r2, #2
 800c2c4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f022 0201 	bic.w	r2, r2, #1
 800c2d6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c2e2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	699b      	ldr	r3, [r3, #24]
 800c2e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c2ec:	d119      	bne.n	800c322 <HAL_SPI_Init+0x11e>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c2f6:	d103      	bne.n	800c300 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d008      	beq.n	800c312 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10c      	bne.n	800c322 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c30c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c310:	d107      	bne.n	800c322 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c320:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d00f      	beq.n	800c34e <HAL_SPI_Init+0x14a>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	2b06      	cmp	r3, #6
 800c334:	d90b      	bls.n	800c34e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	430a      	orrs	r2, r1
 800c34a:	601a      	str	r2, [r3, #0]
 800c34c:	e007      	b.n	800c35e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c35c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	69da      	ldr	r2, [r3, #28]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c366:	431a      	orrs	r2, r3
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	431a      	orrs	r2, r3
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c370:	ea42 0103 	orr.w	r1, r2, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	68da      	ldr	r2, [r3, #12]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	430a      	orrs	r2, r1
 800c37e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c388:	431a      	orrs	r2, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c38e:	431a      	orrs	r2, r3
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	699b      	ldr	r3, [r3, #24]
 800c394:	431a      	orrs	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	691b      	ldr	r3, [r3, #16]
 800c39a:	431a      	orrs	r2, r3
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	695b      	ldr	r3, [r3, #20]
 800c3a0:	431a      	orrs	r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6a1b      	ldr	r3, [r3, #32]
 800c3a6:	431a      	orrs	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	431a      	orrs	r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3b2:	431a      	orrs	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	431a      	orrs	r2, r3
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c3be:	431a      	orrs	r2, r3
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3c4:	431a      	orrs	r2, r3
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3ca:	ea42 0103 	orr.w	r1, r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	430a      	orrs	r2, r1
 800c3d8:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00a      	beq.n	800c3fc <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	430a      	orrs	r2, r1
 800c3fa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2201      	movs	r2, #1
 800c408:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	46002000 	.word	0x46002000
 800c41c:	56002000 	.word	0x56002000
 800c420:	40013000 	.word	0x40013000
 800c424:	50013000 	.word	0x50013000
 800c428:	40003800 	.word	0x40003800
 800c42c:	50003800 	.word	0x50003800

0800c430 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c430:	b480      	push	{r7}
 800c432:	b085      	sub	sp, #20
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c43c:	095b      	lsrs	r3, r3, #5
 800c43e:	3301      	adds	r3, #1
 800c440:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	3301      	adds	r3, #1
 800c448:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	3307      	adds	r3, #7
 800c44e:	08db      	lsrs	r3, r3, #3
 800c450:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	fb02 f303 	mul.w	r3, r2, r3
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3714      	adds	r7, #20
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr

0800c466 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800c466:	b480      	push	{r7}
 800c468:	b083      	sub	sp, #12
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
 800c46e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c476:	b2db      	uxtb	r3, r3
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d12e      	bne.n	800c4da <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800c482:	2b01      	cmp	r3, #1
 800c484:	d101      	bne.n	800c48a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800c486:	2302      	movs	r3, #2
 800c488:	e028      	b.n	800c4dc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2201      	movs	r2, #1
 800c48e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2202      	movs	r2, #2
 800c496:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f022 0201 	bic.w	r2, r2, #1
 800c4a8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	681a      	ldr	r2, [r3, #0]
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800c4b6:	ea42 0103 	orr.w	r1, r2, r3
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	689a      	ldr	r2, [r3, #8]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	430a      	orrs	r2, r1
 800c4c4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	e000      	b.n	800c4dc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800c4da:	2301      	movs	r3, #1
  }
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	370c      	adds	r7, #12
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d101      	bne.n	800c4fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e049      	b.n	800c58e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c500:	b2db      	uxtb	r3, r3
 800c502:	2b00      	cmp	r3, #0
 800c504:	d106      	bne.n	800c514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 f841 	bl	800c596 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2202      	movs	r2, #2
 800c518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681a      	ldr	r2, [r3, #0]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	3304      	adds	r3, #4
 800c524:	4619      	mov	r1, r3
 800c526:	4610      	mov	r0, r2
 800c528:	f000 fa58 	bl	800c9dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2201      	movs	r2, #1
 800c530:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2201      	movs	r2, #1
 800c538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2201      	movs	r2, #1
 800c540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2201      	movs	r2, #1
 800c548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2201      	movs	r2, #1
 800c550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2201      	movs	r2, #1
 800c560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2201      	movs	r2, #1
 800c570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2201      	movs	r2, #1
 800c578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2201      	movs	r2, #1
 800c588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3708      	adds	r7, #8
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c596:	b480      	push	{r7}
 800c598:	b083      	sub	sp, #12
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c59e:	bf00      	nop
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr
	...

0800c5ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d001      	beq.n	800c5c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e072      	b.n	800c6aa <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2202      	movs	r2, #2
 800c5c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	68da      	ldr	r2, [r3, #12]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f042 0201 	orr.w	r2, r2, #1
 800c5da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a35      	ldr	r2, [pc, #212]	; (800c6b8 <HAL_TIM_Base_Start_IT+0x10c>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d040      	beq.n	800c668 <HAL_TIM_Base_Start_IT+0xbc>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a34      	ldr	r2, [pc, #208]	; (800c6bc <HAL_TIM_Base_Start_IT+0x110>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d03b      	beq.n	800c668 <HAL_TIM_Base_Start_IT+0xbc>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5f8:	d036      	beq.n	800c668 <HAL_TIM_Base_Start_IT+0xbc>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c602:	d031      	beq.n	800c668 <HAL_TIM_Base_Start_IT+0xbc>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4a2d      	ldr	r2, [pc, #180]	; (800c6c0 <HAL_TIM_Base_Start_IT+0x114>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d02c      	beq.n	800c668 <HAL_TIM_Base_Start_IT+0xbc>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4a2c      	ldr	r2, [pc, #176]	; (800c6c4 <HAL_TIM_Base_Start_IT+0x118>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d027      	beq.n	800c668 <HAL_TIM_Base_Start_IT+0xbc>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a2a      	ldr	r2, [pc, #168]	; (800c6c8 <HAL_TIM_Base_Start_IT+0x11c>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d022      	beq.n	800c668 <HAL_TIM_Base_Start_IT+0xbc>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a29      	ldr	r2, [pc, #164]	; (800c6cc <HAL_TIM_Base_Start_IT+0x120>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d01d      	beq.n	800c668 <HAL_TIM_Base_Start_IT+0xbc>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a27      	ldr	r2, [pc, #156]	; (800c6d0 <HAL_TIM_Base_Start_IT+0x124>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d018      	beq.n	800c668 <HAL_TIM_Base_Start_IT+0xbc>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a26      	ldr	r2, [pc, #152]	; (800c6d4 <HAL_TIM_Base_Start_IT+0x128>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d013      	beq.n	800c668 <HAL_TIM_Base_Start_IT+0xbc>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a24      	ldr	r2, [pc, #144]	; (800c6d8 <HAL_TIM_Base_Start_IT+0x12c>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d00e      	beq.n	800c668 <HAL_TIM_Base_Start_IT+0xbc>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a23      	ldr	r2, [pc, #140]	; (800c6dc <HAL_TIM_Base_Start_IT+0x130>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d009      	beq.n	800c668 <HAL_TIM_Base_Start_IT+0xbc>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4a21      	ldr	r2, [pc, #132]	; (800c6e0 <HAL_TIM_Base_Start_IT+0x134>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d004      	beq.n	800c668 <HAL_TIM_Base_Start_IT+0xbc>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4a20      	ldr	r2, [pc, #128]	; (800c6e4 <HAL_TIM_Base_Start_IT+0x138>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d115      	bne.n	800c694 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	689a      	ldr	r2, [r3, #8]
 800c66e:	4b1e      	ldr	r3, [pc, #120]	; (800c6e8 <HAL_TIM_Base_Start_IT+0x13c>)
 800c670:	4013      	ands	r3, r2
 800c672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2b06      	cmp	r3, #6
 800c678:	d015      	beq.n	800c6a6 <HAL_TIM_Base_Start_IT+0xfa>
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c680:	d011      	beq.n	800c6a6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f042 0201 	orr.w	r2, r2, #1
 800c690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c692:	e008      	b.n	800c6a6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f042 0201 	orr.w	r2, r2, #1
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	e000      	b.n	800c6a8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c6a8:	2300      	movs	r3, #0
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3714      	adds	r7, #20
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr
 800c6b6:	bf00      	nop
 800c6b8:	40012c00 	.word	0x40012c00
 800c6bc:	50012c00 	.word	0x50012c00
 800c6c0:	40000400 	.word	0x40000400
 800c6c4:	50000400 	.word	0x50000400
 800c6c8:	40000800 	.word	0x40000800
 800c6cc:	50000800 	.word	0x50000800
 800c6d0:	40000c00 	.word	0x40000c00
 800c6d4:	50000c00 	.word	0x50000c00
 800c6d8:	40013400 	.word	0x40013400
 800c6dc:	50013400 	.word	0x50013400
 800c6e0:	40014000 	.word	0x40014000
 800c6e4:	50014000 	.word	0x50014000
 800c6e8:	00010007 	.word	0x00010007

0800c6ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	691b      	ldr	r3, [r3, #16]
 800c702:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	f003 0302 	and.w	r3, r3, #2
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d020      	beq.n	800c750 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f003 0302 	and.w	r3, r3, #2
 800c714:	2b00      	cmp	r3, #0
 800c716:	d01b      	beq.n	800c750 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f06f 0202 	mvn.w	r2, #2
 800c720:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2201      	movs	r2, #1
 800c726:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	699b      	ldr	r3, [r3, #24]
 800c72e:	f003 0303 	and.w	r3, r3, #3
 800c732:	2b00      	cmp	r3, #0
 800c734:	d003      	beq.n	800c73e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 f931 	bl	800c99e <HAL_TIM_IC_CaptureCallback>
 800c73c:	e005      	b.n	800c74a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 f923 	bl	800c98a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 f934 	bl	800c9b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	f003 0304 	and.w	r3, r3, #4
 800c756:	2b00      	cmp	r3, #0
 800c758:	d020      	beq.n	800c79c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f003 0304 	and.w	r3, r3, #4
 800c760:	2b00      	cmp	r3, #0
 800c762:	d01b      	beq.n	800c79c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f06f 0204 	mvn.w	r2, #4
 800c76c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2202      	movs	r2, #2
 800c772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	699b      	ldr	r3, [r3, #24]
 800c77a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d003      	beq.n	800c78a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 f90b 	bl	800c99e <HAL_TIM_IC_CaptureCallback>
 800c788:	e005      	b.n	800c796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f8fd 	bl	800c98a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 f90e 	bl	800c9b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2200      	movs	r2, #0
 800c79a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	f003 0308 	and.w	r3, r3, #8
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d020      	beq.n	800c7e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f003 0308 	and.w	r3, r3, #8
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d01b      	beq.n	800c7e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f06f 0208 	mvn.w	r2, #8
 800c7b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2204      	movs	r2, #4
 800c7be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	69db      	ldr	r3, [r3, #28]
 800c7c6:	f003 0303 	and.w	r3, r3, #3
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d003      	beq.n	800c7d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 f8e5 	bl	800c99e <HAL_TIM_IC_CaptureCallback>
 800c7d4:	e005      	b.n	800c7e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 f8d7 	bl	800c98a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 f8e8 	bl	800c9b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	f003 0310 	and.w	r3, r3, #16
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d020      	beq.n	800c834 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f003 0310 	and.w	r3, r3, #16
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d01b      	beq.n	800c834 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f06f 0210 	mvn.w	r2, #16
 800c804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2208      	movs	r2, #8
 800c80a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	69db      	ldr	r3, [r3, #28]
 800c812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c816:	2b00      	cmp	r3, #0
 800c818:	d003      	beq.n	800c822 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 f8bf 	bl	800c99e <HAL_TIM_IC_CaptureCallback>
 800c820:	e005      	b.n	800c82e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 f8b1 	bl	800c98a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 f8c2 	bl	800c9b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	f003 0301 	and.w	r3, r3, #1
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00c      	beq.n	800c858 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f003 0301 	and.w	r3, r3, #1
 800c844:	2b00      	cmp	r3, #0
 800c846:	d007      	beq.n	800c858 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f06f 0201 	mvn.w	r2, #1
 800c850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7f5 f980 	bl	8001b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d104      	bne.n	800c86c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00c      	beq.n	800c886 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c872:	2b00      	cmp	r3, #0
 800c874:	d007      	beq.n	800c886 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800c87e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 f9af 	bl	800cbe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00c      	beq.n	800c8aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c896:	2b00      	cmp	r3, #0
 800c898:	d007      	beq.n	800c8aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c8a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 f9a7 	bl	800cbf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00c      	beq.n	800c8ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d007      	beq.n	800c8ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c8c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f000 f87c 	bl	800c9c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	f003 0320 	and.w	r3, r3, #32
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00c      	beq.n	800c8f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f003 0320 	and.w	r3, r3, #32
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d007      	beq.n	800c8f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f06f 0220 	mvn.w	r2, #32
 800c8ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 f96f 	bl	800cbd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00c      	beq.n	800c916 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c902:	2b00      	cmp	r3, #0
 800c904:	d007      	beq.n	800c916 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c90e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f000 f97b 	bl	800cc0c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d00c      	beq.n	800c93a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c926:	2b00      	cmp	r3, #0
 800c928:	d007      	beq.n	800c93a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f000 f973 	bl	800cc20 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c940:	2b00      	cmp	r3, #0
 800c942:	d00c      	beq.n	800c95e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d007      	beq.n	800c95e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 f96b 	bl	800cc34 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c964:	2b00      	cmp	r3, #0
 800c966:	d00c      	beq.n	800c982 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d007      	beq.n	800c982 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c97a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 f963 	bl	800cc48 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c982:	bf00      	nop
 800c984:	3710      	adds	r7, #16
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}

0800c98a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c98a:	b480      	push	{r7}
 800c98c:	b083      	sub	sp, #12
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c992:	bf00      	nop
 800c994:	370c      	adds	r7, #12
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr

0800c99e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c99e:	b480      	push	{r7}
 800c9a0:	b083      	sub	sp, #12
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c9a6:	bf00      	nop
 800c9a8:	370c      	adds	r7, #12
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c9b2:	b480      	push	{r7}
 800c9b4:	b083      	sub	sp, #12
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c9ba:	bf00      	nop
 800c9bc:	370c      	adds	r7, #12
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr

0800c9c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c9c6:	b480      	push	{r7}
 800c9c8:	b083      	sub	sp, #12
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c9ce:	bf00      	nop
 800c9d0:	370c      	adds	r7, #12
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr
	...

0800c9dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b085      	sub	sp, #20
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	4a68      	ldr	r2, [pc, #416]	; (800cb90 <TIM_Base_SetConfig+0x1b4>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d02b      	beq.n	800ca4c <TIM_Base_SetConfig+0x70>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	4a67      	ldr	r2, [pc, #412]	; (800cb94 <TIM_Base_SetConfig+0x1b8>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d027      	beq.n	800ca4c <TIM_Base_SetConfig+0x70>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca02:	d023      	beq.n	800ca4c <TIM_Base_SetConfig+0x70>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ca0a:	d01f      	beq.n	800ca4c <TIM_Base_SetConfig+0x70>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	4a62      	ldr	r2, [pc, #392]	; (800cb98 <TIM_Base_SetConfig+0x1bc>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d01b      	beq.n	800ca4c <TIM_Base_SetConfig+0x70>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	4a61      	ldr	r2, [pc, #388]	; (800cb9c <TIM_Base_SetConfig+0x1c0>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d017      	beq.n	800ca4c <TIM_Base_SetConfig+0x70>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	4a60      	ldr	r2, [pc, #384]	; (800cba0 <TIM_Base_SetConfig+0x1c4>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d013      	beq.n	800ca4c <TIM_Base_SetConfig+0x70>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4a5f      	ldr	r2, [pc, #380]	; (800cba4 <TIM_Base_SetConfig+0x1c8>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d00f      	beq.n	800ca4c <TIM_Base_SetConfig+0x70>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	4a5e      	ldr	r2, [pc, #376]	; (800cba8 <TIM_Base_SetConfig+0x1cc>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d00b      	beq.n	800ca4c <TIM_Base_SetConfig+0x70>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	4a5d      	ldr	r2, [pc, #372]	; (800cbac <TIM_Base_SetConfig+0x1d0>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d007      	beq.n	800ca4c <TIM_Base_SetConfig+0x70>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4a5c      	ldr	r2, [pc, #368]	; (800cbb0 <TIM_Base_SetConfig+0x1d4>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d003      	beq.n	800ca4c <TIM_Base_SetConfig+0x70>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4a5b      	ldr	r2, [pc, #364]	; (800cbb4 <TIM_Base_SetConfig+0x1d8>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d108      	bne.n	800ca5e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	4a4b      	ldr	r2, [pc, #300]	; (800cb90 <TIM_Base_SetConfig+0x1b4>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d043      	beq.n	800caee <TIM_Base_SetConfig+0x112>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	4a4a      	ldr	r2, [pc, #296]	; (800cb94 <TIM_Base_SetConfig+0x1b8>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d03f      	beq.n	800caee <TIM_Base_SetConfig+0x112>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca74:	d03b      	beq.n	800caee <TIM_Base_SetConfig+0x112>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ca7c:	d037      	beq.n	800caee <TIM_Base_SetConfig+0x112>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	4a45      	ldr	r2, [pc, #276]	; (800cb98 <TIM_Base_SetConfig+0x1bc>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d033      	beq.n	800caee <TIM_Base_SetConfig+0x112>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	4a44      	ldr	r2, [pc, #272]	; (800cb9c <TIM_Base_SetConfig+0x1c0>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d02f      	beq.n	800caee <TIM_Base_SetConfig+0x112>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4a43      	ldr	r2, [pc, #268]	; (800cba0 <TIM_Base_SetConfig+0x1c4>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d02b      	beq.n	800caee <TIM_Base_SetConfig+0x112>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4a42      	ldr	r2, [pc, #264]	; (800cba4 <TIM_Base_SetConfig+0x1c8>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d027      	beq.n	800caee <TIM_Base_SetConfig+0x112>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	4a41      	ldr	r2, [pc, #260]	; (800cba8 <TIM_Base_SetConfig+0x1cc>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d023      	beq.n	800caee <TIM_Base_SetConfig+0x112>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	4a40      	ldr	r2, [pc, #256]	; (800cbac <TIM_Base_SetConfig+0x1d0>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d01f      	beq.n	800caee <TIM_Base_SetConfig+0x112>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4a3f      	ldr	r2, [pc, #252]	; (800cbb0 <TIM_Base_SetConfig+0x1d4>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d01b      	beq.n	800caee <TIM_Base_SetConfig+0x112>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4a3e      	ldr	r2, [pc, #248]	; (800cbb4 <TIM_Base_SetConfig+0x1d8>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d017      	beq.n	800caee <TIM_Base_SetConfig+0x112>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4a3d      	ldr	r2, [pc, #244]	; (800cbb8 <TIM_Base_SetConfig+0x1dc>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d013      	beq.n	800caee <TIM_Base_SetConfig+0x112>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4a3c      	ldr	r2, [pc, #240]	; (800cbbc <TIM_Base_SetConfig+0x1e0>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d00f      	beq.n	800caee <TIM_Base_SetConfig+0x112>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4a3b      	ldr	r2, [pc, #236]	; (800cbc0 <TIM_Base_SetConfig+0x1e4>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d00b      	beq.n	800caee <TIM_Base_SetConfig+0x112>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4a3a      	ldr	r2, [pc, #232]	; (800cbc4 <TIM_Base_SetConfig+0x1e8>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d007      	beq.n	800caee <TIM_Base_SetConfig+0x112>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4a39      	ldr	r2, [pc, #228]	; (800cbc8 <TIM_Base_SetConfig+0x1ec>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d003      	beq.n	800caee <TIM_Base_SetConfig+0x112>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4a38      	ldr	r2, [pc, #224]	; (800cbcc <TIM_Base_SetConfig+0x1f0>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d108      	bne.n	800cb00 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800caf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	4313      	orrs	r3, r2
 800cafe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	695b      	ldr	r3, [r3, #20]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	689a      	ldr	r2, [r3, #8]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	681a      	ldr	r2, [r3, #0]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	4a1a      	ldr	r2, [pc, #104]	; (800cb90 <TIM_Base_SetConfig+0x1b4>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d023      	beq.n	800cb74 <TIM_Base_SetConfig+0x198>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4a19      	ldr	r2, [pc, #100]	; (800cb94 <TIM_Base_SetConfig+0x1b8>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d01f      	beq.n	800cb74 <TIM_Base_SetConfig+0x198>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a1e      	ldr	r2, [pc, #120]	; (800cbb0 <TIM_Base_SetConfig+0x1d4>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d01b      	beq.n	800cb74 <TIM_Base_SetConfig+0x198>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a1d      	ldr	r2, [pc, #116]	; (800cbb4 <TIM_Base_SetConfig+0x1d8>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d017      	beq.n	800cb74 <TIM_Base_SetConfig+0x198>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4a1c      	ldr	r2, [pc, #112]	; (800cbb8 <TIM_Base_SetConfig+0x1dc>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d013      	beq.n	800cb74 <TIM_Base_SetConfig+0x198>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4a1b      	ldr	r2, [pc, #108]	; (800cbbc <TIM_Base_SetConfig+0x1e0>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d00f      	beq.n	800cb74 <TIM_Base_SetConfig+0x198>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4a1a      	ldr	r2, [pc, #104]	; (800cbc0 <TIM_Base_SetConfig+0x1e4>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d00b      	beq.n	800cb74 <TIM_Base_SetConfig+0x198>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4a19      	ldr	r2, [pc, #100]	; (800cbc4 <TIM_Base_SetConfig+0x1e8>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d007      	beq.n	800cb74 <TIM_Base_SetConfig+0x198>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4a18      	ldr	r2, [pc, #96]	; (800cbc8 <TIM_Base_SetConfig+0x1ec>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d003      	beq.n	800cb74 <TIM_Base_SetConfig+0x198>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	4a17      	ldr	r2, [pc, #92]	; (800cbcc <TIM_Base_SetConfig+0x1f0>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d103      	bne.n	800cb7c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	691a      	ldr	r2, [r3, #16]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2201      	movs	r2, #1
 800cb80:	615a      	str	r2, [r3, #20]
}
 800cb82:	bf00      	nop
 800cb84:	3714      	adds	r7, #20
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	40012c00 	.word	0x40012c00
 800cb94:	50012c00 	.word	0x50012c00
 800cb98:	40000400 	.word	0x40000400
 800cb9c:	50000400 	.word	0x50000400
 800cba0:	40000800 	.word	0x40000800
 800cba4:	50000800 	.word	0x50000800
 800cba8:	40000c00 	.word	0x40000c00
 800cbac:	50000c00 	.word	0x50000c00
 800cbb0:	40013400 	.word	0x40013400
 800cbb4:	50013400 	.word	0x50013400
 800cbb8:	40014000 	.word	0x40014000
 800cbbc:	50014000 	.word	0x50014000
 800cbc0:	40014400 	.word	0x40014400
 800cbc4:	50014400 	.word	0x50014400
 800cbc8:	40014800 	.word	0x40014800
 800cbcc:	50014800 	.word	0x50014800

0800cbd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b083      	sub	sp, #12
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cbd8:	bf00      	nop
 800cbda:	370c      	adds	r7, #12
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr

0800cbe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cbec:	bf00      	nop
 800cbee:	370c      	adds	r7, #12
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cc00:	bf00      	nop
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cc14:	bf00      	nop
 800cc16:	370c      	adds	r7, #12
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr

0800cc20 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800cc28:	bf00      	nop
 800cc2a:	370c      	adds	r7, #12
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr

0800cc34 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b083      	sub	sp, #12
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800cc3c:	bf00      	nop
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b083      	sub	sp, #12
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800cc50:	bf00      	nop
 800cc52:	370c      	adds	r7, #12
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d101      	bne.n	800cc6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e042      	b.n	800ccf4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d106      	bne.n	800cc86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f7f5 fb5d 	bl	8002340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2224      	movs	r2, #36	; 0x24
 800cc8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f022 0201 	bic.w	r2, r2, #1
 800cc9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d002      	beq.n	800ccac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 fa64 	bl	800d174 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f000 f8b3 	bl	800ce18 <UART_SetConfig>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d101      	bne.n	800ccbc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	e01b      	b.n	800ccf4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	685a      	ldr	r2, [r3, #4]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ccca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	689a      	ldr	r2, [r3, #8]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ccda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f042 0201 	orr.w	r2, r2, #1
 800ccea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 fae3 	bl	800d2b8 <UART_CheckIdleState>
 800ccf2:	4603      	mov	r3, r0
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3708      	adds	r7, #8
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b08a      	sub	sp, #40	; 0x28
 800cd00:	af02      	add	r7, sp, #8
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	603b      	str	r3, [r7, #0]
 800cd08:	4613      	mov	r3, r2
 800cd0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd12:	2b20      	cmp	r3, #32
 800cd14:	d17b      	bne.n	800ce0e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d002      	beq.n	800cd22 <HAL_UART_Transmit+0x26>
 800cd1c:	88fb      	ldrh	r3, [r7, #6]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d101      	bne.n	800cd26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cd22:	2301      	movs	r3, #1
 800cd24:	e074      	b.n	800ce10 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2221      	movs	r2, #33	; 0x21
 800cd32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cd36:	f7f6 f923 	bl	8002f80 <HAL_GetTick>
 800cd3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	88fa      	ldrh	r2, [r7, #6]
 800cd40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	88fa      	ldrh	r2, [r7, #6]
 800cd48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd54:	d108      	bne.n	800cd68 <HAL_UART_Transmit+0x6c>
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	691b      	ldr	r3, [r3, #16]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d104      	bne.n	800cd68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	61bb      	str	r3, [r7, #24]
 800cd66:	e003      	b.n	800cd70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cd70:	e030      	b.n	800cdd4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	9300      	str	r3, [sp, #0]
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	2180      	movs	r1, #128	; 0x80
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	f000 fb45 	bl	800d40c <UART_WaitOnFlagUntilTimeout>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d005      	beq.n	800cd94 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2220      	movs	r2, #32
 800cd8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800cd90:	2303      	movs	r3, #3
 800cd92:	e03d      	b.n	800ce10 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d10b      	bne.n	800cdb2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cd9a:	69bb      	ldr	r3, [r7, #24]
 800cd9c:	881b      	ldrh	r3, [r3, #0]
 800cd9e:	461a      	mov	r2, r3
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cda8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	3302      	adds	r3, #2
 800cdae:	61bb      	str	r3, [r7, #24]
 800cdb0:	e007      	b.n	800cdc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	781a      	ldrb	r2, [r3, #0]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cdbc:	69fb      	ldr	r3, [r7, #28]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	3b01      	subs	r3, #1
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d1c8      	bne.n	800cd72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	9300      	str	r3, [sp, #0]
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	2200      	movs	r2, #0
 800cde8:	2140      	movs	r1, #64	; 0x40
 800cdea:	68f8      	ldr	r0, [r7, #12]
 800cdec:	f000 fb0e 	bl	800d40c <UART_WaitOnFlagUntilTimeout>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d005      	beq.n	800ce02 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2220      	movs	r2, #32
 800cdfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800cdfe:	2303      	movs	r3, #3
 800ce00:	e006      	b.n	800ce10 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2220      	movs	r2, #32
 800ce06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	e000      	b.n	800ce10 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ce0e:	2302      	movs	r3, #2
  }
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3720      	adds	r7, #32
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce1c:	b094      	sub	sp, #80	; 0x50
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ce22:	2300      	movs	r3, #0
 800ce24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	4b83      	ldr	r3, [pc, #524]	; (800d03c <UART_SetConfig+0x224>)
 800ce2e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ce30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce32:	689a      	ldr	r2, [r3, #8]
 800ce34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce36:	691b      	ldr	r3, [r3, #16]
 800ce38:	431a      	orrs	r2, r3
 800ce3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3c:	695b      	ldr	r3, [r3, #20]
 800ce3e:	431a      	orrs	r2, r3
 800ce40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce42:	69db      	ldr	r3, [r3, #28]
 800ce44:	4313      	orrs	r3, r2
 800ce46:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ce48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	497c      	ldr	r1, [pc, #496]	; (800d040 <UART_SetConfig+0x228>)
 800ce50:	4019      	ands	r1, r3
 800ce52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce58:	430b      	orrs	r3, r1
 800ce5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ce66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce68:	68d9      	ldr	r1, [r3, #12]
 800ce6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6c:	681a      	ldr	r2, [r3, #0]
 800ce6e:	ea40 0301 	orr.w	r3, r0, r1
 800ce72:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ce74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce76:	699b      	ldr	r3, [r3, #24]
 800ce78:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ce7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	4b6f      	ldr	r3, [pc, #444]	; (800d03c <UART_SetConfig+0x224>)
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d009      	beq.n	800ce98 <UART_SetConfig+0x80>
 800ce84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce86:	681a      	ldr	r2, [r3, #0]
 800ce88:	4b6e      	ldr	r3, [pc, #440]	; (800d044 <UART_SetConfig+0x22c>)
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d004      	beq.n	800ce98 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ce8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce90:	6a1a      	ldr	r2, [r3, #32]
 800ce92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce94:	4313      	orrs	r3, r2
 800ce96:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ce98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	689b      	ldr	r3, [r3, #8]
 800ce9e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800cea2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800cea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ceac:	430b      	orrs	r3, r1
 800ceae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ceb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb6:	f023 000f 	bic.w	r0, r3, #15
 800ceba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800cebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec0:	681a      	ldr	r2, [r3, #0]
 800cec2:	ea40 0301 	orr.w	r3, r0, r1
 800cec6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	4b5e      	ldr	r3, [pc, #376]	; (800d048 <UART_SetConfig+0x230>)
 800cece:	429a      	cmp	r2, r3
 800ced0:	d102      	bne.n	800ced8 <UART_SetConfig+0xc0>
 800ced2:	2301      	movs	r3, #1
 800ced4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ced6:	e032      	b.n	800cf3e <UART_SetConfig+0x126>
 800ced8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	4b5b      	ldr	r3, [pc, #364]	; (800d04c <UART_SetConfig+0x234>)
 800cede:	429a      	cmp	r2, r3
 800cee0:	d102      	bne.n	800cee8 <UART_SetConfig+0xd0>
 800cee2:	2302      	movs	r3, #2
 800cee4:	64bb      	str	r3, [r7, #72]	; 0x48
 800cee6:	e02a      	b.n	800cf3e <UART_SetConfig+0x126>
 800cee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	4b58      	ldr	r3, [pc, #352]	; (800d050 <UART_SetConfig+0x238>)
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d102      	bne.n	800cef8 <UART_SetConfig+0xe0>
 800cef2:	2304      	movs	r3, #4
 800cef4:	64bb      	str	r3, [r7, #72]	; 0x48
 800cef6:	e022      	b.n	800cf3e <UART_SetConfig+0x126>
 800cef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	4b55      	ldr	r3, [pc, #340]	; (800d054 <UART_SetConfig+0x23c>)
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d102      	bne.n	800cf08 <UART_SetConfig+0xf0>
 800cf02:	2308      	movs	r3, #8
 800cf04:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf06:	e01a      	b.n	800cf3e <UART_SetConfig+0x126>
 800cf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	4b52      	ldr	r3, [pc, #328]	; (800d058 <UART_SetConfig+0x240>)
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d102      	bne.n	800cf18 <UART_SetConfig+0x100>
 800cf12:	2310      	movs	r3, #16
 800cf14:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf16:	e012      	b.n	800cf3e <UART_SetConfig+0x126>
 800cf18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf1a:	681a      	ldr	r2, [r3, #0]
 800cf1c:	4b4f      	ldr	r3, [pc, #316]	; (800d05c <UART_SetConfig+0x244>)
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d103      	bne.n	800cf2a <UART_SetConfig+0x112>
 800cf22:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800cf26:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf28:	e009      	b.n	800cf3e <UART_SetConfig+0x126>
 800cf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	4b43      	ldr	r3, [pc, #268]	; (800d03c <UART_SetConfig+0x224>)
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d102      	bne.n	800cf3a <UART_SetConfig+0x122>
 800cf34:	2320      	movs	r3, #32
 800cf36:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf38:	e001      	b.n	800cf3e <UART_SetConfig+0x126>
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf40:	681a      	ldr	r2, [r3, #0]
 800cf42:	4b3e      	ldr	r3, [pc, #248]	; (800d03c <UART_SetConfig+0x224>)
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d005      	beq.n	800cf54 <UART_SetConfig+0x13c>
 800cf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	4b3d      	ldr	r3, [pc, #244]	; (800d044 <UART_SetConfig+0x22c>)
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	f040 8088 	bne.w	800d064 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800cf54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf56:	2200      	movs	r2, #0
 800cf58:	623b      	str	r3, [r7, #32]
 800cf5a:	627a      	str	r2, [r7, #36]	; 0x24
 800cf5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cf60:	f7fd f9ea 	bl	800a338 <HAL_RCCEx_GetPeriphCLKFreq>
 800cf64:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800cf66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	f000 80eb 	beq.w	800d144 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf72:	4a3b      	ldr	r2, [pc, #236]	; (800d060 <UART_SetConfig+0x248>)
 800cf74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf78:	461a      	mov	r2, r3
 800cf7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf80:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf84:	685a      	ldr	r2, [r3, #4]
 800cf86:	4613      	mov	r3, r2
 800cf88:	005b      	lsls	r3, r3, #1
 800cf8a:	4413      	add	r3, r2
 800cf8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d305      	bcc.n	800cf9e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d903      	bls.n	800cfa6 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800cfa4:	e048      	b.n	800d038 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cfa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	61bb      	str	r3, [r7, #24]
 800cfac:	61fa      	str	r2, [r7, #28]
 800cfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb2:	4a2b      	ldr	r2, [pc, #172]	; (800d060 <UART_SetConfig+0x248>)
 800cfb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	2200      	movs	r2, #0
 800cfbc:	613b      	str	r3, [r7, #16]
 800cfbe:	617a      	str	r2, [r7, #20]
 800cfc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cfc4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cfc8:	f7f3 f970 	bl	80002ac <__aeabi_uldivmod>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	460b      	mov	r3, r1
 800cfd0:	4610      	mov	r0, r2
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	f04f 0200 	mov.w	r2, #0
 800cfd8:	f04f 0300 	mov.w	r3, #0
 800cfdc:	020b      	lsls	r3, r1, #8
 800cfde:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cfe2:	0202      	lsls	r2, r0, #8
 800cfe4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cfe6:	6849      	ldr	r1, [r1, #4]
 800cfe8:	0849      	lsrs	r1, r1, #1
 800cfea:	2000      	movs	r0, #0
 800cfec:	460c      	mov	r4, r1
 800cfee:	4605      	mov	r5, r0
 800cff0:	eb12 0804 	adds.w	r8, r2, r4
 800cff4:	eb43 0905 	adc.w	r9, r3, r5
 800cff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	60bb      	str	r3, [r7, #8]
 800d000:	60fa      	str	r2, [r7, #12]
 800d002:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d006:	4640      	mov	r0, r8
 800d008:	4649      	mov	r1, r9
 800d00a:	f7f3 f94f 	bl	80002ac <__aeabi_uldivmod>
 800d00e:	4602      	mov	r2, r0
 800d010:	460b      	mov	r3, r1
 800d012:	4613      	mov	r3, r2
 800d014:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d01c:	d308      	bcc.n	800d030 <UART_SetConfig+0x218>
 800d01e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d020:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d024:	d204      	bcs.n	800d030 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800d026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d02c:	60da      	str	r2, [r3, #12]
 800d02e:	e003      	b.n	800d038 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800d030:	2301      	movs	r3, #1
 800d032:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800d036:	e085      	b.n	800d144 <UART_SetConfig+0x32c>
 800d038:	e084      	b.n	800d144 <UART_SetConfig+0x32c>
 800d03a:	bf00      	nop
 800d03c:	46002400 	.word	0x46002400
 800d040:	cfff69f3 	.word	0xcfff69f3
 800d044:	56002400 	.word	0x56002400
 800d048:	40013800 	.word	0x40013800
 800d04c:	40004400 	.word	0x40004400
 800d050:	40004800 	.word	0x40004800
 800d054:	40004c00 	.word	0x40004c00
 800d058:	40005000 	.word	0x40005000
 800d05c:	40006400 	.word	0x40006400
 800d060:	0800d934 	.word	0x0800d934
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d066:	69db      	ldr	r3, [r3, #28]
 800d068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d06c:	d13c      	bne.n	800d0e8 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d06e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d070:	2200      	movs	r2, #0
 800d072:	603b      	str	r3, [r7, #0]
 800d074:	607a      	str	r2, [r7, #4]
 800d076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d07a:	f7fd f95d 	bl	800a338 <HAL_RCCEx_GetPeriphCLKFreq>
 800d07e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d082:	2b00      	cmp	r3, #0
 800d084:	d05e      	beq.n	800d144 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d08a:	4a39      	ldr	r2, [pc, #228]	; (800d170 <UART_SetConfig+0x358>)
 800d08c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d090:	461a      	mov	r2, r3
 800d092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d094:	fbb3 f3f2 	udiv	r3, r3, r2
 800d098:	005a      	lsls	r2, r3, #1
 800d09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	085b      	lsrs	r3, r3, #1
 800d0a0:	441a      	add	r2, r3
 800d0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0ae:	2b0f      	cmp	r3, #15
 800d0b0:	d916      	bls.n	800d0e0 <UART_SetConfig+0x2c8>
 800d0b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0b8:	d212      	bcs.n	800d0e0 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d0ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	f023 030f 	bic.w	r3, r3, #15
 800d0c2:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0c6:	085b      	lsrs	r3, r3, #1
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	f003 0307 	and.w	r3, r3, #7
 800d0ce:	b29a      	uxth	r2, r3
 800d0d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800d0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d0dc:	60da      	str	r2, [r3, #12]
 800d0de:	e031      	b.n	800d144 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d0e6:	e02d      	b.n	800d144 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d0e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	469a      	mov	sl, r3
 800d0ee:	4693      	mov	fp, r2
 800d0f0:	4650      	mov	r0, sl
 800d0f2:	4659      	mov	r1, fp
 800d0f4:	f7fd f920 	bl	800a338 <HAL_RCCEx_GetPeriphCLKFreq>
 800d0f8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800d0fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d021      	beq.n	800d144 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d104:	4a1a      	ldr	r2, [pc, #104]	; (800d170 <UART_SetConfig+0x358>)
 800d106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d10a:	461a      	mov	r2, r3
 800d10c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d10e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	085b      	lsrs	r3, r3, #1
 800d118:	441a      	add	r2, r3
 800d11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d122:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d126:	2b0f      	cmp	r3, #15
 800d128:	d909      	bls.n	800d13e <UART_SetConfig+0x326>
 800d12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d12c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d130:	d205      	bcs.n	800d13e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d134:	b29a      	uxth	r2, r3
 800d136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	60da      	str	r2, [r3, #12]
 800d13c:	e002      	b.n	800d144 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d13e:	2301      	movs	r3, #1
 800d140:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d146:	2201      	movs	r2, #1
 800d148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14e:	2201      	movs	r2, #1
 800d150:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d156:	2200      	movs	r2, #0
 800d158:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15c:	2200      	movs	r2, #0
 800d15e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d160:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d164:	4618      	mov	r0, r3
 800d166:	3750      	adds	r7, #80	; 0x50
 800d168:	46bd      	mov	sp, r7
 800d16a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d16e:	bf00      	nop
 800d170:	0800d934 	.word	0x0800d934

0800d174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d180:	f003 0308 	and.w	r3, r3, #8
 800d184:	2b00      	cmp	r3, #0
 800d186:	d00a      	beq.n	800d19e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	430a      	orrs	r2, r1
 800d19c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a2:	f003 0301 	and.w	r3, r3, #1
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d00a      	beq.n	800d1c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	430a      	orrs	r2, r1
 800d1be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1c4:	f003 0302 	and.w	r3, r3, #2
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d00a      	beq.n	800d1e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	430a      	orrs	r2, r1
 800d1e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1e6:	f003 0304 	and.w	r3, r3, #4
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00a      	beq.n	800d204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	430a      	orrs	r2, r1
 800d202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d208:	f003 0310 	and.w	r3, r3, #16
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00a      	beq.n	800d226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	689b      	ldr	r3, [r3, #8]
 800d216:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	430a      	orrs	r2, r1
 800d224:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d22a:	f003 0320 	and.w	r3, r3, #32
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d00a      	beq.n	800d248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	430a      	orrs	r2, r1
 800d246:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d24c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d250:	2b00      	cmp	r3, #0
 800d252:	d01a      	beq.n	800d28a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	430a      	orrs	r2, r1
 800d268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d26e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d272:	d10a      	bne.n	800d28a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	430a      	orrs	r2, r1
 800d288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00a      	beq.n	800d2ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	430a      	orrs	r2, r1
 800d2aa:	605a      	str	r2, [r3, #4]
  }
}
 800d2ac:	bf00      	nop
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b098      	sub	sp, #96	; 0x60
 800d2bc:	af02      	add	r7, sp, #8
 800d2be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d2c8:	f7f5 fe5a 	bl	8002f80 <HAL_GetTick>
 800d2cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f003 0308 	and.w	r3, r3, #8
 800d2d8:	2b08      	cmp	r3, #8
 800d2da:	d12f      	bne.n	800d33c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d2dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d2e0:	9300      	str	r3, [sp, #0]
 800d2e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 f88e 	bl	800d40c <UART_WaitOnFlagUntilTimeout>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d022      	beq.n	800d33c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fe:	e853 3f00 	ldrex	r3, [r3]
 800d302:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d30a:	653b      	str	r3, [r7, #80]	; 0x50
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	461a      	mov	r2, r3
 800d312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d314:	647b      	str	r3, [r7, #68]	; 0x44
 800d316:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d318:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d31a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d31c:	e841 2300 	strex	r3, r2, [r1]
 800d320:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d324:	2b00      	cmp	r3, #0
 800d326:	d1e6      	bne.n	800d2f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2220      	movs	r2, #32
 800d32c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d338:	2303      	movs	r3, #3
 800d33a:	e063      	b.n	800d404 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f003 0304 	and.w	r3, r3, #4
 800d346:	2b04      	cmp	r3, #4
 800d348:	d149      	bne.n	800d3de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d34a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d34e:	9300      	str	r3, [sp, #0]
 800d350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d352:	2200      	movs	r2, #0
 800d354:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f000 f857 	bl	800d40c <UART_WaitOnFlagUntilTimeout>
 800d35e:	4603      	mov	r3, r0
 800d360:	2b00      	cmp	r3, #0
 800d362:	d03c      	beq.n	800d3de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36c:	e853 3f00 	ldrex	r3, [r3]
 800d370:	623b      	str	r3, [r7, #32]
   return(result);
 800d372:	6a3b      	ldr	r3, [r7, #32]
 800d374:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d378:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	461a      	mov	r2, r3
 800d380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d382:	633b      	str	r3, [r7, #48]	; 0x30
 800d384:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d386:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d38a:	e841 2300 	strex	r3, r2, [r1]
 800d38e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d392:	2b00      	cmp	r3, #0
 800d394:	d1e6      	bne.n	800d364 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	3308      	adds	r3, #8
 800d39c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	e853 3f00 	ldrex	r3, [r3]
 800d3a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	f023 0301 	bic.w	r3, r3, #1
 800d3ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	3308      	adds	r3, #8
 800d3b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3b6:	61fa      	str	r2, [r7, #28]
 800d3b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ba:	69b9      	ldr	r1, [r7, #24]
 800d3bc:	69fa      	ldr	r2, [r7, #28]
 800d3be:	e841 2300 	strex	r3, r2, [r1]
 800d3c2:	617b      	str	r3, [r7, #20]
   return(result);
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d1e5      	bne.n	800d396 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2220      	movs	r2, #32
 800d3ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d3da:	2303      	movs	r3, #3
 800d3dc:	e012      	b.n	800d404 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2220      	movs	r2, #32
 800d3e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2220      	movs	r2, #32
 800d3ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d402:	2300      	movs	r3, #0
}
 800d404:	4618      	mov	r0, r3
 800d406:	3758      	adds	r7, #88	; 0x58
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	60b9      	str	r1, [r7, #8]
 800d416:	603b      	str	r3, [r7, #0]
 800d418:	4613      	mov	r3, r2
 800d41a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d41c:	e049      	b.n	800d4b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d424:	d045      	beq.n	800d4b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d426:	f7f5 fdab 	bl	8002f80 <HAL_GetTick>
 800d42a:	4602      	mov	r2, r0
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	1ad3      	subs	r3, r2, r3
 800d430:	69ba      	ldr	r2, [r7, #24]
 800d432:	429a      	cmp	r2, r3
 800d434:	d302      	bcc.n	800d43c <UART_WaitOnFlagUntilTimeout+0x30>
 800d436:	69bb      	ldr	r3, [r7, #24]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d101      	bne.n	800d440 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d43c:	2303      	movs	r3, #3
 800d43e:	e048      	b.n	800d4d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f003 0304 	and.w	r3, r3, #4
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d031      	beq.n	800d4b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	69db      	ldr	r3, [r3, #28]
 800d454:	f003 0308 	and.w	r3, r3, #8
 800d458:	2b08      	cmp	r3, #8
 800d45a:	d110      	bne.n	800d47e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2208      	movs	r2, #8
 800d462:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	f000 f838 	bl	800d4da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2208      	movs	r2, #8
 800d46e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2200      	movs	r2, #0
 800d476:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800d47a:	2301      	movs	r3, #1
 800d47c:	e029      	b.n	800d4d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	69db      	ldr	r3, [r3, #28]
 800d484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d48c:	d111      	bne.n	800d4b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d496:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d498:	68f8      	ldr	r0, [r7, #12]
 800d49a:	f000 f81e 	bl	800d4da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2220      	movs	r2, #32
 800d4a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d4ae:	2303      	movs	r3, #3
 800d4b0:	e00f      	b.n	800d4d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	69da      	ldr	r2, [r3, #28]
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	4013      	ands	r3, r2
 800d4bc:	68ba      	ldr	r2, [r7, #8]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	bf0c      	ite	eq
 800d4c2:	2301      	moveq	r3, #1
 800d4c4:	2300      	movne	r3, #0
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	79fb      	ldrb	r3, [r7, #7]
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d0a6      	beq.n	800d41e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d4d0:	2300      	movs	r3, #0
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3710      	adds	r7, #16
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}

0800d4da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d4da:	b480      	push	{r7}
 800d4dc:	b095      	sub	sp, #84	; 0x54
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ea:	e853 3f00 	ldrex	r3, [r3]
 800d4ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d4f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d500:	643b      	str	r3, [r7, #64]	; 0x40
 800d502:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d504:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d506:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d508:	e841 2300 	strex	r3, r2, [r1]
 800d50c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d510:	2b00      	cmp	r3, #0
 800d512:	d1e6      	bne.n	800d4e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	3308      	adds	r3, #8
 800d51a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d51c:	6a3b      	ldr	r3, [r7, #32]
 800d51e:	e853 3f00 	ldrex	r3, [r3]
 800d522:	61fb      	str	r3, [r7, #28]
   return(result);
 800d524:	69fb      	ldr	r3, [r7, #28]
 800d526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d52a:	f023 0301 	bic.w	r3, r3, #1
 800d52e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	3308      	adds	r3, #8
 800d536:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d538:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d53a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d53c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d53e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d540:	e841 2300 	strex	r3, r2, [r1]
 800d544:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d1e3      	bne.n	800d514 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d550:	2b01      	cmp	r3, #1
 800d552:	d118      	bne.n	800d586 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	e853 3f00 	ldrex	r3, [r3]
 800d560:	60bb      	str	r3, [r7, #8]
   return(result);
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	f023 0310 	bic.w	r3, r3, #16
 800d568:	647b      	str	r3, [r7, #68]	; 0x44
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	461a      	mov	r2, r3
 800d570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d572:	61bb      	str	r3, [r7, #24]
 800d574:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d576:	6979      	ldr	r1, [r7, #20]
 800d578:	69ba      	ldr	r2, [r7, #24]
 800d57a:	e841 2300 	strex	r3, r2, [r1]
 800d57e:	613b      	str	r3, [r7, #16]
   return(result);
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d1e6      	bne.n	800d554 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2220      	movs	r2, #32
 800d58a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2200      	movs	r2, #0
 800d592:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2200      	movs	r2, #0
 800d598:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d59a:	bf00      	nop
 800d59c:	3754      	adds	r7, #84	; 0x54
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr

0800d5a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d5a6:	b480      	push	{r7}
 800d5a8:	b085      	sub	sp, #20
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d101      	bne.n	800d5bc <HAL_UARTEx_DisableFifoMode+0x16>
 800d5b8:	2302      	movs	r3, #2
 800d5ba:	e027      	b.n	800d60c <HAL_UARTEx_DisableFifoMode+0x66>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2224      	movs	r2, #36	; 0x24
 800d5c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f022 0201 	bic.w	r2, r2, #1
 800d5e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d5ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	68fa      	ldr	r2, [r7, #12]
 800d5f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2220      	movs	r2, #32
 800d5fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2200      	movs	r2, #0
 800d606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d60a:	2300      	movs	r3, #0
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3714      	adds	r7, #20
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr

0800d618 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d101      	bne.n	800d630 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d62c:	2302      	movs	r3, #2
 800d62e:	e02d      	b.n	800d68c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2201      	movs	r2, #1
 800d634:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2224      	movs	r2, #36	; 0x24
 800d63c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f022 0201 	bic.w	r2, r2, #1
 800d656:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	689b      	ldr	r3, [r3, #8]
 800d65e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	683a      	ldr	r2, [r7, #0]
 800d668:	430a      	orrs	r2, r1
 800d66a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 f84f 	bl	800d710 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	68fa      	ldr	r2, [r7, #12]
 800d678:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2220      	movs	r2, #32
 800d67e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d68a:	2300      	movs	r3, #0
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3710      	adds	r7, #16
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d101      	bne.n	800d6ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d6a8:	2302      	movs	r3, #2
 800d6aa:	e02d      	b.n	800d708 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2224      	movs	r2, #36	; 0x24
 800d6b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f022 0201 	bic.w	r2, r2, #1
 800d6d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	689b      	ldr	r3, [r3, #8]
 800d6da:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	683a      	ldr	r2, [r7, #0]
 800d6e4:	430a      	orrs	r2, r1
 800d6e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 f811 	bl	800d710 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	68fa      	ldr	r2, [r7, #12]
 800d6f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2220      	movs	r2, #32
 800d6fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d706:	2300      	movs	r3, #0
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3710      	adds	r7, #16
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d710:	b480      	push	{r7}
 800d712:	b085      	sub	sp, #20
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d108      	bne.n	800d732 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2201      	movs	r2, #1
 800d724:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2201      	movs	r2, #1
 800d72c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d730:	e031      	b.n	800d796 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d732:	2308      	movs	r3, #8
 800d734:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d736:	2308      	movs	r3, #8
 800d738:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	689b      	ldr	r3, [r3, #8]
 800d740:	0e5b      	lsrs	r3, r3, #25
 800d742:	b2db      	uxtb	r3, r3
 800d744:	f003 0307 	and.w	r3, r3, #7
 800d748:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	689b      	ldr	r3, [r3, #8]
 800d750:	0f5b      	lsrs	r3, r3, #29
 800d752:	b2db      	uxtb	r3, r3
 800d754:	f003 0307 	and.w	r3, r3, #7
 800d758:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d75a:	7bbb      	ldrb	r3, [r7, #14]
 800d75c:	7b3a      	ldrb	r2, [r7, #12]
 800d75e:	4911      	ldr	r1, [pc, #68]	; (800d7a4 <UARTEx_SetNbDataToProcess+0x94>)
 800d760:	5c8a      	ldrb	r2, [r1, r2]
 800d762:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d766:	7b3a      	ldrb	r2, [r7, #12]
 800d768:	490f      	ldr	r1, [pc, #60]	; (800d7a8 <UARTEx_SetNbDataToProcess+0x98>)
 800d76a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d76c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d770:	b29a      	uxth	r2, r3
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d778:	7bfb      	ldrb	r3, [r7, #15]
 800d77a:	7b7a      	ldrb	r2, [r7, #13]
 800d77c:	4909      	ldr	r1, [pc, #36]	; (800d7a4 <UARTEx_SetNbDataToProcess+0x94>)
 800d77e:	5c8a      	ldrb	r2, [r1, r2]
 800d780:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d784:	7b7a      	ldrb	r2, [r7, #13]
 800d786:	4908      	ldr	r1, [pc, #32]	; (800d7a8 <UARTEx_SetNbDataToProcess+0x98>)
 800d788:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d78a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d78e:	b29a      	uxth	r2, r3
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d796:	bf00      	nop
 800d798:	3714      	adds	r7, #20
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop
 800d7a4:	0800d94c 	.word	0x0800d94c
 800d7a8:	0800d954 	.word	0x0800d954

0800d7ac <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f043 0202 	orr.w	r2, r3, #2
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	685a      	ldr	r2, [r3, #4]
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	021b      	lsls	r3, r3, #8
 800d7cc:	431a      	orrs	r2, r3
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f023 0202 	bic.w	r2, r3, #2
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	601a      	str	r2, [r3, #0]
}
 800d7de:	bf00      	nop
 800d7e0:	370c      	adds	r7, #12
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr

0800d7ea <memset>:
 800d7ea:	4402      	add	r2, r0
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d100      	bne.n	800d7f4 <memset+0xa>
 800d7f2:	4770      	bx	lr
 800d7f4:	f803 1b01 	strb.w	r1, [r3], #1
 800d7f8:	e7f9      	b.n	800d7ee <memset+0x4>
	...

0800d7fc <__libc_init_array>:
 800d7fc:	b570      	push	{r4, r5, r6, lr}
 800d7fe:	4d0d      	ldr	r5, [pc, #52]	; (800d834 <__libc_init_array+0x38>)
 800d800:	2600      	movs	r6, #0
 800d802:	4c0d      	ldr	r4, [pc, #52]	; (800d838 <__libc_init_array+0x3c>)
 800d804:	1b64      	subs	r4, r4, r5
 800d806:	10a4      	asrs	r4, r4, #2
 800d808:	42a6      	cmp	r6, r4
 800d80a:	d109      	bne.n	800d820 <__libc_init_array+0x24>
 800d80c:	4d0b      	ldr	r5, [pc, #44]	; (800d83c <__libc_init_array+0x40>)
 800d80e:	2600      	movs	r6, #0
 800d810:	4c0b      	ldr	r4, [pc, #44]	; (800d840 <__libc_init_array+0x44>)
 800d812:	f000 f817 	bl	800d844 <_init>
 800d816:	1b64      	subs	r4, r4, r5
 800d818:	10a4      	asrs	r4, r4, #2
 800d81a:	42a6      	cmp	r6, r4
 800d81c:	d105      	bne.n	800d82a <__libc_init_array+0x2e>
 800d81e:	bd70      	pop	{r4, r5, r6, pc}
 800d820:	f855 3b04 	ldr.w	r3, [r5], #4
 800d824:	3601      	adds	r6, #1
 800d826:	4798      	blx	r3
 800d828:	e7ee      	b.n	800d808 <__libc_init_array+0xc>
 800d82a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d82e:	3601      	adds	r6, #1
 800d830:	4798      	blx	r3
 800d832:	e7f2      	b.n	800d81a <__libc_init_array+0x1e>
 800d834:	0800d964 	.word	0x0800d964
 800d838:	0800d964 	.word	0x0800d964
 800d83c:	0800d964 	.word	0x0800d964
 800d840:	0800d968 	.word	0x0800d968

0800d844 <_init>:
 800d844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d846:	bf00      	nop
 800d848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d84a:	bc08      	pop	{r3}
 800d84c:	469e      	mov	lr, r3
 800d84e:	4770      	bx	lr

0800d850 <_fini>:
 800d850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d852:	bf00      	nop
 800d854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d856:	bc08      	pop	{r3}
 800d858:	469e      	mov	lr, r3
 800d85a:	4770      	bx	lr
