
MAX30102_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb04  0800026c  0800026c  0000126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800cd70  0800cd70  0000dd70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ce70  0800ce70  0000de70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ce78  0800ce78  0000de78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ce7c  0800ce7c  0000de7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000d09  20000000  0800ce80  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000828  20000d0c  0800db89  0000ed0c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001534  0800db89  0000f534  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000ed09  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002ff17  00000000  00000000  0000ed3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000507c  00000000  00000000  0003ec56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000027d8  00000000  00000000  00043cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001f12  00000000  00000000  000464b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007a7b  00000000  00000000  000483c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000351fb  00000000  00000000  0004fe3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a1803  00000000  00000000  00085038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022683b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ae1c  00000000  00000000  00226880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008e  00000000  00000000  0023169c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800026c <__do_global_dtors_aux>:
 800026c:	b510      	push	{r4, lr}
 800026e:	4c05      	ldr	r4, [pc, #20]	@ (8000284 <__do_global_dtors_aux+0x18>)
 8000270:	7823      	ldrb	r3, [r4, #0]
 8000272:	b933      	cbnz	r3, 8000282 <__do_global_dtors_aux+0x16>
 8000274:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <__do_global_dtors_aux+0x1c>)
 8000276:	b113      	cbz	r3, 800027e <__do_global_dtors_aux+0x12>
 8000278:	4804      	ldr	r0, [pc, #16]	@ (800028c <__do_global_dtors_aux+0x20>)
 800027a:	f3af 8000 	nop.w
 800027e:	2301      	movs	r3, #1
 8000280:	7023      	strb	r3, [r4, #0]
 8000282:	bd10      	pop	{r4, pc}
 8000284:	20000d0c 	.word	0x20000d0c
 8000288:	00000000 	.word	0x00000000
 800028c:	0800cd58 	.word	0x0800cd58

08000290 <frame_dummy>:
 8000290:	b508      	push	{r3, lr}
 8000292:	4b03      	ldr	r3, [pc, #12]	@ (80002a0 <frame_dummy+0x10>)
 8000294:	b11b      	cbz	r3, 800029e <frame_dummy+0xe>
 8000296:	4903      	ldr	r1, [pc, #12]	@ (80002a4 <frame_dummy+0x14>)
 8000298:	4803      	ldr	r0, [pc, #12]	@ (80002a8 <frame_dummy+0x18>)
 800029a:	f3af 8000 	nop.w
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	00000000 	.word	0x00000000
 80002a4:	20000d10 	.word	0x20000d10
 80002a8:	0800cd58 	.word	0x0800cd58

080002ac <__aeabi_uldivmod>:
 80002ac:	b953      	cbnz	r3, 80002c4 <__aeabi_uldivmod+0x18>
 80002ae:	b94a      	cbnz	r2, 80002c4 <__aeabi_uldivmod+0x18>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	bf08      	it	eq
 80002b4:	2800      	cmpeq	r0, #0
 80002b6:	bf1c      	itt	ne
 80002b8:	f04f 31ff 	movne.w	r1, #4294967295
 80002bc:	f04f 30ff 	movne.w	r0, #4294967295
 80002c0:	f000 b97e 	b.w	80005c0 <__aeabi_idiv0>
 80002c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002cc:	f000 f806 	bl	80002dc <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4770      	bx	lr

080002dc <__udivmoddi4>:
 80002dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002e2:	460c      	mov	r4, r1
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d14d      	bne.n	8000384 <__udivmoddi4+0xa8>
 80002e8:	428a      	cmp	r2, r1
 80002ea:	460f      	mov	r7, r1
 80002ec:	4684      	mov	ip, r0
 80002ee:	4696      	mov	lr, r2
 80002f0:	fab2 f382 	clz	r3, r2
 80002f4:	d960      	bls.n	80003b8 <__udivmoddi4+0xdc>
 80002f6:	b14b      	cbz	r3, 800030c <__udivmoddi4+0x30>
 80002f8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002fc:	f1c3 0220 	rsb	r2, r3, #32
 8000300:	409f      	lsls	r7, r3
 8000302:	fa00 fc03 	lsl.w	ip, r0, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000310:	fa1f f48e 	uxth.w	r4, lr
 8000314:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000318:	fbb7 f1f6 	udiv	r1, r7, r6
 800031c:	fb06 7711 	mls	r7, r6, r1, r7
 8000320:	fb01 f004 	mul.w	r0, r1, r4
 8000324:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000328:	4290      	cmp	r0, r2
 800032a:	d908      	bls.n	800033e <__udivmoddi4+0x62>
 800032c:	eb1e 0202 	adds.w	r2, lr, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x60>
 8000336:	4290      	cmp	r0, r2
 8000338:	f200 812d 	bhi.w	8000596 <__udivmoddi4+0x2ba>
 800033c:	4639      	mov	r1, r7
 800033e:	1a12      	subs	r2, r2, r0
 8000340:	fa1f fc8c 	uxth.w	ip, ip
 8000344:	fbb2 f0f6 	udiv	r0, r2, r6
 8000348:	fb06 2210 	mls	r2, r6, r0, r2
 800034c:	fb00 f404 	mul.w	r4, r0, r4
 8000350:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000354:	4564      	cmp	r4, ip
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x8e>
 8000358:	eb1e 0c0c 	adds.w	ip, lr, ip
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x8c>
 8000362:	4564      	cmp	r4, ip
 8000364:	f200 811a 	bhi.w	800059c <__udivmoddi4+0x2c0>
 8000368:	4610      	mov	r0, r2
 800036a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800036e:	ebac 0c04 	sub.w	ip, ip, r4
 8000372:	2100      	movs	r1, #0
 8000374:	b125      	cbz	r5, 8000380 <__udivmoddi4+0xa4>
 8000376:	fa2c f303 	lsr.w	r3, ip, r3
 800037a:	2200      	movs	r2, #0
 800037c:	e9c5 3200 	strd	r3, r2, [r5]
 8000380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d905      	bls.n	8000394 <__udivmoddi4+0xb8>
 8000388:	b10d      	cbz	r5, 800038e <__udivmoddi4+0xb2>
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	2100      	movs	r1, #0
 8000390:	4608      	mov	r0, r1
 8000392:	e7f5      	b.n	8000380 <__udivmoddi4+0xa4>
 8000394:	fab3 f183 	clz	r1, r3
 8000398:	2900      	cmp	r1, #0
 800039a:	d14d      	bne.n	8000438 <__udivmoddi4+0x15c>
 800039c:	42a3      	cmp	r3, r4
 800039e:	f0c0 80f2 	bcc.w	8000586 <__udivmoddi4+0x2aa>
 80003a2:	4290      	cmp	r0, r2
 80003a4:	f080 80ef 	bcs.w	8000586 <__udivmoddi4+0x2aa>
 80003a8:	4606      	mov	r6, r0
 80003aa:	4623      	mov	r3, r4
 80003ac:	4608      	mov	r0, r1
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e6      	beq.n	8000380 <__udivmoddi4+0xa4>
 80003b2:	e9c5 6300 	strd	r6, r3, [r5]
 80003b6:	e7e3      	b.n	8000380 <__udivmoddi4+0xa4>
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	f040 80a2 	bne.w	8000502 <__udivmoddi4+0x226>
 80003be:	1a8a      	subs	r2, r1, r2
 80003c0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003c4:	fa1f f68e 	uxth.w	r6, lr
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ce:	fb07 2014 	mls	r0, r7, r4, r2
 80003d2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb06 f004 	mul.w	r0, r6, r4
 80003de:	4290      	cmp	r0, r2
 80003e0:	d90f      	bls.n	8000402 <__udivmoddi4+0x126>
 80003e2:	eb1e 0202 	adds.w	r2, lr, r2
 80003e6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	f04f 0901 	movcs.w	r9, #1
 80003f0:	f04f 0900 	movcc.w	r9, #0
 80003f4:	4290      	cmp	r0, r2
 80003f6:	d903      	bls.n	8000400 <__udivmoddi4+0x124>
 80003f8:	f1b9 0f00 	cmp.w	r9, #0
 80003fc:	f000 80c8 	beq.w	8000590 <__udivmoddi4+0x2b4>
 8000400:	4644      	mov	r4, r8
 8000402:	1a12      	subs	r2, r2, r0
 8000404:	fa1f fc8c 	uxth.w	ip, ip
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	fb00 f606 	mul.w	r6, r0, r6
 8000414:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000418:	4566      	cmp	r6, ip
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x152>
 800041c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x150>
 8000426:	4566      	cmp	r6, ip
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c6>
 800042c:	4610      	mov	r0, r2
 800042e:	ebac 0c06 	sub.w	ip, ip, r6
 8000432:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000436:	e79d      	b.n	8000374 <__udivmoddi4+0x98>
 8000438:	f1c1 0620 	rsb	r6, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	fa20 fc06 	lsr.w	ip, r0, r6
 800044a:	40f4      	lsrs	r4, r6
 800044c:	408a      	lsls	r2, r1
 800044e:	431f      	orrs	r7, r3
 8000450:	ea4e 030c 	orr.w	r3, lr, ip
 8000454:	fa00 fe01 	lsl.w	lr, r0, r1
 8000458:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800045c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000460:	fa1f fc87 	uxth.w	ip, r7
 8000464:	fbb4 f0f8 	udiv	r0, r4, r8
 8000468:	fb08 4410 	mls	r4, r8, r0, r4
 800046c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000470:	fb00 f90c 	mul.w	r9, r0, ip
 8000474:	45a1      	cmp	r9, r4
 8000476:	d90e      	bls.n	8000496 <__udivmoddi4+0x1ba>
 8000478:	193c      	adds	r4, r7, r4
 800047a:	f100 3aff 	add.w	sl, r0, #4294967295
 800047e:	bf2c      	ite	cs
 8000480:	f04f 0b01 	movcs.w	fp, #1
 8000484:	f04f 0b00 	movcc.w	fp, #0
 8000488:	45a1      	cmp	r9, r4
 800048a:	d903      	bls.n	8000494 <__udivmoddi4+0x1b8>
 800048c:	f1bb 0f00 	cmp.w	fp, #0
 8000490:	f000 8093 	beq.w	80005ba <__udivmoddi4+0x2de>
 8000494:	4650      	mov	r0, sl
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f8 	udiv	r3, r4, r8
 80004a2:	fb08 4413 	mls	r4, r8, r3, r4
 80004a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004aa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d906      	bls.n	80004c0 <__udivmoddi4+0x1e4>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x1e2>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d87a      	bhi.n	80005b4 <__udivmoddi4+0x2d8>
 80004be:	4643      	mov	r3, r8
 80004c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c4:	eba4 040c 	sub.w	r4, r4, ip
 80004c8:	fba0 9802 	umull	r9, r8, r0, r2
 80004cc:	4544      	cmp	r4, r8
 80004ce:	46cc      	mov	ip, r9
 80004d0:	4643      	mov	r3, r8
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x1fe>
 80004d4:	d106      	bne.n	80004e4 <__udivmoddi4+0x208>
 80004d6:	45ce      	cmp	lr, r9
 80004d8:	d204      	bcs.n	80004e4 <__udivmoddi4+0x208>
 80004da:	3801      	subs	r0, #1
 80004dc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e0:	eb68 0307 	sbc.w	r3, r8, r7
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x222>
 80004e6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ea:	eb64 0403 	sbc.w	r4, r4, r3
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	40cc      	lsrs	r4, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e73e      	b.n	8000380 <__udivmoddi4+0xa4>
 8000502:	fa02 fe03 	lsl.w	lr, r2, r3
 8000506:	f1c3 0120 	rsb	r1, r3, #32
 800050a:	fa04 f203 	lsl.w	r2, r4, r3
 800050e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000512:	40cc      	lsrs	r4, r1
 8000514:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000518:	fa20 f101 	lsr.w	r1, r0, r1
 800051c:	fa1f f68e 	uxth.w	r6, lr
 8000520:	fbb4 f0f7 	udiv	r0, r4, r7
 8000524:	430a      	orrs	r2, r1
 8000526:	fb07 4410 	mls	r4, r7, r0, r4
 800052a:	0c11      	lsrs	r1, r2, #16
 800052c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000530:	fb00 f406 	mul.w	r4, r0, r6
 8000534:	428c      	cmp	r4, r1
 8000536:	d90e      	bls.n	8000556 <__udivmoddi4+0x27a>
 8000538:	eb1e 0101 	adds.w	r1, lr, r1
 800053c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0901 	movcs.w	r9, #1
 8000546:	f04f 0900 	movcc.w	r9, #0
 800054a:	428c      	cmp	r4, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x278>
 800054e:	f1b9 0f00 	cmp.w	r9, #0
 8000552:	d02c      	beq.n	80005ae <__udivmoddi4+0x2d2>
 8000554:	4640      	mov	r0, r8
 8000556:	1b09      	subs	r1, r1, r4
 8000558:	b292      	uxth	r2, r2
 800055a:	fbb1 f4f7 	udiv	r4, r1, r7
 800055e:	fb07 1114 	mls	r1, r7, r4, r1
 8000562:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000566:	fb04 f106 	mul.w	r1, r4, r6
 800056a:	4291      	cmp	r1, r2
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x2a2>
 800056e:	eb1e 0202 	adds.w	r2, lr, r2
 8000572:	f104 38ff 	add.w	r8, r4, #4294967295
 8000576:	d201      	bcs.n	800057c <__udivmoddi4+0x2a0>
 8000578:	4291      	cmp	r1, r2
 800057a:	d815      	bhi.n	80005a8 <__udivmoddi4+0x2cc>
 800057c:	4644      	mov	r4, r8
 800057e:	1a52      	subs	r2, r2, r1
 8000580:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000584:	e721      	b.n	80003ca <__udivmoddi4+0xee>
 8000586:	1a86      	subs	r6, r0, r2
 8000588:	eb64 0303 	sbc.w	r3, r4, r3
 800058c:	2001      	movs	r0, #1
 800058e:	e70e      	b.n	80003ae <__udivmoddi4+0xd2>
 8000590:	3c02      	subs	r4, #2
 8000592:	4472      	add	r2, lr
 8000594:	e735      	b.n	8000402 <__udivmoddi4+0x126>
 8000596:	3902      	subs	r1, #2
 8000598:	4472      	add	r2, lr
 800059a:	e6d0      	b.n	800033e <__udivmoddi4+0x62>
 800059c:	44f4      	add	ip, lr
 800059e:	3802      	subs	r0, #2
 80005a0:	e6e3      	b.n	800036a <__udivmoddi4+0x8e>
 80005a2:	44f4      	add	ip, lr
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x152>
 80005a8:	3c02      	subs	r4, #2
 80005aa:	4472      	add	r2, lr
 80005ac:	e7e7      	b.n	800057e <__udivmoddi4+0x2a2>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4471      	add	r1, lr
 80005b2:	e7d0      	b.n	8000556 <__udivmoddi4+0x27a>
 80005b4:	3b02      	subs	r3, #2
 80005b6:	443c      	add	r4, r7
 80005b8:	e782      	b.n	80004c0 <__udivmoddi4+0x1e4>
 80005ba:	3802      	subs	r0, #2
 80005bc:	443c      	add	r4, r7
 80005be:	e76a      	b.n	8000496 <__udivmoddi4+0x1ba>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f002 fc96 	bl	8002ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f832 	bl	8000634 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005d0:	f000 f89a 	bl	8000708 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 ffdc 	bl	8001590 <MX_GPIO_Init>
  MX_DCACHE1_Init();
 80005d8:	f000 f914 	bl	8000804 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 80005dc:	f000 f928 	bl	8000830 <MX_DCACHE2_Init>
  MX_ICACHE_Init();
 80005e0:	f000 fc1a 	bl	8000e18 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80005e4:	f000 fc4a 	bl	8000e7c <MX_LPUART1_UART_Init>
  MX_OCTOSPI1_Init();
 80005e8:	f000 fdb0 	bl	800114c <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 80005ec:	f000 f8e8 	bl	80007c0 <MX_CRC_Init>
  MX_DMA2D_Init();
 80005f0:	f000 f934 	bl	800085c <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80005f4:	f000 f970 	bl	80008d8 <MX_DSIHOST_DSI_Init>
  MX_GFXMMU_Init();
 80005f8:	f000 fa6a 	bl	8000ad0 <MX_GFXMMU_Init>
  MX_GPU2D_Init();
 80005fc:	f000 fab8 	bl	8000b70 <MX_GPU2D_Init>
  MX_LTDC_Init();
 8000600:	f000 fd20 	bl	8001044 <MX_LTDC_Init>
  MX_RTC_Init();
 8000604:	f000 fed4 	bl	80013b0 <MX_RTC_Init>
  MX_OCTOSPI2_Init();
 8000608:	f000 fe3a 	bl	8001280 <MX_OCTOSPI2_Init>
  MX_ADF1_Init();
 800060c:	f000 f88a 	bl	8000724 <MX_ADF1_Init>
  MX_I2C1_Init();
 8000610:	f000 fac2 	bl	8000b98 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000614:	f000 fb00 	bl	8000c18 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000618:	f000 fb7e 	bl	8000d18 <MX_I2C4_Init>
  MX_I2C6_Init();
 800061c:	f000 fbbc 	bl	8000d98 <MX_I2C6_Init>
  MX_USART1_UART_Init();
 8000620:	f000 fc78 	bl	8000f14 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000624:	f000 fcc2 	bl	8000fac <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8000628:	f000 ff44 	bl	80014b4 <MX_SPI1_Init>
  MX_I2C3_Init();
 800062c:	f000 fb34 	bl	8000c98 <MX_I2C3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <main+0x6c>

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b09e      	sub	sp, #120	@ 0x78
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0318 	add.w	r3, r7, #24
 800063e:	2260      	movs	r2, #96	@ 0x60
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f00c fb5b 	bl	800ccfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	463b      	mov	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]
 8000656:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000658:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800065c:	f006 fa42 	bl	8006ae4 <HAL_PWREx_ControlVoltageScaling>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000666:	f001 fa1d 	bl	8001aa4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800066a:	f006 fa2b 	bl	8006ac4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800066e:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <SystemClock_Config+0xd0>)
 8000670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000674:	4a23      	ldr	r2, [pc, #140]	@ (8000704 <SystemClock_Config+0xd0>)
 8000676:	f023 0318 	bic.w	r3, r3, #24
 800067a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800067e:	2305      	movs	r3, #5
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000682:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000688:	2381      	movs	r3, #129	@ 0x81
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000690:	2303      	movs	r3, #3
 8000692:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 800069c:	230a      	movs	r3, #10
 800069e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80006ac:	230c      	movs	r3, #12
 80006ae:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0318 	add.w	r3, r7, #24
 80006b8:	4618      	mov	r0, r3
 80006ba:	f006 faff 	bl	8006cbc <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c4:	f001 f9ee 	bl	8001aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	231f      	movs	r3, #31
 80006ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2303      	movs	r3, #3
 80006ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	2104      	movs	r1, #4
 80006e4:	4618      	mov	r0, r3
 80006e6:	f007 f9c5 	bl	8007a74 <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f0:	f001 f9d8 	bl	8001aa4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80006f4:	f007 fd40 	bl	8008178 <HAL_RCC_EnableCSS>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 80006f8:	f00a fcbc 	bl	800b074 <HAL_RCCEx_EnableLSECSS>
}
 80006fc:	bf00      	nop
 80006fe:	3778      	adds	r7, #120	@ 0x78
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	46020c00 	.word	0x46020c00

08000708 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800070c:	f006 fac6 	bl	8006c9c <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000710:	2002      	movs	r0, #2
 8000712:	f006 fa73 	bl	8006bfc <HAL_PWREx_ConfigSupply>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800071c:	f001 f9c2 	bl	8001aa4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 8000728:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <MX_ADF1_Init+0x90>)
 800072a:	4a23      	ldr	r2, [pc, #140]	@ (80007b8 <MX_ADF1_Init+0x94>)
 800072c:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <MX_ADF1_Init+0x90>)
 8000730:	2201      	movs	r2, #1
 8000732:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 8000734:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <MX_ADF1_Init+0x90>)
 8000736:	2200      	movs	r2, #0
 8000738:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 800073a:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <MX_ADF1_Init+0x90>)
 800073c:	2201      	movs	r2, #1
 800073e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_ADF1_Init+0x90>)
 8000744:	2210      	movs	r2, #16
 8000746:	629a      	str	r2, [r3, #40]	@ 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 8000748:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <MX_ADF1_Init+0x90>)
 800074a:	2200      	movs	r2, #0
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <MX_ADF1_Init+0x90>)
 8000750:	2204      	movs	r2, #4
 8000752:	631a      	str	r2, [r3, #48]	@ 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8000754:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <MX_ADF1_Init+0x90>)
 8000756:	2201      	movs	r2, #1
 8000758:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 800075a:	4816      	ldr	r0, [pc, #88]	@ (80007b4 <MX_ADF1_Init+0x90>)
 800075c:	f005 f852 	bl	8005804 <HAL_MDF_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADF1_Init+0x46>
  {
    Error_Handler();
 8000766:	f001 f99d 	bl	8001aa4 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 800076a:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_ADF1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_ADF1_Init+0x98>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_ADF1_Init+0x98>)
 8000778:	2240      	movs	r2, #64	@ 0x40
 800077a:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_ADF1_Init+0x98>)
 800077e:	2202      	movs	r2, #2
 8000780:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_ADF1_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_ADF1_Init+0x98>)
 800078a:	2200      	movs	r2, #0
 800078c:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_ADF1_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_ADF1_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 800079e:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <MX_ADF1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	665a      	str	r2, [r3, #100]	@ 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 80007a4:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <MX_ADF1_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	669a      	str	r2, [r3, #104]	@ 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 80007aa:	4b04      	ldr	r3, [pc, #16]	@ (80007bc <MX_ADF1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000d28 	.word	0x20000d28
 80007b8:	46024080 	.word	0x46024080
 80007bc:	20000d6c 	.word	0x20000d6c

080007c0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <MX_CRC_Init+0x3c>)
 80007c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000800 <MX_CRC_Init+0x40>)
 80007c8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_CRC_Init+0x3c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <MX_CRC_Init+0x3c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_CRC_Init+0x3c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <MX_CRC_Init+0x3c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_CRC_Init+0x3c>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	@ (80007fc <MX_CRC_Init+0x3c>)
 80007ea:	f002 fcd7 	bl	800319c <HAL_CRC_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007f4:	f001 f956 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000de8 	.word	0x20000de8
 8000800:	40023000 	.word	0x40023000

08000804 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <MX_DCACHE1_Init+0x24>)
 800080a:	4a08      	ldr	r2, [pc, #32]	@ (800082c <MX_DCACHE1_Init+0x28>)
 800080c:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_DCACHE1_Init+0x24>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_DCACHE1_Init+0x24>)
 8000816:	f002 fdb3 	bl	8003380 <HAL_DCACHE_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 8000820:	f001 f940 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000e0c 	.word	0x20000e0c
 800082c:	40031400 	.word	0x40031400

08000830 <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 8000834:	4b07      	ldr	r3, [pc, #28]	@ (8000854 <MX_DCACHE2_Init+0x24>)
 8000836:	4a08      	ldr	r2, [pc, #32]	@ (8000858 <MX_DCACHE2_Init+0x28>)
 8000838:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 800083a:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_DCACHE2_Init+0x24>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_DCACHE2_Init+0x24>)
 8000842:	f002 fd9d 	bl	8003380 <HAL_DCACHE_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_DCACHE2_Init+0x20>
  {
    Error_Handler();
 800084c:	f001 f92a 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000e38 	.word	0x20000e38
 8000858:	40031800 	.word	0x40031800

0800085c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000860:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <MX_DMA2D_Init+0x74>)
 8000862:	4a1c      	ldr	r2, [pc, #112]	@ (80008d4 <MX_DMA2D_Init+0x78>)
 8000864:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000866:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <MX_DMA2D_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800086c:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <MX_DMA2D_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 608;
 8000872:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <MX_DMA2D_Init+0x74>)
 8000874:	f44f 7218 	mov.w	r2, #608	@ 0x260
 8000878:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 800087a:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <MX_DMA2D_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000880:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <MX_DMA2D_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000886:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <MX_DMA2D_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800088c:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <MX_DMA2D_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000892:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <MX_DMA2D_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000898:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <MX_DMA2D_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800089e:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <MX_DMA2D_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	@ (80008d0 <MX_DMA2D_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008aa:	4809      	ldr	r0, [pc, #36]	@ (80008d0 <MX_DMA2D_Init+0x74>)
 80008ac:	f002 fe8f 	bl	80035ce <HAL_DMA2D_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 80008b6:	f001 f8f5 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008ba:	2101      	movs	r1, #1
 80008bc:	4804      	ldr	r0, [pc, #16]	@ (80008d0 <MX_DMA2D_Init+0x74>)
 80008be:	f002 fff7 	bl	80038b0 <HAL_DMA2D_ConfigLayer>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 80008c8:	f001 f8ec 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000e64 	.word	0x20000e64
 80008d4:	4002b000 	.word	0x4002b000

080008d8 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0ae      	sub	sp, #184	@ 0xb8
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80008de:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]
 80008ee:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80008f0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008f4:	2224      	movs	r2, #36	@ 0x24
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f00c fa00 	bl	800ccfe <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80008fe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]
 800090e:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000910:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000914:	2234      	movs	r2, #52	@ 0x34
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f00c f9f0 	bl	800ccfe <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	222c      	movs	r2, #44	@ 0x2c
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f00c f9ea 	bl	800ccfe <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800092a:	4b67      	ldr	r3, [pc, #412]	@ (8000ac8 <MX_DSIHOST_DSI_Init+0x1f0>)
 800092c:	4a67      	ldr	r2, [pc, #412]	@ (8000acc <MX_DSIHOST_DSI_Init+0x1f4>)
 800092e:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000930:	4b65      	ldr	r3, [pc, #404]	@ (8000ac8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000932:	2200      	movs	r2, #0
 8000934:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000936:	4b64      	ldr	r3, [pc, #400]	@ (8000ac8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000938:	2204      	movs	r2, #4
 800093a:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 800093c:	4b62      	ldr	r3, [pc, #392]	@ (8000ac8 <MX_DSIHOST_DSI_Init+0x1f0>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 8000942:	4b61      	ldr	r3, [pc, #388]	@ (8000ac8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000944:	2208      	movs	r2, #8
 8000946:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 8000948:	4b5f      	ldr	r3, [pc, #380]	@ (8000ac8 <MX_DSIHOST_DSI_Init+0x1f0>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 800094e:	237d      	movs	r3, #125	@ 0x7d
 8000950:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 8000954:	2304      	movs	r3, #4
 8000956:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 800095a:	2302      	movs	r3, #2
 800095c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 8000960:	2301      	movs	r3, #1
 8000962:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 8000966:	2300      	movs	r3, #0
 8000968:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000972:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000976:	4619      	mov	r1, r3
 8000978:	4853      	ldr	r0, [pc, #332]	@ (8000ac8 <MX_DSIHOST_DSI_Init+0x1f0>)
 800097a:	f003 f941 	bl	8003c00 <HAL_DSI_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 8000984:	f001 f88e 	bl	8001aa4 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000988:	2301      	movs	r3, #1
 800098a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.LowPowerReadTimeout = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  HostTimeouts.BTATimeout = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009bc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80009c0:	4619      	mov	r1, r3
 80009c2:	4841      	ldr	r0, [pc, #260]	@ (8000ac8 <MX_DSIHOST_DSI_Init+0x1f0>)
 80009c4:	f003 fdcc 	bl	8004560 <HAL_DSI_ConfigHostTimeouts>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_DSIHOST_DSI_Init+0xfa>
  {
    Error_Handler();
 80009ce:	f001 f869 	bl	8001aa4 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 10;
 80009d2:	230a      	movs	r3, #10
 80009d4:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.ClockLaneLP2HSTime = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneHS2LPTime = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneLP2HSTime = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.DataLaneMaxReadTime = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	677b      	str	r3, [r7, #116]	@ 0x74
  PhyTimings.StopWaitTime = 10;
 80009e6:	230a      	movs	r3, #10
 80009e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80009ea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009ee:	4619      	mov	r1, r3
 80009f0:	4835      	ldr	r0, [pc, #212]	@ (8000ac8 <MX_DSIHOST_DSI_Init+0x1f0>)
 80009f2:	f003 fd1f 	bl	8004434 <HAL_DSI_ConfigPhyTimer>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 80009fc:	f001 f852 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a00:	2104      	movs	r1, #4
 8000a02:	4831      	ldr	r0, [pc, #196]	@ (8000ac8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a04:	f003 fcee 	bl	80043e4 <HAL_DSI_ConfigFlowControl>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000a0e:	f001 f849 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a12:	2100      	movs	r1, #0
 8000a14:	482c      	ldr	r0, [pc, #176]	@ (8000ac8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a16:	f003 f9c7 	bl	8003da8 <HAL_DSI_ConfigErrorMonitor>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 8000a20:	f001 f840 	bl	8001aa4 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	65fb      	str	r3, [r7, #92]	@ 0x5c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	481a      	ldr	r0, [pc, #104]	@ (8000ac8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a60:	f003 fc62 	bl	8004328 <HAL_DSI_ConfigCommand>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_DSIHOST_DSI_Init+0x196>
  {
    Error_Handler();
 8000a6a:	f001 f81b 	bl	8001aa4 <Error_Handler>
  }
  CmdCfg.ColorCoding = DSI_RGB888;
 8000a6e:	2305      	movs	r3, #5
 8000a70:	60bb      	str	r3, [r7, #8]
  CmdCfg.CommandSize = 416;
 8000a72:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8000a76:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000a78:	2310      	movs	r3, #16
 8000a7a:	613b      	str	r3, [r7, #16]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000a8c:	2380      	movs	r3, #128	@ 0x80
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000a90:	2340      	movs	r3, #64	@ 0x40
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480a      	ldr	r0, [pc, #40]	@ (8000ac8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a9e:	f003 fb6c 	bl	800417a <HAL_DSI_ConfigAdaptedCommandMode>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 8000aa8:	f000 fffc 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000aac:	2100      	movs	r1, #0
 8000aae:	4806      	ldr	r0, [pc, #24]	@ (8000ac8 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000ab0:	f003 fb38 	bl	8004124 <HAL_DSI_SetGenericVCID>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 8000aba:	f000 fff3 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	37b8      	adds	r7, #184	@ 0xb8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000ec4 	.word	0x20000ec4
 8000acc:	40016c00 	.word	0x40016c00

08000ad0 <MX_GFXMMU_Init>:
  * @brief GFXMMU Initialization Function
  * @param None
  * @retval None
  */
static void MX_GFXMMU_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END GFXMMU_Init 0 */

  /* USER CODE BEGIN GFXMMU_Init 1 */

  /* USER CODE END GFXMMU_Init 1 */
  hgfxmmu.Instance = GFXMMU;
 8000ad4:	4b23      	ldr	r3, [pc, #140]	@ (8000b64 <MX_GFXMMU_Init+0x94>)
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <MX_GFXMMU_Init+0x98>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hgfxmmu.Init.BlocksPerLine = GFXMMU_256BLOCKS;
 8000ada:	4b22      	ldr	r3, [pc, #136]	@ (8000b64 <MX_GFXMMU_Init+0x94>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
  hgfxmmu.Init.DefaultValue = 0;
 8000ae0:	4b20      	ldr	r3, [pc, #128]	@ (8000b64 <MX_GFXMMU_Init+0x94>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  hgfxmmu.Init.Buffers.Buf0Address = 0;
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b64 <MX_GFXMMU_Init+0x94>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  hgfxmmu.Init.Buffers.Buf1Address = 0;
 8000aec:	4b1d      	ldr	r3, [pc, #116]	@ (8000b64 <MX_GFXMMU_Init+0x94>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  hgfxmmu.Init.Buffers.Buf2Address = 0;
 8000af2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <MX_GFXMMU_Init+0x94>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
  hgfxmmu.Init.Buffers.Buf3Address = 0;
 8000af8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <MX_GFXMMU_Init+0x94>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  hgfxmmu.Init.CachePrefetch.Activation = ENABLE;
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <MX_GFXMMU_Init+0x94>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	771a      	strb	r2, [r3, #28]
  hgfxmmu.Init.CachePrefetch.CacheLock = GFXMMU_CACHE_LOCK_ENABLE;
 8000b04:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <MX_GFXMMU_Init+0x94>)
 8000b06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b0a:	621a      	str	r2, [r3, #32]
  hgfxmmu.Init.CachePrefetch.CacheLockBuffer = GFXMMU_CACHE_LOCK_BUFFER0;
 8000b0c:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <MX_GFXMMU_Init+0x94>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	@ 0x24
  hgfxmmu.Init.CachePrefetch.CacheForce = GFXMMU_CACHE_FORCE_ENABLE;
 8000b12:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <MX_GFXMMU_Init+0x94>)
 8000b14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b18:	629a      	str	r2, [r3, #40]	@ 0x28
  hgfxmmu.Init.CachePrefetch.OutterBufferability = GFXMMU_OUTTER_BUFFERABILITY_ENABLE;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <MX_GFXMMU_Init+0x94>)
 8000b1c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hgfxmmu.Init.CachePrefetch.OutterCachability = GFXMMU_OUTTER_CACHABILITY_ENABLE;
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <MX_GFXMMU_Init+0x94>)
 8000b24:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b28:	631a      	str	r2, [r3, #48]	@ 0x30
  hgfxmmu.Init.CachePrefetch.Prefetch = GFXMMU_PREFETCH_ENABLE;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <MX_GFXMMU_Init+0x94>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	635a      	str	r2, [r3, #52]	@ 0x34
  hgfxmmu.Init.Interrupts.Activation = ENABLE;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <MX_GFXMMU_Init+0x94>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_GFXMMU_Init(&hgfxmmu) != HAL_OK)
 8000b38:	480a      	ldr	r0, [pc, #40]	@ (8000b64 <MX_GFXMMU_Init+0x94>)
 8000b3a:	f003 fdd7 	bl	80046ec <HAL_GFXMMU_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_GFXMMU_Init+0x78>
  {
    Error_Handler();
 8000b44:	f000 ffae 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_GFXMMU_ConfigLut(&hgfxmmu, GFXMMU_LUT_FIRST, GFXMMU_LUT_SIZE, (uint32_t)gfxmmu_lut_config) != HAL_OK)
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <MX_GFXMMU_Init+0x9c>)
 8000b4a:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <MX_GFXMMU_Init+0x94>)
 8000b52:	f003 fe4b 	bl	80047ec <HAL_GFXMMU_ConfigLut>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_GFXMMU_Init+0x90>
  {
    Error_Handler();
 8000b5c:	f000 ffa2 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN GFXMMU_Init 2 */

  /* USER CODE END GFXMMU_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000ee8 	.word	0x20000ee8
 8000b68:	4002c000 	.word	0x4002c000
 8000b6c:	20000000 	.word	0x20000000

08000b70 <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <MX_GPU2D_Init+0x20>)
 8000b76:	4a07      	ldr	r2, [pc, #28]	@ (8000b94 <MX_GPU2D_Init+0x24>)
 8000b78:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <MX_GPU2D_Init+0x20>)
 8000b7c:	f004 f8aa 	bl	8004cd4 <HAL_GPU2D_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 8000b86:	f000 ff8d 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000f30 	.word	0x20000f30
 8000b94:	4002f000 	.word	0x4002f000

08000b98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <MX_I2C1_Init+0x74>)
 8000b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000c10 <MX_I2C1_Init+0x78>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c0c <MX_I2C1_Init+0x74>)
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c14 <MX_I2C1_Init+0x7c>)
 8000ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	@ (8000c0c <MX_I2C1_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bae:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <MX_I2C1_Init+0x74>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <MX_I2C1_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bba:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <MX_I2C1_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <MX_I2C1_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <MX_I2C1_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <MX_I2C1_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd2:	480e      	ldr	r0, [pc, #56]	@ (8000c0c <MX_I2C1_Init+0x74>)
 8000bd4:	f004 f8ea 	bl	8004dac <HAL_I2C_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bde:	f000 ff61 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000be2:	2100      	movs	r1, #0
 8000be4:	4809      	ldr	r0, [pc, #36]	@ (8000c0c <MX_I2C1_Init+0x74>)
 8000be6:	f004 f97c 	bl	8004ee2 <HAL_I2CEx_ConfigAnalogFilter>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bf0:	f000 ff58 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <MX_I2C1_Init+0x74>)
 8000bf8:	f004 f9be 	bl	8004f78 <HAL_I2CEx_ConfigDigitalFilter>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c02:	f000 ff4f 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000f3c 	.word	0x20000f3c
 8000c10:	40005400 	.word	0x40005400
 8000c14:	30909dec 	.word	0x30909dec

08000c18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c8c <MX_I2C2_Init+0x74>)
 8000c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000c90 <MX_I2C2_Init+0x78>)
 8000c20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8000c22:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <MX_I2C2_Init+0x74>)
 8000c24:	4a1b      	ldr	r2, [pc, #108]	@ (8000c94 <MX_I2C2_Init+0x7c>)
 8000c26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c28:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <MX_I2C2_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <MX_I2C2_Init+0x74>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c34:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <MX_I2C2_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <MX_I2C2_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <MX_I2C2_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <MX_I2C2_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <MX_I2C2_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c52:	480e      	ldr	r0, [pc, #56]	@ (8000c8c <MX_I2C2_Init+0x74>)
 8000c54:	f004 f8aa 	bl	8004dac <HAL_I2C_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c5e:	f000 ff21 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c62:	2100      	movs	r1, #0
 8000c64:	4809      	ldr	r0, [pc, #36]	@ (8000c8c <MX_I2C2_Init+0x74>)
 8000c66:	f004 f93c 	bl	8004ee2 <HAL_I2CEx_ConfigAnalogFilter>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c70:	f000 ff18 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c74:	2100      	movs	r1, #0
 8000c76:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <MX_I2C2_Init+0x74>)
 8000c78:	f004 f97e 	bl	8004f78 <HAL_I2CEx_ConfigDigitalFilter>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c82:	f000 ff0f 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000f90 	.word	0x20000f90
 8000c90:	40005800 	.word	0x40005800
 8000c94:	30909dec 	.word	0x30909dec

08000c98 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <MX_I2C3_Init+0x74>)
 8000c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d10 <MX_I2C3_Init+0x78>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <MX_I2C3_Init+0x74>)
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d14 <MX_I2C3_Init+0x7c>)
 8000ca6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <MX_I2C3_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cae:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <MX_I2C3_Init+0x74>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <MX_I2C3_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000cba:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <MX_I2C3_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <MX_I2C3_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_I2C3_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <MX_I2C3_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000cd2:	480e      	ldr	r0, [pc, #56]	@ (8000d0c <MX_I2C3_Init+0x74>)
 8000cd4:	f004 f86a 	bl	8004dac <HAL_I2C_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000cde:	f000 fee1 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4809      	ldr	r0, [pc, #36]	@ (8000d0c <MX_I2C3_Init+0x74>)
 8000ce6:	f004 f8fc 	bl	8004ee2 <HAL_I2CEx_ConfigAnalogFilter>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000cf0:	f000 fed8 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_I2C3_Init+0x74>)
 8000cf8:	f004 f93e 	bl	8004f78 <HAL_I2CEx_ConfigDigitalFilter>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000d02:	f000 fecf 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000fe4 	.word	0x20000fe4
 8000d10:	46002800 	.word	0x46002800
 8000d14:	30909dec 	.word	0x30909dec

08000d18 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <MX_I2C4_Init+0x74>)
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d90 <MX_I2C4_Init+0x78>)
 8000d20:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30909DEC;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <MX_I2C4_Init+0x74>)
 8000d24:	4a1b      	ldr	r2, [pc, #108]	@ (8000d94 <MX_I2C4_Init+0x7c>)
 8000d26:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d28:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <MX_I2C4_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <MX_I2C4_Init+0x74>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d34:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <MX_I2C4_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <MX_I2C4_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d40:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <MX_I2C4_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d46:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_I2C4_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <MX_I2C4_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d52:	480e      	ldr	r0, [pc, #56]	@ (8000d8c <MX_I2C4_Init+0x74>)
 8000d54:	f004 f82a 	bl	8004dac <HAL_I2C_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d5e:	f000 fea1 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d62:	2100      	movs	r1, #0
 8000d64:	4809      	ldr	r0, [pc, #36]	@ (8000d8c <MX_I2C4_Init+0x74>)
 8000d66:	f004 f8bc 	bl	8004ee2 <HAL_I2CEx_ConfigAnalogFilter>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d70:	f000 fe98 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d74:	2100      	movs	r1, #0
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_I2C4_Init+0x74>)
 8000d78:	f004 f8fe 	bl	8004f78 <HAL_I2CEx_ConfigDigitalFilter>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d82:	f000 fe8f 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20001038 	.word	0x20001038
 8000d90:	40008400 	.word	0x40008400
 8000d94:	30909dec 	.word	0x30909dec

08000d98 <MX_I2C6_Init>:
  * @brief I2C6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C6_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C6_Init 0 */

  /* USER CODE BEGIN I2C6_Init 1 */

  /* USER CODE END I2C6_Init 1 */
  hi2c6.Instance = I2C6;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <MX_I2C6_Init+0x74>)
 8000d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e10 <MX_I2C6_Init+0x78>)
 8000da0:	601a      	str	r2, [r3, #0]
  hi2c6.Init.Timing = 0x30909DEC;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <MX_I2C6_Init+0x74>)
 8000da4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e14 <MX_I2C6_Init+0x7c>)
 8000da6:	605a      	str	r2, [r3, #4]
  hi2c6.Init.OwnAddress1 = 0;
 8000da8:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <MX_I2C6_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hi2c6.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dae:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <MX_I2C6_Init+0x74>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	60da      	str	r2, [r3, #12]
  hi2c6.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db4:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <MX_I2C6_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  hi2c6.Init.OwnAddress2 = 0;
 8000dba:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <MX_I2C6_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
  hi2c6.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <MX_I2C6_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  hi2c6.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <MX_I2C6_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
  hi2c6.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <MX_I2C6_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c6) != HAL_OK)
 8000dd2:	480e      	ldr	r0, [pc, #56]	@ (8000e0c <MX_I2C6_Init+0x74>)
 8000dd4:	f003 ffea 	bl	8004dac <HAL_I2C_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_I2C6_Init+0x4a>
  {
    Error_Handler();
 8000dde:	f000 fe61 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c6, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <MX_I2C6_Init+0x74>)
 8000de6:	f004 f87c 	bl	8004ee2 <HAL_I2CEx_ConfigAnalogFilter>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_I2C6_Init+0x5c>
  {
    Error_Handler();
 8000df0:	f000 fe58 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c6, 0) != HAL_OK)
 8000df4:	2100      	movs	r1, #0
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <MX_I2C6_Init+0x74>)
 8000df8:	f004 f8be 	bl	8004f78 <HAL_I2CEx_ConfigDigitalFilter>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_I2C6_Init+0x6e>
  {
    Error_Handler();
 8000e02:	f000 fe4f 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C6_Init 2 */

  /* USER CODE END I2C6_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000108c 	.word	0x2000108c
 8000e10:	40009c00 	.word	0x40009c00
 8000e14:	30909dec 	.word	0x30909dec

08000e18 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8000e2c:	f004 f900 	bl	8005030 <HAL_ICACHE_Disable>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000e36:	f000 fe35 	bl	8001aa4 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 8000e3a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e3e:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8000e40:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000e44:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 8000e46:	2301      	movs	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	2000      	movs	r0, #0
 8000e58:	f004 f91a 	bl	8005090 <HAL_ICACHE_EnableRemapRegion>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 8000e62:	f000 fe1f 	bl	8001aa4 <Error_Handler>
  }

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000e66:	f004 f8d3 	bl	8005010 <HAL_ICACHE_Enable>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ICACHE_Init+0x5c>
  {
    Error_Handler();
 8000e70:	f000 fe18 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e80:	4b21      	ldr	r3, [pc, #132]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000e82:	4a22      	ldr	r2, [pc, #136]	@ (8000f0c <MX_LPUART1_UART_Init+0x90>)
 8000e84:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000e86:	4b20      	ldr	r3, [pc, #128]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000e88:	4a21      	ldr	r2, [pc, #132]	@ (8000f10 <MX_LPUART1_UART_Init+0x94>)
 8000e8a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e92:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000ea0:	220c      	movs	r2, #12
 8000ea2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000ea6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000eaa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb2:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000eb8:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ebe:	4812      	ldr	r0, [pc, #72]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000ec0:	f00b f9e4 	bl	800c28c <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000eca:	f000 fdeb 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	480d      	ldr	r0, [pc, #52]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000ed2:	f00b fe2b 	bl	800cb2c <HAL_UARTEx_SetTxFifoThreshold>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000edc:	f000 fde2 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4809      	ldr	r0, [pc, #36]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000ee4:	f00b fe60 	bl	800cba8 <HAL_UARTEx_SetRxFifoThreshold>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000eee:	f000 fdd9 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000ef4:	f00b fde1 	bl	800caba <HAL_UARTEx_DisableFifoMode>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000efe:	f000 fdd1 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200010e0 	.word	0x200010e0
 8000f0c:	46002400 	.word	0x46002400
 8000f10:	00033324 	.word	0x00033324

08000f14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f18:	4b22      	ldr	r3, [pc, #136]	@ (8000fa4 <MX_USART1_UART_Init+0x90>)
 8000f1a:	4a23      	ldr	r2, [pc, #140]	@ (8000fa8 <MX_USART1_UART_Init+0x94>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	@ (8000fa4 <MX_USART1_UART_Init+0x90>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <MX_USART1_UART_Init+0x90>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa4 <MX_USART1_UART_Init+0x90>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <MX_USART1_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <MX_USART1_UART_Init+0x90>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <MX_USART1_UART_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <MX_USART1_UART_Init+0x90>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <MX_USART1_UART_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f50:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <MX_USART1_UART_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <MX_USART1_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f5c:	4811      	ldr	r0, [pc, #68]	@ (8000fa4 <MX_USART1_UART_Init+0x90>)
 8000f5e:	f00b f995 	bl	800c28c <HAL_UART_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f68:	f000 fd9c 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	480d      	ldr	r0, [pc, #52]	@ (8000fa4 <MX_USART1_UART_Init+0x90>)
 8000f70:	f00b fddc 	bl	800cb2c <HAL_UARTEx_SetTxFifoThreshold>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f7a:	f000 fd93 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4808      	ldr	r0, [pc, #32]	@ (8000fa4 <MX_USART1_UART_Init+0x90>)
 8000f82:	f00b fe11 	bl	800cba8 <HAL_UARTEx_SetRxFifoThreshold>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f8c:	f000 fd8a 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <MX_USART1_UART_Init+0x90>)
 8000f92:	f00b fd92 	bl	800caba <HAL_UARTEx_DisableFifoMode>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f9c:	f000 fd82 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20001174 	.word	0x20001174
 8000fa8:	40013800 	.word	0x40013800

08000fac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000fb0:	4b22      	ldr	r3, [pc, #136]	@ (800103c <MX_USART6_UART_Init+0x90>)
 8000fb2:	4a23      	ldr	r2, [pc, #140]	@ (8001040 <MX_USART6_UART_Init+0x94>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000fb6:	4b21      	ldr	r3, [pc, #132]	@ (800103c <MX_USART6_UART_Init+0x90>)
 8000fb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fbc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800103c <MX_USART6_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <MX_USART6_UART_Init+0x90>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	@ (800103c <MX_USART6_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <MX_USART6_UART_Init+0x90>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	@ (800103c <MX_USART6_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	@ (800103c <MX_USART6_UART_Init+0x90>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	@ (800103c <MX_USART6_UART_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	@ (800103c <MX_USART6_UART_Init+0x90>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fee:	4b13      	ldr	r3, [pc, #76]	@ (800103c <MX_USART6_UART_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000ff4:	4811      	ldr	r0, [pc, #68]	@ (800103c <MX_USART6_UART_Init+0x90>)
 8000ff6:	f00b f949 	bl	800c28c <HAL_UART_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001000:	f000 fd50 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001004:	2100      	movs	r1, #0
 8001006:	480d      	ldr	r0, [pc, #52]	@ (800103c <MX_USART6_UART_Init+0x90>)
 8001008:	f00b fd90 	bl	800cb2c <HAL_UARTEx_SetTxFifoThreshold>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001012:	f000 fd47 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001016:	2100      	movs	r1, #0
 8001018:	4808      	ldr	r0, [pc, #32]	@ (800103c <MX_USART6_UART_Init+0x90>)
 800101a:	f00b fdc5 	bl	800cba8 <HAL_UARTEx_SetRxFifoThreshold>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001024:	f000 fd3e 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001028:	4804      	ldr	r0, [pc, #16]	@ (800103c <MX_USART6_UART_Init+0x90>)
 800102a:	f00b fd46 	bl	800caba <HAL_UARTEx_DisableFifoMode>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001034:	f000 fd36 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20001208 	.word	0x20001208
 8001040:	40006400 	.word	0x40006400

08001044 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	@ 0x38
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2234      	movs	r2, #52	@ 0x34
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f00b fe54 	bl	800ccfe <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001056:	4b3b      	ldr	r3, [pc, #236]	@ (8001144 <MX_LTDC_Init+0x100>)
 8001058:	4a3b      	ldr	r2, [pc, #236]	@ (8001148 <MX_LTDC_Init+0x104>)
 800105a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 800105c:	4b39      	ldr	r3, [pc, #228]	@ (8001144 <MX_LTDC_Init+0x100>)
 800105e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001062:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8001064:	4b37      	ldr	r3, [pc, #220]	@ (8001144 <MX_LTDC_Init+0x100>)
 8001066:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800106a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800106c:	4b35      	ldr	r3, [pc, #212]	@ (8001144 <MX_LTDC_Init+0x100>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001072:	4b34      	ldr	r3, [pc, #208]	@ (8001144 <MX_LTDC_Init+0x100>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001078:	4b32      	ldr	r3, [pc, #200]	@ (8001144 <MX_LTDC_Init+0x100>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 800107e:	4b31      	ldr	r3, [pc, #196]	@ (8001144 <MX_LTDC_Init+0x100>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 0;
 8001084:	4b2f      	ldr	r3, [pc, #188]	@ (8001144 <MX_LTDC_Init+0x100>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 0;
 800108a:	4b2e      	ldr	r3, [pc, #184]	@ (8001144 <MX_LTDC_Init+0x100>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 416;
 8001090:	4b2c      	ldr	r3, [pc, #176]	@ (8001144 <MX_LTDC_Init+0x100>)
 8001092:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8001096:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 416;
 8001098:	4b2a      	ldr	r3, [pc, #168]	@ (8001144 <MX_LTDC_Init+0x100>)
 800109a:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 800109e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 416;
 80010a0:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <MX_LTDC_Init+0x100>)
 80010a2:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80010a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 416;
 80010a8:	4b26      	ldr	r3, [pc, #152]	@ (8001144 <MX_LTDC_Init+0x100>)
 80010aa:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80010ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80010b0:	4b24      	ldr	r3, [pc, #144]	@ (8001144 <MX_LTDC_Init+0x100>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80010b8:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <MX_LTDC_Init+0x100>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80010c0:	4b20      	ldr	r3, [pc, #128]	@ (8001144 <MX_LTDC_Init+0x100>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80010c8:	481e      	ldr	r0, [pc, #120]	@ (8001144 <MX_LTDC_Init+0x100>)
 80010ca:	f004 f833 	bl	8005134 <HAL_LTDC_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 80010d4:	f000 fce6 	bl	8001aa4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 416;
 80010dc:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 80010e0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 416;
 80010e6:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 80010ea:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80010f0:	23ff      	movs	r3, #255	@ 0xff
 80010f2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80010f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010fc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80010fe:	2305      	movs	r3, #5
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = GFXMMU_VIRTUAL_BUFFER0_BASE;
 8001102:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8001106:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 416;
 8001108:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 416;
 800110e:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8001112:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	@ (8001144 <MX_LTDC_Init+0x100>)
 800112e:	f004 f993 	bl	8005458 <HAL_LTDC_ConfigLayer>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8001138:	f000 fcb4 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	3738      	adds	r7, #56	@ 0x38
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000129c 	.word	0x2000129c
 8001148:	40016800 	.word	0x40016800

0800114c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08c      	sub	sp, #48	@ 0x30
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]
 8001162:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800117a:	4b3d      	ldr	r3, [pc, #244]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 800117c:	4a3d      	ldr	r2, [pc, #244]	@ (8001274 <MX_OCTOSPI1_Init+0x128>)
 800117e:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001180:	4b3b      	ldr	r3, [pc, #236]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 8001182:	2201      	movs	r2, #1
 8001184:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001186:	4b3a      	ldr	r3, [pc, #232]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 800118c:	4b38      	ldr	r3, [pc, #224]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 800118e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001192:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8001194:	4b36      	ldr	r3, [pc, #216]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 8001196:	221a      	movs	r2, #26
 8001198:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800119a:	4b35      	ldr	r3, [pc, #212]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 800119c:	2201      	movs	r2, #1
 800119e:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80011a0:	4b33      	ldr	r3, [pc, #204]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80011a6:	4b32      	ldr	r3, [pc, #200]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_64_BYTES;
 80011ac:	4b30      	ldr	r3, [pc, #192]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 80011ae:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80011b2:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 16;
 80011b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 80011b6:	2210      	movs	r2, #16
 80011b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80011ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 80011bc:	2200      	movs	r2, #0
 80011be:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80011c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80011c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80011cc:	4b28      	ldr	r3, [pc, #160]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 80011ce:	2208      	movs	r2, #8
 80011d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 16;
 80011d2:	4b27      	ldr	r3, [pc, #156]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 80011d4:	2210      	movs	r2, #16
 80011d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 80011d8:	4b25      	ldr	r3, [pc, #148]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 80011da:	2200      	movs	r2, #0
 80011dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80011de:	4824      	ldr	r0, [pc, #144]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 80011e0:	f004 fcbc 	bl	8005b5c <HAL_OSPI_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_OCTOSPI1_Init+0xa2>
  {
    Error_Handler();
 80011ea:	f000 fc5b 	bl	8001aa4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 80011fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <MX_OCTOSPI1_Init+0x12c>)
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 80011fe:	4b1f      	ldr	r3, [pc, #124]	@ (800127c <MX_OCTOSPI1_Init+0x130>)
 8001200:	62bb      	str	r3, [r7, #40]	@ 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 8001202:	2301      	movs	r3, #1
 8001204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800120e:	4619      	mov	r1, r3
 8001210:	4817      	ldr	r0, [pc, #92]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 8001212:	f004 fe23 	bl	8005e5c <HAL_OSPIM_Config>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_OCTOSPI1_Init+0xd4>
  {
    Error_Handler();
 800121c:	f000 fc42 	bl	8001aa4 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001228:	2302      	movs	r3, #2
 800122a:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi1, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001238:	4619      	mov	r1, r3
 800123a:	480d      	ldr	r0, [pc, #52]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 800123c:	f004 fd4a 	bl	8005cd4 <HAL_OSPI_HyperbusCfg>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_OCTOSPI1_Init+0xfe>
  {
    Error_Handler();
 8001246:	f000 fc2d 	bl	8001aa4 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001252:	463b      	mov	r3, r7
 8001254:	4619      	mov	r1, r3
 8001256:	4806      	ldr	r0, [pc, #24]	@ (8001270 <MX_OCTOSPI1_Init+0x124>)
 8001258:	f005 fbec 	bl	8006a34 <HAL_OSPI_DLYB_SetConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_OCTOSPI1_Init+0x11a>
  {
    Error_Handler();
 8001262:	f000 fc1f 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	3730      	adds	r7, #48	@ 0x30
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20001344 	.word	0x20001344
 8001274:	420d1400 	.word	0x420d1400
 8001278:	00010002 	.word	0x00010002
 800127c:	01000002 	.word	0x01000002

08001280 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	@ 0x30
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001286:	f107 0318 	add.w	r3, r7, #24
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
 8001296:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80012a6:	463b      	mov	r3, r7
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 80012ae:	4b3c      	ldr	r3, [pc, #240]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 80012b0:	4a3c      	ldr	r2, [pc, #240]	@ (80013a4 <MX_OCTOSPI2_Init+0x124>)
 80012b2:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 80012b4:	4b3a      	ldr	r3, [pc, #232]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80012ba:	4b39      	ldr	r3, [pc, #228]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 80012c0:	4b37      	ldr	r3, [pc, #220]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 80012c2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80012c6:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 80012c8:	4b35      	ldr	r3, [pc, #212]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 80012ca:	2220      	movs	r2, #32
 80012cc:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 80012ce:	4b34      	ldr	r3, [pc, #208]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80012d4:	4b32      	ldr	r3, [pc, #200]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80012da:	4b31      	ldr	r3, [pc, #196]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 80012dc:	2200      	movs	r2, #0
 80012de:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80012e0:	4b2f      	ldr	r3, [pc, #188]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 80012e6:	4b2e      	ldr	r3, [pc, #184]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80012ec:	4b2c      	ldr	r3, [pc, #176]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80012f2:	4b2b      	ldr	r3, [pc, #172]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 80012f8:	4b29      	ldr	r3, [pc, #164]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80012fe:	4b28      	ldr	r3, [pc, #160]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 8001300:	2208      	movs	r2, #8
 8001302:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 8001304:	4b26      	ldr	r3, [pc, #152]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 8001306:	2200      	movs	r2, #0
 8001308:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 0;
 800130a:	4b25      	ldr	r3, [pc, #148]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 800130c:	2200      	movs	r2, #0
 800130e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8001310:	4823      	ldr	r0, [pc, #140]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 8001312:	f004 fc23 	bl	8005b5c <HAL_OSPI_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_OCTOSPI2_Init+0xa0>
  {
    Error_Handler();
 800131c:	f000 fbc2 	bl	8001aa4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001320:	2301      	movs	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 8001324:	2301      	movs	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 2;
 8001328:	2302      	movs	r3, #2
 800132a:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 800132c:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <MX_OCTOSPI2_Init+0x128>)
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001330:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <MX_OCTOSPI2_Init+0x12c>)
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 8001334:	2301      	movs	r3, #1
 8001336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001338:	f107 0318 	add.w	r3, r7, #24
 800133c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001340:	4619      	mov	r1, r3
 8001342:	4817      	ldr	r0, [pc, #92]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 8001344:	f004 fd8a 	bl	8005e5c <HAL_OSPIM_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_OCTOSPI2_Init+0xd2>
  {
    Error_Handler();
 800134e:	f000 fba9 	bl	8001aa4 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 800135a:	2302      	movs	r3, #2
 800135c:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800136a:	4619      	mov	r1, r3
 800136c:	480c      	ldr	r0, [pc, #48]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 800136e:	f004 fcb1 	bl	8005cd4 <HAL_OSPI_HyperbusCfg>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_OCTOSPI2_Init+0xfc>
  {
    Error_Handler();
 8001378:	f000 fb94 	bl	8001aa4 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001384:	463b      	mov	r3, r7
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <MX_OCTOSPI2_Init+0x120>)
 800138a:	f005 fb53 	bl	8006a34 <HAL_OSPI_DLYB_SetConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_OCTOSPI2_Init+0x118>
  {
    Error_Handler();
 8001394:	f000 fb86 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	3730      	adds	r7, #48	@ 0x30
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200013a0 	.word	0x200013a0
 80013a4:	420d2400 	.word	0x420d2400
 80013a8:	00010002 	.word	0x00010002
 80013ac:	01000002 	.word	0x01000002

080013b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08e      	sub	sp, #56	@ 0x38
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]
 80013c6:	615a      	str	r2, [r3, #20]
 80013c8:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013de:	4b33      	ldr	r3, [pc, #204]	@ (80014ac <MX_RTC_Init+0xfc>)
 80013e0:	4a33      	ldr	r2, [pc, #204]	@ (80014b0 <MX_RTC_Init+0x100>)
 80013e2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013e4:	4b31      	ldr	r3, [pc, #196]	@ (80014ac <MX_RTC_Init+0xfc>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013ea:	4b30      	ldr	r3, [pc, #192]	@ (80014ac <MX_RTC_Init+0xfc>)
 80013ec:	227f      	movs	r2, #127	@ 0x7f
 80013ee:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013f0:	4b2e      	ldr	r3, [pc, #184]	@ (80014ac <MX_RTC_Init+0xfc>)
 80013f2:	22ff      	movs	r2, #255	@ 0xff
 80013f4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013f6:	4b2d      	ldr	r3, [pc, #180]	@ (80014ac <MX_RTC_Init+0xfc>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013fc:	4b2b      	ldr	r3, [pc, #172]	@ (80014ac <MX_RTC_Init+0xfc>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001402:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <MX_RTC_Init+0xfc>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001408:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <MX_RTC_Init+0xfc>)
 800140a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800140e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001410:	4b26      	ldr	r3, [pc, #152]	@ (80014ac <MX_RTC_Init+0xfc>)
 8001412:	2200      	movs	r2, #0
 8001414:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001416:	4b25      	ldr	r3, [pc, #148]	@ (80014ac <MX_RTC_Init+0xfc>)
 8001418:	2200      	movs	r2, #0
 800141a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800141c:	4823      	ldr	r0, [pc, #140]	@ (80014ac <MX_RTC_Init+0xfc>)
 800141e:	f009 ff6b 	bl	800b2f8 <HAL_RTC_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001428:	f000 fb3c 	bl	8001aa4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001430:	2300      	movs	r3, #0
 8001432:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001438:	2300      	movs	r3, #0
 800143a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	481a      	ldr	r0, [pc, #104]	@ (80014ac <MX_RTC_Init+0xfc>)
 8001444:	f00a f9c8 	bl	800b7d8 <HAL_RTCEx_PrivilegeModeSet>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800144e:	f000 fb29 	bl	8001aa4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001452:	2300      	movs	r3, #0
 8001454:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8001456:	2300      	movs	r3, #0
 8001458:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 800145a:	2300      	movs	r3, #0
 800145c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	2201      	movs	r2, #1
 800146c:	4619      	mov	r1, r3
 800146e:	480f      	ldr	r0, [pc, #60]	@ (80014ac <MX_RTC_Init+0xfc>)
 8001470:	f009 ffc4 	bl	800b3fc <HAL_RTC_SetTime>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800147a:	f000 fb13 	bl	8001aa4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800147e:	2301      	movs	r3, #1
 8001480:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8001482:	2301      	movs	r3, #1
 8001484:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8001486:	2301      	movs	r3, #1
 8001488:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 800148a:	2300      	movs	r3, #0
 800148c:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2201      	movs	r2, #1
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	@ (80014ac <MX_RTC_Init+0xfc>)
 8001496:	f00a f84d 	bl	800b534 <HAL_RTC_SetDate>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 80014a0:	f000 fb00 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3738      	adds	r7, #56	@ 0x38
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200013fc 	.word	0x200013fc
 80014b0:	46007800 	.word	0x46007800

080014b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014c4:	4b30      	ldr	r3, [pc, #192]	@ (8001588 <MX_SPI1_Init+0xd4>)
 80014c6:	4a31      	ldr	r2, [pc, #196]	@ (800158c <MX_SPI1_Init+0xd8>)
 80014c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001588 <MX_SPI1_Init+0xd4>)
 80014cc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001588 <MX_SPI1_Init+0xd4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80014d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001588 <MX_SPI1_Init+0xd4>)
 80014da:	2203      	movs	r2, #3
 80014dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014de:	4b2a      	ldr	r3, [pc, #168]	@ (8001588 <MX_SPI1_Init+0xd4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014e4:	4b28      	ldr	r3, [pc, #160]	@ (8001588 <MX_SPI1_Init+0xd4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80014ea:	4b27      	ldr	r3, [pc, #156]	@ (8001588 <MX_SPI1_Init+0xd4>)
 80014ec:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80014f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014f2:	4b25      	ldr	r3, [pc, #148]	@ (8001588 <MX_SPI1_Init+0xd4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f8:	4b23      	ldr	r3, [pc, #140]	@ (8001588 <MX_SPI1_Init+0xd4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014fe:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <MX_SPI1_Init+0xd4>)
 8001500:	2200      	movs	r2, #0
 8001502:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001504:	4b20      	ldr	r3, [pc, #128]	@ (8001588 <MX_SPI1_Init+0xd4>)
 8001506:	2200      	movs	r2, #0
 8001508:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800150a:	4b1f      	ldr	r3, [pc, #124]	@ (8001588 <MX_SPI1_Init+0xd4>)
 800150c:	2207      	movs	r2, #7
 800150e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001510:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <MX_SPI1_Init+0xd4>)
 8001512:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001516:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001518:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <MX_SPI1_Init+0xd4>)
 800151a:	2200      	movs	r2, #0
 800151c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800151e:	4b1a      	ldr	r3, [pc, #104]	@ (8001588 <MX_SPI1_Init+0xd4>)
 8001520:	2200      	movs	r2, #0
 8001522:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001524:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <MX_SPI1_Init+0xd4>)
 8001526:	2200      	movs	r2, #0
 8001528:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800152a:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <MX_SPI1_Init+0xd4>)
 800152c:	2200      	movs	r2, #0
 800152e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001530:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <MX_SPI1_Init+0xd4>)
 8001532:	2200      	movs	r2, #0
 8001534:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <MX_SPI1_Init+0xd4>)
 8001538:	2200      	movs	r2, #0
 800153a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800153c:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <MX_SPI1_Init+0xd4>)
 800153e:	2200      	movs	r2, #0
 8001540:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001542:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <MX_SPI1_Init+0xd4>)
 8001544:	2200      	movs	r2, #0
 8001546:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001548:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <MX_SPI1_Init+0xd4>)
 800154a:	2200      	movs	r2, #0
 800154c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800154e:	480e      	ldr	r0, [pc, #56]	@ (8001588 <MX_SPI1_Init+0xd4>)
 8001550:	f00a f970 	bl	800b834 <HAL_SPI_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 800155a:	f000 faa3 	bl	8001aa4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001562:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001566:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	@ (8001588 <MX_SPI1_Init+0xd4>)
 8001572:	f00a fa90 	bl	800ba96 <HAL_SPIEx_SetConfigAutonomousMode>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 800157c:	f000 fa92 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000142c 	.word	0x2000142c
 800158c:	40013000 	.word	0x40013000

08001590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b090      	sub	sp, #64	@ 0x40
 8001594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	4bbf      	ldr	r3, [pc, #764]	@ (80018a4 <MX_GPIO_Init+0x314>)
 80015a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015ac:	4abd      	ldr	r2, [pc, #756]	@ (80018a4 <MX_GPIO_Init+0x314>)
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015b6:	4bbb      	ldr	r3, [pc, #748]	@ (80018a4 <MX_GPIO_Init+0x314>)
 80015b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015c4:	4bb7      	ldr	r3, [pc, #732]	@ (80018a4 <MX_GPIO_Init+0x314>)
 80015c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015ca:	4ab6      	ldr	r2, [pc, #728]	@ (80018a4 <MX_GPIO_Init+0x314>)
 80015cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015d4:	4bb3      	ldr	r3, [pc, #716]	@ (80018a4 <MX_GPIO_Init+0x314>)
 80015d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24
 80015e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e2:	4bb0      	ldr	r3, [pc, #704]	@ (80018a4 <MX_GPIO_Init+0x314>)
 80015e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015e8:	4aae      	ldr	r2, [pc, #696]	@ (80018a4 <MX_GPIO_Init+0x314>)
 80015ea:	f043 0308 	orr.w	r3, r3, #8
 80015ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015f2:	4bac      	ldr	r3, [pc, #688]	@ (80018a4 <MX_GPIO_Init+0x314>)
 80015f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	623b      	str	r3, [r7, #32]
 80015fe:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001600:	4ba8      	ldr	r3, [pc, #672]	@ (80018a4 <MX_GPIO_Init+0x314>)
 8001602:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001606:	4aa7      	ldr	r2, [pc, #668]	@ (80018a4 <MX_GPIO_Init+0x314>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001610:	4ba4      	ldr	r3, [pc, #656]	@ (80018a4 <MX_GPIO_Init+0x314>)
 8001612:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	61fb      	str	r3, [r7, #28]
 800161c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	4ba1      	ldr	r3, [pc, #644]	@ (80018a4 <MX_GPIO_Init+0x314>)
 8001620:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001624:	4a9f      	ldr	r2, [pc, #636]	@ (80018a4 <MX_GPIO_Init+0x314>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800162e:	4b9d      	ldr	r3, [pc, #628]	@ (80018a4 <MX_GPIO_Init+0x314>)
 8001630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800163c:	4b99      	ldr	r3, [pc, #612]	@ (80018a4 <MX_GPIO_Init+0x314>)
 800163e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001642:	4a98      	ldr	r2, [pc, #608]	@ (80018a4 <MX_GPIO_Init+0x314>)
 8001644:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001648:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800164c:	4b95      	ldr	r3, [pc, #596]	@ (80018a4 <MX_GPIO_Init+0x314>)
 800164e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001652:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800165a:	4b92      	ldr	r3, [pc, #584]	@ (80018a4 <MX_GPIO_Init+0x314>)
 800165c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001660:	4a90      	ldr	r2, [pc, #576]	@ (80018a4 <MX_GPIO_Init+0x314>)
 8001662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001666:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800166a:	4b8e      	ldr	r3, [pc, #568]	@ (80018a4 <MX_GPIO_Init+0x314>)
 800166c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001678:	4b8a      	ldr	r3, [pc, #552]	@ (80018a4 <MX_GPIO_Init+0x314>)
 800167a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800167e:	4a89      	ldr	r2, [pc, #548]	@ (80018a4 <MX_GPIO_Init+0x314>)
 8001680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001684:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001688:	4b86      	ldr	r3, [pc, #536]	@ (80018a4 <MX_GPIO_Init+0x314>)
 800168a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800168e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001696:	4b83      	ldr	r3, [pc, #524]	@ (80018a4 <MX_GPIO_Init+0x314>)
 8001698:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800169c:	4a81      	ldr	r2, [pc, #516]	@ (80018a4 <MX_GPIO_Init+0x314>)
 800169e:	f043 0320 	orr.w	r3, r3, #32
 80016a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016a6:	4b7f      	ldr	r3, [pc, #508]	@ (80018a4 <MX_GPIO_Init+0x314>)
 80016a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ac:	f003 0320 	and.w	r3, r3, #32
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016b4:	4b7b      	ldr	r3, [pc, #492]	@ (80018a4 <MX_GPIO_Init+0x314>)
 80016b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ba:	4a7a      	ldr	r2, [pc, #488]	@ (80018a4 <MX_GPIO_Init+0x314>)
 80016bc:	f043 0310 	orr.w	r3, r3, #16
 80016c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016c4:	4b77      	ldr	r3, [pc, #476]	@ (80018a4 <MX_GPIO_Init+0x314>)
 80016c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016d8:	4873      	ldr	r0, [pc, #460]	@ (80018a8 <MX_GPIO_Init+0x318>)
 80016da:	f003 fae3 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SDMMC_EN_Pin|LRA_EN_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80016e4:	4871      	ldr	r0, [pc, #452]	@ (80018ac <MX_GPIO_Init+0x31c>)
 80016e6:	f003 fadd 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO3_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	f248 0120 	movw	r1, #32800	@ 0x8020
 80016f0:	486f      	ldr	r0, [pc, #444]	@ (80018b0 <MX_GPIO_Init+0x320>)
 80016f2:	f003 fad7 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GNSS_RST_Pin|TP_RST_Pin|GNSS_WAKEUP_Pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	21c8      	movs	r1, #200	@ 0xc8
 80016fa:	486e      	ldr	r0, [pc, #440]	@ (80018b4 <MX_GPIO_Init+0x324>)
 80016fc:	f003 fad2 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_RST_GPIO_Port, FLASH_RST_Pin, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001706:	486c      	ldr	r0, [pc, #432]	@ (80018b8 <MX_GPIO_Init+0x328>)
 8001708:	f003 facc 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	2180      	movs	r1, #128	@ 0x80
 8001710:	486a      	ldr	r0, [pc, #424]	@ (80018bc <MX_GPIO_Init+0x32c>)
 8001712:	f003 fac7 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800171c:	4868      	ldr	r0, [pc, #416]	@ (80018c0 <MX_GPIO_Init+0x330>)
 800171e:	f003 fac1 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPLAY_SWIRE_IN_Pin DISPLAY_SWIRE_OUT_Pin */
  GPIO_InitStruct.Pin = DISPLAY_SWIRE_IN_Pin|DISPLAY_SWIRE_OUT_Pin;
 8001722:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001728:	2300      	movs	r3, #0
 800172a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001730:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001734:	4619      	mov	r1, r3
 8001736:	485c      	ldr	r0, [pc, #368]	@ (80018a8 <MX_GPIO_Init+0x318>)
 8001738:	f003 f8dc 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AVDDEN_Pin */
  GPIO_InitStruct.Pin = AVDDEN_Pin;
 800173c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001740:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001746:	2302      	movs	r3, #2
 8001748:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(AVDDEN_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001752:	4619      	mov	r1, r3
 8001754:	4854      	ldr	r0, [pc, #336]	@ (80018a8 <MX_GPIO_Init+0x318>)
 8001756:	f003 f8cd 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_EN_Pin */
  GPIO_InitStruct.Pin = SDMMC_EN_Pin;
 800175a:	2310      	movs	r3, #16
 800175c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(SDMMC_EN_GPIO_Port, &GPIO_InitStruct);
 800176a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800176e:	4619      	mov	r1, r3
 8001770:	484e      	ldr	r0, [pc, #312]	@ (80018ac <MX_GPIO_Init+0x31c>)
 8001772:	f003 f8bf 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_CD_Pin PWR_INT_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|PWR_INT_Pin;
 8001776:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 800177a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177c:	2300      	movs	r3, #0
 800177e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001780:	2301      	movs	r3, #1
 8001782:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001784:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001788:	4619      	mov	r1, r3
 800178a:	4848      	ldr	r0, [pc, #288]	@ (80018ac <MX_GPIO_Init+0x31c>)
 800178c:	f003 f8b2 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC8 PC11 PC12
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
 8001790:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800179e:	2302      	movs	r3, #2
 80017a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80017a2:	230c      	movs	r3, #12
 80017a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017aa:	4619      	mov	r1, r3
 80017ac:	4845      	ldr	r0, [pc, #276]	@ (80018c4 <MX_GPIO_Init+0x334>)
 80017ae:	f003 f8a1 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|PWR_ENCHG_Pin;
 80017b2:	f248 0320 	movw	r3, #32800	@ 0x8020
 80017b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017bc:	2302      	movs	r3, #2
 80017be:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017c8:	4619      	mov	r1, r3
 80017ca:	4839      	ldr	r0, [pc, #228]	@ (80018b0 <MX_GPIO_Init+0x320>)
 80017cc:	f003 f892 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017d0:	2304      	movs	r3, #4
 80017d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017dc:	2302      	movs	r3, #2
 80017de:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80017e0:	230c      	movs	r3, #12
 80017e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017e8:	4619      	mov	r1, r3
 80017ea:	4830      	ldr	r0, [pc, #192]	@ (80018ac <MX_GPIO_Init+0x31c>)
 80017ec:	f003 f882 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80017f0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80017f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001806:	4619      	mov	r1, r3
 8001808:	482f      	ldr	r0, [pc, #188]	@ (80018c8 <MX_GPIO_Init+0x338>)
 800180a:	f003 f873 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT2_Pin */
  GPIO_InitStruct.Pin = BT_INT2_Pin;
 800180e:	2380      	movs	r3, #128	@ 0x80
 8001810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001812:	2300      	movs	r3, #0
 8001814:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001816:	2302      	movs	r3, #2
 8001818:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BT_INT2_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800181e:	4619      	mov	r1, r3
 8001820:	4828      	ldr	r0, [pc, #160]	@ (80018c4 <MX_GPIO_Init+0x334>)
 8001822:	f003 f867 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001826:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800182a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001834:	2302      	movs	r3, #2
 8001836:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001838:	2308      	movs	r3, #8
 800183a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001840:	4619      	mov	r1, r3
 8001842:	481b      	ldr	r0, [pc, #108]	@ (80018b0 <MX_GPIO_Init+0x320>)
 8001844:	f003 f856 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_Pin GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO1_Pin;
 8001848:	2303      	movs	r3, #3
 800184a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001850:	2302      	movs	r3, #2
 8001852:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001854:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001858:	4619      	mov	r1, r3
 800185a:	4814      	ldr	r0, [pc, #80]	@ (80018ac <MX_GPIO_Init+0x31c>)
 800185c:	f003 f84a 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT1_Pin */
  GPIO_InitStruct.Pin = BT_INT1_Pin;
 8001860:	2340      	movs	r3, #64	@ 0x40
 8001862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001864:	4b19      	ldr	r3, [pc, #100]	@ (80018cc <MX_GPIO_Init+0x33c>)
 8001866:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001868:	2302      	movs	r3, #2
 800186a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BT_INT1_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001870:	4619      	mov	r1, r3
 8001872:	4814      	ldr	r0, [pc, #80]	@ (80018c4 <MX_GPIO_Init+0x334>)
 8001874:	f003 f83e 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin|TP_RST_Pin;
 8001878:	2388      	movs	r3, #136	@ 0x88
 800187a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001880:	2301      	movs	r3, #1
 8001882:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001888:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800188c:	4619      	mov	r1, r3
 800188e:	4809      	ldr	r0, [pc, #36]	@ (80018b4 <MX_GPIO_Init+0x324>)
 8001890:	f003 f830 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_PPS_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin;
 8001894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800189a:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <MX_GPIO_Init+0x33c>)
 800189c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80018a2:	e015      	b.n	80018d0 <MX_GPIO_Init+0x340>
 80018a4:	46020c00 	.word	0x46020c00
 80018a8:	42021800 	.word	0x42021800
 80018ac:	42020c00 	.word	0x42020c00
 80018b0:	42020400 	.word	0x42020400
 80018b4:	42022400 	.word	0x42022400
 80018b8:	42022000 	.word	0x42022000
 80018bc:	42021400 	.word	0x42021400
 80018c0:	42021000 	.word	0x42021000
 80018c4:	42020800 	.word	0x42020800
 80018c8:	42020000 	.word	0x42020000
 80018cc:	10110000 	.word	0x10110000
  HAL_GPIO_Init(GNSS_PPS_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018d4:	4619      	mov	r1, r3
 80018d6:	4860      	ldr	r0, [pc, #384]	@ (8001a58 <MX_GPIO_Init+0x4c8>)
 80018d8:	f003 f80c 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_WAKEUP_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin;
 80018dc:	2340      	movs	r3, #64	@ 0x40
 80018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GNSS_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018f0:	4619      	mov	r1, r3
 80018f2:	485a      	ldr	r0, [pc, #360]	@ (8001a5c <MX_GPIO_Init+0x4cc>)
 80018f4:	f002 fffe 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 80018f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018fe:	4b58      	ldr	r3, [pc, #352]	@ (8001a60 <MX_GPIO_Init+0x4d0>)
 8001900:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001902:	2301      	movs	r3, #1
 8001904:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800190a:	4619      	mov	r1, r3
 800190c:	4853      	ldr	r0, [pc, #332]	@ (8001a5c <MX_GPIO_Init+0x4cc>)
 800190e:	f002 fff1 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RST_Pin */
  GPIO_InitStruct.Pin = FLASH_RST_Pin;
 8001912:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191c:	2301      	movs	r3, #1
 800191e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(FLASH_RST_GPIO_Port, &GPIO_InitStruct);
 8001924:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001928:	4619      	mov	r1, r3
 800192a:	484e      	ldr	r0, [pc, #312]	@ (8001a64 <MX_GPIO_Init+0x4d4>)
 800192c:	f002 ffe2 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_INT_Pin */
  GPIO_InitStruct.Pin = FLASH_INT_Pin;
 8001930:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001936:	4b4a      	ldr	r3, [pc, #296]	@ (8001a60 <MX_GPIO_Init+0x4d0>)
 8001938:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800193a:	2301      	movs	r3, #1
 800193c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(FLASH_INT_GPIO_Port, &GPIO_InitStruct);
 800193e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001942:	4619      	mov	r1, r3
 8001944:	4847      	ldr	r0, [pc, #284]	@ (8001a64 <MX_GPIO_Init+0x4d4>)
 8001946:	f002 ffd5 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RSTO_Pin */
  GPIO_InitStruct.Pin = FLASH_RSTO_Pin;
 800194a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800194e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001950:	2300      	movs	r3, #0
 8001952:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001954:	2301      	movs	r3, #1
 8001956:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(FLASH_RSTO_GPIO_Port, &GPIO_InitStruct);
 8001958:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800195c:	4619      	mov	r1, r3
 800195e:	4841      	ldr	r0, [pc, #260]	@ (8001a64 <MX_GPIO_Init+0x4d4>)
 8001960:	f002 ffc8 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin;
 8001964:	2380      	movs	r3, #128	@ 0x80
 8001966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196c:	2301      	movs	r3, #1
 800196e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2300      	movs	r3, #0
 8001972:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DISPLAY_RST_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001978:	4619      	mov	r1, r3
 800197a:	483b      	ldr	r0, [pc, #236]	@ (8001a68 <MX_GPIO_Init+0x4d8>)
 800197c:	f002 ffba 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALS_INT_Pin */
  GPIO_InitStruct.Pin = ALS_INT_Pin;
 8001980:	2340      	movs	r3, #64	@ 0x40
 8001982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001984:	2300      	movs	r3, #0
 8001986:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001988:	2301      	movs	r3, #1
 800198a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ALS_INT_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001990:	4619      	mov	r1, r3
 8001992:	4835      	ldr	r0, [pc, #212]	@ (8001a68 <MX_GPIO_Init+0x4d8>)
 8001994:	f002 ffae 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 8001998:	2380      	movs	r3, #128	@ 0x80
 800199a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800199c:	4b30      	ldr	r3, [pc, #192]	@ (8001a60 <MX_GPIO_Init+0x4d0>)
 800199e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a0:	2301      	movs	r3, #1
 80019a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019a8:	4619      	mov	r1, r3
 80019aa:	4830      	ldr	r0, [pc, #192]	@ (8001a6c <MX_GPIO_Init+0x4dc>)
 80019ac:	f002 ffa2 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 80019b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 80019c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019c6:	4619      	mov	r1, r3
 80019c8:	4828      	ldr	r0, [pc, #160]	@ (8001a6c <MX_GPIO_Init+0x4dc>)
 80019ca:	f002 ff93 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HR_INT_Pin */
  GPIO_InitStruct.Pin = HR_INT_Pin;
 80019ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019d4:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <MX_GPIO_Init+0x4d0>)
 80019d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d8:	2301      	movs	r3, #1
 80019da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(HR_INT_GPIO_Port, &GPIO_InitStruct);
 80019dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019e0:	4619      	mov	r1, r3
 80019e2:	4823      	ldr	r0, [pc, #140]	@ (8001a70 <MX_GPIO_Init+0x4e0>)
 80019e4:	f002 ff86 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LRA_EN_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin;
 80019e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019f2:	2302      	movs	r3, #2
 80019f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LRA_EN_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019fe:	4619      	mov	r1, r3
 8001a00:	481b      	ldr	r0, [pc, #108]	@ (8001a70 <MX_GPIO_Init+0x4e0>)
 8001a02:	f002 ff77 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_INT_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin;
 8001a06:	2310      	movs	r3, #16
 8001a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <MX_GPIO_Init+0x4d0>)
 8001a0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MAG_INT_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a16:	4619      	mov	r1, r3
 8001a18:	4816      	ldr	r0, [pc, #88]	@ (8001a74 <MX_GPIO_Init+0x4e4>)
 8001a1a:	f002 ff6b 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a22:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <MX_GPIO_Init+0x4e8>)
 8001a24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4812      	ldr	r0, [pc, #72]	@ (8001a7c <MX_GPIO_Init+0x4ec>)
 8001a32:	f002 ff5f 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin;
 8001a36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(IMU_INT2_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4807      	ldr	r0, [pc, #28]	@ (8001a68 <MX_GPIO_Init+0x4d8>)
 8001a4c:	f002 ff52 	bl	80048f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a50:	bf00      	nop
 8001a52:	3740      	adds	r7, #64	@ 0x40
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	42020000 	.word	0x42020000
 8001a5c:	42022400 	.word	0x42022400
 8001a60:	10210000 	.word	0x10210000
 8001a64:	42022000 	.word	0x42022000
 8001a68:	42021400 	.word	0x42021400
 8001a6c:	42021000 	.word	0x42021000
 8001a70:	42020c00 	.word	0x42020c00
 8001a74:	42020800 	.word	0x42020800
 8001a78:	10110000 	.word	0x10110000
 8001a7c:	42020400 	.word	0x42020400

08001a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a92:	f001 fa5f 	bl	8002f54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40001000 	.word	0x40001000

08001aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa8:	b672      	cpsid	i
}
 8001aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <Error_Handler+0x8>

08001ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_MspInit+0x30>)
 8001ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001abc:	4a08      	ldr	r2, [pc, #32]	@ (8001ae0 <HAL_MspInit+0x30>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_MspInit+0x30>)
 8001ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	46020c00 	.word	0x46020c00

08001ae4 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b0c2      	sub	sp, #264	@ 0x108
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001aee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001af2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b04:	f107 0310 	add.w	r3, r7, #16
 8001b08:	22e0      	movs	r2, #224	@ 0xe0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f00b f8f6 	bl	800ccfe <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8001b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a2b      	ldr	r2, [pc, #172]	@ (8001bcc <HAL_MDF_MspInit+0xe8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d14e      	bne.n	8001bc2 <HAL_MDF_MspInit+0xde>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001b24:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f006 fbce 	bl	80082dc <HAL_RCCEx_PeriphCLKConfig>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_MDF_MspInit+0x66>
    {
      Error_Handler();
 8001b46:	f7ff ffad 	bl	8001aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 8001b4a:	4b21      	ldr	r3, [pc, #132]	@ (8001bd0 <HAL_MDF_MspInit+0xec>)
 8001b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b50:	4a1f      	ldr	r2, [pc, #124]	@ (8001bd0 <HAL_MDF_MspInit+0xec>)
 8001b52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd0 <HAL_MDF_MspInit+0xec>)
 8001b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b68:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <HAL_MDF_MspInit+0xec>)
 8001b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b6e:	4a18      	ldr	r2, [pc, #96]	@ (8001bd0 <HAL_MDF_MspInit+0xec>)
 8001b70:	f043 0310 	orr.w	r3, r3, #16
 8001b74:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b78:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <HAL_MDF_MspInit+0xec>)
 8001b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b7e:	f003 0210 	and.w	r2, r3, #16
 8001b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b86:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b90:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b94:	681b      	ldr	r3, [r3, #0]
    /**ADF1 GPIO Configuration
    PE9     ------> ADF1_CCK0
    PE10     ------> ADF1_SDI0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b96:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bb6:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4805      	ldr	r0, [pc, #20]	@ (8001bd4 <HAL_MDF_MspInit+0xf0>)
 8001bbe:	f002 fe99 	bl	80048f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 8001bc2:	bf00      	nop
 8001bc4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	46024080 	.word	0x46024080
 8001bd0:	46020c00 	.word	0x46020c00
 8001bd4:	42021000 	.word	0x42021000

08001bd8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0b      	ldr	r2, [pc, #44]	@ (8001c14 <HAL_CRC_MspInit+0x3c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d10e      	bne.n	8001c08 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001bea:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <HAL_CRC_MspInit+0x40>)
 8001bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bf0:	4a09      	ldr	r2, [pc, #36]	@ (8001c18 <HAL_CRC_MspInit+0x40>)
 8001bf2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bf6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001bfa:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <HAL_CRC_MspInit+0x40>)
 8001bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	40023000 	.word	0x40023000
 8001c18:	46020c00 	.word	0x46020c00

08001c1c <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a16      	ldr	r2, [pc, #88]	@ (8001c84 <HAL_DCACHE_MspInit+0x68>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d10f      	bne.n	8001c4e <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8001c2e:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <HAL_DCACHE_MspInit+0x6c>)
 8001c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c34:	4a14      	ldr	r2, [pc, #80]	@ (8001c88 <HAL_DCACHE_MspInit+0x6c>)
 8001c36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c3a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001c3e:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <HAL_DCACHE_MspInit+0x6c>)
 8001c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c44:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 8001c4c:	e013      	b.n	8001c76 <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a0e      	ldr	r2, [pc, #56]	@ (8001c8c <HAL_DCACHE_MspInit+0x70>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d10e      	bne.n	8001c76 <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <HAL_DCACHE_MspInit+0x6c>)
 8001c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <HAL_DCACHE_MspInit+0x6c>)
 8001c60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001c68:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <HAL_DCACHE_MspInit+0x6c>)
 8001c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40031400 	.word	0x40031400
 8001c88:	46020c00 	.word	0x46020c00
 8001c8c:	40031800 	.word	0x40031800

08001c90 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd8 <HAL_DMA2D_MspInit+0x48>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d116      	bne.n	8001cd0 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <HAL_DMA2D_MspInit+0x4c>)
 8001ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8001cdc <HAL_DMA2D_MspInit+0x4c>)
 8001caa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cdc <HAL_DMA2D_MspInit+0x4c>)
 8001cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	2076      	movs	r0, #118	@ 0x76
 8001cc6:	f001 fa41 	bl	800314c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001cca:	2076      	movs	r0, #118	@ 0x76
 8001ccc:	f001 fa58 	bl	8003180 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	4002b000 	.word	0x4002b000
 8001cdc:	46020c00 	.word	0x46020c00

08001ce0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b0c2      	sub	sp, #264	@ 0x108
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001cea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cee:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d00:	f107 0310 	add.w	r3, r7, #16
 8001d04:	22e0      	movs	r2, #224	@ 0xe0
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f00a fff8 	bl	800ccfe <memset>
  if(hdsi->Instance==DSI)
 8001d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a30      	ldr	r2, [pc, #192]	@ (8001ddc <HAL_DSI_MspInit+0xfc>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d157      	bne.n	8001dd0 <HAL_DSI_MspInit+0xf0>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	f04f 0304 	mov.w	r3, #4
 8001d28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 8001d2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d30:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d34:	f107 0310 	add.w	r3, r7, #16
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f006 facf 	bl	80082dc <HAL_RCCEx_PeriphCLKConfig>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_DSI_MspInit+0x68>
    {
      Error_Handler();
 8001d44:	f7ff feae 	bl	8001aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001d48:	4b25      	ldr	r3, [pc, #148]	@ (8001de0 <HAL_DSI_MspInit+0x100>)
 8001d4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d4e:	4a24      	ldr	r2, [pc, #144]	@ (8001de0 <HAL_DSI_MspInit+0x100>)
 8001d50:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001d54:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001d58:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <HAL_DSI_MspInit+0x100>)
 8001d5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d66:	4b1e      	ldr	r3, [pc, #120]	@ (8001de0 <HAL_DSI_MspInit+0x100>)
 8001d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8001de0 <HAL_DSI_MspInit+0x100>)
 8001d6e:	f043 0320 	orr.w	r3, r3, #32
 8001d72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d76:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <HAL_DSI_MspInit+0x100>)
 8001d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d7c:	f003 0220 	and.w	r2, r3, #32
 8001d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d84:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d8e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d92:	681b      	ldr	r3, [r3, #0]
    DSI_CKN     ------> DSIHOST_CKN
    DSI_D1N     ------> DSIHOST_D1N
    DSI_D1P     ------> DSIHOST_D1P
    PF10     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8001dae:	230b      	movs	r3, #11
 8001db0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001db4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001db8:	4619      	mov	r1, r3
 8001dba:	480a      	ldr	r0, [pc, #40]	@ (8001de4 <HAL_DSI_MspInit+0x104>)
 8001dbc:	f002 fd9a 	bl	80048f4 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	2089      	movs	r0, #137	@ 0x89
 8001dc6:	f001 f9c1 	bl	800314c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001dca:	2089      	movs	r0, #137	@ 0x89
 8001dcc:	f001 f9d8 	bl	8003180 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001dd0:	bf00      	nop
 8001dd2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40016c00 	.word	0x40016c00
 8001de0:	46020c00 	.word	0x46020c00
 8001de4:	42021400 	.word	0x42021400

08001de8 <HAL_GFXMMU_MspInit>:
* This function configures the hardware resources used in this example
* @param hgfxmmu: GFXMMU handle pointer
* @retval None
*/
void HAL_GFXMMU_MspInit(GFXMMU_HandleTypeDef* hgfxmmu)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if(hgfxmmu->Instance==GFXMMU)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0e      	ldr	r2, [pc, #56]	@ (8001e30 <HAL_GFXMMU_MspInit+0x48>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d116      	bne.n	8001e28 <HAL_GFXMMU_MspInit+0x40>
  {
  /* USER CODE BEGIN GFXMMU_MspInit 0 */

  /* USER CODE END GFXMMU_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GFXMMU_CLK_ENABLE();
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <HAL_GFXMMU_MspInit+0x4c>)
 8001dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e00:	4a0c      	ldr	r2, [pc, #48]	@ (8001e34 <HAL_GFXMMU_MspInit+0x4c>)
 8001e02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e06:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <HAL_GFXMMU_MspInit+0x4c>)
 8001e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
    /* GFXMMU interrupt Init */
    HAL_NVIC_SetPriority(GFXMMU_IRQn, 0, 0);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	2086      	movs	r0, #134	@ 0x86
 8001e1e:	f001 f995 	bl	800314c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GFXMMU_IRQn);
 8001e22:	2086      	movs	r0, #134	@ 0x86
 8001e24:	f001 f9ac 	bl	8003180 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GFXMMU_MspInit 1 */

  /* USER CODE END GFXMMU_MspInit 1 */
  }

}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	4002c000 	.word	0x4002c000
 8001e34:	46020c00 	.word	0x46020c00

08001e38 <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1a      	ldr	r2, [pc, #104]	@ (8001eb0 <HAL_GPU2D_MspInit+0x78>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d12d      	bne.n	8001ea6 <HAL_GPU2D_MspInit+0x6e>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <HAL_GPU2D_MspInit+0x7c>)
 8001e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e50:	4a18      	ldr	r2, [pc, #96]	@ (8001eb4 <HAL_GPU2D_MspInit+0x7c>)
 8001e52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e56:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001e5a:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <HAL_GPU2D_MspInit+0x7c>)
 8001e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001e68:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <HAL_GPU2D_MspInit+0x7c>)
 8001e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e6e:	4a11      	ldr	r2, [pc, #68]	@ (8001eb4 <HAL_GPU2D_MspInit+0x7c>)
 8001e70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001e78:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <HAL_GPU2D_MspInit+0x7c>)
 8001e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 0, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2084      	movs	r0, #132	@ 0x84
 8001e8c:	f001 f95e 	bl	800314c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 8001e90:	2084      	movs	r0, #132	@ 0x84
 8001e92:	f001 f975 	bl	8003180 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 0, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	2085      	movs	r0, #133	@ 0x85
 8001e9c:	f001 f956 	bl	800314c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 8001ea0:	2085      	movs	r0, #133	@ 0x85
 8001ea2:	f001 f96d 	bl	8003180 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */

  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	4002f000 	.word	0x4002f000
 8001eb4:	46020c00 	.word	0x46020c00

08001eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b0cc      	sub	sp, #304	@ 0x130
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ec2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ec6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ed8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001edc:	22e0      	movs	r2, #224	@ 0xe0
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f00a ff0c 	bl	800ccfe <memset>
  if(hi2c->Instance==I2C1)
 8001ee6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001eea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4aba      	ldr	r2, [pc, #744]	@ (80021dc <HAL_I2C_MspInit+0x324>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d14f      	bne.n	8001f98 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ef8:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f0a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f006 f9e4 	bl	80082dc <HAL_RCCEx_PeriphCLKConfig>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001f1a:	f7ff fdc3 	bl	8001aa4 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f1e:	4bb0      	ldr	r3, [pc, #704]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 8001f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f24:	4aae      	ldr	r2, [pc, #696]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 8001f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f2e:	4bac      	ldr	r3, [pc, #688]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 8001f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001f3c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001f40:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f44:	2312      	movs	r3, #18
 8001f46:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f56:	2304      	movs	r3, #4
 8001f58:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f5c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001f60:	4619      	mov	r1, r3
 8001f62:	48a0      	ldr	r0, [pc, #640]	@ (80021e4 <HAL_I2C_MspInit+0x32c>)
 8001f64:	f002 fcc6 	bl	80048f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f68:	4b9d      	ldr	r3, [pc, #628]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 8001f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f6e:	4a9c      	ldr	r2, [pc, #624]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 8001f70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f74:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001f78:	4b99      	ldr	r3, [pc, #612]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 8001f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f7e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001f82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f86:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f90:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f94:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C6_MspInit 1 */

  /* USER CODE END I2C6_MspInit 1 */
  }

}
 8001f96:	e1c0      	b.n	800231a <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C2)
 8001f98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a90      	ldr	r2, [pc, #576]	@ (80021e8 <HAL_I2C_MspInit+0x330>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d157      	bne.n	800205a <HAL_I2C_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001faa:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fbc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f006 f98b 	bl	80082dc <HAL_RCCEx_PeriphCLKConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001fcc:	f7ff fd6a 	bl	8001aa4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd0:	4b83      	ldr	r3, [pc, #524]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 8001fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fd6:	4a82      	ldr	r2, [pc, #520]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fe0:	4b7f      	ldr	r3, [pc, #508]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 8001fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fe6:	f003 0202 	and.w	r2, r3, #2
 8001fea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001fee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ff8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ffc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001ffe:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002002:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002006:	2312      	movs	r3, #18
 8002008:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002018:	2304      	movs	r3, #4
 800201a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201e:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002022:	4619      	mov	r1, r3
 8002024:	4871      	ldr	r0, [pc, #452]	@ (80021ec <HAL_I2C_MspInit+0x334>)
 8002026:	f002 fc65 	bl	80048f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800202a:	4b6d      	ldr	r3, [pc, #436]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 800202c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002030:	4a6b      	ldr	r2, [pc, #428]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 8002032:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002036:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800203a:	4b69      	ldr	r3, [pc, #420]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 800203c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002040:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002044:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	e15f      	b.n	800231a <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C3)
 800205a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800205e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a62      	ldr	r2, [pc, #392]	@ (80021f0 <HAL_I2C_MspInit+0x338>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d156      	bne.n	800211a <HAL_I2C_MspInit+0x262>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800206c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8002078:	2300      	movs	r3, #0
 800207a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800207e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002082:	4618      	mov	r0, r3
 8002084:	f006 f92a 	bl	80082dc <HAL_RCCEx_PeriphCLKConfig>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_MspInit+0x1da>
      Error_Handler();
 800208e:	f7ff fd09 	bl	8001aa4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002092:	4b53      	ldr	r3, [pc, #332]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 8002094:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002098:	4a51      	ldr	r2, [pc, #324]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020a2:	4b4f      	ldr	r3, [pc, #316]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 80020a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020a8:	f003 0204 	and.w	r2, r3, #4
 80020ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80020b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80020ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020be:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80020c0:	2303      	movs	r3, #3
 80020c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c6:	2312      	movs	r3, #18
 80020c8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020d8:	2304      	movs	r3, #4
 80020da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020de:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80020e2:	4619      	mov	r1, r3
 80020e4:	4843      	ldr	r0, [pc, #268]	@ (80021f4 <HAL_I2C_MspInit+0x33c>)
 80020e6:	f002 fc05 	bl	80048f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80020ea:	4b3d      	ldr	r3, [pc, #244]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 80020ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80020f0:	4a3b      	ldr	r2, [pc, #236]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 80020f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020f6:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80020fa:	4b39      	ldr	r3, [pc, #228]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 80020fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002100:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002104:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002108:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002112:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	e0ff      	b.n	800231a <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C4)
 800211a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800211e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a34      	ldr	r2, [pc, #208]	@ (80021f8 <HAL_I2C_MspInit+0x340>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d169      	bne.n	8002200 <HAL_I2C_MspInit+0x348>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800212c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800213e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002142:	4618      	mov	r0, r3
 8002144:	f006 f8ca 	bl	80082dc <HAL_RCCEx_PeriphCLKConfig>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_I2C_MspInit+0x29a>
      Error_Handler();
 800214e:	f7ff fca9 	bl	8001aa4 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002152:	4b23      	ldr	r3, [pc, #140]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 8002154:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002158:	4a21      	ldr	r2, [pc, #132]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 800215a:	f043 0308 	orr.w	r3, r3, #8
 800215e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002162:	4b1f      	ldr	r3, [pc, #124]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 8002164:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002168:	f003 0208 	and.w	r2, r3, #8
 800216c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002170:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800217a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800217e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002180:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002184:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002188:	2312      	movs	r3, #18
 800218a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800219a:	2304      	movs	r3, #4
 800219c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80021a4:	4619      	mov	r1, r3
 80021a6:	4815      	ldr	r0, [pc, #84]	@ (80021fc <HAL_I2C_MspInit+0x344>)
 80021a8:	f002 fba4 	bl	80048f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80021ac:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 80021ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80021b2:	4a0b      	ldr	r2, [pc, #44]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80021bc:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <HAL_I2C_MspInit+0x328>)
 80021be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80021c2:	f003 0202 	and.w	r2, r3, #2
 80021c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80021ca:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80021d4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80021d8:	681b      	ldr	r3, [r3, #0]
}
 80021da:	e09e      	b.n	800231a <HAL_I2C_MspInit+0x462>
 80021dc:	40005400 	.word	0x40005400
 80021e0:	46020c00 	.word	0x46020c00
 80021e4:	42021800 	.word	0x42021800
 80021e8:	40005800 	.word	0x40005800
 80021ec:	42020400 	.word	0x42020400
 80021f0:	46002800 	.word	0x46002800
 80021f4:	42020800 	.word	0x42020800
 80021f8:	40008400 	.word	0x40008400
 80021fc:	42020c00 	.word	0x42020c00
  else if(hi2c->Instance==I2C6)
 8002200:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002204:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a45      	ldr	r2, [pc, #276]	@ (8002324 <HAL_I2C_MspInit+0x46c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	f040 8083 	bne.w	800231a <HAL_I2C_MspInit+0x462>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C6;
 8002214:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInit.I2c6ClockSelection = RCC_I2C6CLKSOURCE_PCLK1;
 8002220:	2300      	movs	r3, #0
 8002222:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002226:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800222a:	4618      	mov	r0, r3
 800222c:	f006 f856 	bl	80082dc <HAL_RCCEx_PeriphCLKConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_MspInit+0x382>
      Error_Handler();
 8002236:	f7ff fc35 	bl	8001aa4 <Error_Handler>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800223a:	4b3b      	ldr	r3, [pc, #236]	@ (8002328 <HAL_I2C_MspInit+0x470>)
 800223c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002240:	4a39      	ldr	r2, [pc, #228]	@ (8002328 <HAL_I2C_MspInit+0x470>)
 8002242:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002246:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800224a:	4b37      	ldr	r3, [pc, #220]	@ (8002328 <HAL_I2C_MspInit+0x470>)
 800224c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002250:	f403 7200 	and.w	r2, r3, #512	@ 0x200
 8002254:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002258:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002262:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002266:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002268:	4b2f      	ldr	r3, [pc, #188]	@ (8002328 <HAL_I2C_MspInit+0x470>)
 800226a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800226e:	4a2e      	ldr	r2, [pc, #184]	@ (8002328 <HAL_I2C_MspInit+0x470>)
 8002270:	f043 0320 	orr.w	r3, r3, #32
 8002274:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002278:	4b2b      	ldr	r3, [pc, #172]	@ (8002328 <HAL_I2C_MspInit+0x470>)
 800227a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800227e:	f003 0220 	and.w	r2, r3, #32
 8002282:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002286:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002290:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002294:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800229a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800229e:	2312      	movs	r3, #18
 80022a0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 80022b0:	2302      	movs	r3, #2
 80022b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80022b6:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80022ba:	4619      	mov	r1, r3
 80022bc:	481b      	ldr	r0, [pc, #108]	@ (800232c <HAL_I2C_MspInit+0x474>)
 80022be:	f002 fb19 	bl	80048f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022c2:	2301      	movs	r3, #1
 80022c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022c8:	2312      	movs	r3, #18
 80022ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 80022da:	2302      	movs	r3, #2
 80022dc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022e0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80022e4:	4619      	mov	r1, r3
 80022e6:	4812      	ldr	r0, [pc, #72]	@ (8002330 <HAL_I2C_MspInit+0x478>)
 80022e8:	f002 fb04 	bl	80048f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C6_CLK_ENABLE();
 80022ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <HAL_I2C_MspInit+0x470>)
 80022ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80022f2:	4a0d      	ldr	r2, [pc, #52]	@ (8002328 <HAL_I2C_MspInit+0x470>)
 80022f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022f8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80022fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <HAL_I2C_MspInit+0x470>)
 80022fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002302:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002306:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800230a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002314:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002318:	681b      	ldr	r3, [r3, #0]
}
 800231a:	bf00      	nop
 800231c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40009c00 	.word	0x40009c00
 8002328:	46020c00 	.word	0x46020c00
 800232c:	42022400 	.word	0x42022400
 8002330:	42021400 	.word	0x42021400

08002334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b0c8      	sub	sp, #288	@ 0x120
 8002338:	af00      	add	r7, sp, #0
 800233a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800233e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002342:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002354:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002358:	22e0      	movs	r2, #224	@ 0xe0
 800235a:	2100      	movs	r1, #0
 800235c:	4618      	mov	r0, r3
 800235e:	f00a fcce 	bl	800ccfe <memset>
  if(huart->Instance==LPUART1)
 8002362:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002366:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4aa1      	ldr	r2, [pc, #644]	@ (80025f4 <HAL_UART_MspInit+0x2c0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d17b      	bne.n	800246c <HAL_UART_MspInit+0x138>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002374:	f04f 0220 	mov.w	r2, #32
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002386:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800238a:	4618      	mov	r0, r3
 800238c:	f005 ffa6 	bl	80082dc <HAL_RCCEx_PeriphCLKConfig>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8002396:	f7ff fb85 	bl	8001aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800239a:	4b97      	ldr	r3, [pc, #604]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 800239c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80023a0:	4a95      	ldr	r2, [pc, #596]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 80023a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023a6:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80023aa:	4b93      	ldr	r3, [pc, #588]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 80023ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80023b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023b8:	4b8f      	ldr	r3, [pc, #572]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 80023ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023be:	4a8e      	ldr	r2, [pc, #568]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 80023c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023c8:	4b8b      	ldr	r3, [pc, #556]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 80023ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023ce:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80023d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80023d6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80023e0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80023e4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	4b84      	ldr	r3, [pc, #528]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 80023e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023ec:	4a82      	ldr	r2, [pc, #520]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 80023ee:	f043 0302 	orr.w	r3, r3, #2
 80023f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023f6:	4b80      	ldr	r3, [pc, #512]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 80023f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023fc:	f003 0202 	and.w	r2, r3, #2
 8002400:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002404:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800240e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002412:	681b      	ldr	r3, [r3, #0]
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    PG5     ------> LPUART1_CTS
    PB1     ------> LPUART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_5;
 8002414:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8002418:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800242e:	2308      	movs	r3, #8
 8002430:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002434:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002438:	4619      	mov	r1, r3
 800243a:	4870      	ldr	r0, [pc, #448]	@ (80025fc <HAL_UART_MspInit+0x2c8>)
 800243c:	f002 fa5a 	bl	80048f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002440:	2302      	movs	r3, #2
 8002442:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002458:	2308      	movs	r3, #8
 800245a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002462:	4619      	mov	r1, r3
 8002464:	4866      	ldr	r0, [pc, #408]	@ (8002600 <HAL_UART_MspInit+0x2cc>)
 8002466:	f002 fa45 	bl	80048f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800246a:	e0bd      	b.n	80025e8 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART1)
 800246c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002470:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a62      	ldr	r2, [pc, #392]	@ (8002604 <HAL_UART_MspInit+0x2d0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d155      	bne.n	800252a <HAL_UART_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800247e:	f04f 0201 	mov.w	r2, #1
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800248a:	2300      	movs	r3, #0
 800248c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800248e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002492:	4618      	mov	r0, r3
 8002494:	f005 ff22 	bl	80082dc <HAL_RCCEx_PeriphCLKConfig>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 800249e:	f7ff fb01 	bl	8001aa4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80024a2:	4b55      	ldr	r3, [pc, #340]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 80024a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80024a8:	4a53      	ldr	r2, [pc, #332]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 80024aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024ae:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80024b2:	4b51      	ldr	r3, [pc, #324]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 80024b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80024b8:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80024bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024ce:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d0:	4b49      	ldr	r3, [pc, #292]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 80024d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024d6:	4a48      	ldr	r2, [pc, #288]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024e0:	4b45      	ldr	r3, [pc, #276]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 80024e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024e6:	f003 0202 	and.w	r2, r3, #2
 80024ea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024fc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80024fe:	23c0      	movs	r3, #192	@ 0xc0
 8002500:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002516:	2307      	movs	r3, #7
 8002518:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002520:	4619      	mov	r1, r3
 8002522:	4837      	ldr	r0, [pc, #220]	@ (8002600 <HAL_UART_MspInit+0x2cc>)
 8002524:	f002 f9e6 	bl	80048f4 <HAL_GPIO_Init>
}
 8002528:	e05e      	b.n	80025e8 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART6)
 800252a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800252e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a34      	ldr	r2, [pc, #208]	@ (8002608 <HAL_UART_MspInit+0x2d4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d155      	bne.n	80025e8 <HAL_UART_MspInit+0x2b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800253c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800254e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002552:	4618      	mov	r0, r3
 8002554:	f005 fec2 	bl	80082dc <HAL_RCCEx_PeriphCLKConfig>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 800255e:	f7ff faa1 	bl	8001aa4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002562:	4b25      	ldr	r3, [pc, #148]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 8002564:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002568:	4a23      	ldr	r2, [pc, #140]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 800256a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800256e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002572:	4b21      	ldr	r3, [pc, #132]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 8002574:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002578:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 800257c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002580:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800258a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800258e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002590:	4b19      	ldr	r3, [pc, #100]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 8002592:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002596:	4a18      	ldr	r2, [pc, #96]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025a0:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <HAL_UART_MspInit+0x2c4>)
 80025a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025a6:	f003 0204 	and.w	r2, r3, #4
 80025aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80025ae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80025b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025bc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80025be:	230c      	movs	r3, #12
 80025c0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c4:	2302      	movs	r3, #2
 80025c6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80025d6:	2307      	movs	r3, #7
 80025d8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025dc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80025e0:	4619      	mov	r1, r3
 80025e2:	480a      	ldr	r0, [pc, #40]	@ (800260c <HAL_UART_MspInit+0x2d8>)
 80025e4:	f002 f986 	bl	80048f4 <HAL_GPIO_Init>
}
 80025e8:	bf00      	nop
 80025ea:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	46002400 	.word	0x46002400
 80025f8:	46020c00 	.word	0x46020c00
 80025fc:	42021800 	.word	0x42021800
 8002600:	42020400 	.word	0x42020400
 8002604:	40013800 	.word	0x40013800
 8002608:	40006400 	.word	0x40006400
 800260c:	42020800 	.word	0x42020800

08002610 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b0bc      	sub	sp, #240	@ 0xf0
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002618:	f107 0310 	add.w	r3, r7, #16
 800261c:	22e0      	movs	r2, #224	@ 0xe0
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f00a fb6c 	bl	800ccfe <memset>
  if(hltdc->Instance==LTDC)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a22      	ldr	r2, [pc, #136]	@ (80026b4 <HAL_LTDC_MspInit+0xa4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d13d      	bne.n	80026ac <HAL_LTDC_MspInit+0x9c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0302 	mov.w	r3, #2
 8002638:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 800263c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002640:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8002644:	2303      	movs	r3, #3
 8002646:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLL2.PLL2M = 1;
 8002648:	2301      	movs	r3, #1
 800264a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLL2.PLL2N = 20;
 800264c:	2314      	movs	r3, #20
 800264e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2P = 2;
 8002650:	2302      	movs	r3, #2
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLL2.PLL2Q = 2;
 8002654:	2302      	movs	r3, #2
 8002656:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLL2.PLL2R = 2;
 8002658:	2302      	movs	r3, #2
 800265a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 800265c:	230c      	movs	r3, #12
 800265e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8002664:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002668:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800266a:	f107 0310 	add.w	r3, r7, #16
 800266e:	4618      	mov	r0, r3
 8002670:	f005 fe34 	bl	80082dc <HAL_RCCEx_PeriphCLKConfig>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 800267a:	f7ff fa13 	bl	8001aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800267e:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <HAL_LTDC_MspInit+0xa8>)
 8002680:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002684:	4a0c      	ldr	r2, [pc, #48]	@ (80026b8 <HAL_LTDC_MspInit+0xa8>)
 8002686:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800268a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800268e:	4b0a      	ldr	r3, [pc, #40]	@ (80026b8 <HAL_LTDC_MspInit+0xa8>)
 8002690:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002694:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800269c:	2200      	movs	r2, #0
 800269e:	2100      	movs	r1, #0
 80026a0:	2087      	movs	r0, #135	@ 0x87
 80026a2:	f000 fd53 	bl	800314c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80026a6:	2087      	movs	r0, #135	@ 0x87
 80026a8:	f000 fd6a 	bl	8003180 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80026ac:	bf00      	nop
 80026ae:	37f0      	adds	r7, #240	@ 0xf0
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40016800 	.word	0x40016800
 80026b8:	46020c00 	.word	0x46020c00

080026bc <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b0ca      	sub	sp, #296	@ 0x128
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80026c6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80026ca:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026e0:	22e0      	movs	r2, #224	@ 0xe0
 80026e2:	2100      	movs	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f00a fb0a 	bl	800ccfe <memset>
  if(hospi->Instance==OCTOSPI1)
 80026ea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80026ee:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a93      	ldr	r2, [pc, #588]	@ (8002944 <HAL_OSPI_MspInit+0x288>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	f040 8133 	bne.w	8002964 <HAL_OSPI_MspInit+0x2a8>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80026fe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800270a:	2300      	movs	r3, #0
 800270c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002710:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002714:	4618      	mov	r0, r3
 8002716:	f005 fde1 	bl	80082dc <HAL_RCCEx_PeriphCLKConfig>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8002720:	f7ff f9c0 	bl	8001aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8002724:	4b88      	ldr	r3, [pc, #544]	@ (8002948 <HAL_OSPI_MspInit+0x28c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3301      	adds	r3, #1
 800272a:	4a87      	ldr	r2, [pc, #540]	@ (8002948 <HAL_OSPI_MspInit+0x28c>)
 800272c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 800272e:	4b86      	ldr	r3, [pc, #536]	@ (8002948 <HAL_OSPI_MspInit+0x28c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d10e      	bne.n	8002754 <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8002736:	4b85      	ldr	r3, [pc, #532]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 8002738:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800273c:	4a83      	ldr	r2, [pc, #524]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 800273e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002742:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002746:	4b81      	ldr	r3, [pc, #516]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 8002748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800274c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002754:	4b7d      	ldr	r3, [pc, #500]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275a:	4a7c      	ldr	r2, [pc, #496]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 800275c:	f043 0310 	orr.w	r3, r3, #16
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002764:	4b79      	ldr	r3, [pc, #484]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276a:	f003 0210 	and.w	r2, r3, #16
 800276e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002772:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800277c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002780:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002782:	4b72      	ldr	r3, [pc, #456]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 8002784:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002788:	4a70      	ldr	r2, [pc, #448]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 800278a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800278e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002792:	4b6e      	ldr	r3, [pc, #440]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 8002794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002798:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 800279c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80027a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80027aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80027ae:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027b0:	4b66      	ldr	r3, [pc, #408]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 80027b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027b6:	4a65      	ldr	r2, [pc, #404]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 80027b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027c0:	4b62      	ldr	r3, [pc, #392]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 80027c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027c6:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80027ca:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80027ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80027d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80027dc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80027de:	4b5b      	ldr	r3, [pc, #364]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 80027e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027e4:	4a59      	ldr	r2, [pc, #356]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 80027e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027ee:	4b57      	ldr	r3, [pc, #348]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 80027f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027f4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80027f8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80027fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002806:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800280a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800280c:	4b4f      	ldr	r3, [pc, #316]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 800280e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002812:	4a4e      	ldr	r2, [pc, #312]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800281c:	4b4b      	ldr	r3, [pc, #300]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 800281e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002822:	f003 0202 	and.w	r2, r3, #2
 8002826:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800282a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002834:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002838:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800283a:	4b44      	ldr	r3, [pc, #272]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 800283c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002840:	4a42      	ldr	r2, [pc, #264]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 8002842:	f043 0310 	orr.w	r3, r3, #16
 8002846:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800284a:	4b40      	ldr	r3, [pc, #256]	@ (800294c <HAL_OSPI_MspInit+0x290>)
 800284c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002850:	f003 0210 	and.w	r2, r3, #16
 8002854:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002858:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002862:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002866:	681b      	ldr	r3, [r3, #0]
    PH9     ------> OCTOSPIM_P2_IO4
    PH12     ------> OCTOSPIM_P2_IO7
    PB10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9
 8002868:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800286c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287c:	2303      	movs	r3, #3
 800287e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8002882:	2305      	movs	r3, #5
 8002884:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002888:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800288c:	4619      	mov	r1, r3
 800288e:	4830      	ldr	r0, [pc, #192]	@ (8002950 <HAL_OSPI_MspInit+0x294>)
 8002890:	f002 f830 	bl	80048f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002894:	2340      	movs	r3, #64	@ 0x40
 8002896:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80028ac:	2303      	movs	r3, #3
 80028ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028b2:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80028b6:	4619      	mov	r1, r3
 80028b8:	4826      	ldr	r0, [pc, #152]	@ (8002954 <HAL_OSPI_MspInit+0x298>)
 80028ba:	f002 f81b 	bl	80048f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80028be:	230e      	movs	r3, #14
 80028c0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d0:	2303      	movs	r3, #3
 80028d2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPI2;
 80028d6:	2306      	movs	r3, #6
 80028d8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80028dc:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80028e0:	4619      	mov	r1, r3
 80028e2:	481d      	ldr	r0, [pc, #116]	@ (8002958 <HAL_OSPI_MspInit+0x29c>)
 80028e4:	f002 f806 	bl	80048f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 80028e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80028ec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fc:	2303      	movs	r3, #3
 80028fe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002902:	230a      	movs	r3, #10
 8002904:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002908:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800290c:	4619      	mov	r1, r3
 800290e:	4813      	ldr	r0, [pc, #76]	@ (800295c <HAL_OSPI_MspInit+0x2a0>)
 8002910:	f001 fff0 	bl	80048f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002914:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002918:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800292e:	230a      	movs	r3, #10
 8002930:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002934:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002938:	4619      	mov	r1, r3
 800293a:	4809      	ldr	r0, [pc, #36]	@ (8002960 <HAL_OSPI_MspInit+0x2a4>)
 800293c:	f001 ffda 	bl	80048f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8002940:	e08f      	b.n	8002a62 <HAL_OSPI_MspInit+0x3a6>
 8002942:	bf00      	nop
 8002944:	420d1400 	.word	0x420d1400
 8002948:	200014bc 	.word	0x200014bc
 800294c:	46020c00 	.word	0x46020c00
 8002950:	42021c00 	.word	0x42021c00
 8002954:	42021800 	.word	0x42021800
 8002958:	42022000 	.word	0x42022000
 800295c:	42020400 	.word	0x42020400
 8002960:	42021000 	.word	0x42021000
  else if(hospi->Instance==OCTOSPI2)
 8002964:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002968:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a3e      	ldr	r2, [pc, #248]	@ (8002a6c <HAL_OSPI_MspInit+0x3b0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d175      	bne.n	8002a62 <HAL_OSPI_MspInit+0x3a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002976:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002988:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800298c:	4618      	mov	r0, r3
 800298e:	f005 fca5 	bl	80082dc <HAL_RCCEx_PeriphCLKConfig>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_OSPI_MspInit+0x2e0>
      Error_Handler();
 8002998:	f7ff f884 	bl	8001aa4 <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 800299c:	4b34      	ldr	r3, [pc, #208]	@ (8002a70 <HAL_OSPI_MspInit+0x3b4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3301      	adds	r3, #1
 80029a2:	4a33      	ldr	r2, [pc, #204]	@ (8002a70 <HAL_OSPI_MspInit+0x3b4>)
 80029a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 80029a6:	4b32      	ldr	r3, [pc, #200]	@ (8002a70 <HAL_OSPI_MspInit+0x3b4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d116      	bne.n	80029dc <HAL_OSPI_MspInit+0x320>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 80029ae:	4b31      	ldr	r3, [pc, #196]	@ (8002a74 <HAL_OSPI_MspInit+0x3b8>)
 80029b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029b4:	4a2f      	ldr	r2, [pc, #188]	@ (8002a74 <HAL_OSPI_MspInit+0x3b8>)
 80029b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029be:	4b2d      	ldr	r3, [pc, #180]	@ (8002a74 <HAL_OSPI_MspInit+0x3b8>)
 80029c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029c4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80029c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80029cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80029d6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80029da:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80029dc:	4b25      	ldr	r3, [pc, #148]	@ (8002a74 <HAL_OSPI_MspInit+0x3b8>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e2:	4a24      	ldr	r2, [pc, #144]	@ (8002a74 <HAL_OSPI_MspInit+0x3b8>)
 80029e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029ec:	4b21      	ldr	r3, [pc, #132]	@ (8002a74 <HAL_OSPI_MspInit+0x3b8>)
 80029ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80029f6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80029fa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002a04:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a08:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a74 <HAL_OSPI_MspInit+0x3b8>)
 8002a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a10:	4a18      	ldr	r2, [pc, #96]	@ (8002a74 <HAL_OSPI_MspInit+0x3b8>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a1a:	4b16      	ldr	r3, [pc, #88]	@ (8002a74 <HAL_OSPI_MspInit+0x3b8>)
 8002a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a20:	f003 0201 	and.w	r2, r3, #1
 8002a24:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002a28:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002a32:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a36:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI2;
 8002a50:	230a      	movs	r3, #10
 8002a52:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a56:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4806      	ldr	r0, [pc, #24]	@ (8002a78 <HAL_OSPI_MspInit+0x3bc>)
 8002a5e:	f001 ff49 	bl	80048f4 <HAL_GPIO_Init>
}
 8002a62:	bf00      	nop
 8002a64:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	420d2400 	.word	0x420d2400
 8002a70:	200014bc 	.word	0x200014bc
 8002a74:	46020c00 	.word	0x46020c00
 8002a78:	42020000 	.word	0x42020000

08002a7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b0bc      	sub	sp, #240	@ 0xf0
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a84:	f107 0310 	add.w	r3, r7, #16
 8002a88:	22e0      	movs	r2, #224	@ 0xe0
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f00a f936 	bl	800ccfe <memset>
  if(hrtc->Instance==RTC)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1d      	ldr	r2, [pc, #116]	@ (8002b0c <HAL_RTC_MspInit+0x90>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d132      	bne.n	8002b02 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a9c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002aa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002aac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ab0:	f107 0310 	add.w	r3, r7, #16
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f005 fc11 	bl	80082dc <HAL_RCCEx_PeriphCLKConfig>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002ac0:	f7fe fff0 	bl	8001aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ac4:	4b12      	ldr	r3, [pc, #72]	@ (8002b10 <HAL_RTC_MspInit+0x94>)
 8002ac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002aca:	4a11      	ldr	r2, [pc, #68]	@ (8002b10 <HAL_RTC_MspInit+0x94>)
 8002acc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ad0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b10 <HAL_RTC_MspInit+0x94>)
 8002ad6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ada:	4a0d      	ldr	r2, [pc, #52]	@ (8002b10 <HAL_RTC_MspInit+0x94>)
 8002adc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ae0:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <HAL_RTC_MspInit+0x94>)
 8002ae6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002aea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002af2:	4b07      	ldr	r3, [pc, #28]	@ (8002b10 <HAL_RTC_MspInit+0x94>)
 8002af4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002af8:	4a05      	ldr	r2, [pc, #20]	@ (8002b10 <HAL_RTC_MspInit+0x94>)
 8002afa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002afe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b02:	bf00      	nop
 8002b04:	37f0      	adds	r7, #240	@ 0xf0
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	46007800 	.word	0x46007800
 8002b10:	46020c00 	.word	0x46020c00

08002b14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b0c4      	sub	sp, #272	@ 0x110
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b22:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b24:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b34:	f107 0318 	add.w	r3, r7, #24
 8002b38:	22e0      	movs	r2, #224	@ 0xe0
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f00a f8de 	bl	800ccfe <memset>
  if(hspi->Instance==SPI1)
 8002b42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a41      	ldr	r2, [pc, #260]	@ (8002c54 <HAL_SPI_MspInit+0x140>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d17a      	bne.n	8002c4a <HAL_SPI_MspInit+0x136>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002b54:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8002b60:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b68:	f107 0318 	add.w	r3, r7, #24
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f005 fbb5 	bl	80082dc <HAL_RCCEx_PeriphCLKConfig>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8002b78:	f7fe ff94 	bl	8001aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b7c:	4b36      	ldr	r3, [pc, #216]	@ (8002c58 <HAL_SPI_MspInit+0x144>)
 8002b7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b82:	4a35      	ldr	r2, [pc, #212]	@ (8002c58 <HAL_SPI_MspInit+0x144>)
 8002b84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b88:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002b8c:	4b32      	ldr	r3, [pc, #200]	@ (8002c58 <HAL_SPI_MspInit+0x144>)
 8002b8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c58 <HAL_SPI_MspInit+0x144>)
 8002b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8002c58 <HAL_SPI_MspInit+0x144>)
 8002ba2:	f043 0302 	orr.w	r3, r3, #2
 8002ba6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002baa:	4b2b      	ldr	r3, [pc, #172]	@ (8002c58 <HAL_SPI_MspInit+0x144>)
 8002bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bb0:	f003 0202 	and.w	r2, r3, #2
 8002bb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002bb8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002bc2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002bc6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc8:	4b23      	ldr	r3, [pc, #140]	@ (8002c58 <HAL_SPI_MspInit+0x144>)
 8002bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bce:	4a22      	ldr	r2, [pc, #136]	@ (8002c58 <HAL_SPI_MspInit+0x144>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c58 <HAL_SPI_MspInit+0x144>)
 8002bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bde:	f003 0201 	and.w	r2, r3, #1
 8002be2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002be6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002bf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002bf4:	681b      	ldr	r3, [r3, #0]
    PB0     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c0e:	2305      	movs	r3, #5
 8002c10:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c14:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4810      	ldr	r0, [pc, #64]	@ (8002c5c <HAL_SPI_MspInit+0x148>)
 8002c1c:	f001 fe6a 	bl	80048f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 8002c20:	23e0      	movs	r3, #224	@ 0xe0
 8002c22:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c38:	2305      	movs	r3, #5
 8002c3a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002c42:	4619      	mov	r1, r3
 8002c44:	4806      	ldr	r0, [pc, #24]	@ (8002c60 <HAL_SPI_MspInit+0x14c>)
 8002c46:	f001 fe55 	bl	80048f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c4a:	bf00      	nop
 8002c4c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40013000 	.word	0x40013000
 8002c58:	46020c00 	.word	0x46020c00
 8002c5c:	42020400 	.word	0x42020400
 8002c60:	42020000 	.word	0x42020000

08002c64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08e      	sub	sp, #56	@ 0x38
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c74:	4b2e      	ldr	r3, [pc, #184]	@ (8002d30 <HAL_InitTick+0xcc>)
 8002c76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c7a:	4a2d      	ldr	r2, [pc, #180]	@ (8002d30 <HAL_InitTick+0xcc>)
 8002c7c:	f043 0310 	orr.w	r3, r3, #16
 8002c80:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002c84:	4b2a      	ldr	r3, [pc, #168]	@ (8002d30 <HAL_InitTick+0xcc>)
 8002c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c92:	f107 0210 	add.w	r2, r7, #16
 8002c96:	f107 0314 	add.w	r3, r7, #20
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f005 fa33 	bl	8008108 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ca2:	f005 f9f5 	bl	8008090 <HAL_RCC_GetPCLK1Freq>
 8002ca6:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002caa:	4a22      	ldr	r2, [pc, #136]	@ (8002d34 <HAL_InitTick+0xd0>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	0c9b      	lsrs	r3, r3, #18
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002cb6:	4b20      	ldr	r3, [pc, #128]	@ (8002d38 <HAL_InitTick+0xd4>)
 8002cb8:	4a20      	ldr	r2, [pc, #128]	@ (8002d3c <HAL_InitTick+0xd8>)
 8002cba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8002d38 <HAL_InitTick+0xd4>)
 8002cbe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cc2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d38 <HAL_InitTick+0xd4>)
 8002cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002cca:	4b1b      	ldr	r3, [pc, #108]	@ (8002d38 <HAL_InitTick+0xd4>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd0:	4b19      	ldr	r3, [pc, #100]	@ (8002d38 <HAL_InitTick+0xd4>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002cd6:	4818      	ldr	r0, [pc, #96]	@ (8002d38 <HAL_InitTick+0xd4>)
 8002cd8:	f008 ff1e 	bl	800bb18 <HAL_TIM_Base_Init>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8002ce2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d118      	bne.n	8002d1c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002cea:	4813      	ldr	r0, [pc, #76]	@ (8002d38 <HAL_InitTick+0xd4>)
 8002cec:	f008 ff76 	bl	800bbdc <HAL_TIM_Base_Start_IT>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8002cf6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10e      	bne.n	8002d1c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b0f      	cmp	r3, #15
 8002d02:	d808      	bhi.n	8002d16 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8002d04:	2200      	movs	r2, #0
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	2031      	movs	r0, #49	@ 0x31
 8002d0a:	f000 fa1f 	bl	800314c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d40 <HAL_InitTick+0xdc>)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	e002      	b.n	8002d1c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002d1c:	2031      	movs	r0, #49	@ 0x31
 8002d1e:	f000 fa2f 	bl	8003180 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8002d22:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3738      	adds	r7, #56	@ 0x38
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	46020c00 	.word	0x46020c00
 8002d34:	431bde83 	.word	0x431bde83
 8002d38:	200014c0 	.word	0x200014c0
 8002d3c:	40001000 	.word	0x40001000
 8002d40:	20000d04 	.word	0x20000d04

08002d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002d48:	f005 fa26 	bl	8008198 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <NMI_Handler+0x8>

08002d50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <HardFault_Handler+0x4>

08002d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <MemManage_Handler+0x4>

08002d60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d64:	bf00      	nop
 8002d66:	e7fd      	b.n	8002d64 <BusFault_Handler+0x4>

08002d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d6c:	bf00      	nop
 8002d6e:	e7fd      	b.n	8002d6c <UsageFault_Handler+0x4>

08002d70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002dac:	4802      	ldr	r0, [pc, #8]	@ (8002db8 <TIM6_IRQHandler+0x10>)
 8002dae:	f008 ffb5 	bl	800bd1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	200014c0 	.word	0x200014c0

08002dbc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002dc0:	4802      	ldr	r0, [pc, #8]	@ (8002dcc <DMA2D_IRQHandler+0x10>)
 8002dc2:	f000 fc65 	bl	8003690 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000e64 	.word	0x20000e64

08002dd0 <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 8002dd4:	4802      	ldr	r0, [pc, #8]	@ (8002de0 <GPU2D_IRQHandler+0x10>)
 8002dd6:	f001 ffa7 	bl	8004d28 <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000f30 	.word	0x20000f30

08002de4 <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 8002de8:	4802      	ldr	r0, [pc, #8]	@ (8002df4 <GPU2D_ER_IRQHandler+0x10>)
 8002dea:	f001 ffc3 	bl	8004d74 <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000f30 	.word	0x20000f30

08002df8 <GFXMMU_IRQHandler>:

/**
  * @brief This function handles GFXMMU global interrupt.
  */
void GFXMMU_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GFXMMU_IRQn 0 */

  /* USER CODE END GFXMMU_IRQn 0 */
  HAL_GFXMMU_IRQHandler(&hgfxmmu);
 8002dfc:	4802      	ldr	r0, [pc, #8]	@ (8002e08 <GFXMMU_IRQHandler+0x10>)
 8002dfe:	f001 fd49 	bl	8004894 <HAL_GFXMMU_IRQHandler>
  /* USER CODE BEGIN GFXMMU_IRQn 1 */

  /* USER CODE END GFXMMU_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000ee8 	.word	0x20000ee8

08002e0c <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002e10:	4802      	ldr	r0, [pc, #8]	@ (8002e1c <LTDC_IRQHandler+0x10>)
 8002e12:	f002 fa5f 	bl	80052d4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	2000129c 	.word	0x2000129c

08002e20 <DSI_IRQHandler>:

/**
  * @brief This function handles DSIHOST global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002e24:	4802      	ldr	r0, [pc, #8]	@ (8002e30 <DSI_IRQHandler+0x10>)
 8002e26:	f001 f88b 	bl	8003f40 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000ec4 	.word	0x20000ec4

08002e34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e38:	4b18      	ldr	r3, [pc, #96]	@ (8002e9c <SystemInit+0x68>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3e:	4a17      	ldr	r2, [pc, #92]	@ (8002e9c <SystemInit+0x68>)
 8002e40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002e48:	4b15      	ldr	r3, [pc, #84]	@ (8002ea0 <SystemInit+0x6c>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002e4e:	4b14      	ldr	r3, [pc, #80]	@ (8002ea0 <SystemInit+0x6c>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002e54:	4b12      	ldr	r3, [pc, #72]	@ (8002ea0 <SystemInit+0x6c>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002e5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ea0 <SystemInit+0x6c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002e60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea0 <SystemInit+0x6c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0e      	ldr	r2, [pc, #56]	@ (8002ea0 <SystemInit+0x6c>)
 8002e66:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002e6a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002e6e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002e70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea0 <SystemInit+0x6c>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002e76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea0 <SystemInit+0x6c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a09      	ldr	r2, [pc, #36]	@ (8002ea0 <SystemInit+0x6c>)
 8002e7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002e82:	4b07      	ldr	r3, [pc, #28]	@ (8002ea0 <SystemInit+0x6c>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e88:	4b04      	ldr	r3, [pc, #16]	@ (8002e9c <SystemInit+0x68>)
 8002e8a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e8e:	609a      	str	r2, [r3, #8]
  #endif
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	e000ed00 	.word	0xe000ed00
 8002ea0:	46020c00 	.word	0x46020c00

08002ea4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002ea4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002edc <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ea8:	f7ff ffc4 	bl	8002e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002eac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002eae:	e003      	b.n	8002eb8 <LoopCopyDataInit>

08002eb0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002eb2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002eb4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002eb6:	3104      	adds	r1, #4

08002eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002eb8:	480a      	ldr	r0, [pc, #40]	@ (8002ee4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002eba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002ebc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002ebe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002ec0:	d3f6      	bcc.n	8002eb0 <CopyDataInit>
	ldr	r2, =_sbss
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8002eec <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ec4:	e002      	b.n	8002ecc <LoopFillZerobss>

08002ec6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ec6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ec8:	f842 3b04 	str.w	r3, [r2], #4

08002ecc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ecc:	4b08      	ldr	r3, [pc, #32]	@ (8002ef0 <LoopForever+0x16>)
	cmp	r2, r3
 8002ece:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002ed0:	d3f9      	bcc.n	8002ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ed2:	f009 ff1d 	bl	800cd10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ed6:	f7fd fb75 	bl	80005c4 <main>

08002eda <LoopForever>:

LoopForever:
    b LoopForever
 8002eda:	e7fe      	b.n	8002eda <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002edc:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8002ee0:	0800ce80 	.word	0x0800ce80
	ldr	r0, =_sdata
 8002ee4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002ee8:	20000d09 	.word	0x20000d09
	ldr	r2, =_sbss
 8002eec:	20000d0c 	.word	0x20000d0c
	ldr	r3, = _ebss
 8002ef0:	20001534 	.word	0x20001534

08002ef4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ef4:	e7fe      	b.n	8002ef4 <ADC1_2_IRQHandler>
	...

08002ef8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002efc:	4b11      	ldr	r3, [pc, #68]	@ (8002f44 <HAL_Init+0x4c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a10      	ldr	r2, [pc, #64]	@ (8002f44 <HAL_Init+0x4c>)
 8002f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f08:	2003      	movs	r0, #3
 8002f0a:	f000 f914 	bl	8003136 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002f0e:	f004 ffa3 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 8002f12:	4602      	mov	r2, r0
 8002f14:	4b0c      	ldr	r3, [pc, #48]	@ (8002f48 <HAL_Init+0x50>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	490b      	ldr	r1, [pc, #44]	@ (8002f4c <HAL_Init+0x54>)
 8002f1e:	5ccb      	ldrb	r3, [r1, r3]
 8002f20:	fa22 f303 	lsr.w	r3, r2, r3
 8002f24:	4a0a      	ldr	r2, [pc, #40]	@ (8002f50 <HAL_Init+0x58>)
 8002f26:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f28:	200f      	movs	r0, #15
 8002f2a:	f7ff fe9b 	bl	8002c64 <HAL_InitTick>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e002      	b.n	8002f3e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f38:	f7fe fdba 	bl	8001ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40022000 	.word	0x40022000
 8002f48:	46020c00 	.word	0x46020c00
 8002f4c:	0800cd70 	.word	0x0800cd70
 8002f50:	20000d00 	.word	0x20000d00

08002f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f58:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <HAL_IncTick+0x20>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4b06      	ldr	r3, [pc, #24]	@ (8002f78 <HAL_IncTick+0x24>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4413      	add	r3, r2
 8002f64:	4a04      	ldr	r2, [pc, #16]	@ (8002f78 <HAL_IncTick+0x24>)
 8002f66:	6013      	str	r3, [r2, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20000d08 	.word	0x20000d08
 8002f78:	2000150c 	.word	0x2000150c

08002f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f80:	4b03      	ldr	r3, [pc, #12]	@ (8002f90 <HAL_GetTick+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	2000150c 	.word	0x2000150c

08002f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f9c:	f7ff ffee 	bl	8002f7c <HAL_GetTick>
 8002fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d005      	beq.n	8002fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fae:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd8 <HAL_Delay+0x44>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fba:	bf00      	nop
 8002fbc:	f7ff ffde 	bl	8002f7c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d8f7      	bhi.n	8002fbc <HAL_Delay+0x28>
  {
  }
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000d08 	.word	0x20000d08

08002fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fec:	4b0c      	ldr	r3, [pc, #48]	@ (8003020 <__NVIC_SetPriorityGrouping+0x44>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003004:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800300c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300e:	4a04      	ldr	r2, [pc, #16]	@ (8003020 <__NVIC_SetPriorityGrouping+0x44>)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	60d3      	str	r3, [r2, #12]
}
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003028:	4b04      	ldr	r3, [pc, #16]	@ (800303c <__NVIC_GetPriorityGrouping+0x18>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	0a1b      	lsrs	r3, r3, #8
 800302e:	f003 0307 	and.w	r3, r3, #7
}
 8003032:	4618      	mov	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800304a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800304e:	2b00      	cmp	r3, #0
 8003050:	db0b      	blt.n	800306a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	f003 021f 	and.w	r2, r3, #31
 8003058:	4907      	ldr	r1, [pc, #28]	@ (8003078 <__NVIC_EnableIRQ+0x38>)
 800305a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	2001      	movs	r0, #1
 8003062:	fa00 f202 	lsl.w	r2, r0, r2
 8003066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	e000e100 	.word	0xe000e100

0800307c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	6039      	str	r1, [r7, #0]
 8003086:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003088:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800308c:	2b00      	cmp	r3, #0
 800308e:	db0a      	blt.n	80030a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	b2da      	uxtb	r2, r3
 8003094:	490c      	ldr	r1, [pc, #48]	@ (80030c8 <__NVIC_SetPriority+0x4c>)
 8003096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800309a:	0112      	lsls	r2, r2, #4
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	440b      	add	r3, r1
 80030a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a4:	e00a      	b.n	80030bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	4908      	ldr	r1, [pc, #32]	@ (80030cc <__NVIC_SetPriority+0x50>)
 80030ac:	88fb      	ldrh	r3, [r7, #6]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	3b04      	subs	r3, #4
 80030b4:	0112      	lsls	r2, r2, #4
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	440b      	add	r3, r1
 80030ba:	761a      	strb	r2, [r3, #24]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	e000e100 	.word	0xe000e100
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b089      	sub	sp, #36	@ 0x24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f1c3 0307 	rsb	r3, r3, #7
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	bf28      	it	cs
 80030ee:	2304      	movcs	r3, #4
 80030f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3304      	adds	r3, #4
 80030f6:	2b06      	cmp	r3, #6
 80030f8:	d902      	bls.n	8003100 <NVIC_EncodePriority+0x30>
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3b03      	subs	r3, #3
 80030fe:	e000      	b.n	8003102 <NVIC_EncodePriority+0x32>
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003104:	f04f 32ff 	mov.w	r2, #4294967295
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43da      	mvns	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	401a      	ands	r2, r3
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003118:	f04f 31ff 	mov.w	r1, #4294967295
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	fa01 f303 	lsl.w	r3, r1, r3
 8003122:	43d9      	mvns	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003128:	4313      	orrs	r3, r2
         );
}
 800312a:	4618      	mov	r0, r3
 800312c:	3724      	adds	r7, #36	@ 0x24
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff ff4c 	bl	8002fdc <__NVIC_SetPriorityGrouping>
}
 8003144:	bf00      	nop
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800315a:	f7ff ff63 	bl	8003024 <__NVIC_GetPriorityGrouping>
 800315e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	6978      	ldr	r0, [r7, #20]
 8003166:	f7ff ffb3 	bl	80030d0 <NVIC_EncodePriority>
 800316a:	4602      	mov	r2, r0
 800316c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff ff82 	bl	800307c <__NVIC_SetPriority>
}
 8003178:	bf00      	nop
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800318a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff ff56 	bl	8003040 <__NVIC_EnableIRQ>
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e054      	b.n	8003258 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	7f5b      	ldrb	r3, [r3, #29]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d105      	bne.n	80031c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fe fd0a 	bl	8001bd8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	791b      	ldrb	r3, [r3, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10c      	bne.n	80031ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a22      	ldr	r2, [pc, #136]	@ (8003260 <HAL_CRC_Init+0xc4>)
 80031d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0218 	bic.w	r2, r2, #24
 80031e8:	609a      	str	r2, [r3, #8]
 80031ea:	e00c      	b.n	8003206 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6899      	ldr	r1, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	461a      	mov	r2, r3
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f834 	bl	8003264 <HAL_CRCEx_Polynomial_Set>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e028      	b.n	8003258 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	795b      	ldrb	r3, [r3, #5]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d105      	bne.n	800321a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f04f 32ff 	mov.w	r2, #4294967295
 8003216:	611a      	str	r2, [r3, #16]
 8003218:	e004      	b.n	8003224 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6912      	ldr	r2, [r2, #16]
 8003222:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699a      	ldr	r2, [r3, #24]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	04c11db7 	.word	0x04c11db7

08003264 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003274:	231f      	movs	r3, #31
 8003276:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d102      	bne.n	8003288 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	75fb      	strb	r3, [r7, #23]
 8003286:	e063      	b.n	8003350 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003288:	bf00      	nop
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1e5a      	subs	r2, r3, #1
 800328e:	613a      	str	r2, [r7, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <HAL_CRCEx_Polynomial_Set+0x44>
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b18      	cmp	r3, #24
 80032ac:	d846      	bhi.n	800333c <HAL_CRCEx_Polynomial_Set+0xd8>
 80032ae:	a201      	add	r2, pc, #4	@ (adr r2, 80032b4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80032b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b4:	08003343 	.word	0x08003343
 80032b8:	0800333d 	.word	0x0800333d
 80032bc:	0800333d 	.word	0x0800333d
 80032c0:	0800333d 	.word	0x0800333d
 80032c4:	0800333d 	.word	0x0800333d
 80032c8:	0800333d 	.word	0x0800333d
 80032cc:	0800333d 	.word	0x0800333d
 80032d0:	0800333d 	.word	0x0800333d
 80032d4:	08003331 	.word	0x08003331
 80032d8:	0800333d 	.word	0x0800333d
 80032dc:	0800333d 	.word	0x0800333d
 80032e0:	0800333d 	.word	0x0800333d
 80032e4:	0800333d 	.word	0x0800333d
 80032e8:	0800333d 	.word	0x0800333d
 80032ec:	0800333d 	.word	0x0800333d
 80032f0:	0800333d 	.word	0x0800333d
 80032f4:	08003325 	.word	0x08003325
 80032f8:	0800333d 	.word	0x0800333d
 80032fc:	0800333d 	.word	0x0800333d
 8003300:	0800333d 	.word	0x0800333d
 8003304:	0800333d 	.word	0x0800333d
 8003308:	0800333d 	.word	0x0800333d
 800330c:	0800333d 	.word	0x0800333d
 8003310:	0800333d 	.word	0x0800333d
 8003314:	08003319 	.word	0x08003319
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	2b06      	cmp	r3, #6
 800331c:	d913      	bls.n	8003346 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003322:	e010      	b.n	8003346 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b07      	cmp	r3, #7
 8003328:	d90f      	bls.n	800334a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800332e:	e00c      	b.n	800334a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	2b0f      	cmp	r3, #15
 8003334:	d90b      	bls.n	800334e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800333a:	e008      	b.n	800334e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	75fb      	strb	r3, [r7, #23]
        break;
 8003340:	e006      	b.n	8003350 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003342:	bf00      	nop
 8003344:	e004      	b.n	8003350 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003346:	bf00      	nop
 8003348:	e002      	b.n	8003350 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800334a:	bf00      	nop
 800334c:	e000      	b.n	8003350 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800334e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003350:	7dfb      	ldrb	r3, [r7, #23]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10d      	bne.n	8003372 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f023 0118 	bic.w	r1, r3, #24
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	430a      	orrs	r2, r1
 8003370:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003372:	7dfb      	ldrb	r3, [r7, #23]
}
 8003374:	4618      	mov	r0, r3
 8003376:	371c      	adds	r7, #28
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e037      	b.n	8003402 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d119      	bne.n	80033d2 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a1a      	ldr	r2, [pc, #104]	@ (800340c <HAL_DCACHE_Init+0x8c>)
 80033a2:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003410 <HAL_DCACHE_Init+0x90>)
 80033a8:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a19      	ldr	r2, [pc, #100]	@ (8003414 <HAL_DCACHE_Init+0x94>)
 80033ae:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a19      	ldr	r2, [pc, #100]	@ (8003418 <HAL_DCACHE_Init+0x98>)
 80033b4:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a18      	ldr	r2, [pc, #96]	@ (800341c <HAL_DCACHE_Init+0x9c>)
 80033ba:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d102      	bne.n	80033ca <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a16      	ldr	r2, [pc, #88]	@ (8003420 <HAL_DCACHE_Init+0xa0>)
 80033c8:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f814 	bl	8003424 <HAL_DCACHE_Enable>
 80033fc:	4603      	mov	r3, r0
 80033fe:	73fb      	strb	r3, [r7, #15]

  return status;
 8003400:	7bfb      	ldrb	r3, [r7, #15]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	080034c3 	.word	0x080034c3
 8003410:	08003473 	.word	0x08003473
 8003414:	08003487 	.word	0x08003487
 8003418:	080034af 	.word	0x080034af
 800341c:	0800349b 	.word	0x0800349b
 8003420:	08001c1d 	.word	0x08001c1d

08003424 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e015      	b.n	8003466 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0309 	and.w	r3, r3, #9
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8003448:	2302      	movs	r3, #2
 800344a:	73fb      	strb	r3, [r7, #15]
 800344c:	e00a      	b.n	8003464 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]
  }

  return status;
 8003464:	7bfb      	ldrb	r3, [r7, #15]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80034de:	f7ff fd4d 	bl	8002f7c <HAL_GetTick>
 80034e2:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e06b      	b.n	80035c6 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d008      	beq.n	800350c <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e05c      	b.n	80035c6 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0204 	orr.w	r2, r2, #4
 800351a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2205      	movs	r2, #5
 8003520:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003524:	e020      	b.n	8003568 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003526:	f7ff fd29 	bl	8002f7c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b05      	cmp	r3, #5
 8003532:	d919      	bls.n	8003568 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003538:	f043 0210 	orr.w	r2, r3, #16
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2203      	movs	r2, #3
 8003544:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800354c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003558:	2201      	movs	r2, #1
 800355a:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e02e      	b.n	80035c6 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0d7      	beq.n	8003526 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0202 	orr.w	r2, r2, #2
 8003584:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2204      	movs	r2, #4
 800358a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003596:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b0:	2201      	movs	r2, #1
 80035b2:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2200      	movs	r2, #0
 80035ba:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e053      	b.n	8003688 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d106      	bne.n	80035fa <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7fe fb4b 	bl	8001c90 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2202      	movs	r2, #2
 80035fe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800360c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6851      	ldr	r1, [r2, #4]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	69d2      	ldr	r2, [r2, #28]
 8003618:	4311      	orrs	r1, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	430b      	orrs	r3, r1
 8003620:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003628:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6891      	ldr	r1, [r2, #8]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6992      	ldr	r2, [r2, #24]
 8003638:	4311      	orrs	r1, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	430b      	orrs	r3, r1
 8003640:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	041b      	lsls	r3, r3, #16
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68d1      	ldr	r1, [r2, #12]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	430b      	orrs	r3, r1
 8003656:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800365e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	051a      	lsls	r2, r3, #20
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	055b      	lsls	r3, r3, #21
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d026      	beq.n	8003700 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d021      	beq.n	8003700 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036ca:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d0:	f043 0201 	orr.w	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2201      	movs	r2, #1
 80036de:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2204      	movs	r2, #4
 80036e4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d026      	beq.n	8003758 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d021      	beq.n	8003758 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003722:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2220      	movs	r2, #32
 800372a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003730:	f043 0202 	orr.w	r2, r3, #2
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2204      	movs	r2, #4
 800373c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d026      	beq.n	80037b0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003768:	2b00      	cmp	r3, #0
 800376a:	d021      	beq.n	80037b0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800377a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2208      	movs	r2, #8
 8003782:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003788:	f043 0204 	orr.w	r2, r3, #4
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2204      	movs	r2, #4
 8003794:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d013      	beq.n	80037e2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00e      	beq.n	80037e2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037d2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2204      	movs	r2, #4
 80037da:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f853 	bl	8003888 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d024      	beq.n	8003836 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01f      	beq.n	8003836 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003804:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2202      	movs	r2, #2
 800380c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferCpltCallback != NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01f      	beq.n	8003880 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d01a      	beq.n	8003880 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003858:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2210      	movs	r2, #16
 8003860:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f80e 	bl	800389c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_DMA2D_ConfigLayer+0x20>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e084      	b.n	80039da <HAL_DMA2D_ConfigLayer+0x12a>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	4613      	mov	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	4413      	add	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	3328      	adds	r3, #40	@ 0x28
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	4413      	add	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	041b      	lsls	r3, r3, #16
 80038fc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003904:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003910:	4b35      	ldr	r3, [pc, #212]	@ (80039e8 <HAL_DMA2D_ConfigLayer+0x138>)
 8003912:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b0a      	cmp	r3, #10
 800391a:	d003      	beq.n	8003924 <HAL_DMA2D_ConfigLayer+0x74>
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b09      	cmp	r3, #9
 8003922:	d107      	bne.n	8003934 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	e005      	b.n	8003940 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	061b      	lsls	r3, r3, #24
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d120      	bne.n	8003988 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	43db      	mvns	r3, r3
 8003950:	ea02 0103 	and.w	r1, r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	430a      	orrs	r2, r1
 800395c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	6812      	ldr	r2, [r2, #0]
 8003966:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b0a      	cmp	r3, #10
 800396e:	d003      	beq.n	8003978 <HAL_DMA2D_ConfigLayer+0xc8>
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b09      	cmp	r3, #9
 8003976:	d127      	bne.n	80039c8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003984:	629a      	str	r2, [r3, #40]	@ 0x28
 8003986:	e01f      	b.n	80039c8 <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	69da      	ldr	r2, [r3, #28]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	43db      	mvns	r3, r3
 8003992:	ea02 0103 	and.w	r1, r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	430a      	orrs	r2, r1
 800399e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b0a      	cmp	r3, #10
 80039b0:	d003      	beq.n	80039ba <HAL_DMA2D_ConfigLayer+0x10a>
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b09      	cmp	r3, #9
 80039b8:	d106      	bne.n	80039c8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80039c6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	ff33000f 	.word	0xff33000f

080039ec <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8003a04:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	@ 0xc04
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	00da      	lsls	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	220e      	movs	r2, #14
 8003a26:	f8c3 2c34 	str.w	r2, [r3, #3124]	@ 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	@ 0xc70
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 021f 	bic.w	r2, r2, #31
 8003a3a:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6912      	ldr	r2, [r2, #16]
 8003a46:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	220e      	movs	r2, #14
 8003a50:	f8c3 2ca0 	str.w	r2, [r3, #3232]	@ 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	@ 0xd08
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 021f 	bic.w	r2, r2, #31
 8003a64:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6912      	ldr	r2, [r2, #16]
 8003a70:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	220e      	movs	r2, #14
 8003a7a:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	@ 0xc5c
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003a8e:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	@ 0xcf4
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003aa2:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d007      	beq.n	8003abe <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d003      	beq.n	8003abe <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8003aba:	2b05      	cmp	r3, #5
 8003abc:	d10a      	bne.n	8003ad4 <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 8003ad2:	e02c      	b.n	8003b2e <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00b      	beq.n	8003af4 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d007      	beq.n	8003af4 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d003      	beq.n	8003af4 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8003af0:	2b06      	cmp	r3, #6
 8003af2:	d10a      	bne.n	8003b0a <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2210      	movs	r2, #16
 8003afa:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2210      	movs	r2, #16
 8003b04:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 8003b08:	e011      	b.n	8003b2e <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b07      	cmp	r3, #7
 8003b10:	d003      	beq.n	8003b1a <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d109      	bne.n	8003b2e <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	@ 0xc60
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 020f 	bic.w	r2, r2, #15
 8003b3e:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	@ 0xcf8
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 020f 	bic.w	r2, r2, #15
 8003b52:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6952      	ldr	r2, [r2, #20]
 8003b5e:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6952      	ldr	r2, [r2, #20]
 8003b6a:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8003b94:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	075a      	lsls	r2, r3, #29
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f8d3 2434 	ldr.w	r2, [r3, #1076]	@ 0x434
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003bc0:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	031a      	lsls	r2, r3, #12
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	021a      	lsls	r2, r3, #8
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e0c3      	b.n	8003d9c <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	7e5b      	ldrb	r3, [r3, #25]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d102      	bne.n	8003c24 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fe f85e 	bl	8001ce0 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2203      	movs	r2, #3
 8003c28:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c3a:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 8003c3e:	2002      	movs	r0, #2
 8003c40:	f7ff f9a8 	bl	8002f94 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b54      	ldr	r3, [pc, #336]	@ (8003da4 <HAL_DSI_Init+0x1a4>)
 8003c52:	400b      	ands	r3, r1
 8003c54:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003c6c:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003c74:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff feb3 	bl	80039ec <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 8003c86:	6839      	ldr	r1, [r7, #0]
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ff76 	bl	8003b7a <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8003cb6:	2001      	movs	r0, #1
 8003cb8:	f7ff f96c 	bl	8002f94 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cbc:	f7ff f95e 	bl	8002f7c <HAL_GetTick>
 8003cc0:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003cc4:	f7ff f95a 	bl	8002f7c <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	@ 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e062      	b.n	8003d9c <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8003cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0ee      	beq.n	8003cc4 <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0206 	orr.w	r2, r2, #6
 8003cf6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0203 	bic.w	r2, r2, #3
 8003d0a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0201 	orr.w	r2, r2, #1
 8003d24:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0203 	bic.w	r2, r2, #3
 8003d38:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d60:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6899      	ldr	r1, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	e0000003 	.word	0xe0000003

08003da8 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	7e1b      	ldrb	r3, [r3, #24]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <HAL_DSI_ConfigErrorMonitor+0x16>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e0ba      	b.n	8003f34 <HAL_DSI_ConfigErrorMonitor+0x18c>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00b      	beq.n	8003e00 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003df8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003dfc:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 8003e1a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d009      	beq.n	8003e3c <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0201 	orr.w	r2, r2, #1
 8003e38:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0202 	orr.w	r2, r2, #2
 8003e56:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d009      	beq.n	8003e78 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 020c 	orr.w	r2, r2, #12
 8003e74:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0210 	orr.w	r2, r2, #16
 8003e92:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d009      	beq.n	8003eb4 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0220 	orr.w	r2, r2, #32
 8003eb0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d009      	beq.n	8003ed2 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ece:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d009      	beq.n	8003ef0 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003eec:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d009      	beq.n	8003f0e <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8003f0a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d009      	beq.n	8003f2c <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003f28:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00f      	beq.n	8003f78 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d007      	beq.n	8003f78 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f8b8 	bl	80040e8 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00f      	beq.n	8003fa8 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d007      	beq.n	8003fa8 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f8aa 	bl	80040fc <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 8097 	beq.w	80040e0 <HAL_DSI_IRQHandler+0x1a0>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003fba:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003fd2:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f043 0201 	orr.w	r2, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	f043 0202 	orr.w	r2, r3, #2
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f043 0204 	orr.w	r2, r3, #4
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	f043 0208 	orr.w	r2, r3, #8
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f043 0210 	orr.w	r2, r3, #16
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f043 0220 	orr.w	r2, r3, #32
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PBU_MASK) != 0U)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_DSI_IRQHandler+0x192>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PBU;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	61da      	str	r2, [r3, #28]
    }
    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <HAL_DSI_IRQHandler+0x1a0>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f818 	bl	8004110 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	7e1b      	ldrb	r3, [r3, #24]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_DSI_SetGenericVCID+0x16>
 8004136:	2302      	movs	r3, #2
 8004138:	e019      	b.n	800416e <HAL_DSI_SetGenericVCID+0x4a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 1203 	bic.w	r2, r2, #196611	@ 0x30003
 800414e:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6b19      	ldr	r1, [r3, #48]	@ 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	7e1b      	ldrb	r3, [r3, #24]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800418c:	2302      	movs	r3, #2
 800418e:	e0c5      	b.n	800431c <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0201 	orr.w	r2, r2, #1
 80041a4:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0201 	bic.w	r2, r2, #1
 80041b6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0203 	bic.w	r2, r2, #3
 80041dc:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68d9      	ldr	r1, [r3, #12]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695a      	ldr	r2, [r3, #20]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0207 	bic.w	r2, r2, #7
 80041fe:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6959      	ldr	r1, [r3, #20]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	69da      	ldr	r2, [r3, #28]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	431a      	orrs	r2, r3
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 020f 	bic.w	r2, r2, #15
 800422c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6919      	ldr	r1, [r3, #16]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 020e 	bic.w	r2, r2, #14
 8004250:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	005a      	lsls	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	0c1b      	lsrs	r3, r3, #16
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800429e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0201 	bic.w	r2, r2, #1
 80042d8:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0201 	orr.w	r2, r2, #1
 80042fc:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0202 	orr.w	r2, r2, #2
 8004310:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	7e1b      	ldrb	r3, [r3, #24]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_DSI_ConfigCommand+0x16>
 800433a:	2302      	movs	r3, #2
 800433c:	e049      	b.n	80043d2 <HAL_DSI_ConfigCommand+0xaa>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b24      	ldr	r3, [pc, #144]	@ (80043e0 <HAL_DSI_ConfigCommand+0xb8>)
 8004350:	400b      	ands	r3, r1
 8004352:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004362:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004368:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800436e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004374:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800437a:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004380:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004386:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 800438c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004392:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004398:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800439e:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0202 	bic.w	r2, r2, #2
 80043b6:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	fef080ff 	.word	0xfef080ff

080043e4 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	7e1b      	ldrb	r3, [r3, #24]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_DSI_ConfigFlowControl+0x16>
 80043f6:	2302      	movs	r3, #2
 80043f8:	e016      	b.n	8004428 <HAL_DSI_ConfigFlowControl+0x44>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800440e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	7e1b      	ldrb	r3, [r3, #24]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_DSI_ConfigPhyTimer+0x16>
 8004446:	2302      	movs	r3, #2
 8004448:	e084      	b.n	8004554 <HAL_DSI_ConfigPhyTimer+0x120>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	441a      	add	r2, r3
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6859      	ldr	r1, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695a      	ldr	r2, [r3, #20]
 8004466:	4613      	mov	r3, r2
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	4413      	add	r3, r2
 800446c:	18ca      	adds	r2, r1, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	441a      	add	r2, r3
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	4293      	cmp	r3, r2
 800448c:	bf38      	it	cc
 800448e:	4613      	movcc	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80044a2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	041a      	lsls	r2, r3, #16
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80044d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	041b      	lsls	r3, r3, #16
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004502:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004506:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004530:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	021a      	lsls	r2, r3, #8
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	7e1b      	ldrb	r3, [r3, #24]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_DSI_ConfigHostTimeouts+0x16>
 8004572:	2302      	movs	r3, #2
 8004574:	e0b4      	b.n	80046e0 <HAL_DSI_ConfigHostTimeouts+0x180>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800458a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6899      	ldr	r1, [r3, #8]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	021a      	lsls	r2, r3, #8
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	b292      	uxth	r2, r2
 80045ac:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	041a      	lsls	r2, r3, #16
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	0c1b      	lsrs	r3, r3, #16
 80045ce:	041b      	lsls	r3, r3, #16
 80045d0:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	0c1b      	lsrs	r3, r3, #16
 80045f0:	041b      	lsls	r3, r3, #16
 80045f2:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	0c1b      	lsrs	r3, r3, #16
 8004614:	041b      	lsls	r3, r3, #16
 8004616:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	041b      	lsls	r3, r3, #16
 8004640:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	695a      	ldr	r2, [r3, #20]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800466a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6812      	ldr	r2, [r2, #0]
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	041b      	lsls	r3, r3, #16
 8004694:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	69da      	ldr	r2, [r3, #28]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	0c1b      	lsrs	r3, r3, #16
 80046bc:	041b      	lsls	r3, r3, #16
 80046be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6a1a      	ldr	r2, [r3, #32]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_GFXMMU_Init>:
  *         GFXMMU_InitTypeDef structure and initialize the associated handle.
  * @param  hgfxmmu GFXMMU handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GFXMMU_Init(GFXMMU_HandleTypeDef *hgfxmmu)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	73fb      	strb	r3, [r7, #15]

  /* Check GFXMMU handle */
  if (hgfxmmu == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d102      	bne.n	8004704 <HAL_GFXMMU_Init+0x18>
  {
    status = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	73fb      	strb	r3, [r7, #15]
 8004702:	e06e      	b.n	80047e2 <HAL_GFXMMU_Init+0xf6>
      hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
    }
    hgfxmmu->MspInitCallback(hgfxmmu);
#else
    /* Call GFXMMU MSP init function */
    HAL_GFXMMU_MspInit(hgfxmmu);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7fd fb6f 	bl	8001de8 <HAL_GFXMMU_MspInit>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */

    /* Configure GFXMMU_CR register */
    hgfxmmu->Instance->CR = 0U;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
    hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlocksPerLine);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6819      	ldr	r1, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	601a      	str	r2, [r3, #0]
#if defined(GFXMMU_CR_CE)
    if (hgfxmmu->Init.CachePrefetch.Activation == ENABLE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	7f1b      	ldrb	r3, [r3, #28]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d12c      	bne.n	8004786 <HAL_GFXMMU_Init+0x9a>
    {
      assert_param(IS_GFXMMU_CACHE_LOCK(hgfxmmu->Init.CachePrefetch.CacheLock));
      assert_param(IS_GFXMMU_PREFETCH(hgfxmmu->Init.CachePrefetch.Prefetch));
      assert_param(IS_GFXMMU_OUTTER_BUFFERABILITY(hgfxmmu->Init.CachePrefetch.OutterBufferability));
      assert_param(IS_GFXMMU_OUTTER_CACHABILITY(hgfxmmu->Init.CachePrefetch.OutterCachability));
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a19      	ldr	r1, [r3, #32]
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 800473a:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 8004740:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterCachability);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 8004746:	430b      	orrs	r3, r1
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004752:	601a      	str	r2, [r3, #0]
      if (hgfxmmu->Init.CachePrefetch.CacheLock == GFXMMU_CACHE_LOCK_ENABLE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800475c:	d10b      	bne.n	8004776 <HAL_GFXMMU_Init+0x8a>
      {
        assert_param(IS_GFXMMU_CACHE_LOCK_BUFFER(hgfxmmu->Init.CachePrefetch.CacheLockBuffer));
        assert_param(IS_GFXMMU_CACHE_FORCE(hgfxmmu->Init.CachePrefetch.CacheForce));
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6819      	ldr	r1, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                  hgfxmmu->Init.CachePrefetch.CacheForce);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	601a      	str	r2, [r3, #0]
      }

      /* Force invalidate cache if cache is enabled */
      hgfxmmu->Instance->CCR |= GFXMMU_CACHE_FORCE_INVALIDATE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0202 	orr.w	r2, r2, #2
 8004784:	60da      	str	r2, [r3, #12]
      assert_param(IS_GFXMMU_ADDRESSCACHE_LOCK_BUFFER(hgfxmmu->Init.AddressCache.AddressCacheLockBuffer));
      hgfxmmu->Instance->CR |= GFXMMU_CR_ACE |
                               hgfxmmu->Init.AddressCache.AddressCacheLockBuffer;
    }
#endif /* GFXMMU_CR_ACE */
    if (hgfxmmu->Init.Interrupts.Activation == ENABLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800478c:	2b01      	cmp	r3, #1
 800478e:	d108      	bne.n	80047a2 <HAL_GFXMMU_Init+0xb6>
    {
      assert_param(IS_GFXMMU_INTERRUPTS(hgfxmmu->Init.Interrupts.UsedInterrupts));
      hgfxmmu->Instance->CR |= hgfxmmu->Init.Interrupts.UsedInterrupts;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6819      	ldr	r1, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	601a      	str	r2, [r3, #0]
    }

    /* Configure default value on GFXMMU_DVR register */
    hgfxmmu->Instance->DVR = hgfxmmu->Init.DefaultValue;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6892      	ldr	r2, [r2, #8]
 80047aa:	611a      	str	r2, [r3, #16]

    /* Configure physical buffer addresses on GFXMMU_BxCR registers */
    hgfxmmu->Instance->B0CR = hgfxmmu->Init.Buffers.Buf0Address;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	68d2      	ldr	r2, [r2, #12]
 80047b4:	621a      	str	r2, [r3, #32]
    hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6912      	ldr	r2, [r2, #16]
 80047be:	625a      	str	r2, [r3, #36]	@ 0x24
    hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6952      	ldr	r2, [r2, #20]
 80047c8:	629a      	str	r2, [r3, #40]	@ 0x28
    hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6992      	ldr	r2, [r2, #24]
 80047d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Reset GFXMMU error code */
    hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set GFXMMU to ready state */
    hgfxmmu->State = HAL_GFXMMU_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }
  /* Return function status */
  return status;
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_GFXMMU_ConfigLut>:
  */
HAL_StatusTypeDef HAL_GFXMMU_ConfigLut(GFXMMU_HandleTypeDef *hgfxmmu,
                                       uint32_t FirstLine,
                                       uint32_t LinesNumber,
                                       uint32_t Address)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b08b      	sub	sp, #44	@ 0x2c
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
  assert_param(IS_GFXMMU_LUT_LINE(FirstLine));
  assert_param(IS_GFXMMU_LUT_LINES_NUMBER(LinesNumber));

  /* Check GFXMMU state and coherent parameters */
  if ((hgfxmmu->State != HAL_GFXMMU_STATE_READY) || ((FirstLine + LinesNumber) > 1024U))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004806:	2b01      	cmp	r3, #1
 8004808:	d105      	bne.n	8004816 <HAL_GFXMMU_ConfigLut+0x2a>
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4413      	add	r3, r2
 8004810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004814:	d903      	bls.n	800481e <HAL_GFXMMU_ConfigLut+0x32>
  {
    status = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800481c:	e032      	b.n	8004884 <HAL_GFXMMU_ConfigLut+0x98>
    uint32_t current_line;
    uint32_t lutxl_address;
    uint32_t lutxh_address;

    /* Initialize local variables */
    current_address = Address;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	623b      	str	r3, [r7, #32]
    current_line    = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	61fb      	str	r3, [r7, #28]
    lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
    lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * FirstLine) + 1U]);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	3301      	adds	r3, #1
 8004842:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	617b      	str	r3, [r7, #20]

    /* Copy LUT from flash to look up RAM */
    while (current_line < LinesNumber)
 800484c:	e016      	b.n	800487c <HAL_GFXMMU_ConfigLut+0x90>
    {
      *((uint32_t *)lutxl_address) = *((uint32_t *)current_address);
 800484e:	6a3a      	ldr	r2, [r7, #32]
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	3304      	adds	r3, #4
 800485a:	623b      	str	r3, [r7, #32]
      *((uint32_t *)lutxh_address) = *((uint32_t *)current_address);
 800485c:	6a3a      	ldr	r2, [r7, #32]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	3304      	adds	r3, #4
 8004868:	623b      	str	r3, [r7, #32]
      lutxl_address += 8U;
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	3308      	adds	r3, #8
 800486e:	61bb      	str	r3, [r7, #24]
      lutxh_address += 8U;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	3308      	adds	r3, #8
 8004874:	617b      	str	r3, [r7, #20]
      current_line++;
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3301      	adds	r3, #1
 800487a:	61fb      	str	r3, [r7, #28]
    while (current_line < LinesNumber)
 800487c:	69fa      	ldr	r2, [r7, #28]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d3e4      	bcc.n	800484e <HAL_GFXMMU_ConfigLut+0x62>
    }
  }
  /* Return function status */
  return status;
 8004884:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004888:	4618      	mov	r0, r3
 800488a:	372c      	adds	r7, #44	@ 0x2c
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_GFXMMU_IRQHandler>:
  * @brief  This function handles the GFXMMU interrupts.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
void HAL_GFXMMU_IRQHandler(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t flags, interrupts, error;

  /* Read current flags and interrupts and determine which error occurs */
  flags = hgfxmmu->Instance->SR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	617b      	str	r3, [r7, #20]
  interrupts = (hgfxmmu->Instance->CR & GFXMMU_CR_ITS_MASK);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 031f 	and.w	r3, r3, #31
 80048ae:	613b      	str	r3, [r7, #16]
  error = (flags & interrupts);
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4013      	ands	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]

  if (error != 0U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00c      	beq.n	80048d8 <HAL_GFXMMU_IRQHandler+0x44>
  {
    /* Clear flags on GFXMMU_FCR register */
    hgfxmmu->Instance->FCR = error;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	609a      	str	r2, [r3, #8]

    /* Update GFXMMU error code */
    hgfxmmu->ErrorCode |= error;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Call GFXMMU error callback */
#if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
    hgfxmmu->ErrorCallback(hgfxmmu);
#else
    HAL_GFXMMU_ErrorCallback(hgfxmmu);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f804 	bl	80048e0 <HAL_GFXMMU_ErrorCallback>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
  }
}
 80048d8:	bf00      	nop
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_GFXMMU_ErrorCallback>:
  * @brief  Error callback.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
__weak void HAL_GFXMMU_ErrorCallback(GFXMMU_HandleTypeDef *hgfxmmu)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(hgfxmmu);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_GFXMMU_ErrorCallback could be implemented in the user file.
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b089      	sub	sp, #36	@ 0x24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004906:	e1ba      	b.n	8004c7e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	2101      	movs	r1, #1
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	fa01 f303 	lsl.w	r3, r1, r3
 8004914:	4013      	ands	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 81aa 	beq.w	8004c78 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a55      	ldr	r2, [pc, #340]	@ (8004a7c <HAL_GPIO_Init+0x188>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d15d      	bne.n	80049e8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004932:	2201      	movs	r2, #1
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43db      	mvns	r3, r3
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	4013      	ands	r3, r2
 8004940:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f003 0201 	and.w	r2, r3, #1
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	4313      	orrs	r3, r2
 8004954:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800495c:	4a48      	ldr	r2, [pc, #288]	@ (8004a80 <HAL_GPIO_Init+0x18c>)
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004964:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004966:	4a46      	ldr	r2, [pc, #280]	@ (8004a80 <HAL_GPIO_Init+0x18c>)
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4413      	add	r3, r2
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	08da      	lsrs	r2, r3, #3
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	3208      	adds	r2, #8
 800497a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800497e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	220f      	movs	r2, #15
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	43db      	mvns	r3, r3
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	4013      	ands	r3, r2
 8004994:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	220b      	movs	r2, #11
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	08da      	lsrs	r2, r3, #3
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	3208      	adds	r2, #8
 80049b2:	69f9      	ldr	r1, [r7, #28]
 80049b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	2203      	movs	r2, #3
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	4013      	ands	r3, r2
 80049ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	2202      	movs	r2, #2
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	69fa      	ldr	r2, [r7, #28]
 80049dc:	4313      	orrs	r3, r2
 80049de:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	e067      	b.n	8004ab8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d003      	beq.n	80049f8 <HAL_GPIO_Init+0x104>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b12      	cmp	r3, #18
 80049f6:	d145      	bne.n	8004a84 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	08da      	lsrs	r2, r3, #3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3208      	adds	r2, #8
 8004a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a04:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	220f      	movs	r2, #15
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f003 020f 	and.w	r2, r3, #15
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	08da      	lsrs	r2, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3208      	adds	r2, #8
 8004a3e:	69f9      	ldr	r1, [r7, #28]
 8004a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	2203      	movs	r2, #3
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69fa      	ldr	r2, [r7, #28]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 0203 	and.w	r2, r3, #3
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	e01e      	b.n	8004ab8 <HAL_GPIO_Init+0x1c4>
 8004a7a:	bf00      	nop
 8004a7c:	46020000 	.word	0x46020000
 8004a80:	0800cdc8 	.word	0x0800cdc8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	2203      	movs	r2, #3
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	43db      	mvns	r3, r3
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 0203 	and.w	r2, r3, #3
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	69fa      	ldr	r2, [r7, #28]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d00b      	beq.n	8004ad8 <HAL_GPIO_Init+0x1e4>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d007      	beq.n	8004ad8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004acc:	2b11      	cmp	r3, #17
 8004ace:	d003      	beq.n	8004ad8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b12      	cmp	r3, #18
 8004ad6:	d130      	bne.n	8004b3a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	2203      	movs	r2, #3
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	4013      	ands	r3, r2
 8004aee:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004b0e:	2201      	movs	r2, #1
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	43db      	mvns	r3, r3
 8004b18:	69fa      	ldr	r2, [r7, #28]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	091b      	lsrs	r3, r3, #4
 8004b24:	f003 0201 	and.w	r2, r3, #1
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	69fa      	ldr	r2, [r7, #28]
 8004b38:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d017      	beq.n	8004b72 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	2203      	movs	r2, #3
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	43db      	mvns	r3, r3
 8004b54:	69fa      	ldr	r2, [r7, #28]
 8004b56:	4013      	ands	r3, r2
 8004b58:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d07c      	beq.n	8004c78 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004b7e:	4a47      	ldr	r2, [pc, #284]	@ (8004c9c <HAL_GPIO_Init+0x3a8>)
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	089b      	lsrs	r3, r3, #2
 8004b84:	3318      	adds	r3, #24
 8004b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b8a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	220f      	movs	r2, #15
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	69fa      	ldr	r2, [r7, #28]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	0a9a      	lsrs	r2, r3, #10
 8004ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca0 <HAL_GPIO_Init+0x3ac>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	f002 0203 	and.w	r2, r2, #3
 8004bb0:	00d2      	lsls	r2, r2, #3
 8004bb2:	4093      	lsls	r3, r2
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004bba:	4938      	ldr	r1, [pc, #224]	@ (8004c9c <HAL_GPIO_Init+0x3a8>)
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	089b      	lsrs	r3, r3, #2
 8004bc0:	3318      	adds	r3, #24
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004bc8:	4b34      	ldr	r3, [pc, #208]	@ (8004c9c <HAL_GPIO_Init+0x3a8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	69fa      	ldr	r2, [r7, #28]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004bec:	4a2b      	ldr	r2, [pc, #172]	@ (8004c9c <HAL_GPIO_Init+0x3a8>)
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8004c9c <HAL_GPIO_Init+0x3a8>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	43db      	mvns	r3, r3
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004c16:	4a21      	ldr	r2, [pc, #132]	@ (8004c9c <HAL_GPIO_Init+0x3a8>)
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8004c9c <HAL_GPIO_Init+0x3a8>)
 8004c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c22:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	43db      	mvns	r3, r3
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004c42:	4a16      	ldr	r2, [pc, #88]	@ (8004c9c <HAL_GPIO_Init+0x3a8>)
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004c4a:	4b14      	ldr	r3, [pc, #80]	@ (8004c9c <HAL_GPIO_Init+0x3a8>)
 8004c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c50:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	43db      	mvns	r3, r3
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004c68:	69fa      	ldr	r2, [r7, #28]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004c70:	4a0a      	ldr	r2, [pc, #40]	@ (8004c9c <HAL_GPIO_Init+0x3a8>)
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	fa22 f303 	lsr.w	r3, r2, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f47f ae3d 	bne.w	8004908 <HAL_GPIO_Init+0x14>
  }
}
 8004c8e:	bf00      	nop
 8004c90:	bf00      	nop
 8004c92:	3724      	adds	r7, #36	@ 0x24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	46022000 	.word	0x46022000
 8004ca0:	002f7f7f 	.word	0x002f7f7f

08004ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	807b      	strh	r3, [r7, #2]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cb4:	787b      	ldrb	r3, [r7, #1]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004cba:	887a      	ldrh	r2, [r7, #2]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004cc0:	e002      	b.n	8004cc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004cc2:	887a      	ldrh	r2, [r7, #2]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e01c      	b.n	8004d20 <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	795b      	ldrb	r3, [r3, #5]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d105      	bne.n	8004cfa <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fd f8a2 	bl	8001e38 <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	791b      	ldrb	r3, [r3, #4]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_GPU2D_Init+0x32>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e00c      	b.n	8004d20 <HAL_GPU2D_Init+0x4c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	33f8      	adds	r3, #248	@ 0xf8
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d013      	beq.n	8004d6c <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	33f8      	adds	r3, #248	@ 0xf8
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f023 0201 	bic.w	r2, r3, #1
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 8004d64:	68f9      	ldr	r1, [r7, #12]
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f80f 	bl	8004d8a <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f80f 	bl	8004da0 <HAL_GPU2D_ErrorCallback>
}
 8004d82:	bf00      	nop
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_GPU2D_CommandListCpltCallback>:
  *                the configuration information for the GPU2D.
  * @param  CmdListID Command list ID that got completed.
  * @retval None
  */
__weak void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	6039      	str	r1, [r7, #0]
  UNUSED(CmdListID);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_GPU2D_CommandListCpltCallback can be implemented in the user file.
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 8004da8:	bf00      	nop
 8004daa:	e7fd      	b.n	8004da8 <HAL_GPU2D_ErrorCallback+0x8>

08004dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e08d      	b.n	8004eda <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fd f870 	bl	8001eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2224      	movs	r2, #36	@ 0x24
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0201 	bic.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004dfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d107      	bne.n	8004e26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e22:	609a      	str	r2, [r3, #8]
 8004e24:	e006      	b.n	8004e34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004e32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d108      	bne.n	8004e4e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e4a:	605a      	str	r2, [r3, #4]
 8004e4c:	e007      	b.n	8004e5e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69d9      	ldr	r1, [r3, #28]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a1a      	ldr	r2, [r3, #32]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b20      	cmp	r3, #32
 8004ef6:	d138      	bne.n	8004f6a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e032      	b.n	8004f6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2224      	movs	r2, #36	@ 0x24
 8004f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0201 	bic.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f34:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6819      	ldr	r1, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e000      	b.n	8004f6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f6a:	2302      	movs	r3, #2
  }
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	d139      	bne.n	8005002 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e033      	b.n	8005004 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2224      	movs	r2, #36	@ 0x24
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0201 	bic.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004fca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 0201 	orr.w	r2, r2, #1
 8004fec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	e000      	b.n	8005004 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005002:	2302      	movs	r3, #2
  }
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005014:	4b05      	ldr	r3, [pc, #20]	@ (800502c <HAL_ICACHE_Enable+0x1c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a04      	ldr	r2, [pc, #16]	@ (800502c <HAL_ICACHE_Enable+0x1c>)
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	40030400 	.word	0x40030400

08005030 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 800503a:	4b14      	ldr	r3, [pc, #80]	@ (800508c <HAL_ICACHE_Disable+0x5c>)
 800503c:	2202      	movs	r2, #2
 800503e:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005040:	4b12      	ldr	r3, [pc, #72]	@ (800508c <HAL_ICACHE_Disable+0x5c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a11      	ldr	r2, [pc, #68]	@ (800508c <HAL_ICACHE_Disable+0x5c>)
 8005046:	f023 0301 	bic.w	r3, r3, #1
 800504a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800504c:	f7fd ff96 	bl	8002f7c <HAL_GetTick>
 8005050:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005052:	e00f      	b.n	8005074 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8005054:	f7fd ff92 	bl	8002f7c <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b01      	cmp	r3, #1
 8005060:	d908      	bls.n	8005074 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005062:	4b0a      	ldr	r3, [pc, #40]	@ (800508c <HAL_ICACHE_Disable+0x5c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	71fb      	strb	r3, [r7, #7]
        break;
 8005072:	e005      	b.n	8005080 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005074:	4b05      	ldr	r3, [pc, #20]	@ (800508c <HAL_ICACHE_Disable+0x5c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1e9      	bne.n	8005054 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8005080:	79fb      	ldrb	r3, [r7, #7]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40030400 	.word	0x40030400

08005090 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800509e:	4b22      	ldr	r3, [pc, #136]	@ (8005128 <HAL_ICACHE_EnableRemapRegion+0x98>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	75fb      	strb	r3, [r7, #23]
 80050ae:	e034      	b.n	800511a <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	009a      	lsls	r2, r3, #2
 80050b4:	4b1d      	ldr	r3, [pc, #116]	@ (800512c <HAL_ICACHE_EnableRemapRegion+0x9c>)
 80050b6:	4413      	add	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	75fb      	strb	r3, [r7, #23]
 80050ca:	e026      	b.n	800511a <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 80050d8:	4013      	ands	r3, r2
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	425b      	negs	r3, r3
 80050ea:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80050ec:	401a      	ands	r2, r3
 80050ee:	4b10      	ldr	r3, [pc, #64]	@ (8005130 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	025a      	lsls	r2, r3, #9
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8005108:	4313      	orrs	r3, r2
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 800511a:	7dfb      	ldrb	r3, [r7, #23]
}
 800511c:	4618      	mov	r0, r3
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40030400 	.word	0x40030400
 800512c:	40030420 	.word	0x40030420
 8005130:	07ff0000 	.word	0x07ff0000

08005134 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e0bf      	b.n	80052c6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fd fa58 	bl	8002610 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005176:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6999      	ldr	r1, [r3, #24]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800518c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6899      	ldr	r1, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	4b4a      	ldr	r3, [pc, #296]	@ (80052d0 <HAL_LTDC_Init+0x19c>)
 80051a8:	400b      	ands	r3, r1
 80051aa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	041b      	lsls	r3, r3, #16
 80051b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6899      	ldr	r1, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68d9      	ldr	r1, [r3, #12]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	4b3e      	ldr	r3, [pc, #248]	@ (80052d0 <HAL_LTDC_Init+0x19c>)
 80051d6:	400b      	ands	r3, r1
 80051d8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	041b      	lsls	r3, r3, #16
 80051e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68d9      	ldr	r1, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a1a      	ldr	r2, [r3, #32]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6919      	ldr	r1, [r3, #16]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4b33      	ldr	r3, [pc, #204]	@ (80052d0 <HAL_LTDC_Init+0x19c>)
 8005204:	400b      	ands	r3, r1
 8005206:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520c:	041b      	lsls	r3, r3, #16
 800520e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6919      	ldr	r1, [r3, #16]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6959      	ldr	r1, [r3, #20]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	4b27      	ldr	r3, [pc, #156]	@ (80052d0 <HAL_LTDC_Init+0x19c>)
 8005232:	400b      	ands	r3, r1
 8005234:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523a:	041b      	lsls	r3, r3, #16
 800523c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6959      	ldr	r1, [r3, #20]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800525a:	021b      	lsls	r3, r3, #8
 800525c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005264:	041b      	lsls	r3, r3, #16
 8005266:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005276:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0206 	orr.w	r2, r2, #6
 80052a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	f000f800 	.word	0xf000f800

080052d4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ea:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d023      	beq.n	800533e <HAL_LTDC_IRQHandler+0x6a>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01e      	beq.n	800533e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0204 	bic.w	r2, r2, #4
 800530e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2204      	movs	r2, #4
 8005316:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800531e:	f043 0201 	orr.w	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2204      	movs	r2, #4
 800532c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f86f 	bl	800541c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d023      	beq.n	8005390 <HAL_LTDC_IRQHandler+0xbc>
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d01e      	beq.n	8005390 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 0202 	bic.w	r2, r2, #2
 8005360:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2202      	movs	r2, #2
 8005368:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005370:	f043 0202 	orr.w	r2, r3, #2
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2204      	movs	r2, #4
 800537e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f846 	bl	800541c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01b      	beq.n	80053d2 <HAL_LTDC_IRQHandler+0xfe>
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d016      	beq.n	80053d2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0201 	bic.w	r2, r2, #1
 80053b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2201      	movs	r2, #1
 80053ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f82f 	bl	8005430 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01b      	beq.n	8005414 <HAL_LTDC_IRQHandler+0x140>
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d016      	beq.n	8005414 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0208 	bic.w	r2, r2, #8
 80053f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2208      	movs	r2, #8
 80053fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f818 	bl	8005444 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005458:	b5b0      	push	{r4, r5, r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_LTDC_ConfigLayer+0x1a>
 800546e:	2302      	movs	r3, #2
 8005470:	e02c      	b.n	80054cc <HAL_LTDC_ConfigLayer+0x74>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2202      	movs	r2, #2
 800547e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2134      	movs	r1, #52	@ 0x34
 8005488:	fb01 f303 	mul.w	r3, r1, r3
 800548c:	4413      	add	r3, r2
 800548e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	4614      	mov	r4, r2
 8005496:	461d      	mov	r5, r3
 8005498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800549a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800549c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800549e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f811 	bl	80054d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2201      	movs	r2, #1
 80054b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bdb0      	pop	{r4, r5, r7, pc}

080054d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b089      	sub	sp, #36	@ 0x24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	0c1b      	lsrs	r3, r3, #16
 80054ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054f0:	4413      	add	r3, r2
 80054f2:	041b      	lsls	r3, r3, #16
 80054f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	01db      	lsls	r3, r3, #7
 8005500:	4413      	add	r3, r2
 8005502:	3384      	adds	r3, #132	@ 0x84
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	6812      	ldr	r2, [r2, #0]
 800550a:	4611      	mov	r1, r2
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	01d2      	lsls	r2, r2, #7
 8005510:	440a      	add	r2, r1
 8005512:	3284      	adds	r2, #132	@ 0x84
 8005514:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8005518:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	0c1b      	lsrs	r3, r3, #16
 8005526:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800552a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800552c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4619      	mov	r1, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	01db      	lsls	r3, r3, #7
 8005538:	440b      	add	r3, r1
 800553a:	3384      	adds	r3, #132	@ 0x84
 800553c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005542:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005552:	4413      	add	r3, r2
 8005554:	041b      	lsls	r3, r3, #16
 8005556:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	01db      	lsls	r3, r3, #7
 8005562:	4413      	add	r3, r2
 8005564:	3384      	adds	r3, #132	@ 0x84
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	4611      	mov	r1, r2
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	01d2      	lsls	r2, r2, #7
 8005572:	440a      	add	r2, r1
 8005574:	3284      	adds	r2, #132	@ 0x84
 8005576:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 800557a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800558a:	4413      	add	r3, r2
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4619      	mov	r1, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	01db      	lsls	r3, r3, #7
 8005598:	440b      	add	r3, r1
 800559a:	3384      	adds	r3, #132	@ 0x84
 800559c:	4619      	mov	r1, r3
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	01db      	lsls	r3, r3, #7
 80055ae:	4413      	add	r3, r2
 80055b0:	3384      	adds	r3, #132	@ 0x84
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	4611      	mov	r1, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	01d2      	lsls	r2, r2, #7
 80055be:	440a      	add	r2, r1
 80055c0:	3284      	adds	r2, #132	@ 0x84
 80055c2:	f023 0307 	bic.w	r3, r3, #7
 80055c6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	01db      	lsls	r3, r3, #7
 80055d2:	4413      	add	r3, r2
 80055d4:	3384      	adds	r3, #132	@ 0x84
 80055d6:	461a      	mov	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80055ee:	041b      	lsls	r3, r3, #16
 80055f0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	061b      	lsls	r3, r3, #24
 80055f8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	01db      	lsls	r3, r3, #7
 8005604:	4413      	add	r3, r2
 8005606:	3384      	adds	r3, #132	@ 0x84
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	01db      	lsls	r3, r3, #7
 8005614:	4413      	add	r3, r2
 8005616:	3384      	adds	r3, #132	@ 0x84
 8005618:	461a      	mov	r2, r3
 800561a:	2300      	movs	r3, #0
 800561c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005624:	461a      	mov	r2, r3
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	431a      	orrs	r2, r3
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	431a      	orrs	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4619      	mov	r1, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	01db      	lsls	r3, r3, #7
 8005638:	440b      	add	r3, r1
 800563a:	3384      	adds	r3, #132	@ 0x84
 800563c:	4619      	mov	r1, r3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	01db      	lsls	r3, r3, #7
 800564e:	4413      	add	r3, r2
 8005650:	3384      	adds	r3, #132	@ 0x84
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	6812      	ldr	r2, [r2, #0]
 8005658:	4611      	mov	r1, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	01d2      	lsls	r2, r2, #7
 800565e:	440a      	add	r2, r1
 8005660:	3284      	adds	r2, #132	@ 0x84
 8005662:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005666:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	461a      	mov	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	01db      	lsls	r3, r3, #7
 8005672:	4413      	add	r3, r2
 8005674:	3384      	adds	r3, #132	@ 0x84
 8005676:	461a      	mov	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	01db      	lsls	r3, r3, #7
 8005688:	4413      	add	r3, r2
 800568a:	3384      	adds	r3, #132	@ 0x84
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	6812      	ldr	r2, [r2, #0]
 8005692:	4611      	mov	r1, r2
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	01d2      	lsls	r2, r2, #7
 8005698:	440a      	add	r2, r1
 800569a:	3284      	adds	r2, #132	@ 0x84
 800569c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80056a0:	f023 0307 	bic.w	r3, r3, #7
 80056a4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	69da      	ldr	r2, [r3, #28]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	68f9      	ldr	r1, [r7, #12]
 80056b0:	6809      	ldr	r1, [r1, #0]
 80056b2:	4608      	mov	r0, r1
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	01c9      	lsls	r1, r1, #7
 80056b8:	4401      	add	r1, r0
 80056ba:	3184      	adds	r1, #132	@ 0x84
 80056bc:	4313      	orrs	r3, r2
 80056be:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	461a      	mov	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	01db      	lsls	r3, r3, #7
 80056ca:	4413      	add	r3, r2
 80056cc:	3384      	adds	r3, #132	@ 0x84
 80056ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	01db      	lsls	r3, r3, #7
 80056da:	4413      	add	r3, r2
 80056dc:	3384      	adds	r3, #132	@ 0x84
 80056de:	461a      	mov	r2, r3
 80056e0:	2300      	movs	r3, #0
 80056e2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	461a      	mov	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	01db      	lsls	r3, r3, #7
 80056ee:	4413      	add	r3, r2
 80056f0:	3384      	adds	r3, #132	@ 0x84
 80056f2:	461a      	mov	r2, r3
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d102      	bne.n	8005708 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005702:	2304      	movs	r3, #4
 8005704:	61fb      	str	r3, [r7, #28]
 8005706:	e01b      	b.n	8005740 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d102      	bne.n	8005716 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005710:	2303      	movs	r3, #3
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	e014      	b.n	8005740 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b04      	cmp	r3, #4
 800571c:	d00b      	beq.n	8005736 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005722:	2b02      	cmp	r3, #2
 8005724:	d007      	beq.n	8005736 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800572a:	2b03      	cmp	r3, #3
 800572c:	d003      	beq.n	8005736 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005732:	2b07      	cmp	r3, #7
 8005734:	d102      	bne.n	800573c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005736:	2302      	movs	r3, #2
 8005738:	61fb      	str	r3, [r7, #28]
 800573a:	e001      	b.n	8005740 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800573c:	2301      	movs	r3, #1
 800573e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	01db      	lsls	r3, r3, #7
 800574a:	4413      	add	r3, r2
 800574c:	3384      	adds	r3, #132	@ 0x84
 800574e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	6812      	ldr	r2, [r2, #0]
 8005754:	4611      	mov	r1, r2
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	01d2      	lsls	r2, r2, #7
 800575a:	440a      	add	r2, r1
 800575c:	3284      	adds	r2, #132	@ 0x84
 800575e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005762:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	fb02 f303 	mul.w	r3, r2, r3
 800576e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	6859      	ldr	r1, [r3, #4]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	1acb      	subs	r3, r1, r3
 800577a:	69f9      	ldr	r1, [r7, #28]
 800577c:	fb01 f303 	mul.w	r3, r1, r3
 8005780:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005782:	68f9      	ldr	r1, [r7, #12]
 8005784:	6809      	ldr	r1, [r1, #0]
 8005786:	4608      	mov	r0, r1
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	01c9      	lsls	r1, r1, #7
 800578c:	4401      	add	r1, r0
 800578e:	3184      	adds	r1, #132	@ 0x84
 8005790:	4313      	orrs	r3, r2
 8005792:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	01db      	lsls	r3, r3, #7
 800579e:	4413      	add	r3, r2
 80057a0:	3384      	adds	r3, #132	@ 0x84
 80057a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	4611      	mov	r1, r2
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	01d2      	lsls	r2, r2, #7
 80057ae:	440a      	add	r2, r1
 80057b0:	3284      	adds	r2, #132	@ 0x84
 80057b2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80057b6:	f023 0307 	bic.w	r3, r3, #7
 80057ba:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	461a      	mov	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	01db      	lsls	r3, r3, #7
 80057c6:	4413      	add	r3, r2
 80057c8:	3384      	adds	r3, #132	@ 0x84
 80057ca:	461a      	mov	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	01db      	lsls	r3, r3, #7
 80057dc:	4413      	add	r3, r2
 80057de:	3384      	adds	r3, #132	@ 0x84
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	6812      	ldr	r2, [r2, #0]
 80057e6:	4611      	mov	r1, r2
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	01d2      	lsls	r2, r2, #7
 80057ec:	440a      	add	r2, r1
 80057ee:	3284      	adds	r2, #132	@ 0x84
 80057f0:	f043 0301 	orr.w	r3, r3, #1
 80057f4:	6013      	str	r3, [r2, #0]
}
 80057f6:	bf00      	nop
 80057f8:	3724      	adds	r7, #36	@ 0x24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
	...

08005804 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d102      	bne.n	800581c <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	73fb      	strb	r3, [r7, #15]
 800581a:	e141      	b.n	8005aa0 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4618      	mov	r0, r3
 8005822:	f000 f947 	bl	8005ab4 <MDF_GetHandleNumberFromInstance>
 8005826:	4603      	mov	r3, r0
 8005828:	4a86      	ldr	r2, [pc, #536]	@ (8005a44 <HAL_MDF_Init+0x240>)
 800582a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	73fb      	strb	r3, [r7, #15]
 8005836:	e133      	b.n	8005aa0 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7fc f953 	bl	8001ae4 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 800583e:	4b82      	ldr	r3, [pc, #520]	@ (8005a48 <HAL_MDF_Init+0x244>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d11d      	bne.n	8005882 <HAL_MDF_Init+0x7e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a80      	ldr	r2, [pc, #512]	@ (8005a4c <HAL_MDF_Init+0x248>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d023      	beq.n	8005898 <HAL_MDF_Init+0x94>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a7e      	ldr	r2, [pc, #504]	@ (8005a50 <HAL_MDF_Init+0x24c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d01e      	beq.n	8005898 <HAL_MDF_Init+0x94>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a7d      	ldr	r2, [pc, #500]	@ (8005a54 <HAL_MDF_Init+0x250>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d019      	beq.n	8005898 <HAL_MDF_Init+0x94>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a7b      	ldr	r2, [pc, #492]	@ (8005a58 <HAL_MDF_Init+0x254>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d014      	beq.n	8005898 <HAL_MDF_Init+0x94>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a7a      	ldr	r2, [pc, #488]	@ (8005a5c <HAL_MDF_Init+0x258>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00f      	beq.n	8005898 <HAL_MDF_Init+0x94>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a78      	ldr	r2, [pc, #480]	@ (8005a60 <HAL_MDF_Init+0x25c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00a      	beq.n	8005898 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8005882:	4b78      	ldr	r3, [pc, #480]	@ (8005a64 <HAL_MDF_Init+0x260>)
 8005884:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8005886:	2b00      	cmp	r3, #0
 8005888:	f040 8090 	bne.w	80059ac <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a75      	ldr	r2, [pc, #468]	@ (8005a68 <HAL_MDF_Init+0x264>)
 8005892:	4293      	cmp	r3, r2
 8005894:	f040 808a 	bne.w	80059ac <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a72      	ldr	r2, [pc, #456]	@ (8005a68 <HAL_MDF_Init+0x264>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d101      	bne.n	80058a6 <HAL_MDF_Init+0xa2>
 80058a2:	4b72      	ldr	r3, [pc, #456]	@ (8005a6c <HAL_MDF_Init+0x268>)
 80058a4:	e000      	b.n	80058a8 <HAL_MDF_Init+0xa4>
 80058a6:	4b72      	ldr	r3, [pc, #456]	@ (8005a70 <HAL_MDF_Init+0x26c>)
 80058a8:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	da02      	bge.n	80058b8 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	73fb      	strb	r3, [r7, #15]
 80058b6:	e079      	b.n	80059ac <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a63      	ldr	r2, [pc, #396]	@ (8005a4c <HAL_MDF_Init+0x248>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d018      	beq.n	80058f4 <HAL_MDF_Init+0xf0>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a62      	ldr	r2, [pc, #392]	@ (8005a50 <HAL_MDF_Init+0x24c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d013      	beq.n	80058f4 <HAL_MDF_Init+0xf0>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a60      	ldr	r2, [pc, #384]	@ (8005a54 <HAL_MDF_Init+0x250>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00e      	beq.n	80058f4 <HAL_MDF_Init+0xf0>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a5f      	ldr	r2, [pc, #380]	@ (8005a58 <HAL_MDF_Init+0x254>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d009      	beq.n	80058f4 <HAL_MDF_Init+0xf0>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a5d      	ldr	r2, [pc, #372]	@ (8005a5c <HAL_MDF_Init+0x258>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d004      	beq.n	80058f4 <HAL_MDF_Init+0xf0>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a5c      	ldr	r2, [pc, #368]	@ (8005a60 <HAL_MDF_Init+0x25c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d10d      	bne.n	8005910 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	011b      	lsls	r3, r3, #4
 800590a:	431a      	orrs	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2200      	movs	r2, #0
 8005914:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	3b01      	subs	r3, #1
 8005920:	061b      	lsls	r3, r3, #24
 8005922:	431a      	orrs	r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	7b1b      	ldrb	r3, [r3, #12]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d137      	bne.n	80059a0 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	3b01      	subs	r3, #1
 800593a:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8005940:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8005948:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 800594a:	431a      	orrs	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	7e1b      	ldrb	r3, [r3, #24]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d123      	bne.n	80059a0 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a3b      	ldr	r2, [pc, #236]	@ (8005a4c <HAL_MDF_Init+0x248>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d012      	beq.n	8005988 <HAL_MDF_Init+0x184>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a3a      	ldr	r2, [pc, #232]	@ (8005a50 <HAL_MDF_Init+0x24c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00d      	beq.n	8005988 <HAL_MDF_Init+0x184>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a38      	ldr	r2, [pc, #224]	@ (8005a54 <HAL_MDF_Init+0x250>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d008      	beq.n	8005988 <HAL_MDF_Init+0x184>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a37      	ldr	r2, [pc, #220]	@ (8005a58 <HAL_MDF_Init+0x254>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d003      	beq.n	8005988 <HAL_MDF_Init+0x184>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a35      	ldr	r2, [pc, #212]	@ (8005a5c <HAL_MDF_Init+0x258>)
 8005986:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8005994:	430b      	orrs	r3, r1
 8005996:	4313      	orrs	r3, r2
 8005998:	f043 0210 	orr.w	r2, r3, #16
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f043 0201 	orr.w	r2, r3, #1
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d128      	bne.n	8005a04 <HAL_MDF_Init+0x200>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d123      	bne.n	8005a04 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	da02      	bge.n	80059cc <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	73fb      	strb	r3, [r7, #15]
 80059ca:	e01b      	b.n	8005a04 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6819      	ldr	r1, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059de:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80059e4:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ea:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d14a      	bne.n	8005aa0 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 021f 	bic.w	r2, r2, #31
 8005a18:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6859      	ldr	r1, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0d      	ldr	r2, [pc, #52]	@ (8005a68 <HAL_MDF_Init+0x264>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d11e      	bne.n	8005a74 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8005a36:	4b0b      	ldr	r3, [pc, #44]	@ (8005a64 <HAL_MDF_Init+0x260>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	4a09      	ldr	r2, [pc, #36]	@ (8005a64 <HAL_MDF_Init+0x260>)
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	e01d      	b.n	8005a7e <HAL_MDF_Init+0x27a>
 8005a42:	bf00      	nop
 8005a44:	20001518 	.word	0x20001518
 8005a48:	20001510 	.word	0x20001510
 8005a4c:	40025080 	.word	0x40025080
 8005a50:	40025100 	.word	0x40025100
 8005a54:	40025180 	.word	0x40025180
 8005a58:	40025200 	.word	0x40025200
 8005a5c:	40025280 	.word	0x40025280
 8005a60:	40025300 	.word	0x40025300
 8005a64:	20001514 	.word	0x20001514
 8005a68:	46024080 	.word	0x46024080
 8005a6c:	46024000 	.word	0x46024000
 8005a70:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8005a74:	4b0d      	ldr	r3, [pc, #52]	@ (8005aac <HAL_MDF_Init+0x2a8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8005aac <HAL_MDF_Init+0x2a8>)
 8005a7c:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 f816 	bl	8005ab4 <MDF_GetHandleNumberFromInstance>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	4909      	ldr	r1, [pc, #36]	@ (8005ab0 <HAL_MDF_Init+0x2ac>)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	641a      	str	r2, [r3, #64]	@ 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	20001510 	.word	0x20001510
 8005ab0:	20001518 	.word	0x20001518

08005ab4 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a19      	ldr	r2, [pc, #100]	@ (8005b24 <MDF_GetHandleNumberFromInstance+0x70>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d102      	bne.n	8005aca <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	e024      	b.n	8005b14 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a16      	ldr	r2, [pc, #88]	@ (8005b28 <MDF_GetHandleNumberFromInstance+0x74>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d102      	bne.n	8005ad8 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	e01d      	b.n	8005b14 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a14      	ldr	r2, [pc, #80]	@ (8005b2c <MDF_GetHandleNumberFromInstance+0x78>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d102      	bne.n	8005ae6 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	e016      	b.n	8005b14 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a11      	ldr	r2, [pc, #68]	@ (8005b30 <MDF_GetHandleNumberFromInstance+0x7c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d102      	bne.n	8005af4 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8005aee:	2303      	movs	r3, #3
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	e00f      	b.n	8005b14 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a0f      	ldr	r2, [pc, #60]	@ (8005b34 <MDF_GetHandleNumberFromInstance+0x80>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d102      	bne.n	8005b02 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8005afc:	2304      	movs	r3, #4
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	e008      	b.n	8005b14 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a0c      	ldr	r2, [pc, #48]	@ (8005b38 <MDF_GetHandleNumberFromInstance+0x84>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d102      	bne.n	8005b10 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8005b0a:	2305      	movs	r3, #5
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	e001      	b.n	8005b14 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8005b10:	2306      	movs	r3, #6
 8005b12:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8005b14:	68fb      	ldr	r3, [r7, #12]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	40025080 	.word	0x40025080
 8005b28:	40025100 	.word	0x40025100
 8005b2c:	40025180 	.word	0x40025180
 8005b30:	40025200 	.word	0x40025200
 8005b34:	40025280 	.word	0x40025280
 8005b38:	40025300 	.word	0x40025300

08005b3c <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f043 0201 	orr.w	r2, r3, #1
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	601a      	str	r2, [r3, #0]
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005b68:	f7fd fa08 	bl	8002f7c <HAL_GetTick>
 8005b6c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d102      	bne.n	8005b7a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	73fb      	strb	r3, [r7, #15]
 8005b78:	e0a5      	b.n	8005cc6 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f040 809e 	bne.w	8005cc6 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fc fd96 	bl	80026bc <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8005b90:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f951 	bl	8005e3c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	4b4b      	ldr	r3, [pc, #300]	@ (8005cd0 <HAL_OSPI_Init+0x174>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	68d1      	ldr	r1, [r2, #12]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6912      	ldr	r2, [r2, #16]
 8005bac:	3a01      	subs	r2, #1
 8005bae:	0412      	lsls	r2, r2, #16
 8005bb0:	4311      	orrs	r1, r2
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	6952      	ldr	r2, [r2, #20]
 8005bb6:	3a01      	subs	r2, #1
 8005bb8:	0212      	lsls	r2, r2, #8
 8005bba:	4311      	orrs	r1, r2
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005bc0:	4311      	orrs	r1, r2
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	69d2      	ldr	r2, [r2, #28]
 8005bc6:	4311      	orrs	r1, r2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1a      	ldr	r2, [r3, #32]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bea:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c00:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	021a      	lsls	r2, r3, #8
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2200      	movs	r2, #0
 8005c26:	2120      	movs	r1, #32
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fe09 	bl	8006840 <OSPI_WaitFlagStateUntilTimeout>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005c32:	7bfb      	ldrb	r3, [r7, #15]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d146      	bne.n	8005cc6 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c46:	1e5a      	subs	r2, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005c6e:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0201 	orr.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d107      	bne.n	8005cae <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 0202 	orr.w	r2, r2, #2
 8005cac:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cb6:	d103      	bne.n	8005cc0 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	651a      	str	r2, [r3, #80]	@ 0x50
 8005cbe:	e002      	b.n	8005cc6 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	f8e0c0f4 	.word	0xf8e0c0f4

08005cd4 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08a      	sub	sp, #40	@ 0x28
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8005ce0:	f7fd f94c 	bl	8002f7c <HAL_GetTick>
 8005ce4:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cea:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d002      	beq.n	8005cf8 <HAL_OSPI_HyperbusCfg+0x24>
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d122      	bne.n	8005d3e <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	2120      	movs	r1, #32
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 fd9c 	bl	8006840 <OSPI_WaitFlagStateUntilTimeout>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8005d0c:	7ffb      	ldrb	r3, [r7, #31]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d11a      	bne.n	8005d48 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	041a      	lsls	r2, r3, #16
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	021b      	lsls	r3, r3, #8
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	ea42 0103 	orr.w	r1, r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8005d3c:	e004      	b.n	8005d48 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2210      	movs	r2, #16
 8005d46:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 8005d48:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3720      	adds	r7, #32
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b088      	sub	sp, #32
 8005d56:	af02      	add	r7, sp, #8
 8005d58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8005d5e:	f7fd f90d 	bl	8002f7c <HAL_GetTick>
 8005d62:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d68:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d104      	bne.n	8005d7e <HAL_OSPI_Abort+0x2c>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f003 0304 	and.w	r3, r3, #4
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d052      	beq.n	8005e24 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d014      	beq.n	8005db6 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0204 	bic.w	r2, r2, #4
 8005d9a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fd fb98 	bl	80034d6 <HAL_DMA_Abort>
 8005da6:	4603      	mov	r3, r0
 8005da8:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2204      	movs	r2, #4
 8005db4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d02b      	beq.n	8005e1c <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0202 	orr.w	r2, r2, #2
 8005dd2:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	2102      	movs	r1, #2
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fd2d 	bl	8006840 <OSPI_WaitFlagStateUntilTimeout>
 8005de6:	4603      	mov	r3, r0
 8005de8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005dea:	7dfb      	ldrb	r3, [r7, #23]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d11f      	bne.n	8005e30 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2202      	movs	r2, #2
 8005df6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	2200      	movs	r2, #0
 8005e02:	2120      	movs	r1, #32
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fd1b 	bl	8006840 <OSPI_WaitFlagStateUntilTimeout>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10d      	bne.n	8005e30 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005e1a:	e009      	b.n	8005e30 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005e22:	e005      	b.n	8005e30 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2210      	movs	r2, #16
 8005e2c:	655a      	str	r2, [r3, #84]	@ 0x54
 8005e2e:	e000      	b.n	8005e32 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005e30:	bf00      	nop
  }

  /* Return function status */
  return status;
 8005e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
	...

08005e5c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b094      	sub	sp, #80	@ 0x50
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a9d      	ldr	r2, [pc, #628]	@ (80060f0 <HAL_OSPIM_Config+0x294>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d105      	bne.n	8005e8a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8005e82:	2301      	movs	r3, #1
 8005e84:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8005e88:	e004      	b.n	8005e94 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005e94:	2300      	movs	r3, #0
 8005e96:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005e9a:	e01d      	b.n	8005ed8 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8005e9c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	b2d8      	uxtb	r0, r3
 8005ea4:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8005ea8:	f107 0114 	add.w	r1, r7, #20
 8005eac:	4613      	mov	r3, r2
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	4413      	add	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	440b      	add	r3, r1
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	f000 fd02 	bl	80068c0 <OSPIM_GetConfig>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2208      	movs	r2, #8
 8005ecc:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005ece:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005ed8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d9dd      	bls.n	8005e9c <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8005ee0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f040 849e 	bne.w	8006826 <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8005eea:	4b81      	ldr	r3, [pc, #516]	@ (80060f0 <HAL_OSPIM_Config+0x294>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00b      	beq.n	8005f0e <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005ef6:	4b7e      	ldr	r3, [pc, #504]	@ (80060f0 <HAL_OSPIM_Config+0x294>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a7d      	ldr	r2, [pc, #500]	@ (80060f0 <HAL_OSPIM_Config+0x294>)
 8005efc:	f023 0301 	bic.w	r3, r3, #1
 8005f00:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8005f02:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005f06:	f043 0301 	orr.w	r3, r3, #1
 8005f0a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8005f0e:	4b79      	ldr	r3, [pc, #484]	@ (80060f4 <HAL_OSPIM_Config+0x298>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00b      	beq.n	8005f32 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005f1a:	4b76      	ldr	r3, [pc, #472]	@ (80060f4 <HAL_OSPIM_Config+0x298>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a75      	ldr	r2, [pc, #468]	@ (80060f4 <HAL_OSPIM_Config+0x298>)
 8005f20:	f023 0301 	bic.w	r3, r3, #1
 8005f24:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8005f26:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005f2a:	f043 0302 	orr.w	r3, r3, #2
 8005f2e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005f32:	4971      	ldr	r1, [pc, #452]	@ (80060f8 <HAL_OSPIM_Config+0x29c>)
 8005f34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f36:	4613      	mov	r3, r2
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	4413      	add	r3, r2
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	3350      	adds	r3, #80	@ 0x50
 8005f40:	443b      	add	r3, r7
 8005f42:	3b34      	subs	r3, #52	@ 0x34
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	6859      	ldr	r1, [r3, #4]
 8005f4e:	486a      	ldr	r0, [pc, #424]	@ (80060f8 <HAL_OSPIM_Config+0x29c>)
 8005f50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f52:	4613      	mov	r3, r2
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	4413      	add	r3, r2
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	3350      	adds	r3, #80	@ 0x50
 8005f5c:	443b      	add	r3, r7
 8005f5e:	3b34      	subs	r3, #52	@ 0x34
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4403      	add	r3, r0
 8005f6c:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8005f6e:	4b62      	ldr	r3, [pc, #392]	@ (80060f8 <HAL_OSPIM_Config+0x29c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 80c0 	beq.w	80060fc <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8005f7c:	4b5e      	ldr	r3, [pc, #376]	@ (80060f8 <HAL_OSPIM_Config+0x29c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a5d      	ldr	r2, [pc, #372]	@ (80060f8 <HAL_OSPIM_Config+0x29c>)
 8005f82:	f023 0301 	bic.w	r3, r3, #1
 8005f86:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8005f88:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	f040 8162 	bne.w	8006256 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8005f92:	4959      	ldr	r1, [pc, #356]	@ (80060f8 <HAL_OSPIM_Config+0x29c>)
 8005f94:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005f98:	4613      	mov	r3, r2
 8005f9a:	005b      	lsls	r3, r3, #1
 8005f9c:	4413      	add	r3, r2
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	3350      	adds	r3, #80	@ 0x50
 8005fa2:	443b      	add	r3, r7
 8005fa4:	3b3c      	subs	r3, #60	@ 0x3c
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	440b      	add	r3, r1
 8005fae:	6859      	ldr	r1, [r3, #4]
 8005fb0:	4851      	ldr	r0, [pc, #324]	@ (80060f8 <HAL_OSPIM_Config+0x29c>)
 8005fb2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	4413      	add	r3, r2
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	3350      	adds	r3, #80	@ 0x50
 8005fc0:	443b      	add	r3, r7
 8005fc2:	3b3c      	subs	r3, #60	@ 0x3c
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	f041 0202 	orr.w	r2, r1, #2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4403      	add	r3, r0
 8005fd0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005fd2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	4413      	add	r3, r2
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	3350      	adds	r3, #80	@ 0x50
 8005fe0:	443b      	add	r3, r7
 8005fe2:	3b38      	subs	r3, #56	@ 0x38
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d01f      	beq.n	800602a <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8005fea:	4943      	ldr	r1, [pc, #268]	@ (80060f8 <HAL_OSPIM_Config+0x29c>)
 8005fec:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	4413      	add	r3, r2
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	3350      	adds	r3, #80	@ 0x50
 8005ffa:	443b      	add	r3, r7
 8005ffc:	3b38      	subs	r3, #56	@ 0x38
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3b01      	subs	r3, #1
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	6859      	ldr	r1, [r3, #4]
 8006008:	483b      	ldr	r0, [pc, #236]	@ (80060f8 <HAL_OSPIM_Config+0x29c>)
 800600a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800600e:	4613      	mov	r3, r2
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	4413      	add	r3, r2
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	3350      	adds	r3, #80	@ 0x50
 8006018:	443b      	add	r3, r7
 800601a:	3b38      	subs	r3, #56	@ 0x38
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3b01      	subs	r3, #1
 8006020:	f041 0220 	orr.w	r2, r1, #32
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4403      	add	r3, r0
 8006028:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800602a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800602e:	4613      	mov	r3, r2
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	4413      	add	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	3350      	adds	r3, #80	@ 0x50
 8006038:	443b      	add	r3, r7
 800603a:	3b30      	subs	r3, #48	@ 0x30
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d023      	beq.n	800608a <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006042:	492d      	ldr	r1, [pc, #180]	@ (80060f8 <HAL_OSPIM_Config+0x29c>)
 8006044:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006048:	4613      	mov	r3, r2
 800604a:	005b      	lsls	r3, r3, #1
 800604c:	4413      	add	r3, r2
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	3350      	adds	r3, #80	@ 0x50
 8006052:	443b      	add	r3, r7
 8006054:	3b30      	subs	r3, #48	@ 0x30
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3b01      	subs	r3, #1
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	6859      	ldr	r1, [r3, #4]
 8006064:	4824      	ldr	r0, [pc, #144]	@ (80060f8 <HAL_OSPIM_Config+0x29c>)
 8006066:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800606a:	4613      	mov	r3, r2
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	4413      	add	r3, r2
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	3350      	adds	r3, #80	@ 0x50
 8006074:	443b      	add	r3, r7
 8006076:	3b30      	subs	r3, #48	@ 0x30
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3b01      	subs	r3, #1
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4403      	add	r3, r0
 8006088:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800608a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800608e:	4613      	mov	r3, r2
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	4413      	add	r3, r2
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	3350      	adds	r3, #80	@ 0x50
 8006098:	443b      	add	r3, r7
 800609a:	3b2c      	subs	r3, #44	@ 0x2c
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 80d9 	beq.w	8006256 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80060a4:	4914      	ldr	r1, [pc, #80]	@ (80060f8 <HAL_OSPIM_Config+0x29c>)
 80060a6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80060aa:	4613      	mov	r3, r2
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	4413      	add	r3, r2
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	3350      	adds	r3, #80	@ 0x50
 80060b4:	443b      	add	r3, r7
 80060b6:	3b2c      	subs	r3, #44	@ 0x2c
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	6859      	ldr	r1, [r3, #4]
 80060c6:	480c      	ldr	r0, [pc, #48]	@ (80060f8 <HAL_OSPIM_Config+0x29c>)
 80060c8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80060cc:	4613      	mov	r3, r2
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	4413      	add	r3, r2
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	3350      	adds	r3, #80	@ 0x50
 80060d6:	443b      	add	r3, r7
 80060d8:	3b2c      	subs	r3, #44	@ 0x2c
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	3b01      	subs	r3, #1
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4403      	add	r3, r0
 80060ea:	605a      	str	r2, [r3, #4]
 80060ec:	e0b3      	b.n	8006256 <HAL_OSPIM_Config+0x3fa>
 80060ee:	bf00      	nop
 80060f0:	420d1400 	.word	0x420d1400
 80060f4:	420d2400 	.word	0x420d2400
 80060f8:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80060fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060fe:	4613      	mov	r3, r2
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	4413      	add	r3, r2
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	3350      	adds	r3, #80	@ 0x50
 8006108:	443b      	add	r3, r7
 800610a:	3b3c      	subs	r3, #60	@ 0x3c
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 80a1 	beq.w	8006256 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006114:	4993      	ldr	r1, [pc, #588]	@ (8006364 <HAL_OSPIM_Config+0x508>)
 8006116:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006118:	4613      	mov	r3, r2
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	4413      	add	r3, r2
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	3350      	adds	r3, #80	@ 0x50
 8006122:	443b      	add	r3, r7
 8006124:	3b3c      	subs	r3, #60	@ 0x3c
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3b01      	subs	r3, #1
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	440b      	add	r3, r1
 800612e:	6859      	ldr	r1, [r3, #4]
 8006130:	488c      	ldr	r0, [pc, #560]	@ (8006364 <HAL_OSPIM_Config+0x508>)
 8006132:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006134:	4613      	mov	r3, r2
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	4413      	add	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	3350      	adds	r3, #80	@ 0x50
 800613e:	443b      	add	r3, r7
 8006140:	3b3c      	subs	r3, #60	@ 0x3c
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3b01      	subs	r3, #1
 8006146:	f021 0201 	bic.w	r2, r1, #1
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4403      	add	r3, r0
 800614e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006150:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006152:	4613      	mov	r3, r2
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	4413      	add	r3, r2
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	3350      	adds	r3, #80	@ 0x50
 800615c:	443b      	add	r3, r7
 800615e:	3b38      	subs	r3, #56	@ 0x38
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d01d      	beq.n	80061a2 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006166:	497f      	ldr	r1, [pc, #508]	@ (8006364 <HAL_OSPIM_Config+0x508>)
 8006168:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800616a:	4613      	mov	r3, r2
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	4413      	add	r3, r2
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	3350      	adds	r3, #80	@ 0x50
 8006174:	443b      	add	r3, r7
 8006176:	3b38      	subs	r3, #56	@ 0x38
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3b01      	subs	r3, #1
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	6859      	ldr	r1, [r3, #4]
 8006182:	4878      	ldr	r0, [pc, #480]	@ (8006364 <HAL_OSPIM_Config+0x508>)
 8006184:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006186:	4613      	mov	r3, r2
 8006188:	005b      	lsls	r3, r3, #1
 800618a:	4413      	add	r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	3350      	adds	r3, #80	@ 0x50
 8006190:	443b      	add	r3, r7
 8006192:	3b38      	subs	r3, #56	@ 0x38
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3b01      	subs	r3, #1
 8006198:	f021 0210 	bic.w	r2, r1, #16
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4403      	add	r3, r0
 80061a0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80061a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061a4:	4613      	mov	r3, r2
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	4413      	add	r3, r2
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	3350      	adds	r3, #80	@ 0x50
 80061ae:	443b      	add	r3, r7
 80061b0:	3b30      	subs	r3, #48	@ 0x30
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d021      	beq.n	80061fc <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80061b8:	496a      	ldr	r1, [pc, #424]	@ (8006364 <HAL_OSPIM_Config+0x508>)
 80061ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061bc:	4613      	mov	r3, r2
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	4413      	add	r3, r2
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	3350      	adds	r3, #80	@ 0x50
 80061c6:	443b      	add	r3, r7
 80061c8:	3b30      	subs	r3, #48	@ 0x30
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	440b      	add	r3, r1
 80061d6:	6859      	ldr	r1, [r3, #4]
 80061d8:	4862      	ldr	r0, [pc, #392]	@ (8006364 <HAL_OSPIM_Config+0x508>)
 80061da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061dc:	4613      	mov	r3, r2
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	4413      	add	r3, r2
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	3350      	adds	r3, #80	@ 0x50
 80061e6:	443b      	add	r3, r7
 80061e8:	3b30      	subs	r3, #48	@ 0x30
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3b01      	subs	r3, #1
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4403      	add	r3, r0
 80061fa:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80061fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061fe:	4613      	mov	r3, r2
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	4413      	add	r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	3350      	adds	r3, #80	@ 0x50
 8006208:	443b      	add	r3, r7
 800620a:	3b2c      	subs	r3, #44	@ 0x2c
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d021      	beq.n	8006256 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006212:	4954      	ldr	r1, [pc, #336]	@ (8006364 <HAL_OSPIM_Config+0x508>)
 8006214:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006216:	4613      	mov	r3, r2
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	4413      	add	r3, r2
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	3350      	adds	r3, #80	@ 0x50
 8006220:	443b      	add	r3, r7
 8006222:	3b2c      	subs	r3, #44	@ 0x2c
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3b01      	subs	r3, #1
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	440b      	add	r3, r1
 8006230:	6859      	ldr	r1, [r3, #4]
 8006232:	484c      	ldr	r0, [pc, #304]	@ (8006364 <HAL_OSPIM_Config+0x508>)
 8006234:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006236:	4613      	mov	r3, r2
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	4413      	add	r3, r2
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	3350      	adds	r3, #80	@ 0x50
 8006240:	443b      	add	r3, r7
 8006242:	3b2c      	subs	r3, #44	@ 0x2c
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3b01      	subs	r3, #1
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4403      	add	r3, r0
 8006254:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	6819      	ldr	r1, [r3, #0]
 800625a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800625e:	4613      	mov	r3, r2
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	4413      	add	r3, r2
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	3350      	adds	r3, #80	@ 0x50
 8006268:	443b      	add	r3, r7
 800626a:	3b3c      	subs	r3, #60	@ 0x3c
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4299      	cmp	r1, r3
 8006270:	d038      	beq.n	80062e4 <HAL_OSPIM_Config+0x488>
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	6859      	ldr	r1, [r3, #4]
 8006276:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800627a:	4613      	mov	r3, r2
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	4413      	add	r3, r2
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	3350      	adds	r3, #80	@ 0x50
 8006284:	443b      	add	r3, r7
 8006286:	3b38      	subs	r3, #56	@ 0x38
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4299      	cmp	r1, r3
 800628c:	d02a      	beq.n	80062e4 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	6899      	ldr	r1, [r3, #8]
 8006292:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006296:	4613      	mov	r3, r2
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	4413      	add	r3, r2
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	3350      	adds	r3, #80	@ 0x50
 80062a0:	443b      	add	r3, r7
 80062a2:	3b34      	subs	r3, #52	@ 0x34
 80062a4:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80062a6:	4299      	cmp	r1, r3
 80062a8:	d01c      	beq.n	80062e4 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	68d9      	ldr	r1, [r3, #12]
 80062ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80062b2:	4613      	mov	r3, r2
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	4413      	add	r3, r2
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	3350      	adds	r3, #80	@ 0x50
 80062bc:	443b      	add	r3, r7
 80062be:	3b30      	subs	r3, #48	@ 0x30
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4299      	cmp	r1, r3
 80062c4:	d00e      	beq.n	80062e4 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	6919      	ldr	r1, [r3, #16]
 80062ca:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80062ce:	4613      	mov	r3, r2
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	4413      	add	r3, r2
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	3350      	adds	r3, #80	@ 0x50
 80062d8:	443b      	add	r3, r7
 80062da:	3b2c      	subs	r3, #44	@ 0x2c
 80062dc:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80062de:	4299      	cmp	r1, r3
 80062e0:	f040 810e 	bne.w	8006500 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	6819      	ldr	r1, [r3, #0]
 80062e8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80062ec:	4613      	mov	r3, r2
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	4413      	add	r3, r2
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	3350      	adds	r3, #80	@ 0x50
 80062f6:	443b      	add	r3, r7
 80062f8:	3b3c      	subs	r3, #60	@ 0x3c
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4299      	cmp	r1, r3
 80062fe:	d133      	bne.n	8006368 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	6859      	ldr	r1, [r3, #4]
 8006304:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006308:	4613      	mov	r3, r2
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	4413      	add	r3, r2
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	3350      	adds	r3, #80	@ 0x50
 8006312:	443b      	add	r3, r7
 8006314:	3b38      	subs	r3, #56	@ 0x38
 8006316:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006318:	4299      	cmp	r1, r3
 800631a:	d125      	bne.n	8006368 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	68d9      	ldr	r1, [r3, #12]
 8006320:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006324:	4613      	mov	r3, r2
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	4413      	add	r3, r2
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	3350      	adds	r3, #80	@ 0x50
 800632e:	443b      	add	r3, r7
 8006330:	3b30      	subs	r3, #48	@ 0x30
 8006332:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006334:	4299      	cmp	r1, r3
 8006336:	d117      	bne.n	8006368 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	6919      	ldr	r1, [r3, #16]
 800633c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006340:	4613      	mov	r3, r2
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	4413      	add	r3, r2
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	3350      	adds	r3, #80	@ 0x50
 800634a:	443b      	add	r3, r7
 800634c:	3b2c      	subs	r3, #44	@ 0x2c
 800634e:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006350:	4299      	cmp	r1, r3
 8006352:	d109      	bne.n	8006368 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006354:	4b03      	ldr	r3, [pc, #12]	@ (8006364 <HAL_OSPIM_Config+0x508>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a02      	ldr	r2, [pc, #8]	@ (8006364 <HAL_OSPIM_Config+0x508>)
 800635a:	f043 0301 	orr.w	r3, r3, #1
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	e0ce      	b.n	8006500 <HAL_OSPIM_Config+0x6a4>
 8006362:	bf00      	nop
 8006364:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006368:	49a4      	ldr	r1, [pc, #656]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 800636a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800636e:	4613      	mov	r3, r2
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	4413      	add	r3, r2
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	3350      	adds	r3, #80	@ 0x50
 8006378:	443b      	add	r3, r7
 800637a:	3b3c      	subs	r3, #60	@ 0x3c
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3b01      	subs	r3, #1
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	440b      	add	r3, r1
 8006384:	6859      	ldr	r1, [r3, #4]
 8006386:	489d      	ldr	r0, [pc, #628]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 8006388:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800638c:	4613      	mov	r3, r2
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	4413      	add	r3, r2
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	3350      	adds	r3, #80	@ 0x50
 8006396:	443b      	add	r3, r7
 8006398:	3b3c      	subs	r3, #60	@ 0x3c
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3b01      	subs	r3, #1
 800639e:	f021 0201 	bic.w	r2, r1, #1
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4403      	add	r3, r0
 80063a6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80063a8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80063ac:	4613      	mov	r3, r2
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	4413      	add	r3, r2
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	3350      	adds	r3, #80	@ 0x50
 80063b6:	443b      	add	r3, r7
 80063b8:	3b38      	subs	r3, #56	@ 0x38
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01f      	beq.n	8006400 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80063c0:	498e      	ldr	r1, [pc, #568]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 80063c2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80063c6:	4613      	mov	r3, r2
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	4413      	add	r3, r2
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	3350      	adds	r3, #80	@ 0x50
 80063d0:	443b      	add	r3, r7
 80063d2:	3b38      	subs	r3, #56	@ 0x38
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	440b      	add	r3, r1
 80063dc:	6859      	ldr	r1, [r3, #4]
 80063de:	4887      	ldr	r0, [pc, #540]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 80063e0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80063e4:	4613      	mov	r3, r2
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	4413      	add	r3, r2
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	3350      	adds	r3, #80	@ 0x50
 80063ee:	443b      	add	r3, r7
 80063f0:	3b38      	subs	r3, #56	@ 0x38
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	f021 0210 	bic.w	r2, r1, #16
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4403      	add	r3, r0
 80063fe:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006400:	497e      	ldr	r1, [pc, #504]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 8006402:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006406:	4613      	mov	r3, r2
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	4413      	add	r3, r2
 800640c:	00db      	lsls	r3, r3, #3
 800640e:	3350      	adds	r3, #80	@ 0x50
 8006410:	443b      	add	r3, r7
 8006412:	3b34      	subs	r3, #52	@ 0x34
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	3b01      	subs	r3, #1
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	440b      	add	r3, r1
 800641c:	6859      	ldr	r1, [r3, #4]
 800641e:	4877      	ldr	r0, [pc, #476]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 8006420:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006424:	4613      	mov	r3, r2
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	4413      	add	r3, r2
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	3350      	adds	r3, #80	@ 0x50
 800642e:	443b      	add	r3, r7
 8006430:	3b34      	subs	r3, #52	@ 0x34
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3b01      	subs	r3, #1
 8006436:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4403      	add	r3, r0
 800643e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006440:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006444:	4613      	mov	r3, r2
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	4413      	add	r3, r2
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	3350      	adds	r3, #80	@ 0x50
 800644e:	443b      	add	r3, r7
 8006450:	3b30      	subs	r3, #48	@ 0x30
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d023      	beq.n	80064a0 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006458:	4968      	ldr	r1, [pc, #416]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 800645a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800645e:	4613      	mov	r3, r2
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	4413      	add	r3, r2
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	3350      	adds	r3, #80	@ 0x50
 8006468:	443b      	add	r3, r7
 800646a:	3b30      	subs	r3, #48	@ 0x30
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3b01      	subs	r3, #1
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	440b      	add	r3, r1
 8006478:	6859      	ldr	r1, [r3, #4]
 800647a:	4860      	ldr	r0, [pc, #384]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 800647c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006480:	4613      	mov	r3, r2
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	4413      	add	r3, r2
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	3350      	adds	r3, #80	@ 0x50
 800648a:	443b      	add	r3, r7
 800648c:	3b30      	subs	r3, #48	@ 0x30
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3b01      	subs	r3, #1
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4403      	add	r3, r0
 800649e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80064a0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80064a4:	4613      	mov	r3, r2
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	4413      	add	r3, r2
 80064aa:	00db      	lsls	r3, r3, #3
 80064ac:	3350      	adds	r3, #80	@ 0x50
 80064ae:	443b      	add	r3, r7
 80064b0:	3b2c      	subs	r3, #44	@ 0x2c
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d023      	beq.n	8006500 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80064b8:	4950      	ldr	r1, [pc, #320]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 80064ba:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80064be:	4613      	mov	r3, r2
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	4413      	add	r3, r2
 80064c4:	00db      	lsls	r3, r3, #3
 80064c6:	3350      	adds	r3, #80	@ 0x50
 80064c8:	443b      	add	r3, r7
 80064ca:	3b2c      	subs	r3, #44	@ 0x2c
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3b01      	subs	r3, #1
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	440b      	add	r3, r1
 80064d8:	6859      	ldr	r1, [r3, #4]
 80064da:	4848      	ldr	r0, [pc, #288]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 80064dc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80064e0:	4613      	mov	r3, r2
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	4413      	add	r3, r2
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	3350      	adds	r3, #80	@ 0x50
 80064ea:	443b      	add	r3, r7
 80064ec:	3b2c      	subs	r3, #44	@ 0x2c
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4403      	add	r3, r0
 80064fe:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006500:	4a3e      	ldr	r2, [pc, #248]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	3b01      	subs	r3, #1
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006512:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006514:	025b      	lsls	r3, r3, #9
 8006516:	431a      	orrs	r2, r3
 8006518:	4938      	ldr	r1, [pc, #224]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	3b01      	subs	r3, #1
 8006520:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	440b      	add	r3, r1
 8006528:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d018      	beq.n	8006564 <HAL_OSPIM_Config+0x708>
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800653a:	d813      	bhi.n	8006564 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	1e5a      	subs	r2, r3, #1
 8006542:	4b2e      	ldr	r3, [pc, #184]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	0c1b      	lsrs	r3, r3, #16
 8006548:	b2db      	uxtb	r3, r3
 800654a:	429a      	cmp	r2, r3
 800654c:	d90a      	bls.n	8006564 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800654e:	4b2b      	ldr	r3, [pc, #172]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	3b01      	subs	r3, #1
 800655c:	041b      	lsls	r3, r3, #16
 800655e:	4927      	ldr	r1, [pc, #156]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 8006560:	4313      	orrs	r3, r2
 8006562:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006564:	4b25      	ldr	r3, [pc, #148]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 809a 	beq.w	80066a6 <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006572:	4a22      	ldr	r2, [pc, #136]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3b01      	subs	r3, #1
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f023 0203 	bic.w	r2, r3, #3
 8006584:	491d      	ldr	r1, [pc, #116]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3b01      	subs	r3, #1
 800658c:	f042 0201 	orr.w	r2, r2, #1
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d011      	beq.n	80065c2 <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800659e:	4a17      	ldr	r2, [pc, #92]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80065b0:	4912      	ldr	r1, [pc, #72]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	f042 0210 	orr.w	r2, r2, #16
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	440b      	add	r3, r1
 80065c0:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d018      	beq.n	8006600 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80065ce:	4a0b      	ldr	r2, [pc, #44]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80065e4:	4905      	ldr	r1, [pc, #20]	@ (80065fc <HAL_OSPIM_Config+0x7a0>)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	440b      	add	r3, r1
 80065f8:	605a      	str	r2, [r3, #4]
 80065fa:	e01b      	b.n	8006634 <HAL_OSPIM_Config+0x7d8>
 80065fc:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d015      	beq.n	8006634 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006608:	4a8a      	ldr	r2, [pc, #552]	@ (8006834 <HAL_OSPIM_Config+0x9d8>)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	3b01      	subs	r3, #1
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800661e:	4985      	ldr	r1, [pc, #532]	@ (8006834 <HAL_OSPIM_Config+0x9d8>)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	3b01      	subs	r3, #1
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	440b      	add	r3, r1
 8006632:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d016      	beq.n	800666e <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006640:	4a7c      	ldr	r2, [pc, #496]	@ (8006834 <HAL_OSPIM_Config+0x9d8>)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	3b01      	subs	r3, #1
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006656:	4977      	ldr	r1, [pc, #476]	@ (8006834 <HAL_OSPIM_Config+0x9d8>)
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	3b01      	subs	r3, #1
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	440b      	add	r3, r1
 800666a:	605a      	str	r2, [r3, #4]
 800666c:	e0c3      	b.n	80067f6 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 80bf 	beq.w	80067f6 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006678:	4a6e      	ldr	r2, [pc, #440]	@ (8006834 <HAL_OSPIM_Config+0x9d8>)
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	3b01      	subs	r3, #1
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800668e:	4969      	ldr	r1, [pc, #420]	@ (8006834 <HAL_OSPIM_Config+0x9d8>)
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	3b01      	subs	r3, #1
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	440b      	add	r3, r1
 80066a2:	605a      	str	r2, [r3, #4]
 80066a4:	e0a7      	b.n	80067f6 <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80066a6:	4a63      	ldr	r2, [pc, #396]	@ (8006834 <HAL_OSPIM_Config+0x9d8>)
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f023 0203 	bic.w	r2, r3, #3
 80066b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	431a      	orrs	r2, r3
 80066be:	495d      	ldr	r1, [pc, #372]	@ (8006834 <HAL_OSPIM_Config+0x9d8>)
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	440b      	add	r3, r1
 80066ce:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d014      	beq.n	8006702 <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80066d8:	4a56      	ldr	r2, [pc, #344]	@ (8006834 <HAL_OSPIM_Config+0x9d8>)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	3b01      	subs	r3, #1
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80066ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066ec:	015b      	lsls	r3, r3, #5
 80066ee:	431a      	orrs	r2, r3
 80066f0:	4950      	ldr	r1, [pc, #320]	@ (8006834 <HAL_OSPIM_Config+0x9d8>)
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	f042 0210 	orr.w	r2, r2, #16
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	440b      	add	r3, r1
 8006700:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d019      	beq.n	8006742 <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800670e:	4a49      	ldr	r2, [pc, #292]	@ (8006834 <HAL_OSPIM_Config+0x9d8>)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	3b01      	subs	r3, #1
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006724:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006726:	049b      	lsls	r3, r3, #18
 8006728:	431a      	orrs	r2, r3
 800672a:	4942      	ldr	r1, [pc, #264]	@ (8006834 <HAL_OSPIM_Config+0x9d8>)
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	3b01      	subs	r3, #1
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	440b      	add	r3, r1
 800673e:	605a      	str	r2, [r3, #4]
 8006740:	e01c      	b.n	800677c <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d018      	beq.n	800677c <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800674a:	4a3a      	ldr	r2, [pc, #232]	@ (8006834 <HAL_OSPIM_Config+0x9d8>)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	3b01      	subs	r3, #1
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8006760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006762:	069b      	lsls	r3, r3, #26
 8006764:	431a      	orrs	r2, r3
 8006766:	4933      	ldr	r1, [pc, #204]	@ (8006834 <HAL_OSPIM_Config+0x9d8>)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	3b01      	subs	r3, #1
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d019      	beq.n	80067bc <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006788:	4a2a      	ldr	r2, [pc, #168]	@ (8006834 <HAL_OSPIM_Config+0x9d8>)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	3b01      	subs	r3, #1
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800679e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067a0:	049b      	lsls	r3, r3, #18
 80067a2:	431a      	orrs	r2, r3
 80067a4:	4923      	ldr	r1, [pc, #140]	@ (8006834 <HAL_OSPIM_Config+0x9d8>)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	440b      	add	r3, r1
 80067b8:	605a      	str	r2, [r3, #4]
 80067ba:	e01c      	b.n	80067f6 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d018      	beq.n	80067f6 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80067c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006834 <HAL_OSPIM_Config+0x9d8>)
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80067da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067dc:	069b      	lsls	r3, r3, #26
 80067de:	431a      	orrs	r2, r3
 80067e0:	4914      	ldr	r1, [pc, #80]	@ (8006834 <HAL_OSPIM_Config+0x9d8>)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	3b01      	subs	r3, #1
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	440b      	add	r3, r1
 80067f4:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80067f6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006802:	4b0d      	ldr	r3, [pc, #52]	@ (8006838 <HAL_OSPIM_Config+0x9dc>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a0c      	ldr	r2, [pc, #48]	@ (8006838 <HAL_OSPIM_Config+0x9dc>)
 8006808:	f043 0301 	orr.w	r3, r3, #1
 800680c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800680e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d005      	beq.n	8006826 <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800681a:	4b08      	ldr	r3, [pc, #32]	@ (800683c <HAL_OSPIM_Config+0x9e0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a07      	ldr	r2, [pc, #28]	@ (800683c <HAL_OSPIM_Config+0x9e0>)
 8006820:	f043 0301 	orr.w	r3, r3, #1
 8006824:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8006826:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800682a:	4618      	mov	r0, r3
 800682c:	3750      	adds	r7, #80	@ 0x50
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	420c4000 	.word	0x420c4000
 8006838:	420d1400 	.word	0x420d1400
 800683c:	420d2400 	.word	0x420d2400

08006840 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	603b      	str	r3, [r7, #0]
 800684c:	4613      	mov	r3, r2
 800684e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006850:	e022      	b.n	8006898 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d01e      	beq.n	8006898 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685a:	f7fc fb8f 	bl	8002f7c <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	429a      	cmp	r2, r3
 8006868:	d302      	bcc.n	8006870 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d113      	bne.n	8006898 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6a1a      	ldr	r2, [r3, #32]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	401a      	ands	r2, r3
 800687a:	79fb      	ldrb	r3, [r7, #7]
 800687c:	429a      	cmp	r2, r3
 800687e:	d00b      	beq.n	8006898 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006886:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800688c:	f043 0201 	orr.w	r2, r3, #1
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e00e      	b.n	80068b6 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6a1a      	ldr	r2, [r3, #32]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	4013      	ands	r3, r2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	bf14      	ite	ne
 80068a6:	2301      	movne	r3, #1
 80068a8:	2300      	moveq	r3, #0
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	461a      	mov	r2, r3
 80068ae:	79fb      	ldrb	r3, [r7, #7]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d1ce      	bne.n	8006852 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
	...

080068c0 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	4603      	mov	r3, r0
 80068c8:	6039      	str	r1, [r7, #0]
 80068ca:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80068d4:	79fb      	ldrb	r3, [r7, #7]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d005      	beq.n	80068e6 <OSPIM_GetConfig+0x26>
 80068da:	79fb      	ldrb	r3, [r7, #7]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d802      	bhi.n	80068e6 <OSPIM_GetConfig+0x26>
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d102      	bne.n	80068ec <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	75fb      	strb	r3, [r7, #23]
 80068ea:	e098      	b.n	8006a1e <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2200      	movs	r2, #0
 80068f6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2200      	movs	r2, #0
 80068fc:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2200      	movs	r2, #0
 8006902:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2200      	movs	r2, #0
 8006908:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800690a:	79fb      	ldrb	r3, [r7, #7]
 800690c:	2b02      	cmp	r3, #2
 800690e:	d10b      	bne.n	8006928 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8006910:	4b46      	ldr	r3, [pc, #280]	@ (8006a2c <OSPIM_GetConfig+0x16c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	d102      	bne.n	8006922 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800691c:	4b44      	ldr	r3, [pc, #272]	@ (8006a30 <OSPIM_GetConfig+0x170>)
 800691e:	613b      	str	r3, [r7, #16]
 8006920:	e002      	b.n	8006928 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8006922:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006926:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006928:	2300      	movs	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	e074      	b.n	8006a18 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800692e:	4a3f      	ldr	r2, [pc, #252]	@ (8006a2c <OSPIM_GetConfig+0x16c>)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00a      	beq.n	800695a <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	4053      	eors	r3, r2
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d103      	bne.n	800695a <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	4053      	eors	r3, r2
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	d103      	bne.n	800697a <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	1c5a      	adds	r2, r3, #1
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00a      	beq.n	800699a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	4053      	eors	r3, r2
 800698a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800698e:	2b00      	cmp	r3, #0
 8006990:	d103      	bne.n	800699a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d018      	beq.n	80069d6 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	4053      	eors	r3, r2
 80069aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d111      	bne.n	80069d6 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d106      	bne.n	80069ca <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3301      	adds	r3, #1
 80069c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	60da      	str	r2, [r3, #12]
 80069c8:	e005      	b.n	80069d6 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	3301      	adds	r3, #1
 80069ce:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d018      	beq.n	8006a12 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	4053      	eors	r3, r2
 80069e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d111      	bne.n	8006a12 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d106      	bne.n	8006a06 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3301      	adds	r3, #1
 80069fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	611a      	str	r2, [r3, #16]
 8006a04:	e005      	b.n	8006a12 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3301      	adds	r3, #1
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d987      	bls.n	800692e <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	371c      	adds	r7, #28
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	420c4000 	.word	0x420c4000
 8006a30:	04040222 	.word	0x04040222

08006a34 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f042 0202 	orr.w	r2, r2, #2
 8006a50:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2208      	movs	r2, #8
 8006a56:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a15      	ldr	r2, [pc, #84]	@ (8006ab4 <HAL_OSPI_DLYB_SetConfig+0x80>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d109      	bne.n	8006a76 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8006a62:	4815      	ldr	r0, [pc, #84]	@ (8006ab8 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8006a64:	f7ff f86a 	bl	8005b3c <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	4813      	ldr	r0, [pc, #76]	@ (8006ab8 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8006a6c:	f006 f928 	bl	800ccc0 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	73fb      	strb	r3, [r7, #15]
 8006a74:	e00d      	b.n	8006a92 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a10      	ldr	r2, [pc, #64]	@ (8006abc <HAL_OSPI_DLYB_SetConfig+0x88>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d108      	bne.n	8006a92 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8006a80:	480f      	ldr	r0, [pc, #60]	@ (8006ac0 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8006a82:	f7ff f85b 	bl	8005b3c <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	480d      	ldr	r0, [pc, #52]	@ (8006ac0 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8006a8a:	f006 f919 	bl	800ccc0 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff f95d 	bl	8005d52 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0202 	bic.w	r2, r2, #2
 8006aa6:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	420d1400 	.word	0x420d1400
 8006ab8:	420cf000 	.word	0x420cf000
 8006abc:	420d2400 	.word	0x420d2400
 8006ac0:	420cf400 	.word	0x420cf400

08006ac4 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006ac8:	4b05      	ldr	r3, [pc, #20]	@ (8006ae0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006acc:	4a04      	ldr	r2, [pc, #16]	@ (8006ae0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006ace:	f043 0301 	orr.w	r3, r3, #1
 8006ad2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8006ad4:	bf00      	nop
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	46020800 	.word	0x46020800

08006ae4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8006aec:	4b39      	ldr	r3, [pc, #228]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006af4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d10b      	bne.n	8006b16 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b04:	d905      	bls.n	8006b12 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006b06:	4b33      	ldr	r3, [pc, #204]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	4a32      	ldr	r2, [pc, #200]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b10:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	e057      	b.n	8006bc6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b1c:	d90a      	bls.n	8006b34 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8006b1e:	4b2d      	ldr	r3, [pc, #180]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	4a2a      	ldr	r2, [pc, #168]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b30:	60d3      	str	r3, [r2, #12]
 8006b32:	e007      	b.n	8006b44 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8006b34:	4b27      	ldr	r3, [pc, #156]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006b3c:	4925      	ldr	r1, [pc, #148]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006b44:	4b24      	ldr	r3, [pc, #144]	@ (8006bd8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a24      	ldr	r2, [pc, #144]	@ (8006bdc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4e:	099b      	lsrs	r3, r3, #6
 8006b50:	2232      	movs	r2, #50	@ 0x32
 8006b52:	fb02 f303 	mul.w	r3, r2, r3
 8006b56:	4a21      	ldr	r2, [pc, #132]	@ (8006bdc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006b58:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5c:	099b      	lsrs	r3, r3, #6
 8006b5e:	3301      	adds	r3, #1
 8006b60:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006b62:	e002      	b.n	8006b6a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d102      	bne.n	8006b7c <HAL_PWREx_ControlVoltageScaling+0x98>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1f3      	bne.n	8006b64 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d01b      	beq.n	8006bba <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006b82:	4b15      	ldr	r3, [pc, #84]	@ (8006bd8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a15      	ldr	r2, [pc, #84]	@ (8006bdc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006b88:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8c:	099b      	lsrs	r3, r3, #6
 8006b8e:	2232      	movs	r2, #50	@ 0x32
 8006b90:	fb02 f303 	mul.w	r3, r2, r3
 8006b94:	4a11      	ldr	r2, [pc, #68]	@ (8006bdc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006b96:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9a:	099b      	lsrs	r3, r3, #6
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006ba0:	e002      	b.n	8006ba8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d102      	bne.n	8006bba <HAL_PWREx_ControlVoltageScaling+0xd6>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1f3      	bne.n	8006ba2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e000      	b.n	8006bc6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	46020800 	.word	0x46020800
 8006bd8:	20000d00 	.word	0x20000d00
 8006bdc:	10624dd3 	.word	0x10624dd3

08006be0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8006be4:	4b04      	ldr	r3, [pc, #16]	@ (8006bf8 <HAL_PWREx_GetVoltageRange+0x18>)
 8006be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	46020800 	.word	0x46020800

08006bfc <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006c04:	4b22      	ldr	r3, [pc, #136]	@ (8006c90 <HAL_PWREx_ConfigSupply+0x94>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a22      	ldr	r2, [pc, #136]	@ (8006c94 <HAL_PWREx_ConfigSupply+0x98>)
 8006c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c0e:	099b      	lsrs	r3, r3, #6
 8006c10:	2232      	movs	r2, #50	@ 0x32
 8006c12:	fb02 f303 	mul.w	r3, r2, r3
 8006c16:	4a1f      	ldr	r2, [pc, #124]	@ (8006c94 <HAL_PWREx_ConfigSupply+0x98>)
 8006c18:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1c:	099b      	lsrs	r3, r3, #6
 8006c1e:	3301      	adds	r3, #1
 8006c20:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d113      	bne.n	8006c50 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006c28:	4b1b      	ldr	r3, [pc, #108]	@ (8006c98 <HAL_PWREx_ConfigSupply+0x9c>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8006c98 <HAL_PWREx_ConfigSupply+0x9c>)
 8006c2e:	f023 0302 	bic.w	r3, r3, #2
 8006c32:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006c34:	e002      	b.n	8006c3c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006c3c:	4b16      	ldr	r3, [pc, #88]	@ (8006c98 <HAL_PWREx_ConfigSupply+0x9c>)
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d116      	bne.n	8006c76 <HAL_PWREx_ConfigSupply+0x7a>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1f3      	bne.n	8006c36 <HAL_PWREx_ConfigSupply+0x3a>
 8006c4e:	e012      	b.n	8006c76 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006c50:	4b11      	ldr	r3, [pc, #68]	@ (8006c98 <HAL_PWREx_ConfigSupply+0x9c>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	4a10      	ldr	r2, [pc, #64]	@ (8006c98 <HAL_PWREx_ConfigSupply+0x9c>)
 8006c56:	f043 0302 	orr.w	r3, r3, #2
 8006c5a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006c5c:	e002      	b.n	8006c64 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	3b01      	subs	r3, #1
 8006c62:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006c64:	4b0c      	ldr	r3, [pc, #48]	@ (8006c98 <HAL_PWREx_ConfigSupply+0x9c>)
 8006c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c68:	f003 0302 	and.w	r3, r3, #2
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d102      	bne.n	8006c76 <HAL_PWREx_ConfigSupply+0x7a>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f3      	bne.n	8006c5e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d101      	bne.n	8006c80 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e000      	b.n	8006c82 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	20000d00 	.word	0x20000d00
 8006c94:	10624dd3 	.word	0x10624dd3
 8006c98:	46020800 	.word	0x46020800

08006c9c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8006ca0:	4b05      	ldr	r3, [pc, #20]	@ (8006cb8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	4a04      	ldr	r2, [pc, #16]	@ (8006cb8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006ca6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006caa:	6113      	str	r3, [r2, #16]
}
 8006cac:	bf00      	nop
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	46020800 	.word	0x46020800

08006cbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08e      	sub	sp, #56	@ 0x38
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d102      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f000 bec8 	b.w	8007a66 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cd6:	4b99      	ldr	r3, [pc, #612]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	f003 030c 	and.w	r3, r3, #12
 8006cde:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ce0:	4b96      	ldr	r3, [pc, #600]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce4:	f003 0303 	and.w	r3, r3, #3
 8006ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0310 	and.w	r3, r3, #16
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 816c 	beq.w	8006fd0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d007      	beq.n	8006d0e <HAL_RCC_OscConfig+0x52>
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d00:	2b0c      	cmp	r3, #12
 8006d02:	f040 80de 	bne.w	8006ec2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	f040 80da 	bne.w	8006ec2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d102      	bne.n	8006d1c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	f000 bea5 	b.w	8007a66 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d20:	4b86      	ldr	r3, [pc, #536]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d004      	beq.n	8006d36 <HAL_RCC_OscConfig+0x7a>
 8006d2c:	4b83      	ldr	r3, [pc, #524]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006d34:	e005      	b.n	8006d42 <HAL_RCC_OscConfig+0x86>
 8006d36:	4b81      	ldr	r3, [pc, #516]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d3c:	041b      	lsls	r3, r3, #16
 8006d3e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d255      	bcs.n	8006df2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10a      	bne.n	8006d62 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d50:	4618      	mov	r0, r3
 8006d52:	f001 fa3d 	bl	80081d0 <RCC_SetFlashLatencyFromMSIRange>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	f000 be82 	b.w	8007a66 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006d62:	4b76      	ldr	r3, [pc, #472]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	4a75      	ldr	r2, [pc, #468]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006d6c:	6093      	str	r3, [r2, #8]
 8006d6e:	4b73      	ldr	r3, [pc, #460]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7a:	4970      	ldr	r1, [pc, #448]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d84:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006d88:	d309      	bcc.n	8006d9e <HAL_RCC_OscConfig+0xe2>
 8006d8a:	4b6c      	ldr	r3, [pc, #432]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	f023 021f 	bic.w	r2, r3, #31
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	4969      	ldr	r1, [pc, #420]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60cb      	str	r3, [r1, #12]
 8006d9c:	e07e      	b.n	8006e9c <HAL_RCC_OscConfig+0x1e0>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	da0a      	bge.n	8006dbc <HAL_RCC_OscConfig+0x100>
 8006da6:	4b65      	ldr	r3, [pc, #404]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	015b      	lsls	r3, r3, #5
 8006db4:	4961      	ldr	r1, [pc, #388]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60cb      	str	r3, [r1, #12]
 8006dba:	e06f      	b.n	8006e9c <HAL_RCC_OscConfig+0x1e0>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dc4:	d30a      	bcc.n	8006ddc <HAL_RCC_OscConfig+0x120>
 8006dc6:	4b5d      	ldr	r3, [pc, #372]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	029b      	lsls	r3, r3, #10
 8006dd4:	4959      	ldr	r1, [pc, #356]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60cb      	str	r3, [r1, #12]
 8006dda:	e05f      	b.n	8006e9c <HAL_RCC_OscConfig+0x1e0>
 8006ddc:	4b57      	ldr	r3, [pc, #348]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	03db      	lsls	r3, r3, #15
 8006dea:	4954      	ldr	r1, [pc, #336]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60cb      	str	r3, [r1, #12]
 8006df0:	e054      	b.n	8006e9c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006df2:	4b52      	ldr	r3, [pc, #328]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	4a51      	ldr	r2, [pc, #324]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006df8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006dfc:	6093      	str	r3, [r2, #8]
 8006dfe:	4b4f      	ldr	r3, [pc, #316]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0a:	494c      	ldr	r1, [pc, #304]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e14:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006e18:	d309      	bcc.n	8006e2e <HAL_RCC_OscConfig+0x172>
 8006e1a:	4b48      	ldr	r3, [pc, #288]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	f023 021f 	bic.w	r2, r3, #31
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	4945      	ldr	r1, [pc, #276]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60cb      	str	r3, [r1, #12]
 8006e2c:	e028      	b.n	8006e80 <HAL_RCC_OscConfig+0x1c4>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	da0a      	bge.n	8006e4c <HAL_RCC_OscConfig+0x190>
 8006e36:	4b41      	ldr	r3, [pc, #260]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	015b      	lsls	r3, r3, #5
 8006e44:	493d      	ldr	r1, [pc, #244]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60cb      	str	r3, [r1, #12]
 8006e4a:	e019      	b.n	8006e80 <HAL_RCC_OscConfig+0x1c4>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e54:	d30a      	bcc.n	8006e6c <HAL_RCC_OscConfig+0x1b0>
 8006e56:	4b39      	ldr	r3, [pc, #228]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	029b      	lsls	r3, r3, #10
 8006e64:	4935      	ldr	r1, [pc, #212]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60cb      	str	r3, [r1, #12]
 8006e6a:	e009      	b.n	8006e80 <HAL_RCC_OscConfig+0x1c4>
 8006e6c:	4b33      	ldr	r3, [pc, #204]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	03db      	lsls	r3, r3, #15
 8006e7a:	4930      	ldr	r1, [pc, #192]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10a      	bne.n	8006e9c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f001 f9a0 	bl	80081d0 <RCC_SetFlashLatencyFromMSIRange>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d002      	beq.n	8006e9c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	f000 bde5 	b.w	8007a66 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8006e9c:	f001 f8de 	bl	800805c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006ea0:	4b27      	ldr	r3, [pc, #156]	@ (8006f40 <HAL_RCC_OscConfig+0x284>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fb fedd 	bl	8002c64 <HAL_InitTick>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8006eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 808a 	beq.w	8006fce <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8006eba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ebe:	f000 bdd2 	b.w	8007a66 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d066      	beq.n	8006f98 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8006eca:	4b1c      	ldr	r3, [pc, #112]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a1b      	ldr	r2, [pc, #108]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006ed0:	f043 0301 	orr.w	r3, r3, #1
 8006ed4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006ed6:	f7fc f851 	bl	8002f7c <HAL_GetTick>
 8006eda:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006edc:	e009      	b.n	8006ef2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ede:	f7fc f84d 	bl	8002f7c <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d902      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	f000 bdba 	b.w	8007a66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006ef2:	4b12      	ldr	r3, [pc, #72]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0304 	and.w	r3, r3, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0ef      	beq.n	8006ede <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006efe:	4b0f      	ldr	r3, [pc, #60]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	4a0e      	ldr	r2, [pc, #56]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006f04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006f08:	6093      	str	r3, [r2, #8]
 8006f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f16:	4909      	ldr	r1, [pc, #36]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f20:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006f24:	d30e      	bcc.n	8006f44 <HAL_RCC_OscConfig+0x288>
 8006f26:	4b05      	ldr	r3, [pc, #20]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f023 021f 	bic.w	r2, r3, #31
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	4902      	ldr	r1, [pc, #8]	@ (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60cb      	str	r3, [r1, #12]
 8006f38:	e04a      	b.n	8006fd0 <HAL_RCC_OscConfig+0x314>
 8006f3a:	bf00      	nop
 8006f3c:	46020c00 	.word	0x46020c00
 8006f40:	20000d04 	.word	0x20000d04
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	da0a      	bge.n	8006f62 <HAL_RCC_OscConfig+0x2a6>
 8006f4c:	4b98      	ldr	r3, [pc, #608]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	015b      	lsls	r3, r3, #5
 8006f5a:	4995      	ldr	r1, [pc, #596]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60cb      	str	r3, [r1, #12]
 8006f60:	e036      	b.n	8006fd0 <HAL_RCC_OscConfig+0x314>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f6a:	d30a      	bcc.n	8006f82 <HAL_RCC_OscConfig+0x2c6>
 8006f6c:	4b90      	ldr	r3, [pc, #576]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	029b      	lsls	r3, r3, #10
 8006f7a:	498d      	ldr	r1, [pc, #564]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	60cb      	str	r3, [r1, #12]
 8006f80:	e026      	b.n	8006fd0 <HAL_RCC_OscConfig+0x314>
 8006f82:	4b8b      	ldr	r3, [pc, #556]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	03db      	lsls	r3, r3, #15
 8006f90:	4987      	ldr	r1, [pc, #540]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	60cb      	str	r3, [r1, #12]
 8006f96:	e01b      	b.n	8006fd0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8006f98:	4b85      	ldr	r3, [pc, #532]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a84      	ldr	r2, [pc, #528]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8006f9e:	f023 0301 	bic.w	r3, r3, #1
 8006fa2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006fa4:	f7fb ffea 	bl	8002f7c <HAL_GetTick>
 8006fa8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006faa:	e009      	b.n	8006fc0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006fac:	f7fb ffe6 	bl	8002f7c <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d902      	bls.n	8006fc0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	f000 bd53 	b.w	8007a66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006fc0:	4b7b      	ldr	r3, [pc, #492]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0304 	and.w	r3, r3, #4
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1ef      	bne.n	8006fac <HAL_RCC_OscConfig+0x2f0>
 8006fcc:	e000      	b.n	8006fd0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006fce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 808b 	beq.w	80070f4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe0:	2b08      	cmp	r3, #8
 8006fe2:	d005      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x334>
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe6:	2b0c      	cmp	r3, #12
 8006fe8:	d109      	bne.n	8006ffe <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d106      	bne.n	8006ffe <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d17d      	bne.n	80070f4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	f000 bd34 	b.w	8007a66 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007006:	d106      	bne.n	8007016 <HAL_RCC_OscConfig+0x35a>
 8007008:	4b69      	ldr	r3, [pc, #420]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a68      	ldr	r2, [pc, #416]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 800700e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007012:	6013      	str	r3, [r2, #0]
 8007014:	e041      	b.n	800709a <HAL_RCC_OscConfig+0x3de>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800701e:	d112      	bne.n	8007046 <HAL_RCC_OscConfig+0x38a>
 8007020:	4b63      	ldr	r3, [pc, #396]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a62      	ldr	r2, [pc, #392]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8007026:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	4b60      	ldr	r3, [pc, #384]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a5f      	ldr	r2, [pc, #380]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8007032:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	4b5d      	ldr	r3, [pc, #372]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a5c      	ldr	r2, [pc, #368]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 800703e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007042:	6013      	str	r3, [r2, #0]
 8007044:	e029      	b.n	800709a <HAL_RCC_OscConfig+0x3de>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800704e:	d112      	bne.n	8007076 <HAL_RCC_OscConfig+0x3ba>
 8007050:	4b57      	ldr	r3, [pc, #348]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a56      	ldr	r2, [pc, #344]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8007056:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	4b54      	ldr	r3, [pc, #336]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a53      	ldr	r2, [pc, #332]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8007062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	4b51      	ldr	r3, [pc, #324]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a50      	ldr	r2, [pc, #320]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 800706e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	e011      	b.n	800709a <HAL_RCC_OscConfig+0x3de>
 8007076:	4b4e      	ldr	r3, [pc, #312]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a4d      	ldr	r2, [pc, #308]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 800707c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	4b4b      	ldr	r3, [pc, #300]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a4a      	ldr	r2, [pc, #296]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8007088:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	4b48      	ldr	r3, [pc, #288]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a47      	ldr	r2, [pc, #284]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8007094:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007098:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d014      	beq.n	80070cc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80070a2:	f7fb ff6b 	bl	8002f7c <HAL_GetTick>
 80070a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070a8:	e009      	b.n	80070be <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070aa:	f7fb ff67 	bl	8002f7c <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b64      	cmp	r3, #100	@ 0x64
 80070b6:	d902      	bls.n	80070be <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	f000 bcd4 	b.w	8007a66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070be:	4b3c      	ldr	r3, [pc, #240]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d0ef      	beq.n	80070aa <HAL_RCC_OscConfig+0x3ee>
 80070ca:	e013      	b.n	80070f4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80070cc:	f7fb ff56 	bl	8002f7c <HAL_GetTick>
 80070d0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070d2:	e009      	b.n	80070e8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070d4:	f7fb ff52 	bl	8002f7c <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	2b64      	cmp	r3, #100	@ 0x64
 80070e0:	d902      	bls.n	80070e8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	f000 bcbf 	b.w	8007a66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070e8:	4b31      	ldr	r3, [pc, #196]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1ef      	bne.n	80070d4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d05f      	beq.n	80071c0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	2b04      	cmp	r3, #4
 8007104:	d005      	beq.n	8007112 <HAL_RCC_OscConfig+0x456>
 8007106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007108:	2b0c      	cmp	r3, #12
 800710a:	d114      	bne.n	8007136 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800710c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710e:	2b02      	cmp	r3, #2
 8007110:	d111      	bne.n	8007136 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d102      	bne.n	8007120 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	f000 bca3 	b.w	8007a66 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007120:	4b23      	ldr	r3, [pc, #140]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	041b      	lsls	r3, r3, #16
 800712e:	4920      	ldr	r1, [pc, #128]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8007130:	4313      	orrs	r3, r2
 8007132:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007134:	e044      	b.n	80071c0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d024      	beq.n	8007188 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800713e:	4b1c      	ldr	r3, [pc, #112]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a1b      	ldr	r2, [pc, #108]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8007144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007148:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800714a:	f7fb ff17 	bl	8002f7c <HAL_GetTick>
 800714e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007150:	e009      	b.n	8007166 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007152:	f7fb ff13 	bl	8002f7c <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d902      	bls.n	8007166 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	f000 bc80 	b.w	8007a66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007166:	4b12      	ldr	r3, [pc, #72]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800716e:	2b00      	cmp	r3, #0
 8007170:	d0ef      	beq.n	8007152 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007172:	4b0f      	ldr	r3, [pc, #60]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	041b      	lsls	r3, r3, #16
 8007180:	490b      	ldr	r1, [pc, #44]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 8007182:	4313      	orrs	r3, r2
 8007184:	610b      	str	r3, [r1, #16]
 8007186:	e01b      	b.n	80071c0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8007188:	4b09      	ldr	r3, [pc, #36]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a08      	ldr	r2, [pc, #32]	@ (80071b0 <HAL_RCC_OscConfig+0x4f4>)
 800718e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007192:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007194:	f7fb fef2 	bl	8002f7c <HAL_GetTick>
 8007198:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800719a:	e00b      	b.n	80071b4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800719c:	f7fb feee 	bl	8002f7c <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d904      	bls.n	80071b4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	f000 bc5b 	b.w	8007a66 <HAL_RCC_OscConfig+0xdaa>
 80071b0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071b4:	4baf      	ldr	r3, [pc, #700]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1ed      	bne.n	800719c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0308 	and.w	r3, r3, #8
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 80c8 	beq.w	800735e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80071ce:	2300      	movs	r3, #0
 80071d0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071d4:	4ba7      	ldr	r3, [pc, #668]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 80071d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071da:	f003 0304 	and.w	r3, r3, #4
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d111      	bne.n	8007206 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071e2:	4ba4      	ldr	r3, [pc, #656]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 80071e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071e8:	4aa2      	ldr	r2, [pc, #648]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 80071ea:	f043 0304 	orr.w	r3, r3, #4
 80071ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80071f2:	4ba0      	ldr	r3, [pc, #640]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 80071f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	617b      	str	r3, [r7, #20]
 80071fe:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8007200:	2301      	movs	r3, #1
 8007202:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007206:	4b9c      	ldr	r3, [pc, #624]	@ (8007478 <HAL_RCC_OscConfig+0x7bc>)
 8007208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d119      	bne.n	8007246 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007212:	4b99      	ldr	r3, [pc, #612]	@ (8007478 <HAL_RCC_OscConfig+0x7bc>)
 8007214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007216:	4a98      	ldr	r2, [pc, #608]	@ (8007478 <HAL_RCC_OscConfig+0x7bc>)
 8007218:	f043 0301 	orr.w	r3, r3, #1
 800721c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800721e:	f7fb fead 	bl	8002f7c <HAL_GetTick>
 8007222:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007224:	e009      	b.n	800723a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007226:	f7fb fea9 	bl	8002f7c <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	2b02      	cmp	r3, #2
 8007232:	d902      	bls.n	800723a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	f000 bc16 	b.w	8007a66 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800723a:	4b8f      	ldr	r3, [pc, #572]	@ (8007478 <HAL_RCC_OscConfig+0x7bc>)
 800723c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0ef      	beq.n	8007226 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d05f      	beq.n	800730e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800724e:	4b89      	ldr	r3, [pc, #548]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 8007250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007254:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	699a      	ldr	r2, [r3, #24]
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007260:	429a      	cmp	r2, r3
 8007262:	d037      	beq.n	80072d4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d006      	beq.n	800727c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007274:	2b00      	cmp	r3, #0
 8007276:	d101      	bne.n	800727c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e3f4      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d01b      	beq.n	80072be <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8007286:	4b7b      	ldr	r3, [pc, #492]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 8007288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800728c:	4a79      	ldr	r2, [pc, #484]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 800728e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8007292:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8007296:	f7fb fe71 	bl	8002f7c <HAL_GetTick>
 800729a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800729c:	e008      	b.n	80072b0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800729e:	f7fb fe6d 	bl	8002f7c <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	2b05      	cmp	r3, #5
 80072aa:	d901      	bls.n	80072b0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e3da      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80072b0:	4b70      	ldr	r3, [pc, #448]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 80072b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1ef      	bne.n	800729e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80072be:	4b6d      	ldr	r3, [pc, #436]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 80072c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072c4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	4969      	ldr	r1, [pc, #420]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80072d4:	4b67      	ldr	r3, [pc, #412]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 80072d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072da:	4a66      	ldr	r2, [pc, #408]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 80072dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80072e4:	f7fb fe4a 	bl	8002f7c <HAL_GetTick>
 80072e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80072ea:	e008      	b.n	80072fe <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072ec:	f7fb fe46 	bl	8002f7c <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	2b05      	cmp	r3, #5
 80072f8:	d901      	bls.n	80072fe <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e3b3      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80072fe:	4b5d      	ldr	r3, [pc, #372]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 8007300:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007304:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0ef      	beq.n	80072ec <HAL_RCC_OscConfig+0x630>
 800730c:	e01b      	b.n	8007346 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800730e:	4b59      	ldr	r3, [pc, #356]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 8007310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007314:	4a57      	ldr	r2, [pc, #348]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 8007316:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800731a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800731e:	f7fb fe2d 	bl	8002f7c <HAL_GetTick>
 8007322:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007324:	e008      	b.n	8007338 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007326:	f7fb fe29 	bl	8002f7c <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	2b05      	cmp	r3, #5
 8007332:	d901      	bls.n	8007338 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e396      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007338:	4b4e      	ldr	r3, [pc, #312]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 800733a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800733e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1ef      	bne.n	8007326 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007346:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800734a:	2b01      	cmp	r3, #1
 800734c:	d107      	bne.n	800735e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800734e:	4b49      	ldr	r3, [pc, #292]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 8007350:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007354:	4a47      	ldr	r2, [pc, #284]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 8007356:	f023 0304 	bic.w	r3, r3, #4
 800735a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0304 	and.w	r3, r3, #4
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 8111 	beq.w	800758e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800736c:	2300      	movs	r3, #0
 800736e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007372:	4b40      	ldr	r3, [pc, #256]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 8007374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	d111      	bne.n	80073a4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007380:	4b3c      	ldr	r3, [pc, #240]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 8007382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007386:	4a3b      	ldr	r2, [pc, #236]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 8007388:	f043 0304 	orr.w	r3, r3, #4
 800738c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007390:	4b38      	ldr	r3, [pc, #224]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 8007392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007396:	f003 0304 	and.w	r3, r3, #4
 800739a:	613b      	str	r3, [r7, #16]
 800739c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800739e:	2301      	movs	r3, #1
 80073a0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80073a4:	4b34      	ldr	r3, [pc, #208]	@ (8007478 <HAL_RCC_OscConfig+0x7bc>)
 80073a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d118      	bne.n	80073e2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80073b0:	4b31      	ldr	r3, [pc, #196]	@ (8007478 <HAL_RCC_OscConfig+0x7bc>)
 80073b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b4:	4a30      	ldr	r2, [pc, #192]	@ (8007478 <HAL_RCC_OscConfig+0x7bc>)
 80073b6:	f043 0301 	orr.w	r3, r3, #1
 80073ba:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073bc:	f7fb fdde 	bl	8002f7c <HAL_GetTick>
 80073c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80073c2:	e008      	b.n	80073d6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073c4:	f7fb fdda 	bl	8002f7c <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e347      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80073d6:	4b28      	ldr	r3, [pc, #160]	@ (8007478 <HAL_RCC_OscConfig+0x7bc>)
 80073d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0f0      	beq.n	80073c4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d01f      	beq.n	800742e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f003 0304 	and.w	r3, r3, #4
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d010      	beq.n	800741c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80073fa:	4b1e      	ldr	r3, [pc, #120]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 80073fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007400:	4a1c      	ldr	r2, [pc, #112]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 8007402:	f043 0304 	orr.w	r3, r3, #4
 8007406:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800740a:	4b1a      	ldr	r3, [pc, #104]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 800740c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007410:	4a18      	ldr	r2, [pc, #96]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 8007412:	f043 0301 	orr.w	r3, r3, #1
 8007416:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800741a:	e018      	b.n	800744e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800741c:	4b15      	ldr	r3, [pc, #84]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 800741e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007422:	4a14      	ldr	r2, [pc, #80]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 8007424:	f043 0301 	orr.w	r3, r3, #1
 8007428:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800742c:	e00f      	b.n	800744e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800742e:	4b11      	ldr	r3, [pc, #68]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 8007430:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007434:	4a0f      	ldr	r2, [pc, #60]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 8007436:	f023 0301 	bic.w	r3, r3, #1
 800743a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800743e:	4b0d      	ldr	r3, [pc, #52]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 8007440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007444:	4a0b      	ldr	r2, [pc, #44]	@ (8007474 <HAL_RCC_OscConfig+0x7b8>)
 8007446:	f023 0304 	bic.w	r3, r3, #4
 800744a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d057      	beq.n	8007506 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8007456:	f7fb fd91 	bl	8002f7c <HAL_GetTick>
 800745a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800745c:	e00e      	b.n	800747c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800745e:	f7fb fd8d 	bl	8002f7c <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800746c:	4293      	cmp	r3, r2
 800746e:	d905      	bls.n	800747c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e2f8      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
 8007474:	46020c00 	.word	0x46020c00
 8007478:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800747c:	4b9c      	ldr	r3, [pc, #624]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 800747e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0e9      	beq.n	800745e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007492:	2b00      	cmp	r3, #0
 8007494:	d01b      	beq.n	80074ce <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007496:	4b96      	ldr	r3, [pc, #600]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 8007498:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800749c:	4a94      	ldr	r2, [pc, #592]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 800749e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80074a6:	e00a      	b.n	80074be <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074a8:	f7fb fd68 	bl	8002f7c <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e2d3      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80074be:	4b8c      	ldr	r3, [pc, #560]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 80074c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0ed      	beq.n	80074a8 <HAL_RCC_OscConfig+0x7ec>
 80074cc:	e053      	b.n	8007576 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80074ce:	4b88      	ldr	r3, [pc, #544]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 80074d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074d4:	4a86      	ldr	r2, [pc, #536]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 80074d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074de:	e00a      	b.n	80074f6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e0:	f7fb fd4c 	bl	8002f7c <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e2b7      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074f6:	4b7e      	ldr	r3, [pc, #504]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 80074f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1ed      	bne.n	80074e0 <HAL_RCC_OscConfig+0x824>
 8007504:	e037      	b.n	8007576 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8007506:	f7fb fd39 	bl	8002f7c <HAL_GetTick>
 800750a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800750c:	e00a      	b.n	8007524 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800750e:	f7fb fd35 	bl	8002f7c <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800751c:	4293      	cmp	r3, r2
 800751e:	d901      	bls.n	8007524 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e2a0      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007524:	4b72      	ldr	r3, [pc, #456]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 8007526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1ed      	bne.n	800750e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8007532:	4b6f      	ldr	r3, [pc, #444]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 8007534:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800753c:	2b00      	cmp	r3, #0
 800753e:	d01a      	beq.n	8007576 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007540:	4b6b      	ldr	r3, [pc, #428]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 8007542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007546:	4a6a      	ldr	r2, [pc, #424]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 8007548:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800754c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007550:	e00a      	b.n	8007568 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007552:	f7fb fd13 	bl	8002f7c <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007560:	4293      	cmp	r3, r2
 8007562:	d901      	bls.n	8007568 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e27e      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007568:	4b61      	ldr	r3, [pc, #388]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 800756a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800756e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1ed      	bne.n	8007552 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007576:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800757a:	2b01      	cmp	r3, #1
 800757c:	d107      	bne.n	800758e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800757e:	4b5c      	ldr	r3, [pc, #368]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 8007580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007584:	4a5a      	ldr	r2, [pc, #360]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 8007586:	f023 0304 	bic.w	r3, r3, #4
 800758a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	2b00      	cmp	r3, #0
 8007598:	d036      	beq.n	8007608 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d019      	beq.n	80075d6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80075a2:	4b53      	ldr	r3, [pc, #332]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a52      	ldr	r2, [pc, #328]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 80075a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80075ac:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80075ae:	f7fb fce5 	bl	8002f7c <HAL_GetTick>
 80075b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80075b4:	e008      	b.n	80075c8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075b6:	f7fb fce1 	bl	8002f7c <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d901      	bls.n	80075c8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e24e      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80075c8:	4b49      	ldr	r3, [pc, #292]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0f0      	beq.n	80075b6 <HAL_RCC_OscConfig+0x8fa>
 80075d4:	e018      	b.n	8007608 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80075d6:	4b46      	ldr	r3, [pc, #280]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a45      	ldr	r2, [pc, #276]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 80075dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075e0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80075e2:	f7fb fccb 	bl	8002f7c <HAL_GetTick>
 80075e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80075e8:	e008      	b.n	80075fc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075ea:	f7fb fcc7 	bl	8002f7c <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d901      	bls.n	80075fc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e234      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80075fc:	4b3c      	ldr	r3, [pc, #240]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1f0      	bne.n	80075ea <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007610:	2b00      	cmp	r3, #0
 8007612:	d036      	beq.n	8007682 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007618:	2b00      	cmp	r3, #0
 800761a:	d019      	beq.n	8007650 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800761c:	4b34      	ldr	r3, [pc, #208]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a33      	ldr	r2, [pc, #204]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 8007622:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007626:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007628:	f7fb fca8 	bl	8002f7c <HAL_GetTick>
 800762c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800762e:	e008      	b.n	8007642 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007630:	f7fb fca4 	bl	8002f7c <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	2b02      	cmp	r3, #2
 800763c:	d901      	bls.n	8007642 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e211      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007642:	4b2b      	ldr	r3, [pc, #172]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0f0      	beq.n	8007630 <HAL_RCC_OscConfig+0x974>
 800764e:	e018      	b.n	8007682 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8007650:	4b27      	ldr	r3, [pc, #156]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a26      	ldr	r2, [pc, #152]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 8007656:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800765a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800765c:	f7fb fc8e 	bl	8002f7c <HAL_GetTick>
 8007660:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007662:	e008      	b.n	8007676 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007664:	f7fb fc8a 	bl	8002f7c <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	2b02      	cmp	r3, #2
 8007670:	d901      	bls.n	8007676 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e1f7      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007676:	4b1e      	ldr	r3, [pc, #120]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1f0      	bne.n	8007664 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	d07f      	beq.n	800778e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007692:	2b00      	cmp	r3, #0
 8007694:	d062      	beq.n	800775c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8007696:	4b16      	ldr	r3, [pc, #88]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	4a15      	ldr	r2, [pc, #84]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 800769c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80076a0:	6093      	str	r3, [r2, #8]
 80076a2:	4b13      	ldr	r3, [pc, #76]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ae:	4910      	ldr	r1, [pc, #64]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80076bc:	d309      	bcc.n	80076d2 <HAL_RCC_OscConfig+0xa16>
 80076be:	4b0c      	ldr	r3, [pc, #48]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	f023 021f 	bic.w	r2, r3, #31
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	4909      	ldr	r1, [pc, #36]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60cb      	str	r3, [r1, #12]
 80076d0:	e02a      	b.n	8007728 <HAL_RCC_OscConfig+0xa6c>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	da0c      	bge.n	80076f4 <HAL_RCC_OscConfig+0xa38>
 80076da:	4b05      	ldr	r3, [pc, #20]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	015b      	lsls	r3, r3, #5
 80076e8:	4901      	ldr	r1, [pc, #4]	@ (80076f0 <HAL_RCC_OscConfig+0xa34>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60cb      	str	r3, [r1, #12]
 80076ee:	e01b      	b.n	8007728 <HAL_RCC_OscConfig+0xa6c>
 80076f0:	46020c00 	.word	0x46020c00
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076fc:	d30a      	bcc.n	8007714 <HAL_RCC_OscConfig+0xa58>
 80076fe:	4ba1      	ldr	r3, [pc, #644]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	029b      	lsls	r3, r3, #10
 800770c:	499d      	ldr	r1, [pc, #628]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 800770e:	4313      	orrs	r3, r2
 8007710:	60cb      	str	r3, [r1, #12]
 8007712:	e009      	b.n	8007728 <HAL_RCC_OscConfig+0xa6c>
 8007714:	4b9b      	ldr	r3, [pc, #620]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a1b      	ldr	r3, [r3, #32]
 8007720:	03db      	lsls	r3, r3, #15
 8007722:	4998      	ldr	r1, [pc, #608]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 8007724:	4313      	orrs	r3, r2
 8007726:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8007728:	4b96      	ldr	r3, [pc, #600]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a95      	ldr	r2, [pc, #596]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 800772e:	f043 0310 	orr.w	r3, r3, #16
 8007732:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007734:	f7fb fc22 	bl	8002f7c <HAL_GetTick>
 8007738:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800773a:	e008      	b.n	800774e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800773c:	f7fb fc1e 	bl	8002f7c <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b02      	cmp	r3, #2
 8007748:	d901      	bls.n	800774e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e18b      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800774e:	4b8d      	ldr	r3, [pc, #564]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0320 	and.w	r3, r3, #32
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0f0      	beq.n	800773c <HAL_RCC_OscConfig+0xa80>
 800775a:	e018      	b.n	800778e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800775c:	4b89      	ldr	r3, [pc, #548]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a88      	ldr	r2, [pc, #544]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 8007762:	f023 0310 	bic.w	r3, r3, #16
 8007766:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007768:	f7fb fc08 	bl	8002f7c <HAL_GetTick>
 800776c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800776e:	e008      	b.n	8007782 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007770:	f7fb fc04 	bl	8002f7c <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b02      	cmp	r3, #2
 800777c:	d901      	bls.n	8007782 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e171      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8007782:	4b80      	ldr	r3, [pc, #512]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0320 	and.w	r3, r3, #32
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1f0      	bne.n	8007770 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 8166 	beq.w	8007a64 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8007798:	2300      	movs	r3, #0
 800779a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800779e:	4b79      	ldr	r3, [pc, #484]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	f003 030c 	and.w	r3, r3, #12
 80077a6:	2b0c      	cmp	r3, #12
 80077a8:	f000 80f2 	beq.w	8007990 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	f040 80c5 	bne.w	8007940 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80077b6:	4b73      	ldr	r3, [pc, #460]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a72      	ldr	r2, [pc, #456]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 80077bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077c0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80077c2:	f7fb fbdb 	bl	8002f7c <HAL_GetTick>
 80077c6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80077c8:	e008      	b.n	80077dc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077ca:	f7fb fbd7 	bl	8002f7c <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d901      	bls.n	80077dc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e144      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80077dc:	4b69      	ldr	r3, [pc, #420]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1f0      	bne.n	80077ca <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077e8:	4b66      	ldr	r3, [pc, #408]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 80077ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077ee:	f003 0304 	and.w	r3, r3, #4
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d111      	bne.n	800781a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80077f6:	4b63      	ldr	r3, [pc, #396]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 80077f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077fc:	4a61      	ldr	r2, [pc, #388]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 80077fe:	f043 0304 	orr.w	r3, r3, #4
 8007802:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007806:	4b5f      	ldr	r3, [pc, #380]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 8007808:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800780c:	f003 0304 	and.w	r3, r3, #4
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8007814:	2301      	movs	r3, #1
 8007816:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800781a:	4b5b      	ldr	r3, [pc, #364]	@ (8007988 <HAL_RCC_OscConfig+0xccc>)
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007822:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007826:	d102      	bne.n	800782e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8007828:	2301      	movs	r3, #1
 800782a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800782e:	4b56      	ldr	r3, [pc, #344]	@ (8007988 <HAL_RCC_OscConfig+0xccc>)
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	4a55      	ldr	r2, [pc, #340]	@ (8007988 <HAL_RCC_OscConfig+0xccc>)
 8007834:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007838:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800783a:	4b52      	ldr	r3, [pc, #328]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 800783c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800783e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007842:	f023 0303 	bic.w	r3, r3, #3
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800784e:	3a01      	subs	r2, #1
 8007850:	0212      	lsls	r2, r2, #8
 8007852:	4311      	orrs	r1, r2
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007858:	430a      	orrs	r2, r1
 800785a:	494a      	ldr	r1, [pc, #296]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 800785c:	4313      	orrs	r3, r2
 800785e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007860:	4b48      	ldr	r3, [pc, #288]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 8007862:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007864:	4b49      	ldr	r3, [pc, #292]	@ (800798c <HAL_RCC_OscConfig+0xcd0>)
 8007866:	4013      	ands	r3, r2
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800786c:	3a01      	subs	r2, #1
 800786e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007876:	3a01      	subs	r2, #1
 8007878:	0252      	lsls	r2, r2, #9
 800787a:	b292      	uxth	r2, r2
 800787c:	4311      	orrs	r1, r2
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007882:	3a01      	subs	r2, #1
 8007884:	0412      	lsls	r2, r2, #16
 8007886:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800788a:	4311      	orrs	r1, r2
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007890:	3a01      	subs	r2, #1
 8007892:	0612      	lsls	r2, r2, #24
 8007894:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007898:	430a      	orrs	r2, r1
 800789a:	493a      	ldr	r1, [pc, #232]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 800789c:	4313      	orrs	r3, r2
 800789e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80078a0:	4b38      	ldr	r3, [pc, #224]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 80078a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a4:	4a37      	ldr	r2, [pc, #220]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 80078a6:	f023 0310 	bic.w	r3, r3, #16
 80078aa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078b0:	4a34      	ldr	r2, [pc, #208]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80078b6:	4b33      	ldr	r3, [pc, #204]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 80078b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ba:	4a32      	ldr	r2, [pc, #200]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 80078bc:	f043 0310 	orr.w	r3, r3, #16
 80078c0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80078c2:	4b30      	ldr	r3, [pc, #192]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 80078c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c6:	f023 020c 	bic.w	r2, r3, #12
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ce:	492d      	ldr	r1, [pc, #180]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80078d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d105      	bne.n	80078e8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80078dc:	4b2a      	ldr	r3, [pc, #168]	@ (8007988 <HAL_RCC_OscConfig+0xccc>)
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	4a29      	ldr	r2, [pc, #164]	@ (8007988 <HAL_RCC_OscConfig+0xccc>)
 80078e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078e6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80078e8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d107      	bne.n	8007900 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80078f0:	4b24      	ldr	r3, [pc, #144]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 80078f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078f6:	4a23      	ldr	r2, [pc, #140]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 80078f8:	f023 0304 	bic.w	r3, r3, #4
 80078fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007900:	4b20      	ldr	r3, [pc, #128]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 8007902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007904:	4a1f      	ldr	r2, [pc, #124]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 8007906:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800790a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800790c:	4b1d      	ldr	r3, [pc, #116]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a1c      	ldr	r2, [pc, #112]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 8007912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007916:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007918:	f7fb fb30 	bl	8002f7c <HAL_GetTick>
 800791c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800791e:	e008      	b.n	8007932 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007920:	f7fb fb2c 	bl	8002f7c <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d901      	bls.n	8007932 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e099      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007932:	4b14      	ldr	r3, [pc, #80]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0f0      	beq.n	8007920 <HAL_RCC_OscConfig+0xc64>
 800793e:	e091      	b.n	8007a64 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007940:	4b10      	ldr	r3, [pc, #64]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a0f      	ldr	r2, [pc, #60]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 8007946:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800794a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800794c:	f7fb fb16 	bl	8002f7c <HAL_GetTick>
 8007950:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007952:	e008      	b.n	8007966 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007954:	f7fb fb12 	bl	8002f7c <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	2b02      	cmp	r3, #2
 8007960:	d901      	bls.n	8007966 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e07f      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007966:	4b07      	ldr	r3, [pc, #28]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1f0      	bne.n	8007954 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007972:	4b04      	ldr	r3, [pc, #16]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 8007974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007976:	4a03      	ldr	r2, [pc, #12]	@ (8007984 <HAL_RCC_OscConfig+0xcc8>)
 8007978:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800797c:	f023 0303 	bic.w	r3, r3, #3
 8007980:	6293      	str	r3, [r2, #40]	@ 0x28
 8007982:	e06f      	b.n	8007a64 <HAL_RCC_OscConfig+0xda8>
 8007984:	46020c00 	.word	0x46020c00
 8007988:	46020800 	.word	0x46020800
 800798c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007990:	4b37      	ldr	r3, [pc, #220]	@ (8007a70 <HAL_RCC_OscConfig+0xdb4>)
 8007992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007994:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007996:	4b36      	ldr	r3, [pc, #216]	@ (8007a70 <HAL_RCC_OscConfig+0xdb4>)
 8007998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800799a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d039      	beq.n	8007a18 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	f003 0203 	and.w	r2, r3, #3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d132      	bne.n	8007a18 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	0a1b      	lsrs	r3, r3, #8
 80079b6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079be:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d129      	bne.n	8007a18 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d122      	bne.n	8007a18 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079dc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80079de:	429a      	cmp	r2, r3
 80079e0:	d11a      	bne.n	8007a18 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	0a5b      	lsrs	r3, r3, #9
 80079e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d111      	bne.n	8007a18 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	0c1b      	lsrs	r3, r3, #16
 80079f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a00:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d108      	bne.n	8007a18 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	0e1b      	lsrs	r3, r3, #24
 8007a0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a12:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d001      	beq.n	8007a1c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e024      	b.n	8007a66 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007a1c:	4b14      	ldr	r3, [pc, #80]	@ (8007a70 <HAL_RCC_OscConfig+0xdb4>)
 8007a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a20:	08db      	lsrs	r3, r3, #3
 8007a22:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d01a      	beq.n	8007a64 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007a2e:	4b10      	ldr	r3, [pc, #64]	@ (8007a70 <HAL_RCC_OscConfig+0xdb4>)
 8007a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a32:	4a0f      	ldr	r2, [pc, #60]	@ (8007a70 <HAL_RCC_OscConfig+0xdb4>)
 8007a34:	f023 0310 	bic.w	r3, r3, #16
 8007a38:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a3a:	f7fb fa9f 	bl	8002f7c <HAL_GetTick>
 8007a3e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8007a40:	bf00      	nop
 8007a42:	f7fb fa9b 	bl	8002f7c <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d0f9      	beq.n	8007a42 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a52:	4a07      	ldr	r2, [pc, #28]	@ (8007a70 <HAL_RCC_OscConfig+0xdb4>)
 8007a54:	00db      	lsls	r3, r3, #3
 8007a56:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007a58:	4b05      	ldr	r3, [pc, #20]	@ (8007a70 <HAL_RCC_OscConfig+0xdb4>)
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a5c:	4a04      	ldr	r2, [pc, #16]	@ (8007a70 <HAL_RCC_OscConfig+0xdb4>)
 8007a5e:	f043 0310 	orr.w	r3, r3, #16
 8007a62:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3738      	adds	r7, #56	@ 0x38
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	46020c00 	.word	0x46020c00

08007a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e1d9      	b.n	8007e3c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a88:	4b9b      	ldr	r3, [pc, #620]	@ (8007cf8 <HAL_RCC_ClockConfig+0x284>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 030f 	and.w	r3, r3, #15
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d910      	bls.n	8007ab8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a96:	4b98      	ldr	r3, [pc, #608]	@ (8007cf8 <HAL_RCC_ClockConfig+0x284>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f023 020f 	bic.w	r2, r3, #15
 8007a9e:	4996      	ldr	r1, [pc, #600]	@ (8007cf8 <HAL_RCC_ClockConfig+0x284>)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aa6:	4b94      	ldr	r3, [pc, #592]	@ (8007cf8 <HAL_RCC_ClockConfig+0x284>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 030f 	and.w	r3, r3, #15
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d001      	beq.n	8007ab8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e1c1      	b.n	8007e3c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0310 	and.w	r3, r3, #16
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d010      	beq.n	8007ae6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	695a      	ldr	r2, [r3, #20]
 8007ac8:	4b8c      	ldr	r3, [pc, #560]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007acc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d908      	bls.n	8007ae6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007ad4:	4b89      	ldr	r3, [pc, #548]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	4986      	ldr	r1, [pc, #536]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0308 	and.w	r3, r3, #8
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d012      	beq.n	8007b18 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691a      	ldr	r2, [r3, #16]
 8007af6:	4b81      	ldr	r3, [pc, #516]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	091b      	lsrs	r3, r3, #4
 8007afc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d909      	bls.n	8007b18 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007b04:	4b7d      	ldr	r3, [pc, #500]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007b06:	6a1b      	ldr	r3, [r3, #32]
 8007b08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	011b      	lsls	r3, r3, #4
 8007b12:	497a      	ldr	r1, [pc, #488]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0304 	and.w	r3, r3, #4
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d010      	beq.n	8007b46 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68da      	ldr	r2, [r3, #12]
 8007b28:	4b74      	ldr	r3, [pc, #464]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d908      	bls.n	8007b46 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007b34:	4b71      	ldr	r3, [pc, #452]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007b36:	6a1b      	ldr	r3, [r3, #32]
 8007b38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	496e      	ldr	r1, [pc, #440]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d010      	beq.n	8007b74 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689a      	ldr	r2, [r3, #8]
 8007b56:	4b69      	ldr	r3, [pc, #420]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	f003 030f 	and.w	r3, r3, #15
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d908      	bls.n	8007b74 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007b62:	4b66      	ldr	r3, [pc, #408]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	f023 020f 	bic.w	r2, r3, #15
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	4963      	ldr	r1, [pc, #396]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 80d2 	beq.w	8007d26 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8007b82:	2300      	movs	r3, #0
 8007b84:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d143      	bne.n	8007c16 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b8e:	4b5b      	ldr	r3, [pc, #364]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b94:	f003 0304 	and.w	r3, r3, #4
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d110      	bne.n	8007bbe <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007b9c:	4b57      	ldr	r3, [pc, #348]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ba2:	4a56      	ldr	r2, [pc, #344]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007ba4:	f043 0304 	orr.w	r3, r3, #4
 8007ba8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007bac:	4b53      	ldr	r3, [pc, #332]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bb2:	f003 0304 	and.w	r3, r3, #4
 8007bb6:	60bb      	str	r3, [r7, #8]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007bbe:	f7fb f9dd 	bl	8002f7c <HAL_GetTick>
 8007bc2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007bc4:	4b4e      	ldr	r3, [pc, #312]	@ (8007d00 <HAL_RCC_ClockConfig+0x28c>)
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00f      	beq.n	8007bf0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007bd0:	e008      	b.n	8007be4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8007bd2:	f7fb f9d3 	bl	8002f7c <HAL_GetTick>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d901      	bls.n	8007be4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e12b      	b.n	8007e3c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007be4:	4b46      	ldr	r3, [pc, #280]	@ (8007d00 <HAL_RCC_ClockConfig+0x28c>)
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d0f0      	beq.n	8007bd2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d107      	bne.n	8007c06 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007bf6:	4b41      	ldr	r3, [pc, #260]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bfc:	4a3f      	ldr	r2, [pc, #252]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007bfe:	f023 0304 	bic.w	r3, r3, #4
 8007c02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007c06:	4b3d      	ldr	r3, [pc, #244]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d121      	bne.n	8007c56 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e112      	b.n	8007e3c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d107      	bne.n	8007c2e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c1e:	4b37      	ldr	r3, [pc, #220]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d115      	bne.n	8007c56 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e106      	b.n	8007e3c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d107      	bne.n	8007c46 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007c36:	4b31      	ldr	r3, [pc, #196]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0304 	and.w	r3, r3, #4
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d109      	bne.n	8007c56 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e0fa      	b.n	8007e3c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c46:	4b2d      	ldr	r3, [pc, #180]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e0f2      	b.n	8007e3c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8007c56:	4b29      	ldr	r3, [pc, #164]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	f023 0203 	bic.w	r2, r3, #3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	4926      	ldr	r1, [pc, #152]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8007c68:	f7fb f988 	bl	8002f7c <HAL_GetTick>
 8007c6c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d112      	bne.n	8007c9c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c76:	e00a      	b.n	8007c8e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c78:	f7fb f980 	bl	8002f7c <HAL_GetTick>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d901      	bls.n	8007c8e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e0d6      	b.n	8007e3c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	f003 030c 	and.w	r3, r3, #12
 8007c96:	2b0c      	cmp	r3, #12
 8007c98:	d1ee      	bne.n	8007c78 <HAL_RCC_ClockConfig+0x204>
 8007c9a:	e044      	b.n	8007d26 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d112      	bne.n	8007cca <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007ca4:	e00a      	b.n	8007cbc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ca6:	f7fb f969 	bl	8002f7c <HAL_GetTick>
 8007caa:	4602      	mov	r2, r0
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d901      	bls.n	8007cbc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e0bf      	b.n	8007e3c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	f003 030c 	and.w	r3, r3, #12
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	d1ee      	bne.n	8007ca6 <HAL_RCC_ClockConfig+0x232>
 8007cc8:	e02d      	b.n	8007d26 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d123      	bne.n	8007d1a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007cd2:	e00a      	b.n	8007cea <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cd4:	f7fb f952 	bl	8002f7c <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d901      	bls.n	8007cea <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e0a8      	b.n	8007e3c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007cea:	4b04      	ldr	r3, [pc, #16]	@ (8007cfc <HAL_RCC_ClockConfig+0x288>)
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	f003 030c 	and.w	r3, r3, #12
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1ee      	bne.n	8007cd4 <HAL_RCC_ClockConfig+0x260>
 8007cf6:	e016      	b.n	8007d26 <HAL_RCC_ClockConfig+0x2b2>
 8007cf8:	40022000 	.word	0x40022000
 8007cfc:	46020c00 	.word	0x46020c00
 8007d00:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d04:	f7fb f93a 	bl	8002f7c <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d901      	bls.n	8007d1a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e090      	b.n	8007e3c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8007e44 <HAL_RCC_ClockConfig+0x3d0>)
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	f003 030c 	and.w	r3, r3, #12
 8007d22:	2b04      	cmp	r3, #4
 8007d24:	d1ee      	bne.n	8007d04 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d010      	beq.n	8007d54 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	689a      	ldr	r2, [r3, #8]
 8007d36:	4b43      	ldr	r3, [pc, #268]	@ (8007e44 <HAL_RCC_ClockConfig+0x3d0>)
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	f003 030f 	and.w	r3, r3, #15
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d208      	bcs.n	8007d54 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007d42:	4b40      	ldr	r3, [pc, #256]	@ (8007e44 <HAL_RCC_ClockConfig+0x3d0>)
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	f023 020f 	bic.w	r2, r3, #15
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	493d      	ldr	r1, [pc, #244]	@ (8007e44 <HAL_RCC_ClockConfig+0x3d0>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d54:	4b3c      	ldr	r3, [pc, #240]	@ (8007e48 <HAL_RCC_ClockConfig+0x3d4>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 030f 	and.w	r3, r3, #15
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d210      	bcs.n	8007d84 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d62:	4b39      	ldr	r3, [pc, #228]	@ (8007e48 <HAL_RCC_ClockConfig+0x3d4>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f023 020f 	bic.w	r2, r3, #15
 8007d6a:	4937      	ldr	r1, [pc, #220]	@ (8007e48 <HAL_RCC_ClockConfig+0x3d4>)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d72:	4b35      	ldr	r3, [pc, #212]	@ (8007e48 <HAL_RCC_ClockConfig+0x3d4>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 030f 	and.w	r3, r3, #15
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d001      	beq.n	8007d84 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e05b      	b.n	8007e3c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d010      	beq.n	8007db2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	4b2b      	ldr	r3, [pc, #172]	@ (8007e44 <HAL_RCC_ClockConfig+0x3d0>)
 8007d96:	6a1b      	ldr	r3, [r3, #32]
 8007d98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d208      	bcs.n	8007db2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007da0:	4b28      	ldr	r3, [pc, #160]	@ (8007e44 <HAL_RCC_ClockConfig+0x3d0>)
 8007da2:	6a1b      	ldr	r3, [r3, #32]
 8007da4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	4925      	ldr	r1, [pc, #148]	@ (8007e44 <HAL_RCC_ClockConfig+0x3d0>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0308 	and.w	r3, r3, #8
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d012      	beq.n	8007de4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	691a      	ldr	r2, [r3, #16]
 8007dc2:	4b20      	ldr	r3, [pc, #128]	@ (8007e44 <HAL_RCC_ClockConfig+0x3d0>)
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	091b      	lsrs	r3, r3, #4
 8007dc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d209      	bcs.n	8007de4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8007e44 <HAL_RCC_ClockConfig+0x3d0>)
 8007dd2:	6a1b      	ldr	r3, [r3, #32]
 8007dd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	011b      	lsls	r3, r3, #4
 8007dde:	4919      	ldr	r1, [pc, #100]	@ (8007e44 <HAL_RCC_ClockConfig+0x3d0>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0310 	and.w	r3, r3, #16
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d010      	beq.n	8007e12 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	695a      	ldr	r2, [r3, #20]
 8007df4:	4b13      	ldr	r3, [pc, #76]	@ (8007e44 <HAL_RCC_ClockConfig+0x3d0>)
 8007df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d208      	bcs.n	8007e12 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007e00:	4b10      	ldr	r3, [pc, #64]	@ (8007e44 <HAL_RCC_ClockConfig+0x3d0>)
 8007e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	490d      	ldr	r1, [pc, #52]	@ (8007e44 <HAL_RCC_ClockConfig+0x3d0>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007e12:	f000 f821 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 8007e16:	4602      	mov	r2, r0
 8007e18:	4b0a      	ldr	r3, [pc, #40]	@ (8007e44 <HAL_RCC_ClockConfig+0x3d0>)
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	f003 030f 	and.w	r3, r3, #15
 8007e20:	490a      	ldr	r1, [pc, #40]	@ (8007e4c <HAL_RCC_ClockConfig+0x3d8>)
 8007e22:	5ccb      	ldrb	r3, [r1, r3]
 8007e24:	fa22 f303 	lsr.w	r3, r2, r3
 8007e28:	4a09      	ldr	r2, [pc, #36]	@ (8007e50 <HAL_RCC_ClockConfig+0x3dc>)
 8007e2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007e2c:	4b09      	ldr	r3, [pc, #36]	@ (8007e54 <HAL_RCC_ClockConfig+0x3e0>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7fa ff17 	bl	8002c64 <HAL_InitTick>
 8007e36:	4603      	mov	r3, r0
 8007e38:	73fb      	strb	r3, [r7, #15]

  return status;
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	46020c00 	.word	0x46020c00
 8007e48:	40022000 	.word	0x40022000
 8007e4c:	0800cd70 	.word	0x0800cd70
 8007e50:	20000d00 	.word	0x20000d00
 8007e54:	20000d04 	.word	0x20000d04

08007e58 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b08b      	sub	sp, #44	@ 0x2c
 8007e5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e66:	4b78      	ldr	r3, [pc, #480]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	f003 030c 	and.w	r3, r3, #12
 8007e6e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e70:	4b75      	ldr	r3, [pc, #468]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e74:	f003 0303 	and.w	r3, r3, #3
 8007e78:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d005      	beq.n	8007e8c <HAL_RCC_GetSysClockFreq+0x34>
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	2b0c      	cmp	r3, #12
 8007e84:	d121      	bne.n	8007eca <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d11e      	bne.n	8007eca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8007e8c:	4b6e      	ldr	r3, [pc, #440]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d107      	bne.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8007e98:	4b6b      	ldr	r3, [pc, #428]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007e9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e9e:	0b1b      	lsrs	r3, r3, #12
 8007ea0:	f003 030f 	and.w	r3, r3, #15
 8007ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ea6:	e005      	b.n	8007eb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8007ea8:	4b67      	ldr	r3, [pc, #412]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	0f1b      	lsrs	r3, r3, #28
 8007eae:	f003 030f 	and.w	r3, r3, #15
 8007eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007eb4:	4a65      	ldr	r2, [pc, #404]	@ (800804c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ebc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d110      	bne.n	8007ee6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007ec8:	e00d      	b.n	8007ee6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007eca:	4b5f      	ldr	r3, [pc, #380]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	f003 030c 	and.w	r3, r3, #12
 8007ed2:	2b04      	cmp	r3, #4
 8007ed4:	d102      	bne.n	8007edc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007ed6:	4b5e      	ldr	r3, [pc, #376]	@ (8008050 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007ed8:	623b      	str	r3, [r7, #32]
 8007eda:	e004      	b.n	8007ee6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	2b08      	cmp	r3, #8
 8007ee0:	d101      	bne.n	8007ee6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007ee2:	4b5b      	ldr	r3, [pc, #364]	@ (8008050 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007ee4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	2b0c      	cmp	r3, #12
 8007eea:	f040 80a5 	bne.w	8008038 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007eee:	4b56      	ldr	r3, [pc, #344]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007ef8:	4b53      	ldr	r3, [pc, #332]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007efc:	0a1b      	lsrs	r3, r3, #8
 8007efe:	f003 030f 	and.w	r3, r3, #15
 8007f02:	3301      	adds	r3, #1
 8007f04:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007f06:	4b50      	ldr	r3, [pc, #320]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0a:	091b      	lsrs	r3, r3, #4
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007f12:	4b4d      	ldr	r3, [pc, #308]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f16:	08db      	lsrs	r3, r3, #3
 8007f18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	fb02 f303 	mul.w	r3, r2, r3
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d003      	beq.n	8007f3c <HAL_RCC_GetSysClockFreq+0xe4>
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d022      	beq.n	8007f80 <HAL_RCC_GetSysClockFreq+0x128>
 8007f3a:	e043      	b.n	8007fc4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	ee07 3a90 	vmov	s15, r3
 8007f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f46:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8008054 <HAL_RCC_GetSysClockFreq+0x1fc>
 8007f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f4e:	4b3e      	ldr	r3, [pc, #248]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f56:	ee07 3a90 	vmov	s15, r3
 8007f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007f5e:	ed97 6a01 	vldr	s12, [r7, #4]
 8007f62:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8008058 <HAL_RCC_GetSysClockFreq+0x200>
 8007f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f7e:	e046      	b.n	800800e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	ee07 3a90 	vmov	s15, r3
 8007f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f8a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8008054 <HAL_RCC_GetSysClockFreq+0x1fc>
 8007f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f92:	4b2d      	ldr	r3, [pc, #180]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9a:	ee07 3a90 	vmov	s15, r3
 8007f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007fa2:	ed97 6a01 	vldr	s12, [r7, #4]
 8007fa6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8008058 <HAL_RCC_GetSysClockFreq+0x200>
 8007faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fc2:	e024      	b.n	800800e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc6:	ee07 3a90 	vmov	s15, r3
 8007fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	ee07 3a90 	vmov	s15, r3
 8007fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe4:	ee07 3a90 	vmov	s15, r3
 8007fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007fec:	ed97 6a01 	vldr	s12, [r7, #4]
 8007ff0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8008058 <HAL_RCC_GetSysClockFreq+0x200>
 8007ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007ffc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008000:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008008:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800800c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800800e:	4b0e      	ldr	r3, [pc, #56]	@ (8008048 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008012:	0e1b      	lsrs	r3, r3, #24
 8008014:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008018:	3301      	adds	r3, #1
 800801a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	ee07 3a90 	vmov	s15, r3
 8008022:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008026:	edd7 6a07 	vldr	s13, [r7, #28]
 800802a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800802e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008032:	ee17 3a90 	vmov	r3, s15
 8008036:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8008038:	6a3b      	ldr	r3, [r7, #32]
}
 800803a:	4618      	mov	r0, r3
 800803c:	372c      	adds	r7, #44	@ 0x2c
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	46020c00 	.word	0x46020c00
 800804c:	0800cd88 	.word	0x0800cd88
 8008050:	00f42400 	.word	0x00f42400
 8008054:	4b742400 	.word	0x4b742400
 8008058:	46000000 	.word	0x46000000

0800805c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008060:	f7ff fefa 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 8008064:	4602      	mov	r2, r0
 8008066:	4b07      	ldr	r3, [pc, #28]	@ (8008084 <HAL_RCC_GetHCLKFreq+0x28>)
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	f003 030f 	and.w	r3, r3, #15
 800806e:	4906      	ldr	r1, [pc, #24]	@ (8008088 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008070:	5ccb      	ldrb	r3, [r1, r3]
 8008072:	fa22 f303 	lsr.w	r3, r2, r3
 8008076:	4a05      	ldr	r2, [pc, #20]	@ (800808c <HAL_RCC_GetHCLKFreq+0x30>)
 8008078:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800807a:	4b04      	ldr	r3, [pc, #16]	@ (800808c <HAL_RCC_GetHCLKFreq+0x30>)
 800807c:	681b      	ldr	r3, [r3, #0]
}
 800807e:	4618      	mov	r0, r3
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	46020c00 	.word	0x46020c00
 8008088:	0800cd70 	.word	0x0800cd70
 800808c:	20000d00 	.word	0x20000d00

08008090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8008094:	f7ff ffe2 	bl	800805c <HAL_RCC_GetHCLKFreq>
 8008098:	4602      	mov	r2, r0
 800809a:	4b05      	ldr	r3, [pc, #20]	@ (80080b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	091b      	lsrs	r3, r3, #4
 80080a0:	f003 0307 	and.w	r3, r3, #7
 80080a4:	4903      	ldr	r1, [pc, #12]	@ (80080b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080a6:	5ccb      	ldrb	r3, [r1, r3]
 80080a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	46020c00 	.word	0x46020c00
 80080b4:	0800cd80 	.word	0x0800cd80

080080b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80080bc:	f7ff ffce 	bl	800805c <HAL_RCC_GetHCLKFreq>
 80080c0:	4602      	mov	r2, r0
 80080c2:	4b05      	ldr	r3, [pc, #20]	@ (80080d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	0a1b      	lsrs	r3, r3, #8
 80080c8:	f003 0307 	and.w	r3, r3, #7
 80080cc:	4903      	ldr	r1, [pc, #12]	@ (80080dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80080ce:	5ccb      	ldrb	r3, [r1, r3]
 80080d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	46020c00 	.word	0x46020c00
 80080dc:	0800cd80 	.word	0x0800cd80

080080e0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80080e4:	f7ff ffba 	bl	800805c <HAL_RCC_GetHCLKFreq>
 80080e8:	4602      	mov	r2, r0
 80080ea:	4b05      	ldr	r3, [pc, #20]	@ (8008100 <HAL_RCC_GetPCLK3Freq+0x20>)
 80080ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ee:	091b      	lsrs	r3, r3, #4
 80080f0:	f003 0307 	and.w	r3, r3, #7
 80080f4:	4903      	ldr	r1, [pc, #12]	@ (8008104 <HAL_RCC_GetPCLK3Freq+0x24>)
 80080f6:	5ccb      	ldrb	r3, [r1, r3]
 80080f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	46020c00 	.word	0x46020c00
 8008104:	0800cd80 	.word	0x0800cd80

08008108 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	221f      	movs	r2, #31
 8008116:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8008118:	4b15      	ldr	r3, [pc, #84]	@ (8008170 <HAL_RCC_GetClockConfig+0x68>)
 800811a:	69db      	ldr	r3, [r3, #28]
 800811c:	f003 0203 	and.w	r2, r3, #3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8008124:	4b12      	ldr	r3, [pc, #72]	@ (8008170 <HAL_RCC_GetClockConfig+0x68>)
 8008126:	6a1b      	ldr	r3, [r3, #32]
 8008128:	f003 020f 	and.w	r2, r3, #15
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8008130:	4b0f      	ldr	r3, [pc, #60]	@ (8008170 <HAL_RCC_GetClockConfig+0x68>)
 8008132:	6a1b      	ldr	r3, [r3, #32]
 8008134:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800813c:	4b0c      	ldr	r3, [pc, #48]	@ (8008170 <HAL_RCC_GetClockConfig+0x68>)
 800813e:	6a1b      	ldr	r3, [r3, #32]
 8008140:	091b      	lsrs	r3, r3, #4
 8008142:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800814a:	4b09      	ldr	r3, [pc, #36]	@ (8008170 <HAL_RCC_GetClockConfig+0x68>)
 800814c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800814e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008156:	4b07      	ldr	r3, [pc, #28]	@ (8008174 <HAL_RCC_GetClockConfig+0x6c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 020f 	and.w	r2, r3, #15
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	601a      	str	r2, [r3, #0]
}
 8008162:	bf00      	nop
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	46020c00 	.word	0x46020c00
 8008174:	40022000 	.word	0x40022000

08008178 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008178:	b480      	push	{r7}
 800817a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 800817c:	4b05      	ldr	r3, [pc, #20]	@ (8008194 <HAL_RCC_EnableCSS+0x1c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a04      	ldr	r2, [pc, #16]	@ (8008194 <HAL_RCC_EnableCSS+0x1c>)
 8008182:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008186:	6013      	str	r3, [r2, #0]
}
 8008188:	bf00      	nop
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	46020c00 	.word	0x46020c00

08008198 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800819c:	4b07      	ldr	r3, [pc, #28]	@ (80081bc <HAL_RCC_NMI_IRQHandler+0x24>)
 800819e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081a8:	d105      	bne.n	80081b6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80081aa:	f000 f809 	bl	80081c0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80081ae:	4b03      	ldr	r3, [pc, #12]	@ (80081bc <HAL_RCC_NMI_IRQHandler+0x24>)
 80081b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80081b4:	659a      	str	r2, [r3, #88]	@ 0x58
  }
}
 80081b6:	bf00      	nop
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	46020c00 	.word	0x46020c00

080081c0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80081c0:	b480      	push	{r7}
 80081c2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80081c4:	bf00      	nop
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
	...

080081d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80081d8:	4b3e      	ldr	r3, [pc, #248]	@ (80082d4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80081da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081de:	f003 0304 	and.w	r3, r3, #4
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d003      	beq.n	80081ee <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80081e6:	f7fe fcfb 	bl	8006be0 <HAL_PWREx_GetVoltageRange>
 80081ea:	6178      	str	r0, [r7, #20]
 80081ec:	e019      	b.n	8008222 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80081ee:	4b39      	ldr	r3, [pc, #228]	@ (80082d4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80081f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081f4:	4a37      	ldr	r2, [pc, #220]	@ (80082d4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80081f6:	f043 0304 	orr.w	r3, r3, #4
 80081fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80081fe:	4b35      	ldr	r3, [pc, #212]	@ (80082d4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008200:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	60fb      	str	r3, [r7, #12]
 800820a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800820c:	f7fe fce8 	bl	8006be0 <HAL_PWREx_GetVoltageRange>
 8008210:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008212:	4b30      	ldr	r3, [pc, #192]	@ (80082d4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008214:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008218:	4a2e      	ldr	r2, [pc, #184]	@ (80082d4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800821a:	f023 0304 	bic.w	r3, r3, #4
 800821e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008228:	d003      	beq.n	8008232 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008230:	d109      	bne.n	8008246 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008238:	d202      	bcs.n	8008240 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800823a:	2301      	movs	r3, #1
 800823c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800823e:	e033      	b.n	80082a8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8008240:	2300      	movs	r3, #0
 8008242:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008244:	e030      	b.n	80082a8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800824c:	d208      	bcs.n	8008260 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008254:	d102      	bne.n	800825c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8008256:	2303      	movs	r3, #3
 8008258:	613b      	str	r3, [r7, #16]
 800825a:	e025      	b.n	80082a8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e035      	b.n	80082cc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008266:	d90f      	bls.n	8008288 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d109      	bne.n	8008282 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008274:	d902      	bls.n	800827c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8008276:	2300      	movs	r3, #0
 8008278:	613b      	str	r3, [r7, #16]
 800827a:	e015      	b.n	80082a8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800827c:	2301      	movs	r3, #1
 800827e:	613b      	str	r3, [r7, #16]
 8008280:	e012      	b.n	80082a8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8008282:	2300      	movs	r3, #0
 8008284:	613b      	str	r3, [r7, #16]
 8008286:	e00f      	b.n	80082a8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800828e:	d109      	bne.n	80082a4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008296:	d102      	bne.n	800829e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8008298:	2301      	movs	r3, #1
 800829a:	613b      	str	r3, [r7, #16]
 800829c:	e004      	b.n	80082a8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800829e:	2302      	movs	r3, #2
 80082a0:	613b      	str	r3, [r7, #16]
 80082a2:	e001      	b.n	80082a8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80082a4:	2301      	movs	r3, #1
 80082a6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80082a8:	4b0b      	ldr	r3, [pc, #44]	@ (80082d8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f023 020f 	bic.w	r2, r3, #15
 80082b0:	4909      	ldr	r1, [pc, #36]	@ (80082d8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80082b8:	4b07      	ldr	r3, [pc, #28]	@ (80082d8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 030f 	and.w	r3, r3, #15
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d001      	beq.n	80082ca <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e000      	b.n	80082cc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3718      	adds	r7, #24
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	46020c00 	.word	0x46020c00
 80082d8:	40022000 	.word	0x40022000

080082dc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80082dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082e0:	b0c8      	sub	sp, #288	@ 0x120
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80082e8:	2300      	movs	r3, #0
 80082ea:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80082ee:	2300      	movs	r3, #0
 80082f0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80082f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fc:	f002 0401 	and.w	r4, r2, #1
 8008300:	2500      	movs	r5, #0
 8008302:	ea54 0305 	orrs.w	r3, r4, r5
 8008306:	d00b      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008308:	4bd5      	ldr	r3, [pc, #852]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800830a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800830e:	f023 0103 	bic.w	r1, r3, #3
 8008312:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008318:	4ad1      	ldr	r2, [pc, #836]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800831a:	430b      	orrs	r3, r1
 800831c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008320:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008328:	f002 0802 	and.w	r8, r2, #2
 800832c:	f04f 0900 	mov.w	r9, #0
 8008330:	ea58 0309 	orrs.w	r3, r8, r9
 8008334:	d00b      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8008336:	4bca      	ldr	r3, [pc, #808]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800833c:	f023 010c 	bic.w	r1, r3, #12
 8008340:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008346:	4ac6      	ldr	r2, [pc, #792]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008348:	430b      	orrs	r3, r1
 800834a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800834e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008356:	f002 0a04 	and.w	sl, r2, #4
 800835a:	f04f 0b00 	mov.w	fp, #0
 800835e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008362:	d00b      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8008364:	4bbe      	ldr	r3, [pc, #760]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800836a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800836e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008374:	4aba      	ldr	r2, [pc, #744]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008376:	430b      	orrs	r3, r1
 8008378:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800837c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008384:	f002 0308 	and.w	r3, r2, #8
 8008388:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800838c:	2300      	movs	r3, #0
 800838e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008392:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008396:	460b      	mov	r3, r1
 8008398:	4313      	orrs	r3, r2
 800839a:	d00b      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800839c:	4bb0      	ldr	r3, [pc, #704]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800839e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80083a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083ac:	4aac      	ldr	r2, [pc, #688]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80083ae:	430b      	orrs	r3, r1
 80083b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80083b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	f002 0310 	and.w	r3, r2, #16
 80083c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80083c4:	2300      	movs	r3, #0
 80083c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80083ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80083ce:	460b      	mov	r3, r1
 80083d0:	4313      	orrs	r3, r2
 80083d2:	d00b      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80083d4:	4ba2      	ldr	r3, [pc, #648]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80083d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083e4:	4a9e      	ldr	r2, [pc, #632]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80083e6:	430b      	orrs	r3, r1
 80083e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80083ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80083f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80083fc:	2300      	movs	r3, #0
 80083fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008402:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008406:	460b      	mov	r3, r1
 8008408:	4313      	orrs	r3, r2
 800840a:	d00b      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800840c:	4b94      	ldr	r3, [pc, #592]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800840e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008412:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008416:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800841a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800841c:	4a90      	ldr	r2, [pc, #576]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800841e:	430b      	orrs	r3, r1
 8008420:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	f002 0320 	and.w	r3, r2, #32
 8008430:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008434:	2300      	movs	r3, #0
 8008436:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800843a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800843e:	460b      	mov	r3, r1
 8008440:	4313      	orrs	r3, r2
 8008442:	d00b      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008444:	4b86      	ldr	r3, [pc, #536]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800844a:	f023 0107 	bic.w	r1, r3, #7
 800844e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008452:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008454:	4a82      	ldr	r2, [pc, #520]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008456:	430b      	orrs	r3, r1
 8008458:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800845c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008464:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008468:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800846c:	2300      	movs	r3, #0
 800846e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008472:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008476:	460b      	mov	r3, r1
 8008478:	4313      	orrs	r3, r2
 800847a:	d00b      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800847c:	4b78      	ldr	r3, [pc, #480]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800847e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008482:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8008486:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800848a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800848c:	4a74      	ldr	r2, [pc, #464]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800848e:	430b      	orrs	r3, r1
 8008490:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80084a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80084a4:	2300      	movs	r3, #0
 80084a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80084aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80084ae:	460b      	mov	r3, r1
 80084b0:	4313      	orrs	r3, r2
 80084b2:	d00b      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80084b4:	4b6a      	ldr	r3, [pc, #424]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80084b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80084be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084c4:	4a66      	ldr	r2, [pc, #408]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80084c6:	430b      	orrs	r3, r1
 80084c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80084cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80084d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084dc:	2300      	movs	r3, #0
 80084de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80084e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4313      	orrs	r3, r2
 80084ea:	d00b      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80084ec:	4b5c      	ldr	r3, [pc, #368]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80084ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80084f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80084f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084fc:	4a58      	ldr	r2, [pc, #352]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80084fe:	430b      	orrs	r3, r1
 8008500:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008510:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008514:	2300      	movs	r3, #0
 8008516:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800851a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800851e:	460b      	mov	r3, r1
 8008520:	4313      	orrs	r3, r2
 8008522:	d00b      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008524:	4b4e      	ldr	r3, [pc, #312]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800852a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800852e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008532:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008534:	4a4a      	ldr	r2, [pc, #296]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008536:	430b      	orrs	r3, r1
 8008538:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800853c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008544:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008548:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800854c:	2300      	movs	r3, #0
 800854e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008552:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008556:	460b      	mov	r3, r1
 8008558:	4313      	orrs	r3, r2
 800855a:	d00b      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800855c:	4b40      	ldr	r3, [pc, #256]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800855e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008562:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8008566:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800856a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800856c:	4a3c      	ldr	r2, [pc, #240]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800856e:	430b      	orrs	r3, r1
 8008570:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8008574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008580:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008584:	2300      	movs	r3, #0
 8008586:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800858a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800858e:	460b      	mov	r3, r1
 8008590:	4313      	orrs	r3, r2
 8008592:	d00c      	beq.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8008594:	4b32      	ldr	r3, [pc, #200]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008596:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800859a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800859e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085a6:	4a2e      	ldr	r2, [pc, #184]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085a8:	430b      	orrs	r3, r1
 80085aa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80085ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b6:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80085ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80085be:	2300      	movs	r3, #0
 80085c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80085c4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80085c8:	460b      	mov	r3, r1
 80085ca:	4313      	orrs	r3, r2
 80085cc:	d00c      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80085ce:	4b24      	ldr	r3, [pc, #144]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80085d4:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80085d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085e0:	4a1f      	ldr	r2, [pc, #124]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085e2:	430b      	orrs	r3, r1
 80085e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80085e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80085f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80085f8:	2300      	movs	r3, #0
 80085fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80085fe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008602:	460b      	mov	r3, r1
 8008604:	4313      	orrs	r3, r2
 8008606:	d00c      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008608:	4b15      	ldr	r3, [pc, #84]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800860a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800860e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8008612:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800861a:	4a11      	ldr	r2, [pc, #68]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800861c:	430b      	orrs	r3, r1
 800861e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8008622:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800862e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008632:	2300      	movs	r3, #0
 8008634:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008638:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800863c:	460b      	mov	r3, r1
 800863e:	4313      	orrs	r3, r2
 8008640:	d010      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8008642:	4b07      	ldr	r3, [pc, #28]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008648:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800864c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008654:	4a02      	ldr	r2, [pc, #8]	@ (8008660 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008656:	430b      	orrs	r3, r1
 8008658:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800865c:	e002      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800865e:	bf00      	nop
 8008660:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008664:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008674:	2300      	movs	r3, #0
 8008676:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800867a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800867e:	460b      	mov	r3, r1
 8008680:	4313      	orrs	r3, r2
 8008682:	d04c      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8008684:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008688:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800868c:	2b80      	cmp	r3, #128	@ 0x80
 800868e:	d02d      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008690:	2b80      	cmp	r3, #128	@ 0x80
 8008692:	d827      	bhi.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008694:	2b60      	cmp	r3, #96	@ 0x60
 8008696:	d02b      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008698:	2b60      	cmp	r3, #96	@ 0x60
 800869a:	d823      	bhi.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800869c:	2b40      	cmp	r3, #64	@ 0x40
 800869e:	d006      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80086a0:	2b40      	cmp	r3, #64	@ 0x40
 80086a2:	d81f      	bhi.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d009      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80086a8:	2b20      	cmp	r3, #32
 80086aa:	d011      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80086ac:	e01a      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80086ae:	4bc0      	ldr	r3, [pc, #768]	@ (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80086b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b2:	4abf      	ldr	r2, [pc, #764]	@ (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80086b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086b8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80086ba:	e01a      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80086bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086c0:	3308      	adds	r3, #8
 80086c2:	4618      	mov	r0, r3
 80086c4:	f002 fce8 	bl	800b098 <RCCEx_PLL2_Config>
 80086c8:	4603      	mov	r3, r0
 80086ca:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80086ce:	e010      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80086d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086d4:	332c      	adds	r3, #44	@ 0x2c
 80086d6:	4618      	mov	r0, r3
 80086d8:	f002 fd76 	bl	800b1c8 <RCCEx_PLL3_Config>
 80086dc:	4603      	mov	r3, r0
 80086de:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80086e2:	e006      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80086ea:	e002      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80086ec:	bf00      	nop
 80086ee:	e000      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80086f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086f2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10d      	bne.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80086fa:	4bad      	ldr	r3, [pc, #692]	@ (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80086fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008700:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8008704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008708:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800870c:	4aa8      	ldr	r2, [pc, #672]	@ (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800870e:	430b      	orrs	r3, r1
 8008710:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008714:	e003      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008716:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800871a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800871e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008726:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800872a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800872e:	2300      	movs	r3, #0
 8008730:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008734:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008738:	460b      	mov	r3, r1
 800873a:	4313      	orrs	r3, r2
 800873c:	d053      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800873e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008742:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800874a:	d033      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800874c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008750:	d82c      	bhi.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008752:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008756:	d02f      	beq.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8008758:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800875c:	d826      	bhi.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800875e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008762:	d008      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8008764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008768:	d820      	bhi.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00a      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800876e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008772:	d011      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008774:	e01a      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008776:	4b8e      	ldr	r3, [pc, #568]	@ (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800877a:	4a8d      	ldr	r2, [pc, #564]	@ (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800877c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008780:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008782:	e01a      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008788:	3308      	adds	r3, #8
 800878a:	4618      	mov	r0, r3
 800878c:	f002 fc84 	bl	800b098 <RCCEx_PLL2_Config>
 8008790:	4603      	mov	r3, r0
 8008792:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008796:	e010      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800879c:	332c      	adds	r3, #44	@ 0x2c
 800879e:	4618      	mov	r0, r3
 80087a0:	f002 fd12 	bl	800b1c8 <RCCEx_PLL3_Config>
 80087a4:	4603      	mov	r3, r0
 80087a6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80087aa:	e006      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80087b2:	e002      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80087b4:	bf00      	nop
 80087b6:	e000      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80087b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087ba:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10d      	bne.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80087c2:	4b7b      	ldr	r3, [pc, #492]	@ (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80087c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80087c8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80087cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80087d4:	4a76      	ldr	r2, [pc, #472]	@ (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80087d6:	430b      	orrs	r3, r1
 80087d8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80087dc:	e003      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087de:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80087e2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80087e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80087f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80087f6:	2300      	movs	r3, #0
 80087f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80087fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008800:	460b      	mov	r3, r1
 8008802:	4313      	orrs	r3, r2
 8008804:	d046      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8008806:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800880a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800880e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008812:	d028      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008814:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008818:	d821      	bhi.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800881a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800881e:	d022      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008820:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008824:	d81b      	bhi.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008826:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800882a:	d01c      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800882c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008830:	d815      	bhi.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008836:	d008      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8008838:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800883c:	d80f      	bhi.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800883e:	2b00      	cmp	r3, #0
 8008840:	d011      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008846:	d00e      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008848:	e009      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800884a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800884e:	3308      	adds	r3, #8
 8008850:	4618      	mov	r0, r3
 8008852:	f002 fc21 	bl	800b098 <RCCEx_PLL2_Config>
 8008856:	4603      	mov	r3, r0
 8008858:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800885c:	e004      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008864:	e000      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8008866:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008868:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10d      	bne.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008870:	4b4f      	ldr	r3, [pc, #316]	@ (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008872:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008876:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800887a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800887e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008882:	4a4b      	ldr	r2, [pc, #300]	@ (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008884:	430b      	orrs	r3, r1
 8008886:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800888a:	e003      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800888c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008890:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8008894:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80088a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088a4:	2300      	movs	r3, #0
 80088a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088aa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80088ae:	460b      	mov	r3, r1
 80088b0:	4313      	orrs	r3, r2
 80088b2:	d03f      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80088b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088bc:	2b04      	cmp	r3, #4
 80088be:	d81e      	bhi.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x622>
 80088c0:	a201      	add	r2, pc, #4	@ (adr r2, 80088c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80088c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c6:	bf00      	nop
 80088c8:	08008907 	.word	0x08008907
 80088cc:	080088dd 	.word	0x080088dd
 80088d0:	080088eb 	.word	0x080088eb
 80088d4:	08008907 	.word	0x08008907
 80088d8:	08008907 	.word	0x08008907
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80088dc:	4b34      	ldr	r3, [pc, #208]	@ (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80088de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e0:	4a33      	ldr	r2, [pc, #204]	@ (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80088e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088e6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80088e8:	e00e      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80088ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088ee:	332c      	adds	r3, #44	@ 0x2c
 80088f0:	4618      	mov	r0, r3
 80088f2:	f002 fc69 	bl	800b1c8 <RCCEx_PLL3_Config>
 80088f6:	4603      	mov	r3, r0
 80088f8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80088fc:	e004      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008904:	e000      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 8008906:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008908:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10d      	bne.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8008910:	4b27      	ldr	r3, [pc, #156]	@ (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008912:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008916:	f023 0107 	bic.w	r1, r3, #7
 800891a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800891e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008922:	4a23      	ldr	r2, [pc, #140]	@ (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008924:	430b      	orrs	r3, r1
 8008926:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800892a:	e003      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800892c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008930:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8008934:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008940:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008942:	2300      	movs	r3, #0
 8008944:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008946:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800894a:	460b      	mov	r3, r1
 800894c:	4313      	orrs	r3, r2
 800894e:	d04c      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8008950:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008954:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008958:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800895c:	d02a      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800895e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008962:	d821      	bhi.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8008964:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008968:	d026      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800896a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800896e:	d81b      	bhi.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8008970:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008974:	d00e      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8008976:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800897a:	d815      	bhi.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800897c:	2b00      	cmp	r3, #0
 800897e:	d01d      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8008980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008984:	d110      	bne.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008986:	4b0a      	ldr	r3, [pc, #40]	@ (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800898a:	4a09      	ldr	r2, [pc, #36]	@ (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800898c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008990:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008992:	e014      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008994:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008998:	332c      	adds	r3, #44	@ 0x2c
 800899a:	4618      	mov	r0, r3
 800899c:	f002 fc14 	bl	800b1c8 <RCCEx_PLL3_Config>
 80089a0:	4603      	mov	r3, r0
 80089a2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80089a6:	e00a      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80089ae:	e006      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80089b0:	46020c00 	.word	0x46020c00
        break;
 80089b4:	bf00      	nop
 80089b6:	e002      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 80089b8:	bf00      	nop
 80089ba:	e000      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 80089bc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80089be:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10d      	bne.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80089c6:	4baf      	ldr	r3, [pc, #700]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80089c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80089cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80089d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089d8:	4aaa      	ldr	r2, [pc, #680]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80089da:	430b      	orrs	r3, r1
 80089dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80089e0:	e003      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089e2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80089e6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80089ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80089f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80089f8:	2300      	movs	r3, #0
 80089fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80089fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008a00:	460b      	mov	r3, r1
 8008a02:	4313      	orrs	r3, r2
 8008a04:	f000 80b5 	beq.w	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a0e:	4b9d      	ldr	r3, [pc, #628]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d113      	bne.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a1c:	4b99      	ldr	r3, [pc, #612]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a22:	4a98      	ldr	r2, [pc, #608]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008a24:	f043 0304 	orr.w	r3, r3, #4
 8008a28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008a2c:	4b95      	ldr	r3, [pc, #596]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a32:	f003 0304 	and.w	r3, r3, #4
 8008a36:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8008a3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008a44:	4b90      	ldr	r3, [pc, #576]	@ (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a48:	4a8f      	ldr	r2, [pc, #572]	@ (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008a4a:	f043 0301 	orr.w	r3, r3, #1
 8008a4e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a50:	f7fa fa94 	bl	8002f7c <HAL_GetTick>
 8008a54:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008a58:	e00b      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a5a:	f7fa fa8f 	bl	8002f7c <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d903      	bls.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008a70:	e005      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008a72:	4b85      	ldr	r3, [pc, #532]	@ (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d0ed      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 8008a7e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d165      	bne.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008a86:	4b7f      	ldr	r3, [pc, #508]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a90:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8008a94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d023      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8008a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aa0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8008aa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d01b      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008aac:	4b75      	ldr	r3, [pc, #468]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008aae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ab6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008aba:	4b72      	ldr	r3, [pc, #456]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ac0:	4a70      	ldr	r2, [pc, #448]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008ac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ac6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008aca:	4b6e      	ldr	r3, [pc, #440]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ad0:	4a6c      	ldr	r2, [pc, #432]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ad6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008ada:	4a6a      	ldr	r2, [pc, #424]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008adc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008ae0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008ae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d019      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af0:	f7fa fa44 	bl	8002f7c <HAL_GetTick>
 8008af4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008af8:	e00d      	b.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008afa:	f7fa fa3f 	bl	8002f7c <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b04:	1ad2      	subs	r2, r2, r3
 8008b06:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d903      	bls.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 8008b14:	e006      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b16:	4b5b      	ldr	r3, [pc, #364]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d0ea      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 8008b24:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10d      	bne.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8008b2c:	4b55      	ldr	r3, [pc, #340]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b3a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008b3e:	4a51      	ldr	r2, [pc, #324]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b40:	430b      	orrs	r3, r1
 8008b42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008b46:	e008      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008b48:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008b4c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 8008b50:	e003      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b52:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008b56:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008b5a:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d107      	bne.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b62:	4b48      	ldr	r3, [pc, #288]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b68:	4a46      	ldr	r2, [pc, #280]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b6a:	f023 0304 	bic.w	r3, r3, #4
 8008b6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8008b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008b7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b80:	2300      	movs	r3, #0
 8008b82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008b84:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	d042      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8008b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b96:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008b9a:	d022      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x906>
 8008b9c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008ba0:	d81b      	bhi.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8008ba2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ba6:	d011      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8008ba8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bac:	d815      	bhi.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d019      	beq.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8008bb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008bb6:	d110      	bne.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f002 fa6a 	bl	800b098 <RCCEx_PLL2_Config>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008bca:	e00d      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd0:	4a2c      	ldr	r2, [pc, #176]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bd6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008bd8:	e006      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008be0:	e002      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8008be2:	bf00      	nop
 8008be4:	e000      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8008be6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008be8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10d      	bne.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8008bf0:	4b24      	ldr	r3, [pc, #144]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008bf6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8008bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008c02:	4a20      	ldr	r2, [pc, #128]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008c04:	430b      	orrs	r3, r1
 8008c06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008c0a:	e003      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c0c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008c10:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008c20:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c22:	2300      	movs	r3, #0
 8008c24:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c26:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	d031      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008c38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c3c:	d00b      	beq.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8008c3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c42:	d804      	bhi.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d008      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8008c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c4c:	d007      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008c54:	e004      	b.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8008c56:	bf00      	nop
 8008c58:	e002      	b.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8008c5a:	bf00      	nop
 8008c5c:	e000      	b.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8008c5e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008c60:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d111      	bne.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008c68:	4b06      	ldr	r3, [pc, #24]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008c6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008c7a:	4a02      	ldr	r2, [pc, #8]	@ (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008c7c:	430b      	orrs	r3, r1
 8008c7e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008c82:	e007      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8008c84:	46020c00 	.word	0x46020c00
 8008c88:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c8c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008c90:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8008c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ca6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008caa:	460b      	mov	r3, r1
 8008cac:	4313      	orrs	r3, r2
 8008cae:	d00c      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8008cb0:	4bb2      	ldr	r3, [pc, #712]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008cb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008cb6:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8008cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008cc2:	4aae      	ldr	r2, [pc, #696]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8008cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008cd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cd8:	2300      	movs	r3, #0
 8008cda:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cdc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	d019      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8008ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008cee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cf2:	d105      	bne.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008cf4:	4ba1      	ldr	r3, [pc, #644]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf8:	4aa0      	ldr	r2, [pc, #640]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008cfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008cfe:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8008d00:	4b9e      	ldr	r3, [pc, #632]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008d06:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008d12:	4a9a      	ldr	r2, [pc, #616]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d14:	430b      	orrs	r3, r1
 8008d16:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8008d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d22:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008d26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d28:	2300      	movs	r3, #0
 8008d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d2c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008d30:	460b      	mov	r3, r1
 8008d32:	4313      	orrs	r3, r2
 8008d34:	d00c      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008d36:	4b91      	ldr	r3, [pc, #580]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d3c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d44:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008d48:	4a8c      	ldr	r2, [pc, #560]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d4a:	430b      	orrs	r3, r1
 8008d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d58:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008d5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d5e:	2300      	movs	r3, #0
 8008d60:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d62:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008d66:	460b      	mov	r3, r1
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	d00c      	beq.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008d6c:	4b83      	ldr	r3, [pc, #524]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d72:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d7a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008d7e:	4a7f      	ldr	r2, [pc, #508]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d80:	430b      	orrs	r3, r1
 8008d82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008d92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d94:	2300      	movs	r3, #0
 8008d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	d00c      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008da2:	4b76      	ldr	r3, [pc, #472]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008da8:	f023 0118 	bic.w	r1, r3, #24
 8008dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008db0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8008db4:	4a71      	ldr	r2, [pc, #452]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008db6:	430b      	orrs	r3, r1
 8008db8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8008dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dca:	2300      	movs	r3, #0
 8008dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	d032      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8008dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ddc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008de0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008de4:	d105      	bne.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de6:	4b65      	ldr	r3, [pc, #404]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dea:	4a64      	ldr	r2, [pc, #400]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008df0:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8008df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008df6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008dfa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008dfe:	d108      	bne.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e04:	3308      	adds	r3, #8
 8008e06:	4618      	mov	r0, r3
 8008e08:	f002 f946 	bl	800b098 <RCCEx_PLL2_Config>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 8008e12:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10d      	bne.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008e1a:	4b58      	ldr	r3, [pc, #352]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e20:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008e2c:	4a53      	ldr	r2, [pc, #332]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e2e:	430b      	orrs	r3, r1
 8008e30:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008e34:	e003      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e36:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008e3a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8008e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e46:	2100      	movs	r1, #0
 8008e48:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e50:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008e54:	460b      	mov	r3, r1
 8008e56:	4313      	orrs	r3, r2
 8008e58:	d04a      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8008e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e5e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008e62:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008e66:	d01e      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8008e68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008e6c:	d825      	bhi.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8008e6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e72:	d00e      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 8008e74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e78:	d81f      	bhi.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d021      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8008e7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e82:	d11a      	bne.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e84:	4b3d      	ldr	r3, [pc, #244]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e88:	4a3c      	ldr	r2, [pc, #240]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e8e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8008e90:	e018      	b.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e96:	3308      	adds	r3, #8
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f002 f8fd 	bl	800b098 <RCCEx_PLL2_Config>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8008ea4:	e00e      	b.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eaa:	332c      	adds	r3, #44	@ 0x2c
 8008eac:	4618      	mov	r0, r3
 8008eae:	f002 f98b 	bl	800b1c8 <RCCEx_PLL3_Config>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8008eb8:	e004      	b.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008ec0:	e000      	b.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 8008ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ec4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10d      	bne.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8008ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ece:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008ed2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eda:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008ede:	4927      	ldr	r1, [pc, #156]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008ee6:	e003      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008eec:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8008ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8008efc:	623b      	str	r3, [r7, #32]
 8008efe:	2300      	movs	r3, #0
 8008f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f02:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008f06:	460b      	mov	r3, r1
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	d03d      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8008f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f18:	d00e      	beq.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8008f1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f1e:	d815      	bhi.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d017      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f28:	d110      	bne.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f2a:	4b14      	ldr	r3, [pc, #80]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f2e:	4a13      	ldr	r2, [pc, #76]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f34:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008f36:	e00e      	b.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f002 f8aa 	bl	800b098 <RCCEx_PLL2_Config>
 8008f44:	4603      	mov	r3, r0
 8008f46:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008f4a:	e004      	b.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008f52:	e000      	b.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008f54:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008f56:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d110      	bne.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8008f5e:	4b07      	ldr	r3, [pc, #28]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f64:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f70:	4902      	ldr	r1, [pc, #8]	@ (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f72:	4313      	orrs	r3, r2
 8008f74:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008f78:	e006      	b.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008f7a:	bf00      	nop
 8008f7c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f80:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008f84:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f90:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008f94:	61bb      	str	r3, [r7, #24]
 8008f96:	2300      	movs	r3, #0
 8008f98:	61fb      	str	r3, [r7, #28]
 8008f9a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	d00c      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8008fa4:	4b68      	ldr	r3, [pc, #416]	@ (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8008fa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008faa:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8008fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fb2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008fb6:	4964      	ldr	r1, [pc, #400]	@ (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	6139      	str	r1, [r7, #16]
 8008fca:	f003 0302 	and.w	r3, r3, #2
 8008fce:	617b      	str	r3, [r7, #20]
 8008fd0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	d036      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 8008fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fde:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00c      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008fe6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008fea:	d113      	bne.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ff0:	3308      	adds	r3, #8
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f002 f850 	bl	800b098 <RCCEx_PLL2_Config>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8008ffe:	e00d      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009000:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009004:	332c      	adds	r3, #44	@ 0x2c
 8009006:	4618      	mov	r0, r3
 8009008:	f002 f8de 	bl	800b1c8 <RCCEx_PLL3_Config>
 800900c:	4603      	mov	r3, r0
 800900e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8009012:	e003      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800901a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800901c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10d      	bne.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 8009024:	4b48      	ldr	r3, [pc, #288]	@ (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009026:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800902a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800902e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009032:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8009036:	4944      	ldr	r1, [pc, #272]	@ (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009038:	4313      	orrs	r3, r2
 800903a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800903e:	e003      	b.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009040:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009044:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8009048:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800904c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009050:	2100      	movs	r1, #0
 8009052:	60b9      	str	r1, [r7, #8]
 8009054:	f003 0304 	and.w	r3, r3, #4
 8009058:	60fb      	str	r3, [r7, #12]
 800905a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800905e:	460b      	mov	r3, r1
 8009060:	4313      	orrs	r3, r2
 8009062:	d024      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 8009064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009068:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800906c:	2b00      	cmp	r3, #0
 800906e:	d108      	bne.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009070:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009074:	332c      	adds	r3, #44	@ 0x2c
 8009076:	4618      	mov	r0, r3
 8009078:	f002 f8a6 	bl	800b1c8 <RCCEx_PLL3_Config>
 800907c:	4603      	mov	r3, r0
 800907e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 8009082:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10d      	bne.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800908a:	4b2f      	ldr	r3, [pc, #188]	@ (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800908c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009090:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8009094:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009098:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800909c:	492a      	ldr	r1, [pc, #168]	@ (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800909e:	4313      	orrs	r3, r2
 80090a0:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80090a4:	e003      	b.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80090aa:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 80090ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	2100      	movs	r1, #0
 80090b8:	6039      	str	r1, [r7, #0]
 80090ba:	f003 0308 	and.w	r3, r3, #8
 80090be:	607b      	str	r3, [r7, #4]
 80090c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80090c4:	460b      	mov	r3, r1
 80090c6:	4313      	orrs	r3, r2
 80090c8:	d036      	beq.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 80090ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80090d2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80090d6:	d00d      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 80090d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80090dc:	d811      	bhi.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 80090de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090e2:	d012      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 80090e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090e8:	d80b      	bhi.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00d      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 80090ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090f2:	d106      	bne.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80090f4:	4b14      	ldr	r3, [pc, #80]	@ (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80090f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f8:	4a13      	ldr	r2, [pc, #76]	@ (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80090fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090fe:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8009100:	e004      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009108:	e000      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800910a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800910c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10d      	bne.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8009114:	4b0c      	ldr	r3, [pc, #48]	@ (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009116:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800911a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800911e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009122:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009126:	4908      	ldr	r1, [pc, #32]	@ (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009128:	4313      	orrs	r3, r2
 800912a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800912e:	e003      	b.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009130:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009134:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8009138:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800913c:	4618      	mov	r0, r3
 800913e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009142:	46bd      	mov	sp, r7
 8009144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009148:	46020c00 	.word	0x46020c00

0800914c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800914c:	b480      	push	{r7}
 800914e:	b089      	sub	sp, #36	@ 0x24
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8009154:	4ba6      	ldr	r3, [pc, #664]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800915e:	4ba4      	ldr	r3, [pc, #656]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009162:	f003 0303 	and.w	r3, r3, #3
 8009166:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009168:	4ba1      	ldr	r3, [pc, #644]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800916a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916c:	0a1b      	lsrs	r3, r3, #8
 800916e:	f003 030f 	and.w	r3, r3, #15
 8009172:	3301      	adds	r3, #1
 8009174:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009176:	4b9e      	ldr	r3, [pc, #632]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800917a:	091b      	lsrs	r3, r3, #4
 800917c:	f003 0301 	and.w	r3, r3, #1
 8009180:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009182:	4b9b      	ldr	r3, [pc, #620]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009186:	08db      	lsrs	r3, r3, #3
 8009188:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	fb02 f303 	mul.w	r3, r2, r3
 8009192:	ee07 3a90 	vmov	s15, r3
 8009196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800919a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	2b03      	cmp	r3, #3
 80091a2:	d062      	beq.n	800926a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	2b03      	cmp	r3, #3
 80091a8:	f200 8081 	bhi.w	80092ae <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d024      	beq.n	80091fc <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d17a      	bne.n	80092ae <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	ee07 3a90 	vmov	s15, r3
 80091be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80091c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ca:	4b89      	ldr	r3, [pc, #548]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80091cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d2:	ee07 3a90 	vmov	s15, r3
 80091d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80091da:	ed97 6a02 	vldr	s12, [r7, #8]
 80091de:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80091e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80091e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80091ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80091f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091fa:	e08f      	b.n	800931c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80091fc:	4b7c      	ldr	r3, [pc, #496]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d005      	beq.n	8009214 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8009208:	4b79      	ldr	r3, [pc, #484]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	0f1b      	lsrs	r3, r3, #28
 800920e:	f003 030f 	and.w	r3, r3, #15
 8009212:	e006      	b.n	8009222 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8009214:	4b76      	ldr	r3, [pc, #472]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009216:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800921a:	041b      	lsls	r3, r3, #16
 800921c:	0f1b      	lsrs	r3, r3, #28
 800921e:	f003 030f 	and.w	r3, r3, #15
 8009222:	4a76      	ldr	r2, [pc, #472]	@ (80093fc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009228:	ee07 3a90 	vmov	s15, r3
 800922c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	ee07 3a90 	vmov	s15, r3
 8009236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800923a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	ee07 3a90 	vmov	s15, r3
 8009244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009248:	ed97 6a02 	vldr	s12, [r7, #8]
 800924c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009250:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009254:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009258:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800925c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009264:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009268:	e058      	b.n	800931c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	ee07 3a90 	vmov	s15, r3
 8009270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009274:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009278:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800927c:	4b5c      	ldr	r3, [pc, #368]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800927e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009284:	ee07 3a90 	vmov	s15, r3
 8009288:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800928c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009290:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009294:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009298:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800929c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80092a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092ac:	e036      	b.n	800931c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80092ae:	4b50      	ldr	r3, [pc, #320]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d005      	beq.n	80092c6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80092ba:	4b4d      	ldr	r3, [pc, #308]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	0f1b      	lsrs	r3, r3, #28
 80092c0:	f003 030f 	and.w	r3, r3, #15
 80092c4:	e006      	b.n	80092d4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80092c6:	4b4a      	ldr	r3, [pc, #296]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80092c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80092cc:	041b      	lsls	r3, r3, #16
 80092ce:	0f1b      	lsrs	r3, r3, #28
 80092d0:	f003 030f 	and.w	r3, r3, #15
 80092d4:	4a49      	ldr	r2, [pc, #292]	@ (80093fc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80092d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092da:	ee07 3a90 	vmov	s15, r3
 80092de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	ee07 3a90 	vmov	s15, r3
 80092e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	ee07 3a90 	vmov	s15, r3
 80092f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80092fe:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800930a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800930e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009316:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800931a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800931c:	4b34      	ldr	r3, [pc, #208]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800931e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d017      	beq.n	8009358 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009328:	4b31      	ldr	r3, [pc, #196]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800932a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800932c:	0a5b      	lsrs	r3, r3, #9
 800932e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009332:	ee07 3a90 	vmov	s15, r3
 8009336:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800933a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800933e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009342:	edd7 6a07 	vldr	s13, [r7, #28]
 8009346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800934a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800934e:	ee17 2a90 	vmov	r2, s15
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	601a      	str	r2, [r3, #0]
 8009356:	e002      	b.n	800935e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800935e:	4b24      	ldr	r3, [pc, #144]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d017      	beq.n	800939a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800936a:	4b21      	ldr	r3, [pc, #132]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800936c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800936e:	0c1b      	lsrs	r3, r3, #16
 8009370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009374:	ee07 3a90 	vmov	s15, r3
 8009378:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800937c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009380:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009384:	edd7 6a07 	vldr	s13, [r7, #28]
 8009388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800938c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009390:	ee17 2a90 	vmov	r2, s15
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	605a      	str	r2, [r3, #4]
 8009398:	e002      	b.n	80093a0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80093a0:	4b13      	ldr	r3, [pc, #76]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80093a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d017      	beq.n	80093dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80093ac:	4b10      	ldr	r3, [pc, #64]	@ (80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80093ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093b0:	0e1b      	lsrs	r3, r3, #24
 80093b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093b6:	ee07 3a90 	vmov	s15, r3
 80093ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80093be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093c2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80093c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80093ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093d2:	ee17 2a90 	vmov	r2, s15
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80093da:	e002      	b.n	80093e2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	609a      	str	r2, [r3, #8]
}
 80093e2:	bf00      	nop
 80093e4:	3724      	adds	r7, #36	@ 0x24
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	46020c00 	.word	0x46020c00
 80093f4:	4b742400 	.word	0x4b742400
 80093f8:	46000000 	.word	0x46000000
 80093fc:	0800cd88 	.word	0x0800cd88

08009400 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009400:	b480      	push	{r7}
 8009402:	b089      	sub	sp, #36	@ 0x24
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8009408:	4ba6      	ldr	r3, [pc, #664]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800940a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800940c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009410:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009412:	4ba4      	ldr	r3, [pc, #656]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009416:	f003 0303 	and.w	r3, r3, #3
 800941a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800941c:	4ba1      	ldr	r3, [pc, #644]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800941e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009420:	0a1b      	lsrs	r3, r3, #8
 8009422:	f003 030f 	and.w	r3, r3, #15
 8009426:	3301      	adds	r3, #1
 8009428:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800942a:	4b9e      	ldr	r3, [pc, #632]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800942c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942e:	091b      	lsrs	r3, r3, #4
 8009430:	f003 0301 	and.w	r3, r3, #1
 8009434:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8009436:	4b9b      	ldr	r3, [pc, #620]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943a:	08db      	lsrs	r3, r3, #3
 800943c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	fb02 f303 	mul.w	r3, r2, r3
 8009446:	ee07 3a90 	vmov	s15, r3
 800944a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	2b03      	cmp	r3, #3
 8009456:	d062      	beq.n	800951e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	2b03      	cmp	r3, #3
 800945c:	f200 8081 	bhi.w	8009562 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d024      	beq.n	80094b0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	2b02      	cmp	r3, #2
 800946a:	d17a      	bne.n	8009562 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	ee07 3a90 	vmov	s15, r3
 8009472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009476:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800947a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800947e:	4b89      	ldr	r3, [pc, #548]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009486:	ee07 3a90 	vmov	s15, r3
 800948a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800948e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009492:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80096ac <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009496:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800949a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800949e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80094a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094ae:	e08f      	b.n	80095d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80094b0:	4b7c      	ldr	r3, [pc, #496]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d005      	beq.n	80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80094bc:	4b79      	ldr	r3, [pc, #484]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	0f1b      	lsrs	r3, r3, #28
 80094c2:	f003 030f 	and.w	r3, r3, #15
 80094c6:	e006      	b.n	80094d6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80094c8:	4b76      	ldr	r3, [pc, #472]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80094ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80094ce:	041b      	lsls	r3, r3, #16
 80094d0:	0f1b      	lsrs	r3, r3, #28
 80094d2:	f003 030f 	and.w	r3, r3, #15
 80094d6:	4a76      	ldr	r2, [pc, #472]	@ (80096b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80094d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094dc:	ee07 3a90 	vmov	s15, r3
 80094e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	ee07 3a90 	vmov	s15, r3
 80094ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	ee07 3a90 	vmov	s15, r3
 80094f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8009500:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80096ac <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800950c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009510:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009518:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800951c:	e058      	b.n	80095d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	ee07 3a90 	vmov	s15, r3
 8009524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009528:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800952c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009530:	4b5c      	ldr	r3, [pc, #368]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009538:	ee07 3a90 	vmov	s15, r3
 800953c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009540:	ed97 6a02 	vldr	s12, [r7, #8]
 8009544:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80096ac <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009548:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800954c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009550:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009554:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800955c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009560:	e036      	b.n	80095d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009562:	4b50      	ldr	r3, [pc, #320]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800956a:	2b00      	cmp	r3, #0
 800956c:	d005      	beq.n	800957a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800956e:	4b4d      	ldr	r3, [pc, #308]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	0f1b      	lsrs	r3, r3, #28
 8009574:	f003 030f 	and.w	r3, r3, #15
 8009578:	e006      	b.n	8009588 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800957a:	4b4a      	ldr	r3, [pc, #296]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800957c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009580:	041b      	lsls	r3, r3, #16
 8009582:	0f1b      	lsrs	r3, r3, #28
 8009584:	f003 030f 	and.w	r3, r3, #15
 8009588:	4a49      	ldr	r2, [pc, #292]	@ (80096b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800958a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	ee07 3a90 	vmov	s15, r3
 800959c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	ee07 3a90 	vmov	s15, r3
 80095aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80095b2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80096ac <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80095b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80095c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095ce:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80095d0:	4b34      	ldr	r3, [pc, #208]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80095d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d017      	beq.n	800960c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80095dc:	4b31      	ldr	r3, [pc, #196]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80095de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095e0:	0a5b      	lsrs	r3, r3, #9
 80095e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095e6:	ee07 3a90 	vmov	s15, r3
 80095ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80095ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095f2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80095f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80095fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009602:	ee17 2a90 	vmov	r2, s15
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	601a      	str	r2, [r3, #0]
 800960a:	e002      	b.n	8009612 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009612:	4b24      	ldr	r3, [pc, #144]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800961a:	2b00      	cmp	r3, #0
 800961c:	d017      	beq.n	800964e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800961e:	4b21      	ldr	r3, [pc, #132]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009622:	0c1b      	lsrs	r3, r3, #16
 8009624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009628:	ee07 3a90 	vmov	s15, r3
 800962c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009630:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009634:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009638:	edd7 6a07 	vldr	s13, [r7, #28]
 800963c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009644:	ee17 2a90 	vmov	r2, s15
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	605a      	str	r2, [r3, #4]
 800964c:	e002      	b.n	8009654 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009654:	4b13      	ldr	r3, [pc, #76]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009658:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800965c:	2b00      	cmp	r3, #0
 800965e:	d017      	beq.n	8009690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009660:	4b10      	ldr	r3, [pc, #64]	@ (80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009664:	0e1b      	lsrs	r3, r3, #24
 8009666:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800966a:	ee07 3a90 	vmov	s15, r3
 800966e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8009672:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009676:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800967a:	edd7 6a07 	vldr	s13, [r7, #28]
 800967e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009686:	ee17 2a90 	vmov	r2, s15
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800968e:	e002      	b.n	8009696 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	609a      	str	r2, [r3, #8]
}
 8009696:	bf00      	nop
 8009698:	3724      	adds	r7, #36	@ 0x24
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	46020c00 	.word	0x46020c00
 80096a8:	4b742400 	.word	0x4b742400
 80096ac:	46000000 	.word	0x46000000
 80096b0:	0800cd88 	.word	0x0800cd88

080096b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b089      	sub	sp, #36	@ 0x24
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80096bc:	4ba6      	ldr	r3, [pc, #664]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80096be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096c4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80096c6:	4ba4      	ldr	r3, [pc, #656]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80096c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ca:	f003 0303 	and.w	r3, r3, #3
 80096ce:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80096d0:	4ba1      	ldr	r3, [pc, #644]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80096d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096d4:	0a1b      	lsrs	r3, r3, #8
 80096d6:	f003 030f 	and.w	r3, r3, #15
 80096da:	3301      	adds	r3, #1
 80096dc:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80096de:	4b9e      	ldr	r3, [pc, #632]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80096e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096e2:	091b      	lsrs	r3, r3, #4
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80096ea:	4b9b      	ldr	r3, [pc, #620]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80096ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096ee:	08db      	lsrs	r3, r3, #3
 80096f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	fb02 f303 	mul.w	r3, r2, r3
 80096fa:	ee07 3a90 	vmov	s15, r3
 80096fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009702:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	2b03      	cmp	r3, #3
 800970a:	d062      	beq.n	80097d2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	2b03      	cmp	r3, #3
 8009710:	f200 8081 	bhi.w	8009816 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d024      	beq.n	8009764 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	2b02      	cmp	r3, #2
 800971e:	d17a      	bne.n	8009816 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	ee07 3a90 	vmov	s15, r3
 8009726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800972e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009732:	4b89      	ldr	r3, [pc, #548]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800973a:	ee07 3a90 	vmov	s15, r3
 800973e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009742:	ed97 6a02 	vldr	s12, [r7, #8]
 8009746:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8009960 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800974a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800974e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009756:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800975a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800975e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8009762:	e08f      	b.n	8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009764:	4b7c      	ldr	r3, [pc, #496]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d005      	beq.n	800977c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8009770:	4b79      	ldr	r3, [pc, #484]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	0f1b      	lsrs	r3, r3, #28
 8009776:	f003 030f 	and.w	r3, r3, #15
 800977a:	e006      	b.n	800978a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800977c:	4b76      	ldr	r3, [pc, #472]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800977e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009782:	041b      	lsls	r3, r3, #16
 8009784:	0f1b      	lsrs	r3, r3, #28
 8009786:	f003 030f 	and.w	r3, r3, #15
 800978a:	4a76      	ldr	r2, [pc, #472]	@ (8009964 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800978c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009790:	ee07 3a90 	vmov	s15, r3
 8009794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	ee07 3a90 	vmov	s15, r3
 800979e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	ee07 3a90 	vmov	s15, r3
 80097ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80097b4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8009960 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80097b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80097c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097d0:	e058      	b.n	8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	ee07 3a90 	vmov	s15, r3
 80097d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097dc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80097e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097e4:	4b5c      	ldr	r3, [pc, #368]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80097e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ec:	ee07 3a90 	vmov	s15, r3
 80097f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80097f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80097f8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009960 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80097fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009800:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009804:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009808:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800980c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009810:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009814:	e036      	b.n	8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009816:	4b50      	ldr	r3, [pc, #320]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800981e:	2b00      	cmp	r3, #0
 8009820:	d005      	beq.n	800982e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8009822:	4b4d      	ldr	r3, [pc, #308]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	0f1b      	lsrs	r3, r3, #28
 8009828:	f003 030f 	and.w	r3, r3, #15
 800982c:	e006      	b.n	800983c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800982e:	4b4a      	ldr	r3, [pc, #296]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009834:	041b      	lsls	r3, r3, #16
 8009836:	0f1b      	lsrs	r3, r3, #28
 8009838:	f003 030f 	and.w	r3, r3, #15
 800983c:	4a49      	ldr	r2, [pc, #292]	@ (8009964 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800983e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009842:	ee07 3a90 	vmov	s15, r3
 8009846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	ee07 3a90 	vmov	s15, r3
 8009850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	ee07 3a90 	vmov	s15, r3
 800985e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009862:	ed97 6a02 	vldr	s12, [r7, #8]
 8009866:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8009960 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800986a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800986e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009876:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800987a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800987e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009882:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8009884:	4b34      	ldr	r3, [pc, #208]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800988c:	2b00      	cmp	r3, #0
 800988e:	d017      	beq.n	80098c0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009890:	4b31      	ldr	r3, [pc, #196]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009894:	0a5b      	lsrs	r3, r3, #9
 8009896:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800989a:	ee07 3a90 	vmov	s15, r3
 800989e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80098a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80098a6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80098aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80098ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098b6:	ee17 2a90 	vmov	r2, s15
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	601a      	str	r2, [r3, #0]
 80098be:	e002      	b.n	80098c6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80098c6:	4b24      	ldr	r3, [pc, #144]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80098c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d017      	beq.n	8009902 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80098d2:	4b21      	ldr	r3, [pc, #132]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80098d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098d6:	0c1b      	lsrs	r3, r3, #16
 80098d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098dc:	ee07 3a90 	vmov	s15, r3
 80098e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80098e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80098e8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80098ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80098f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098f8:	ee17 2a90 	vmov	r2, s15
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	605a      	str	r2, [r3, #4]
 8009900:	e002      	b.n	8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8009908:	4b13      	ldr	r3, [pc, #76]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800990a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800990c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d017      	beq.n	8009944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009914:	4b10      	ldr	r3, [pc, #64]	@ (8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009918:	0e1b      	lsrs	r3, r3, #24
 800991a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800991e:	ee07 3a90 	vmov	s15, r3
 8009922:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8009926:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800992a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800992e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800993a:	ee17 2a90 	vmov	r2, s15
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009942:	e002      	b.n	800994a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	609a      	str	r2, [r3, #8]
}
 800994a:	bf00      	nop
 800994c:	3724      	adds	r7, #36	@ 0x24
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	46020c00 	.word	0x46020c00
 800995c:	4b742400 	.word	0x4b742400
 8009960:	46000000 	.word	0x46000000
 8009964:	0800cd88 	.word	0x0800cd88

08009968 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b08e      	sub	sp, #56	@ 0x38
 800996c:	af00      	add	r7, sp, #0
 800996e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8009972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009976:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800997a:	430b      	orrs	r3, r1
 800997c:	d145      	bne.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800997e:	4ba7      	ldr	r3, [pc, #668]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009984:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009988:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800998a:	4ba4      	ldr	r3, [pc, #656]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800998c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009990:	f003 0302 	and.w	r3, r3, #2
 8009994:	2b02      	cmp	r3, #2
 8009996:	d108      	bne.n	80099aa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800999e:	d104      	bne.n	80099aa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80099a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80099a6:	f001 bb5a 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80099aa:	4b9c      	ldr	r3, [pc, #624]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80099ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099b8:	d114      	bne.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80099ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099c0:	d110      	bne.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099c2:	4b96      	ldr	r3, [pc, #600]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80099c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099d0:	d103      	bne.n	80099da <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80099d2:	23fa      	movs	r3, #250	@ 0xfa
 80099d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099d6:	f001 bb42 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 80099da:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80099de:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099e0:	f001 bb3d 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80099e4:	4b8d      	ldr	r3, [pc, #564]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099f0:	d107      	bne.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80099f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099f8:	d103      	bne.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80099fa:	4b89      	ldr	r3, [pc, #548]	@ (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80099fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80099fe:	f001 bb2e 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8009a02:	2300      	movs	r3, #0
 8009a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a06:	f001 bb2a 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009a0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a0e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009a12:	430b      	orrs	r3, r1
 8009a14:	d151      	bne.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009a16:	4b81      	ldr	r3, [pc, #516]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009a18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009a1c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8009a20:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a24:	2b80      	cmp	r3, #128	@ 0x80
 8009a26:	d035      	beq.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8009a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a2a:	2b80      	cmp	r3, #128	@ 0x80
 8009a2c:	d841      	bhi.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a30:	2b60      	cmp	r3, #96	@ 0x60
 8009a32:	d02a      	beq.n	8009a8a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8009a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a36:	2b60      	cmp	r3, #96	@ 0x60
 8009a38:	d83b      	bhi.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a3c:	2b40      	cmp	r3, #64	@ 0x40
 8009a3e:	d009      	beq.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a42:	2b40      	cmp	r3, #64	@ 0x40
 8009a44:	d835      	bhi.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00c      	beq.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8009a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a4e:	2b20      	cmp	r3, #32
 8009a50:	d012      	beq.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009a52:	e02e      	b.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7ff fb77 	bl	800914c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a62:	f001 bafc 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a66:	f107 0318 	add.w	r3, r7, #24
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7ff fcc8 	bl	8009400 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a74:	f001 baf3 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a78:	f107 030c 	add.w	r3, r7, #12
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7ff fe19 	bl	80096b4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a86:	f001 baea 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009a8a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009a8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a90:	f001 bae5 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a94:	4b61      	ldr	r3, [pc, #388]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aa0:	d103      	bne.n	8009aaa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8009aa2:	4b60      	ldr	r3, [pc, #384]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009aa4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009aa6:	f001 bada 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009aae:	f001 bad6 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ab6:	f001 bad2 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009abe:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009ac2:	430b      	orrs	r3, r1
 8009ac4:	d158      	bne.n	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009ac6:	4b55      	ldr	r3, [pc, #340]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009ac8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009acc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009ad0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ad8:	d03b      	beq.n	8009b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8009ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ae0:	d846      	bhi.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ae8:	d02e      	beq.n	8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8009aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009af0:	d83e      	bhi.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009af8:	d00b      	beq.n	8009b12 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b00:	d836      	bhi.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00d      	beq.n	8009b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8009b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b0e:	d012      	beq.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8009b10:	e02e      	b.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7ff fb18 	bl	800914c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b20:	f001 ba9d 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b24:	f107 0318 	add.w	r3, r7, #24
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7ff fc69 	bl	8009400 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b32:	f001 ba94 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b36:	f107 030c 	add.w	r3, r7, #12
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7ff fdba 	bl	80096b4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b44:	f001 ba8b 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009b48:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009b4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b4e:	f001 ba86 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b52:	4b32      	ldr	r3, [pc, #200]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b5e:	d103      	bne.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8009b60:	4b30      	ldr	r3, [pc, #192]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009b62:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b64:	f001 ba7b 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b6c:	f001 ba77 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b74:	f001 ba73 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8009b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b7c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009b80:	430b      	orrs	r3, r1
 8009b82:	d126      	bne.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8009b84:	4b25      	ldr	r3, [pc, #148]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009b86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009b8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b8e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8009b90:	4b22      	ldr	r3, [pc, #136]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b9c:	d106      	bne.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d103      	bne.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8009ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ba8:	f001 ba59 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8009bac:	4b1b      	ldr	r3, [pc, #108]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bb8:	d107      	bne.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8009bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bc0:	d103      	bne.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8009bc2:	4b19      	ldr	r3, [pc, #100]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bc6:	f001 ba4a 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bce:	f001 ba46 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8009bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bd6:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8009bda:	430b      	orrs	r3, r1
 8009bdc:	d16e      	bne.n	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8009bde:	4b0f      	ldr	r3, [pc, #60]	@ (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009be4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009be8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bec:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009bf0:	d03d      	beq.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009bf8:	d85c      	bhi.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c00:	d014      	beq.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8009c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c08:	d854      	bhi.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d01f      	beq.n	8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8009c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009c16:	d012      	beq.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009c18:	e04c      	b.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009c1a:	bf00      	nop
 8009c1c:	46020c00 	.word	0x46020c00
 8009c20:	0007a120 	.word	0x0007a120
 8009c24:	00f42400 	.word	0x00f42400
 8009c28:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7ff fa8b 	bl	800914c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c3a:	f001 ba10 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c3e:	f107 0318 	add.w	r3, r7, #24
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7ff fbdc 	bl	8009400 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c4c:	f001 ba07 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009c50:	4ba7      	ldr	r3, [pc, #668]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c5c:	d103      	bne.n	8009c66 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8009c5e:	4ba5      	ldr	r3, [pc, #660]	@ (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009c60:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009c62:	f001 b9fc 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009c66:	2300      	movs	r3, #0
 8009c68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c6a:	f001 b9f8 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009c6e:	4ba0      	ldr	r3, [pc, #640]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 0320 	and.w	r3, r3, #32
 8009c76:	2b20      	cmp	r3, #32
 8009c78:	d118      	bne.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c7a:	4b9d      	ldr	r3, [pc, #628]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d005      	beq.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009c86:	4b9a      	ldr	r3, [pc, #616]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	0e1b      	lsrs	r3, r3, #24
 8009c8c:	f003 030f 	and.w	r3, r3, #15
 8009c90:	e006      	b.n	8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8009c92:	4b97      	ldr	r3, [pc, #604]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c98:	041b      	lsls	r3, r3, #16
 8009c9a:	0e1b      	lsrs	r3, r3, #24
 8009c9c:	f003 030f 	and.w	r3, r3, #15
 8009ca0:	4a95      	ldr	r2, [pc, #596]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ca6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009ca8:	f001 b9d9 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009cac:	2300      	movs	r3, #0
 8009cae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cb0:	f001 b9d5 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cb8:	f001 b9d1 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cc0:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8009cc4:	430b      	orrs	r3, r1
 8009cc6:	d17f      	bne.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009cc8:	4b89      	ldr	r3, [pc, #548]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009cca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cd2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d165      	bne.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8009cda:	4b85      	ldr	r3, [pc, #532]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ce0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009ce4:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009cec:	d034      	beq.n	8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8009cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009cf4:	d853      	bhi.n	8009d9e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8009cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009cfc:	d00b      	beq.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8009cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d04:	d84b      	bhi.n	8009d9e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8009d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d016      	beq.n	8009d3a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d12:	d009      	beq.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009d14:	e043      	b.n	8009d9e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7ff fa16 	bl	800914c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d22:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009d24:	f001 b99b 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d28:	f107 0318 	add.w	r3, r7, #24
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7ff fb67 	bl	8009400 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009d36:	f001 b992 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009d3a:	4b6d      	ldr	r3, [pc, #436]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d46:	d103      	bne.n	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8009d48:	4b6a      	ldr	r3, [pc, #424]	@ (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009d4a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009d4c:	f001 b987 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 8009d50:	2300      	movs	r3, #0
 8009d52:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009d54:	f001 b983 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009d58:	4b65      	ldr	r3, [pc, #404]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 0320 	and.w	r3, r3, #32
 8009d60:	2b20      	cmp	r3, #32
 8009d62:	d118      	bne.n	8009d96 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009d64:	4b62      	ldr	r3, [pc, #392]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d005      	beq.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8009d70:	4b5f      	ldr	r3, [pc, #380]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	0e1b      	lsrs	r3, r3, #24
 8009d76:	f003 030f 	and.w	r3, r3, #15
 8009d7a:	e006      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009d7c:	4b5c      	ldr	r3, [pc, #368]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009d7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009d82:	041b      	lsls	r3, r3, #16
 8009d84:	0e1b      	lsrs	r3, r3, #24
 8009d86:	f003 030f 	and.w	r3, r3, #15
 8009d8a:	4a5b      	ldr	r2, [pc, #364]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d90:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009d92:	f001 b964 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 8009d96:	2300      	movs	r3, #0
 8009d98:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009d9a:	f001 b960 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009da2:	f001 b95c 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8009da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009dac:	d108      	bne.n	8009dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7ff f9ca 	bl	800914c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dbc:	f001 b94f 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dc4:	f001 b94b 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8009dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dcc:	1e51      	subs	r1, r2, #1
 8009dce:	430b      	orrs	r3, r1
 8009dd0:	d136      	bne.n	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009dd2:	4b47      	ldr	r3, [pc, #284]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009dd8:	f003 0303 	and.w	r3, r3, #3
 8009ddc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d104      	bne.n	8009dee <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8009de4:	f7fe f968 	bl	80080b8 <HAL_RCC_GetPCLK2Freq>
 8009de8:	6378      	str	r0, [r7, #52]	@ 0x34
 8009dea:	f001 b938 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8009dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d104      	bne.n	8009dfe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009df4:	f7fe f830 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 8009df8:	6378      	str	r0, [r7, #52]	@ 0x34
 8009dfa:	f001 b930 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8009dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e0a:	d106      	bne.n	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8009e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d103      	bne.n	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8009e12:	4b3a      	ldr	r3, [pc, #232]	@ (8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009e14:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e16:	f001 b922 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8009e1a:	4b35      	ldr	r3, [pc, #212]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e20:	f003 0302 	and.w	r3, r3, #2
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d107      	bne.n	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2a:	2b03      	cmp	r3, #3
 8009e2c:	d104      	bne.n	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8009e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e34:	f001 b913 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e3c:	f001 b90f 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8009e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e44:	1e91      	subs	r1, r2, #2
 8009e46:	430b      	orrs	r3, r1
 8009e48:	d136      	bne.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009e4a:	4b29      	ldr	r3, [pc, #164]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e50:	f003 030c 	and.w	r3, r3, #12
 8009e54:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d104      	bne.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009e5c:	f7fe f918 	bl	8008090 <HAL_RCC_GetPCLK1Freq>
 8009e60:	6378      	str	r0, [r7, #52]	@ 0x34
 8009e62:	f001 b8fc 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8009e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e68:	2b04      	cmp	r3, #4
 8009e6a:	d104      	bne.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009e6c:	f7fd fff4 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 8009e70:	6378      	str	r0, [r7, #52]	@ 0x34
 8009e72:	f001 b8f4 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009e76:	4b1e      	ldr	r3, [pc, #120]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e82:	d106      	bne.n	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e86:	2b08      	cmp	r3, #8
 8009e88:	d103      	bne.n	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8009e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e8e:	f001 b8e6 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009e92:	4b17      	ldr	r3, [pc, #92]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e98:	f003 0302 	and.w	r3, r3, #2
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d107      	bne.n	8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea2:	2b0c      	cmp	r3, #12
 8009ea4:	d104      	bne.n	8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8009ea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eac:	f001 b8d7 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eb4:	f001 b8d3 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8009eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ebc:	1f11      	subs	r1, r2, #4
 8009ebe:	430b      	orrs	r3, r1
 8009ec0:	d13f      	bne.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ec8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009ecc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d104      	bne.n	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009ed4:	f7fe f8dc 	bl	8008090 <HAL_RCC_GetPCLK1Freq>
 8009ed8:	6378      	str	r0, [r7, #52]	@ 0x34
 8009eda:	f001 b8c0 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8009ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee0:	2b10      	cmp	r3, #16
 8009ee2:	d10d      	bne.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009ee4:	f7fd ffb8 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 8009ee8:	6378      	str	r0, [r7, #52]	@ 0x34
 8009eea:	f001 b8b8 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8009eee:	bf00      	nop
 8009ef0:	46020c00 	.word	0x46020c00
 8009ef4:	02dc6c00 	.word	0x02dc6c00
 8009ef8:	0800cd88 	.word	0x0800cd88
 8009efc:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009f00:	4ba8      	ldr	r3, [pc, #672]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f0c:	d106      	bne.n	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f10:	2b20      	cmp	r3, #32
 8009f12:	d103      	bne.n	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8009f14:	4ba4      	ldr	r3, [pc, #656]	@ (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f18:	f001 b8a1 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009f1c:	4ba1      	ldr	r3, [pc, #644]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f22:	f003 0302 	and.w	r3, r3, #2
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d107      	bne.n	8009f3a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2c:	2b30      	cmp	r3, #48	@ 0x30
 8009f2e:	d104      	bne.n	8009f3a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8009f30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f36:	f001 b892 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f3e:	f001 b88e 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8009f42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f46:	f1a2 0108 	sub.w	r1, r2, #8
 8009f4a:	430b      	orrs	r3, r1
 8009f4c:	d136      	bne.n	8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009f4e:	4b95      	ldr	r3, [pc, #596]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009f54:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009f58:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d104      	bne.n	8009f6a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009f60:	f7fe f896 	bl	8008090 <HAL_RCC_GetPCLK1Freq>
 8009f64:	6378      	str	r0, [r7, #52]	@ 0x34
 8009f66:	f001 b87a 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6c:	2b40      	cmp	r3, #64	@ 0x40
 8009f6e:	d104      	bne.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009f70:	f7fd ff72 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 8009f74:	6378      	str	r0, [r7, #52]	@ 0x34
 8009f76:	f001 b872 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009f7a:	4b8a      	ldr	r3, [pc, #552]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f86:	d106      	bne.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8009f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8a:	2b80      	cmp	r3, #128	@ 0x80
 8009f8c:	d103      	bne.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8009f8e:	4b86      	ldr	r3, [pc, #536]	@ (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f92:	f001 b864 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009f96:	4b83      	ldr	r3, [pc, #524]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f9c:	f003 0302 	and.w	r3, r3, #2
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d107      	bne.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009fa8:	d104      	bne.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8009faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fae:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fb0:	f001 b855 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fb8:	f001 b851 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8009fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fc0:	f1a2 0110 	sub.w	r1, r2, #16
 8009fc4:	430b      	orrs	r3, r1
 8009fc6:	d139      	bne.n	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009fc8:	4b76      	ldr	r3, [pc, #472]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fd2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d104      	bne.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009fda:	f7fe f859 	bl	8008090 <HAL_RCC_GetPCLK1Freq>
 8009fde:	6378      	str	r0, [r7, #52]	@ 0x34
 8009fe0:	f001 b83d 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8009fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fea:	d104      	bne.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009fec:	f7fd ff34 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 8009ff0:	6378      	str	r0, [r7, #52]	@ 0x34
 8009ff2:	f001 b834 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009ff6:	4b6b      	ldr	r3, [pc, #428]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a002:	d107      	bne.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800a004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a00a:	d103      	bne.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800a00c:	4b66      	ldr	r3, [pc, #408]	@ (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a00e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a010:	f001 b825 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a014:	4b63      	ldr	r3, [pc, #396]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a01a:	f003 0302 	and.w	r3, r3, #2
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d108      	bne.n	800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800a022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a024:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a028:	d104      	bne.n	800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800a02a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a02e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a030:	f001 b815 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a034:	2300      	movs	r3, #0
 800a036:	637b      	str	r3, [r7, #52]	@ 0x34
 800a038:	f001 b811 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800a03c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a040:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800a044:	430b      	orrs	r3, r1
 800a046:	d139      	bne.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800a048:	4b56      	ldr	r3, [pc, #344]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a04a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a04e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a052:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800a054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a056:	2b00      	cmp	r3, #0
 800a058:	d104      	bne.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a05a:	f7fe f819 	bl	8008090 <HAL_RCC_GetPCLK1Freq>
 800a05e:	6378      	str	r0, [r7, #52]	@ 0x34
 800a060:	f000 bffd 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800a064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a066:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a06a:	d104      	bne.n	800a076 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a06c:	f7fd fef4 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 800a070:	6378      	str	r0, [r7, #52]	@ 0x34
 800a072:	f000 bff4 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800a076:	4b4b      	ldr	r3, [pc, #300]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a07e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a082:	d107      	bne.n	800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800a084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a086:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a08a:	d103      	bne.n	800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800a08c:	4b46      	ldr	r3, [pc, #280]	@ (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a08e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a090:	f000 bfe5 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800a094:	4b43      	ldr	r3, [pc, #268]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a096:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a09a:	f003 0302 	and.w	r3, r3, #2
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d108      	bne.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800a0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a0a8:	d104      	bne.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800a0aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0b0:	f000 bfd5 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0b8:	f000 bfd1 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800a0bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0c0:	f1a2 0120 	sub.w	r1, r2, #32
 800a0c4:	430b      	orrs	r3, r1
 800a0c6:	d158      	bne.n	800a17a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a0c8:	4b36      	ldr	r3, [pc, #216]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a0ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a0ce:	f003 0307 	and.w	r3, r3, #7
 800a0d2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d104      	bne.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800a0da:	f7fe f801 	bl	80080e0 <HAL_RCC_GetPCLK3Freq>
 800a0de:	6378      	str	r0, [r7, #52]	@ 0x34
 800a0e0:	f000 bfbd 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800a0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d104      	bne.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a0ea:	f7fd feb5 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 800a0ee:	6378      	str	r0, [r7, #52]	@ 0x34
 800a0f0:	f000 bfb5 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a0f4:	4b2b      	ldr	r3, [pc, #172]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a100:	d106      	bne.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800a102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a104:	2b02      	cmp	r3, #2
 800a106:	d103      	bne.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800a108:	4b27      	ldr	r3, [pc, #156]	@ (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a10a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a10c:	f000 bfa7 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a110:	4b24      	ldr	r3, [pc, #144]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a112:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a116:	f003 0302 	and.w	r3, r3, #2
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d107      	bne.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800a11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a120:	2b03      	cmp	r3, #3
 800a122:	d104      	bne.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800a124:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a128:	637b      	str	r3, [r7, #52]	@ 0x34
 800a12a:	f000 bf98 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800a12e:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f003 0320 	and.w	r3, r3, #32
 800a136:	2b20      	cmp	r3, #32
 800a138:	d11b      	bne.n	800a172 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800a13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13c:	2b04      	cmp	r3, #4
 800a13e:	d118      	bne.n	800a172 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a140:	4b18      	ldr	r3, [pc, #96]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d005      	beq.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800a14c:	4b15      	ldr	r3, [pc, #84]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	0e1b      	lsrs	r3, r3, #24
 800a152:	f003 030f 	and.w	r3, r3, #15
 800a156:	e006      	b.n	800a166 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800a158:	4b12      	ldr	r3, [pc, #72]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a15a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a15e:	041b      	lsls	r3, r3, #16
 800a160:	0e1b      	lsrs	r3, r3, #24
 800a162:	f003 030f 	and.w	r3, r3, #15
 800a166:	4a11      	ldr	r2, [pc, #68]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a16c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a16e:	f000 bf76 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800a172:	2300      	movs	r3, #0
 800a174:	637b      	str	r3, [r7, #52]	@ 0x34
 800a176:	f000 bf72 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800a17a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a17e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a182:	430b      	orrs	r3, r1
 800a184:	d172      	bne.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800a186:	4b07      	ldr	r3, [pc, #28]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a18c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a190:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800a192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a198:	d10a      	bne.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a19a:	f7fd fe5d 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 800a19e:	6378      	str	r0, [r7, #52]	@ 0x34
 800a1a0:	f000 bf5d 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a1a4:	46020c00 	.word	0x46020c00
 800a1a8:	00f42400 	.word	0x00f42400
 800a1ac:	0800cd88 	.word	0x0800cd88
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1b6:	d108      	bne.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1b8:	f107 0318 	add.w	r3, r7, #24
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7ff f91f 	bl	8009400 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1c6:	f000 bf4a 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d104      	bne.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800a1d0:	f7fd ff44 	bl	800805c <HAL_RCC_GetHCLKFreq>
 800a1d4:	6378      	str	r0, [r7, #52]	@ 0x34
 800a1d6:	f000 bf42 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800a1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1dc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a1e0:	d122      	bne.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a1e2:	4bb0      	ldr	r3, [pc, #704]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 0320 	and.w	r3, r3, #32
 800a1ea:	2b20      	cmp	r3, #32
 800a1ec:	d118      	bne.n	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a1ee:	4bad      	ldr	r3, [pc, #692]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d005      	beq.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800a1fa:	4baa      	ldr	r3, [pc, #680]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	0e1b      	lsrs	r3, r3, #24
 800a200:	f003 030f 	and.w	r3, r3, #15
 800a204:	e006      	b.n	800a214 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800a206:	4ba7      	ldr	r3, [pc, #668]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a208:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a20c:	041b      	lsls	r3, r3, #16
 800a20e:	0e1b      	lsrs	r3, r3, #24
 800a210:	f003 030f 	and.w	r3, r3, #15
 800a214:	4aa4      	ldr	r2, [pc, #656]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a21a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a21c:	f000 bf1f 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800a220:	2300      	movs	r3, #0
 800a222:	637b      	str	r3, [r7, #52]	@ 0x34
 800a224:	f000 bf1b 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800a228:	4b9e      	ldr	r3, [pc, #632]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a230:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a234:	d107      	bne.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800a236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a238:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a23c:	d103      	bne.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800a23e:	4b9b      	ldr	r3, [pc, #620]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a240:	637b      	str	r3, [r7, #52]	@ 0x34
 800a242:	f000 bf0c 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800a246:	4b97      	ldr	r3, [pc, #604]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a24e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a252:	d107      	bne.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800a254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a256:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a25a:	d103      	bne.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800a25c:	4b93      	ldr	r3, [pc, #588]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a25e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a260:	f000 befd 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800a264:	2300      	movs	r3, #0
 800a266:	637b      	str	r3, [r7, #52]	@ 0x34
 800a268:	f000 bef9 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800a26c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a270:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a274:	430b      	orrs	r3, r1
 800a276:	d158      	bne.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800a278:	4b8a      	ldr	r3, [pc, #552]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a27a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a27e:	f003 0307 	and.w	r3, r3, #7
 800a282:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a286:	2b04      	cmp	r3, #4
 800a288:	d84b      	bhi.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800a28a:	a201      	add	r2, pc, #4	@ (adr r2, 800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800a28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a290:	0800a2c9 	.word	0x0800a2c9
 800a294:	0800a2a5 	.word	0x0800a2a5
 800a298:	0800a2b7 	.word	0x0800a2b7
 800a29c:	0800a2d3 	.word	0x0800a2d3
 800a2a0:	0800a2dd 	.word	0x0800a2dd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7fe ff4f 	bl	800914c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2b2:	f000 bed4 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2b6:	f107 030c 	add.w	r3, r7, #12
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7ff f9fa 	bl	80096b4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2c4:	f000 becb 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a2c8:	f7fd fec8 	bl	800805c <HAL_RCC_GetHCLKFreq>
 800a2cc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a2ce:	f000 bec6 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a2d2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a2d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2d8:	f000 bec1 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a2dc:	4b71      	ldr	r3, [pc, #452]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 0320 	and.w	r3, r3, #32
 800a2e4:	2b20      	cmp	r3, #32
 800a2e6:	d118      	bne.n	800a31a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a2e8:	4b6e      	ldr	r3, [pc, #440]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d005      	beq.n	800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800a2f4:	4b6b      	ldr	r3, [pc, #428]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	0e1b      	lsrs	r3, r3, #24
 800a2fa:	f003 030f 	and.w	r3, r3, #15
 800a2fe:	e006      	b.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800a300:	4b68      	ldr	r3, [pc, #416]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a306:	041b      	lsls	r3, r3, #16
 800a308:	0e1b      	lsrs	r3, r3, #24
 800a30a:	f003 030f 	and.w	r3, r3, #15
 800a30e:	4a66      	ldr	r2, [pc, #408]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a314:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a316:	f000 bea2 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a31a:	2300      	movs	r3, #0
 800a31c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a31e:	f000 be9e 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800a322:	2300      	movs	r3, #0
 800a324:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a326:	f000 be9a 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800a32a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a32e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800a332:	430b      	orrs	r3, r1
 800a334:	d167      	bne.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800a336:	4b5b      	ldr	r3, [pc, #364]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a338:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a33c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a340:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a344:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a348:	d036      	beq.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800a34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a350:	d855      	bhi.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800a352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a354:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a358:	d029      	beq.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800a35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a360:	d84d      	bhi.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800a362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a364:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a368:	d013      	beq.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800a36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a370:	d845      	bhi.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800a372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a374:	2b00      	cmp	r3, #0
 800a376:	d015      	beq.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800a378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a37a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a37e:	d13e      	bne.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a380:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a384:	4618      	mov	r0, r3
 800a386:	f7fe fee1 	bl	800914c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a38e:	f000 be66 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a392:	f107 030c 	add.w	r3, r7, #12
 800a396:	4618      	mov	r0, r3
 800a398:	f7ff f98c 	bl	80096b4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3a0:	f000 be5d 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a3a4:	f7fd fe5a 	bl	800805c <HAL_RCC_GetHCLKFreq>
 800a3a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a3aa:	f000 be58 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a3ae:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a3b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3b4:	f000 be53 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a3b8:	4b3a      	ldr	r3, [pc, #232]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0320 	and.w	r3, r3, #32
 800a3c0:	2b20      	cmp	r3, #32
 800a3c2:	d118      	bne.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a3c4:	4b37      	ldr	r3, [pc, #220]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d005      	beq.n	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800a3d0:	4b34      	ldr	r3, [pc, #208]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	0e1b      	lsrs	r3, r3, #24
 800a3d6:	f003 030f 	and.w	r3, r3, #15
 800a3da:	e006      	b.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a3dc:	4b31      	ldr	r3, [pc, #196]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a3de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a3e2:	041b      	lsls	r3, r3, #16
 800a3e4:	0e1b      	lsrs	r3, r3, #24
 800a3e6:	f003 030f 	and.w	r3, r3, #15
 800a3ea:	4a2f      	ldr	r2, [pc, #188]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a3f2:	f000 be34 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3fa:	f000 be30 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800a3fe:	2300      	movs	r3, #0
 800a400:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a402:	f000 be2c 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800a406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a40a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800a40e:	430b      	orrs	r3, r1
 800a410:	d152      	bne.n	800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a412:	4b24      	ldr	r3, [pc, #144]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a418:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a41c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800a41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a420:	2b00      	cmp	r3, #0
 800a422:	d104      	bne.n	800a42e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a424:	f7fd fe34 	bl	8008090 <HAL_RCC_GetPCLK1Freq>
 800a428:	6378      	str	r0, [r7, #52]	@ 0x34
 800a42a:	f000 be18 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800a42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a434:	d104      	bne.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a436:	f7fd fd0f 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 800a43a:	6378      	str	r0, [r7, #52]	@ 0x34
 800a43c:	f000 be0f 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800a440:	4b18      	ldr	r3, [pc, #96]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a44c:	d107      	bne.n	800a45e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800a44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a450:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a454:	d103      	bne.n	800a45e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800a456:	4b15      	ldr	r3, [pc, #84]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a458:	637b      	str	r3, [r7, #52]	@ 0x34
 800a45a:	f000 be00 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800a45e:	4b11      	ldr	r3, [pc, #68]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 0320 	and.w	r3, r3, #32
 800a466:	2b20      	cmp	r3, #32
 800a468:	d122      	bne.n	800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800a46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a470:	d11e      	bne.n	800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a472:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d005      	beq.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800a47e:	4b09      	ldr	r3, [pc, #36]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	0e1b      	lsrs	r3, r3, #24
 800a484:	f003 030f 	and.w	r3, r3, #15
 800a488:	e006      	b.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800a48a:	4b06      	ldr	r3, [pc, #24]	@ (800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a48c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a490:	041b      	lsls	r3, r3, #16
 800a492:	0e1b      	lsrs	r3, r3, #24
 800a494:	f003 030f 	and.w	r3, r3, #15
 800a498:	4a03      	ldr	r2, [pc, #12]	@ (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a49a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a49e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4a0:	f000 bddd 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a4a4:	46020c00 	.word	0x46020c00
 800a4a8:	0800cd88 	.word	0x0800cd88
 800a4ac:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4b4:	f000 bdd3 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800a4b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4bc:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800a4c0:	430b      	orrs	r3, r1
 800a4c2:	d14c      	bne.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a4c4:	4ba8      	ldr	r3, [pc, #672]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a4c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a4ca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a4ce:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800a4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d104      	bne.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a4d6:	f7fd fddb 	bl	8008090 <HAL_RCC_GetPCLK1Freq>
 800a4da:	6378      	str	r0, [r7, #52]	@ 0x34
 800a4dc:	f000 bdbf 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800a4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4e6:	d104      	bne.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a4e8:	f7fd fcb6 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 800a4ec:	6378      	str	r0, [r7, #52]	@ 0x34
 800a4ee:	f000 bdb6 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800a4f2:	4b9d      	ldr	r3, [pc, #628]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a4fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4fe:	d107      	bne.n	800a510 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800a500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a506:	d103      	bne.n	800a510 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800a508:	4b98      	ldr	r3, [pc, #608]	@ (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a50a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a50c:	f000 bda7 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800a510:	4b95      	ldr	r3, [pc, #596]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 0320 	and.w	r3, r3, #32
 800a518:	2b20      	cmp	r3, #32
 800a51a:	d11c      	bne.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800a51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a522:	d118      	bne.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a524:	4b90      	ldr	r3, [pc, #576]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d005      	beq.n	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800a530:	4b8d      	ldr	r3, [pc, #564]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	0e1b      	lsrs	r3, r3, #24
 800a536:	f003 030f 	and.w	r3, r3, #15
 800a53a:	e006      	b.n	800a54a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800a53c:	4b8a      	ldr	r3, [pc, #552]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a53e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a542:	041b      	lsls	r3, r3, #16
 800a544:	0e1b      	lsrs	r3, r3, #24
 800a546:	f003 030f 	and.w	r3, r3, #15
 800a54a:	4a89      	ldr	r2, [pc, #548]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a54c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a550:	637b      	str	r3, [r7, #52]	@ 0x34
 800a552:	f000 bd84 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800a556:	2300      	movs	r3, #0
 800a558:	637b      	str	r3, [r7, #52]	@ 0x34
 800a55a:	f000 bd80 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800a55e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a562:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a566:	430b      	orrs	r3, r1
 800a568:	d158      	bne.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a56a:	4b7f      	ldr	r3, [pc, #508]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a56c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a570:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a574:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a578:	2bc0      	cmp	r3, #192	@ 0xc0
 800a57a:	d028      	beq.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800a57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a57e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a580:	d848      	bhi.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800a582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a584:	2b80      	cmp	r3, #128	@ 0x80
 800a586:	d00e      	beq.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800a588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58a:	2b80      	cmp	r3, #128	@ 0x80
 800a58c:	d842      	bhi.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800a58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a590:	2b00      	cmp	r3, #0
 800a592:	d003      	beq.n	800a59c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800a594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a596:	2b40      	cmp	r3, #64	@ 0x40
 800a598:	d014      	beq.n	800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800a59a:	e03b      	b.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800a59c:	f7fd fda0 	bl	80080e0 <HAL_RCC_GetPCLK3Freq>
 800a5a0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a5a2:	f000 bd5c 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5a6:	4b70      	ldr	r3, [pc, #448]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5b2:	d103      	bne.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800a5b4:	4b6d      	ldr	r3, [pc, #436]	@ (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a5b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a5b8:	f000 bd51 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a5c0:	f000 bd4d 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800a5c4:	f7fd fc48 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 800a5c8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a5ca:	f000 bd48 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a5ce:	4b66      	ldr	r3, [pc, #408]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f003 0320 	and.w	r3, r3, #32
 800a5d6:	2b20      	cmp	r3, #32
 800a5d8:	d118      	bne.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a5da:	4b63      	ldr	r3, [pc, #396]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d005      	beq.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800a5e6:	4b60      	ldr	r3, [pc, #384]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	0e1b      	lsrs	r3, r3, #24
 800a5ec:	f003 030f 	and.w	r3, r3, #15
 800a5f0:	e006      	b.n	800a600 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800a5f2:	4b5d      	ldr	r3, [pc, #372]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a5f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a5f8:	041b      	lsls	r3, r3, #16
 800a5fa:	0e1b      	lsrs	r3, r3, #24
 800a5fc:	f003 030f 	and.w	r3, r3, #15
 800a600:	4a5b      	ldr	r2, [pc, #364]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a606:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a608:	f000 bd29 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a60c:	2300      	movs	r3, #0
 800a60e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a610:	f000 bd25 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800a614:	2300      	movs	r3, #0
 800a616:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a618:	f000 bd21 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800a61c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a620:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800a624:	430b      	orrs	r3, r1
 800a626:	d14c      	bne.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a628:	4b4f      	ldr	r3, [pc, #316]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a62a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a62e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a632:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800a634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a636:	2b00      	cmp	r3, #0
 800a638:	d104      	bne.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a63a:	f7fd fd29 	bl	8008090 <HAL_RCC_GetPCLK1Freq>
 800a63e:	6378      	str	r0, [r7, #52]	@ 0x34
 800a640:	f000 bd0d 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800a644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a646:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a64a:	d104      	bne.n	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a64c:	f7fd fc04 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 800a650:	6378      	str	r0, [r7, #52]	@ 0x34
 800a652:	f000 bd04 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800a656:	4b44      	ldr	r3, [pc, #272]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a65e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a662:	d107      	bne.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800a664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a666:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a66a:	d103      	bne.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800a66c:	4b3f      	ldr	r3, [pc, #252]	@ (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a66e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a670:	f000 bcf5 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800a674:	4b3c      	ldr	r3, [pc, #240]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0320 	and.w	r3, r3, #32
 800a67c:	2b20      	cmp	r3, #32
 800a67e:	d11c      	bne.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800a680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a682:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a686:	d118      	bne.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a688:	4b37      	ldr	r3, [pc, #220]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a690:	2b00      	cmp	r3, #0
 800a692:	d005      	beq.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800a694:	4b34      	ldr	r3, [pc, #208]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	0e1b      	lsrs	r3, r3, #24
 800a69a:	f003 030f 	and.w	r3, r3, #15
 800a69e:	e006      	b.n	800a6ae <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800a6a0:	4b31      	ldr	r3, [pc, #196]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a6a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a6a6:	041b      	lsls	r3, r3, #16
 800a6a8:	0e1b      	lsrs	r3, r3, #24
 800a6aa:	f003 030f 	and.w	r3, r3, #15
 800a6ae:	4a30      	ldr	r2, [pc, #192]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6b6:	f000 bcd2 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6be:	f000 bcce 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800a6c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6c6:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800a6ca:	430b      	orrs	r3, r1
 800a6cc:	d152      	bne.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800a6ce:	4b26      	ldr	r3, [pc, #152]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a6d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a6d4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800a6d8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800a6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d104      	bne.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a6e0:	f7fd fcd6 	bl	8008090 <HAL_RCC_GetPCLK1Freq>
 800a6e4:	6378      	str	r0, [r7, #52]	@ 0x34
 800a6e6:	f000 bcba 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6f0:	d104      	bne.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a6f2:	f7fd fbb1 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 800a6f6:	6378      	str	r0, [r7, #52]	@ 0x34
 800a6f8:	f000 bcb1 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800a6fc:	4b1a      	ldr	r3, [pc, #104]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a708:	d107      	bne.n	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800a70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a710:	d103      	bne.n	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800a712:	4b16      	ldr	r3, [pc, #88]	@ (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a714:	637b      	str	r3, [r7, #52]	@ 0x34
 800a716:	f000 bca2 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800a71a:	4b13      	ldr	r3, [pc, #76]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 0320 	and.w	r3, r3, #32
 800a722:	2b20      	cmp	r3, #32
 800a724:	d11c      	bne.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800a726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a728:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a72c:	d118      	bne.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a72e:	4b0e      	ldr	r3, [pc, #56]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a736:	2b00      	cmp	r3, #0
 800a738:	d005      	beq.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800a73a:	4b0b      	ldr	r3, [pc, #44]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	0e1b      	lsrs	r3, r3, #24
 800a740:	f003 030f 	and.w	r3, r3, #15
 800a744:	e006      	b.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800a746:	4b08      	ldr	r3, [pc, #32]	@ (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a748:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a74c:	041b      	lsls	r3, r3, #16
 800a74e:	0e1b      	lsrs	r3, r3, #24
 800a750:	f003 030f 	and.w	r3, r3, #15
 800a754:	4a06      	ldr	r2, [pc, #24]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a75a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a75c:	f000 bc7f 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800a760:	2300      	movs	r3, #0
 800a762:	637b      	str	r3, [r7, #52]	@ 0x34
 800a764:	f000 bc7b 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a768:	46020c00 	.word	0x46020c00
 800a76c:	00f42400 	.word	0x00f42400
 800a770:	0800cd88 	.word	0x0800cd88
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800a774:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a778:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800a77c:	430b      	orrs	r3, r1
 800a77e:	d14c      	bne.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800a780:	4ba6      	ldr	r3, [pc, #664]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a782:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a786:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a78a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800a78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d104      	bne.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a792:	f7fd fc7d 	bl	8008090 <HAL_RCC_GetPCLK1Freq>
 800a796:	6378      	str	r0, [r7, #52]	@ 0x34
 800a798:	f000 bc61 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800a79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a7a2:	d104      	bne.n	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a7a4:	f7fd fb58 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 800a7a8:	6378      	str	r0, [r7, #52]	@ 0x34
 800a7aa:	f000 bc58 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800a7ae:	4b9b      	ldr	r3, [pc, #620]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7ba:	d107      	bne.n	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7c2:	d103      	bne.n	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800a7c4:	4b96      	ldr	r3, [pc, #600]	@ (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800a7c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7c8:	f000 bc49 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800a7cc:	4b93      	ldr	r3, [pc, #588]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 0320 	and.w	r3, r3, #32
 800a7d4:	2b20      	cmp	r3, #32
 800a7d6:	d11c      	bne.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7da:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a7de:	d118      	bne.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a7e0:	4b8e      	ldr	r3, [pc, #568]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d005      	beq.n	800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800a7ec:	4b8b      	ldr	r3, [pc, #556]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	0e1b      	lsrs	r3, r3, #24
 800a7f2:	f003 030f 	and.w	r3, r3, #15
 800a7f6:	e006      	b.n	800a806 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800a7f8:	4b88      	ldr	r3, [pc, #544]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a7fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a7fe:	041b      	lsls	r3, r3, #16
 800a800:	0e1b      	lsrs	r3, r3, #24
 800a802:	f003 030f 	and.w	r3, r3, #15
 800a806:	4a87      	ldr	r2, [pc, #540]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800a808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a80c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a80e:	f000 bc26 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800a812:	2300      	movs	r3, #0
 800a814:	637b      	str	r3, [r7, #52]	@ 0x34
 800a816:	f000 bc22 	b.w	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800a81a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a81e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a822:	430b      	orrs	r3, r1
 800a824:	d164      	bne.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800a826:	4b7d      	ldr	r3, [pc, #500]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a82c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a830:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800a832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a834:	2b00      	cmp	r3, #0
 800a836:	d120      	bne.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a838:	4b78      	ldr	r3, [pc, #480]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 0320 	and.w	r3, r3, #32
 800a840:	2b20      	cmp	r3, #32
 800a842:	d117      	bne.n	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a844:	4b75      	ldr	r3, [pc, #468]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d005      	beq.n	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800a850:	4b72      	ldr	r3, [pc, #456]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	0e1b      	lsrs	r3, r3, #24
 800a856:	f003 030f 	and.w	r3, r3, #15
 800a85a:	e006      	b.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800a85c:	4b6f      	ldr	r3, [pc, #444]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a85e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a862:	041b      	lsls	r3, r3, #16
 800a864:	0e1b      	lsrs	r3, r3, #24
 800a866:	f003 030f 	and.w	r3, r3, #15
 800a86a:	4a6e      	ldr	r2, [pc, #440]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800a86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a870:	637b      	str	r3, [r7, #52]	@ 0x34
 800a872:	e3f4      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800a874:	2300      	movs	r3, #0
 800a876:	637b      	str	r3, [r7, #52]	@ 0x34
 800a878:	e3f1      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800a87a:	4b68      	ldr	r3, [pc, #416]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a87c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a884:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a888:	d112      	bne.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800a88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a890:	d10e      	bne.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a892:	4b62      	ldr	r3, [pc, #392]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a89c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8a0:	d102      	bne.n	800a8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800a8a2:	23fa      	movs	r3, #250	@ 0xfa
 800a8a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a8a6:	e3da      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800a8a8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a8ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a8ae:	e3d6      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800a8b0:	4b5a      	ldr	r3, [pc, #360]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a8b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8bc:	d106      	bne.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800a8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8c4:	d102      	bne.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800a8c6:	4b56      	ldr	r3, [pc, #344]	@ (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800a8c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8ca:	e3c8      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800a8cc:	4b53      	ldr	r3, [pc, #332]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a8ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a8d2:	f003 0302 	and.w	r3, r3, #2
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d107      	bne.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800a8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8e0:	d103      	bne.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800a8e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8e8:	e3b9      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8ee:	e3b6      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800a8f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8f4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a8f8:	430b      	orrs	r3, r1
 800a8fa:	d164      	bne.n	800a9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a8fc:	4b47      	ldr	r3, [pc, #284]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a8fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a902:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a906:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800a908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d120      	bne.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a90e:	4b43      	ldr	r3, [pc, #268]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0320 	and.w	r3, r3, #32
 800a916:	2b20      	cmp	r3, #32
 800a918:	d117      	bne.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a91a:	4b40      	ldr	r3, [pc, #256]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a922:	2b00      	cmp	r3, #0
 800a924:	d005      	beq.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800a926:	4b3d      	ldr	r3, [pc, #244]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	0e1b      	lsrs	r3, r3, #24
 800a92c:	f003 030f 	and.w	r3, r3, #15
 800a930:	e006      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800a932:	4b3a      	ldr	r3, [pc, #232]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a938:	041b      	lsls	r3, r3, #16
 800a93a:	0e1b      	lsrs	r3, r3, #24
 800a93c:	f003 030f 	and.w	r3, r3, #15
 800a940:	4a38      	ldr	r2, [pc, #224]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800a942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a946:	637b      	str	r3, [r7, #52]	@ 0x34
 800a948:	e389      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800a94a:	2300      	movs	r3, #0
 800a94c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a94e:	e386      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800a950:	4b32      	ldr	r3, [pc, #200]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a956:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a95a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a95e:	d112      	bne.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800a960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a966:	d10e      	bne.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a968:	4b2c      	ldr	r3, [pc, #176]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a96a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a96e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a972:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a976:	d102      	bne.n	800a97e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800a978:	23fa      	movs	r3, #250	@ 0xfa
 800a97a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a97c:	e36f      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800a97e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a982:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a984:	e36b      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800a986:	4b25      	ldr	r3, [pc, #148]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a98e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a992:	d106      	bne.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800a994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a996:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a99a:	d102      	bne.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800a99c:	4b20      	ldr	r3, [pc, #128]	@ (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800a99e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9a0:	e35d      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800a9a2:	4b1e      	ldr	r3, [pc, #120]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a9a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9a8:	f003 0302 	and.w	r3, r3, #2
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d107      	bne.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800a9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a9b6:	d103      	bne.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800a9b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9be:	e34e      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9c4:	e34b      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800a9c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9ca:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a9ce:	430b      	orrs	r3, r1
 800a9d0:	d14e      	bne.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a9d2:	4b12      	ldr	r3, [pc, #72]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a9d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a9d8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800a9dc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800a9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d103      	bne.n	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a9e4:	f7fd fb54 	bl	8008090 <HAL_RCC_GetPCLK1Freq>
 800a9e8:	6378      	str	r0, [r7, #52]	@ 0x34
 800a9ea:	e338      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800a9ec:	4b0b      	ldr	r3, [pc, #44]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a9ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9fa:	d119      	bne.n	800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800a9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa02:	d115      	bne.n	800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa04:	4b05      	ldr	r3, [pc, #20]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aa06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa12:	d109      	bne.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800aa14:	23fa      	movs	r3, #250	@ 0xfa
 800aa16:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa18:	e321      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800aa1a:	bf00      	nop
 800aa1c:	46020c00 	.word	0x46020c00
 800aa20:	00f42400 	.word	0x00f42400
 800aa24:	0800cd88 	.word	0x0800cd88
      }
      else
      {
        frequency = LSI_VALUE;
 800aa28:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800aa2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa2e:	e316      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800aa30:	4ba8      	ldr	r3, [pc, #672]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa3c:	d106      	bne.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa40:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800aa44:	d102      	bne.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800aa46:	4ba4      	ldr	r3, [pc, #656]	@ (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800aa48:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa4a:	e308      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800aa4c:	4ba1      	ldr	r3, [pc, #644]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aa4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa52:	f003 0302 	and.w	r3, r3, #2
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d107      	bne.n	800aa6a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800aa60:	d103      	bne.n	800aa6a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800aa62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa66:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa68:	e2f9      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa6e:	e2f6      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800aa70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa74:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800aa78:	430b      	orrs	r3, r1
 800aa7a:	d12d      	bne.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800aa7c:	4b95      	ldr	r3, [pc, #596]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aa7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aa82:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800aa86:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800aa88:	4b92      	ldr	r3, [pc, #584]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa94:	d105      	bne.n	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800aa96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d102      	bne.n	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800aa9c:	4b8e      	ldr	r3, [pc, #568]	@ (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800aa9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaa0:	e2dd      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aaa8:	d107      	bne.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aaaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fe fb4c 	bl	800914c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800aab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aab8:	e2d1      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800aaba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aabc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aac0:	d107      	bne.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aac2:	f107 0318 	add.w	r3, r7, #24
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7fe fc9a 	bl	8009400 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	637b      	str	r3, [r7, #52]	@ 0x34
 800aad0:	e2c5      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800aad2:	2300      	movs	r3, #0
 800aad4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aad6:	e2c2      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800aad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aadc:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800aae0:	430b      	orrs	r3, r1
 800aae2:	d156      	bne.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800aae4:	4b7b      	ldr	r3, [pc, #492]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aaea:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800aaee:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800aaf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aaf6:	d028      	beq.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aafe:	d845      	bhi.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800ab00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab06:	d013      	beq.n	800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800ab08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab0e:	d83d      	bhi.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800ab10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d004      	beq.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800ab16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab1c:	d004      	beq.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800ab1e:	e035      	b.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800ab20:	f7fd faca 	bl	80080b8 <HAL_RCC_GetPCLK2Freq>
 800ab24:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ab26:	e29a      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ab28:	f7fd f996 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 800ab2c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ab2e:	e296      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab30:	4b68      	ldr	r3, [pc, #416]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab3c:	d102      	bne.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800ab3e:	4b66      	ldr	r3, [pc, #408]	@ (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800ab40:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ab42:	e28c      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ab44:	2300      	movs	r3, #0
 800ab46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab48:	e289      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ab4a:	4b62      	ldr	r3, [pc, #392]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 0320 	and.w	r3, r3, #32
 800ab52:	2b20      	cmp	r3, #32
 800ab54:	d117      	bne.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ab56:	4b5f      	ldr	r3, [pc, #380]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d005      	beq.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800ab62:	4b5c      	ldr	r3, [pc, #368]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	0e1b      	lsrs	r3, r3, #24
 800ab68:	f003 030f 	and.w	r3, r3, #15
 800ab6c:	e006      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800ab6e:	4b59      	ldr	r3, [pc, #356]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ab70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ab74:	041b      	lsls	r3, r3, #16
 800ab76:	0e1b      	lsrs	r3, r3, #24
 800ab78:	f003 030f 	and.w	r3, r3, #15
 800ab7c:	4a57      	ldr	r2, [pc, #348]	@ (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800ab7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab82:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ab84:	e26b      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ab86:	2300      	movs	r3, #0
 800ab88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab8a:	e268      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab90:	e265      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800ab92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab96:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800ab9a:	430b      	orrs	r3, r1
 800ab9c:	d156      	bne.n	800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800ab9e:	4b4d      	ldr	r3, [pc, #308]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aba4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aba8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800abaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800abb0:	d028      	beq.n	800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800abb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800abb8:	d845      	bhi.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800abba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abc0:	d013      	beq.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800abc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abc8:	d83d      	bhi.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800abca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d004      	beq.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800abd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abd6:	d004      	beq.n	800abe2 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800abd8:	e035      	b.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800abda:	f7fd fa59 	bl	8008090 <HAL_RCC_GetPCLK1Freq>
 800abde:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800abe0:	e23d      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800abe2:	f7fd f939 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 800abe6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800abe8:	e239      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800abea:	4b3a      	ldr	r3, [pc, #232]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800abf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abf6:	d102      	bne.n	800abfe <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800abf8:	4b37      	ldr	r3, [pc, #220]	@ (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800abfa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800abfc:	e22f      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800abfe:	2300      	movs	r3, #0
 800ac00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac02:	e22c      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ac04:	4b33      	ldr	r3, [pc, #204]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 0320 	and.w	r3, r3, #32
 800ac0c:	2b20      	cmp	r3, #32
 800ac0e:	d117      	bne.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ac10:	4b30      	ldr	r3, [pc, #192]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d005      	beq.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800ac1c:	4b2d      	ldr	r3, [pc, #180]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	0e1b      	lsrs	r3, r3, #24
 800ac22:	f003 030f 	and.w	r3, r3, #15
 800ac26:	e006      	b.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800ac28:	4b2a      	ldr	r3, [pc, #168]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ac2e:	041b      	lsls	r3, r3, #16
 800ac30:	0e1b      	lsrs	r3, r3, #24
 800ac32:	f003 030f 	and.w	r3, r3, #15
 800ac36:	4a29      	ldr	r2, [pc, #164]	@ (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800ac38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac3c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ac3e:	e20e      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ac40:	2300      	movs	r3, #0
 800ac42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac44:	e20b      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ac46:	2300      	movs	r3, #0
 800ac48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac4a:	e208      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800ac4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac50:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800ac54:	430b      	orrs	r3, r1
 800ac56:	d17c      	bne.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800ac58:	4b1e      	ldr	r3, [pc, #120]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ac5e:	f003 0318 	and.w	r3, r3, #24
 800ac62:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800ac64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac66:	2b18      	cmp	r3, #24
 800ac68:	d870      	bhi.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800ac6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800ac6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac70:	0800ace1 	.word	0x0800ace1
 800ac74:	0800ad4d 	.word	0x0800ad4d
 800ac78:	0800ad4d 	.word	0x0800ad4d
 800ac7c:	0800ad4d 	.word	0x0800ad4d
 800ac80:	0800ad4d 	.word	0x0800ad4d
 800ac84:	0800ad4d 	.word	0x0800ad4d
 800ac88:	0800ad4d 	.word	0x0800ad4d
 800ac8c:	0800ad4d 	.word	0x0800ad4d
 800ac90:	0800ace9 	.word	0x0800ace9
 800ac94:	0800ad4d 	.word	0x0800ad4d
 800ac98:	0800ad4d 	.word	0x0800ad4d
 800ac9c:	0800ad4d 	.word	0x0800ad4d
 800aca0:	0800ad4d 	.word	0x0800ad4d
 800aca4:	0800ad4d 	.word	0x0800ad4d
 800aca8:	0800ad4d 	.word	0x0800ad4d
 800acac:	0800ad4d 	.word	0x0800ad4d
 800acb0:	0800acf1 	.word	0x0800acf1
 800acb4:	0800ad4d 	.word	0x0800ad4d
 800acb8:	0800ad4d 	.word	0x0800ad4d
 800acbc:	0800ad4d 	.word	0x0800ad4d
 800acc0:	0800ad4d 	.word	0x0800ad4d
 800acc4:	0800ad4d 	.word	0x0800ad4d
 800acc8:	0800ad4d 	.word	0x0800ad4d
 800accc:	0800ad4d 	.word	0x0800ad4d
 800acd0:	0800ad0b 	.word	0x0800ad0b
 800acd4:	46020c00 	.word	0x46020c00
 800acd8:	00f42400 	.word	0x00f42400
 800acdc:	0800cd88 	.word	0x0800cd88
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800ace0:	f7fd f9fe 	bl	80080e0 <HAL_RCC_GetPCLK3Freq>
 800ace4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ace6:	e1ba      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ace8:	f7fd f8b6 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 800acec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800acee:	e1b6      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800acf0:	4b9f      	ldr	r3, [pc, #636]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800acf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acfc:	d102      	bne.n	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800acfe:	4b9d      	ldr	r3, [pc, #628]	@ (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800ad00:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ad02:	e1ac      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ad04:	2300      	movs	r3, #0
 800ad06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad08:	e1a9      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ad0a:	4b99      	ldr	r3, [pc, #612]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 0320 	and.w	r3, r3, #32
 800ad12:	2b20      	cmp	r3, #32
 800ad14:	d117      	bne.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ad16:	4b96      	ldr	r3, [pc, #600]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d005      	beq.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800ad22:	4b93      	ldr	r3, [pc, #588]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	0e1b      	lsrs	r3, r3, #24
 800ad28:	f003 030f 	and.w	r3, r3, #15
 800ad2c:	e006      	b.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800ad2e:	4b90      	ldr	r3, [pc, #576]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ad30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ad34:	041b      	lsls	r3, r3, #16
 800ad36:	0e1b      	lsrs	r3, r3, #24
 800ad38:	f003 030f 	and.w	r3, r3, #15
 800ad3c:	4a8e      	ldr	r2, [pc, #568]	@ (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800ad3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad42:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ad44:	e18b      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ad46:	2300      	movs	r3, #0
 800ad48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad4a:	e188      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad50:	e185      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800ad52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad56:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800ad5a:	430b      	orrs	r3, r1
 800ad5c:	d155      	bne.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800ad5e:	4b84      	ldr	r3, [pc, #528]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ad60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ad64:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800ad68:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ad70:	d013      	beq.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800ad72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ad78:	d844      	bhi.n	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad80:	d013      	beq.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800ad82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad88:	d83c      	bhi.n	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d014      	beq.n	800adba <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800ad90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad96:	d014      	beq.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800ad98:	e034      	b.n	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad9a:	f107 0318 	add.w	r3, r7, #24
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7fe fb2e 	bl	8009400 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ada8:	e159      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fe f9cc 	bl	800914c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800adb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800adb8:	e151      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800adba:	f7fd f84d 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 800adbe:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800adc0:	e14d      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800adc2:	4b6b      	ldr	r3, [pc, #428]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 0320 	and.w	r3, r3, #32
 800adca:	2b20      	cmp	r3, #32
 800adcc:	d117      	bne.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800adce:	4b68      	ldr	r3, [pc, #416]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800add6:	2b00      	cmp	r3, #0
 800add8:	d005      	beq.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800adda:	4b65      	ldr	r3, [pc, #404]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	0e1b      	lsrs	r3, r3, #24
 800ade0:	f003 030f 	and.w	r3, r3, #15
 800ade4:	e006      	b.n	800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800ade6:	4b62      	ldr	r3, [pc, #392]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ade8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800adec:	041b      	lsls	r3, r3, #16
 800adee:	0e1b      	lsrs	r3, r3, #24
 800adf0:	f003 030f 	and.w	r3, r3, #15
 800adf4:	4a60      	ldr	r2, [pc, #384]	@ (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800adf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adfa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800adfc:	e12f      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800adfe:	2300      	movs	r3, #0
 800ae00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae02:	e12c      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ae04:	2300      	movs	r3, #0
 800ae06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae08:	e129      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800ae0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae0e:	1e59      	subs	r1, r3, #1
 800ae10:	ea52 0301 	orrs.w	r3, r2, r1
 800ae14:	d13c      	bne.n	800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800ae16:	4b56      	ldr	r3, [pc, #344]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ae18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ae1c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800ae20:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ae22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae24:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ae28:	d027      	beq.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800ae2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae2c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ae30:	d82b      	bhi.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800ae32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ae38:	d017      	beq.n	800ae6a <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ae40:	d823      	bhi.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800ae42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d004      	beq.n	800ae52 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800ae48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae4e:	d004      	beq.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800ae50:	e01b      	b.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ae52:	f7fd f801 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 800ae56:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ae58:	e101      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7fe f974 	bl	800914c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae68:	e0f9      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae6a:	f107 0318 	add.w	r3, r7, #24
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fe fac6 	bl	8009400 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae78:	e0f1      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae7a:	f107 030c 	add.w	r3, r7, #12
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fe fc18 	bl	80096b4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae88:	e0e9      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae8e:	e0e6      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800ae90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae94:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800ae98:	430b      	orrs	r3, r1
 800ae9a:	d131      	bne.n	800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800ae9c:	4b34      	ldr	r3, [pc, #208]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ae9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aea2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aea6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800aea8:	4b31      	ldr	r3, [pc, #196]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800aeaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aeae:	f003 0302 	and.w	r3, r3, #2
 800aeb2:	2b02      	cmp	r3, #2
 800aeb4:	d106      	bne.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d103      	bne.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800aebc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aec0:	637b      	str	r3, [r7, #52]	@ 0x34
 800aec2:	e0cc      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800aec4:	4b2a      	ldr	r3, [pc, #168]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800aec6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aeca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aece:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aed2:	d112      	bne.n	800aefa <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800aed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aeda:	d10e      	bne.n	800aefa <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aedc:	4b24      	ldr	r3, [pc, #144]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800aede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aee6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aeea:	d102      	bne.n	800aef2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800aeec:	23fa      	movs	r3, #250	@ 0xfa
 800aeee:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aef0:	e0b5      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800aef2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800aef6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aef8:	e0b1      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800aefa:	2300      	movs	r3, #0
 800aefc:	637b      	str	r3, [r7, #52]	@ 0x34
 800aefe:	e0ae      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800af00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af04:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800af08:	430b      	orrs	r3, r1
 800af0a:	d13b      	bne.n	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800af0c:	4b18      	ldr	r3, [pc, #96]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800af0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800af12:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800af16:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800af18:	4b15      	ldr	r3, [pc, #84]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800af20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af24:	d105      	bne.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800af26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d102      	bne.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800af2c:	4b13      	ldr	r3, [pc, #76]	@ (800af7c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800af2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800af30:	e095      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800af32:	4b0f      	ldr	r3, [pc, #60]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800af3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af3e:	d106      	bne.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800af40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af46:	d102      	bne.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800af48:	4b0d      	ldr	r3, [pc, #52]	@ (800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800af4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800af4c:	e087      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800af4e:	4b08      	ldr	r3, [pc, #32]	@ (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af5a:	d106      	bne.n	800af6a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800af5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af62:	d102      	bne.n	800af6a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800af64:	4b03      	ldr	r3, [pc, #12]	@ (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800af66:	637b      	str	r3, [r7, #52]	@ 0x34
 800af68:	e079      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800af6a:	2300      	movs	r3, #0
 800af6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af6e:	e076      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800af70:	46020c00 	.word	0x46020c00
 800af74:	00f42400 	.word	0x00f42400
 800af78:	0800cd88 	.word	0x0800cd88
 800af7c:	02dc6c00 	.word	0x02dc6c00
 800af80:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800af84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af88:	1e99      	subs	r1, r3, #2
 800af8a:	ea52 0301 	orrs.w	r3, r2, r1
 800af8e:	d120      	bne.n	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800af90:	4b35      	ldr	r3, [pc, #212]	@ (800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800af92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800af96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800af9a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800af9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d004      	beq.n	800afac <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800afa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800afa8:	d008      	beq.n	800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800afaa:	e00f      	b.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afac:	f107 030c 	add.w	r3, r7, #12
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7fe fb7f 	bl	80096b4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afba:	e050      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afbc:	f107 0318 	add.w	r3, r7, #24
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7fe fa1d 	bl	8009400 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800afc6:	6a3b      	ldr	r3, [r7, #32]
 800afc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afca:	e048      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800afcc:	2300      	movs	r3, #0
 800afce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afd0:	e045      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800afd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afd6:	f1a3 0108 	sub.w	r1, r3, #8
 800afda:	ea52 0301 	orrs.w	r3, r2, r1
 800afde:	d13c      	bne.n	800b05a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800afe0:	4b21      	ldr	r3, [pc, #132]	@ (800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800afe2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800afe6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800afea:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800afec:	4b1e      	ldr	r3, [pc, #120]	@ (800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aff4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aff8:	d105      	bne.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800affa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affc:	2b00      	cmp	r3, #0
 800affe:	d102      	bne.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800b000:	4b1a      	ldr	r3, [pc, #104]	@ (800b06c <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800b002:	637b      	str	r3, [r7, #52]	@ 0x34
 800b004:	e02b      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800b006:	4b18      	ldr	r3, [pc, #96]	@ (800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b00e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b012:	d106      	bne.n	800b022 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800b014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b016:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b01a:	d102      	bne.n	800b022 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800b01c:	4b14      	ldr	r3, [pc, #80]	@ (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800b01e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b020:	e01d      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800b022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b028:	d107      	bne.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b02a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fe f88c 	bl	800914c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b036:	637b      	str	r3, [r7, #52]	@ 0x34
 800b038:	e011      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800b03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b040:	d108      	bne.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b046:	4618      	mov	r0, r3
 800b048:	f7fe f880 	bl	800914c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800b04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04e:	085b      	lsrs	r3, r3, #1
 800b050:	637b      	str	r3, [r7, #52]	@ 0x34
 800b052:	e004      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800b054:	2300      	movs	r3, #0
 800b056:	637b      	str	r3, [r7, #52]	@ 0x34
 800b058:	e001      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800b05a:	2300      	movs	r3, #0
 800b05c:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800b05e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b060:	4618      	mov	r0, r3
 800b062:	3738      	adds	r7, #56	@ 0x38
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	46020c00 	.word	0x46020c00
 800b06c:	00f42400 	.word	0x00f42400
 800b070:	007a1200 	.word	0x007a1200

0800b074 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800b074:	b480      	push	{r7}
 800b076:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800b078:	4b06      	ldr	r3, [pc, #24]	@ (800b094 <HAL_RCCEx_EnableLSECSS+0x20>)
 800b07a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b07e:	4a05      	ldr	r2, [pc, #20]	@ (800b094 <HAL_RCCEx_EnableLSECSS+0x20>)
 800b080:	f043 0320 	orr.w	r3, r3, #32
 800b084:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 800b088:	bf00      	nop
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	46020c00 	.word	0x46020c00

0800b098 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800b0a0:	4b47      	ldr	r3, [pc, #284]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a46      	ldr	r2, [pc, #280]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b0a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b0aa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b0ac:	f7f7 ff66 	bl	8002f7c <HAL_GetTick>
 800b0b0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0b2:	e008      	b.n	800b0c6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b0b4:	f7f7 ff62 	bl	8002f7c <HAL_GetTick>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	1ad3      	subs	r3, r2, r3
 800b0be:	2b02      	cmp	r3, #2
 800b0c0:	d901      	bls.n	800b0c6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	e077      	b.n	800b1b6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0c6:	4b3e      	ldr	r3, [pc, #248]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1f0      	bne.n	800b0b4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b0d2:	4b3b      	ldr	r3, [pc, #236]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b0da:	f023 0303 	bic.w	r3, r3, #3
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	6811      	ldr	r1, [r2, #0]
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	6852      	ldr	r2, [r2, #4]
 800b0e6:	3a01      	subs	r2, #1
 800b0e8:	0212      	lsls	r2, r2, #8
 800b0ea:	430a      	orrs	r2, r1
 800b0ec:	4934      	ldr	r1, [pc, #208]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800b0f2:	4b33      	ldr	r3, [pc, #204]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b0f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b0f6:	4b33      	ldr	r3, [pc, #204]	@ (800b1c4 <RCCEx_PLL2_Config+0x12c>)
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	6892      	ldr	r2, [r2, #8]
 800b0fe:	3a01      	subs	r2, #1
 800b100:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	68d2      	ldr	r2, [r2, #12]
 800b108:	3a01      	subs	r2, #1
 800b10a:	0252      	lsls	r2, r2, #9
 800b10c:	b292      	uxth	r2, r2
 800b10e:	4311      	orrs	r1, r2
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	6912      	ldr	r2, [r2, #16]
 800b114:	3a01      	subs	r2, #1
 800b116:	0412      	lsls	r2, r2, #16
 800b118:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b11c:	4311      	orrs	r1, r2
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	6952      	ldr	r2, [r2, #20]
 800b122:	3a01      	subs	r2, #1
 800b124:	0612      	lsls	r2, r2, #24
 800b126:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b12a:	430a      	orrs	r2, r1
 800b12c:	4924      	ldr	r1, [pc, #144]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b12e:	4313      	orrs	r3, r2
 800b130:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b132:	4b23      	ldr	r3, [pc, #140]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b136:	f023 020c 	bic.w	r2, r3, #12
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	699b      	ldr	r3, [r3, #24]
 800b13e:	4920      	ldr	r1, [pc, #128]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b140:	4313      	orrs	r3, r2
 800b142:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b144:	4b1e      	ldr	r3, [pc, #120]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a1b      	ldr	r3, [r3, #32]
 800b14c:	491c      	ldr	r1, [pc, #112]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b14e:	4313      	orrs	r3, r2
 800b150:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800b152:	4b1b      	ldr	r3, [pc, #108]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b156:	4a1a      	ldr	r2, [pc, #104]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b158:	f023 0310 	bic.w	r3, r3, #16
 800b15c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b15e:	4b18      	ldr	r3, [pc, #96]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b162:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b166:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	69d2      	ldr	r2, [r2, #28]
 800b16e:	00d2      	lsls	r2, r2, #3
 800b170:	4913      	ldr	r1, [pc, #76]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b172:	4313      	orrs	r3, r2
 800b174:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800b176:	4b12      	ldr	r3, [pc, #72]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b17a:	4a11      	ldr	r2, [pc, #68]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b17c:	f043 0310 	orr.w	r3, r3, #16
 800b180:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800b182:	4b0f      	ldr	r3, [pc, #60]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a0e      	ldr	r2, [pc, #56]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b188:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b18c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b18e:	f7f7 fef5 	bl	8002f7c <HAL_GetTick>
 800b192:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b194:	e008      	b.n	800b1a8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b196:	f7f7 fef1 	bl	8002f7c <HAL_GetTick>
 800b19a:	4602      	mov	r2, r0
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	1ad3      	subs	r3, r2, r3
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d901      	bls.n	800b1a8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	e006      	b.n	800b1b6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1a8:	4b05      	ldr	r3, [pc, #20]	@ (800b1c0 <RCCEx_PLL2_Config+0x128>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d0f0      	beq.n	800b196 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800b1b4:	2300      	movs	r3, #0

}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	46020c00 	.word	0x46020c00
 800b1c4:	80800000 	.word	0x80800000

0800b1c8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800b1d0:	4b47      	ldr	r3, [pc, #284]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a46      	ldr	r2, [pc, #280]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b1d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b1da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b1dc:	f7f7 fece 	bl	8002f7c <HAL_GetTick>
 800b1e0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b1e2:	e008      	b.n	800b1f6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b1e4:	f7f7 feca 	bl	8002f7c <HAL_GetTick>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d901      	bls.n	800b1f6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b1f2:	2303      	movs	r3, #3
 800b1f4:	e077      	b.n	800b2e6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b1f6:	4b3e      	ldr	r3, [pc, #248]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1f0      	bne.n	800b1e4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800b202:	4b3b      	ldr	r3, [pc, #236]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b206:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b20a:	f023 0303 	bic.w	r3, r3, #3
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	6811      	ldr	r1, [r2, #0]
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	6852      	ldr	r2, [r2, #4]
 800b216:	3a01      	subs	r2, #1
 800b218:	0212      	lsls	r2, r2, #8
 800b21a:	430a      	orrs	r2, r1
 800b21c:	4934      	ldr	r1, [pc, #208]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b21e:	4313      	orrs	r3, r2
 800b220:	630b      	str	r3, [r1, #48]	@ 0x30
 800b222:	4b33      	ldr	r3, [pc, #204]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b224:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b226:	4b33      	ldr	r3, [pc, #204]	@ (800b2f4 <RCCEx_PLL3_Config+0x12c>)
 800b228:	4013      	ands	r3, r2
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	6892      	ldr	r2, [r2, #8]
 800b22e:	3a01      	subs	r2, #1
 800b230:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	68d2      	ldr	r2, [r2, #12]
 800b238:	3a01      	subs	r2, #1
 800b23a:	0252      	lsls	r2, r2, #9
 800b23c:	b292      	uxth	r2, r2
 800b23e:	4311      	orrs	r1, r2
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	6912      	ldr	r2, [r2, #16]
 800b244:	3a01      	subs	r2, #1
 800b246:	0412      	lsls	r2, r2, #16
 800b248:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b24c:	4311      	orrs	r1, r2
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	6952      	ldr	r2, [r2, #20]
 800b252:	3a01      	subs	r2, #1
 800b254:	0612      	lsls	r2, r2, #24
 800b256:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b25a:	430a      	orrs	r2, r1
 800b25c:	4924      	ldr	r1, [pc, #144]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b25e:	4313      	orrs	r3, r2
 800b260:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800b262:	4b23      	ldr	r3, [pc, #140]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b266:	f023 020c 	bic.w	r2, r3, #12
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	699b      	ldr	r3, [r3, #24]
 800b26e:	4920      	ldr	r1, [pc, #128]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b270:	4313      	orrs	r3, r2
 800b272:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800b274:	4b1e      	ldr	r3, [pc, #120]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b276:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6a1b      	ldr	r3, [r3, #32]
 800b27c:	491c      	ldr	r1, [pc, #112]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b27e:	4313      	orrs	r3, r2
 800b280:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800b282:	4b1b      	ldr	r3, [pc, #108]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b286:	4a1a      	ldr	r2, [pc, #104]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b288:	f023 0310 	bic.w	r3, r3, #16
 800b28c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b28e:	4b18      	ldr	r3, [pc, #96]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b292:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b296:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	69d2      	ldr	r2, [r2, #28]
 800b29e:	00d2      	lsls	r2, r2, #3
 800b2a0:	4913      	ldr	r1, [pc, #76]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800b2a6:	4b12      	ldr	r3, [pc, #72]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b2a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2aa:	4a11      	ldr	r2, [pc, #68]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b2ac:	f043 0310 	orr.w	r3, r3, #16
 800b2b0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800b2b2:	4b0f      	ldr	r3, [pc, #60]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a0e      	ldr	r2, [pc, #56]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b2b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b2bc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b2be:	f7f7 fe5d 	bl	8002f7c <HAL_GetTick>
 800b2c2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b2c4:	e008      	b.n	800b2d8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b2c6:	f7f7 fe59 	bl	8002f7c <HAL_GetTick>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d901      	bls.n	800b2d8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	e006      	b.n	800b2e6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b2d8:	4b05      	ldr	r3, [pc, #20]	@ (800b2f0 <RCCEx_PLL3_Config+0x128>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d0f0      	beq.n	800b2c6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	46020c00 	.word	0x46020c00
 800b2f4:	80800000 	.word	0x80800000

0800b2f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d071      	beq.n	800b3ee <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b310:	b2db      	uxtb	r3, r3
 800b312:	2b00      	cmp	r3, #0
 800b314:	d106      	bne.n	800b324 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f7f7 fbac 	bl	8002a7c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2202      	movs	r2, #2
 800b328:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b32c:	4b32      	ldr	r3, [pc, #200]	@ (800b3f8 <HAL_RTC_Init+0x100>)
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	f003 0310 	and.w	r3, r3, #16
 800b334:	2b10      	cmp	r3, #16
 800b336:	d051      	beq.n	800b3dc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b338:	4b2f      	ldr	r3, [pc, #188]	@ (800b3f8 <HAL_RTC_Init+0x100>)
 800b33a:	22ca      	movs	r2, #202	@ 0xca
 800b33c:	625a      	str	r2, [r3, #36]	@ 0x24
 800b33e:	4b2e      	ldr	r3, [pc, #184]	@ (800b3f8 <HAL_RTC_Init+0x100>)
 800b340:	2253      	movs	r2, #83	@ 0x53
 800b342:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 f9ad 	bl	800b6a4 <RTC_EnterInitMode>
 800b34a:	4603      	mov	r3, r0
 800b34c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800b34e:	7bfb      	ldrb	r3, [r7, #15]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d13f      	bne.n	800b3d4 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800b354:	4b28      	ldr	r3, [pc, #160]	@ (800b3f8 <HAL_RTC_Init+0x100>)
 800b356:	699b      	ldr	r3, [r3, #24]
 800b358:	4a27      	ldr	r2, [pc, #156]	@ (800b3f8 <HAL_RTC_Init+0x100>)
 800b35a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800b35e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b362:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800b364:	4b24      	ldr	r3, [pc, #144]	@ (800b3f8 <HAL_RTC_Init+0x100>)
 800b366:	699a      	ldr	r2, [r3, #24]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6859      	ldr	r1, [r3, #4]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	691b      	ldr	r3, [r3, #16]
 800b370:	4319      	orrs	r1, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	699b      	ldr	r3, [r3, #24]
 800b376:	430b      	orrs	r3, r1
 800b378:	491f      	ldr	r1, [pc, #124]	@ (800b3f8 <HAL_RTC_Init+0x100>)
 800b37a:	4313      	orrs	r3, r2
 800b37c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	68da      	ldr	r2, [r3, #12]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	041b      	lsls	r3, r3, #16
 800b388:	491b      	ldr	r1, [pc, #108]	@ (800b3f8 <HAL_RTC_Init+0x100>)
 800b38a:	4313      	orrs	r3, r2
 800b38c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800b38e:	4b1a      	ldr	r3, [pc, #104]	@ (800b3f8 <HAL_RTC_Init+0x100>)
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b39e:	430b      	orrs	r3, r1
 800b3a0:	4915      	ldr	r1, [pc, #84]	@ (800b3f8 <HAL_RTC_Init+0x100>)
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 f9b8 	bl	800b71c <RTC_ExitInitMode>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d10e      	bne.n	800b3d4 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800b3b6:	4b10      	ldr	r3, [pc, #64]	@ (800b3f8 <HAL_RTC_Init+0x100>)
 800b3b8:	699b      	ldr	r3, [r3, #24]
 800b3ba:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a19      	ldr	r1, [r3, #32]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	69db      	ldr	r3, [r3, #28]
 800b3c6:	4319      	orrs	r1, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	695b      	ldr	r3, [r3, #20]
 800b3cc:	430b      	orrs	r3, r1
 800b3ce:	490a      	ldr	r1, [pc, #40]	@ (800b3f8 <HAL_RTC_Init+0x100>)
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b3d4:	4b08      	ldr	r3, [pc, #32]	@ (800b3f8 <HAL_RTC_Init+0x100>)
 800b3d6:	22ff      	movs	r2, #255	@ 0xff
 800b3d8:	625a      	str	r2, [r3, #36]	@ 0x24
 800b3da:	e001      	b.n	800b3e0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b3e0:	7bfb      	ldrb	r3, [r7, #15]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d103      	bne.n	800b3ee <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800b3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	46007800 	.word	0x46007800

0800b3fc <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b3fc:	b590      	push	{r4, r7, lr}
 800b3fe:	b087      	sub	sp, #28
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d101      	bne.n	800b416 <HAL_RTC_SetTime+0x1a>
 800b412:	2302      	movs	r3, #2
 800b414:	e088      	b.n	800b528 <HAL_RTC_SetTime+0x12c>
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2201      	movs	r2, #1
 800b41a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2202      	movs	r2, #2
 800b422:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b426:	4b42      	ldr	r3, [pc, #264]	@ (800b530 <HAL_RTC_SetTime+0x134>)
 800b428:	22ca      	movs	r2, #202	@ 0xca
 800b42a:	625a      	str	r2, [r3, #36]	@ 0x24
 800b42c:	4b40      	ldr	r3, [pc, #256]	@ (800b530 <HAL_RTC_SetTime+0x134>)
 800b42e:	2253      	movs	r2, #83	@ 0x53
 800b430:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b432:	68f8      	ldr	r0, [r7, #12]
 800b434:	f000 f936 	bl	800b6a4 <RTC_EnterInitMode>
 800b438:	4603      	mov	r3, r0
 800b43a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b43c:	7cfb      	ldrb	r3, [r7, #19]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d163      	bne.n	800b50a <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b442:	4b3b      	ldr	r3, [pc, #236]	@ (800b530 <HAL_RTC_SetTime+0x134>)
 800b444:	68db      	ldr	r3, [r3, #12]
 800b446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b44a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b44e:	d057      	beq.n	800b500 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d125      	bne.n	800b4a2 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b456:	4b36      	ldr	r3, [pc, #216]	@ (800b530 <HAL_RTC_SetTime+0x134>)
 800b458:	699b      	ldr	r3, [r3, #24]
 800b45a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d102      	bne.n	800b468 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	2200      	movs	r2, #0
 800b466:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	4618      	mov	r0, r3
 800b46e:	f000 f993 	bl	800b798 <RTC_ByteToBcd2>
 800b472:	4603      	mov	r3, r0
 800b474:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	785b      	ldrb	r3, [r3, #1]
 800b47a:	4618      	mov	r0, r3
 800b47c:	f000 f98c 	bl	800b798 <RTC_ByteToBcd2>
 800b480:	4603      	mov	r3, r0
 800b482:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b484:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	789b      	ldrb	r3, [r3, #2]
 800b48a:	4618      	mov	r0, r3
 800b48c:	f000 f984 	bl	800b798 <RTC_ByteToBcd2>
 800b490:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b492:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	78db      	ldrb	r3, [r3, #3]
 800b49a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b49c:	4313      	orrs	r3, r2
 800b49e:	617b      	str	r3, [r7, #20]
 800b4a0:	e017      	b.n	800b4d2 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b4a2:	4b23      	ldr	r3, [pc, #140]	@ (800b530 <HAL_RTC_SetTime+0x134>)
 800b4a4:	699b      	ldr	r3, [r3, #24]
 800b4a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d102      	bne.n	800b4b4 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	785b      	ldrb	r3, [r3, #1]
 800b4be:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b4c0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b4c6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	78db      	ldrb	r3, [r3, #3]
 800b4cc:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800b4d2:	4a17      	ldr	r2, [pc, #92]	@ (800b530 <HAL_RTC_SetTime+0x134>)
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800b4da:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800b4de:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800b4e0:	4b13      	ldr	r3, [pc, #76]	@ (800b530 <HAL_RTC_SetTime+0x134>)
 800b4e2:	699b      	ldr	r3, [r3, #24]
 800b4e4:	4a12      	ldr	r2, [pc, #72]	@ (800b530 <HAL_RTC_SetTime+0x134>)
 800b4e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b4ea:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800b4ec:	4b10      	ldr	r3, [pc, #64]	@ (800b530 <HAL_RTC_SetTime+0x134>)
 800b4ee:	699a      	ldr	r2, [r3, #24]
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	68d9      	ldr	r1, [r3, #12]
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	430b      	orrs	r3, r1
 800b4fa:	490d      	ldr	r1, [pc, #52]	@ (800b530 <HAL_RTC_SetTime+0x134>)
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f000 f90b 	bl	800b71c <RTC_ExitInitMode>
 800b506:	4603      	mov	r3, r0
 800b508:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b50a:	4b09      	ldr	r3, [pc, #36]	@ (800b530 <HAL_RTC_SetTime+0x134>)
 800b50c:	22ff      	movs	r2, #255	@ 0xff
 800b50e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800b510:	7cfb      	ldrb	r3, [r7, #19]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d103      	bne.n	800b51e <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2201      	movs	r2, #1
 800b51a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800b526:	7cfb      	ldrb	r3, [r7, #19]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	371c      	adds	r7, #28
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd90      	pop	{r4, r7, pc}
 800b530:	46007800 	.word	0x46007800

0800b534 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b534:	b590      	push	{r4, r7, lr}
 800b536:	b087      	sub	sp, #28
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b546:	2b01      	cmp	r3, #1
 800b548:	d101      	bne.n	800b54e <HAL_RTC_SetDate+0x1a>
 800b54a:	2302      	movs	r3, #2
 800b54c:	e071      	b.n	800b632 <HAL_RTC_SetDate+0xfe>
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2201      	movs	r2, #1
 800b552:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2202      	movs	r2, #2
 800b55a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10e      	bne.n	800b582 <HAL_RTC_SetDate+0x4e>
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	785b      	ldrb	r3, [r3, #1]
 800b568:	f003 0310 	and.w	r3, r3, #16
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d008      	beq.n	800b582 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	785b      	ldrb	r3, [r3, #1]
 800b574:	f023 0310 	bic.w	r3, r3, #16
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	330a      	adds	r3, #10
 800b57c:	b2da      	uxtb	r2, r3
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d11c      	bne.n	800b5c2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	78db      	ldrb	r3, [r3, #3]
 800b58c:	4618      	mov	r0, r3
 800b58e:	f000 f903 	bl	800b798 <RTC_ByteToBcd2>
 800b592:	4603      	mov	r3, r0
 800b594:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	785b      	ldrb	r3, [r3, #1]
 800b59a:	4618      	mov	r0, r3
 800b59c:	f000 f8fc 	bl	800b798 <RTC_ByteToBcd2>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b5a4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	789b      	ldrb	r3, [r3, #2]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f000 f8f4 	bl	800b798 <RTC_ByteToBcd2>
 800b5b0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b5b2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	617b      	str	r3, [r7, #20]
 800b5c0:	e00e      	b.n	800b5e0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	78db      	ldrb	r3, [r3, #3]
 800b5c6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	785b      	ldrb	r3, [r3, #1]
 800b5cc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b5ce:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800b5d0:	68ba      	ldr	r2, [r7, #8]
 800b5d2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b5d4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b5e0:	4b16      	ldr	r3, [pc, #88]	@ (800b63c <HAL_RTC_SetDate+0x108>)
 800b5e2:	22ca      	movs	r2, #202	@ 0xca
 800b5e4:	625a      	str	r2, [r3, #36]	@ 0x24
 800b5e6:	4b15      	ldr	r3, [pc, #84]	@ (800b63c <HAL_RTC_SetDate+0x108>)
 800b5e8:	2253      	movs	r2, #83	@ 0x53
 800b5ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f000 f859 	bl	800b6a4 <RTC_EnterInitMode>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b5f6:	7cfb      	ldrb	r3, [r7, #19]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d10b      	bne.n	800b614 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800b5fc:	4a0f      	ldr	r2, [pc, #60]	@ (800b63c <HAL_RTC_SetDate+0x108>)
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b604:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b608:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f000 f886 	bl	800b71c <RTC_ExitInitMode>
 800b610:	4603      	mov	r3, r0
 800b612:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b614:	4b09      	ldr	r3, [pc, #36]	@ (800b63c <HAL_RTC_SetDate+0x108>)
 800b616:	22ff      	movs	r2, #255	@ 0xff
 800b618:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800b61a:	7cfb      	ldrb	r3, [r7, #19]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d103      	bne.n	800b628 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2201      	movs	r2, #1
 800b624:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800b630:	7cfb      	ldrb	r3, [r7, #19]
}
 800b632:	4618      	mov	r0, r3
 800b634:	371c      	adds	r7, #28
 800b636:	46bd      	mov	sp, r7
 800b638:	bd90      	pop	{r4, r7, pc}
 800b63a:	bf00      	nop
 800b63c:	46007800 	.word	0x46007800

0800b640 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800b648:	4b15      	ldr	r3, [pc, #84]	@ (800b6a0 <HAL_RTC_WaitForSynchro+0x60>)
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	4a14      	ldr	r2, [pc, #80]	@ (800b6a0 <HAL_RTC_WaitForSynchro+0x60>)
 800b64e:	f023 0320 	bic.w	r3, r3, #32
 800b652:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800b654:	f7f7 fc92 	bl	8002f7c <HAL_GetTick>
 800b658:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800b65a:	e013      	b.n	800b684 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b65c:	f7f7 fc8e 	bl	8002f7c <HAL_GetTick>
 800b660:	4602      	mov	r2, r0
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b66a:	d90b      	bls.n	800b684 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800b66c:	4b0c      	ldr	r3, [pc, #48]	@ (800b6a0 <HAL_RTC_WaitForSynchro+0x60>)
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	f003 0320 	and.w	r3, r3, #32
 800b674:	2b00      	cmp	r3, #0
 800b676:	d10c      	bne.n	800b692 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2203      	movs	r2, #3
 800b67c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800b680:	2303      	movs	r3, #3
 800b682:	e008      	b.n	800b696 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800b684:	4b06      	ldr	r3, [pc, #24]	@ (800b6a0 <HAL_RTC_WaitForSynchro+0x60>)
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	f003 0320 	and.w	r3, r3, #32
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d0e5      	beq.n	800b65c <HAL_RTC_WaitForSynchro+0x1c>
 800b690:	e000      	b.n	800b694 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800b692:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	46007800 	.word	0x46007800

0800b6a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800b6b0:	4b19      	ldr	r3, [pc, #100]	@ (800b718 <RTC_EnterInitMode+0x74>)
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d128      	bne.n	800b70e <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b6bc:	4b16      	ldr	r3, [pc, #88]	@ (800b718 <RTC_EnterInitMode+0x74>)
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	4a15      	ldr	r2, [pc, #84]	@ (800b718 <RTC_EnterInitMode+0x74>)
 800b6c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6c6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800b6c8:	f7f7 fc58 	bl	8002f7c <HAL_GetTick>
 800b6cc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b6ce:	e013      	b.n	800b6f8 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b6d0:	f7f7 fc54 	bl	8002f7c <HAL_GetTick>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b6de:	d90b      	bls.n	800b6f8 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800b6e0:	4b0d      	ldr	r3, [pc, #52]	@ (800b718 <RTC_EnterInitMode+0x74>)
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10f      	bne.n	800b70c <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800b6ec:	2303      	movs	r3, #3
 800b6ee:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2203      	movs	r2, #3
 800b6f4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b6f8:	4b07      	ldr	r3, [pc, #28]	@ (800b718 <RTC_EnterInitMode+0x74>)
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b700:	2b00      	cmp	r3, #0
 800b702:	d104      	bne.n	800b70e <RTC_EnterInitMode+0x6a>
 800b704:	7bfb      	ldrb	r3, [r7, #15]
 800b706:	2b03      	cmp	r3, #3
 800b708:	d1e2      	bne.n	800b6d0 <RTC_EnterInitMode+0x2c>
 800b70a:	e000      	b.n	800b70e <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800b70c:	bf00      	nop
        }
      }
    }
  }

  return status;
 800b70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	46007800 	.word	0x46007800

0800b71c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b724:	2300      	movs	r3, #0
 800b726:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b728:	4b1a      	ldr	r3, [pc, #104]	@ (800b794 <RTC_ExitInitMode+0x78>)
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	4a19      	ldr	r2, [pc, #100]	@ (800b794 <RTC_ExitInitMode+0x78>)
 800b72e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b732:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b734:	4b17      	ldr	r3, [pc, #92]	@ (800b794 <RTC_ExitInitMode+0x78>)
 800b736:	699b      	ldr	r3, [r3, #24]
 800b738:	f003 0320 	and.w	r3, r3, #32
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d10c      	bne.n	800b75a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f7ff ff7d 	bl	800b640 <HAL_RTC_WaitForSynchro>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d01e      	beq.n	800b78a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2203      	movs	r2, #3
 800b750:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800b754:	2303      	movs	r3, #3
 800b756:	73fb      	strb	r3, [r7, #15]
 800b758:	e017      	b.n	800b78a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b75a:	4b0e      	ldr	r3, [pc, #56]	@ (800b794 <RTC_ExitInitMode+0x78>)
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	4a0d      	ldr	r2, [pc, #52]	@ (800b794 <RTC_ExitInitMode+0x78>)
 800b760:	f023 0320 	bic.w	r3, r3, #32
 800b764:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7ff ff6a 	bl	800b640 <HAL_RTC_WaitForSynchro>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d005      	beq.n	800b77e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2203      	movs	r2, #3
 800b776:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800b77a:	2303      	movs	r3, #3
 800b77c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b77e:	4b05      	ldr	r3, [pc, #20]	@ (800b794 <RTC_ExitInitMode+0x78>)
 800b780:	699b      	ldr	r3, [r3, #24]
 800b782:	4a04      	ldr	r2, [pc, #16]	@ (800b794 <RTC_ExitInitMode+0x78>)
 800b784:	f043 0320 	orr.w	r3, r3, #32
 800b788:	6193      	str	r3, [r2, #24]
  }
  return status;
 800b78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	46007800 	.word	0x46007800

0800b798 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	4603      	mov	r3, r0
 800b7a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800b7a6:	79fb      	ldrb	r3, [r7, #7]
 800b7a8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800b7aa:	e005      	b.n	800b7b8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800b7b2:	7afb      	ldrb	r3, [r7, #11]
 800b7b4:	3b0a      	subs	r3, #10
 800b7b6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800b7b8:	7afb      	ldrb	r3, [r7, #11]
 800b7ba:	2b09      	cmp	r3, #9
 800b7bc:	d8f6      	bhi.n	800b7ac <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	011b      	lsls	r3, r3, #4
 800b7c4:	b2da      	uxtb	r2, r3
 800b7c6:	7afb      	ldrb	r3, [r7, #11]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	b2db      	uxtb	r3, r3
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3714      	adds	r7, #20
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	4910      	ldr	r1, [pc, #64]	@ (800b82c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	689a      	ldr	r2, [r3, #8]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	431a      	orrs	r2, r3
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	699b      	ldr	r3, [r3, #24]
 800b7fe:	490c      	ldr	r1, [pc, #48]	@ (800b830 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800b800:	4313      	orrs	r3, r2
 800b802:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800b804:	4b0a      	ldr	r3, [pc, #40]	@ (800b830 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800b806:	6a1b      	ldr	r3, [r3, #32]
 800b808:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	6919      	ldr	r1, [r3, #16]
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	695b      	ldr	r3, [r3, #20]
 800b814:	041b      	lsls	r3, r3, #16
 800b816:	430b      	orrs	r3, r1
 800b818:	4905      	ldr	r1, [pc, #20]	@ (800b830 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800b81a:	4313      	orrs	r3, r2
 800b81c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800b81e:	2300      	movs	r3, #0
}
 800b820:	4618      	mov	r0, r3
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr
 800b82c:	46007800 	.word	0x46007800
 800b830:	46007c00 	.word	0x46007c00

0800b834 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d101      	bne.n	800b846 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b842:	2301      	movs	r3, #1
 800b844:	e0fb      	b.n	800ba3e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a7f      	ldr	r2, [pc, #508]	@ (800ba48 <HAL_SPI_Init+0x214>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d004      	beq.n	800b85a <HAL_SPI_Init+0x26>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a7d      	ldr	r2, [pc, #500]	@ (800ba4c <HAL_SPI_Init+0x218>)
 800b856:	4293      	cmp	r3, r2
 800b858:	e000      	b.n	800b85c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800b85a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a78      	ldr	r2, [pc, #480]	@ (800ba48 <HAL_SPI_Init+0x214>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d004      	beq.n	800b876 <HAL_SPI_Init+0x42>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a76      	ldr	r2, [pc, #472]	@ (800ba4c <HAL_SPI_Init+0x218>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d105      	bne.n	800b882 <HAL_SPI_Init+0x4e>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	2b0f      	cmp	r3, #15
 800b87c:	d901      	bls.n	800b882 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	e0dd      	b.n	800ba3e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 f8ec 	bl	800ba60 <SPI_GetPacketSize>
 800b888:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a6e      	ldr	r2, [pc, #440]	@ (800ba48 <HAL_SPI_Init+0x214>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d004      	beq.n	800b89e <HAL_SPI_Init+0x6a>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a6c      	ldr	r2, [pc, #432]	@ (800ba4c <HAL_SPI_Init+0x218>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d102      	bne.n	800b8a4 <HAL_SPI_Init+0x70>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2b08      	cmp	r3, #8
 800b8a2:	d816      	bhi.n	800b8d2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b8a8:	4a69      	ldr	r2, [pc, #420]	@ (800ba50 <HAL_SPI_Init+0x21c>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d00e      	beq.n	800b8cc <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4a68      	ldr	r2, [pc, #416]	@ (800ba54 <HAL_SPI_Init+0x220>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d009      	beq.n	800b8cc <HAL_SPI_Init+0x98>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a66      	ldr	r2, [pc, #408]	@ (800ba58 <HAL_SPI_Init+0x224>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d004      	beq.n	800b8cc <HAL_SPI_Init+0x98>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a65      	ldr	r2, [pc, #404]	@ (800ba5c <HAL_SPI_Init+0x228>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d104      	bne.n	800b8d6 <HAL_SPI_Init+0xa2>
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2b10      	cmp	r3, #16
 800b8d0:	d901      	bls.n	800b8d6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e0b3      	b.n	800ba3e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d106      	bne.n	800b8f0 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f7f7 f912 	bl	8002b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2202      	movs	r2, #2
 800b8f4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f022 0201 	bic.w	r2, r2, #1
 800b906:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b912:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	699b      	ldr	r3, [r3, #24]
 800b918:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b91c:	d119      	bne.n	800b952 <HAL_SPI_Init+0x11e>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b926:	d103      	bne.n	800b930 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d008      	beq.n	800b942 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b934:	2b00      	cmp	r3, #0
 800b936:	d10c      	bne.n	800b952 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b93c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b940:	d107      	bne.n	800b952 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b950:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00f      	beq.n	800b97e <HAL_SPI_Init+0x14a>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	2b06      	cmp	r3, #6
 800b964:	d90b      	bls.n	800b97e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	430a      	orrs	r2, r1
 800b97a:	601a      	str	r2, [r3, #0]
 800b97c:	e007      	b.n	800b98e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b98c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	69da      	ldr	r2, [r3, #28]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b996:	431a      	orrs	r2, r3
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	431a      	orrs	r2, r3
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9a0:	ea42 0103 	orr.w	r1, r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	68da      	ldr	r2, [r3, #12]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	430a      	orrs	r2, r1
 800b9ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9b8:	431a      	orrs	r2, r3
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9be:	431a      	orrs	r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	699b      	ldr	r3, [r3, #24]
 800b9c4:	431a      	orrs	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	691b      	ldr	r3, [r3, #16]
 800b9ca:	431a      	orrs	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	695b      	ldr	r3, [r3, #20]
 800b9d0:	431a      	orrs	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6a1b      	ldr	r3, [r3, #32]
 800b9d6:	431a      	orrs	r2, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	431a      	orrs	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9e2:	431a      	orrs	r2, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	689b      	ldr	r3, [r3, #8]
 800b9e8:	431a      	orrs	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b9ee:	431a      	orrs	r2, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9f4:	431a      	orrs	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9fa:	ea42 0103 	orr.w	r1, r2, r3
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	430a      	orrs	r2, r1
 800ba08:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00a      	beq.n	800ba2c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	430a      	orrs	r2, r1
 800ba2a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	46002000 	.word	0x46002000
 800ba4c:	56002000 	.word	0x56002000
 800ba50:	40013000 	.word	0x40013000
 800ba54:	50013000 	.word	0x50013000
 800ba58:	40003800 	.word	0x40003800
 800ba5c:	50003800 	.word	0x50003800

0800ba60 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba6c:	095b      	lsrs	r3, r3, #5
 800ba6e:	3301      	adds	r3, #1
 800ba70:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	3301      	adds	r3, #1
 800ba78:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	3307      	adds	r3, #7
 800ba7e:	08db      	lsrs	r3, r3, #3
 800ba80:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	fb02 f303 	mul.w	r3, r2, r3
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3714      	adds	r7, #20
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr

0800ba96 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800ba96:	b480      	push	{r7}
 800ba98:	b083      	sub	sp, #12
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
 800ba9e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d12e      	bne.n	800bb0a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d101      	bne.n	800baba <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800bab6:	2302      	movs	r3, #2
 800bab8:	e028      	b.n	800bb0c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2201      	movs	r2, #1
 800babe:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2202      	movs	r2, #2
 800bac6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f022 0201 	bic.w	r2, r2, #1
 800bad8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800bae6:	ea42 0103 	orr.w	r1, r2, r3
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	689a      	ldr	r2, [r3, #8]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	430a      	orrs	r2, r1
 800baf4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2201      	movs	r2, #1
 800bafa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bb06:	2300      	movs	r3, #0
 800bb08:	e000      	b.n	800bb0c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800bb0a:	2301      	movs	r3, #1
  }
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	370c      	adds	r7, #12
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d101      	bne.n	800bb2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	e049      	b.n	800bbbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d106      	bne.n	800bb44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f841 	bl	800bbc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2202      	movs	r2, #2
 800bb48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	3304      	adds	r3, #4
 800bb54:	4619      	mov	r1, r3
 800bb56:	4610      	mov	r0, r2
 800bb58:	f000 fa58 	bl	800c00c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2201      	movs	r2, #1
 800bb68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2201      	movs	r2, #1
 800bb78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3708      	adds	r7, #8
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800bbc6:	b480      	push	{r7}
 800bbc8:	b083      	sub	sp, #12
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800bbce:	bf00      	nop
 800bbd0:	370c      	adds	r7, #12
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
	...

0800bbdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d001      	beq.n	800bbf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e072      	b.n	800bcda <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2202      	movs	r2, #2
 800bbf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68da      	ldr	r2, [r3, #12]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f042 0201 	orr.w	r2, r2, #1
 800bc0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a35      	ldr	r2, [pc, #212]	@ (800bce8 <HAL_TIM_Base_Start_IT+0x10c>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d040      	beq.n	800bc98 <HAL_TIM_Base_Start_IT+0xbc>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a34      	ldr	r2, [pc, #208]	@ (800bcec <HAL_TIM_Base_Start_IT+0x110>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d03b      	beq.n	800bc98 <HAL_TIM_Base_Start_IT+0xbc>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc28:	d036      	beq.n	800bc98 <HAL_TIM_Base_Start_IT+0xbc>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc32:	d031      	beq.n	800bc98 <HAL_TIM_Base_Start_IT+0xbc>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a2d      	ldr	r2, [pc, #180]	@ (800bcf0 <HAL_TIM_Base_Start_IT+0x114>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d02c      	beq.n	800bc98 <HAL_TIM_Base_Start_IT+0xbc>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a2c      	ldr	r2, [pc, #176]	@ (800bcf4 <HAL_TIM_Base_Start_IT+0x118>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d027      	beq.n	800bc98 <HAL_TIM_Base_Start_IT+0xbc>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4a2a      	ldr	r2, [pc, #168]	@ (800bcf8 <HAL_TIM_Base_Start_IT+0x11c>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d022      	beq.n	800bc98 <HAL_TIM_Base_Start_IT+0xbc>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a29      	ldr	r2, [pc, #164]	@ (800bcfc <HAL_TIM_Base_Start_IT+0x120>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d01d      	beq.n	800bc98 <HAL_TIM_Base_Start_IT+0xbc>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a27      	ldr	r2, [pc, #156]	@ (800bd00 <HAL_TIM_Base_Start_IT+0x124>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d018      	beq.n	800bc98 <HAL_TIM_Base_Start_IT+0xbc>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a26      	ldr	r2, [pc, #152]	@ (800bd04 <HAL_TIM_Base_Start_IT+0x128>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d013      	beq.n	800bc98 <HAL_TIM_Base_Start_IT+0xbc>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a24      	ldr	r2, [pc, #144]	@ (800bd08 <HAL_TIM_Base_Start_IT+0x12c>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d00e      	beq.n	800bc98 <HAL_TIM_Base_Start_IT+0xbc>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a23      	ldr	r2, [pc, #140]	@ (800bd0c <HAL_TIM_Base_Start_IT+0x130>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d009      	beq.n	800bc98 <HAL_TIM_Base_Start_IT+0xbc>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a21      	ldr	r2, [pc, #132]	@ (800bd10 <HAL_TIM_Base_Start_IT+0x134>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d004      	beq.n	800bc98 <HAL_TIM_Base_Start_IT+0xbc>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a20      	ldr	r2, [pc, #128]	@ (800bd14 <HAL_TIM_Base_Start_IT+0x138>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d115      	bne.n	800bcc4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	689a      	ldr	r2, [r3, #8]
 800bc9e:	4b1e      	ldr	r3, [pc, #120]	@ (800bd18 <HAL_TIM_Base_Start_IT+0x13c>)
 800bca0:	4013      	ands	r3, r2
 800bca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2b06      	cmp	r3, #6
 800bca8:	d015      	beq.n	800bcd6 <HAL_TIM_Base_Start_IT+0xfa>
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcb0:	d011      	beq.n	800bcd6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f042 0201 	orr.w	r2, r2, #1
 800bcc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcc2:	e008      	b.n	800bcd6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f042 0201 	orr.w	r2, r2, #1
 800bcd2:	601a      	str	r2, [r3, #0]
 800bcd4:	e000      	b.n	800bcd8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3714      	adds	r7, #20
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	40012c00 	.word	0x40012c00
 800bcec:	50012c00 	.word	0x50012c00
 800bcf0:	40000400 	.word	0x40000400
 800bcf4:	50000400 	.word	0x50000400
 800bcf8:	40000800 	.word	0x40000800
 800bcfc:	50000800 	.word	0x50000800
 800bd00:	40000c00 	.word	0x40000c00
 800bd04:	50000c00 	.word	0x50000c00
 800bd08:	40013400 	.word	0x40013400
 800bd0c:	50013400 	.word	0x50013400
 800bd10:	40014000 	.word	0x40014000
 800bd14:	50014000 	.word	0x50014000
 800bd18:	00010007 	.word	0x00010007

0800bd1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	691b      	ldr	r3, [r3, #16]
 800bd32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	f003 0302 	and.w	r3, r3, #2
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d020      	beq.n	800bd80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f003 0302 	and.w	r3, r3, #2
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d01b      	beq.n	800bd80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f06f 0202 	mvn.w	r2, #2
 800bd50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2201      	movs	r2, #1
 800bd56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	699b      	ldr	r3, [r3, #24]
 800bd5e:	f003 0303 	and.w	r3, r3, #3
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d003      	beq.n	800bd6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 f931 	bl	800bfce <HAL_TIM_IC_CaptureCallback>
 800bd6c:	e005      	b.n	800bd7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 f923 	bl	800bfba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 f934 	bl	800bfe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	f003 0304 	and.w	r3, r3, #4
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d020      	beq.n	800bdcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f003 0304 	and.w	r3, r3, #4
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d01b      	beq.n	800bdcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f06f 0204 	mvn.w	r2, #4
 800bd9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2202      	movs	r2, #2
 800bda2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	699b      	ldr	r3, [r3, #24]
 800bdaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d003      	beq.n	800bdba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 f90b 	bl	800bfce <HAL_TIM_IC_CaptureCallback>
 800bdb8:	e005      	b.n	800bdc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 f8fd 	bl	800bfba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 f90e 	bl	800bfe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	f003 0308 	and.w	r3, r3, #8
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d020      	beq.n	800be18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f003 0308 	and.w	r3, r3, #8
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d01b      	beq.n	800be18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f06f 0208 	mvn.w	r2, #8
 800bde8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2204      	movs	r2, #4
 800bdee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	69db      	ldr	r3, [r3, #28]
 800bdf6:	f003 0303 	and.w	r3, r3, #3
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d003      	beq.n	800be06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 f8e5 	bl	800bfce <HAL_TIM_IC_CaptureCallback>
 800be04:	e005      	b.n	800be12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 f8d7 	bl	800bfba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 f8e8 	bl	800bfe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	f003 0310 	and.w	r3, r3, #16
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d020      	beq.n	800be64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f003 0310 	and.w	r3, r3, #16
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d01b      	beq.n	800be64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f06f 0210 	mvn.w	r2, #16
 800be34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2208      	movs	r2, #8
 800be3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	69db      	ldr	r3, [r3, #28]
 800be42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be46:	2b00      	cmp	r3, #0
 800be48:	d003      	beq.n	800be52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 f8bf 	bl	800bfce <HAL_TIM_IC_CaptureCallback>
 800be50:	e005      	b.n	800be5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 f8b1 	bl	800bfba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 f8c2 	bl	800bfe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	f003 0301 	and.w	r3, r3, #1
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d00c      	beq.n	800be88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f003 0301 	and.w	r3, r3, #1
 800be74:	2b00      	cmp	r3, #0
 800be76:	d007      	beq.n	800be88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f06f 0201 	mvn.w	r2, #1
 800be80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7f5 fdfc 	bl	8001a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d104      	bne.n	800be9c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00c      	beq.n	800beb6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d007      	beq.n	800beb6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800beae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 f9af 	bl	800c214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00c      	beq.n	800beda <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d007      	beq.n	800beda <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 f9a7 	bl	800c228 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00c      	beq.n	800befe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800beea:	2b00      	cmp	r3, #0
 800beec:	d007      	beq.n	800befe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 f87c 	bl	800bff6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	f003 0320 	and.w	r3, r3, #32
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d00c      	beq.n	800bf22 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f003 0320 	and.w	r3, r3, #32
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d007      	beq.n	800bf22 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f06f 0220 	mvn.w	r2, #32
 800bf1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 f96f 	bl	800c200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00c      	beq.n	800bf46 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d007      	beq.n	800bf46 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800bf3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 f97b 	bl	800c23c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d00c      	beq.n	800bf6a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d007      	beq.n	800bf6a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800bf62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 f973 	bl	800c250 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d00c      	beq.n	800bf8e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d007      	beq.n	800bf8e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800bf86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 f96b 	bl	800c264 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00c      	beq.n	800bfb2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d007      	beq.n	800bfb2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800bfaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 f963 	bl	800c278 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bfb2:	bf00      	nop
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bfba:	b480      	push	{r7}
 800bfbc:	b083      	sub	sp, #12
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bfc2:	bf00      	nop
 800bfc4:	370c      	adds	r7, #12
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr

0800bfce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bfce:	b480      	push	{r7}
 800bfd0:	b083      	sub	sp, #12
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bfd6:	bf00      	nop
 800bfd8:	370c      	adds	r7, #12
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr

0800bfe2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bfe2:	b480      	push	{r7}
 800bfe4:	b083      	sub	sp, #12
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bfea:	bf00      	nop
 800bfec:	370c      	adds	r7, #12
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr

0800bff6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bff6:	b480      	push	{r7}
 800bff8:	b083      	sub	sp, #12
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bffe:	bf00      	nop
 800c000:	370c      	adds	r7, #12
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr
	...

0800c00c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b085      	sub	sp, #20
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a68      	ldr	r2, [pc, #416]	@ (800c1c0 <TIM_Base_SetConfig+0x1b4>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d02b      	beq.n	800c07c <TIM_Base_SetConfig+0x70>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a67      	ldr	r2, [pc, #412]	@ (800c1c4 <TIM_Base_SetConfig+0x1b8>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d027      	beq.n	800c07c <TIM_Base_SetConfig+0x70>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c032:	d023      	beq.n	800c07c <TIM_Base_SetConfig+0x70>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c03a:	d01f      	beq.n	800c07c <TIM_Base_SetConfig+0x70>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a62      	ldr	r2, [pc, #392]	@ (800c1c8 <TIM_Base_SetConfig+0x1bc>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d01b      	beq.n	800c07c <TIM_Base_SetConfig+0x70>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4a61      	ldr	r2, [pc, #388]	@ (800c1cc <TIM_Base_SetConfig+0x1c0>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d017      	beq.n	800c07c <TIM_Base_SetConfig+0x70>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a60      	ldr	r2, [pc, #384]	@ (800c1d0 <TIM_Base_SetConfig+0x1c4>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d013      	beq.n	800c07c <TIM_Base_SetConfig+0x70>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	4a5f      	ldr	r2, [pc, #380]	@ (800c1d4 <TIM_Base_SetConfig+0x1c8>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d00f      	beq.n	800c07c <TIM_Base_SetConfig+0x70>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	4a5e      	ldr	r2, [pc, #376]	@ (800c1d8 <TIM_Base_SetConfig+0x1cc>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d00b      	beq.n	800c07c <TIM_Base_SetConfig+0x70>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	4a5d      	ldr	r2, [pc, #372]	@ (800c1dc <TIM_Base_SetConfig+0x1d0>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d007      	beq.n	800c07c <TIM_Base_SetConfig+0x70>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4a5c      	ldr	r2, [pc, #368]	@ (800c1e0 <TIM_Base_SetConfig+0x1d4>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d003      	beq.n	800c07c <TIM_Base_SetConfig+0x70>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4a5b      	ldr	r2, [pc, #364]	@ (800c1e4 <TIM_Base_SetConfig+0x1d8>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d108      	bne.n	800c08e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4a4b      	ldr	r2, [pc, #300]	@ (800c1c0 <TIM_Base_SetConfig+0x1b4>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d043      	beq.n	800c11e <TIM_Base_SetConfig+0x112>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4a4a      	ldr	r2, [pc, #296]	@ (800c1c4 <TIM_Base_SetConfig+0x1b8>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d03f      	beq.n	800c11e <TIM_Base_SetConfig+0x112>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0a4:	d03b      	beq.n	800c11e <TIM_Base_SetConfig+0x112>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c0ac:	d037      	beq.n	800c11e <TIM_Base_SetConfig+0x112>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4a45      	ldr	r2, [pc, #276]	@ (800c1c8 <TIM_Base_SetConfig+0x1bc>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d033      	beq.n	800c11e <TIM_Base_SetConfig+0x112>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4a44      	ldr	r2, [pc, #272]	@ (800c1cc <TIM_Base_SetConfig+0x1c0>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d02f      	beq.n	800c11e <TIM_Base_SetConfig+0x112>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4a43      	ldr	r2, [pc, #268]	@ (800c1d0 <TIM_Base_SetConfig+0x1c4>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d02b      	beq.n	800c11e <TIM_Base_SetConfig+0x112>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4a42      	ldr	r2, [pc, #264]	@ (800c1d4 <TIM_Base_SetConfig+0x1c8>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d027      	beq.n	800c11e <TIM_Base_SetConfig+0x112>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4a41      	ldr	r2, [pc, #260]	@ (800c1d8 <TIM_Base_SetConfig+0x1cc>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d023      	beq.n	800c11e <TIM_Base_SetConfig+0x112>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	4a40      	ldr	r2, [pc, #256]	@ (800c1dc <TIM_Base_SetConfig+0x1d0>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d01f      	beq.n	800c11e <TIM_Base_SetConfig+0x112>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4a3f      	ldr	r2, [pc, #252]	@ (800c1e0 <TIM_Base_SetConfig+0x1d4>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d01b      	beq.n	800c11e <TIM_Base_SetConfig+0x112>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4a3e      	ldr	r2, [pc, #248]	@ (800c1e4 <TIM_Base_SetConfig+0x1d8>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d017      	beq.n	800c11e <TIM_Base_SetConfig+0x112>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a3d      	ldr	r2, [pc, #244]	@ (800c1e8 <TIM_Base_SetConfig+0x1dc>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d013      	beq.n	800c11e <TIM_Base_SetConfig+0x112>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a3c      	ldr	r2, [pc, #240]	@ (800c1ec <TIM_Base_SetConfig+0x1e0>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d00f      	beq.n	800c11e <TIM_Base_SetConfig+0x112>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4a3b      	ldr	r2, [pc, #236]	@ (800c1f0 <TIM_Base_SetConfig+0x1e4>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d00b      	beq.n	800c11e <TIM_Base_SetConfig+0x112>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4a3a      	ldr	r2, [pc, #232]	@ (800c1f4 <TIM_Base_SetConfig+0x1e8>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d007      	beq.n	800c11e <TIM_Base_SetConfig+0x112>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4a39      	ldr	r2, [pc, #228]	@ (800c1f8 <TIM_Base_SetConfig+0x1ec>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d003      	beq.n	800c11e <TIM_Base_SetConfig+0x112>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	4a38      	ldr	r2, [pc, #224]	@ (800c1fc <TIM_Base_SetConfig+0x1f0>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d108      	bne.n	800c130 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	4313      	orrs	r3, r2
 800c12e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	695b      	ldr	r3, [r3, #20]
 800c13a:	4313      	orrs	r3, r2
 800c13c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	689a      	ldr	r2, [r3, #8]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	4a1a      	ldr	r2, [pc, #104]	@ (800c1c0 <TIM_Base_SetConfig+0x1b4>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d023      	beq.n	800c1a4 <TIM_Base_SetConfig+0x198>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4a19      	ldr	r2, [pc, #100]	@ (800c1c4 <TIM_Base_SetConfig+0x1b8>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d01f      	beq.n	800c1a4 <TIM_Base_SetConfig+0x198>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	4a1e      	ldr	r2, [pc, #120]	@ (800c1e0 <TIM_Base_SetConfig+0x1d4>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d01b      	beq.n	800c1a4 <TIM_Base_SetConfig+0x198>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4a1d      	ldr	r2, [pc, #116]	@ (800c1e4 <TIM_Base_SetConfig+0x1d8>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d017      	beq.n	800c1a4 <TIM_Base_SetConfig+0x198>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	4a1c      	ldr	r2, [pc, #112]	@ (800c1e8 <TIM_Base_SetConfig+0x1dc>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d013      	beq.n	800c1a4 <TIM_Base_SetConfig+0x198>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	4a1b      	ldr	r2, [pc, #108]	@ (800c1ec <TIM_Base_SetConfig+0x1e0>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d00f      	beq.n	800c1a4 <TIM_Base_SetConfig+0x198>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4a1a      	ldr	r2, [pc, #104]	@ (800c1f0 <TIM_Base_SetConfig+0x1e4>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d00b      	beq.n	800c1a4 <TIM_Base_SetConfig+0x198>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	4a19      	ldr	r2, [pc, #100]	@ (800c1f4 <TIM_Base_SetConfig+0x1e8>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d007      	beq.n	800c1a4 <TIM_Base_SetConfig+0x198>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	4a18      	ldr	r2, [pc, #96]	@ (800c1f8 <TIM_Base_SetConfig+0x1ec>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d003      	beq.n	800c1a4 <TIM_Base_SetConfig+0x198>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	4a17      	ldr	r2, [pc, #92]	@ (800c1fc <TIM_Base_SetConfig+0x1f0>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d103      	bne.n	800c1ac <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	691a      	ldr	r2, [r3, #16]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	615a      	str	r2, [r3, #20]
}
 800c1b2:	bf00      	nop
 800c1b4:	3714      	adds	r7, #20
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr
 800c1be:	bf00      	nop
 800c1c0:	40012c00 	.word	0x40012c00
 800c1c4:	50012c00 	.word	0x50012c00
 800c1c8:	40000400 	.word	0x40000400
 800c1cc:	50000400 	.word	0x50000400
 800c1d0:	40000800 	.word	0x40000800
 800c1d4:	50000800 	.word	0x50000800
 800c1d8:	40000c00 	.word	0x40000c00
 800c1dc:	50000c00 	.word	0x50000c00
 800c1e0:	40013400 	.word	0x40013400
 800c1e4:	50013400 	.word	0x50013400
 800c1e8:	40014000 	.word	0x40014000
 800c1ec:	50014000 	.word	0x50014000
 800c1f0:	40014400 	.word	0x40014400
 800c1f4:	50014400 	.word	0x50014400
 800c1f8:	40014800 	.word	0x40014800
 800c1fc:	50014800 	.word	0x50014800

0800c200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c208:	bf00      	nop
 800c20a:	370c      	adds	r7, #12
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c21c:	bf00      	nop
 800c21e:	370c      	adds	r7, #12
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c228:	b480      	push	{r7}
 800c22a:	b083      	sub	sp, #12
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c230:	bf00      	nop
 800c232:	370c      	adds	r7, #12
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr

0800c23c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c244:	bf00      	nop
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c258:	bf00      	nop
 800c25a:	370c      	adds	r7, #12
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c26c:	bf00      	nop
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr

0800c278 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c280:	bf00      	nop
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d101      	bne.n	800c29e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	e042      	b.n	800c324 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d106      	bne.n	800c2b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f7f6 f83f 	bl	8002334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2224      	movs	r2, #36	@ 0x24
 800c2ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f022 0201 	bic.w	r2, r2, #1
 800c2cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d002      	beq.n	800c2dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 f9d6 	bl	800c688 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 f825 	bl	800c32c <UART_SetConfig>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d101      	bne.n	800c2ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e01b      	b.n	800c324 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	685a      	ldr	r2, [r3, #4]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c2fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	689a      	ldr	r2, [r3, #8]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c30a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f042 0201 	orr.w	r2, r2, #1
 800c31a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 fa55 	bl	800c7cc <UART_CheckIdleState>
 800c322:	4603      	mov	r3, r0
}
 800c324:	4618      	mov	r0, r3
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c32c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c330:	b094      	sub	sp, #80	@ 0x50
 800c332:	af00      	add	r7, sp, #0
 800c334:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c336:	2300      	movs	r3, #0
 800c338:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800c33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	4b83      	ldr	r3, [pc, #524]	@ (800c550 <UART_SetConfig+0x224>)
 800c342:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c346:	689a      	ldr	r2, [r3, #8]
 800c348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c34a:	691b      	ldr	r3, [r3, #16]
 800c34c:	431a      	orrs	r2, r3
 800c34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c350:	695b      	ldr	r3, [r3, #20]
 800c352:	431a      	orrs	r2, r3
 800c354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c356:	69db      	ldr	r3, [r3, #28]
 800c358:	4313      	orrs	r3, r2
 800c35a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	497c      	ldr	r1, [pc, #496]	@ (800c554 <UART_SetConfig+0x228>)
 800c364:	4019      	ands	r1, r3
 800c366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c36c:	430b      	orrs	r3, r1
 800c36e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c37c:	68d9      	ldr	r1, [r3, #12]
 800c37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	ea40 0301 	orr.w	r3, r0, r1
 800c386:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c38a:	699b      	ldr	r3, [r3, #24]
 800c38c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	4b6f      	ldr	r3, [pc, #444]	@ (800c550 <UART_SetConfig+0x224>)
 800c394:	429a      	cmp	r2, r3
 800c396:	d009      	beq.n	800c3ac <UART_SetConfig+0x80>
 800c398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	4b6e      	ldr	r3, [pc, #440]	@ (800c558 <UART_SetConfig+0x22c>)
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d004      	beq.n	800c3ac <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3a4:	6a1a      	ldr	r2, [r3, #32]
 800c3a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800c3b6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800c3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3c0:	430b      	orrs	r3, r1
 800c3c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ca:	f023 000f 	bic.w	r0, r3, #15
 800c3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3d0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c3d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	ea40 0301 	orr.w	r3, r0, r1
 800c3da:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c3dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	4b5e      	ldr	r3, [pc, #376]	@ (800c55c <UART_SetConfig+0x230>)
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d102      	bne.n	800c3ec <UART_SetConfig+0xc0>
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c3ea:	e032      	b.n	800c452 <UART_SetConfig+0x126>
 800c3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	4b5b      	ldr	r3, [pc, #364]	@ (800c560 <UART_SetConfig+0x234>)
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d102      	bne.n	800c3fc <UART_SetConfig+0xd0>
 800c3f6:	2302      	movs	r3, #2
 800c3f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c3fa:	e02a      	b.n	800c452 <UART_SetConfig+0x126>
 800c3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	4b58      	ldr	r3, [pc, #352]	@ (800c564 <UART_SetConfig+0x238>)
 800c402:	429a      	cmp	r2, r3
 800c404:	d102      	bne.n	800c40c <UART_SetConfig+0xe0>
 800c406:	2304      	movs	r3, #4
 800c408:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c40a:	e022      	b.n	800c452 <UART_SetConfig+0x126>
 800c40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	4b55      	ldr	r3, [pc, #340]	@ (800c568 <UART_SetConfig+0x23c>)
 800c412:	429a      	cmp	r2, r3
 800c414:	d102      	bne.n	800c41c <UART_SetConfig+0xf0>
 800c416:	2308      	movs	r3, #8
 800c418:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c41a:	e01a      	b.n	800c452 <UART_SetConfig+0x126>
 800c41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	4b52      	ldr	r3, [pc, #328]	@ (800c56c <UART_SetConfig+0x240>)
 800c422:	429a      	cmp	r2, r3
 800c424:	d102      	bne.n	800c42c <UART_SetConfig+0x100>
 800c426:	2310      	movs	r3, #16
 800c428:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c42a:	e012      	b.n	800c452 <UART_SetConfig+0x126>
 800c42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	4b4f      	ldr	r3, [pc, #316]	@ (800c570 <UART_SetConfig+0x244>)
 800c432:	429a      	cmp	r2, r3
 800c434:	d103      	bne.n	800c43e <UART_SetConfig+0x112>
 800c436:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800c43a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c43c:	e009      	b.n	800c452 <UART_SetConfig+0x126>
 800c43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	4b43      	ldr	r3, [pc, #268]	@ (800c550 <UART_SetConfig+0x224>)
 800c444:	429a      	cmp	r2, r3
 800c446:	d102      	bne.n	800c44e <UART_SetConfig+0x122>
 800c448:	2320      	movs	r3, #32
 800c44a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c44c:	e001      	b.n	800c452 <UART_SetConfig+0x126>
 800c44e:	2300      	movs	r3, #0
 800c450:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	4b3e      	ldr	r3, [pc, #248]	@ (800c550 <UART_SetConfig+0x224>)
 800c458:	429a      	cmp	r2, r3
 800c45a:	d005      	beq.n	800c468 <UART_SetConfig+0x13c>
 800c45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	4b3d      	ldr	r3, [pc, #244]	@ (800c558 <UART_SetConfig+0x22c>)
 800c462:	429a      	cmp	r2, r3
 800c464:	f040 8088 	bne.w	800c578 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c468:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c46a:	2200      	movs	r2, #0
 800c46c:	623b      	str	r3, [r7, #32]
 800c46e:	627a      	str	r2, [r7, #36]	@ 0x24
 800c470:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c474:	f7fd fa78 	bl	8009968 <HAL_RCCEx_GetPeriphCLKFreq>
 800c478:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800c47a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f000 80eb 	beq.w	800c658 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c486:	4a3b      	ldr	r2, [pc, #236]	@ (800c574 <UART_SetConfig+0x248>)
 800c488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c48c:	461a      	mov	r2, r3
 800c48e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c490:	fbb3 f3f2 	udiv	r3, r3, r2
 800c494:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c498:	685a      	ldr	r2, [r3, #4]
 800c49a:	4613      	mov	r3, r2
 800c49c:	005b      	lsls	r3, r3, #1
 800c49e:	4413      	add	r3, r2
 800c4a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d305      	bcc.n	800c4b2 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c4ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d903      	bls.n	800c4ba <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c4b8:	e048      	b.n	800c54c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4bc:	2200      	movs	r2, #0
 800c4be:	61bb      	str	r3, [r7, #24]
 800c4c0:	61fa      	str	r2, [r7, #28]
 800c4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4c6:	4a2b      	ldr	r2, [pc, #172]	@ (800c574 <UART_SetConfig+0x248>)
 800c4c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	613b      	str	r3, [r7, #16]
 800c4d2:	617a      	str	r2, [r7, #20]
 800c4d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c4d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c4dc:	f7f3 fee6 	bl	80002ac <__aeabi_uldivmod>
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	4610      	mov	r0, r2
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	f04f 0200 	mov.w	r2, #0
 800c4ec:	f04f 0300 	mov.w	r3, #0
 800c4f0:	020b      	lsls	r3, r1, #8
 800c4f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c4f6:	0202      	lsls	r2, r0, #8
 800c4f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c4fa:	6849      	ldr	r1, [r1, #4]
 800c4fc:	0849      	lsrs	r1, r1, #1
 800c4fe:	2000      	movs	r0, #0
 800c500:	460c      	mov	r4, r1
 800c502:	4605      	mov	r5, r0
 800c504:	eb12 0804 	adds.w	r8, r2, r4
 800c508:	eb43 0905 	adc.w	r9, r3, r5
 800c50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	60bb      	str	r3, [r7, #8]
 800c514:	60fa      	str	r2, [r7, #12]
 800c516:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c51a:	4640      	mov	r0, r8
 800c51c:	4649      	mov	r1, r9
 800c51e:	f7f3 fec5 	bl	80002ac <__aeabi_uldivmod>
 800c522:	4602      	mov	r2, r0
 800c524:	460b      	mov	r3, r1
 800c526:	4613      	mov	r3, r2
 800c528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c52a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c52c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c530:	d308      	bcc.n	800c544 <UART_SetConfig+0x218>
 800c532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c534:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c538:	d204      	bcs.n	800c544 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800c53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c540:	60da      	str	r2, [r3, #12]
 800c542:	e003      	b.n	800c54c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800c544:	2301      	movs	r3, #1
 800c546:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800c54a:	e085      	b.n	800c658 <UART_SetConfig+0x32c>
 800c54c:	e084      	b.n	800c658 <UART_SetConfig+0x32c>
 800c54e:	bf00      	nop
 800c550:	46002400 	.word	0x46002400
 800c554:	cfff69f3 	.word	0xcfff69f3
 800c558:	56002400 	.word	0x56002400
 800c55c:	40013800 	.word	0x40013800
 800c560:	40004400 	.word	0x40004400
 800c564:	40004800 	.word	0x40004800
 800c568:	40004c00 	.word	0x40004c00
 800c56c:	40005000 	.word	0x40005000
 800c570:	40006400 	.word	0x40006400
 800c574:	0800ce48 	.word	0x0800ce48
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c57a:	69db      	ldr	r3, [r3, #28]
 800c57c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c580:	d13c      	bne.n	800c5fc <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c582:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c584:	2200      	movs	r2, #0
 800c586:	603b      	str	r3, [r7, #0]
 800c588:	607a      	str	r2, [r7, #4]
 800c58a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c58e:	f7fd f9eb 	bl	8009968 <HAL_RCCEx_GetPeriphCLKFreq>
 800c592:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c594:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c596:	2b00      	cmp	r3, #0
 800c598:	d05e      	beq.n	800c658 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c59a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c59c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c59e:	4a39      	ldr	r2, [pc, #228]	@ (800c684 <UART_SetConfig+0x358>)
 800c5a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5ac:	005a      	lsls	r2, r3, #1
 800c5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5b0:	685b      	ldr	r3, [r3, #4]
 800c5b2:	085b      	lsrs	r3, r3, #1
 800c5b4:	441a      	add	r2, r3
 800c5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5c2:	2b0f      	cmp	r3, #15
 800c5c4:	d916      	bls.n	800c5f4 <UART_SetConfig+0x2c8>
 800c5c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5cc:	d212      	bcs.n	800c5f4 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c5ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	f023 030f 	bic.w	r3, r3, #15
 800c5d6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c5d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5da:	085b      	lsrs	r3, r3, #1
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	f003 0307 	and.w	r3, r3, #7
 800c5e2:	b29a      	uxth	r2, r3
 800c5e4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800c5ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c5f0:	60da      	str	r2, [r3, #12]
 800c5f2:	e031      	b.n	800c658 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c5fa:	e02d      	b.n	800c658 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c5fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5fe:	2200      	movs	r2, #0
 800c600:	469a      	mov	sl, r3
 800c602:	4693      	mov	fp, r2
 800c604:	4650      	mov	r0, sl
 800c606:	4659      	mov	r1, fp
 800c608:	f7fd f9ae 	bl	8009968 <HAL_RCCEx_GetPeriphCLKFreq>
 800c60c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800c60e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c610:	2b00      	cmp	r3, #0
 800c612:	d021      	beq.n	800c658 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c618:	4a1a      	ldr	r2, [pc, #104]	@ (800c684 <UART_SetConfig+0x358>)
 800c61a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c61e:	461a      	mov	r2, r3
 800c620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c622:	fbb3 f2f2 	udiv	r2, r3, r2
 800c626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	085b      	lsrs	r3, r3, #1
 800c62c:	441a      	add	r2, r3
 800c62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	fbb2 f3f3 	udiv	r3, r2, r3
 800c636:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c63a:	2b0f      	cmp	r3, #15
 800c63c:	d909      	bls.n	800c652 <UART_SetConfig+0x326>
 800c63e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c644:	d205      	bcs.n	800c652 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c648:	b29a      	uxth	r2, r3
 800c64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	60da      	str	r2, [r3, #12]
 800c650:	e002      	b.n	800c658 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c652:	2301      	movs	r3, #1
 800c654:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c65a:	2201      	movs	r2, #1
 800c65c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c662:	2201      	movs	r2, #1
 800c664:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c66a:	2200      	movs	r2, #0
 800c66c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c670:	2200      	movs	r2, #0
 800c672:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c674:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3750      	adds	r7, #80	@ 0x50
 800c67c:	46bd      	mov	sp, r7
 800c67e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c682:	bf00      	nop
 800c684:	0800ce48 	.word	0x0800ce48

0800c688 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c688:	b480      	push	{r7}
 800c68a:	b083      	sub	sp, #12
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c694:	f003 0308 	and.w	r3, r3, #8
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d00a      	beq.n	800c6b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	430a      	orrs	r2, r1
 800c6b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6b6:	f003 0301 	and.w	r3, r3, #1
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00a      	beq.n	800c6d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	430a      	orrs	r2, r1
 800c6d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6d8:	f003 0302 	and.w	r3, r3, #2
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00a      	beq.n	800c6f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	430a      	orrs	r2, r1
 800c6f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6fa:	f003 0304 	and.w	r3, r3, #4
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d00a      	beq.n	800c718 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	430a      	orrs	r2, r1
 800c716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c71c:	f003 0310 	and.w	r3, r3, #16
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00a      	beq.n	800c73a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	689b      	ldr	r3, [r3, #8]
 800c72a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	430a      	orrs	r2, r1
 800c738:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c73e:	f003 0320 	and.w	r3, r3, #32
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00a      	beq.n	800c75c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	689b      	ldr	r3, [r3, #8]
 800c74c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	430a      	orrs	r2, r1
 800c75a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c764:	2b00      	cmp	r3, #0
 800c766:	d01a      	beq.n	800c79e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	430a      	orrs	r2, r1
 800c77c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c782:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c786:	d10a      	bne.n	800c79e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	430a      	orrs	r2, r1
 800c79c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d00a      	beq.n	800c7c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	430a      	orrs	r2, r1
 800c7be:	605a      	str	r2, [r3, #4]
  }
}
 800c7c0:	bf00      	nop
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b098      	sub	sp, #96	@ 0x60
 800c7d0:	af02      	add	r7, sp, #8
 800c7d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c7dc:	f7f6 fbce 	bl	8002f7c <HAL_GetTick>
 800c7e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f003 0308 	and.w	r3, r3, #8
 800c7ec:	2b08      	cmp	r3, #8
 800c7ee:	d12f      	bne.n	800c850 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c7f4:	9300      	str	r3, [sp, #0]
 800c7f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 f88e 	bl	800c920 <UART_WaitOnFlagUntilTimeout>
 800c804:	4603      	mov	r3, r0
 800c806:	2b00      	cmp	r3, #0
 800c808:	d022      	beq.n	800c850 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c812:	e853 3f00 	ldrex	r3, [r3]
 800c816:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c81a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c81e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	461a      	mov	r2, r3
 800c826:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c828:	647b      	str	r3, [r7, #68]	@ 0x44
 800c82a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c82e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c830:	e841 2300 	strex	r3, r2, [r1]
 800c834:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d1e6      	bne.n	800c80a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2220      	movs	r2, #32
 800c840:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2200      	movs	r2, #0
 800c848:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c84c:	2303      	movs	r3, #3
 800c84e:	e063      	b.n	800c918 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f003 0304 	and.w	r3, r3, #4
 800c85a:	2b04      	cmp	r3, #4
 800c85c:	d149      	bne.n	800c8f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c85e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c862:	9300      	str	r3, [sp, #0]
 800c864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c866:	2200      	movs	r2, #0
 800c868:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 f857 	bl	800c920 <UART_WaitOnFlagUntilTimeout>
 800c872:	4603      	mov	r3, r0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d03c      	beq.n	800c8f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c880:	e853 3f00 	ldrex	r3, [r3]
 800c884:	623b      	str	r3, [r7, #32]
   return(result);
 800c886:	6a3b      	ldr	r3, [r7, #32]
 800c888:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c88c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	461a      	mov	r2, r3
 800c894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c896:	633b      	str	r3, [r7, #48]	@ 0x30
 800c898:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c89a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c89c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c89e:	e841 2300 	strex	r3, r2, [r1]
 800c8a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d1e6      	bne.n	800c878 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	3308      	adds	r3, #8
 800c8b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	e853 3f00 	ldrex	r3, [r3]
 800c8b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f023 0301 	bic.w	r3, r3, #1
 800c8c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	3308      	adds	r3, #8
 800c8c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8ca:	61fa      	str	r2, [r7, #28]
 800c8cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ce:	69b9      	ldr	r1, [r7, #24]
 800c8d0:	69fa      	ldr	r2, [r7, #28]
 800c8d2:	e841 2300 	strex	r3, r2, [r1]
 800c8d6:	617b      	str	r3, [r7, #20]
   return(result);
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d1e5      	bne.n	800c8aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2220      	movs	r2, #32
 800c8e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c8ee:	2303      	movs	r3, #3
 800c8f0:	e012      	b.n	800c918 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2220      	movs	r2, #32
 800c8f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2220      	movs	r2, #32
 800c8fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2200      	movs	r2, #0
 800c90c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c916:	2300      	movs	r3, #0
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3758      	adds	r7, #88	@ 0x58
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b084      	sub	sp, #16
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	603b      	str	r3, [r7, #0]
 800c92c:	4613      	mov	r3, r2
 800c92e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c930:	e049      	b.n	800c9c6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c938:	d045      	beq.n	800c9c6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c93a:	f7f6 fb1f 	bl	8002f7c <HAL_GetTick>
 800c93e:	4602      	mov	r2, r0
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	1ad3      	subs	r3, r2, r3
 800c944:	69ba      	ldr	r2, [r7, #24]
 800c946:	429a      	cmp	r2, r3
 800c948:	d302      	bcc.n	800c950 <UART_WaitOnFlagUntilTimeout+0x30>
 800c94a:	69bb      	ldr	r3, [r7, #24]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d101      	bne.n	800c954 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c950:	2303      	movs	r3, #3
 800c952:	e048      	b.n	800c9e6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f003 0304 	and.w	r3, r3, #4
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d031      	beq.n	800c9c6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	69db      	ldr	r3, [r3, #28]
 800c968:	f003 0308 	and.w	r3, r3, #8
 800c96c:	2b08      	cmp	r3, #8
 800c96e:	d110      	bne.n	800c992 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2208      	movs	r2, #8
 800c976:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c978:	68f8      	ldr	r0, [r7, #12]
 800c97a:	f000 f838 	bl	800c9ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2208      	movs	r2, #8
 800c982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2200      	movs	r2, #0
 800c98a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c98e:	2301      	movs	r3, #1
 800c990:	e029      	b.n	800c9e6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	69db      	ldr	r3, [r3, #28]
 800c998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c99c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c9a0:	d111      	bne.n	800c9c6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c9aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	f000 f81e 	bl	800c9ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2220      	movs	r2, #32
 800c9b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c9c2:	2303      	movs	r3, #3
 800c9c4:	e00f      	b.n	800c9e6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	69da      	ldr	r2, [r3, #28]
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	4013      	ands	r3, r2
 800c9d0:	68ba      	ldr	r2, [r7, #8]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	bf0c      	ite	eq
 800c9d6:	2301      	moveq	r3, #1
 800c9d8:	2300      	movne	r3, #0
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	461a      	mov	r2, r3
 800c9de:	79fb      	ldrb	r3, [r7, #7]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d0a6      	beq.n	800c932 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c9ee:	b480      	push	{r7}
 800c9f0:	b095      	sub	sp, #84	@ 0x54
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9fe:	e853 3f00 	ldrex	r3, [r3]
 800ca02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ca04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	461a      	mov	r2, r3
 800ca12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca14:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca16:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ca1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ca1c:	e841 2300 	strex	r3, r2, [r1]
 800ca20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ca22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d1e6      	bne.n	800c9f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	3308      	adds	r3, #8
 800ca2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca30:	6a3b      	ldr	r3, [r7, #32]
 800ca32:	e853 3f00 	ldrex	r3, [r3]
 800ca36:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ca3e:	f023 0301 	bic.w	r3, r3, #1
 800ca42:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	3308      	adds	r3, #8
 800ca4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ca4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca54:	e841 2300 	strex	r3, r2, [r1]
 800ca58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d1e3      	bne.n	800ca28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d118      	bne.n	800ca9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	e853 3f00 	ldrex	r3, [r3]
 800ca74:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	f023 0310 	bic.w	r3, r3, #16
 800ca7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	461a      	mov	r2, r3
 800ca84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca86:	61bb      	str	r3, [r7, #24]
 800ca88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca8a:	6979      	ldr	r1, [r7, #20]
 800ca8c:	69ba      	ldr	r2, [r7, #24]
 800ca8e:	e841 2300 	strex	r3, r2, [r1]
 800ca92:	613b      	str	r3, [r7, #16]
   return(result);
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d1e6      	bne.n	800ca68 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2220      	movs	r2, #32
 800ca9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2200      	movs	r2, #0
 800caa6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2200      	movs	r2, #0
 800caac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800caae:	bf00      	nop
 800cab0:	3754      	adds	r7, #84	@ 0x54
 800cab2:	46bd      	mov	sp, r7
 800cab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab8:	4770      	bx	lr

0800caba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800caba:	b480      	push	{r7}
 800cabc:	b085      	sub	sp, #20
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d101      	bne.n	800cad0 <HAL_UARTEx_DisableFifoMode+0x16>
 800cacc:	2302      	movs	r3, #2
 800cace:	e027      	b.n	800cb20 <HAL_UARTEx_DisableFifoMode+0x66>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2201      	movs	r2, #1
 800cad4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2224      	movs	r2, #36	@ 0x24
 800cadc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f022 0201 	bic.w	r2, r2, #1
 800caf6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cafe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	68fa      	ldr	r2, [r7, #12]
 800cb0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2220      	movs	r2, #32
 800cb12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3714      	adds	r7, #20
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr

0800cb2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d101      	bne.n	800cb44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cb40:	2302      	movs	r3, #2
 800cb42:	e02d      	b.n	800cba0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2201      	movs	r2, #1
 800cb48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2224      	movs	r2, #36	@ 0x24
 800cb50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f022 0201 	bic.w	r2, r2, #1
 800cb6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	689b      	ldr	r3, [r3, #8]
 800cb72:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	683a      	ldr	r2, [r7, #0]
 800cb7c:	430a      	orrs	r2, r1
 800cb7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 f84f 	bl	800cc24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	68fa      	ldr	r2, [r7, #12]
 800cb8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2220      	movs	r2, #32
 800cb92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb9e:	2300      	movs	r3, #0
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3710      	adds	r7, #16
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d101      	bne.n	800cbc0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cbbc:	2302      	movs	r3, #2
 800cbbe:	e02d      	b.n	800cc1c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2224      	movs	r2, #36	@ 0x24
 800cbcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f022 0201 	bic.w	r2, r2, #1
 800cbe6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	689b      	ldr	r3, [r3, #8]
 800cbee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	683a      	ldr	r2, [r7, #0]
 800cbf8:	430a      	orrs	r2, r1
 800cbfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 f811 	bl	800cc24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2220      	movs	r2, #32
 800cc0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cc1a:	2300      	movs	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b085      	sub	sp, #20
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d108      	bne.n	800cc46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2201      	movs	r2, #1
 800cc38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc44:	e031      	b.n	800ccaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cc46:	2308      	movs	r3, #8
 800cc48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc4a:	2308      	movs	r3, #8
 800cc4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	0e5b      	lsrs	r3, r3, #25
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	f003 0307 	and.w	r3, r3, #7
 800cc5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	0f5b      	lsrs	r3, r3, #29
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	f003 0307 	and.w	r3, r3, #7
 800cc6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc6e:	7bbb      	ldrb	r3, [r7, #14]
 800cc70:	7b3a      	ldrb	r2, [r7, #12]
 800cc72:	4911      	ldr	r1, [pc, #68]	@ (800ccb8 <UARTEx_SetNbDataToProcess+0x94>)
 800cc74:	5c8a      	ldrb	r2, [r1, r2]
 800cc76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cc7a:	7b3a      	ldrb	r2, [r7, #12]
 800cc7c:	490f      	ldr	r1, [pc, #60]	@ (800ccbc <UARTEx_SetNbDataToProcess+0x98>)
 800cc7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc80:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc84:	b29a      	uxth	r2, r3
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc8c:	7bfb      	ldrb	r3, [r7, #15]
 800cc8e:	7b7a      	ldrb	r2, [r7, #13]
 800cc90:	4909      	ldr	r1, [pc, #36]	@ (800ccb8 <UARTEx_SetNbDataToProcess+0x94>)
 800cc92:	5c8a      	ldrb	r2, [r1, r2]
 800cc94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cc98:	7b7a      	ldrb	r2, [r7, #13]
 800cc9a:	4908      	ldr	r1, [pc, #32]	@ (800ccbc <UARTEx_SetNbDataToProcess+0x98>)
 800cc9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc9e:	fb93 f3f2 	sdiv	r3, r3, r2
 800cca2:	b29a      	uxth	r2, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ccaa:	bf00      	nop
 800ccac:	3714      	adds	r7, #20
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr
 800ccb6:	bf00      	nop
 800ccb8:	0800ce60 	.word	0x0800ce60
 800ccbc:	0800ce68 	.word	0x0800ce68

0800ccc0 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f043 0202 	orr.w	r2, r3, #2
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	685a      	ldr	r2, [r3, #4]
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	021b      	lsls	r3, r3, #8
 800cce0:	431a      	orrs	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f023 0202 	bic.w	r2, r3, #2
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	601a      	str	r2, [r3, #0]
}
 800ccf2:	bf00      	nop
 800ccf4:	370c      	adds	r7, #12
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr

0800ccfe <memset>:
 800ccfe:	4402      	add	r2, r0
 800cd00:	4603      	mov	r3, r0
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d100      	bne.n	800cd08 <memset+0xa>
 800cd06:	4770      	bx	lr
 800cd08:	f803 1b01 	strb.w	r1, [r3], #1
 800cd0c:	e7f9      	b.n	800cd02 <memset+0x4>
	...

0800cd10 <__libc_init_array>:
 800cd10:	b570      	push	{r4, r5, r6, lr}
 800cd12:	4d0d      	ldr	r5, [pc, #52]	@ (800cd48 <__libc_init_array+0x38>)
 800cd14:	2600      	movs	r6, #0
 800cd16:	4c0d      	ldr	r4, [pc, #52]	@ (800cd4c <__libc_init_array+0x3c>)
 800cd18:	1b64      	subs	r4, r4, r5
 800cd1a:	10a4      	asrs	r4, r4, #2
 800cd1c:	42a6      	cmp	r6, r4
 800cd1e:	d109      	bne.n	800cd34 <__libc_init_array+0x24>
 800cd20:	4d0b      	ldr	r5, [pc, #44]	@ (800cd50 <__libc_init_array+0x40>)
 800cd22:	2600      	movs	r6, #0
 800cd24:	4c0b      	ldr	r4, [pc, #44]	@ (800cd54 <__libc_init_array+0x44>)
 800cd26:	f000 f817 	bl	800cd58 <_init>
 800cd2a:	1b64      	subs	r4, r4, r5
 800cd2c:	10a4      	asrs	r4, r4, #2
 800cd2e:	42a6      	cmp	r6, r4
 800cd30:	d105      	bne.n	800cd3e <__libc_init_array+0x2e>
 800cd32:	bd70      	pop	{r4, r5, r6, pc}
 800cd34:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd38:	3601      	adds	r6, #1
 800cd3a:	4798      	blx	r3
 800cd3c:	e7ee      	b.n	800cd1c <__libc_init_array+0xc>
 800cd3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd42:	3601      	adds	r6, #1
 800cd44:	4798      	blx	r3
 800cd46:	e7f2      	b.n	800cd2e <__libc_init_array+0x1e>
 800cd48:	0800ce78 	.word	0x0800ce78
 800cd4c:	0800ce78 	.word	0x0800ce78
 800cd50:	0800ce78 	.word	0x0800ce78
 800cd54:	0800ce7c 	.word	0x0800ce7c

0800cd58 <_init>:
 800cd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd5a:	bf00      	nop
 800cd5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd5e:	bc08      	pop	{r3}
 800cd60:	469e      	mov	lr, r3
 800cd62:	4770      	bx	lr

0800cd64 <_fini>:
 800cd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd66:	bf00      	nop
 800cd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd6a:	bc08      	pop	{r3}
 800cd6c:	469e      	mov	lr, r3
 800cd6e:	4770      	bx	lr
